负载均衡的机制是什么？Azure 为 Web 应用、云服务和虚拟机都提供了免费的负载均衡能力。关于负载均衡我们需要注意的一点就是它对 Session 的处理。一般来说，传统的负载均衡器有一种叫 Session 粘滞(Sticky)的机制，也就是会根据用户的 Session 信息将用户请求转发到固定的一台机器上，这样，如果应用程序在服务器端存储 Session 信息，那么用户与服务器交互就会顺畅，否则，就会发生用户 Session 丢失和应用逻辑异常。在 Azure 上，云服务和虚拟机的负载均衡器都是纯网络层面的，其均衡机制是轮流将请求发给后端的服务器，不支持 Session 粘滞. 这就要求后台服务器是无状态的，也就是无论将客户请求发给任何一个服务器，都可以得到正确的处理。如果现有的应用是有状态的，那么有两种解决办法：1.   将 Session 信息在所有服务器间共享。具体实现方式包括：分布式缓存（比如 Memcache，Azure Caching ), Session 持久化（.NET 和 Java都支持用数据库存储 Session 信息，而 Azure 还支持用 Cache 和 Azure 存储持久化 .NET Session 信息:[http://blogs.msdn.com/b/cie/archive/2013/05/17/session-state-management-in-windows-azure-web-roles.aspx](http://blogs.msdn.com/b/cie/archive/2013/05/17/session-state-management-in-windows-azure-web-roles.aspx)） 2.   在虚拟机上自行配置负载均衡集群，比如 Squid ( Linux ), IIS ARR ( Windows )。微软的 MSOpenTech 团队提供了一个自动配置 IIS ARR 的方法：[https://github.com/MSOpenTech/WindowsAzureToolkitForEclipseWithJava/tree/master/Utils/ARRConfigurationAgent](//github.com/MSOpenTech/WindowsAzureToolkitForEclipseWithJava/tree/master/Utils/ARRConfigurationAgent)。它原本是为了配置云服务里面的 Java 集群的，也可以用来配置其他 IIS 集群Web 应用的负载均衡稍有不同，它的负载均衡是由 IIS ARR 实现的，因此它原生支持 Session 粘滞。其实现原理是，在每个响应里面添加 ARRAffinity 这个 Cookie，这样，下次同一个用户的请求就会被识别，然后发送到上次的服务器上。也就是说，不论应用是否主动写入 Cookie 或是存取 Session，IIS 都会为每个用户保持服务器的绑定关系。