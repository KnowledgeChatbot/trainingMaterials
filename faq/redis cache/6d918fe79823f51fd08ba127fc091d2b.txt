Azure Redis 缓存是否有本地模拟器？\n\nAzure Redis 缓存没有本地模拟器，但可以在本地计算机上从 [Redis 命令行工具](https://github.com/MSOpenTech/redis/releases/) 运行 MSOpenTech 版本的 redis-server.exe 并连接到它，以获得与本地缓存模拟器相似的体验，如以下示例所示：\n\n``\n\n如果需要，可以选择配置 [redis.conf](http://redis.io/topics/config) 文件，以更好地匹配联机 Azure Redis 缓存的[默认缓存设置](https://docs.azure.cn/redis-cache/cache-configure#default-redis-server-configuration)。\n\n### 如何运行 Redis 命令？\n\n可以使用 [Redis 命令](http://redis.io/commands#)中列出的任何命令，但 [Azure Redis 缓存中不支持的 Redis 命令](https://docs.azure.cn/redis-cache/cache-configure#redis-commands-not-supported-in-azure-redis-cache)所列的命令除外。 可以使用多个选项来运行 Redis 命令。\n\n*   如果采用标准或高级缓存，可以使用 [Redis 控制台](https://docs.azure.cn/redis-cache/cache-configure#redis-console)运行 Redis 命令。 Redis 控制台提供了一种在 Azure 门户中安全地运行 Redis 命令的方式。\n*   还可以使用 Redis 命令行工具。 若要使用这些工具，请执行以下步骤：\n*   下载 [Redis 命令行工具](https://github.com/MSOpenTech/redis/releases/)。\n*   使用 `redis-cli.exe`连接到缓存。 使用 -h 开关传入缓存终结点，使用 -a 传入密钥，如以下示例中所示：\n*   ``\n\nNote\n\nRedis 命令行工具对 SSL 端口不起作用，但是，可以[根据适用于 Redis 预览版的 ASP.NET 会话状态提供程序通告](http://blogs.msdn.com/b/webdev/archive/2014/05/12/announcing-asp-net-session-state-provider-for-redis-preview-release.aspx)中的说明，使用 `stunnel` 等实用程序安全地将这些工具连接到 SSL。\n\n\n### Azure Redis 缓存为何不像某些其他 Azure 服务一样提供 MSDN 类库参考？\n\nAzure Redis 缓存基于流行的开源 Redis 缓存，可以通过各种 [Redis 客户端](http://redis.io/clients) 进行访问，这些客户端适用于许多编程语言。 每个客户端有自身的 API，用于通过 [Redis 命令](http://redis.io/commands)调用 Redis 缓存实例。\n\n由于客户端各不相同，因此 MSDN 上未提供统一的类引用，每个客户端都有自己的参考文档。 除了参考文档以外，还可以参阅多个教程，这些教程介绍了如何通过不同的语言和缓存客户端来开始使用 Azure Redis 缓存。 要访问这些教程，请参阅[如何使用 Azure Redis 缓存](https://docs.azure.cn/redis-cache/cache-dotnet-how-to-use-azure-redis-cache)，并单击文章顶部语言切换器中的所需语言。\n\n### 是否可将 Azure Redis 缓存用作 PHP 会话缓存？\n\n可以。若要使用 Azure Redis 缓存作为 PHP 会话缓存，请在 `session.save_path` 中指定 Azure Redis 缓存实例的连接字符串。\n\n\nImportant\n\n使用 Azure Redis 缓存作为 PHP 会话缓存时，必须对用于连接到缓存的安全密钥进行 URL 编码，如以下示例所示：\n\n``\n\n如果未对密钥进行 URL 编码，可能会收到类似于以下消息的异常： `Failed to parse session.save_path`\n\n\n有关在 PhpRedis 客户端中使用 Redis 缓存作为 PHP 会话缓存的详细信息，请参阅 [PHP Session handler](https://github.com/phpredis/phpredis#php-session-handler)（PHP 会话处理程序）。\n\n### 什么是 Redis 数据库？\n\nRedis 数据库就是同一 Redis 实例中的数据的逻辑隔离。 缓存内存在所有数据库之间共享，给定数据库的实际内存消耗取决于该数据库中存储的键/值。 例如，C6 缓存具有 53 GB 的内存。 可以选择将全部 53 GB 放置在一个数据库中，也可以将其分配到多个数据库中。 \n\n\nNote\n\n使用启用了群集功能的高级 Azure Redis 缓存时，仅数据库 0 可用。 此限制是固有的 Redis 限制，并不特定于 Azure Redis 缓存。 有关详细信息，请参阅[使用群集功能时，是否需要对客户端应用程序进行更改？](https://docs.azure.cn/redis-cache/cache-how-to-premium-clustering#do-i-need-to-make-any-changes-to-my-client-application-to-use-clustering)\n\n\n### 何时应启用非 SSL 端口来连接 Redis？\n\nRedis 服务器本身不支持 SSL，但 Azure Redis 缓存可以。 如果要连接到 Azure Redis 缓存并且客户端支持 SSL（如 StackExchange.Redis），则你应使用 SSL。\n\n\nNote\n\n默认情况下，为新的 Azure Redis 缓存实例禁用了非 SSL 端口。 如果客户端不支持 SSL，则必须根据[在 Azure Redis 缓存中配置缓存](https://docs.azure.cn/redis-cache/cache-configure)一文中的[访问端口](https://docs.azure.cn/redis-cache/cache-configure#access-ports)部分中的说明启用非 SSL 端口。\n\n\n`redis-cli` 等 Redis 工具对 SSL 端口不起作用，但是，可以[根据适用于 Redis 预览版的 ASP.NET 会话状态提供程序通告](http://blogs.msdn.com/b/webdev/archive/2014/05/12/announcing-asp-net-session-state-provider-for-redis-preview-release.aspx)中的说明，使用 `stunnel` 等实用程序安全地将这些工具连接到 SSL。\n\n有关下载 Redis 工具的说明，请参阅[如何运行 Redis 命令？](https://docs.azure.cn/redis-cache/#cache-commands)部分。\n\n### 生产的一些最佳做法是什么？\n\n*   [StackExchange.Redis 最佳做法](https://docs.azure.cn/redis-cache/#stackexchangeredis-best-practices)\n*   [配置和概念](https://docs.azure.cn/redis-cache/#configuration-and-concepts)\n*   [性能测试](https://docs.azure.cn/redis-cache/#performance-testing)\n\n#### StackExchange.Redis 最佳做法\n\n*   将 `AbortConnect` 设置为 false，并使 ConnectionMultiplexer 自动重新连接。 [请参阅此处了解详细信息](https://gist.github.com/JonCole/36ba6f60c274e89014dd#file-se-redis-setabortconnecttofalse-md)。\n*   重复使用 ConnectionMultiplexer - 不要为每个请求创建一个新的 ConnectionMultiplexe。 建议使用[此处所示](https://docs.azure.cn/redis-cache/cache-dotnet-how-to-use-azure-redis-cache#connect-to-the-cache)的 `` 模式。\n*   具有较小值的 Redis 工作性能最佳，因此请考虑将较大数据分成多个密钥。 阅读[本文](https://gist.github.com/JonCole/db0e90bedeb3fc4823c2#large-requestresponse-size)了解较大值可能引起的问题示例。\n*   配置 [ThreadPool 设置](https://docs.azure.cn/redis-cache/#important-details-about-threadpool-growth) ，以免超时。\n*   将默认 connectTimeout 至少设置为 5 秒。 出现网络故障时，此时间间隔会给 StackExchange.Redis 足够的时间来重新建立连接。\n*   注意与正在运行的不同操作相关的性能成本。 例如，`KEYS` 命令是 O(n) 操作，应当避免。 [redis.io](http://redis.io/commands/) 站点具有关于其支持的每个操作的时间复杂性的详细信息。 单击每个命令以查看每个操作的复杂程度。\n\n#### 配置和概念\n\n*   针对生产系统使用标准层或高级层。 基本层是没有数据复制和 SLA 的单节点系统。 此外，使用至少一个 C1 缓存。 C0 缓存通常用于简单的开发/测试方案。\n*   请记住，Redis 是 内存中 数据存储区。 阅读[本文](https://gist.github.com/JonCole/b6354d92a2d51c141490f10142884ea4#file-whathappenedtomydatainredis-md)，了解可能出现数据丢失的情况。\n*   开发系统以便处理[由于修补和故障转移](https://gist.github.com/JonCole/317fe03805d5802e31cfa37e646e419d#file-azureredis-patchingexplained-md)引起的连接故障。\n\n#### 性能测试\n\n*   使用 `redis-benchmark.exe` 启动以在编写性能测试前感受可能的吞吐量。 因为 `redis-benchmark` 不支持 SSL，因此，在运行测试之前必须[通过 Azure 门户启用非 SSL 端口](https://docs.azure.cn/redis-cache/cache-configure#access-ports)。 例如，请参阅 [如何制定基准和测试缓存的性能？](https://docs.azure.cn/redis-cache/#how-can-i-benchmark-and-test-the-performance-of-my-cache)\n*   用于测试的客户端 VM 应与 Redis 缓存实例位于同一区域。\n*   建议为客户端使用 Dv2 VM 系列，因为该系列具有更好的硬件，会提供最佳的结果。\n*   确保选择的客户端 VM 至少与正在测试的缓存拥有相同的计算和带宽容量。\n*   如果是在 Windows 设备上操作，请在客户端计算机上启用 VRSS。 [请参阅此处了解详细信息](https://technet.microsoft.com/library/dn383582.aspx)。\n*   高级层 Redis 实例具有更好的网络延迟和吞吐量，因为它们是在 CPU 和网络两方面都更好的硬件上运行的。\n\n### 使用常见 Redis 命令时要注意哪些问题？\n\n*   对于某些需要较长时间才能完成的 Redis 命令，在未了解这些命令造成的影响的情况下，不应运行这些命令。\n\n    *   例如，不要在生产环境中运行 [KEYS](http://redis.io/commands/keys) 命令，因为它可能需要很长时间才能返回，具体时间取决于键数。 Redis 是单线程服务器，每次只能处理一个命令。 如果在 KEYS 后面发出了其他命令，则这些命令只会在处理完 KEYS 命令后才会得到处理。 [redis.io 站点](http://redis.io/commands/) 具有关于其支持的每个操作的时间复杂性的详细信息。 单击每个命令以查看每个操作的复杂程度。\n*   键大小 - 应使用小键/值还是大键/值？ 通常这取决于方案。 如果方案需要较大的键，则可调整 ConnectionTimeout 和重试值，并调整重试逻辑。 从 Redis 服务器的角度来看，值越小，性能就越好。\n*   这些考量并不意味着不能在 Redis 中存储较大值，只是要注意以下事项。 延迟会提高。 如果采用一个较大的数据集和一个较小的数据集，则可以使用多个 ConnectionMultiplexer 实例，并根据 [StackExchange.Redis 配置选项有什么作用](https://docs.azure.cn/redis-cache/#cache-configuration)部分中所述，为每个实例配置一组不同的超时和重试值。\n\n### 如何进行基准检验和测试缓存的性能？\n\n*   [启用缓存诊断](https://docs.azure.cn/redis-cache/cache-how-to-monitor#enable-cache-diagnostics)，以便可以[监视](https://docs.azure.cn/redis-cache/cache-how-to-monitor)缓存的运行状况。 可以在 Azure 门户中查看指标，也可以使用所选的工具[下载和查看](https://github.com/rustd/RedisSamples/tree/master/CustomMonitoring)这些指标。\n*   可以使用 redis-benchmark.exe 对 Redis 服务器进行负载测试。\n*   确保负载测试客户端和 Redis 缓存位于同一区域。\n*   使用 redis-cli.exe，并使用 INFO 命令监视缓存。\n*   如果负载导致出现大量内存碎片，则你应该扩展为更大的缓存大小。\n*   有关下载 Redis 工具的说明，请参阅[如何运行 Redis 命令？](https://docs.azure.cn/redis-cache/#cache-commands)部分。\n\n下面的命令提供了有关如何使用 redis-benchmark.exe 的示例。 为获得准确的结果，请从与缓存位于同一区域的 VM 运行这些命令。\n\n*   \n\n使用 1 k 有效负载测试管道 SET 请求\n\n`redis-benchmark.exe -h **yourcache**.redis.cache.chinacloudapi.cn -a **yourAccesskey** -t SET -n 1000000 -d 1024 -P 50`\n\n*   \n\n使用 1 k 有效负载测试管道 GET 请求。 注意：首先运行上面显示的 SET 测试以填充缓存\n\n`redis-benchmark.exe -h **yourcache**.redis.cache.chinacloudapi.cn -a **yourAccesskey** -t GET -n 1000000 -d 1024 -P 50`\n\n### 有关线程池增长的重要详细信息\n\nCLR 线程池具有两种类型的线程 -"辅助角色"和"I/O 完成端口"（又称为 IOCP）线程。\n\n*   对于诸如处理 `Task.Run(...)` 或 `ThreadPool.QueueUserWorkItem(...)` 方法这类事务，使用辅助角色线程。 需要在后台线程上进行工作时，CLR 中的各种组件也会使用这些线程。\n*   进行异步 IO（例如从网络进行读取）时，使用 IOCP 线程。\n\n线程池按需提供新的辅助角色线程或 I/O 完成线程（没有任何限制），直到它达到每种线程类型的"最小值"设置。 默认情况下，最小线程数设置为系统上的处理器数。\n\n一旦现有（忙碌）线程数达到"最小"线程数，线程池便会将插入新线程的速率限制为每 500 毫秒一个线程。 通常情况下，如果系统中出现需要 IOCP 线程的突发工作，则它会非常快速地处理该工作。 但是，如果突发工作多于配置的"最小值"设置，则在处理某些工作时会出现一定的延迟，因为 ThreadPool 会等待发生以下两种情况之一。\n\n1.  一个现有线程释放，以便处理工作。\n2.  在 500 毫秒内没有任何现有线程释放，因此会创建一个新线程。\n\n基本上，这意味着忙碌线程数大于最小线程数，在应用程序处理网络流量之前可能需要付出 500 毫秒延迟。 此外请务必注意，当现有线程保持空闲状态的时间超过 15 秒（基于我记得的内容）时，会清理它，并且这种增长和收缩的循环可能会重复。\n\n如果我们考虑一个来自 StackExchange.Redis（内部版本 1.0.450 或更高版本）的示例错误消息，会看到它现在会打印 ThreadPool 统计信息（请参阅下面的 IOCP 和辅助角色详细信息）。\n\n`System.TimeoutException: Timeout performing GET MyKey, inst: 2, mgr: Inactive, queue: 6, qu: 0, qs: 6, qc: 0, wr: 0, wq: 0, in: 0, ar: 0, IOCP: (Busy=6,Free=994,Min=4,Max=1000), WORKER: (Busy=3,Free=997,Min=4,Max=1000) `\n\n在上面的示例中，可以看到对于 IOCP 线程有 6 个忙碌线程，而系统配置为允许最少 4 个线程。 在这种情况下，客户端可能会遇到两个 500 毫秒延迟，因为 6 > 4。\n\n请注意，如果 IOCP 或辅助角色线程受到限制，则 StackExchange.Redis 可以会超时。\n\n### 建议\n\n考虑到此信息，我们强烈建议客户将 IOCP 和辅助角色线程的最小配置值设置为大于默认值。 我们无法提供有关此值应是多少的通用指导，因为一个应用程序的合适值对于另一个应用程序会太高/低。 此设置还可能会影响复杂应用程序其他部分的性能，因此每个客户需要按照其特定需求来微调此设置。 开始时设置为 200 或 300 会比较好，随后可进行测试并根据需要进行调整。\n\n如何配置此设置：\n\n*   \n\n在 ASP.NET 中，可在 web.config 中的 `` 配置元素下使用["minIoThreads"配置设置](https://msdn.microsoft.com/library/vstudio/7w2sway1(v=vs.100).aspx)。如果在 Azure 网站内部运行，则此设置不会通过配置选项进行公开。 但是，应该仍然能够通过 global.asax.cs 中的 Application_Start 方法以编程方式配置此设置置（请参阅下文）。\n\n\nNote\n\n此配置元素中指定的值是按核心设置。 例如，如果使用 4 核计算机，并且希望 minIOThreads 设置在运行时为 200，则使用 ``。\n\n*   \n\n在 ASP.NET 外部，可使用 [ThreadPool.SetMinThreads(...)](https://msdn.microsoft.com/library/system.threading.threadpool.setminthreads.aspx) API。\n\n### 启用服务器 GC，以便在使用 StackExchange.Redis 时在客户端上获取更多吞吐量\n\n启用服务器 GC 可以在使用 StackExchange.Redis 时优化客户端并提供更好的性能和吞吐量。 有关服务器 GC 以及如何启用它的详细信息，请参阅以下文章：\n\n*   [若要启用服务器 GC](https://msdn.microsoft.com/library/ms229357.aspx)\n*   [垃圾回收基础](https://msdn.microsoft.com/library/ee787088.aspx)\n*   [垃圾回收和性能](https://msdn.microsoft.com/library/ee851764.aspx)\n\n### 围绕连接的性能注意事项\n\n每个定价层都有不同的客户端连接、内存和带宽的限制。 虽然每个缓存大小最多允许一定数量的连接，但与 Redis 的每个连接都具有其关联的开销。 此类开销的一个示例是，由于 TLS/SSL 加密而导致的 CPU 和内存使用。 给定缓存大小的最大连接限制假定轻负载缓存。 如果连接开销的负载和客户端操作的负载超出了系统容量，那么即使未超出当前缓存大小的连接限制，缓存也可能会遇到容量问题。\n\n有关每个层的不同连接限制的详细信息，请参阅 [Azure Redis 缓存定价](https://www.azure.cn/pricing/details/redis-cache/)。 有关连接和其他默认配置的详细信息，请参阅[默认 Redis 服务器配置](https://docs.azure.cn/redis-cache/cache-configure#default-redis-server-configuration)。\n\n### 如何监视缓存的运行状况和性能？\n\n可以在 [Azure 门户](https://portal.azure.cn/)中监视 Azure Redis 缓存实例。 可以查看度量值、将度量值图表固定到启动板、自定义监视图表的日期和时间范围、在图表中添加和删除度量值，以及设置符合特定条件时发出的警报。 有关详细信息，请参阅 [Monitor Azure Redis Cache](https://docs.azure.cn/redis-cache/cache-how-to-monitor)（监视 Azure Redis 缓存）。\n\n借助这些工具，可以监视 Azure Redis 缓存实例的运行状况，以及管理缓存应用程序。 有关详细信息，请参阅[如何配置 Azure Redis 缓存](https://docs.azure.cn/redis-cache/cache-configure)的"支持和故障排除设置"部分。\n\n### 为何会出现超时？\n\n超时发生在用来与 Redis 通信的客户端中。 将某个命令发送到 Redis 服务器后，该命令会排队，Redis 服务器最终会提取该命令并执行它。 但是，客户端在此过程中可能会超时，在这种情况下，会在调用端引发异常。 有关排查超时问题的详细信息，请参阅[客户端故障排除](https://docs.azure.cn/redis-cache/cache-how-to-troubleshoot#client-side-troubleshooting)和 [StackExchange.Redis 超时异常](https://docs.azure.cn/redis-cache/cache-how-to-troubleshoot#stackexchangeredis-timeout-exceptions)。\n\n### 客户端为何与缓存断开连接？\n\n下面是缓存断开连接的一些常见原因。\n\n*   客户端的原因\n\n    *   已重新部署客户端应用程序。\n    *   客户端应用程序执行了缩放操作。\n\n    *   对于云服务或 Web 应用，原因可能在于自动缩放。\n    *   客户端上的网络层已更改。\n    *   客户端中或客户端与服务器之间的网络节点中发生暂时性错误。\n    *   已达到带宽阈值限制。\n    *   占用大量 CPU 的操作花费了太长时间才完成。\n*   服务器端的原因\n\n    *   在标准缓存产品上，Azure Redis 缓存服务启动了从主节点到辅助节点的故障转移。\n    *   Azure 正在修补已部署缓存的实例\n\n    *   原因可能是 Redis 服务器更新或常规 VM 维护。\n\n### 哪种 Azure 缓存产品适合我？\n\n\n\nImportant\n\n按照去年的 [公告](https://azure.microsoft.com/blog/azure-managed-cache-and-in-role-cache-services-to-be-retired-on-11-30-2016/)，已于 2016 年 11 月 30 日 停用 Azure 托管缓存服务和 Azure 角色中缓存服务。 我们建议使用 [Azure Redis 缓存](https://docs.azure.cn/zh-cn/redis-cache/)。 有关迁移的信息，请参阅[从托管缓存服务迁移到 Azure Redis 缓存](https://docs.azure.cn/redis-cache/cache-migrate-to-redis)。\n\n\n### Azure Redis 缓存\n\nAzure Redis 缓存已正式发布，最大大小为 53 GB，且其可用性 SLA 为 99.9%。 全新[高级级别](https://docs.azure.cn/redis-cache/cache-premium-tier-intro)提供的最大大小为 530 GB，且支持群集、VNET 和持久性，并附带 99.9% SLA。\n\nAzure Redis 缓存使客户能够使用 Azure.cn 管理的安全专用 Redis 缓存。 有了此产品，用户就可以利用 Redis 提供的丰富功能集和生态系统，并可以从 Azure.cn 获得可靠的托管和监控。\n\n与仅处理键/值对的传统缓存不同，Redis 因其高性能的数据类型而受欢迎。 Redis 还支持对这些类型运行原子操作，如在字符串后面追加内容；递增哈希中的值；推送到列表；计算交集、并集和差集，或者获取排序集中排名最高的成员。 其他功能包括支持事务、发布/订阅、Lua 脚本、具有有限生存时间的键和配置设置，使 Redis 在行为上更类似于传统缓存。\n\nRedis 取得成功的另一个重要方面是围绕它构建了健康而充满活力的开源生态系统。 这反映在可通过多种语言使用各种不同的 Redis 客户端。 此生态系统和广泛的客户端使得 Azure Redis 缓存几乎可供在 Azure 内生成的任何工作负荷使用。\n\n有关如何开始使用 Azure Redis 缓存的详细信息，请参阅[如何使用 Azure Redis 缓存](https://docs.azure.cn/redis-cache/cache-dotnet-how-to-use-azure-redis-cache)和 [Azure Redis 缓存文档](https://docs.azure.cn/redis-cache/index)。\n\n### 托管缓存服务\n\n[托管缓存服务已于 2016 年 11 月 30 日停用。](https://azure.microsoft.com/blog/azure-managed-cache-and-in-role-cache-services-to-be-retired-on-11-30-2016/)\n\n若要查看已存档的文档，请参阅[已存档的托管缓存服务文档](https://msdn.microsoft.com/library/azure/dn386094.aspx)。\n\n### 角色中缓存\n\n[角色中缓存已于 2016 年 11 月 30 日停用。](https://azure.microsoft.com/blog/azure-managed-cache-and-in-role-cache-services-to-be-retired-on-11-30-2016/)\n\n若要查看已存档的文档，请参阅[已存档的角色中缓存文档](https://msdn.microsoft.com/library/azure/dn386103.aspx)。\n