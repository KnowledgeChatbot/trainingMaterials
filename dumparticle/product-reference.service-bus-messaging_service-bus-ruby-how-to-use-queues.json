{"Title":"如何通过 Ruby 使用 Azure 服务总线队列","Description":"了解如何在 Azure 中使用服务总线队列。 用 Ruby 编写的代码示例。","Content":"# <a name=\"how-to-use-service-bus-queues\"></a>如何使用服务总线队列\r [!INCLUDE [service-bus-selector-queues](../../includes/service-bus-selector-queues.md)]\r \r 本指南介绍如何使用服务总线队列。 相关示例用 Ruby 编写且使用 Azure gem。 涉及的方案包括“创建队列、发送和接收消息”以及“删除队列”。 有关服务总线队列的详细信息，请参阅 [后续步骤](#next-steps) 部分。\r \r [!INCLUDE [howto-service-bus-queues](../../includes/howto-service-bus-queues.md)]\r \r [!INCLUDE [service-bus-create-namespace-portal](../../includes/service-bus-create-namespace-portal.md)]\r    \r [!INCLUDE [service-bus-ruby-setup](../../includes/service-bus-ruby-setup.md)]\r \r ## <a name=\"how-to-create-a-queue\"></a>如何创建队列\r 可以通过 **Azure::ServiceBusService** 对象处理队列。 若要创建队列，请使用 `create_queue()` 方法。 以下示例创建一个队列或输出任何错误。\r \r ```ruby\r azure_service_bus_service = Azure::ServiceBus::ServiceBusService.new(sb_host, { signer: signer})\r begin\r   queue = azure_service_bus_service.create_queue(\"test-queue\")\r rescue\r   puts $!\r end\r ```\r \r 还可以通过其他选项传递 **Azure::ServiceBus::Queue** 对象，这些选项可用于重写默认队列设置，如消息生存时间或最大队列大小。 以下示例演示了如何将最大队列大小设置为 5 GB，将生存时间设置为 1 分钟：\r \r ```ruby\r queue = Azure::ServiceBus::Queue.new(\"test-queue\")\r queue.max_size_in_megabytes = 5120\r queue.default_message_time_to_live = \"PT1M\"\r \r queue = azure_service_bus_service.create_queue(queue)\r ```\r \r ## <a name=\"how-to-send-messages-to-a-queue\"></a>如何向队列发送消息\r 要向服务总线队列发送消息，应用程序需对 Azure::ServiceBusService 对象调用 `send_queue_message()` 方法。 发往服务总线队列的消息以及从服务总线队列接收的消息是 **Azure::ServiceBus::BrokeredMessage** 对象，它们具有一组标准属性（如 `label` 和 `time_to_live`）、一个用于保存自定义的应用程序特定属性的字典和大量任意应用程序数据。 应用程序可以通过将字符串值作为消息传送设置消息正文，任何必需的标准属性会用默认值填充。\r \r 以下示例演示如何使用 `send_queue_message()` 向名为 `test-queue` 的队列发送一条测试消息：\r \r ```ruby\r message = Azure::ServiceBus::BrokeredMessage.new(\"test queue message\")\r message.correlation_id = \"test-correlation-id\"\r azure_service_bus_service.send_queue_message(\"test-queue\", message)\r ```\r \r 服务总线队列在标准层中支持的最大消息大小为 256 KB。标头最大为 64 KB，其中包括标准和自定义应用程序属性。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。\r \r ## <a name=\"how-to-receive-messages-from-a-queue\"></a>如何从队列接收消息\r \r 对 **Azure::ServiceBusService** 对象使用 **receive\\_queue\\_message()** 方法可从队列接收消息。 默认情况下，消息在被读取的同时会被锁定，从而无法从队列中删除。 但是，可以通过将 **:peek_lock** 选项设置为 **false**，在读取消息时将其从队列中删除。\r \r 默认行为使读取和删除变成一个两阶段操作，从而也有可能支持不允许遗漏消息的应用程序。 当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，并将该消息返回到应用程序。 应用程序处理完该消息（或将它可靠地存储起来留待将来处理）后，通过调用 **delete\\_queue\\_message()** 方法并提供要删除的消息作为参数来完成接收过程的第二阶段。 **delete\\_queue\\_message()** 方法将此消息标记为“已使用”并将其从队列中删除。\r \r 如果 **:peek\\_lock** 参数设置为 **false**，读取并删除消息将是最简单的模式，并且最适合在发生故障时应用程序允许不处理消息的情况。 为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。 由于服务总线会将消息标记为“已使用”，因此当应用程序重启并重新开始使用消息时，它会遗漏在发生崩溃前使用的消息。\r \r 以下示例演示如何使用 **receive\\_queue\\_message()** 接收和处理消息。该示例先通过将 **:peek\\_lock** 设置为 **false** 接收并删除一条消息，然后再接收另一条消息，最后使用 **delete\\_queue\\_message()** 删除该消息：\r \r ```ruby\r message = azure_service_bus_service.receive_queue_message(\"test-queue\", \r   { :peek_lock => false })\r message = azure_service_bus_service.receive_queue_message(\"test-queue\")\r azure_service_bus_service.delete_queue_message(message)\r ```\r \r ## <a name=\"how-to-handle-application-crashes-and-unreadable-messages\"></a>如何处理应用程序崩溃和不可读消息\r Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。 如果接收方应用程序因某种原因无法处理消息，则它可以对 Azure::ServiceBusService 对象调用 `unlock_queue_message()` 方法。 此调用会导致服务总线解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。\r \r 还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），则服务总线将自动解锁该消息并使它可再次被接收。\r \r 如果应用程序在处理消息之后，调用 `delete_queue_message()` 方法之前崩溃，则在应用程序重启时会将该消息重新传送给它。 此过程通常称作“至少处理一次”，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。 如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。 这通常可通过使用消息的 `message_id` 属性实现，该属性在多次传送尝试中保持不变。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 现在，已了解有关服务总线队列的基础知识，请访问下面的链接以获取详细信息。\r \r -   [队列、主题和订阅](./service-bus-queues-topics-subscriptions.md)的概述\r -   访问 GitHub 上的 [Azure SDK for Ruby](https://github.com/Azure/azure-sdk-for-ruby) 存储库。\r \r 有关本文中讨论的 Azure 服务总线队列与[如何通过 Ruby 使用队列存储](../storage/queues/storage-ruby-how-to-use-queue-storage.md)一文中讨论的 Azure 队列的比较，请参阅 [Azure 队列和 Azure 服务总线队列 - 比较与对照](./service-bus-azure-and-service-bus-queues-compared-contrasted.md)\r \r <!--Update_Description:update meta properties and wording-->"}