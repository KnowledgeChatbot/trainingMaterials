{"Title":"分析工作负荷 - Azure SQL 数据仓库","Description":"分析针对 Azure SQL 数据仓库中工作负荷的查询优化的技巧。","Content":"# <a name=\"analyze-your-workload\"></a>分析工作负荷\r 分析针对 Azure SQL 数据仓库中工作负荷的查询优化的技巧。\r \r ## <a name=\"workload-groups\"></a>工作负荷组 \r SQL 数据仓库通过使用工作负荷组来实现资源类。 总共有八个工作负荷组用于控制不同 DWU 大小的资源类的行为。 对于任何 DWU，SQL 数据仓库只使用八个工作负荷组中的四个。 这样做是合理的，因为每个工作负荷组会被分配到以下四个资源类中的一个：smallrc、mediumrc、largerc 或 xlargerc。 了解工作负荷组的重要性在于其中一些工作负荷组已设置为较高的 *重要性*。 重要性用于 CPU 计划。 重要性为高的查询在运行时所获得的 CPU 周期数是重要性为中的查询的 3 倍。 因此，并发槽映射也决定了 CPU 优先级。 如果某个查询使用了至少 16 个槽，则该查询是作为重要性高的查询运行的。\r \r 下表显示了每个工作负荷组的重要性映射。\r \r ### <a name=\"workload-group-mappings-to-concurrency-slots-and-importance\"></a>并发槽和重要性的工作负荷组映射\r \r | 工作负荷组 | 并发槽映射 | MB/分布区（弹性） | MB/分布区（计算） | 重要性映射 |\r |:---------------:|:------------------------:|:------------------------------:|:---------------------------:|:------------------:|\r | SloDWGroupC00   | 1                        |    100                         | 250                         | 中型             |\r | SloDWGroupC01   | 2                        |    200                         | 500                         | 中型             |\r | SloDWGroupC02   | 4                        |    400                         | 1000                        | 中型             |\r | SloDWGroupC03   | 8                        |    800                         | 2000                        | 中型             |\r | SloDWGroupC04   | 16                       |  1,600                         | 4000                        | 高               |\r | SloDWGroupC05   | 32                       |  3,200                         | 8000                        | 高               |\r | SloDWGroupC06   | 64                       |  6,400                         | 16,000                      | 高               |\r | SloDWGroupC07   | 128                      | 12,800                         | 32,000                      | 高               |\r | SloDWGroupC08   | 256                      | 25,600                         | 64,000                      | 高               |\r \r <!-- where are the allocation and consumption of concurrency slots charts? -->\r 从 **分配和使用并发槽** 图中可以看到，对于 smallrc、mediumrc、largerc 和 xlargerc，DW500 分别使用 1、4、8 和 16 个并发槽。 可以在上面的图中查找这些值，以找到每个资源类的重要性。\r \r ### <a name=\"dw500-mapping-of-resource-classes-to-importance\"></a>DW500 的资源类到重要性的映射\r | 资源类 | 工作负荷组 | 使用的并发槽数 | MB/分布区 | 重要性 |\r |:-------------- |:-------------- |:----------------------:|:-----------------:|:---------- |\r | smallrc        | SloDWGroupC00  | 1                      | 100               | 中型     |\r | mediumrc       | SloDWGroupC02  | 4                      | 400               | 中型     |\r | largerc        | SloDWGroupC03  | 8                      | 800               | 中型     |\r | xlargerc       | SloDWGroupC04  | 16                     | 1,600             | 高       |\r | staticrc10     | SloDWGroupC00  | 1                      | 100               | 中型     |\r | staticrc20     | SloDWGroupC01  | 2                      | 200               | 中型     |\r | staticrc30     | SloDWGroupC02  | 4                      | 400               | 中型     |\r | staticrc40     | SloDWGroupC03  | 8                      | 800               | 中型     |\r | staticrc50     | SloDWGroupC03  | 16                     | 1,600             | 高       |\r | staticrc60     | SloDWGroupC03  | 16                     | 1,600             | 高       |\r | staticrc70     | SloDWGroupC03  | 16                     | 1,600             | 高       |\r | staticrc80     | SloDWGroupC03  | 16                     | 1,600             | 高       |\r \r ## <a name=\"view-workload-groups\"></a>查看工作负荷组\r 在进行故障诊断时，可以使用以下 DMV 查询，从资源调控器的角度来详细查看内存资源分配的差异，或者分析工作负荷组目前的和历史上的使用情况：\r \r ```sql\r WITH rg\r AS\r (   SELECT  \r      pn.name                                AS node_name\r     ,pn.[type]                              AS node_type\r     ,pn.pdw_node_id                         AS node_id\r     ,rp.name                                AS pool_name\r     ,rp.max_memory_kb*1.0/1024              AS pool_max_mem_MB\r     ,wg.name                                AS group_name\r     ,wg.importance                          AS group_importance\r     ,wg.request_max_memory_grant_percent    AS group_request_max_memory_grant_pcnt\r     ,wg.max_dop                             AS group_max_dop\r     ,wg.effective_max_dop                   AS group_effective_max_dop\r     ,wg.total_request_count                 AS group_total_request_count\r     ,wg.total_queued_request_count          AS group_total_queued_request_count\r     ,wg.active_request_count                AS group_active_request_count\r     ,wg.queued_request_count                AS group_queued_request_count\r     FROM    sys.dm_pdw_nodes_resource_governor_workload_groups wg\r     JOIN    sys.dm_pdw_nodes_resource_governor_resource_pools rp    \r             ON  wg.pdw_node_id  = rp.pdw_node_id\r             AND wg.pool_id      = rp.pool_id\r     JOIN    sys.dm_pdw_nodes pn\r             ON    wg.pdw_node_id    = pn.pdw_node_id\r     WHERE   wg.name like 'SloDWGroup%'\r     AND     rp.name    = 'SloDWPool'\r )\r SELECT  pool_name\r ,       pool_max_mem_MB\r ,       group_name\r ,       group_importance\r ,       (pool_max_mem_MB/100)*group_request_max_memory_grant_pcnt AS max_memory_grant_MB\r ,       node_name\r ,       node_type\r ,       group_total_request_count\r ,       group_total_queued_request_count\r ,       group_active_request_count\r ,       group_queued_request_count\r FROM    rg\r ORDER BY\r         node_name\r ,       group_request_max_memory_grant_pcnt\r ,       group_importance\r ;\r ```\r \r ## <a name=\"queued-query-detection-and-other-dmvs\"></a>对排队的查询进行的检测，以及其他 DMV\r 可以使用 `sys.dm_pdw_exec_requests` DMV 来确定在并发队列中等待的查询。 正在等待并发槽的查询的状态为 **挂起**。\r \r ```sql\r SELECT  r.[request_id]                           AS Request_ID\r ,       r.[status]                               AS Request_Status\r ,       r.[submit_time]                          AS Request_SubmitTime\r ,       r.[start_time]                           AS Request_StartTime\r ,       DATEDIFF(ms,[submit_time],[start_time])  AS Request_InitiateDuration_ms\r ,       r.resource_class                         AS Request_resource_class\r FROM    sys.dm_pdw_exec_requests r\r ;\r ```\r \r 可以使用 `sys.database_principals`来查看工作负荷管理角色。\r \r ```sql\r SELECT  ro.[name]           AS [db_role_name]\r FROM    sys.database_principals ro\r WHERE   ro.[type_desc]      = 'DATABASE_ROLE'\r AND     ro.[is_fixed_role]  = 0\r ;\r ```\r \r 以下查询显示分配给每个用户的角色。\r \r ```sql\r SELECT  r.name AS role_principal_name\r ,       m.name AS member_principal_name\r FROM    sys.database_role_members rm\r JOIN    sys.database_principals AS r            ON rm.role_principal_id      = r.principal_id\r JOIN    sys.database_principals AS m            ON rm.member_principal_id    = m.principal_id\r WHERE   r.name IN ('mediumrc','largerc','xlargerc')\r ;\r ```\r \r SQL 数据仓库具有以下等待类型：\r \r * **LocalQueriesConcurrencyResourceType**：位于并发槽框架外部的查询。 DMV 查询和 `SELECT @@VERSION` 等系统函数是本地查询的示例。\r * **UserConcurrencyResourceType**：位于并发槽框架内部的查询。 针对最终用户表的查询代表使用此资源类型的示例。\r * **DmsConcurrencyResourceType**：数据移动操作生成的等待。\r * **BackupConcurrencyResourceType**：此等待表明正在备份数据库。 此资源类型的最大值为 1。 如果同时请求了多个备份，其他备份会排队。\r \r 可以使用 `sys.dm_pdw_waits` DMV 来查看请求所等待的具体资源。\r \r ```sql\r SELECT  w.[wait_id]\r ,       w.[session_id]\r ,       w.[type]                                           AS Wait_type\r ,       w.[object_type]\r ,       w.[object_name]\r ,       w.[request_id]\r ,       w.[request_time]\r ,       w.[acquire_time]\r ,       w.[state]\r ,       w.[priority]\r ,       SESSION_ID()                                       AS Current_session\r ,       s.[status]                                         AS Session_status\r ,       s.[login_name]\r ,       s.[query_count]\r ,       s.[client_id]\r ,       s.[sql_spid]\r ,       r.[command]                                        AS Request_command\r ,       r.[label]\r ,       r.[status]                                         AS Request_status\r ,       r.[submit_time]\r ,       r.[start_time]\r ,       r.[end_compile_time]\r ,       r.[end_time]\r ,       DATEDIFF(ms,r.[submit_time],r.[start_time])        AS Request_queue_time_ms\r ,       DATEDIFF(ms,r.[start_time],r.[end_compile_time])   AS Request_compile_time_ms\r ,       DATEDIFF(ms,r.[end_compile_time],r.[end_time])     AS Request_execution_time_ms\r ,       r.[total_elapsed_time]\r FROM    sys.dm_pdw_waits w\r JOIN    sys.dm_pdw_exec_sessions s  ON w.[session_id] = s.[session_id]\r JOIN    sys.dm_pdw_exec_requests r  ON w.[request_id] = r.[request_id]\r WHERE    w.[session_id] <> SESSION_ID()\r ;\r ```\r \r `sys.dm_pdw_resource_waits` DMV 仅显示给定查询所占用的资源等待。 资源等待时间只度量等待提供资源的时间，与信号等待时间相反，后者是基础 SQL Server 将查询调度到 CPU 所需的时间。\r \r ```sql\r SELECT  [session_id]\r ,       [type]\r ,       [object_type]\r ,       [object_name]\r ,       [request_id]\r ,       [request_time]\r ,       [acquire_time]\r ,       DATEDIFF(ms,[request_time],[acquire_time])  AS acquire_duration_ms\r ,       [concurrency_slots_used]                    AS concurrency_slots_reserved\r ,       [resource_class]\r ,       [wait_id]                                   AS queue_position\r FROM    sys.dm_pdw_resource_waits\r WHERE    [session_id] <> SESSION_ID()\r ;\r ```\r 还可以使用 `sys.dm_pdw_resource_waits` DMV 计算已授予的并发槽数。\r \r ```sql\r SELECT  SUM([concurrency_slots_used]) as total_granted_slots \r FROM    sys.[dm_pdw_resource_waits] \r WHERE   [state]           = 'Granted' \r AND     [resource_class] is not null\r AND     [session_id]     <> session_id()\r ;\r ```\r \r 可以使用 `sys.dm_pdw_wait_stats` DMV 对等待进行历史趋势分析。\r \r ```sql\r SELECT   w.[pdw_node_id]\r ,        w.[wait_name]\r ,        w.[max_wait_time]\r ,        w.[request_count]\r ,        w.[signal_time]\r ,        w.[completed_count]\r ,        w.[wait_time]\r FROM    sys.dm_pdw_wait_stats w\r ;\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 有关如何管理数据库用户和安全性的详细信息，请参阅[保护 SQL 数据仓库中的数据库][Secure a database in SQL Data Warehouse]。 有关如何通过更大型资源类来改进聚集列存储索引质量的详细信息，请参阅[重建索引以提升段质量]。\r \r <!--Image references-->\r \r <!--Article references-->\r [Secure a database in SQL Data Warehouse]: ./sql-data-warehouse-overview-manage-security.md\r [重建索引以提升段质量]: ./sql-data-warehouse-tables-index.md#rebuilding-indexes-to-improve-segment-quality\r [Secure a database in SQL Data Warehouse]: ./sql-data-warehouse-overview-manage-security.md\r \r <!--MSDN references-->\r [Managing Databases and Logins in Azure SQL Database]:../sql-database/sql-database-manage-logins.md\r \r <!--Other Web references-->\r <!-- Update_Description: new articles on analyze SQL statements workload -->"}