{"Title":"修复 SQL 连接错误和暂时性错误","Description":"了解如何排查、诊断和防止 Azure SQL 数据库中的 SQL 连接错误或暂时性错误。","Content":"# <a name=\"troubleshoot-diagnose-and-prevent-sql-connection-errors-and-transient-errors-for-sql-database\"></a>排查、诊断和防止 SQL 数据库中的 SQL 连接错误和暂时性错误\r 本文介绍如何防止、排查、诊断和减少客户端应用程序在与 Azure SQL 数据库交互时发生的连接错误和暂时性错误。 了解如何配置重试逻辑、生成连接字符串以及调整其他连接设置。\r \r <a id=\"i-transient-faults\" name=\"i-transient-faults\"></a>\r \r ## <a name=\"transient-errors-transient-faults\"></a>暂时性错误（暂时性故障）\r 暂时性错误（也称为暂时性故障）存在很快解决自身问题的根本原因。 当 Azure 系统快速地将硬件资源转移到负载均衡更好的各种工作负荷时，偶尔会发生暂时性错误。 大多数这些重新配置事件通常在 60 秒内就能完成。 在进行这种重新配置的过程中，可能会遇到 Azure SQL 数据库的连接性问题。 连接到 Azure SQL 数据库的应用程序应当构建为能预见这些暂时性错误，并能通过在它们的代码内实现重试逻辑来处理它们，而不是以应用程序错误的形式呈现给用户。\r \r 如果客户端程序使用 ADO.NET，系统会引发 **SqlException**，使你的程序知道已发生暂时性错误。 可以将 **Number** 属性与 [SQL 数据库客户端应用程序的 SQL 错误代码](sql-database-develop-error-messages.md)主题顶部附近的暂时性错误列表进行比较。\r \r <a id=\"connection-versus-command\" name=\"connection-versus-command\"></a>\r \r ### <a name=\"connection-versus-command\"></a>连接与命令\r 你将重试 SQL 连接或重新建立连接，具体取决于以下各项：\r \r * **在尝试连接期间发生暂时性错误**：应该延迟数秒后再重试连接。\r * **执行 SQL 查询命令期间发生暂时性错误**：不应立即重试命令。 而应在一定的延迟之后建立新的连接。 然后可以重试该命令。\r \r <a id=\"j-retry-logic-transient-faults\" name=\"j-retry-logic-transient-faults\"></a>\r \r ### <a name=\"retry-logic-for-transient-errors\"></a>针对暂时性错误的重试逻辑\r 在偶尔会遇到暂时性错误的客户端程序中包含重试逻辑可以让它变得更稳健。\r \r 如果程序通过第三方中间件与 Azure SQL 数据库通信，请咨询供应商该中间件是否包含暂时性错误的重试逻辑。\r \r <a id=\"principles-for-retry\" name=\"principles-for-retry\"></a>\r \r #### <a name=\"principles-for-retry\"></a>重试原则\r * 如果错误是暂时性的，则应重新尝试打开连接。\r * 不应直接重试由于暂时性错误而失败的 SQL SELECT 语句。\r \r   * 而是建立新的连接，并重试 SELECT。\r * SQL UPDATE 语句由于暂时性错误而失败时，应该先建立新的连接，再重试 UPDATE。\r \r   * 重试逻辑必须确保整个数据库事务完成，或整个事务已回滚。\r \r #### <a name=\"other-considerations-for-retry\"></a>其他重试注意事项\r * 下班后自动启动的批处理程序以及在凌晨之前完成的批处理程序在每次重试前经过较长的时间间隔。\r * 用户界面程序应该解释用户会在长时间等待后放弃操作的倾向。\r \r   * 但是，解决方案不得每隔几秒钟重试，因为该策略可能会使系统填满请求。\r \r #### <a name=\"interval-increase-between-retries\"></a>增大重试间隔\r 我们建议在第一次重试前延迟 5 秒钟。 如果在少于 5 秒的延迟后重试，云服务有超载的风险。 对于后续的每次重试，延迟应以指数级增大，最大值为 60 秒。\r \r [SQL Server 连接池 (ADO.NET)](http://msdn.microsoft.com/library/8xx3tyca.aspx) 中提供了有关使用 ADO.NET 的客户端的*阻塞期*的说明。\r \r 还可能想要设置程序在自行终止之前的重试次数上限。\r \r #### <a name=\"code-samples-with-retry-logic\"></a>重试逻辑代码示例\r 以下位置提供了采用各种编程语言的重试逻辑代码示例：\r \r * [用于 SQL 数据库和 SQL Server 的连接库](sql-database-libraries.md)\r \r <a id=\"k-test-retry-logic\" name=\"k-test-retry-logic\"></a>\r \r #### <a name=\"test-your-retry-logic\"></a>测试重试逻辑\r 若要测试重试逻辑，必须模拟或生成程序仍在运行时可更正的错误。\r \r ##### <a name=\"test-by-disconnecting-from-the-network\"></a>通过断开网络连接进行测试\r 可以测试重试逻辑的一种方法是在程序运行时断开客户端计算机与网络的连接。 将产生错误：\r \r * **SqlException.Number** = 11001\r * 消息：“不存在已知的这种主机”\r \r 在首次重试过程中，程序可以更正拼写错误，并尝试连接。\r \r 要使此操作可行，请从网络中断开计算机的连接，再启动程序。 然后，你的程序将识别促使它执行以下操作的运行时参数：\r \r 1. 暂时将 11001 添加到视为暂时性故障的错误列表。\r 2. 像往常一样尝试首次连接。\r 3. 在捕获该错误后，从列表中删除 11001。\r 4. 显示一条消息，告知用户要将计算机接入网络。\r    * 通过使用“Console.ReadLine”  方法或具有“确定”按钮的对话框暂停进一步执行。 将计算机接入网络后，用户按 Enter 键。\r 5. 重新尝试连接，预期会成功。\r \r ##### <a name=\"test-by-misspelling-the-database-name-when-connecting\"></a>通过在连接时拼错数据库名称进行测试\r 在首次连接尝试之前，程序可以故意拼错用户名。 将产生错误：\r \r * **SqlException.Number** = 18456\r * 消息：“用户‘WRONG_MyUserName’的登录失败。”\r \r 在首次重试过程中，程序可以更正拼写错误，并尝试连接。\r \r 要使此操作可行，程序需要能够识别促使它执行以下操作的运行时参数：\r \r 1. 暂时将 18456 添加到视为暂时性故障的错误列表。\r 2. 故意将“WRONG_”添加到用户名。\r 3. 在捕获该错误后，从列表中删除 18456。\r 4. 从用户名中删除“WRONG_”。\r 5. 重新尝试连接，预期会成功。\r \r <a id=\"net-sqlconnection-parameters-for-connection-retry\" name=\"net-sqlconnection-parameters-for-connection-retry\"></a>\r \r ### <a name=\"net-sqlconnection-parameters-for-connection-retry\"></a>连接重试的 .NET SqlConnection 参数\r 如果客户端程序使用 .NET Framework 类 **System.Data.SqlClient.SqlConnection** 连接 Azure SQL 数据库，应使用 .NET 4.6.1 或更高版本（或 .NET Core），以便利用其连接重试功能。 该功能的详细信息在 [此处](http://go.microsoft.com/fwlink/?linkid=393996)。\r \r <!--\r 2015-11-30, FwLink 393996 points to dn632678.aspx, which links to a downloadable .docx related to SqlClient and SQL Server 2014.\r -->\r \r 为 [SqlConnection](http://msdn.microsoft.com/library/System.Data.SqlClient.SqlConnection.connectionstring.aspx) 对象生成 **连接字符串** 时，应在以下参数之间协调值：\r \r * ConnectRetryCount &nbsp;&nbsp;*（默认值为 1。范围是从 0 到 255。）*\r * ConnectRetryInterval &nbsp;&nbsp;*（默认值为 1 秒。范围是从 1 到 60。）*\r * Connection Timeout &nbsp;&nbsp;*（默认值为 15 秒。范围是从 0 到 2147483647）*\r \r 具体而言，所选的值应使以下等式成立：\r \r * 连接超时值 = ConnectRetryCount * ConnectionRetryInterval\r \r 例如，如果计数 = 3 且间隔 = 10 秒，超时值仅为 29 秒未给系统足够的时间进行其第三次也是最后一次连接重试，因为：29 < 3 * 10。\r \r <a id=\"connection-versus-command\" name=\"connection-versus-command\"></a>\r \r ### <a name=\"connection-versus-command\"></a>连接与命令\r **ConnectRetryCount** 和 **ConnectRetryInterval** 参数使 **SqlConnection** 对象在重试连接操作时不用通知或麻烦你的程序（例如，将控制权返还给你的程序）。 在以下情况下可能会进行重试：\r \r * mySqlConnection.Open 方法调用\r * mySqlConnection.Execute 方法调用\r \r 有个很微妙的地方。 如果正在执行“查询”时发生暂时性错误，**SqlConnection** 对象不会重试连接操作，因而肯定不会重试查询。 但是， **SqlConnection** 在发送要执行的查询前会非常快速地检查连接。 如果快速检查检测到连接问题， **SqlConnection** 会重试连接操作。 如果重试成功，则会发送查询以执行。\r \r #### <a name=\"should-connectretrycount-be-combined-with-application-retry-logic\"></a>ConnectRetryCount 是否应结合应用程序重试逻辑？\r 假设应用程序具有功能强大的自定义重试逻辑。 它可能会重试连接操作 4 次。 如果你将 **ConnectRetryInterval** 和 **ConnectRetryCount** =3 添加到连接字符串，则将重试计数提高到 4 * 3 = 12 次重试。 可能未打算重试这么多次。\r \r <a id=\"a-connection-connection-string\" name=\"a-connection-connection-string\"></a>\r \r ## <a name=\"connections-to-azure-sql-database\"></a>与 Azure SQL 数据库的连接\r <a id=\"c-connection-string\" name=\"c-connection-string\"></a>\r \r ### <a name=\"connection-connection-string\"></a>连接：连接字符串\r 连接到 Azure SQL 数据库所需的连接字符串与连接到 Microsoft SQL Server 所需的字符串稍有不同。 可以从 [Azure 门户](https://portal.azure.cn/)复制数据库的连接字符串。\r \r [!INCLUDE [sql-database-include-connection-string-20-portalshots](../../includes/sql-database-include-connection-string-20-portalshots.md)]\r \r <a id=\"b-connection-ip-address\" name=\"b-connection-ip-address\"></a>\r \r ### <a name=\"connection-ip-address\"></a>连接：IP 地址\r 必须将 SQL 数据库服务器配置为接受来自托管客户端程序的计算机 IP 地址的通信。 为此，可以通过 [Azure 门户](https://portal.azure.cn/)编辑防火墙设置。\r \r 如果忘记了配置 IP 地址，程序会失败，并显示简单的错误消息，指出所需的 IP 地址。\r \r [!INCLUDE [sql-database-include-ip-address-22-portal](../../includes/sql-database-include-ip-address-22-v12portal.md)]\r \r 有关详细信息，请参阅[如何：在 SQL 数据库上配置防火墙设置](sql-database-configure-firewall-settings.md)\r \r <a id=\"c-connection-ports\" name=\"c-connection-ports\"></a>\r \r ### <a name=\"connection-ports\"></a>连接：端口\r 通常，只需确保在托管客户端程序的计算机上已打开端口 1433 进行出站通信。\r \r 例如，当客户端程序托管在 Windows 计算机上时，主机上的 Windows 防火墙允许打开端口 1433：\r \r 1. 打开“控制面板”\r 2. &gt; 所有控制面板项\r 3. &gt; Windows 防火墙\r 4. &gt; 高级设置\r 5. &gt; 出站规则\r 6. &gt; 操作\r 7. &gt; 新建规则\r \r 如果你的客户端程序托管在 Azure 虚拟机 (VM) 上，应该阅读：<br/>[用于 ADO.NET 4.5 和 SQL 数据库的非 1433 端口](sql-database-develop-direct-route-ports-adonet-v12.md)。\r \r 有关配置端口和 IP 地址的背景信息，请参阅 [Azure SQL 数据库防火墙](sql-database-firewall-configure.md)\r \r <a id=\"d-connection-ado-net-4-5\" name=\"d-connection-ado-net-4-5\"></a>\r \r ### <a name=\"connection-adonet-461\"></a>连接：ADO.NET 4.6.1\r 如果程序使用 **System.Data.SqlClient.SqlConnection** 等 ADO.NET 类来连接到 Azure SQL 数据库，我们建议使用 .NET Framework 4.6.1 或更高版本。\r \r ADO.NET 4.6.1：\r \r * 对于 Azure SQL 数据库，使用 **SqlConnection.Open** 方法打开连接可以获得更高的可靠性。 此 **Open** 方法现在结合了应对暂时性故障的最佳效果重试机制，用于处理连接超时期间发生的特定错误。\r * 支持连接池。 这包括有效验证提供给程序的连接对象是否正常运行的功能。\r \r 如果要从连接池使用连接对象，我们建议，如果程序未立即使用连接，应暂时关闭连接。 重新打开连接比创建新连接的开销更低。\r \r 如果使用的是 ADO.NET 4.0 或更旧版本，我们建议升级到最新的 ADO.NET。\r \r * 从 2015 年 11 月开始，可以 [下载 ADO.NET 4.6.1](http://blogs.msdn.com/b/dotnet/archive/2015/11/30/net-framework-4-6-1-is-now-available.aspx)。\r \r <a id=\"e-diagnostics-test-utilities-connect\" name=\"e-diagnostics-test-utilities-connect\"></a>\r \r ## <a name=\"diagnostics\"></a>诊断\r <a id=\"d-test-whether-utilities-can-connect\" name=\"d-test-whether-utilities-can-connect\"></a>\r \r ### <a name=\"diagnostics-test-whether-utilities-can-connect\"></a>诊断：测试实用程序是否可以连接\r 如果程序无法连接到 Azure SQL 数据库，有一个诊断选项可让你尝试使用一个实用程序来进行连接。 理想的情况下，该实用程序将使用程序所用的同一个库进行连接。\r \r 可以在任何 Windows 计算机上尝试以下实用程序：\r \r * SQL Server Management Studio (ssms.exe)，它使用 ADO.NET 进行连接。\r * sqlcmd.exe，使用 [ODBC](http://msdn.microsoft.com/library/jj730308.aspx)进行连接。\r \r 完成连接后，测试一个简短的 SQL SELECT 查询是否可以正常工作。\r \r <a id=\"f-diagnostics-check-open-ports\" name=\"f-diagnostics-check-open-ports\"></a>\r \r ### <a name=\"diagnostics-check-the-open-ports\"></a>诊断：检查打开的端口\r 假设你怀疑连接尝试由于端口问题而失败。 在计算机上，可以运行报告端口配置的实用程序。\r \r 在 Linux 上，以下实用程序可能很有用：\r \r * `netstat -nap`\r * `nmap -sS -O 127.0.0.1`\r   * （将示例值更改为你的 IP 地址。）\r \r 在 Windows 上， [PortQry.exe](http://www.microsoft.com/download/details.aspx?id=17148) 实用程序可能很有用。 以下是在 Azure SQL 数据库服务器上查询端口情况，以及在便携式计算机上运行了哪个端口的示例执行：\r \r ```\r [C:\\Users\\johndoe\\]\r >> portqry.exe -n johndoesvr9.database.chinacloudapi.cn -p tcp -e 1433\r \r Querying target system called:\r  johndoesvr9.database.chinacloudapi.cn\r \r Attempting to resolve name to IP address...\r Name resolved to 23.100.117.95\r \r querying...\r TCP port 1433 (ms-sql-s service): LISTENING\r \r [C:\\Users\\johndoe\\]\r >>\r ```\r \r <a id=\"g-diagnostics-log-your-errors\" name=\"g-diagnostics-log-your-errors\"></a>\r \r ### <a name=\"diagnostics-log-your-errors\"></a>诊断：记录错误\r 有时，诊断间歇性问题的最好方式是每隔数天或数周检测常规模式。\r \r 客户端可以通过记录其所遇到的所有错误来帮助你进行诊断。 可以将日志条目与 Azure SQL 数据库本身内部记录的错误数据相关联。\r \r Enterprise Library 6 (EntLib60) 提供了 .NET 托管类来帮助进行日志记录：\r \r * [5 - 与写入日志一样简单：使用日志记录应用程序块](http://msdn.microsoft.com/library/dn440731.aspx)\r \r <a id=\"h-diagnostics-examine-logs-errors\" name=\"h-diagnostics-examine-logs-errors\"></a>\r \r ### <a name=\"diagnostics-examine-system-logs-for-errors\"></a>诊断：在系统日志中检查错误\r 下面是在日志中查询错误和其他信息的一些 Transact-SQL SELECT 语句。\r \r | 日志查询 | 说明 |\r |:--- |:--- |\r | `SELECT e.*`<br/>`FROM sys.event_log AS e`<br/>`WHERE e.database_name = 'myDbName'`<br/>`AND e.event_category = 'connectivity'`<br/>`AND 2 >= DateDiff`<br/>&nbsp;&nbsp;`(hour, e.end_time, GetUtcDate())`<br/>`ORDER BY e.event_category,`<br/>&nbsp;&nbsp;`e.event_type, e.end_time;` |[sys.event_log](http://msdn.microsoft.com/library/dn270018.aspx) 视图提供有关各个事件的信息，包括一些可能导致暂时性错误或连接故障的事件。<br/><br/>理想情况下，可以将 **start_time** 或 **end_time** 值与有关客户端程序遇到问题时的信息相关联。<br/><br/>**提示：**必须连接到 **master** 数据库才能运行此操作。 |\r | `SELECT c.*`<br/>`FROM sys.database_connection_stats AS c`<br/>`WHERE c.database_name = 'myDbName'`<br/>`AND 24 >= DateDiff`<br/>&nbsp;&nbsp;`(hour, c.end_time, GetUtcDate())`<br/>`ORDER BY c.end_time;` |[sys.database_connection_stats](http://msdn.microsoft.com/library/dn269986.aspx) 视图针对其他诊断提供事件类型的聚合计数。<br/><br/>**提示：**必须连接到 **master** 数据库才能运行此操作。 |\r \r <a id=\"d-search-for-problem-events-in-the-sql-database-log\" name=\"d-search-for-problem-events-in-the-sql-database-log\"></a>\r \r ### <a name=\"diagnostics-search-for-problem-events-in-the-sql-database-log\"></a>诊断：在 SQL 数据库日志中搜索问题事件\r 可以在 Azure SQL 数据库的日志中搜索有关问题事件的条目。 在 **master** 数据库中尝试运行以下 Transact-SQL SELECT 语句：\r \r ```\r SELECT\r    object_name\r   ,CAST(f.event_data as XML).value\r       ('(/event/@timestamp)[1]', 'datetime2')                      AS [timestamp]\r   ,CAST(f.event_data as XML).value\r       ('(/event/data[@name=\"error\"]/value)[1]', 'int')             AS [error]\r   ,CAST(f.event_data as XML).value\r       ('(/event/data[@name=\"state\"]/value)[1]', 'int')             AS [state]\r   ,CAST(f.event_data as XML).value\r       ('(/event/data[@name=\"is_success\"]/value)[1]', 'bit')        AS [is_success]\r   ,CAST(f.event_data as XML).value\r       ('(/event/data[@name=\"database_name\"]/value)[1]', 'sysname') AS [database_name]\r FROM\r   sys.fn_xe_telemetry_blob_target_read_file('el', null, null, null) AS f\r WHERE\r   object_name != 'login_event'  -- Login events are numerous.\r   and\r   '2015-06-21' < CAST(f.event_data as XML).value\r         ('(/event/@timestamp)[1]', 'datetime2')\r ORDER BY\r   [timestamp] DESC\r ;\r ```\r \r #### <a name=\"a-few-returned-rows-from-sysfnxetelemetryblobtargetreadfile\"></a>将返回 sys.fn_xe_telemetry_blob_target_read_file 中的若干行\r 下面是返回行的类似内容。 显示的 null 值在其他行中通常不是 null。\r \r ```\r object_name                   timestamp                    error  state  is_success  database_name\r \r database_xml_deadlock_report  2015-10-16 20:28:01.0090000  NULL   NULL   NULL        AdventureWorks\r ```\r \r <a id=\"l-enterprise-library-6\" name=\"l-enterprise-library-6\"></a>\r \r ## <a name=\"enterprise-library-6\"></a>Enterprise Library 6\r Enterprise Library 6 (EntLib60) 是 .NET 类的框架，可帮助你实施云服务（包括 Azure SQL 数据库服务）的稳健客户端。 要找到 EntLib60 可以提供帮助的各个领域的相关专题，可以首先访问：\r \r * [Enterprise Library 6 - 2013 年 4 月](http://msdn.microsoft.com/library/dn169621%28v=pandp.60%29.aspx)\r \r 用于处理暂时性错误的重试逻辑是 EntLib60 可以提供帮助的一个领域：\r \r * [4 - 坚持不懈是一切成功的秘密：使用暂时性故障处理应用程序块](http://msdn.microsoft.com/library/dn440719%28v=pandp.60%29.aspx)\r \r > [!NOTE]\r > EntLib60 的源代码可公开 [下载](http://go.microsoft.com/fwlink/p/?LinkID=290898)。 Microsoft 不打算对 EntLib 做进一步的功能更新或维护更新。\r \r <a id=\"entlib60-classes-for-transient-errors-and-retry\" name=\"entlib60-classes-for-transient-errors-and-retry\"></a>\r \r ### <a name=\"entlib60-classes-for-transient-errors-and-retry\"></a>用于暂时性错误和重试的 EntLib60 类\r 以下 EntLib60 类对重试逻辑特别有用。 所有这些类都包含在 **Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling** 命名空间或其子级中：\r \r *在命名空间 **Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling**命名空间或其子级中：*\r \r * **RetryPolicy** 类\r \r   * **ExecuteAction** 方法\r * **ExponentialBackoff** 类\r * **SqlDatabaseTransientErrorDetectionStrategy** 类\r * **ReliableSqlConnection** 类\r \r   * **ExecuteCommand** 方法\r \r 在命名空间 **Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.TestSupport**中：\r \r * **AlwaysTransientErrorDetectionStrategy** 类\r * **NeverTransientErrorDetectionStrategy** 类\r \r 以下是 EntLib60 相关信息的链接：\r \r * 免费 [书籍下载：Microsoft Enterprise Library 版本 2 开发人员指南](http://www.microsoft.com/download/details.aspx?id=41145)\r \r * [Enterprise Library - 暂时性故障处理应用程序块 6.0](http://www.nuget.org/packages/EnterpriseLibrary.TransientFaultHandling/)\r \r <a id=\"entlib60-the-logging-block\" name=\"entlib60-the-logging-block\"></a>\r \r ### <a name=\"entlib60-the-logging-block\"></a>EntLib60：日志记录块\r * 日志记录块是极其灵活且可配置的解决方案，可让你：\r \r   * 创建日志消息并将其存储在各种不同的位置。\r   * 分类与筛选消息。\r   * 收集有助于调试和跟踪的上下文信息，以及用于满足审核和一般日志记录要求的上下文信息。\r * 日志记录块可以从日志目标抽象化日志记录功能，使应用程序代码保持一致，无论目标日志记录存储的位置和类型为何。\r \r 有关详细信息，请参阅： [5 - 与写入日志一样简单：使用日志记录应用程序块](https://msdn.microsoft.com/library/dn440731%28v=pandp.60%29.aspx)\r \r <a id=\"entlib60-istransient-method-source-code\" name=\"entlib60-istransient-method-source-code\"></a>\r \r ### <a name=\"entlib60-istransient-method-source-code\"></a>EntLib60 IsTransient 方法的源代码\r 接下来，**SqlDatabaseTransientErrorDetectionStrategy** 类包含 **IsTransient** 方法的 C# 源代码。 该源代码阐明了哪些错误被视为暂时性错误并值得重试（从 2013 年 4 月起）。\r \r 为了注重易读性，我们在此副本中删除了大量的 **//comment** 行。\r \r ```\r public bool IsTransient(Exception ex)\r {\r   if (ex != null)\r   {\r     SqlException sqlException;\r     if ((sqlException = ex as SqlException) != null)\r     {\r       // Enumerate through all errors found in the exception.\r       foreach (SqlError err in sqlException.Errors)\r       {\r         switch (err.Number)\r         {\r             // SQL Error Code: 40501\r             // The service is currently busy. Retry the request after 10 seconds.\r             // Code: (reason code to be decoded).\r           case ThrottlingCondition.ThrottlingErrorNumber:\r             // Decode the reason code from the error message to\r             // determine the grounds for throttling.\r             var condition = ThrottlingCondition.FromError(err);\r \r             // Attach the decoded values as additional attributes to\r             // the original SQL exception.\r             sqlException.Data[condition.ThrottlingMode.GetType().Name] =\r               condition.ThrottlingMode.ToString();\r             sqlException.Data[condition.GetType().Name] = condition;\r \r             return true;\r \r           case 10928:\r           case 10929:\r           case 10053:\r           case 10054:\r           case 10060:\r           case 40197:\r           case 40540:\r           case 40613:\r           case 40143:\r           case 233:\r           case 64:\r             // DBNETLIB Error Code: 20\r             // The instance of SQL Server you attempted to connect to\r             // does not support encryption.\r           case (int)ProcessNetLibErrorCode.EncryptionNotSupported:\r             return true;\r         }\r       }\r     }\r     else if (ex is TimeoutException)\r     {\r       return true;\r     }\r     else\r     {\r       EntityException entityException;\r       if ((entityException = ex as EntityException) != null)\r       {\r         return this.IsTransient(entityException.InnerException);\r       }\r     }\r   }\r \r   return false;\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r * 有关其他常见的 Azure SQL 数据库连接问题的故障排除，请访问 [Azure SQL 数据库的连接问题故障排除](sql-database-troubleshoot-common-connection-issues.md)。\r * [SQL Server 连接池 (ADO.NET)](http://msdn.microsoft.com/library/8xx3tyca.aspx)\r * [*重试*是 Apache 2.0 授权的通用重试库，它以 **Python** 编写，可以简化向几乎任何程序添加重试行为的任务。](https://pypi.python.org/pypi/retrying)\r "}