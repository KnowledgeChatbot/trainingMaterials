{"Title":"在 Linux 上使用 C 连接设备","Description":"介绍如何使用在 Linux 上运行的以 C 编写的应用程序将设备连接到 Azure IoT 套件预配置远程监控解决方案。","Content":"# <a name=\"connect-your-device-to-the-remote-monitoring-preconfigured-solution-linux\"></a>将设备连接到远程监控预配置解决方案 (Linux)\r [!INCLUDE [iot-suite-v1-selector-connecting](../../includes/iot-suite-v1-selector-connecting.md)]\r \r ## <a name=\"build-and-run-a-sample-c-client-linux\"></a>生成并运行示例 C 客户端 Linux\r 以下步骤说明如何创建一个客户端应用程序来与远程监控预配置解决方案通信。 此应用程序以 C 编写，在 Ubuntu Linux 上生成和运行。\r \r 要完成这些步骤，需要一个运行 Ubuntu 版本 15.04 或 15.10 的设备。 继续操作之前，请使用以下命令在 Ubuntu 设备上安装必备组件包：\r \r ```\r sudo apt-get install cmake gcc g++\r ```\r \r ## <a name=\"install-the-client-libraries-on-your-device\"></a>在设备上安装客户端库\r Azure IoT 中心客户端库以包的形式提供，可以使用 **apt get** 命令在 Ubuntu 设备上安装该包。 完成以下步骤，在 Ubuntu 计算机上安装包含 IoT 中心客户端库和标头文件的包：\r \r 1. 在外壳程序中，向计算机添加 AzureIoT 存储库：\r    \r     ```\r     sudo add-apt-repository ppa:aziotsdklinux/ppa-azureiot\r     sudo apt-get update\r     ```\r 2. 安装 azure-iot-sdk-c-dev 包\r    \r     ```\r     sudo apt-get install -y azure-iot-sdk-c-dev\r     ```\r \r ## <a name=\"install-the-parson-json-parser\"></a>安装 Parson JSON 分析器\r IoT 中心客户端库使用 Parson JSON 分析器分析消息有效负载。 在计算机上的适当文件夹中，使用以下命令克隆 Parson GitHub 存储库：\r \r ```\r git clone https://github.com/kgabis/parson.git\r ```\r \r ## <a name=\"prepare-your-project\"></a>准备项目\r 在 Ubuntu 计算机上，创建名为“remote \\_monitoring”的文件夹。 在“remote \\_monitoring”文件夹中执行以下操作：\r \r - 创建四个文件：main.c、remote\\_monitoring.c、remote\\_monitoring.h、CMakeLists.txt。\r - 创建名为 **parson**的文件夹。\r \r 将“parson.c”和“parson.h”文件从 Parson 存储库的本地副本复制到“remote\\_monitoring/parson”文件夹。\r \r 在文本编辑器中，打开“remote\\_monitoring.c”文件。 添加以下 `#include` 语句：\r    \r ```\r #include \"iothubtransportmqtt.h\"\r #include \"schemalib.h\"\r #include \"iothub_client.h\"\r #include \"serializer_devicetwin.h\"\r #include \"schemaserializer.h\"\r #include \"azure_c_shared_utility/threadapi.h\"\r #include \"azure_c_shared_utility/platform.h\"\r #include \"parson.h\"\r ```\r \r [!INCLUDE [iot-suite-v1-connecting-code](../../includes/iot-suite-v1-connecting-code.md)]\r \r ## <a name=\"call-the-remotemonitoringrun-function\"></a>调用远程 \\_monitoring\\_ 函数\r 在文件编辑器中，打开“remote_monitoring.h”文件。 添加以下代码：\r \r ```\r void remote_monitoring_run(void);\r ```\r \r 在文本编辑器中，打开 **main.c** 文件。 添加以下代码：\r \r ```\r #include \"remote_monitoring.h\"\r \r int main(void)\r {\r     remote_monitoring_run();\r \r     return 0;\r }\r ```\r \r ## <a name=\"build-and-run-the-application\"></a>生成并运行应用程序\r 以下步骤描述如何使用 *CMake* 生成客户端应用程序。\r \r 1. 在文本编辑器中，打开“remote_monitoring”文件夹中的“CMakeLists.txt”文件。\r \r 1. 添加以下指令，以定义如何生成客户端应用程序：\r    \r     ```\r     macro(compileAsC99)\r       if (CMAKE_VERSION VERSION_LESS \"3.1\")\r         if (CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\r           set (CMAKE_C_FLAGS \"--std=c99 ${CMAKE_C_FLAGS}\")\r           set (CMAKE_CXX_FLAGS \"--std=c++11 ${CMAKE_CXX_FLAGS}\")\r         endif()\r       else()\r         set (CMAKE_C_STANDARD 99)\r         set (CMAKE_CXX_STANDARD 11)\r       endif()\r     endmacro(compileAsC99)\r \r     cmake_minimum_required(VERSION 2.8.11)\r     compileAsC99()\r \r     set(AZUREIOT_INC_FOLDER \"${CMAKE_SOURCE_DIR}\" \"${CMAKE_SOURCE_DIR}/parson\" \"/usr/include/azureiot\" \"/usr/include/azureiot/inc\")\r \r     include_directories(${AZUREIOT_INC_FOLDER})\r \r     set(sample_application_c_files\r         ./parson/parson.c\r         ./remote_monitoring.c\r         ./main.c\r     )\r \r     set(sample_application_h_files\r         ./parson/parson.h\r         ./remote_monitoring.h\r     )\r \r     add_executable(sample_app ${sample_application_c_files} ${sample_application_h_files})\r \r     target_link_libraries(sample_app\r         serializer\r         iothub_client\r         iothub_client_mqtt_transport\r         aziotsharedutil\r         umqtt\r         pthread\r         curl\r         ssl\r         crypto\r         m\r     )\r     ```\r 1. 在“remote_monitoring”文件夹中，创建一个文件夹用于存储 CMake 生成的“make”文件，然后运行“cmake”和“make”命令，如下所示：\r    \r     ```\r     mkdir cmake\r     cd cmake\r     cmake ../\r     make\r     ```\r \r 1. 运行客户端应用程序，并将遥测数据发送到 IoT 中心：\r    \r     ```\r     ./sample_app\r     ```\r \r [!INCLUDE [iot-suite-v1-visualize-connecting](../../includes/iot-suite-v1-visualize-connecting.md)]\r \r "}