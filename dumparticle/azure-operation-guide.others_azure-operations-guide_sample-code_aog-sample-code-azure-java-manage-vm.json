{"Title":"使用 Azure Java SDK 管理 VM","Description":"本文介绍如何使用 Azure Java SDK 管理 VM","Content":"\r # 使用 Azure Java SDK 管理 VM\r \r ### 本文包以下内容\r - [Azure Java Management SDK 介绍](#introduction)\r - [Azure Java SDK 的认证方式](#authorization)\r - [在云服务中创建 VM](#createVM)\r - [基于捕获的映像创建虚拟机](#createVM1)\r - [创建系统磁盘和数据磁盘](#createDisk)\r - [附加磁盘和分离磁盘](#attachanddelete)\r - [相关参考资料](#resource)\r \r ## <a id=\"introduction\"></a>Azure Java Management SDK介绍\r \r azure-svc-mgmt-compute 类包是 Azure Java SDK 所有关于 Azure VM 的操作 API。我们可以从[这里](http://go.microsoft.com/fwlink/?LinkId=690320)下载最新的类包。下面是各个类包的说明：\r \r - **com.microsoft.windowsazure.management.compute.HostedServiceOperations**: Hosted Service 设置相关操作\r - **com.microsoft.windowsazure.management.compute.VirtualMachineOperations**: VM 相关操作\r - **com.microsoft.windowsazure.management.compute.DeploymentOperations**: 部署相关操作\r - **com.microsoft.windowsazure.management.compute.VirtualMachineDiskOperations**: 磁盘相关操作\r - **com.microsoft.windowsazure.management.compute.VirtualMachineOSImageOperations**: OSImage 相关操作\r - **com.microsoft.windowsazure.management.compute.VirtualMachineVMImageOperations**: VMImage 相关操作\r - **com.microsoft.windowsazure.management.compute.LoadBalancerOperations**: 负载均衡相关操作\r - **com.microsoft.windowsazure.management.compute.DNSServerOperations**: DNS server 相关操作\r - **com.microsoft.windowsazure.management.compute.ExtensionImageOperations**: ExtensionImage 相关操作\r - **com.microsoft.windowsazure.management.compute.ServiceCertificateOperations**: 服务器证书相关操作\r - **com.microsoft.windowsazure.management.compute.VirtualMachineExtensionOperations**: VM 扩展相关操作\r - **com.microsoft.windowsazure.management.compute.OperatingSystemOperations**: 操作系统相关操作\r \r ## <a id=\"authorization\"></a>Azure Java SDK 的认证方式\r \r Azure SDK 提供多种认证方式，以下主要提供两种认证方式，publishsetting 文件认证 和 证书认证\r \r 1. Publishsettings 文件认证\r \r     Azure Java SDK 提供的认证方式主要是使用证书来认证，使用 publishsetting 文件也是使用证书来认证，只是 SDK 将认证步骤简化。在publishsetting 文件中，对应的订阅的下会自动生成一个证书，并将证书的内容转换成 Base64 的格式保存在 publishsetting 中，在 SDK 中就是将证书的 Base64 的编码转换成证书，然后作为认证的凭证。我们可以从[这里](https://manage.windowsazure.cn/publishsettings)下载您的订阅对应的 Publishsettings 文件。\r \r     **示例代码**\r \r     ```\r     Configuration config = PublishSettingsLoader.createManagementConfiguration(\"<publishsettings file path>\", \"<Sub Id>\");  \r     ComputeManagementClient computeManagementClient = ComputeManagementService.create(config);  \r     VirtualMachineOperations vmop = computeManagementClient.getVirtualMachinesOperations();\r     ```\r \r 2. 证书认证\r \r     使用购买的证书或者自定义证书，将包含公钥的 cer 文件上传到 Azure 的经典管理门户中：\r \r     ![](./media/aog-sample-code-azure-java-manage-vm/management-cert1.jpg)\r \r     ![](./media/aog-sample-code-azure-java-manage-vm/management-cert2.jpg)\r \r     上传完成后，在本地使用带有公钥和私钥的证书连接 Azure 服务。\r \r     **示例代码**\r \r     ```\r     Configuration config = Configuration.configure(new URI(\"https://management.core.chinacloudapi.cn\"), <sub Id>;, <cert location>;, <cert password>;);  \r     ComputeManagementClient computeManagementClient = ComputeManagementService.create(config);  \r     VirtualMachineOperations vmop = computeManagementClient.getVirtualMachinesOperations();\r     ```\r \r ## <a id=\"createVM\"></a>在云服务中创建 VM\r \r 我们创建 VM 的时候，可以将 VM 创建到新建的云服务中或者已存在的云服务中。下面的示例代码中，是把 VM 创建到已经存在的云服务中，云服务的名称通过变量 *hostedServiceName* 指定。如果需要创建新的云服务，只需要在方法 *createVMDeployment* 中把 *createHostedService* 前面的注释打开。\r \r **示例代码**\r \r ```\r public class CreateVM {\r \r     protected static Configuration config;\r     protected static ComputeManagementClient computeManagementClient;\r     private static HostedServiceOperations hostedServicesOperations; \r     protected static String testVMPrefix = \"georges\";                       //虚拟机名称前缀\r     private static String storageAccountName=\"appendstore\";                 //存储账户名称，这里我们使用现有的存储账户\r     private static String storageContainer = \"vhd-store\";                   //容器名称，可以自定义\r     protected static String vmLocation = \"China North\";                     //数据中心：China North或China East\r     private static String hostedServiceName=\"georges01\";                    //云服务的名称：可以代码创建也可以使用现有的，如果代码创建，请取消createHostedService()注释\r     private static String deploymentName = testVMPrefix + \"deploy1\";    \r     private static String virtualMachineName = testVMPrefix + \"vm1\"; \r     private static String hostedServiceLabel = testVMPrefix + \"HostedServiceLabel1\";\r     private static String hostedServiceDescription = testVMPrefix +\"HostedServiceDescription1\";        \r     private static String deploymentLabel = testVMPrefix + \"deployLabel1\";\r \r     static{\r          // TODO Auto-generated method stub\r          try {\r                //这个地方设置相关的证书，简单来说就是Client拿到访问订阅的权限。上面设置的storageAccountName请务必保证在这个订阅下面\r                // credentials.publishsettings：通过访问http://manage.windowsazure.cn/index/publishsettings下载订阅配置文件\r                //0012e7c8-f7d7-4691-90f0-63b06f0a305b:订阅ID\r \r                config = PublishSettingsLoader.createManagementConfiguration(\"E:\\\\AzureTestProject\\\\JavaWorkspace\\\\StorageTest001\\\\src\\\\azure\\\\project\\\\credentials.publishsettings\", \r                            \"0012e7c8-f7d7-4691-90f0-63b06f0a305b\");\r                computeManagementClient = ComputeManagementService.create(config);\r             hostedServicesOperations=computeManagementClient.getHostedServicesOperations();\r                createVMDeployment();\r          } catch (IOException e) {\r                // TODO Auto-generated catch block\r                e.printStackTrace();\r          } catch (Exception e) {\r                // TODO Auto-generated catch block\r                e.printStackTrace();\r          }\r     }\r \r     private static void createVMDeployment(){\r        try {\r            //如果尚未创建云服务，请取消createHostedService()注释，通过代码创建\r            //createHostedService();\r \r            ArrayList<Role> rolelist = createRoleList(); \r            VirtualMachineCreateDeploymentParameters deploymentParameters = new VirtualMachineCreateDeploymentParameters();\r            deploymentParameters.setDeploymentSlot(DeploymentSlot.Staging);\r            deploymentParameters.setName(deploymentName); \r            deploymentParameters.setLabel(deploymentLabel);        \r            deploymentParameters.setRoles(rolelist);\r            OperationResponse operationResponse = computeManagementClient.getVirtualMachinesOperations().createDeployment(hostedServiceName, deploymentParameters);\r \r          } catch (Exception e) {\r                // TODO: handle exception\r                System.out.println(e.getMessage());\r                e.printStackTrace();\r \r          }\r \r     }\r \r     private static void createHostedService() {\r \r          try {\r             //hosted service required for vm deployment\r             HostedServiceCreateParameters createParameters = new HostedServiceCreateParameters(); \r             //required\r             createParameters.setLabel(hostedServiceLabel);\r             //required\r             createParameters.setServiceName(hostedServiceName);\r             createParameters.setDescription(hostedServiceDescription);\r             //required\r             createParameters.setLocation(vmLocation);\r             OperationResponse hostedServiceOperationResponse = hostedServicesOperations.create(createParameters);\r \r             System.out.println(\"hostedservice created: \" + hostedServiceName);\r          } catch (Exception e) {\r                // TODO: handle exception\r                System.out.println(e.getMessage());\r                e.printStackTrace();\r          }\r \r     }\r \r     private static ArrayList<Role> createRoleList() {\r        try {\r            int random = (int)(Math.random()* 100);\r            ArrayList<Role> roleList = new ArrayList<Role>();\r            Role role = new Role();\r            String roleName = virtualMachineName;\r            String computerName = virtualMachineName;\r            String adminUserPassword = testVMPrefix + \"!12\";\r            String adminUserName = testVMPrefix;        \r            URI mediaLinkUriValue =  new URI(\"http://\"+ storageAccountName + \".blob.core.chinacloudapi.cn/\"+storageContainer+ \"/\" + testVMPrefix + random +\".vhd\");\r            String osVHarddiskName =testVMPrefix + \"oshdname\"+ random;\r            String operatingSystemName =\"Windows\";\r \r            //required\r            ArrayList<ConfigurationSet> configurationSetList = new ArrayList<ConfigurationSet>();\r            ConfigurationSet configurationSet = new ConfigurationSet();\r            configurationSet.setConfigurationSetType(ConfigurationSetTypes.WINDOWSPROVISIONINGCONFIGURATION);\r            //required\r            configurationSet.setComputerName(computerName);\r            //required\r            configurationSet.setAdminPassword(adminUserPassword);\r           //required\r            configurationSet.setAdminUserName(adminUserName);\r            configurationSet.setEnableAutomaticUpdates(false);\r            configurationSet.setHostName(hostedServiceName + \".cloudapp.net\");\r            configurationSetList.add(configurationSet); \r \r            String sourceImageName = getOSSourceImage();\r            OSVirtualHardDisk oSVirtualHardDisk = new OSVirtualHardDisk();\r            //required\r            oSVirtualHardDisk.setName(osVHarddiskName);\r            oSVirtualHardDisk.setHostCaching(VirtualHardDiskHostCaching.READWRITE);\r            oSVirtualHardDisk.setOperatingSystem(operatingSystemName);\r            //required\r            oSVirtualHardDisk.setMediaLink(mediaLinkUriValue);\r            //required\r            oSVirtualHardDisk.setSourceImageName(sourceImageName);\r \r            //required        \r            role.setRoleName(roleName);\r            //required\r            role.setRoleType(VirtualMachineRoleType.PersistentVMRole.toString());\r            role.setRoleSize(VirtualMachineRoleSize.MEDIUM);\r            role.setProvisionGuestAgent(true);\r            role.setConfigurationSets(configurationSetList);\r            role.setOSVirtualHardDisk(oSVirtualHardDisk);\r            roleList.add(role);\r            return roleList; \r          } catch (Exception e) {\r                // TODO: handle exception\r                // TODO: handle exception\r                System.out.println(e.getMessage());\r                e.printStackTrace();\r                return null;\r          }\r \r     }\r \r     private static VirtualMachineCreateParameters createVirtualMachineCreateParameter(String roleName, ArrayList<ConfigurationSet> configlist, OSVirtualHardDisk oSVirtualHardDisk, String availabilitySetNameValue) {\r         VirtualMachineCreateParameters createParameters = new VirtualMachineCreateParameters();\r         //required       \r         createParameters.setRoleName(roleName);\r         createParameters.setRoleSize(VirtualMachineRoleSize.MEDIUM);\r         createParameters.setProvisionGuestAgent(true);\r         createParameters.setConfigurationSets(configlist);       \r         createParameters.setOSVirtualHardDisk(oSVirtualHardDisk);\r         createParameters.setAvailabilitySetName(availabilitySetNameValue);        \r         return createParameters;\r     }\r \r     private static ArrayList<ConfigurationSet> createConfigList(String computerName,\r         String adminuserPassword, String adminUserName) {\r         ArrayList<ConfigurationSet> configlist = new ArrayList<ConfigurationSet>();\r         ConfigurationSet configset = new ConfigurationSet();\r         configset.setConfigurationSetType(ConfigurationSetTypes.WINDOWSPROVISIONINGCONFIGURATION);\r         //required\r         configset.setComputerName(computerName);\r         //required\r         configset.setAdminPassword(adminuserPassword);\r         //required\r         configset.setAdminUserName(adminUserName);\r         configset.setEnableAutomaticUpdates(false);\r         configlist.add(configset);\r         return configlist;\r     }\r \r     private static String getOSSourceImage() throws Exception {\r         String sourceImageName = null;\r         VirtualMachineOSImageListResponse virtualMachineImageListResponse = computeManagementClient.getVirtualMachineOSImagesOperations().list();\r         ArrayList<VirtualMachineOSImageListResponse.VirtualMachineOSImage> virtualMachineOSImagelist = virtualMachineImageListResponse.getImages();\r \r         for (VirtualMachineOSImageListResponse.VirtualMachineOSImage virtualMachineImage : virtualMachineOSImagelist) {\r \r          // 注意：示例中使用逻辑如下，由于Win-GA已经过期，导致找不到镜像，会导致后续创建部署失败。具体创建哪些基于哪些镜像的VM，您可以输出virtualMachineImage.getName()值来看着使用\r         // if ((virtualMachineImage.getName().contains(\"Win-GA\")) && (virtualMachineImage.getName().contains(\"JDK\")))        \r             if (virtualMachineImage.getName().contains(\"Windows-Server-2012-Essentials-20141204-zhcn\") ) {\r                 sourceImageName = virtualMachineImage.getName();\r                 break;\r             }\r         }\r \r         return sourceImageName;\r     }\r \r     private static OSVirtualHardDisk createOSVirtualHardDisk(String osVHarddiskName, String operatingSystemName, URI mediaLinkValue, String sourceImageName)\r     {\r         OSVirtualHardDisk oSVirtualHardDisk = new OSVirtualHardDisk(); \r         //required\r         oSVirtualHardDisk.setName(osVHarddiskName);\r         oSVirtualHardDisk.setHostCaching(VirtualHardDiskHostCaching.READWRITE);\r         oSVirtualHardDisk.setOperatingSystem(operatingSystemName);\r         //required\r         oSVirtualHardDisk.setMediaLink(mediaLinkValue);\r         //required\r         oSVirtualHardDisk.setSourceImageName(sourceImageName);\r         return oSVirtualHardDisk;\r     }\r \r     public static void main(String[] args) throws Exception {\r \r         int random = (int)(Math.random()* 100); \r         String roleName = testVMPrefix + \"vm2\";\r         String computerName = testVMPrefix + \"vm2\";\r         String adminuserPassword = testVMPrefix + \"!12\";\r         String adminUserName = testVMPrefix;\r         URI mediaLinkUriValue =  new URI(\"http://\"+ storageAccountName + \".blob.core.chinacloudapi.cn/\"+storageContainer+ \"/\" + testVMPrefix +random + \".vhd\");\r         String osVHarddiskName =testVMPrefix + \"oshdname\" + random;\r         String operatingSystemName =\"Windows\";\r \r         //required\r         ArrayList<ConfigurationSet> configlist = createConfigList(computerName, adminuserPassword, adminUserName);\r \r         //required\r         String sourceImageName = getOSSourceImage();\r         OSVirtualHardDisk oSVirtualHardDisk = createOSVirtualHardDisk(osVHarddiskName, operatingSystemName, mediaLinkUriValue, sourceImageName);\r         VirtualMachineCreateParameters createParameters = createVirtualMachineCreateParameter(roleName, configlist, oSVirtualHardDisk, null);\r \r         //Act\r         OperationResponse operationResponse = computeManagementClient.getVirtualMachinesOperations().create(hostedServiceName, deploymentName, createParameters);\r \r         System.out.println(operationResponse.getStatusCode());\r \r     }\r }\r ```\r \r ## <a id=\"createVM1\"></a>基于捕获的映像创建虚拟机\r \r 关于自定义的映像有两种类型，一种是经过 Sysprep（一般化）处理的，一种是未经过处理的，两种映像的主要区别是：\r \r 1. 经 Sysprep 处理后的映像：这种映像移除了特定配置，比如登录的用户名、密码等信息，类似于系统镜像。基于这种镜像创建 VM 时，我们需要设定 VM 的 ConfigurationSet 信息\r \r     ![](./media/aog-sample-code-azure-java-manage-vm/capture-vm-with-sysprep.jpg)\r \r 2. 未经 Sysprep 处理的映像：这种映像包含特定的配置，比如登录的用户名、密码等信息。基于这种镜像创建VM时，我们不需要设定 VM 的 ConfigurationSet 信息。\r \r     ![](./media/aog-sample-code-azure-java-manage-vm/capture-vm-without-sysprep.jpg)\r \r 关于 Sysprep，更多详细信息请参考：[Sysprep（一般化）Windows 安装](https://msdn.microsoft.com/zh-cn/library/hh824938.aspx)\r \r 根据上述描述，我们分别创建了这两种类型的映像（如下图所示）。根据这两种映像创建 VM 的方法，请参考下面的示例代码。\r \r ![](./media/aog-sample-code-azure-java-manage-vm/captured-vms.jpg)\r \r **使用经过 Sysprep 处理后的映像来创建 VM 的示例代码：**\r \r ```\r public class CreateCaptureImageWithSysprep {\r \r     protected static Configuration config;\r     protected static ComputeManagementClient computeManagementClient;\r     protected static String testVMPrefix = \"georgeteam\";      //VM前缀名称\r     protected static String vmLocation = \"China North\";       //VM Location\r     private static String hostedServiceName=\"georges02\";      //我们这这里直接使用已创建好的云服务\r \r     static{\r          try {\r                config = PublishSettingsLoader.createManagementConfiguration(\"E:\\\\AzureTestProject\\\\JavaWorkspace\\\\StorageTest001\\\\src\\\\azure\\\\project\\\\credentials.publishsettings\", \r                            \"<Subscription ID>\");\r                computeManagementClient = ComputeManagementService.create(config);\r          } catch (IOException e) {\r                e.printStackTrace();\r          } catch (Exception e) {\r                e.printStackTrace();\r          }\r     }\r \r     private static String getSourceImage() throws Exception {\r         String sourceImageName = null;\r         VirtualMachineVMImageListResponse virtualMachineImageListResponse = computeManagementClient.getVirtualMachineVMImagesOperations().list();\r         ArrayList<VirtualMachineVMImageListResponse.VirtualMachineVMImage> virtualMachineOSImagelist = virtualMachineImageListResponse.getVMImages();\r \r         for (VirtualMachineVMImageListResponse.VirtualMachineVMImage virtualMachineImage : virtualMachineOSImagelist) {\r             System.out.println(virtualMachineImage.getName());          \r             sourceImageName = virtualMachineImage.getName();\r             break;\r         }\r \r         return sourceImageName;\r     };\r \r     private static ArrayList<ConfigurationSet> createConfigList(String computerName,\r             String adminuserPassword, String adminUserName) {\r             ArrayList<ConfigurationSet> configlist = new ArrayList<ConfigurationSet>();\r             ConfigurationSet configset = new ConfigurationSet();\r             configset.setConfigurationSetType(ConfigurationSetTypes.WINDOWSPROVISIONINGCONFIGURATION);\r             //required\r             configset.setComputerName(computerName);\r             //required\r             configset.setAdminPassword(adminuserPassword);\r             //required\r             configset.setAdminUserName(adminUserName);\r             configset.setEnableAutomaticUpdates(false);\r             configlist.add(configset);\r             return configlist;\r         }\r \r     private static VirtualMachineCreateParameters createVirtualMachineCreateParameter(String roleName, ArrayList<ConfigurationSet> configlist, String vMImageNameValue, String availabilitySetNameValue) throws \r                 URISyntaxException {\r         VirtualMachineCreateParameters createParameters = new VirtualMachineCreateParameters();   \r         createParameters.setRoleName(roleName);\r         createParameters.setRoleSize(VirtualMachineRoleSize.MEDIUM);\r         createParameters.setProvisionGuestAgent(true);\r         createParameters.setConfigurationSets(configlist);              //Sysprep处理后的映像需要设置ConfigurationSet\r \r         //createParameters.setOSVirtualHardDisk(oSVirtualHardDisk);     //基于系统映像创建的方式\r         createParameters.setVMImageName(vMImageNameValue);              //基于自定映像响创建的方式\r         return createParameters;\r     }\r \r     public static void main(String[] args)  {\r \r             try {\r                     String roleName = testVMPrefix + \"vm4\";\r                     String deploymentName = testVMPrefix + \"deploy1\";      //deploymentName必须存在，由于我们之前已经创建了这个部署，因此这个类里面直接使用该部署\r                     String sourceImageName = \"geots-20160516-903273\";      //这里我们直接使用捕获的映像名字，如需代码查找，参考函数：getSourceImage()\r                     String computerName = testVMPrefix + \"vm4\";\r                     String adminuserPassword = testVMPrefix + \"!12\";\r                     String adminUserName = testVMPrefix;\r                     ArrayList<ConfigurationSet> configlist = createConfigList(computerName, adminuserPassword, adminUserName);\r                     VirtualMachineCreateParameters createParameters = createVirtualMachineCreateParameter(roleName,configlist, sourceImageName, null);\r                     OperationResponse operationResponse = computeManagementClient.getVirtualMachinesOperations().create(hostedServiceName, deploymentName, createParameters);             \r                     System.out.println(operationResponse.getStatusCode());\r \r             } catch (Exception e) {\r                   e.printStackTrace();\r             }\t \r    }\r }\r ```\r \r **使用未经过 Sysprep 处理后的映像来创建 VM 的示例代码：**\r \r ```\r public class CreateCaptureImageWithNoSysprep {\r \r     protected static Configuration config;\r     protected static ComputeManagementClient computeManagementClient;\r     protected static String testVMPrefix = \"georgeteam\";      //VM前缀名称\r     protected static String vmLocation = \"China North\";       //VM Location\r     private static String hostedServiceName=\"georges02\";      //我们这这里直接使用已创建好的云服务\r \r     static{\r          try {\r                config = PublishSettingsLoader.createManagementConfiguration(\"E:\\\\AzureTestProject\\\\JavaWorkspace\\\\StorageTest001\\\\src\\\\azure\\\\project\\\\credentials.publishsettings\", \r                            \"0012e7c8-f7d7-4691-90f0-63b06f0a305b\");\r                computeManagementClient = ComputeManagementService.create(config);\r          } catch (IOException e) {\r                e.printStackTrace();\r          } catch (Exception e) {\r                e.printStackTrace();\r          }\r     }\r \r     private static String getSourceImage() throws Exception {\r         String sourceImageName = null;\r         VirtualMachineVMImageListResponse virtualMachineImageListResponse = computeManagementClient.getVirtualMachineVMImagesOperations().list();\r         ArrayList<VirtualMachineVMImageListResponse.VirtualMachineVMImage> virtualMachineOSImagelist = virtualMachineImageListResponse.getVMImages();\r \r         for (VirtualMachineVMImageListResponse.VirtualMachineVMImage virtualMachineImage : virtualMachineOSImagelist) {\r             System.out.println(virtualMachineImage.getName());          \r             sourceImageName = virtualMachineImage.getName();\r             break;\r         }\r \r         return sourceImageName;\r     };\r \r     private static VirtualMachineCreateParameters createVirtualMachineCreateParameter(String roleName, String vMImageNameValue, String availabilitySetNameValue) throws URISyntaxException {\r         VirtualMachineCreateParameters createParameters = new VirtualMachineCreateParameters();   \r         createParameters.setRoleName(roleName);\r         createParameters.setRoleSize(VirtualMachineRoleSize.MEDIUM);\r         createParameters.setProvisionGuestAgent(true);\r         //createParameters.setConfigurationSets(configlist);            //未经Sysprep处理的映像，不需要设置ConfigurationSet\r         //createParameters.setOSVirtualHardDisk(oSVirtualHardDisk);     //基于系统映像创建的方式\r         createParameters.setVMImageName(vMImageNameValue);              //基于自定义映像创建的方式\r \r         return createParameters;\r     }\r \r    public static void main(String[] args)  {\r             try {\r                     String roleName = testVMPrefix + \"vm3\";\r                     String deploymentName = testVMPrefix + \"deploy1\";                  //deploymentName必须存在，由于我们之前已经创建了这个部署，因此这个类里面直接使用该部署\r                     String sourceImageName = \"team-server-20160516-584217\";            //这里我们直接使用捕获的映像名字，如需代码查找，参考函数：getSourceImage()\r                     VirtualMachineCreateParameters createParameters = createVirtualMachineCreateParameter(roleName, sourceImageName, null);\r                     OperationResponse operationResponse = computeManagementClient.getVirtualMachinesOperations().create(hostedServiceName, deploymentName, createParameters);             \r                     System.out.println(operationResponse.getStatusCode());\r \r             } catch (Exception e) {\r                   e.printStackTrace();\r             }\r    }\r }\r ```\r \r ## <a id=\"createDisk\"></a>创建系统磁盘和数据磁盘\r \r 虚拟机磁盘包含两种类型，系统磁盘和数据磁盘，从名字可以看出，系统磁盘一般用来做系统盘，而数据磁盘一般用来做数据存储盘。 Azure Java SDK 中有很多方法可以创建系统磁盘和数据磁盘。  \r \r 例如：**computeManagementClient.getVirtualMachineDisksOperations().createDisk**：该方法既可以创建数据磁盘，又可以创建系统磁盘，但创建时，必须指定 VHD 文件的位置。\r **computeManagementClient.getVirtualMachineDisksOperations().createDataDisk**：该方法 只可以创建数据磁盘，该方法不依赖于现有的 VHD，可以直接向已有的 VM 附加新的数据磁盘\r \r **创建系统磁盘的示例代码**\r \r ```\r Public void testCreateOSDisk() throws Exception {\r     URI mediaLinkUriValue = new URI(\"https://kevinstorage1.blob.core.chinacloudapi.cn/vhds/kevinvm-kevinvm-2016-04-14.vhd\");\r     VirtualMachineDiskCreateParameters createParameters= new VirtualMachineDiskCreateParameters();\r     createParameters.setName(\"kevintest-osdisk01\");\r     createParameters.setLabel(\"kevintest-osdisk-label\");\r     createParameters.setMediaLinkUri(mediaLinkUriValue);\r     createParameters.setOperatingSystemType(VirtualMachineOSImageOperatingSystemType.WINDOWS);\r     computeManagementClient.getVirtualMachineDisksOperations().createDisk(createParameters);\r }\r ```\r \r **创建数据磁盘的示例代码**\r \r ```\r Public void test CreateDataDisk() throws Exception {\r     URI mediaLinkUriValue = new URI(\"https://kevinstorage1.blob.core.chinacloudapi.cn/vhds/kevinvm-kevinvm-0509-2.vhd\");\r     VirtualMachineDiskCreateParameters createParameters = new VirtualMachineDiskCreateParameters();\r     createParameters.setName(\"kevintest-datadisk01\");\r     createParameters.setLabel(\"kevintest-datadisk-label\");\r     createParameters.setMediaLinkUri(mediaLinkUriValue);\r     computeManagementClient.getVirtualMachineDisksOperations().createDisk(createParameters);\r }\r ```\r \r ## <a id=\"attachanddelete\"></a>附加磁盘和删除磁盘\r \r 1. 附加磁盘\r \r     附加磁盘的时候，如果你附加现有的磁盘，首先确保你附加的磁盘没有被其他 VM 引用。附加现有磁盘只能通过更新 VM 来附加，请参考以下代码：\r \r     ```\r     VirtualMachineGetResponse virtualMachinesGetResponse = computeManagementClient.getVirtualMachinesOperations().get(\"kevinvm\", \"kevinvm\", \"kevinvm\");\r \r     VirtualMachineUpdateParameters updateParameters = new VirtualMachineUpdateParameters();\r     updateParameters.setRoleName(virtualMachinesGetResponse.getRoleName());\r     updateParameters.setConfigurationSets(virtualMachinesGetResponse.getConfigurationSets());\r \r     //this is required parameters for update\r     OSVirtualHardDisk osVirtualHardDisk = virtualMachinesGetResponse.getOSVirtualHardDisk();\r     updateParameters.setOSVirtualHardDisk(osVirtualHardDisk);\r \r     ArrayList<DataVirtualHardDisk> dataDisks = new ArrayList<DataVirtualHardDisk>();\r     VirtualMachineDiskGetResponse response = computeManagementClient.getVirtualMachineDisksOperations().getDisk(\"kevinvm-kevinvm-1-201605090139510196\");\r     DataVirtualHardDisk dataVirtualHardDisk = new DataVirtualHardDisk();\r     dataVirtualHardDisk.setName(response.getName());\r     dataVirtualHardDisk.setMediaLink(response.getMediaLinkUri());\r     dataVirtualHardDisk.setLabel(response.getLabel());\r     dataDisks.add(dataVirtualHardDisk);\r     updateParameters.setDataVirtualHardDisks(dataDisks);\r \r     //update\r     OperationResponse updateoperationResponse = computeManagementClient.getVirtualMachinesOperations().update(\"kevinvm\", \"kevinvm\", \"kevinvm\", updateParameters);\r     ```\r \r 2. 分离磁盘\r \r     deleteDataDisk 删除磁盘是可以作为分离磁盘来用的， 这个方法的最后一个参数，deleteDataDisk 如果设置为 false，就是从当前 VM 中删除磁盘，但保留其 VHD 文件。请参考下面的代码：\r \r     ```\r     computeManagementClient.getVirtualMachineDisksOperations().deleteDataDisk \r     ```\r \r ## <a id=\"resource\"></a>相关参考资料\r - [Azure Java SDK API](http://azure.github.io/azure-sdk-for-java/)\r - [Azure Management Libraries for Java](https://github.com/Azure/azure-sdk-for-java/tree/0.9)\r - [Getting Started with Azure Management Libraries for Java](https://azure.microsoft.com/en-us/blog/getting-started-with-the-azure-java-management-libraries/)\r - [Java 开发人员中心](https://www.azure.cn/develop/java/)"}