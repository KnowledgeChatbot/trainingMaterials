{"Title":"适用于 Azure 的 MongoDB、Angular 和 Node 教程 - 第 2 部分","Description":"本教程系列的第 2 部分，介绍如何通过 Angular 和 Node 在 Azure Cosmos DB 上创建 MongoDB 应用，所使用的 API 与用于 MongoDB 的 API 完全相同。","Content":"# <a name=\"create-a-mongodb-app-with-angular-and-azure-cosmos-db---part-2-create-a-nodejs-express-app-with-the-angular-cli\"></a>通过 Angular 和 Azure Cosmos DB 创建 MongoDB 应用 - 第 2 部分：通过 Angular CLI 创建 Node.js Express 应用 \r \r 本教程包含多个部分，演示了如何通过 Express、Angular 和 Azure Cosmos DB 数据库创建以 Node.js 编写的新 [MongoDB API](mongodb-introduction.md) 应用。\r \r <!-- Not Avaialbe [the introduction](tutorial-develop-mongodb-nodejs.md) due to it is all invalid VIDEO-->\r > [!div class=\"checklist\"]\r > * 安装 Angular CLI 和 TypeScript\r > * 使用 Angular 创建新项目\r > * 使用 Express 框架生成应用\r > * 在 Postman 中测试应用\r \r <!-- Not Available ## Video walkthrough-->\r ## <a name=\"prerequisites\"></a>先决条件\r \r <!-- Not Available Before starting this part of the tutorial, ensure you've watched the [introduction video](tutorial-develop-mongodb-nodejs.md).-->\r <!-- Not Available tutorial-develop-mongodb-nodejs.md due to it is all the walkthrough of www.youtub.com-->\r \r 本教程还需要： \r * [Node.js](https://nodejs.org/) 8.4.0 或更高版本。\r * [Postman](https://www.getpostman.com/)\r * [Visual Studio Code](https://code.visualstudio.com/) 或你喜欢用的代码编辑器。\r \r > [!TIP]\r > 本教程介绍分步生成应用程序的步骤。 若要下载完成的项目，可从 GitHub 上的 [angular-cosmosdb 存储库](https://github.com/Azure-Samples/angular-cosmosdb)获取完成的应用程序。\r \r ## <a name=\"install-the-angular-cli-and-typescript\"></a>安装 Angular CLI 和 TypeScript\r \r 1. 打开 Windows 命令提示符或 Mac Terminal 窗口并安装 Angular CLI。\r \r     ```bash\r     npm install -g @angular/cli\r     ```\r \r 2. 在提示符处输入以下命令，安装 TypeScript。 \r \r     ```bash\r     npm install -g typescript\r     ```\r \r ## <a name=\"use-the-angular-cli-to-create-a-new-project\"></a>使用 Angular CLI 创建新项目\r \r 1. 在命令提示符处转到需在其中创建新项目的文件夹，然后运行以下命令。 此命令创建名为 angular-cosmosdb 的新文件夹和项目，并安装新应用所需的 Angular 组件。 此外，它还会在 src/client 文件夹中安装源代码 (-sd src/client)、使用最低设置 (--minimal)，以及指定该项目使用 Sass（一种带 --style scss 标记的类似 CSS 的语法）。\r \r     ```bash\r     ng new angular-cosmosdb -sd src/client --minimal --style scss\r     ```\r \r 2. 完成该命令后，将目录转到 src/client 文件夹。\r \r     ```bash\r     cd angular-cosmosdb\r     ```\r \r 3. 然后在 Visual Studio Code 中打开该文件夹。\r \r     ```bash\r     code .\r     ```\r \r ## <a name=\"build-the-app-using-the-express-framework\"></a>使用 Express 框架生成应用\r \r 1. 在 Visual Studio Code 的“资源管理器”窗格中，右键单击 src 文件夹，单击“新建文件夹”，然后将新文件夹命名为“server”。\r \r 2. 在“资源管理器”窗格中，右键单击“server”文件夹，单击“新建文件”，然后将新文件命名为“index.js”。\r \r 3. 回到命令提示符处，使用以下命令安装正文分析器。 这有助于应用分析通过 API 传入的 JSON 数据。\r \r     ```bash\r     npm i express body-parser --save\r     ```\r \r 4. 将以下代码复制到 Visual Studio Code 的 index.js 文件中。 此代码：\r     * 引用 Express\r     * 拉入 body-parser，用于读取请求正文中的 JSON 数据\r     * 使用称为 path 的内置功能\r     * 设置根变量，方便查找代码所处位置\r     * 设置端口\r     * 启动 Express\r     * 告知应用如何使用可以为服务器提供服务的中间件\r     * 提供 dist 文件夹中将会成为静态内容的所有内容\r     * 为应用程序提供服务，为服务器上找不到的任何 GET 请求提供 index.html（用于深层链接）\r     * 通过 app.listen 启动服务器\r     * 使用 arow 函数来记录端口处于活动状态这一情况\r \r    ```node\r    const express = require('express');\r    const bodyParser = require('body-parser');\r    const path = require('path');\r    const routes = require('./routes');\r \r    const root = './';\r    const port = process.env.PORT || '3000';\r    const app = express();\r \r    app.use(bodyParser.json());\r    app.use(bodyParser.urlencoded({ extended: false }));\r    app.use(express.static(path.join(root, 'dist')));\r    app.use('/api', routes);\r    app.get('*', (req, res) => {\r      res.sendFile('dist/index.html', {root});\r    });\r \r    app.listen(port, () => console.log(`API running on localhost:${port}`));\r    ```\r \r 5. 在 Visual Studio Code 的“资源管理器”窗格中，右键单击 server 文件夹，然后单击“新建文件”。 将新文件命名为 routes.js。 \r \r 6. 将以下代码复制到 routes.js 中。 此代码：\r    * 引用 Express 路由器\r    * 获取 hero\r    * 发送回适用于已定义 hero 的 JSON\r \r    ```node\r    const express = require('express');\r    const router = express.Router();\r \r    router.get('/heroes', (req, res) => {\r     res.send(200, [\r        {\"id\": 10, \"name\": \"Starlord\", \"saying\": \"oh yeah\"}\r     ])\r    });\r \r    module.exports=router;\r    ```\r \r 7. 保存所有修改过的文件。 \r \r 8. 在 Visual Studio Code 中单击“调试”按钮 ![Visual Studio Code 中的“调试”图标](./media/tutorial-develop-mongodb-nodejs-part2/debug-button.png)，单击“齿轮”按钮 ![Visual Studio Code 中的“齿轮”按钮](./media/tutorial-develop-mongodb-nodejs-part2/gear-button.png)，然后选择 Node.js 来创建配置。\r \r    此时会在 Visual Studio Code 中打开新的 launch.json 文件。\r \r 8. 在 launch.json 文件的第 11 行将 `\"program\": \"${file}\"` 更改为 `\"program\": \"${workspaceRoot}/src/server/index.js\"`，然后保存文件。\r \r 9. 单击“开始调试”按钮 ![Visual Studio Code 中的“开始调试”图标](./media/tutorial-develop-mongodb-nodejs-part2/start-debugging-button.png)，运行应用。\r \r     应用应该正常运行。\r \r ## <a name=\"use-postman-to-test-the-app\"></a>使用 Postman 来测试应用\r \r 1. 现在请打开 Postman，将 `http://localhost:3000/api/heroes` 置于 GET 框中。 \r \r 2. 单击“发送”按钮，从应用获取 JSON 响应。 \r \r     该响应显示应用在本地启动并运行。 \r \r     ![Postman，显示请求和响应](./media/tutorial-develop-mongodb-nodejs-part2/azure-cosmos-db-postman.png)\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 在本教程的此部分，你已完成以下操作：\r \r > [!div class=\"checklist\"]\r > * 使用 Angular CLI 创建 Node.js 项目\r > * 使用 Postman 测试应用\r \r 你可以转到本教程的下一部分来生成 UI。\r \r > [!div class=\"nextstepaction\"]\r > [通过 Angular 生成 UI](tutorial-develop-mongodb-nodejs-part3.md)"}