{"Title":"跨多个存储帐户管理媒体服务资产","Description":"本文提供如何跨多个存储帐户管理媒体服务资产的指导。","Content":"# <a name=\"managing-media-services-assets-across-multiple-storage-accounts\"></a>跨多个存储帐户管理媒体服务资产\r 从 Microsoft Azure 媒体服务 2.2 开始，可以将多个存储帐户附加到一个媒体服务帐户。 将多个存储帐户附加到一个媒体服务帐户这一功能具有以下优势：\r \r * 使多个存储帐户之间的资产实现负载均衡。\r * 缩放媒体服务以处理大量内容（目前，单个存储帐户的上限为 500 TB）。 \r \r 本主题演示如何使用 [Azure Resource Manager API](https://docs.microsoft.com/rest/api/media/mediaservice) 和 [Powershell](https://docs.microsoft.com/powershell/powershell/module/azurerm.media) 将多个存储帐户附加到媒体服务帐户。 此外还说明如何在使用媒体服务 SDK 创建资产时指定不同的存储帐户。 \r \r ## <a name=\"considerations\"></a>注意事项\r 将多个存储帐户附加到媒体服务帐户时，请注意以下事项：\r \r * 附加到媒体服务帐户的所有存储帐户必须与媒体服务帐户位于同一数据中心。\r * 目前，存储帐户一旦附加到指定的媒体服务帐户便无法断开。\r * 主存储帐户是在创建媒体服务帐户创建时指定的帐户。 目前无法更改默认存储帐户。 \r * 目前，如果需要将冷存储帐户添加到 AMS 帐户，该存储帐户必须为 Blob 类型且设置为“非主”。\r \r 其他注意事项：\r \r 构建数据流内容的 URL 时，媒体服务会使用 IAssetFile.Name 属性的值（如 http://{WAMSAccount}.origin.mediaservices.chinacloudapi.cn/{GUID}/{IAssetFile.Name}/streamingParameters。）出于这个原因，不允许使用百分号编码。 Name 属性的值不能含有任何以下[百分号编码保留字符](http://zh.wikipedia.org/wiki/百分号编码#.E4.BF.9D.E7.95.99.E5.AD.97.E7.AC.A6.E7.9A.84.E7.99.BE.E5.88.86.E5.8F.B7.E7.BC.96.E7.A0.81)：!*'();:@&=+$,/?%#[]\"。 此外，文件扩展名中只能含有一个“.”。\r \r ## <a name=\"to-attach-storage-accounts\"></a>附加存储帐户  \r \r 若要将存储帐户附加到 AMS 帐户，请使用 [Azure Resource Manager API](https://docs.microsoft.com/rest/api/media/mediaservice) 和 [Powershell](https://docs.microsoft.com/powershell/module/azurerm.media)，如以下示例所示。\r ```\r $regionName = \"China East\"\r $subscriptionId = \" xxxxxxxx-xxxx-xxxx-xxxx- xxxxxxxxxxxx \"\r $resourceGroupName = \"SkyMedia-ChinaEast-App\"\r $mediaAccountName = \"sky\"\r $storageAccount1Name = \"skystorage1\"\r $storageAccount2Name = \"skystorage2\"\r $storageAccount1Id = \"/subscriptions/$subscriptionId/resourceGroups/$resourceGroupName/providers/Microsoft.Storage/storageAccounts/$storageAccount1Name\"\r $storageAccount2Id = \"/subscriptions/$subscriptionId/resourceGroups/$resourceGroupName/providers/Microsoft.Storage/storageAccounts/$storageAccount2Name\"\r $storageAccount1 = New-AzureRmMediaServiceStorageConfig -StorageAccountId $storageAccount1Id -IsPrimary\r $storageAccount2 = New-AzureRmMediaServiceStorageConfig -StorageAccountId $storageAccount2Id\r $storageAccounts = @($storageAccount1, $storageAccount2)\r \r Set-AzureRmMediaService -ResourceGroupName $resourceGroupName -AccountName $mediaAccountName -StorageAccounts $storageAccounts\r ```\r \r ### <a name=\"support-for-cool-storage\"></a>支持冷存储\r \r 目前，如果需要将冷存储帐户添加到 AMS 帐户，该存储帐户必须为 Blob 类型且设置为“非主”。\r \r ## <a name=\"to-manage-media-services-assets-across-multiple-storage-accounts\"></a>跨多个存储帐户管理媒体服务资产\r 以下代码使用最新的媒体服务 SDK 执行下列任务：\r \r 1. 显示与指定媒体服务帐户关联的所有存储帐户。\r 2. 检索默认存储帐户的名称。\r 3. 在默认存储帐户中创建一个新资产。\r 4. 在指定存储帐户中创建编码作业的输出资产。\r    \r ```\r using Microsoft.WindowsAzure.MediaServices.Client;\r using System;\r using System.Collections.Generic;\r using System.Configuration;\r using System.IO;\r using System.Linq;\r using System.Text;\r using System.Threading;\r using System.Threading.Tasks;\r \r namespace MultipleStorageAccounts\r {\r     class Program\r     {\r         // Location of the media file that you want to encode. \r         private static readonly string _singleInputFilePath =\r             Path.GetFullPath(@\"../..\\supportFiles\\multifile\\interview2.wmv\");\r \r         // Read values from the App.config file.\r         private static readonly string _AADTenantDomain =\r         ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r         private static readonly string _RESTAPIEndpoint =\r         ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r         private static CloudMediaContext _context;\r \r         static void Main(string[] args)\r         {\r             var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r             var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r             _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r             // Display the storage accounts associated with \r             // the specified Media Services account:\r             foreach (var sa in _context.StorageAccounts)\r                 Console.WriteLine(sa.Name);\r \r             // Retrieve the name of the default storage account.\r             var defaultStorageName = _context.StorageAccounts.Where(s => s.IsDefault == true).FirstOrDefault();\r             Console.WriteLine(\"Name: {0}\", defaultStorageName.Name);\r             Console.WriteLine(\"IsDefault: {0}\", defaultStorageName.IsDefault);\r \r             // Retrieve the name of a storage account that is not the default one.\r             var notDefaultStroageName = _context.StorageAccounts.Where(s => s.IsDefault == false).FirstOrDefault();\r             Console.WriteLine(\"Name: {0}\", notDefaultStroageName.Name);\r             Console.WriteLine(\"IsDefault: {0}\", notDefaultStroageName.IsDefault);\r \r             // Create the original asset in the default storage account.\r             IAsset asset = CreateAssetAndUploadSingleFile(AssetCreationOptions.None,\r                 defaultStorageName.Name, _singleInputFilePath);\r             Console.WriteLine(\"Created the asset in the {0} storage account\", asset.StorageAccountName);\r \r             // Create an output asset of the encoding job in the other storage account.\r             IAsset outputAsset = CreateEncodingJob(asset, notDefaultStroageName.Name, _singleInputFilePath);\r             if (outputAsset != null)\r                 Console.WriteLine(\"Created the output asset in the {0} storage account\", outputAsset.StorageAccountName);\r \r         }\r \r         static public IAsset CreateAssetAndUploadSingleFile(AssetCreationOptions assetCreationOptions, string storageName, string singleFilePath)\r         {\r             var assetName = \"UploadSingleFile_\" + DateTime.UtcNow.ToString();\r \r             // If you are creating an asset in the default storage account, you can omit the StorageName parameter.\r             var asset = _context.Assets.Create(assetName, storageName, assetCreationOptions);\r \r             var fileName = Path.GetFileName(singleFilePath);\r \r             var assetFile = asset.AssetFiles.Create(fileName);\r \r             Console.WriteLine(\"Created assetFile {0}\", assetFile.Name);\r \r             assetFile.Upload(singleFilePath);\r \r             Console.WriteLine(\"Done uploading {0}\", assetFile.Name);\r \r             return asset;\r         }\r \r         static IAsset CreateEncodingJob(IAsset asset, string storageName, string inputMediaFilePath)\r         {\r             // Declare a new job.\r             IJob job = _context.Jobs.Create(\"My encoding job\");\r             // Get a media processor reference, and pass to it the name of the \r             // processor to use for the specific task.\r             IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\r \r             // Create a task with the encoding details, using a string preset.\r             ITask task = job.Tasks.AddNew(\"My encoding task\",\r                 processor,\r                 \"Adaptive Streaming\",\r                 Microsoft.WindowsAzure.MediaServices.Client.TaskOptions.ProtectedConfiguration);\r \r             // Specify the input asset to be encoded.\r             task.InputAssets.Add(asset);\r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is not encrypted. \r             task.OutputAssets.AddNew(\"Output asset\", storageName,\r                 AssetCreationOptions.None);\r \r             // Use the following event handler to check job progress.  \r             job.StateChanged += new\r                     EventHandler<JobStateChangedEventArgs>(StateChanged);\r \r             // Launch the job.\r             job.Submit();\r \r             // Check job execution and wait for job to finish. \r             Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\r             progressJobTask.Wait();\r \r             // Get an updated job reference.\r             job = GetJob(job.Id);\r \r             // If job state is Error the event handling \r             // method for job progress should log errors.  Here we check \r             // for error state and exit if needed.\r             if (job.State == JobState.Error)\r             {\r                 Console.WriteLine(\"\\nExiting method due to job error.\");\r                 return null;\r             }\r \r             // Get a reference to the output asset from the job.\r             IAsset outputAsset = job.OutputMediaAssets[0];\r \r             return outputAsset;\r         }\r \r         private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r         {\r             var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\r                 ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\r \r             if (processor == null)\r                 throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\r \r             return processor;\r         }\r \r         private static void StateChanged(object sender, JobStateChangedEventArgs e)\r         {\r             Console.WriteLine(\"Job state changed event:\");\r             Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r             Console.WriteLine(\"  Current state: \" + e.CurrentState);\r \r             switch (e.CurrentState)\r             {\r                 case JobState.Finished:\r                     Console.WriteLine();\r                     Console.WriteLine(\"********************\");\r                     Console.WriteLine(\"Job is finished.\");\r                     Console.WriteLine(\"Please wait while local tasks or downloads complete...\");\r                     Console.WriteLine(\"********************\");\r                     Console.WriteLine();\r                     Console.WriteLine();\r                     break;\r                 case JobState.Canceling:\r                 case JobState.Queued:\r                 case JobState.Scheduled:\r                 case JobState.Processing:\r                     Console.WriteLine(\"Please wait...\\n\");\r                     break;\r                 case JobState.Canceled:\r                 case JobState.Error:\r                     // Cast sender as a job.\r                     IJob job = (IJob)sender;\r                     // Display or log error details as needed.\r                     Console.WriteLine(\"An error occurred in {0}\", job.Id);\r                     break;\r                 default:\r                     break;\r             }\r         }\r \r         static IJob GetJob(string jobId)\r         {\r             // Use a Linq select query to get an updated \r             // reference by Id. \r             var jobInstance =\r                 from j in _context.Jobs\r                 where j.Id == jobId\r                 select j;\r             // Return the job reference as an Ijob. \r             IJob job = jobInstance.FirstOrDefault();\r \r             return job;\r         }\r     }\r }\r ```\r \r <!--Update_Description: update code to use AAD token instead of ACS-->\r "}