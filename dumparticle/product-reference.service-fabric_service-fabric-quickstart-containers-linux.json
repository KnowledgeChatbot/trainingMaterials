{"Title":"在 Linux 上创建 Azure Service Fabric 容器应用程序","Description":"在 Azure Service Fabric 上创建第一个 Linux 容器应用程序。  生成包含应用程序的 Docker 映像，将该映像推送到容器注册表，并生成并部署 Service Fabric 容器应用程序。","Content":"# <a name=\"deploy-an-azure-service-fabric-linux-container-application-on-azure\"></a>在 Azure 上部署 Azure Service Fabric Linux 容器应用程序\r Azure Service Fabric 是一款分布式系统平台，可用于部署和管理可缩放的可靠微服务和容器。 \r \r 本快速入门介绍如何将 Linux 容器部署到 Service Fabric 群集。 完成后，Service Fabric 群集中会运行一个由 Python Web 前端和 Redis 后端组成的投票应用程序。 \r \r ![quickstartpic][quickstartpic]\r \r 此快速入门介绍如何：\r > [!div class=\"checklist\"]\r > * 将容器部署到 Azure Linux Service Fabric 群集\r > * 在 Service Fabric 中缩放和故障转移容器\r \r ## <a name=\"prerequisite\"></a>先决条件\r 如果没有 Azure 订阅，可在开始前创建一个[试用帐户](https://www.azure.cn/pricing/1rmb-trial/)。\r \r [!INCLUDE [azure-cli-2-azurechinacloud-environment-parameter](../../includes/azure-cli-2-azurechinacloud-environment-parameter.md)]\r \r 如果选择在本地安装并使用命令行接口 (CLI)，请确保运行 Azure CLI 2.0.4 或更高版本。 若要查找版本，请运行 az --version。 如果需要进行安装或升级，请参阅[安装 Azure CLI 2.0](https://docs.azure.cn/zh-cn/cli/install-azure-cli?view=azure-cli-latest)。\r \r ## <a name=\"get-application-package\"></a>获取应用程序包\r 若要将容器部署到 Service Fabric，需要一组描述各个容器以及应用程序的清单文件（应用程序定义）。\r \r 在 Cloud Shell 中，使用 git 克隆一份应用程序定义。\r \r ```azurecli\r git clone https://github.com/Azure-Samples/service-fabric-containers.git\r \r cd service-fabric-containers/Linux/container-tutorial/Voting\r ```\r \r ## <a name=\"deploy-the-containers-to-a-service-fabric-cluster-in-azure\"></a>将容器部署到 Azure 中的 Service Fabric 群集\r 若要将应用程序部署到 Azure 中的群集，可以使用自己的群集，或使用合作群集。\r \r > [!Note]\r > 必须将应用程序部署到 Azure 中的群集，而不是本地开发计算机上的 Service Fabric 群集。 \r >\r \r 合作群集是 Azure 上托管的免费限时 Service Fabric 群集。 这些群集由 Service Fabric 团队维护，任何人都可以在其中部署应用程序和了解平台。 若要使用合作群集，请[遵照说明](http://aka.ms/tryservicefabric)。 \r \r 若要了解如何创建自己的群集，请参阅[在 Azure 上创建 Service Fabric 群集](service-fabric-tutorial-create-vnet-and-linux-cluster.md)。\r \r > [!Note]\r > Web 前端服务配置为侦听端口 80 上是否有传入流量。 请确保此端口在群集中处于打开状态。 如果使用的是合作群集，此端口已处于打开状态。\r >\r \r ### <a name=\"deploy-the-application-manifests\"></a>部署应用程序清单 \r 在 CLI 环境中安装 [Service Fabric CLI (sfctl)](service-fabric-cli.md)\r \r ```azurecli\r pip3 install --user sfctl \r export PATH=$PATH:~/.local/bin\r ```\r 使用 Azure CLI 连接到 Azure 中的 Service Fabric 群集。 终结点是群集的管理终结点 - 例如 `http://linh1x87d1d.chinanorth.cloudapp.chinacloudapi.cn:19080`。\r \r ```azurecli\r sfctl cluster select --endpoint http://linh1x87d1d.chinanorth.cloudapp.chinacloudapi.cn:19080\r ```\r \r 使用提供的安装脚本将投票应用程序定义复制到群集，注册应用程序类型，并创建应用程序的实例。\r \r ```azurecli\r ./install.sh\r ```\r \r 打开浏览器并导航到 Service Fabric Explorer，其网址为 http://\\<Azure Service Fabric 群集 URL>:19080/Explorer - 例如 `http://linh1x87d1d.chinanorth.cloudapp.chinacloudapi.cn:19080/Explorer`。 展开“应用程序”节点，可以看到投票应用程序类型的条目以及创建的实例。\r \r ![Service Fabric Explorer][sfx]\r \r 连接到正在运行的容器。  打开 Web 浏览器并指向群集的 URL - 例如 `http://linh1x87d1d.chinanorth.cloudapp.chinacloudapi.cn:80`。 浏览器中应会显示该投票应用程序。\r \r ![quickstartpic][quickstartpic]\r \r ## <a name=\"fail-over-a-container-in-a-cluster\"></a>故障转移群集中的容器\r Service Fabric 可确保在发生故障时，将容器实例自动转移到群集中的其他节点。 也可以手动清空容器的节点，然后将其正常转移到群集中的其他节点。 可通过多种方式缩放服务，在本示例中，我们将使用 Service Fabric Explorer。\r \r 若要故障转移前端容器，请执行以下步骤：\r \r 1. 在群集中打开 Service Fabric Explorer - 例如 `http://linh1x87d1d.chinanorth.cloudapp.chinacloudapi.cn:19080/Explorer`。\r 2. 在树视图中单击“fabric:/Voting/azurevotefront”节点，展开分区节点（由 GUID 表示）。 注意树视图中的节点名称，它显示了当前正在运行容器的节点 - 例如 `_nodetype_4`\r 3. 在树视图中展开“节点”节点。 单击正在运行容器的节点旁边的省略号（三个点）。\r 4. 选择“重启”以重启该节点，并确认重启操作。 重启会导致容器故障转移到群集中的另一个节点。\r \r ![sfxquickstartshownodetype][sfxquickstartshownodetype]\r \r ## <a name=\"scale-applications-and-services-in-a-cluster\"></a>在群集中缩放应用程序和服务\r 可以跨群集轻松缩放 Service Fabric 服务，以适应服务上的负载。 可以通过更改群集中运行的实例数量来缩放服务。\r \r 若要缩放 Web 前端服务，请按照以下步骤操作：\r \r 1. 在群集中打开 Service Fabric Explorer（例如，`http://linh1x87d1d.chinanorth.cloudapp.chinacloudapi.cn:19080`）。\r 2. 在树视图中单击“fabric:/Voting/azurevotefront”节点旁边的省略号（三个点），选择“缩放服务”。\r \r     ![containersquickstartscale][containersquickstartscale]\r \r   现在可以缩放 Web 前端服务的实例数量。\r \r 3. 将数字更改为 2，再单击“缩放服务”。\r 4. 在树视图中单击“fabric:/Voting/azurevotefront”节点，展开分区节点（由 GUID 表示）。\r \r     ![containersquickstartscaledone][containersquickstartscaledone]\r \r     现在可以看到该服务有两个实例。 在树视图中，可以看到运行实例的节点。\r \r 通过这一简单的管理任务，我们让前端服务用来处理用户负载的资源数量翻了一番。 有必要了解的是，服务无需有多个实例，便能可靠运行。 如果服务出现故障，Service Fabric 可确保在群集中运行新的服务实例。\r \r ## <a name=\"clean-up\"></a>清理\r 使用模板中提供的卸载脚本从群集中删除应用程序实例并取消注册应用程序类型。 此命令会花费一段时间来清理实例，完成此脚本后，不应紧接着运行 'install'sh' 命令。 \r \r ```bash\r ./uninstall.sh\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 在此快速入门中，读者学习了如何：\r > [!div class=\"checklist\"]\r > * 将 Linux 容器应用程序部署到 Azure\r > * 故障转移 Service Fabric 群集中的容器\r > * 缩放 Service Fabric 群集中的容器\r \r * 详细了解如何运行 [Service Fabric 上的容器](service-fabric-containers-overview.md)。\r * 了解 Service Fabric [应用程序生命周期](service-fabric-application-lifecycle.md)。\r * 查看 GitHub 上的 [Service Fabric 容器代码示例](https://github.com/Azure-Samples/service-fabric-containers)。\r \r [sfx]: ./media/service-fabric-quickstart-containers-linux/containersquickstartappinstance.png\r [quickstartpic]: ./media/service-fabric-quickstart-containers-linux/votingapp.png\r [sfxquickstartshownodetype]:  ./media/service-fabric-quickstart-containers-linux/containersquickstartrestart.png\r [containersquickstartscale]: ./media/service-fabric-quickstart-containers-linux/containersquickstartscale.png\r [containersquickstartscaledone]: ./media/service-fabric-quickstart-containers-linux/containersquickstartscaledone.png\r \r <!--Update_Description: wording update, update link -->"}