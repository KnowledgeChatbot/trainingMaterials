{"Title":"Azure 服务总线队列入门","Description":"编写一个 C# 控制台应用程序，以便使用服务总线消息传递队列。","Content":"# <a name=\"get-started-with-service-bus-queues\"></a>服务总线队列入门\r \r [!INCLUDE [service-bus-selector-queues](../../includes/service-bus-selector-queues.md)]\r \r ## <a name=\"what-will-be-accomplished\"></a>要完成的任务\r 本教程涵盖以下步骤：\r \r 1. 使用 Azure 门户创建服务总线命名空间。\r 2. 使用 Azure 门户创建服务总线队列。\r 3. 编写一个控制台应用程序用于发送消息。\r 4. 编写一个控制台应用程序，用于接收在上一步发送的消息。\r \r ## <a name=\"prerequisites\"></a>先决条件\r 1. [Visual Studio 2015 或更高版本](http://www.visualstudio.com)。 本教程中的示例使用 Visual Studio 2017。\r 2. Azure 订阅。\r \r [!INCLUDE [create-account-note](../../includes/create-account-note.md)]\r \r ## <a name=\"1-create-a-namespace-using-the-azure-portal\"></a>1.使用 Azure 门户创建命名空间\r 如果已创建服务总线消息传递命名空间，请跳转到[使用 Azure 门户创建队列](#2-create-a-queue-using-the-azure-portal)部分。\r \r [!INCLUDE [service-bus-create-namespace-portal](../../includes/service-bus-create-namespace-portal.md)]\r \r ## <a name=\"2-create-a-queue-using-the-azure-portal\"></a>2.使用 Azure 门户创建队列\r 如果你已创建服务总线队列，请跳转到[将消息发送到队列](#3-send-messages-to-the-queue)部分。\r \r [!INCLUDE [service-bus-create-queue-portal](../../includes/service-bus-create-queue-portal.md)]\r \r ## <a name=\"3-send-messages-to-the-queue\"></a>3.将消息发送到队列\r 为了将消息发送到队列中，我们将使用 Visual Studio 编写一个 C# 控制台应用程序。\r \r ### <a name=\"create-a-console-application\"></a>创建控制台应用程序\r \r 启动 Visual Studio 并创建新的控制台应用 (.NET Framework) 项目。\r \r ### <a name=\"add-the-service-bus-nuget-package\"></a>添加服务总线 NuGet 包\r \r 1. 右键单击新创建的项目，并选择“管理 NuGet 包” 。\r 2. 单击“浏览”选项卡，搜索“WindowsAzure.ServiceBus”，然后选择“WindowsAzure.ServiceBus”项。 单击“安装”以完成安装，并关闭此对话框。\r    \r     ![选择 NuGet 包][nuget-pkg]\r \r ### <a name=\"write-some-code-to-send-a-message-to-the-queue\"></a>编写一些代码以向队列发送消息\r 1. 在 Program.cs 文件顶部添加以下 `using` 语句。\r    \r     ```csharp\r     using Microsoft.ServiceBus.Messaging;\r     ```\r 2. 将以下代码添加到 `Main` 方法中。 将 `connectionString` 变量设置为在创建命名空间时获得的连接字符串，并将 `queueName` 设置为在创建队列时使用的队列名称。\r    \r     ```csharp\r     var connectionString = \"<your connection string>\";\r     var queueName = \"<your queue name>\";\r    \r     var client = QueueClient.CreateFromConnectionString(connectionString, queueName);\r     var message = new BrokeredMessage(\"This is a test message!\");\r \r     Console.WriteLine(String.Format(\"Message id: {0}\", message.MessageId));\r \r     client.Send(message);\r \r     Console.WriteLine(\"Message successfully sent! Press ENTER to exit program\");\r     Console.ReadLine();\r     ```\r    \r     Program.cs 文件的内容如下所示。\r    \r     ```csharp\r     using System;\r     using System.Collections.Generic;\r     using System.Linq;\r     using System.Text;\r     using System.Threading.Tasks;\r     using Microsoft.ServiceBus.Messaging;\r \r     namespace qsend\r     {\r         class Program\r         {\r             static void Main(string[] args)\r             {\r                 var connectionString = \"Endpoint=sb://<your namespace>.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=<your key>\";\r                 var queueName = \"<your queue name>\";\r \r                 var client = QueueClient.CreateFromConnectionString(connectionString, queueName);\r                 var message = new BrokeredMessage(\"This is a test message!\");\r \r                 Console.WriteLine(String.Format(\"Message id: {0}\", message.MessageId));\r \r                 client.Send(message);\r \r                 Console.WriteLine(\"Message successfully sent! Press ENTER to exit program\");\r                 Console.ReadLine();\r             }\r         }\r     }\r     ```\r 3. 运行该程序并检查 Azure 门户：在命名空间“概览”窗口中单击队列的名称。 此时会显示队列的“基本信息”窗口。 请注意，“活动消息计数”值现在应为 1。 每次运行发件人应用程序而没有检索消息时，该值会增加 1。 另请注意，每次应用向队列添加消息时，队列的当前大小都会递增。\r    \r       ![消息大小][queue-message]\r \r ## <a name=\"4-receive-messages-from-the-queue\"></a>4.从队列接收消息\r \r 1. 若要接收刚发送的消息，请创建新的控制台应用程序并添加对服务总线 NuGet 包的引用，类似于前面的发件人应用程序。\r 2. 在 Program.cs 文件顶部添加以下 `using` 语句。\r    \r     ```csharp\r     using Microsoft.ServiceBus.Messaging;\r     ```\r 3. 将以下代码添加到 `Main` 方法中。 将 `connectionString` 变量设置为在创建命名空间时获得的连接字符串，并将 `queueName` 设置为在创建队列时使用的队列名称。\r    \r     ```csharp\r     var connectionString = \"<your connection string>\";\r     var queueName = \"<your queue name>\";\r    \r     var client = QueueClient.CreateFromConnectionString(connectionString, queueName);\r    \r     client.OnMessage(message =>\r     {\r       Console.WriteLine(String.Format(\"Message body: {0}\", message.GetBody<String>()));\r       Console.WriteLine(String.Format(\"Message id: {0}\", message.MessageId));\r     });\r    \r     Console.WriteLine(\"Press ENTER to exit program\");\r     Console.ReadLine();\r     ```\r \r     Program.cs 文件的内容如下所示：\r    \r     ```csharp\r     using System;\r     using Microsoft.ServiceBus.Messaging;\r \r     namespace GettingStartedWithQueues\r     {\r       class Program\r       {\r         static void Main(string[] args)\r         {\r           var connectionString = \"Endpoint=sb://<your namespace>.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=<your key>\";;\r           var queueName = \"<your queue name>\";\r    \r           var client = QueueClient.CreateFromConnectionString(connectionString, queueName);\r \r           client.OnMessage(message =>\r           {\r             Console.WriteLine(String.Format(\"Message body: {0}\", message.GetBody<String>()));\r             Console.WriteLine(String.Format(\"Message id: {0}\", message.MessageId));\r           });\r \r           Console.WriteLine(\"Press ENTER to exit program\");   \r           Console.ReadLine();\r         }\r       }\r     }\r     ```\r 4. 运行该程序，并再次检查门户。 请注意，“活动消息计数”和“当前”值现在为 0。\r    \r     ![队列长度][queue-message-receive]\r \r 祝贺！ 你现在已创建队列、将消息发送到该队列，以及从该队列接收消息。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 查看 [GitHub 存储库](https://github.com/Azure/azure-service-bus/tree/master/samples)中的示例，了解服务总线消息传送的一些更高级的功能。\r \r <!--Image references-->\r \r [nuget-pkg]: ./media/service-bus-dotnet-get-started-with-queues/nuget-package.png\r [queue-message]: ./media/service-bus-dotnet-get-started-with-queues/queue-message.png\r [queue-message-receive]: ./media/service-bus-dotnet-get-started-with-queues/queue-message-receive.png\r \r \r \r <!--Update_Description:update wording and code-->"}