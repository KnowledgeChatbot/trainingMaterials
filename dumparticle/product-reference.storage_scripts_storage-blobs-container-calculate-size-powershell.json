{"Title":"Azure PowerShell 脚本示例 - 计算 blob 容器大小","Description":"通过计算容器各 blob 的总大小来计算 Azure Blob 存储中容器的大小。","Content":"# <a name=\"calculate-the-size-of-a-blob-storage-container\"></a>计算 Blob 存储容器的大小\r \r 此脚本通过计算容器中 blob 的总大小来计算 Azure Blob 存储中容器的大小。\r \r [!INCLUDE [sample-powershell-install](../../../includes/sample-powershell-install-no-ssh.md)]\r \r [!INCLUDE [quickstarts-free-trial-note](../../../includes/quickstarts-free-trial-note.md)]\r \r ## <a name=\"understand-the-size-of-blob-storage-container\"></a>了解 Blob 存储容器的大小\r \r Blob 存储容器的总大小包括容器本身的大小，以及容器中所有 blob 的大小。\r \r 下面介绍如何为 Blob 容器和 Blob 计算存储容量。 下面的 Len(X) 是指字符串中的字符数。\r \r ### <a name=\"blob-containers\"></a>Blob 容器\r \r 下面介绍如何估算每个 blob 容器使用的存储空间量：\r \r `\r 48 bytes + Len(ContainerName) * 2 bytes +\r For-Each Metadata[3 bytes + Len(MetadataName) + Len(Value)] +\r For-Each Signed Identifier[512 bytes]\r `\r \r 以下是细分：\r * 每个容器 48 字节的开销，包括上次修改时间、权限、公共设置，以及其他系统元数据。\r * 容器名称作为 Unicode 存储，因此需将字符数乘以 2。\r * 对于每个存储的 blob 容器元数据，我们会存储名称的长度（存储为 ASCII），以及字符串值的长度。\r * 每个已签名标识符 512 字节，包括已签名标识符名称、开始时间、到期时间和权限。\r \r ### <a name=\"blobs\"></a>Blob\r \r 下面介绍如何估算每个 blob 使用的存储空间量：\r \r * 块 Blob（基 blob 或快照）\r \r `\r 124 bytes + Len(BlobName) * 2 bytes +\r For-Each Metadata[3 bytes + Len(MetadataName) + Len(Value)] +\r 8 bytes + number of committed and uncommitted blocks * Block ID Size in bytes +\r SizeInBytes(data in unique committed data blocks stored) +\r SizeInBytes(data in uncommitted data blocks)\r `\r \r * 页 Blob（基 blob 或快照）\r \r `\r 124 bytes + Len(BlobName) * 2 bytes +\r For-Each Metadata[3 bytes + Len(MetadataName) + Len(Value)] +\r number of nonconsecutive page ranges with data * 12 bytes +\r SizeInBytes(data in unique pages stored)\r `\r \r 以下是细分：\r \r * 124 字节的 blob 开销，包括上次修改时间、大小、Cache-Control、Content-Type、Content-Language、Content-Encoding、Content-MD5、权限、快照信息、租约，以及某些系统元数据。\r * blob 名称作为 Unicode 存储，因此需将字符数乘以 2。\r * 然后，对于每个存储的元数据，我们会存储名称的长度（存储为 ASCII），以及字符串值的长度。\r * 然后，对于块 Blob\r     * 8 字节用于阻止列表\r     * 块数乘以块 ID 大小（单位：字节）\r     * 此外还包括所有已提交块和未提交块中的数据的大小。 请注意，使用快照时，此大小仅包括此基 blob 或快照 blob 的唯一数据。 如果一周过后仍未使用未提交的块，则会对其进行垃圾回收。自那以后，将不再对其收费。\r * 然后，对于页 Blob\r     * 带数据的非连续页范围数乘以 12 字节。 这是在调用 GetPageRanges API 时看到的唯一页范围的数目。\r     * 此外还包括所有已存储页的数据的大小（单位：字节）。 请注意，使用快照时，此大小仅包括要计入的基 blob 或快照 blob 的唯一页面。\r \r ## <a name=\"sample-script\"></a>示例脚本\r \r ```powershell\r # this script will show how to get the total size of the blobs in a container\r # before running this, you need to create a storage account, create a container,\r #    and upload some blobs into the container\r # note: this retrieves all of the blobs in the container in one command.\r #       connect Azure with Login-AzureRmAccount before you run the script.\r # command line usage: script.ps1 -ResourceGroup {YourResourceGroupName} -StorageAccountName {YourAccountName} -ContainerName {YourContainerName}\r #\r \r param(\r     [Parameter(Mandatory=$true)]\r     [string]$ResourceGroup,\r \r     [Parameter(Mandatory=$true)]\r     [string]$StorageAccountName,\r \r     [Parameter(Mandatory=$true)]\r     [string]$ContainerName\r )\r \r # The script has been tested on Powershell 5.0\r Set-StrictMode -Version 5\r \r $VerbosePreference = \"Continue\"\r \r if((Get-Module -ListAvailable Azure) -eq $null)\r {\r     throw \"Azure Powershell not found! Please install from http://www.windowsazure.com/en-us/downloads/#cmd-line-tools\"\r }\r \r # function Get-BlobBytes\r \r function Get-BlobBytes\r {\r     param(\r         [Parameter(Mandatory=$true)]\r         $Blob)\r \r     # Base + blobname\r     $blobSizeInBytes = 124 + $Blob.Name.Length * 2\r \r     # Get size of metadata\r     $metadataEnumerator=$Blob.ICloudBlob.Metadata.GetEnumerator()\r     while($metadataEnumerator.MoveNext())\r     {\r         $blobSizeInBytes += 3 + $metadataEnumerator.Current.Key.Length + $metadataEnumerator.Current.Value.Length\r     }\r \r     if($Blob.BlobType -eq [Microsoft.WindowsAzure.Storage.Blob.BlobType]::BlockBlob)\r     {\r         $blobSizeInBytes += 8\r         # Default is Microsoft.WindowsAzure.Storage.Blob.BlockListingFilter.Committed. Need All\r         $Blob.ICloudBlob.DownloadBlockList([Microsoft.WindowsAzure.Storage.Blob.BlockListingFilter]::All) |\r             ForEach-Object { $blobSizeInBytes += $_.Length + $_.Name.Length }\r     }\r     else\r     {\r         $Blob.ICloudBlob.GetPageRanges() |\r             ForEach-Object { $blobSizeInBytes += 12 + $_.EndOffset - $_.StartOffset }\r     }\r \r     return $blobSizeInBytes\r }\r \r # function Get-ContainerBytes\r \r function Get-ContainerBytes\r {\r     param(\r         [Parameter(Mandatory=$true)]\r         [Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer]$Container)\r \r     # Base + name of container\r     $containerSizeInBytes = 48 + $Container.Name.Length*2\r \r     # Get size of metadata\r     $metadataEnumerator = $Container.Metadata.GetEnumerator()\r     while($metadataEnumerator.MoveNext())\r     {\r         $containerSizeInBytes += 3 + $metadataEnumerator.Current.Key.Length + $metadataEnumerator.Current.Value.Length\r     }\r \r     # Get size for SharedAccessPolicies\r     $containerSizeInBytes += $Container.GetPermissions().SharedAccessPolicies.Count * 512\r \r     # Calculate size of all blobs.\r     $blobCount = 0\r     $Token = $Null\r     $MaxReturn = 5000\r \r     do {\r         $Blobs = Get-AzureStorageBlob -Context $storageContext -Container $Container.Name -MaxCount $MaxReturn -ContinuationToken $Token\r         if($Blobs -eq $Null) { break }\r \r         $Token = $Null\r         if (Get-Member -InputObject $Blobs -Name Count -MemberType Properties)\r         {\r             $Token = $Blobs[$Blobs.Count - 1].ContinuationToken;\r         }\r \r         $Blobs | ForEach-Object {\r                 $blobSize = Get-BlobBytes $_\r                 $containerSizeInBytes += $blobSize\r                 $blobCount++\r \r                 if(($blobCount % 1000) -eq 0)\r                 {\r                     Write-Verbose(\"Counting {0} Sizing {1} \" -f $blobCount, $containerSizeInBytes)\r                 }\r             }\r     }\r     While ($Token -ne $Null)\r \r     return @{ \"containerSize\" = $containerSizeInBytes; \"blobCount\" = $blobCount }\r }\r \r #Login-AzureRmAccount\r \r $storageAccount = Get-AzureRmStorageAccount -ResourceGroupName $ResourceGroup -Name $StorageAccountName -ErrorAction SilentlyContinue\r if($storageAccount -eq $null)\r {\r     throw \"The storage account specified does not exist in this subscription.\"\r }\r \r $storageContext = $storageAccount.Context\r \r $containers = New-Object System.Collections.ArrayList\r if($ContainerName.Length -ne 0)\r {\r     $container = Get-AzureStorageContainer -Context $storageContext -Name $ContainerName -ErrorAction SilentlyContinue |\r         ForEach-Object { $containers.Add($_) } | Out-Null\r }\r else\r {\r     Get-AzureStorageContainer -Context $storageContext | ForEach-Object { $containers.Add($_) } | Out-Null\r }\r \r $sizeInBytes = 0\r \r if($containers.Count -gt 0)\r {\r     $containers | ForEach-Object {\r         Write-Output(\"Calculating container {0} ...\" -f $_.CloudBlobContainer.Name)\r         $result = Get-ContainerBytes $_.CloudBlobContainer\r         $sizeInBytes += $result.containerSize\r \r         Write-Output(\"Container '{0}' with {1} blobs has a sizeof {2:F2} MB.\" -f $_.CloudBlobContainer.Name,$result.blobCount,($result.containerSize/1MB))\r     }\r }\r else\r {\r     Write-Warning \"No containers found to process in storage account '$StorageAccountName'.\"\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 有关 Azure 存储计费的详细信息，请参阅 [Understanding Windows Azure Storage Billing](https://blogs.msdn.microsoft.com/windowsazurestorage/2010/07/08/understanding-windows-azure-storage-billing-bandwidth-transactions-and-capacity/)（了解 Windows Azure 存储计费）。\r \r 有关 Azure PowerShell 模块的详细信息，请参阅 [Azure PowerShell 文档](https://docs.microsoft.com/powershell/azure/overview)。\r \r 可以在 [Azure 存储的 PowerShell 示例](../blobs/storage-samples-blobs-powershell.md)中找到其他存储 PowerShell 脚本示例。\r "}