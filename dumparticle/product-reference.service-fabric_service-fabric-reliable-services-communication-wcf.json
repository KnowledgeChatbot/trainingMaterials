{"Title":"Reliable Services WCF 通信堆栈","Description":"Service Fabric 中的内置 WCF 通信堆栈为 Reliable Services 提供客户端到服务的 WCF 通信。","Content":"\r # Reliable Services 基于 WCF 的通信堆栈\r Reliable services 框架使服务创作者能够选择要用于其服务的通信堆栈。他们可以通过从 [CreateServiceReplicaListeners 或 CreateServiceInstanceListeners](./service-fabric-reliable-services-communication.md) 方法返回的 **ICommunicationListener** 来插入所选的通信堆栈。对于想要使用基于 WCF 的通信的服务创作者，该框架提供了基于 Windows Communication Foundation (WCF) 的通信堆栈实现。\r \r ## WCF 通信侦听器\r 特定于 WCF 的 **ICommunicationListener** 实现由 **Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener** 类提供。\r \r 假设我们有 `ICalculator` 类型的服务协定\r \r ```csharp\r [ServiceContract]\r public interface ICalculator\r {\r     [OperationContract]\r     Task<int> Add(int value1, int value2);\r }\r ```\r \r 我们可以通过下列方式在服务中创建 WCF 通信侦听器。\r \r ```csharp\r protected override IEnumerable<ServiceReplicaListener> CreateServiceReplicaListeners()\r {\r     return new[] { new ServiceReplicaListener((context) =>\r         new WcfCommunicationListener<ICalculator>(\r             wcfServiceObject:this,\r             serviceContext:context,\r             //\r             // The name of the endpoint configured in the ServiceManifest under the Endpoints section\r             // that identifies the endpoint that the WCF ServiceHost should listen on.\r             //\r             endpointResourceName: \"WcfServiceEndpoint\",\r \r             //\r             // Populate the binding information that you want the service to use.\r             //\r             listenerBinding: WcfUtility.CreateTcpListenerBinding()\r         )\r     )};\r }\r ```\r \r ## 为 WCF 通信堆栈编写客户端\r 为编写客户端以便使用 WCF 与服务进行通信，该框架提供了 **WcfClientCommunicationFactory**，这是特定于 WCF 的 [ClientCommunicationFactoryBase](./service-fabric-reliable-services-communication.md) 实现。\r \r ```csharp\r public WcfCommunicationClientFactory(\r     Binding clientBinding = null,\r     IEnumerable<IExceptionHandler> exceptionHandlers = null,\r     IServicePartitionResolver servicePartitionResolver = null,\r     string traceId = null,\r     object callback = null);\r ```\r \r 可以从 **WcfCommunicationClientFactory** 创建的 **WcfCommunicationClient** 访问 WCF 通信通道。\r \r ```csharp\r public class WcfCommunicationClient : ServicePartitionClient<WcfCommunicationClient<ICalculator>>\r    {\r        public WcfCommunicationClient(ICommunicationClientFactory<WcfCommunicationClient<ICalculator>> communicationClientFactory, Uri serviceUri, ServicePartitionKey partitionKey = null, TargetReplicaSelector targetReplicaSelector = TargetReplicaSelector.Default, string listenerName = null, OperationRetrySettings retrySettings = null)\r        : base(communicationClientFactory, serviceUri, partitionKey, targetReplicaSelector, listenerName, retrySettings)\r        {\r        }\r    }\r ```\r \r 客户端代码可以使用 **WcfCommunicationClientFactory** 以及用于实现 **ServicePartitionClient** 的 **WcfCommunicationClient** 来确定服务终结点，并与服务通信。\r \r ```csharp\r // Create binding\r Binding binding = WcfUtility.CreateTcpClientBinding();\r // Create a partition resolver\r IServicePartitionResolver partitionResolver = ServicePartitionResolver.GetDefault();\r // create a  WcfCommunicationClientFactory object.\r var wcfClientFactory = new WcfCommunicationClientFactory<ICalculator>\r     (clientBinding: binding, servicePartitionResolver: partitionResolver);\r \r //\r // Create a client for communicating with the ICalculator service that has been created with the\r // Singleton partition scheme.\r //\r var calculatorServiceCommunicationClient =  new WcfCommunicationClient(\r                 wcfClientFactory,\r                 ServiceUri,\r                 ServicePartitionKey.Singleton);\r \r //\r // Call the service to perform the operation.\r //\r var result = calculatorServiceCommunicationClient.InvokeWithRetryAsync(\r                 client => client.Channel.Add(2, 3)).Result;\r ```\r \r >[!NOTE]\r > 默认 ServicePartitionResolver 假设客户端正在与服务相同的群集中运行。如果不是这样，请创建 ServicePartitionResolver 对象，并传入群集连接终结点。\r \r ## 后续步骤\r * [使用 Reliable Services 远程处理执行远程过程调用](./service-fabric-reliable-services-communication-remoting.md)\r \r * [在 Reliable Services 中配合使用 Web API 和 OWIN](./service-fabric-reliable-services-communication-webapi.md)\r \r * [确保 Reliable Services 的通信安全](./service-fabric-reliable-services-secure-communication.md)\r \r <!---HONumber=Mooncake_0227_2017-->"}