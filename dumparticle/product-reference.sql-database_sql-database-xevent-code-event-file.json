{"Title":"SQL 数据库的 XEvent 事件文件代码","Description":"提供一个双阶段代码示例的 PowerShell 和 Transact-SQL，该示例演示 Azure SQL 数据库的扩展事件中的事件文件目标。 此方案的一部分要求使用 Azure 存储。","Content":"# <a name=\"event-file-target-code-for-extended-events-in-sql-database\"></a>SQL 数据库中扩展事件的事件文件目标代码\r \r [!INCLUDE [sql-database-xevents-selectors-1-include](../../includes/sql-database-xevents-selectors-1-include.md)]\r \r 需要完整的代码示例来可靠捕获和报告扩展事件的信息。\r \r 在 Microsoft SQL Server 中，[事件文件目标](http://msdn.microsoft.com/library/ff878115.aspx)用于将事件输出存储在本地硬盘驱动器文件中。 但是，此类文件并不适用于 Azure SQL 数据库。 我们改为使用 Azure 存储服务来支持事件文件目标。\r \r 本主题演示了一个两阶段代码示例：\r \r * PowerShell：用于在云中创建 Azure 存储容器。\r * Transact-SQL：\r \r   * 将 Azure 存储容器分配到事件文件目标。\r   * 创建和启动事件会话，等等。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r * Azure 帐户和订阅。 可以注册[试用版](https://www.azure.cn/pricing/1rmb-trial/)。\r * 可在其中创建表的任何数据库。\r \r   * 或者，也可以在几分钟内[创建一个 **AdventureWorksLT** 演示数据库](sql-database-get-started.md)。\r * SQL Server Management Studio (ssms.exe)，最好是每月最新更新版。 \r   可从以下位置下载最新的 ssms.exe：\r \r   * 标题为[下载 SQL Server Management Studio](http://msdn.microsoft.com/library/mt238290.aspx) 的主题。\r   * [直接指向下载位置的链接。](http://go.microsoft.com/fwlink/?linkid=616025)\r * 必须安装 [Azure PowerShell 模块](http://go.microsoft.com/?linkid=9811175) 。\r \r   * 这些模块提供 **New-AzureStorageAccount**等命令。\r \r ## <a name=\"phase-1-powershell-code-for-azure-storage-container\"></a>阶段 1：Azure 存储容器的 PowerShell 代码\r \r 此 PowerShell 是两阶段代码示例的第 1 阶段。\r \r 脚本以用于在可能的上次运行后进行清理的命令开头，且可重复运行。\r \r 1. 将 PowerShell 脚本粘贴到 Notepad.exe 等简单的文本编辑器中，并将脚本保存为扩展名为 **.ps1** 的文件。\r 2. 以管理员身份启动 PowerShell ISE。\r 3. 在提示符下键入<br/>`Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser`<br/>，然后按 Enter。\r 4. 在 PowerShell ISE 中打开 **.ps1** 文件。 运行该脚本。\r 5. 该脚本会先启动新的窗口，可在其中登录 Azure。\r \r    * 如果想要重新运行脚本而不中断会话，可以方便地选择注释掉 **Add-AzureAccount -Environment AzureChinaCloud** 命令。\r \r ![装有 Azure 模块的 PowerShell ISE，可运行脚本。][30_powershell_ise]\r \r ### <a name=\"powershell-code\"></a>PowerShell 代码\r \r 使用此 PowerShell 脚本的前提是，已运行 AzureRm 模块的 cmdlet Import-Module。 有关参考文档，请参阅 [PowerShell 模块浏览器](https://docs.microsoft.com/powershell/module/)。\r \r ```powershell\r ## TODO: Before running, find all 'TODO' and make each edit!!\r \r cls;\r \r #--------------- 1 -----------------------\r \r 'Script assumes you have already logged your PowerShell session into Azure.\r But if not, run  Add-AzureRmAccount (or  Login-AzureRmAccount), just one time.';\r #Add-AzureRmAccount;   # Same as  Login-AzureRmAccount.\r \r #-------------- 2 ------------------------\r \r '\r TODO: Edit the values assigned to these variables, especially the first few!\r ';\r \r # Ensure the current date is between\r # the Expiry and Start time values that you edit here.\r \r $subscriptionName    = 'YOUR_SUBSCRIPTION_NAME';\r $resourceGroupName   = 'YOUR_RESOURCE-GROUP-NAME';\r \r $policySasExpiryTime = '2018-08-28T23:44:56Z';\r $policySasStartTime  = '2017-10-01';\r \r $storageAccountLocation = 'China North';\r $storageAccountName     = 'YOUR_STORAGE_ACCOUNT_NAME';\r $contextName            = 'YOUR_CONTEXT_NAME';\r $containerName          = 'YOUR_CONTAINER_NAME';\r $policySasToken         = ' ? ';\r \r $policySasPermission = 'rwl';  # Leave this value alone, as 'rwl'.\r \r #--------------- 3 -----------------------\r \r # The ending display lists your Azure subscriptions.\r # One should match the $subscriptionName value you assigned\r #   earlier in this PowerShell script. \r \r 'Choose an existing subscription for the current PowerShell environment.';\r \r Select-AzureRmSubscription -Subscription $subscriptionName;\r \r #-------------- 4 ------------------------\r \r '\r Clean up the old Azure Storage Account after any previous run, \r before continuing this new run.';\r \r If ($storageAccountName)\r {\r     Remove-AzureRmStorageAccount `\r         -Name              $storageAccountName `\r         -ResourceGroupName $resourceGroupName;\r }\r \r #--------------- 5 -----------------------\r \r [System.DateTime]::Now.ToString();\r \r '\r Create a storage account. \r This might take several minutes, will beep when ready.\r   ...PLEASE WAIT...';\r \r New-AzureRmStorageAccount `\r     -Name              $storageAccountName `\r     -Location          $storageAccountLocation `\r     -ResourceGroupName $resourceGroupName `\r     -SkuName           'Standard_LRS';\r \r [System.DateTime]::Now.ToString();\r [System.Media.SystemSounds]::Beep.Play();\r \r '\r Get the access key for your storage account.\r ';\r \r $accessKey_ForStorageAccount = `\r     (Get-AzureRmStorageAccountKey `\r         -Name              $storageAccountName `\r         -ResourceGroupName $resourceGroupName\r         ).Value[0];\r \r \"`$accessKey_ForStorageAccount = $accessKey_ForStorageAccount\";\r \r 'Azure Storage Account cmdlet completed.\r Remainder of PowerShell .ps1 script continues.\r ';\r \r #--------------- 6 -----------------------\r \r # The context will be needed to create a container within the storage account.\r \r 'Create a context object from the storage account and its primary access key.\r ';\r \r $context = New-AzureStorageContext `\r     -StorageAccountName $storageAccountName `\r     -StorageAccountKey  $accessKey_ForStorageAccount;\r \r 'Create a container within the storage account.\r ';\r \r $containerObjectInStorageAccount = New-AzureStorageContainer `\r     -Name    $containerName `\r     -Context $context;\r \r 'Create a security policy to be applied to the SAS token.\r ';\r \r New-AzureStorageContainerStoredAccessPolicy `\r     -Container  $containerName `\r     -Context    $context `\r     -Policy     $policySasToken `\r     -Permission $policySasPermission `\r     -ExpiryTime $policySasExpiryTime `\r     -StartTime  $policySasStartTime;\r \r '\r Generate a SAS token for the container.\r ';\r Try\r {\r     $sasTokenWithPolicy = New-AzureStorageContainerSASToken `\r         -Name    $containerName `\r         -Context $context `\r         -Policy  $policySasToken;\r }\r Catch \r {\r     $Error[0].Exception.ToString();\r }\r \r #-------------- 7 ------------------------\r \r 'Display the values that YOU must edit into the Transact-SQL script next!:\r ';\r \r \"storageAccountName: $storageAccountName\";\r \"containerName:      $containerName\";\r \"sasTokenWithPolicy: $sasTokenWithPolicy\";\r \r '\r REMINDER: sasTokenWithPolicy here might start with \"?\" character, which you must exclude from Transact-SQL.\r ';\r \r '\r (Later, return here to delete your Azure Storage account. See the preceding  Remove-AzureRmStorageAccount -Name $storageAccountName)';\r \r '\r Now shift to the Transact-SQL portion of the two-part code sample!';\r \r # EOFile\r ```\r \r 记下 PowerShell 脚本结束时输出的几个命名值。 必须将这些值编辑成阶段 2 中使用的 Transact-SQL 脚本。\r \r ## <a name=\"phase-2-transact-sql-code-that-uses-azure-storage-container\"></a>阶段 2：使用 Azure 存储容器的 Transact-SQL 代码\r \r * 在此代码示例的第 1 阶段，已运行 PowerShell 脚本来创建 Azure 存储容器。\r * 接下来在第 2 阶段，以下 Transact-SQL 脚本必须使用该容器。\r \r 脚本以用于在可能的上次运行后进行清理的命令开头，且可重复运行。\r \r PowerShell 脚本在结束时输出了几个命名值。 必须编辑 Transact-SQL 脚本才能使用这些值。 在 Transact-SQL 脚本中查找 **TODO** 以找到编辑点。\r \r 1. 打开 SQL Server Management Studio (ssms.exe)。\r 2. 连接到 Azure SQL 数据库。\r 3. 单击打开新的查询窗格。\r 4. 将以下 Transact-SQL 脚本粘贴到查询窗格中。\r 5. 在脚本中查找每个 **TODO** 并进行适当的编辑。\r 6. 保存并运行该脚本。\r \r > [!WARNING]\r > 之前 PowerShell 脚本生成的 SAS 密钥值可能以“?”（问号）开头。 在以下 T-SQL 脚本中使用 SAS 密钥时，必须 *删除前导“?”*。 否则，可能由于安全原因而阻止操作。\r \r ### <a name=\"transact-sql-code\"></a>Transact-SQL 代码\r \r ```sql\r ---- TODO: First, run the earlier PowerShell portion of this two-part code sample.\r ---- TODO: Second, find every 'TODO' in this Transact-SQL file, and edit each.\r \r ---- Transact-SQL code for Event File target on Azure SQL Database.\r \r SET NOCOUNT ON;\r GO\r \r ----  Step 1.  Establish one little table, and  ---------\r ----  insert one row of data.\r \r IF EXISTS\r     (SELECT * FROM sys.objects\r         WHERE type = 'U' and name = 'gmTabEmployee')\r BEGIN\r     DROP TABLE gmTabEmployee;\r END\r GO\r \r CREATE TABLE gmTabEmployee\r (\r     EmployeeGuid         uniqueIdentifier   not null  default newid()  primary key,\r     EmployeeId           int                not null  identity(1,1),\r     EmployeeKudosCount   int                not null  default 0,\r     EmployeeDescr        nvarchar(256)          null\r );\r GO\r \r INSERT INTO gmTabEmployee ( EmployeeDescr )\r     VALUES ( 'Jane Doe' );\r GO\r \r ------  Step 2.  Create key, and  ------------\r ------  Create credential (your Azure Storage container must already exist).\r \r IF NOT EXISTS\r     (SELECT * FROM sys.symmetric_keys\r         WHERE symmetric_key_id = 101)\r BEGIN\r     CREATE MASTER KEY ENCRYPTION BY PASSWORD = '0C34C960-6621-4682-A123-C7EA08E3FC46' -- Or any newid().\r END\r GO\r \r IF EXISTS\r     (SELECT * FROM sys.database_scoped_credentials\r         -- TODO: Assign AzureStorageAccount name, and the associated Container name.\r         WHERE name = 'https://gmstorageaccountxevent.blob.core.chinacloudapi.cn/gmcontainerxevent')\r BEGIN\r     DROP DATABASE SCOPED CREDENTIAL\r         -- TODO: Assign AzureStorageAccount name, and the associated Container name.\r         [https://gmstorageaccountxevent.blob.core.chinacloudapi.cn/gmcontainerxevent] ;\r END\r GO\r \r CREATE\r     DATABASE SCOPED\r     CREDENTIAL\r         -- use '.blob.',   and not '.queue.' or '.table.' etc.\r         -- TODO: Assign AzureStorageAccount name, and the associated Container name.\r         [https://gmstorageaccountxevent.blob.core.chinacloudapi.cn/gmcontainerxevent]\r     WITH\r         IDENTITY = 'SHARED ACCESS SIGNATURE',  -- \"SAS\" token.\r         -- TODO: Paste in the long SasToken string here for Secret, but exclude any leading '?'.\r         SECRET = 'sv=2014-02-14&sr=c&si=gmpolicysastoken&sig=EjAqjo6Nu5xMLEZEkMkLbeF7TD9v1J8DNB2t8gOKTts%3D'\r     ;\r GO\r \r ------  Step 3.  Create (define) an event session.  --------\r ------  The event session has an event with an action,\r ------  and a has a target.\r \r IF EXISTS\r     (SELECT * from sys.database_event_sessions\r         WHERE name = 'gmeventsessionname240b')\r BEGIN\r     DROP\r         EVENT SESSION\r             gmeventsessionname240b\r         ON DATABASE;\r END\r GO\r \r CREATE\r     EVENT SESSION\r         gmeventsessionname240b\r     ON DATABASE\r \r     ADD EVENT\r         sqlserver.sql_statement_starting\r             (\r             ACTION (sqlserver.sql_text)\r             WHERE statement LIKE 'UPDATE gmTabEmployee%'\r             )\r     ADD TARGET\r         package0.event_file\r             (\r             -- TODO: Assign AzureStorageAccount name, and the associated Container name.\r             -- Also, tweak the .xel file name at end, if you like.\r             SET filename =\r                 'https://gmstorageaccountxevent.blob.core.chinacloudapi.cn/gmcontainerxevent/anyfilenamexel242b.xel'\r             )\r     WITH\r         (MAX_MEMORY = 10 MB,\r         MAX_DISPATCH_LATENCY = 3 SECONDS)\r     ;\r GO\r \r ------  Step 4.  Start the event session.  ----------------\r ------  Issue the SQL Update statements that will be traced.\r ------  Then stop the session.\r \r ------  Note: If the target fails to attach,\r ------  the session must be stopped and restarted.\r \r ALTER\r     EVENT SESSION\r         gmeventsessionname240b\r     ON DATABASE\r     STATE = START;\r GO\r \r SELECT 'BEFORE_Updates', EmployeeKudosCount, * FROM gmTabEmployee;\r \r UPDATE gmTabEmployee\r     SET EmployeeKudosCount = EmployeeKudosCount + 2\r     WHERE EmployeeDescr = 'Jane Doe';\r \r UPDATE gmTabEmployee\r     SET EmployeeKudosCount = EmployeeKudosCount + 13\r     WHERE EmployeeDescr = 'Jane Doe';\r \r SELECT 'AFTER__Updates', EmployeeKudosCount, * FROM gmTabEmployee;\r GO\r \r ALTER\r     EVENT SESSION\r         gmeventsessionname240b\r     ON DATABASE\r     STATE = STOP;\r GO\r \r -------------- Step 5.  Select the results. ----------\r \r SELECT\r         *, 'CLICK_NEXT_CELL_TO_BROWSE_ITS_RESULTS!' as [CLICK_NEXT_CELL_TO_BROWSE_ITS_RESULTS],\r         CAST(event_data AS XML) AS [event_data_XML]  -- TODO: In ssms.exe results grid, double-click this cell!\r     FROM\r         sys.fn_xe_file_target_read_file\r             (\r                 -- TODO: Fill in Storage Account name, and the associated Container name.\r                 'https://gmstorageaccountxevent.blob.core.chinacloudapi.cn/gmcontainerxevent/anyfilenamexel242b',\r                 null, null, null\r             );\r GO\r \r -------------- Step 6.  Clean up. ----------\r \r DROP\r     EVENT SESSION\r         gmeventsessionname240b\r     ON DATABASE;\r GO\r \r DROP DATABASE SCOPED CREDENTIAL\r     -- TODO: Assign AzureStorageAccount name, and the associated Container name.\r     [https://gmstorageaccountxevent.blob.core.chinacloudapi.cn/gmcontainerxevent]\r     ;\r GO\r \r DROP TABLE gmTabEmployee;\r GO\r \r PRINT 'Use PowerShell Remove-AzureStorageAccount to delete your Azure Storage account!';\r GO\r ```\r \r 如果运行脚本时无法附加目标，必须停止再重新启动事件会话：\r \r ```sql\r ALTER EVENT SESSION ... STATE = STOP;\r GO\r ALTER EVENT SESSION ... STATE = START;\r GO\r ```\r \r ## <a name=\"output\"></a>输出\r \r 完成 Transact-SQL 脚本后，请单击 **event_data_XML** 列标题下的单元格。 此时将显示一个 **<event>** 元素，其中显示了一个 UPDATE 语句。\r \r 下面是测试期间生成的一个 **<event>** 元素：\r \r ```xml\r <event name=\"sql_statement_starting\" package=\"sqlserver\" timestamp=\"2015-09-22T19:18:45.420Z\">\r   <data name=\"state\">\r     <value>0</value>\r     <text>Normal</text>\r   </data>\r   <data name=\"line_number\">\r     <value>5</value>\r   </data>\r   <data name=\"offset\">\r     <value>148</value>\r   </data>\r   <data name=\"offset_end\">\r     <value>368</value>\r   </data>\r   <data name=\"statement\">\r     <value>UPDATE gmTabEmployee\r     SET EmployeeKudosCount = EmployeeKudosCount + 2\r     WHERE EmployeeDescr = 'Jane Doe'</value>\r   </data>\r   <action name=\"sql_text\" package=\"sqlserver\">\r     <value>\r \r SELECT 'BEFORE_Updates', EmployeeKudosCount, * FROM gmTabEmployee;\r \r UPDATE gmTabEmployee\r     SET EmployeeKudosCount = EmployeeKudosCount + 2\r     WHERE EmployeeDescr = 'Jane Doe';\r \r UPDATE gmTabEmployee\r     SET EmployeeKudosCount = EmployeeKudosCount + 13\r     WHERE EmployeeDescr = 'Jane Doe';\r \r SELECT 'AFTER__Updates', EmployeeKudosCount, * FROM gmTabEmployee;\r </value>\r   </action>\r </event>\r ```\r \r 前面的 Transact-SQL 脚本使用以下系统函数来读取 event_file：\r \r * [sys.fn_xe_file_target_read_file (Transact-SQL)](http://msdn.microsoft.com/library/cc280743.aspx)\r \r 可在以下位置获取用于查看扩展事件数据的高级选项的说明：\r \r * [扩展事件的目标数据的高级视图](http://msdn.microsoft.com/library/mt752502.aspx)\r \r ## <a name=\"converting-the-code-sample-to-run-on-sql-server\"></a>转换代码示例以在 SQL Server 上运行\r \r 假设要在 Microsoft SQL Server 上运行上述 Transact-SQL 示例。\r \r * 为简单起见，会想要将 Azure 存储容器完全替换为一个简单文件（例如 **C:\\myeventdata.xel**）。 该文件将写入 SQL Server 所在计算机的本地硬盘驱动器。\r * 不需要为 **CREATE MASTER KEY** 和 **CREATE CREDENTIAL** 使用任何类型的 Transact-SQL 语句。\r * 在 **CREATE EVENT SESSION** 语句的 **ADD TARGET** 子句中，将对 **filename=** 分配的 Http 值替换为完整路径字符串（例如 **C:\\myfile.xel**）。\r \r   * 此操作不涉及任何 Azure 存储帐户。\r \r ## <a name=\"more-information\"></a>详细信息\r \r 有关 Azure 存储服务中帐户和容器的详细信息，请参阅：\r \r * [如何通过 .NET 使用 Blob 存储](../storage/blobs/storage-dotnet-how-to-use-blobs.md)\r * [命名和引用容器、Blob 与元数据](http://msdn.microsoft.com/library/azure/dd135715.aspx)\r * [使用根容器](http://msdn.microsoft.com/library/azure/ee395424.aspx)\r * [第 1 课：在 Azure 容器上创建存储访问策略和共享访问签名](http://msdn.microsoft.com/library/dn466430.aspx)\r   * [第 2 课：使用共享访问签名创建 SQL Server 凭据](http://msdn.microsoft.com/library/dn466435.aspx)\r * [Microsoft SQL Server 扩展事件](https://docs.microsoft.com/sql/relational-databases/extended-events/extended-events)\r \r <!--\r Image references.\r -->\r \r [30_powershell_ise]: ./media/sql-database-xevent-code-event-file/event-file-powershell-ise-b30.png\r <!--Update_Description: update PowerShell code-->"}