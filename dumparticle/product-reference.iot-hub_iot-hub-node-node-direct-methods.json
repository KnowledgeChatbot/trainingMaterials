{"Title":"Azure IoT 中心直接方法 (Node)","Description":"如何使用 Azure IoT 中心直接方法。 使用 Azure IoT SDK for Node.js 实现包含直接方法的模拟设备应用和调用直接方法的服务应用。","Content":"# <a name=\"use-direct-methods-on-your-iot-device-with-nodejs\"></a>通过 Node.js 使用 IoT 设备上的直接方法\r [!INCLUDE [iot-hub-selector-c2d-methods](../../includes/iot-hub-selector-c2d-methods.md)]\r \r 本教程结束时，会创建两个 Node.js 控制台应用：\r \r * **CallMethodOnDevice.js**，用于在模拟设备应用上调用方法并显示响应。\r * **SimulatedDevice.js**，可使用前面创建的设备标识连接到 IoT 中心，并响应通过云调用的方法。\r \r > [!NOTE]\r > [Azure IoT SDK][lnk-hub-sdks] 文章介绍了 Azure IoT SDK，这些 SDK 可用于构建在设备和解决方案后端运行的应用程序。\r > \r > \r \r 要完成本教程，需要以下各项：\r \r * Node.js 版本 4.0.x 或更高版本。\r * 有效的 Azure 帐户。 （如果没有帐户，只需花费几分钟就能创建一个[帐户][lnk-free-trial]。）\r \r [!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r \r [!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r \r ## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r 在本部分，用户需创建一个 Node.js 控制台应用，用于响应通过云调用的方法。\r \r 1. 新建名为 **simulateddevice**的空文件夹。 在命令提示符下使用以下命令，在 **simulateddevice** 文件夹中创建一个 package.json 文件。 接受所有默认值：\r    \r     ```\r     npm init\r     ```\r 2. 在 **simulateddevice** 文件夹的命令提示符处，运行下述命令以安装 **azure-iot-device** 设备 SDK 包和 **azure-iot-device-mqtt** 包：\r    \r     ```\r     npm install azure-iot-device azure-iot-device-mqtt --save\r     ```\r 3. 在 **SimulatedDevice.js** 文件夹中，利用文本编辑器创建新的 **simulateddevice** 文件。\r 4. 在 **SimulatedDevice.js** 文件的开头添加以下 `require` 语句：\r \r     ```\r     'use strict';\r \r     var Mqtt = require('azure-iot-device-mqtt').Mqtt;\r     var DeviceClient = require('azure-iot-device').Client;\r     ```\r 5. 添加 **connectionString** 变量，并使用它创建 **DeviceClient** 实例。 将 **{device connection string}** 替换为在“创建设备标识”部分生成的设备连接字符串：\r \r     ```\r     var connectionString = '{device connection string}';\r     var client = DeviceClient.fromConnectionString(connectionString, Mqtt);\r     ```\r 6. 添加以下函数，实现设备上的方法：\r \r     ```\r     function onWriteLine(request, response) {\r         console.log(request.payload);\r \r         response.send(200, 'Input was written to log.', function(err) {\r             if(err) {\r                 console.error('An error ocurred when sending a method response:\\n' + err.toString());\r             } else {\r                 console.log('Response to method \\'' + request.methodName + '\\' sent successfully.' );\r             }\r         });\r     }\r     ```\r 7. 打开与 IoT 中心的连接并开始初始化方法侦听器：\r \r     ```\r     client.open(function(err) {\r         if (err) {\r             console.error('could not open IotHub client');\r         }  else {\r             console.log('client opened');\r             client.onDeviceMethod('writeLine', onWriteLine);\r         }\r     });\r     ```\r 8. 保存并关闭 **SimulatedDevice.js** 文件。\r \r > [!NOTE]\r > 为简单起见，本教程不实现任何重试策略。 在生产代码中，应按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如连接重试）。\r > \r > \r \r ## <a name=\"call-a-method-on-a-device\"></a>调用设备上的方法\r 在此部分中，会创建一个 Node.js 控制台应用，该应用在模拟设备应用上调用方法并随后显示响应。\r \r 1. 新建名为 **callmethodondevice** 的空文件夹。 在 **callmethodondevice** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。 接受所有默认值：\r    \r     ```\r     npm init\r     ```\r 2. 在 **callmethodondevice** 文件夹的命令提示符处，运行以下命令以安装 **azure-iothub** 包：\r    \r     ```\r     npm install azure-iothub --save\r     ```\r 3. 使用文本编辑器，在 **callmethodondevice** 文件夹中创建 **CallMethodOnDevice.js** 文件。\r 4. 在 **CallMethodOnDevice.js** 文件的开头添加以下 `require` 语句：\r \r     ```\r     'use strict';\r \r     var Client = require('azure-iothub').Client;\r     ```\r 5. 添加以下变量声明，并将占位符值替换为中心的 IoT 中心连接字符串：\r \r     ```\r     var connectionString = '{iothub connection string}';\r     var methodName = 'writeLine';\r     var deviceId = 'myDeviceId';\r     ```\r 6. 创建客户端，以便打开到 IoT 中心的连接。\r \r     ```\r     var client = Client.fromConnectionString(connectionString);\r     ```\r 7. 添加以下函数，以便调用设备方法并将设备响应输出到控制台：\r \r     ```\r     var methodParams = {\r         methodName: methodName,\r         payload: 'hello world',\r         timeoutInSeconds: 30\r     };\r \r     client.invokeDeviceMethod(deviceId, methodParams, function (err, result) {\r         if (err) {\r             console.error('Failed to invoke method \\'' + methodName + '\\': ' + err.message);\r         } else {\r             console.log(methodName + ' on ' + deviceId + ':');\r             console.log(JSON.stringify(result, null, 2));\r         }\r     });\r     ```\r 8. 保存并关闭 **CallMethodOnDevice.js** 文件。\r \r ## <a name=\"run-the-apps\"></a>运行应用\r 现在，已准备就绪，可以运行应用。\r \r 1. 在 **simulateddevice** 文件夹的命令提示符处运行以下命令，开始侦听从 IoT 中心发出的方法调用：\r \r     ```\r     node SimulatedDevice.js\r     ```\r \r     ![][7]\r 2. 在 **callmethodondevice** 文件夹的命令提示符处运行以下命令，开始监视 IoT 中心：\r \r     ```\r     node CallMethodOnDevice.js \r     ```\r \r     ![][8]\r 3. 此时会看到设备通过输出消息对方法进行响应，而调用该方法的应用程序则会显示来自设备的响应：\r \r     ![][9]\r \r ## <a name=\"next-steps\"></a>后续步骤\r 本教程中，在 Azure 门户中配置了新的 IoT 中心，并在 IoT 中心的标识注册表中创建了设备标识。 已通过此设备标识启用模拟设备应用的相关功能，使之能够响应通过云调用的方法。 还创建了一个应用，用于调用设备上的方法并显示来自设备的响应。 \r \r 若要继续了解 IoT 中心入门知识并浏览其他 IoT 方案，请参阅：\r \r * [IoT 中心入门]\r * [Schedule jobs on multiple devices（在多台设备上计划作业）][lnk-devguide-jobs]\r \r 若要了解如何扩展 IoT 解决方案并在多个设备上计划方法调用，请参阅 [Schedule and broadcast jobs][lnk-tutorial-jobs] （计划和广播作业）教程。\r \r <!-- Images. -->\r [7]: ./media/iot-hub-node-node-direct-methods/run-simulated-device.png\r [8]: ./media/iot-hub-node-node-direct-methods/run-callmethodondevice.png\r [9]: ./media/iot-hub-node-node-direct-methods/methods-output.png\r \r <!-- Links -->\r [lnk-transient-faults]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r \r [lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/tree/master/doc/node-devbox-setup.md\r \r [lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r [lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r [lnk-portal]: https://portal.azure.cn/\r \r [lnk-devguide-jobs]: ./iot-hub-devguide-jobs.md\r [lnk-tutorial-jobs]: ./iot-hub-node-node-schedule-jobs.md\r [lnk-devguide-methods]: ./iot-hub-devguide-direct-methods.md\r [lnk-devguide-mqtt]: ./iot-hub-mqtt-support.md\r \r [Send Cloud-to-Device messages with IoT Hub]: ./iot-hub-csharp-csharp-c2d.md\r [Process Device-to-Cloud messages]: ./iot-hub-csharp-csharp-process-d2c.md\r [IoT 中心入门]: ./iot-hub-node-node-getstarted.md\r \r \r <!--Update_Description:update meta data only-->"}