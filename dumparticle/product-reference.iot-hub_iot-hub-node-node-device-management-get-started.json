{"Title":"Azure IoT 中心设备管理入门 (Node)","Description":"如何使用 IoT 中心设备管理进行远程设备重启。 使用 Azure IoT SDK for Node.js 实现包含直接方法的模拟设备应用和调用直接方法的服务应用。","Content":"# <a name=\"get-started-with-device-management-node\"></a>设备管理入门 (Node)\r \r [!INCLUDE [iot-hub-selector-dm-getstarted](../../includes/iot-hub-selector-dm-getstarted.md)]\r \r 本教程演示如何：\r \r * 使用 Azure 门户创建 IoT 中心，以及如何在 IoT 中心创建设备标识。\r * 创建包含重新启动该设备的直接方法的模拟设备应用。 直接方法是从云中调用的。\r * 创建一个 Node.js 控制台应用，其通过 IoT 中心直接重启模拟设备应用。\r \r 本教程结束时，会创建两个 Node.js 控制台应用：\r \r **dmpatterns_getstarted_device.js**，它使用先前创建的设备标识连接到 IoT 中心，接收重新启动直接方法，模拟物理重新启动，并报告上次重新启动的时间。\r \r **dmpatterns_getstarted_service.js**，它调用模拟设备应用中的直接方法，显示响应，并显示更新后的报告属性。\r \r 要完成本教程，需要以下各项：\r \r * Node.js 版本 4.0.x 或更高版本； <br/>  [准备开发环境][lnk-dev-setup]介绍了如何在 Windows 或 Linux 上安装本教程所用的 Node.js。\r * 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r \r [!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r \r [!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r \r ## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r 在本部分，用户需\r \r * 创建一个 Node.js 控制台应用，用于响应通过云调用的直接方法\r * 触发模拟的设备重启\r * 通过报告的属性，设备孪生查询可标识设备及设备上次重新启动的时间\r \r 1. 创建名为 **manageddevice** 的空文件夹。  在 **manageddevice** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。  接受所有默认值：\r \r     ```\r     npm init\r     ```\r 2. 在 **manageddevice** 文件夹的命令提示符处，运行下述命令以安装 **azure-iot-device** 设备 SDK 包和 **azure-iot-device-mqtt** 包：\r \r     ```\r     npm install azure-iot-device azure-iot-device-mqtt --save\r     ```\r 3. 在 **manageddevice** 文件夹中，使用文本编辑器创建 **dmpatterns_getstarted_device.js** 文件。\r 4. 在 **dmpatterns_getstarted_device.js** 文件开头添加以下“require”语句：\r \r     ```\r     'use strict';\r \r     var Client = require('azure-iot-device').Client;\r     var Protocol = require('azure-iot-device-mqtt').Mqtt;\r     ```\r 5. 添加 **connectionString** 变量，并使用它创建一个**客户端**实例。  将连接字符串替换为设备连接字符串。  \r \r     ```\r     var connectionString = 'HostName={youriothostname};DeviceId=myDeviceId;SharedAccessKey={yourdevicekey}';\r     var client = Client.fromConnectionString(connectionString, Protocol);\r     ```\r 6. 添加以下函数，实现设备上的直接方法\r \r     ```\r     var onReboot = function(request, response) {\r \r         // Respond the cloud app for the direct method\r         response.send(200, 'Reboot started', function(err) {\r             if (!err) {\r                 console.error('An error occured when sending a method response:\\n' + err.toString());\r             } else {\r                 console.log('Response to method \\'' + request.methodName + '\\' sent successfully.');\r             }\r         });\r \r         // Report the reboot before the physical restart\r         var date = new Date();\r         var patch = {\r             iothubDM : {\r                 reboot : {\r                     lastReboot : date.toISOString(),\r                 }\r             }\r         };\r \r         // Get device Twin\r         client.getTwin(function(err, twin) {\r             if (err) {\r                 console.error('could not get twin');\r             } else {\r                 console.log('twin acquired');\r                 twin.properties.reported.update(patch, function(err) {\r                     if (err) throw err;\r                     console.log('Device reboot twin state reported')\r                 });  \r             }\r         });\r \r         // Add your device's reboot API for physical restart.\r         console.log('Rebooting!');\r     };\r     ```\r 7. 打开与 IoT 中心的连接并启动直接方法侦听器：\r \r     ```\r     client.open(function(err) {\r         if (err) {\r             console.error('Could not open IotHub client');\r         }  else {\r             console.log('Client opened.  Waiting for reboot method.');\r             client.onDeviceMethod('reboot', onReboot);\r         }\r     });\r     ```\r 8. 保存并关闭 **dmpatterns_getstarted_device.js** 文件。\r \r    >[!NOTE]\r    > 为简单起见，本教程不实现任何重试策略。 在生产代码中，应该按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r \r ## <a name=\"trigger-a-remote-reboot-on-the-device-using-a-direct-method\"></a>使用直接方法在设备上触发远程重新启动\r 本部分中会创建一个 Node.js 控制台应用，该应用使用直接方法在设备上初始化远程重启。 该应用使用设备孪生查询来搜索该设备的上次重新启动时间。\r \r 1. 创建一个名为 **triggerrebootondevice** 的空文件夹。  在 **triggerrebootondevice** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。  接受所有默认值：\r \r     ```\r     npm init\r     ```\r 2. 在 **triggerrebootondevice** 文件夹的命令提示符处，运行下述命令以安装 **azure-iothub** 设备 SDK 包和 **azure-iot-device-mqtt** 包：\r \r     ```\r     npm install azure-iothub --save\r     ```\r 3. 在 **triggerrebootondevice** 文件夹中，使用文本编辑器创建 **dmpatterns_getstarted_service.js** 文件。\r 4. 在 **dmpatterns_getstarted_service.js** 文件开头添加以下“require”语句：\r \r     ```\r     'use strict';\r \r     var Registry = require('azure-iothub').Registry;\r     var Client = require('azure-iothub').Client;\r     ```\r 5. 添加以下变量声明并替换占位符值：\r \r     ```\r     var connectionString = '{iothubconnectionstring}';\r     var registry = Registry.fromConnectionString(connectionString);\r     var client = Client.fromConnectionString(connectionString);\r     var deviceToReboot = 'myDeviceId';\r     ```\r 6. 添加以下函数以调用设备方法来重新启动目标设备：\r \r     ```\r     var startRebootDevice = function(twin) {\r \r         var methodName = \"reboot\";\r \r         var methodParams = {\r             methodName: methodName,\r             payload: null,\r             timeoutInSeconds: 30\r         };\r \r         client.invokeDeviceMethod(deviceToReboot, methodParams, function(err, result) {\r             if (err) { \r                 console.error(\"Direct method error: \"+err.message);\r             } else {\r                 console.log(\"Successfully invoked the device to reboot.\");  \r             }\r         });\r     };\r     ```\r 7. 添加以下函数以查询设备并获取上次重新启动时间：\r \r     ```\r     var queryTwinLastReboot = function() {\r \r         registry.getTwin(deviceToReboot, function(err, twin){\r \r             if (twin.properties.reported.iothubDM != null)\r             {\r                 if (err) {\r                     console.error('Could not query twins: ' + err.constructor.name + ': ' + err.message);\r                 } else {\r                     var lastRebootTime = twin.properties.reported.iothubDM.reboot.lastReboot;\r                     console.log('Last reboot time: ' + JSON.stringify(lastRebootTime, null, 2));\r                 }\r             } else \r                 console.log('Waiting for device to report last reboot time.');\r         });\r     };\r     ```\r 8. 添加以下代码以调用函数，触发重新启动直接方法并查询上次重新启动时间：\r \r     ```\r     startRebootDevice();\r     setInterval(queryTwinLastReboot, 2000);\r     ```\r 9. 保存并关闭 **dmpatterns_getstarted_service.js** 文件。\r \r ## <a name=\"run-the-apps\"></a>运行应用\r 现在，已准备就绪，可以运行应用。\r \r 1. 在 **manageddevice** 文件夹的命令提示符处，运行以下命令进行直接重启方法的侦听。\r \r     ```\r     node dmpatterns_getstarted_device.js\r     ```\r 2. 在 **triggerrebootondevice** 文件夹的命令提示符处运行以下命令，以便触发远程重启并查询设备孪生了解上次重启时间。\r \r     ```\r     node dmpatterns_getstarted_service.js\r     ```\r 3. 可以在控制台中看到设备对直接方法的响应。\r \r [!INCLUDE [iot-hub-dm-followup](../../includes/iot-hub-dm-followup.md)]\r \r <!-- images and links -->\r [img-output]: ./media/iot-hub-get-started-with-dm/image6.png\r [img-dm-ui]: ./media/iot-hub-get-started-with-dm/dmui.png\r \r [lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/tree/master/doc/node-devbox-setup.md\r \r [lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r [Azure portal]: https://portal.azure.cn/\r [Using resource groups to manage your Azure resources]: ../azure-portal/resource-group-portal.md\r [lnk-dm-github]: https://github.com/Azure/azure-iot-device-management\r \r [lnk-devtwin]: ./iot-hub-devguide-device-twins.md\r [lnk-c2dmethod]: ./iot-hub-devguide-direct-methods.md\r [lnk-transient-faults]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r \r \r <!--Update_Description:update code and wording-->"}