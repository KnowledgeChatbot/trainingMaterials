{"Title":"Azure Cosmos DB：在 .NET 中使用 DocumentDB API 进行开发","Description":"了解如何通过 .NET 使用 Azure Cosmos DB 的 DocumentDB API 进行开发","Content":"# <a name=\"azure-cosmosdb-develop-with-the-documentdb-api-in-net\"></a>Azure Cosmos DB：在 .NET 中使用 DocumentDB API 进行开发\r \r Azure Cosmos DB 由 世纪互联 提供，是多个区域分布的多模型数据库服务。 可快速创建和查询文档、键/值数据库，所有这些都受益于 Azure Cosmos DB 核心的多个区域分布和水平缩放功能。 \r <!-- Notice: 全球 to 多个区域 -->\r \r 本教程演示如何使用 Azure 门户创建 Azure Cosmos DB 帐户，然后使用 [DocumentDB .NET API](documentdb-introduction.md) 创建具有[分区键](documentdb-partition-data.md#partition-keys)的文档数据库和集合。 通过在创建集合时定义分区键，应用程序能够随数据增加轻松进行扩展。 \r \r 本教程介绍如何使用 [DocumentDB.NET API](documentdb-sdk-dotnet.md) 完成以下任务：\r \r > [!div class=\"checklist\"]\r > * 创建 Azure Cosmos DB 帐户\r > * 创建具有分区键的数据库和集合\r > * 创建 JSON 文档\r > * 更新文档\r > * 查询已分区集合\r > * 运行存储过程\r > * 删除文档\r > * 删除数据库\r \r ## <a name=\"prerequisites\"></a>先决条件\r 请确保具有以下内容：\r \r * 有效的 Azure 帐户。 如果没有，可以注册[试用帐户](https://www.azure.cn/pricing/1rmb-trial/)。 \r \r   [!INCLUDE [cosmos-db-emulator-docdb-api](../../includes/cosmos-db-emulator-docdb-api.md)]\r \r * 如果尚未安装 Visual Studio 2017，可以下载并使用**免费的** [Visual Studio 2017 Community Edition](https://www.visualstudio.com/downloads/)。 在安装 Visual Studio 的过程中，请确保启用“Azure 开发”。\r \r ## <a name=\"create-an-azure-cosmos-db-account\"></a>创建 Azure Cosmos DB 帐户\r \r 首先在 Azure 门户中创建 Azure Cosmos DB 帐户。\r \r > [!TIP]\r > * 已有一个 Azure Cosmos DB 帐户？ 如果有，请跳到[设置 Visual Studio 解决方案](#SetupVS)\r > * 如果使用 Azure Cosmos DB 模拟器，请遵循 [Azure Cosmos DB 模拟器](local-emulator.md)中的步骤设置该模拟器，并直接跳到[设置 Visual Studio 解决方案](#SetupVS)。 \r >\r >\r \r [!INCLUDE [cosmos-db-create-dbaccount](../../includes/cosmos-db-create-dbaccount.md)]\r \r ## <a name=\"SetupVS\"></a>设置 Visual Studio 解决方案\r 1. 在计算机上打开 Visual Studio。\r 2. 在“文件”菜单中，依次选择“新建”、“项目”。\r 3. 在“新建项目”对话框中，选择“模板” / “Visual C#” / “控制台应用(.NET Framework)”，为项目命名，并单击“确定”。\r    ![“新建项目”窗口屏幕截图](./media/tutorial-develop-documentdb-dotnet/nosql-tutorial-new-project-2.png)\r \r 4. 在“解决方案资源管理器”中，右键单击 Visual Studio 解决方案下方的新控制台应用程序，并单击“管理 NuGet 包...”\r \r     ![“项目”右键菜单屏幕截图](./media/tutorial-develop-documentdb-dotnet/nosql-tutorial-manage-nuget-pacakges.png)\r 5. 在“NuGet”选项卡上，单击“浏览”，并在搜索框中输入“documentdb”。\r <!---stopped here--->\r 6. 在结果中找到 **Microsoft.Azure.DocumentDB**，并单击“安装”。\r    Azure Cosmos DB 客户端库的程序包 ID 是 [Microsoft.Azure.DocumentDB](https://www.nuget.org/packages/Microsoft.Azure.DocumentDB)。\r    ![用于查找 Azure Cosmos DB 客户端 SDK 的 NuGet 菜单的屏幕截图](./media/tutorial-develop-documentdb-dotnet/nosql-tutorial-manage-nuget-pacakges-2.png)\r \r     如果收到有关查看解决方案更改的消息，请单击“确定”。 如果收到有关接受许可证的消息，请单击“我接受” 。\r \r ## <a name=\"Connect\"></a>添加对项目的引用\r 本教程中的剩余步骤提供在项目中创建和更新 Azure Cosmos DB 资源所需的 DocumentDB API 代码段。\r \r 首先，向应用程序添加这些引用。\r <!---These aren't added by default when you install the pkg?--->\r \r ```csharp\r using System.Net;\r using Microsoft.Azure.Documents;\r using Microsoft.Azure.Documents.Client;\r using Newtonsoft.Json;\r ```\r \r ## <a name=\"add-references\"></a>连接应用\r \r 下一步，在应用程序中添加这两个常量和客户端变量。\r \r ```csharp\r private const string EndpointUrl = \"<your endpoint URL>\";\r private const string PrimaryKey = \"<your primary key>\";\r private DocumentClient client;\r ```\r \r 接下来，返回到 [Azure 门户](https://portal.azure.cn)检索终结点 URL 和主密钥。 终结点 URL 和主密钥是必需的，可让应用程序知道要连接的对象，使 Azure Cosmos DB 信任应用程序的连接。\r \r 在 Azure 门户中，导航到 Azure Cosmos DB 帐户，单击“密钥”，然后单击“读写密钥”。\r \r 从门户中复制该 URI 并将它粘贴到 program.cs 文件中的 `<your endpoint URL>`。 然后从门户中复制“主密钥”并将它粘贴到 `<your primary key>`。 请务必删除值中的 `<` 和 `>`。\r \r ![NoSQL 教程用于创建 C# 控制台应用程序的 Azure 门户的屏幕截图。 显示一个 Azure Cosmos DB 帐户，其中在 Azure Cosmos DB 帐户边栏选项卡中突出显示了“密钥”，以及在“密钥”边栏选项卡上突出显示了 URI 和 PRIMARY KEY 值](./media/tutorial-develop-documentdb-dotnet/nosql-tutorial-keys.png)\r \r ## <a name=\"instantiate\"></a>实例化 DocumentClient\r \r 现在创建 DocumentClient 的新实例。\r \r ```csharp\r DocumentClient client = new DocumentClient(new Uri(EndpointUrl), PrimaryKey);\r ```\r \r ## <a name=\"create-database\"></a>创建数据库\r \r 接下来，从 [DocumentDB .NET SDK](documentdb-sdk-dotnet.md) 使用 DocumentClient 类的 [CreateDatabaseAsync](https://msdn.microsoft.com/library/azure/microsoft.azure.documents.client.documentclient.createdatabaseasync.aspx) 方法或 [CreateDatabaseIfNotExistsAsync](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdatabaseifnotexistsasync.aspx) 方法创建一个 Azure Cosmos DB [数据库](documentdb-resources.md#databases)。 数据库是跨集合分区的 JSON 文档存储的逻辑容器。\r \r ```csharp\r await client.CreateDatabaseAsync(new Database { Id = \"db\" });\r ```\r ## <a name=\"decide-on-a-partition-key\"></a>确定分区键 \r \r 集合是存储文档的容器。 集合是逻辑资源，可以[跨一个或多个物理分区](partition-data.md)。 [分区键](documentdb-partition-data.md)是文档内用于在服务器或分区间分发数据的属性（或路径）。 具有相同分区键的所有文档都存储在同一分区中。 \r \r 确定分区键非常重要，需在创建集合前进行。 分区键是文档内可供 Azure Cosmos DB 用于在多个服务器或分区间分发数据的属性（或路径）。 Cosmos DB 对分区键值进行哈希处理，并使用经过哈希处理的结果来确定会在其中存储文档的分区。 具有相同分区键的所有文档都存储在同一分区中，创建集合后将无法更改分区键。 \r \r 本教程会分区键设置为 `/deviceId`，以便单个设备的所有数据都存储在单个分区中。 请选择具有大量值的分区键，以相同频率使用每个值，以确保 Cosmos DB 能在数据增加时保持负载均衡并达到集合的全部吞吐量。 \r \r 有关分区的详细信息，请参阅[如何在 Azure Cosmos DB 中进行分区和缩放？](partition-data.md) \r \r ## <a name=\"CreateColl\"></a>创建集合 \r \r 了解完分区键 `/deviceId` 后，使用 **DocumentClient** 的 [CreateDocumentCollectionAsync](https://msdn.microsoft.com/library/azure/microsoft.azure.documents.client.documentclient.createdocumentcollectionasync.aspx) 方法或 [CreateDocumentCollectionIfNotExistsAsync](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdocumentcollectionifnotexistsasync.aspx) 方法创建[集合](documentdb-resources.md#collections)。 集合是 JSON 文档和任何相关联的 JavaScript 应用程序逻辑的容器。 \r \r > [!WARNING]\r > 创建集合会影响定价，因为要保留应用程序的吞吐量才能与 Azure Cosmos DB 进行通信。 有关详细信息，请访问[定价页](https://www.azure.cn/pricing/details/cosmos-db/)\r > \r > \r \r ```csharp\r // Collection for device telemetry. Here the JSON property deviceId is used  \r // as the partition key to spread across partitions. Configured for 2500 RU/s  \r // throughput and an indexing policy that supports sorting against any  \r // number or string property. .\r DocumentCollection myCollection = new DocumentCollection();\r myCollection.Id = \"coll\";\r myCollection.PartitionKey.Paths.Add(\"/deviceId\");\r \r await client.CreateDocumentCollectionAsync(\r     UriFactory.CreateDatabaseUri(\"db\"),\r     myCollection,\r     new RequestOptions { OfferThroughput = 2500 });\r ```\r \r 此方法可对 Azure Cosmos DB 进行 REST API 调用，且该服务基于所请求的吞吐量设置分区数。 根据性能需求的发展，可以使用 SDK 或 [Azure 门户](set-throughput.md)更改集合的吞吐量。\r \r ## <a name=\"CreateDoc\"></a>创建 JSON 文档\r 向 Azure Cosmos DB 中插入一些 JSON 文档。 可以通过使用 **DocumentClient** 类的 [CreateDocumentAsync](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdocumentasync.aspx) 方法创建[文档](documentdb-resources.md#documents)。 文档是用户定义的（任意）JSON 内容。 此示例类包含设备读取和对 CreateDocumentAsync 的调用，可将新设备读数插入到集合。\r \r ```csharp\r public class DeviceReading\r {\r     [JsonProperty(\"id\")]\r     public string Id;\r \r     [JsonProperty(\"deviceId\")]\r     public string DeviceId;\r \r     [JsonConverter(typeof(IsoDateTimeConverter))]\r     [JsonProperty(\"readingTime\")]\r     public DateTime ReadingTime;\r \r     [JsonProperty(\"metricType\")]\r     public string MetricType;\r \r     [JsonProperty(\"unit\")]\r     public string Unit;\r \r     [JsonProperty(\"metricValue\")]\r     public double MetricValue;\r   }\r \r // Create a document. Here the partition key is extracted \r // as \"XMS-0001\" based on the collection definition\r await client.CreateDocumentAsync(\r     UriFactory.CreateDocumentCollectionUri(\"db\", \"coll\"),\r     new DeviceReading\r     {\r         Id = \"XMS-001-FE24C\",\r         DeviceId = \"XMS-0001\",\r         MetricType = \"Temperature\",\r         MetricValue = 105.00,\r         Unit = \"Fahrenheit\",\r         ReadingTime = DateTime.UtcNow\r     });\r ```\r ## <a name=\"read-data\"></a>读取数据\r \r 现使用 ReadDocumentAsync 方法按分区键和 ID 来读取文档。 请注意，读取包括 PartitionKey 值（对应 REST API 中的 `x-ms-documentdb-partitionkey` 请求标头）。\r \r ```csharp\r // Read document. Needs the partition key and the Id to be specified\r Document result = await client.ReadDocumentAsync(\r   UriFactory.CreateDocumentUri(\"db\", \"coll\", \"XMS-001-FE24C\"), \r   new RequestOptions { PartitionKey = new PartitionKey(\"XMS-0001\") });\r \r DeviceReading reading = (DeviceReading)(dynamic)result;\r ```\r \r ## <a name=\"update-data\"></a>更新数据\r \r 现使用 ReplaceDocumentAsync 方法更新某些数据。\r \r ```csharp\r // Update the document. Partition key is not required, again extracted from the document\r reading.MetricValue = 104;\r reading.ReadingTime = DateTime.UtcNow;\r \r await client.ReplaceDocumentAsync(\r   UriFactory.CreateDocumentUri(\"db\", \"coll\", \"XMS-001-FE24C\"), \r   reading);\r ```\r \r ## <a name=\"delete-data\"></a>删除数据\r \r 现使用 DeleteDocumentAsync 方法按分区键和 ID 来删除文档。\r \r ```csharp\r // Delete a document. The partition key is required.\r await client.DeleteDocumentAsync(\r   UriFactory.CreateDocumentUri(\"db\", \"coll\", \"XMS-001-FE24C\"), \r   new RequestOptions { PartitionKey = new PartitionKey(\"XMS-0001\") });\r ```\r ## <a name=\"query-partitioned-collections\"></a>查询已分区集合\r \r 当在已分区集合中查询数据时，Azure Cosmos DB 会自动将查询路由到筛选器（如果有）中所指定分区键值对应的分区。 例如，此查询将只路由到包含分区键“XMS-0001”的分区。\r \r ```csharp\r // Query using partition key\r IQueryable<DeviceReading> query = client.CreateDocumentQuery<DeviceReading>(\r     UriFactory.CreateDocumentCollectionUri(\"db\", \"coll\"))\r     .Where(m => m.MetricType == \"Temperature\" && m.DeviceId == \"XMS-0001\");\r ```\r \r 下面的查询在分区键 (DeviceId) 上没有筛选器，并且以扇形展开到针对分区索引执行该查询的所有分区。 请注意，必须指定 EnableCrossPartitionQuery（REST API 中的 `x-ms-documentdb-query-enablecrosspartition`）以使 SDK 跨分区执行查询。\r \r ```csharp\r // Query across partition keys\r IQueryable<DeviceReading> crossPartitionQuery = client.CreateDocumentQuery<DeviceReading>(\r     UriFactory.CreateDocumentCollectionUri(\"db\", \"coll\"), \r     new FeedOptions { EnableCrossPartitionQuery = true })\r     .Where(m => m.MetricType == \"Temperature\" && m.MetricValue > 100);\r ```\r \r ## <a name=\"parallel-query-execution\"></a>并行查询执行\r Azure Cosmos DB DocumentDB SDK 1.9.0 及更高版本支持并行查询执行选项，这些选项可用于对已分区集合执行低延迟查询，即使在这些查询需要处理大量分区时，也是如此。 例如，以下查询配置为跨分区并行运行。\r \r ```csharp\r // Cross-partition Order By queries\r IQueryable<DeviceReading> crossPartitionQuery = client.CreateDocumentQuery<DeviceReading>(\r     UriFactory.CreateDocumentCollectionUri(\"db\", \"coll\"), \r     new FeedOptions { EnableCrossPartitionQuery = true, MaxDegreeOfParallelism = 10, MaxBufferedItemCount = 100})\r     .Where(m => m.MetricType == \"Temperature\" && m.MetricValue > 100)\r     .OrderBy(m => m.MetricValue);\r ```\r \r 可以通过调整以下参数来管理并行查询执行：\r \r * 通过设置 `MaxDegreeOfParallelism`，可以控制并行度，即，与集合的分区同时进行的网络连接的最大数量。 如果将此参数设置为 -1，则由 SDK 管理并行度。 如果 `MaxDegreeOfParallelism` 未指定或设置为 0（默认值），则与集合的分区的网络连接将有一个。\r * 通过设置 `MaxBufferedItemCount`，可以权衡查询延迟和客户端内存使用率。 如果省略此参数或将此参数设置为 -1，则由 SDK 管理并行查询执行过程中缓冲的项目数。\r \r 如果给定相同状态的集合，并行查询会以与串行执行相同的顺序返回结果。 执行包含排序（ORDER BY 和/或 TOP）的跨分区查询时，DocumentDB SDK 跨分区发出并行查询，并合并客户端中的部分排序结果，以生成全局范围内有序的结果。\r \r ## <a name=\"execute-stored-procedures\"></a>执行存储过程\r 最后，通过将以下代码添加到项目中，可以对具有相同设备 ID 的文档执行原子事务，例如，如果要在单个文档中维护聚合或设备的最新状态。\r \r ```csharp\r await client.ExecuteStoredProcedureAsync<DeviceReading>(\r     UriFactory.CreateStoredProcedureUri(\"db\", \"coll\", \"SetLatestStateAcrossReadings\"),\r     new RequestOptions { PartitionKey = new PartitionKey(\"XMS-001\") }, \r     \"XMS-001-FE24C\");\r ```\r \r 大功告成！ 这些是 Azure Cosmos DB 应用程序的主要组件，该程序使用分区键跨分区高效缩放数据分布。  \r \r ## <a name=\"clean-up-resources\"></a>清理资源\r \r 如果不打算继续使用此应用，请删除本教程在 Azure 门户中创建的所有资源，步骤如下：\r \r 1. 在 Azure 门户的左侧菜单中，单击“资源组”，然后单击创建的资源的唯一名称。 \r 2. 在资源组页上单击“删除”，在文本框中键入要删除的资源的名称，并单击“删除”。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 在本教程中，已完成以下内容： \r \r > [!div class=\"checklist\"]\r > * 已创建 Azure Cosmos DB 帐户\r > * 已创建具有分区键的数据库和集合\r > * 已创建 JSON 文档\r > * 已更新文档\r > * 已查询分区集合\r > * 已运行存储过程\r > * 已删除文档\r > * 已删除数据库\r \r 现在可进入下一教程，将其他数据导入 Cosmos DB 帐户。 \r \r > [!div class=\"nextstepaction\"]\r > [将数据导入 Azure Cosmos DB](import-data.md)\r \r <!--Update_Description: update meta properties, wording update-->"}