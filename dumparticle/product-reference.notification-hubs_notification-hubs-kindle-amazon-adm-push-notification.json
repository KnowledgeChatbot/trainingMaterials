{"Title":"适用于 Kindle 应用的 Azure 通知中心入门","Description":"在本教程中，你将了解如何使用 Azure 通知中心将推送通知发送到 Kindle 应用程序。","Content":"\r # 通知中心入门（Kindle 应用）\r \r [!INCLUDE [notification-hubs-selector-get-started](../../includes/notification-hubs-selector-get-started.md)]\r \r [!INCLUDE [azure-sdk-developer-differences](../../includes/azure-sdk-developer-differences.md)]\r \r ##概述\r \r 本教程演示如何使用 Azure 通知中心将推送通知发送到 Kindle 应用程序。\r 你将创建一个空白 Kindle 应用，它使用 Amazon Device Messaging (ADM) 接收推送通知。\r \r ##先决条件\r \r 本教程需要的内容如下：\r \r + 从 <a href=\"http://go.microsoft.com/fwlink/?LinkId=389797\">Android 站点</a>获取 Android SDK（我们假设你要使用 Eclipse）。\r + 按照<a href=\"https://developer.amazon.com/appsandservices/resources/development-tools/ide-tools/tech-docs/01-setting-up-your-development-environment\">设置开发环境</a>中的步骤设置 Kindle 的开发环境。\r \r ##向开发人员门户添加新应用程序\r \r 1. 首先，请在 [Amazon 开发人员门户]中创建一个应用。\r \r     ![][0]\r \r 2. 复制“应用程序密钥”。\r \r     ![][1]\r \r 3. 在门户中单击应用的名称，然后单击“设备消息”选项卡。\r \r     ![][2]\r \r 4. 单击“创建新的安全配置文件”，然后创建一个新的安全配置文件（例如 **TestAdm security profile**）。然后单击“保存”。\r \r     ![][3]\r \r 5. 单击“安全配置文件”以查看你刚刚创建的安全配置文件。复制“客户端 ID”和“客户端密码”值以供稍后使用。\r \r     ![][4]\r \r ## 创建 API 密钥\r \r 1. 使用管理员特权打开命令提示符。\r 2. 导航到 Android SDK 文件夹。\r 3. 输入以下命令：\r \r     ```\r     keytool -list -v -alias androiddebugkey -keystore ./debug.keystore\r     ```\r \r     ![][5]\r \r 4.  对于“密钥库”密码，请键入 **android**。\r \r 5.  复制 **MD5** 指纹。\r 6.  返回到开发人员门户，在“消息”选项卡中，单击“Android/Kindle”，输入应用包的名称（例如 **com.sample.notificationhubtest**）和 **MD5** 值，然后单击“生成 API 密钥”。\r \r ## 将凭据添加到中心\r \r 在门户中，将客户端密码和客户端 ID 添加到通知中心的“配置”选项卡。\r \r ## 设置应用程序\r \r > [!NOTE]\r > 创建应用程序时，请至少使用 API 级别 17。\r \r 将 ADM 库添加到你的 Eclipse 项目：\r \r 1. 若要获取 ADM 库，请[下载 SDK]。解压缩 SDK zip 文件。\r 2. 在 Eclipse 中右键单击你的项目，然后单击“属性”。在左侧选择“Java 生成路径”，然后选择顶部的“库”选项卡。单击“添加外部 Jar”，并从提取 Amazon SDK 的目录中选择文件 `\\SDK\\Android\\DeviceMessaging\\lib\\amazon-device-messaging-*.jar`。\r 3. 下载 NotificationHubs Android SDK（链接）。\r 4. 解压缩该包，然后在 Eclipse 中将文件 `notification-hubs-sdk.jar` 拖放到 `libs` 文件夹中。\r \r 编辑你的应用程序清单以支持 ADM：\r \r 1. 在根清单元素中添加 Amazon 命名空间：\r \r     ```\r     xmlns:amazon=\"http://schemas.amazon.com/apk/res/android\"\r     ```\r \r 2. 在清单元素下添加权限作为第一个元素。将 **[YOUR PACKAGE NAME]** 替换为用于创建应用的包。\r \r     ```\r     <permission\r      android:name=\"[YOUR PACKAGE NAME].permission.RECEIVE_ADM_MESSAGE\"\r      android:protectionLevel=\"signature\" />\r \r     <uses-permission android:name=\"android.permission.INTERNET\"/>\r \r     <uses-permission android:name=\"[YOUR PACKAGE NAME].permission.RECEIVE_ADM_MESSAGE\" />\r \r     <!-- This permission allows your app access to receive push notifications\r     from ADM. -->\r     <uses-permission android:name=\"com.amazon.device.messaging.permission.RECEIVE\" />\r \r     <!-- ADM uses WAKE_LOCK to keep the processor from sleeping when a message is received. -->\r     <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r     ```\r \r 3. 插入以下元素作为应用程序元素的第一个子级。请记得将 **[YOUR SERVICE NAME]** 替换为你在下一部分中创建的 ADM 消息处理程序的名称（包括包），并将 **[YOUR PACKAGE NAME]** 替换为创建应用时所用的包名称。\r \r     ```\r     <amazon:enable-feature\r           android:name=\"com.amazon.device.messaging\"\r                  android:required=\"true\"/>\r     <service\r         android:name=\"[YOUR SERVICE NAME]\"\r         android:exported=\"false\" />\r \r     <receiver\r         android:name=\"[YOUR SERVICE NAME]$Receiver\" />\r \r         <!-- This permission ensures that only ADM can send your app registration broadcasts. -->\r         android:permission=\"com.amazon.device.messaging.permission.SEND\" >\r \r         <!-- To interact with ADM, your app must listen for the following intents. -->\r         <intent-filter>\r       <action android:name=\"com.amazon.device.messaging.intent.REGISTRATION\" />\r       <action android:name=\"com.amazon.device.messaging.intent.RECEIVE\" />\r \r       <!-- Replace the name in the category tag with your app's package name. -->\r       <category android:name=\"[YOUR PACKAGE NAME]\" />\r         </intent-filter>\r     </receiver>\r     ```\r \r ## 创建 ADM 消息处理程序\r \r 1. 创建继承自 `com.amazon.device.messaging.ADMMessageHandlerBase` 的新类并将其命名为 `MyADMMessageHandler`，如下图中所示：\r \r     ![][6]\r \r 2. 添加以下 `import` 语句：\r \r     ```\r     import android.app.NotificationManager;\r     import android.app.PendingIntent;\r     import android.content.Context;\r     import android.content.Intent;\r     import android.support.v4.app.NotificationCompat;\r     import com.amazon.device.messaging.ADMMessageReceiver;\r     import com.microsoft.windowsazure.messaging.NotificationHub\r     ```\r \r 3. 在创建的类中添加以下代码。请记得替换中心名称和连接字符串 (listen)：\r \r     ```\r     public static final int NOTIFICATION_ID = 1;\r     private NotificationManager mNotificationManager;\r     NotificationCompat.Builder builder;\r       private static NotificationHub hub;\r     public static NotificationHub getNotificationHub(Context context) {\r         Log.v(\"com.wa.hellokindlefire\", \"getNotificationHub\");\r         if (hub == null) {\r             hub = new NotificationHub(\"[hub name]\", \"[listen connection string]\", context);\r         }\r         return hub;\r     }\r \r     public MyADMMessageHandler() {\r             super(\"MyADMMessageHandler\");\r         }\r \r         public static class Receiver extends ADMMessageReceiver\r         {\r             public Receiver()\r             {\r                 super(MyADMMessageHandler.class);\r             }\r         }\r \r         private void sendNotification(String msg) {\r             Context ctx = getApplicationContext();\r \r             mNotificationManager = (NotificationManager)\r                 ctx.getSystemService(Context.NOTIFICATION_SERVICE);\r \r         PendingIntent contentIntent = PendingIntent.getActivity(ctx, 0,\r               new Intent(ctx, MainActivity.class), 0);\r \r         NotificationCompat.Builder mBuilder =\r               new NotificationCompat.Builder(ctx)\r               .setSmallIcon(R.mipmap.ic_launcher)\r               .setContentTitle(\"Notification Hub Demo\")\r               .setStyle(new NotificationCompat.BigTextStyle()\r                      .bigText(msg))\r               .setContentText(msg);\r \r          mBuilder.setContentIntent(contentIntent);\r          mNotificationManager.notify(NOTIFICATION_ID, mBuilder.build());\r     }\r     ```\r \r 4. 将以下代码添加到 `OnMessage()` 方法中：\r \r     ```\r     String nhMessage = intent.getExtras().getString(\"msg\");\r     sendNotification(nhMessage);\r     ```\r \r 5. 将以下代码添加到 `OnRegistered` 方法中：\r \r     ```\r         try {\r     getNotificationHub(getApplicationContext()).register(registrationId);\r         } catch (Exception e) {\r     Log.e(\"[your package name]\", \"Fail onRegister: \" + e.getMessage(), e);\r         }\r     ```\r \r 6. 将以下代码添加到 `OnUnregistered` 方法中：\r \r     ```\r         try {\r             getNotificationHub(getApplicationContext()).unregister();\r         } catch (Exception e) {\r             Log.e(\"[your package name]\", \"Fail onUnregister: \" + e.getMessage(), e);\r         }\r     ```\r \r 7. 在 `MainActivity` 方法中添加以下 import 语句：\r \r     ```\r     import com.amazon.device.messaging.ADM;\r     ```\r \r 8. 在 `OnCreate` 方法的末尾添加以下代码：\r \r     ```\r     final ADM adm = new ADM(this);\r     if (adm.getRegistrationId() == null)\r     {\r        adm.startRegister();\r     } else {\r         new AsyncTask() {\r               @Override\r               protected Object doInBackground(Object... params) {\r          try { MyADMMessageHandler.getNotificationHub(getApplicationContext()).register(adm.getRegistrationId());\r          } catch (Exception e) {\r      Log.e(\"com.wa.hellokindlefire\", \"Failed registration with hub\", e);\r      return e;\r          }\r          return null;\r              }\r            }.execute(null, null, null);\r     }\r     ```\r \r ## 将 API 密钥添加到应用\r \r 1. 在 Eclipse 中，在项目的目录资产中创建名为 **api\\_key.txt** 的新文件。\r 2. 打开该文件，并复制你在 Amazon 开发人员门户中生成的 API 密钥。\r \r ## 运行应用程序\r \r 1. 启动模拟器。\r 2. 在模拟器中，从顶部往下轻扫，单击“设置”，然后单击“我的帐户”并使用有效的 Amazon 帐户注册。\r 3. 在 Eclipse 中运行应用程序。\r \r > [!NOTE]\r > 如果出现了问题，请检查模拟器（或设备）的时间。时间值必须准确。若要更改 Kindle 模拟器的时间，可以从 Android SDK platform-tools 目录运行以下命令：\r \r ```\r adb shell  date -s \"yyyymmdd.hhmmss\"\r ```\r \r ## 发送消息\r \r 若要使用 .NET 发送消息：\r \r ```\r static void Main(string[] args)\r {\r     NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(\"[conn string]\", \"[hub name]\");\r \r     hub.SendAdmNativeNotificationAsync(\"{\"data\":{\"msg\" : \"Hello from .NET!\"}}\").Wait();\r }\r ```\r \r ![][7]\r \r <!-- URLs. -->\r [Amazon 开发人员门户]: https://developer.amazon.com/home.html\r [下载 SDK]: https://developer.amazon.com/public/resources/development-tools/sdk\r \r [0]: ./media/notification-hubs-kindle-get-started/notification-hub-kindle-portal1.png\r [1]: ./media/notification-hubs-kindle-get-started/notification-hub-kindle-portal2.png\r [2]: ./media/notification-hubs-kindle-get-started/notification-hub-kindle-portal3.png\r [3]: ./media/notification-hubs-kindle-get-started/notification-hub-kindle-portal4.png\r [4]: ./media/notification-hubs-kindle-get-started/notification-hub-kindle-portal5.png\r [5]: ./media/notification-hubs-kindle-get-started/notification-hub-kindle-cmd-window.png\r [6]: ./media/notification-hubs-kindle-get-started/notification-hub-kindle-new-java-class.png\r [7]: ./media/notification-hubs-kindle-get-started/notification-hub-kindle-notification.png\r \r <!---HONumber=Mooncake_0808_2016-->"}