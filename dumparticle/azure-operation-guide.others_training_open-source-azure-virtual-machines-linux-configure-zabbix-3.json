{"Title":"使用 Zabbix 监控 MySQL","Description":"本文介绍如何在 Azure Linux 虚拟机上使用 Zabbix 监控 MySQL","Content":"\r #使用 Zabbix 监控 MySQL\r \r ##监控 MySQL 和 MySQL 主从复制\r \r 1. 在 mysql 主从虚拟机上都安装 zabbix agent 包，打开端口 10050,10051,3306 . 启动 zabbix agent 进程, 添加 mysql 主从虚拟机到监控列表。\r \r 2. 安装 mysql ，配置主从复制。请参考如下步骤3-12 (以CentOS 7 为例)\r \r 3. 使用 putty 连接到 mysql 主服务器, 执行下面命令\r \r     ```\r     $sudo yum install mariadb-server -y\r     ```\r \r 4. 编辑 /etc/my.cnf, 添加下面内容到 [mysqld]下\r \r     ```\r     server-id\t= 1\r     log_bin\t= /var/lib/mysql/mysql-bin.log\r     ```\r \r 5. 使用 putty 连接到 mysql 从服务器，执行下面命令\r \r     ```\r     $sudo yum install mariadb-server -y\r     ```\r \r 6. 编辑/etc/my.cnf, 添加下面内容到 [mysqld]下\r \r     ```\r     server-id\t= 2\r     log_bin\t= /var/lib/mysql/mysql-bin.log\r     ```\r \r 7. 去到 mysql 主服务器，启动进程\r \r     ```\r     $sudo service mariadb start\r     ```\r \r 8. 创建复制用户. 使用真实的从服务器，用户，密码代替下面代码中的 repluser, slave ip, password。 \r \r     ```\r     $mysql -uroot -p<password>\r     grant replication slave on *.* to 'repluser'@'slave ip' identified by 'password';  \r     flush privileges;\r     exit\r     ```\r \r 9. 重启服务，查看主服务器状态\r \r     ```\r     $sudo service mariadb restart\r     $mysql -uroot -p<password>\r     show master status;\r     ```\r \r     执行 ‘show master status’结果类似下图。我们之后会用到 ‘File’ 和 ‘Position’ 的信息\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/1.png)\r \r 10. 去到 mysql 从服务器，执行\r \r     ```\r     $sudo service mariadb start\r     ```\r \r 11. 执行下面命令. 请根据实际情况填写。 ‘master log bin’ 和’pos’信息是上面’show master status’命令获取到的；’repluser’ 和’password’ 是上面授权的命令定义的; ‘mysql master ip’ 是 mysql 主服务器的 IP 。\r \r     ```\r     $ mysql -uroot -p<password>\r     change master to master_host=’mysql master ip’, master_user=’repluser’, master_password=’password’,                     \r     master_log_file=’master log bin’, master_log_pos=pos;\r     start slave;\r     show slave status\\G\r     ```\r \r     show slave status\\G 会显示主从复制状态，结果类似下图\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/2.png)\r \r     我们检查 “Slave_IO_Running” 和“Slave_SQL_Running”, 如果都是 “Yes”, 通常意味着主从复制正常工作\r \r 12. 我们可以做一些数据操作检测数据同步是否正常. 在 mysql 主服务器上执行\r \r     ```\r     $ mysql -uroot -p<password>\r     create database shopping;\r     use shopping;\r     create table book (id int(10), name varchar(20));\r     insert into book values (1, ‘war and pe’);\r     ```\r \r     去到从服务器上执行\r \r     ```\r     $ mysql -uroot -p<password>\r     select * from shopping.book;\r     ```\r \r     如果结果类似下图，表明数据同步正常\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/3.png)\r \r 我们现在可以继续下一步了: 配置 zabbix ，使用 zabbix mysql 模板监控 mysql 状态。步骤如下\r \r 1. 在 mysql 主服务器上执行\r \r     ```\r     $ mysql -uroot -p<password>\r     GRANT USAGE,PROCESS,SUPER,REPLICATION CLIENT,REPLICATION SLAVE ON *.* TO 'zabbix'@'localhost' IDENTIFIED BY 'zabbix';\r     flush privileges;\r     exit\r     ```\r \r 2. 在 /usr/local/zabbix/etc/创建 .my.cnf\r \r     ```\r     $sudo vi /usr/local/zabbix/etc/.my.cnf\r     [mysql]\r     host=localhost\r     user=zabbix\r     password=zabbix\r     [mysqladmin]\r     host=localhost\r     user=zabbix\r     password=zabbix\r     ```\r \r 3. 编辑/usr/local/zabbix/etc/zabbix_agentd.conf, 在文件末尾添加下面内容\r \r     ```\r     ### MySQL DB Infomation\r     UserParameter=mysql.status[*],echo \"show global status where Variable_name='$1';\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|awk '{print $$2}'\r     UserParameter=mysql.variables[*],echo \"show global variables where Variable_name='$1';\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|awk '{print $$2}'\r     UserParameter=mysql.ping,mysqladmin --defaults-file=/usr/local/zabbix/etc/.my.cnf ping|grep -c  alive\r     UserParameter=mysql.version,echo \"select version();\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N\r \r     #### MySQL Master Information\r     UserParameter=mysql.master.Slave_count,echo \"show slave hosts;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|wc -l\r     UserParameter=mysql.master.Binlog_file,echo \"show master status;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|awk '{print $1}'|awk -F. '{print $1}'\r     UserParameter=mysql.master.Binlog_number,echo \"show master status;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|awk '{print $1}'|awk -F. '{print $2}'\r     UserParameter=mysql.master.Binlog_position,echo \"show master status;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|awk '{print $2}'\r     UserParameter=mysql.master.Binlog_count,echo \"show binary logs;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|wc -l\r     UserParameter=mysql.master.Binlog_total_size,echo \"show binary logs;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|awk '{sum+=$NF}END{print  sum}'\r \r     #### MySQL Slave Information\r     UserParameter=mysql.slave.Seconds_Behind_Master,echo \"show slave status\\G\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf|grep \"Seconds_Behind_Master\"|awk '{print $2}'\r     UserParameter=mysql.slave.Slave_IO_Running,echo \"show slave status\\G\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf|grep \"Slave_IO_Running\"|awk '{print $2}'\r     UserParameter=mysql.slave.Slave_SQL_Running,echo \"show slave status\\G\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf|grep \"Slave_SQL_Running\"|awk '{print $2}'\r     UserParameter=mysql.slave.Relay_Log_Pos,echo \"show slave status\\G\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf|grep \"Relay_Log_Pos\"|awk '{print $2}'\r     UserParameter=mysql.slave.Exec_Master_Log_Pos,echo \"show slave status\\G\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf|grep \"Exec_Master_Log_Pos\"|awk '{print $2}'\r     UserParameter=mysql.slave.Read_Master_Log_Pos,echo \"show slave status\\G\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf|grep \"Read_Master_Log_Pos\"|awk '{print $2}'\r \r     #### MySQL InnoDB Information\r     #\r     UserParameter=mysql.innodb[*],/usr/local/zabbix/bin/mysql_innodb_status.sh $1\r \r     ####MySQL MyISAM Information\r     #\r     ```\r \r 4. 创建 /usr/local/zabbix/bin/mysql_innodb_status.sh, 内容如下\r \r     ```\r     #!/bin/bash\r \r     #Get InnoDB Row Lock Details and InnoDB Transcation Lock Memory\r     #mysql> SELECT SUM(trx_rows_locked) AS rows_locked, SUM(trx_rows_modified) AS rows_modified, SUM(trx_lock_memory_bytes) AS lock_memory FROM information_schema.INNODB_TRX;\r     #+-------------+---------------+-------------+\r     #| rows_locked | rows_modified | lock_memory |\r     #+-------------+---------------+-------------+\r     #|        NULL |          NULL |        NULL |\r     #+-------------+---------------+-------------+\r     #1 row in set (0.00 sec)\r \r     #+-------------+---------------+-------------+\r     #| rows_locked | rows_modified | lock_memory |\r     #+-------------+---------------+-------------+\r     #|           0 |             0 |         376 |\r     #+-------------+---------------+-------------+\r \r     #Get InnoDB Compression Time\r     #mysql> SELECT SUM(compress_time) AS compress_time, SUM(uncompress_time) AS uncompress_time FROM information_schema.INNODB_CMP;\r     #+---------------+-----------------+\r     #| compress_time | uncompress_time |\r     #+---------------+-----------------+\r     #|             0 |               0 |\r     #+---------------+-----------------+\r     #1 row in set (0.00 sec)\r \r     #Get InnoDB Transaction states\r \r     #TRX_STATE  Transaction execution state. One of RUNNING, LOCK WAIT, ROLLING BACK or COMMITTING.\r \r     #mysql> SELECT LOWER(REPLACE(trx_state, \" \", \"_\")) AS state, count(*) AS cnt from information_schema.INNODB_TRX GROUP BY state;\r     #+---------+-----+\r     #| state   | cnt |\r     #+---------+-----+\r     #| running |   1 |\r     #+---------+-----+\r     #1 row in set (0.00 sec)\r \r     innodb_metric=$1\r \r     case $innodb_metric in\r        Innodb_rows_locked)\r                           value=$(echo \"SELECT SUM(trx_rows_locked) AS rows_locked, SUM(trx_rows_modified) AS rows_modified, SUM(trx_lock_memory_bytes) AS lock_memory FROM information_schema.INNODB_TRX;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N| awk '{print $1}')\r                           if [ \"$value\" == \"NULL\" ];then\r                              echo 0\r                           else\r                              echo $value\r                           fi\r                         ;;\r        Innodb_rows_modified)\r                           value=$(echo \"SELECT SUM(trx_rows_locked) AS rows_locked, SUM(trx_rows_modified) AS rows_modified, SUM(trx_lock_memory_bytes) AS lock_memory FROM information_schema.INNODB_TRX;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N| awk '{print $2}')\r                           if [ \"$value\" == \"NULL\" ];then\r                              echo 0\r                           else\r                              echo $value\r                           fi\r                         ;;\r        Innodb_trx_lock_memory)\r                           value=$(echo \"SELECT SUM(trx_rows_locked) AS rows_locked, SUM(trx_rows_modified) AS rows_modified, SUM(trx_lock_memory_bytes) AS lock_memory FROM information_schema.INNODB_TRX;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N| awk '{print $3}')\r                           if [ \"$value\" == \"NULL\" ];then\r                              echo 0\r                           else\r                              echo $value\r                           fi\r                         ;;\r           Innodb_compress_time)\r                           value=$(echo \"SELECT SUM(compress_time) AS compress_time, SUM(uncompress_time) AS uncompress_time FROM information_schema.INNODB_CMP;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|awk '{print $1}')\r                           echo $value\r                           ;;\r \r          Innodb_uncompress_time)\r                           value=$(echo \"SELECT SUM(compress_time) AS compress_time, SUM(uncompress_time) AS uncompress_time FROM information_schema.INNODB_CMP;\"|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|awk '{print $2}')\r                           echo $value\r                           ;;   \r              Innodb_trx_running)\r                              value=$(echo 'SELECT LOWER(REPLACE(trx_state, \" \", \"_\")) AS state, count(*) AS cnt from information_schema.INNODB_TRX GROUP BY state;'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep running|awk '{print $2}')\r                              if [ \"$value\" == \"\" ];then\r                                 echo 0\r                              else\r                                 echo $value\r                              fi\r                             ;;\r            Innodb_trx_lock_wait)\r                              value=$(echo 'SELECT LOWER(REPLACE(trx_state, \" \", \"_\")) AS state, count(*) AS cnt from information_schema.INNODB_TRX GROUP BY state;'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep lock_wait|awk '{print $2}')\r                              if [ \"$value\" == \"\" ];then\r                                 echo 0\r                              else\r                                 echo $value\r                              fi\r                             ;;\r         Innodb_trx_rolling_back)\r                              value=$(echo 'SELECT LOWER(REPLACE(trx_state, \" \", \"_\")) AS state, count(*) AS cnt from information_schema.INNODB_TRX GROUP BY state;'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep rolling_back|awk '{print $2}')\r                              if [ \"$value\" == \"\" ];then\r                                 echo 0\r                              else\r                                 echo $value\r                              fi\r                             ;;\r         Innodb_trx_committing)\r                              value=$(echo 'SELECT LOWER(REPLACE(trx_state, \" \", \"_\")) AS state, count(*) AS cnt from information_schema.INNODB_TRX GROUP BY state;'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep committing|awk '{print $2}')\r                              if [ \"$value\" == \"\" ];then\r                                 echo 0\r                              else\r                                 echo $value\r                              fi\r                             ;;\r      Innodb_trx_history_list_length)\r                              echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"History list length\"|awk '{print $4}'\r                             ;;\r         Innodb_last_checkpoint_at)\r                              echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"Last checkpoint at\"|awk '{print $4}'\r                             ;;\r \r        Innodb_log_sequence_number)\r                              echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"Log sequence number\"|awk '{print $4}'\r                             ;;\r         Innodb_log_flushed_up_to)\r                              echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"Log flushed up to\"|awk '{print $5}'\r                             ;;\r        Innodb_open_read_views_inside_innodb)\r                              echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"read views open inside InnoDB\"|awk '{print $1}'\r                             ;;\r             Innodb_queries_inside_innodb)\r                             echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"queries inside InnoDB\"|awk '{print $1}'\r                             ;;\r             Innodb_queries_in_queue)\r                             echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"queries in queue\"|awk '{print $5}'\r                             ;;\r             Innodb_hash_seaches)\r                             echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"hash searches\"|awk '{print $1}'\r                             ;;\r            Innodb_non_hash_searches)\r                             echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"non-hash searches/s\"|awk '{print $4}'\r                             ;;\r            Innodb_node_heap_buffers)\r                             echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"node heap\"|awk '{print $8}'\r                            ;;\r            Innodb_mutex_os_waits)\r                             echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"Mutex spin waits\"|awk '{print $9}'\r                            ;;\r            Innodb_mutex_spin_rounds)\r                             echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"Mutex spin waits\"|awk '{print $6}'|tr -d ','\r                            ;;\r            Innodb_mutex_spin_waits)\r                             echo 'show engine innodb status\\G'|mysql --defaults-file=/usr/local/zabbix/etc/.my.cnf -N|grep \"Mutex spin waits\"|awk '{print $4}'|tr -d ','\r                            ;; \r \r                        *)\r                         echo \"wrong parameter\"\r                         ;;\r \r     esac\r     ```\r \r 5. 设置执行权限和属主\r \r     ```\r     $sudo chmod 755 /usr/local/zabbix/bin/mysql_innodb_status.sh\r     $sudo chown zabbix:zabbix /usr/local/zabbix/bin/mysql_innodb_status.sh\r     ```\r \r 6. 可以去到 [zabbix 模板官网]( https://www.zabbix.org/wiki/Zabbix_Templates#Official_templates)下载相应的 mysql 模板并依据相关的指导完成 mysql 模板的导入和设置。步骤7-9是用从 zabbix community 社区找到的 mysql 模板所做的相关测试。模板放置在[链接](https://github.com/joey100/ZabbixTemplates)。下载此 mysql 模板，并关联到 mysql 主服务器。（注：此模板非官方提供，由社区贡献，如有顾虑，建议从官网下载 mysql 模板。）\r \r 7. 导入 mysql 模板 ，关联到 mysq l主服务器。\r \r     如果出现下面的问题\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/4.png)\r \r     在导入时不勾选 “Template Screens” ，如下图。然后点“import”\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/5.png)\r \r     当关联模板到mysql 主服务器时，选择如下\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/6.png)\r \r 8. 去到 mysql 主服务器，执行如下\r \r     ```\r     $sudo /etc/init.d/zabbix_agentd restart\r     ```\r \r 9. 现在您可以检查 mysql 状态了。打开 http://zabbix server ip/zabbix, 登录, 点击 “Monitoring” -- > “Graphs” -- > 选择 mysql 主服务器和一个想要查看的图形，比如 “MySQL Connections/Threads”\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/7.png)\r \r 现在设置主从复制监控. 步骤如下:\r \r 1. 在 mysql 从服务器上执行如下命令, 记住用 mysql 主服务器的真实 IP\r \r     $ mysql -uroot -p<password>\r     grant replication client on *.* to 'zabbix'@'mysql master ip' identified by 'zabbix';\r     flush privileges;\r     exit\r \r 2. 去到 mysql 主服务器，创建文件 /usr/local/zabbix/bin/check_mysql_replication.sh, 内容如下。记住用真实的从服务器的IP替代 mysqlslaveip\r \r     ```\r     #!/bin/bash\r     mysql -uzabbix -pzabbix -h mysqlslaveip -e 'show slave status\\G' |grep -E \"Slave_IO_Running|Slave_SQL_Running\"|awk '{print $2}'|grep -c Yes\r     ```\r \r 3. 设置权限和属主\r \r     ```\r     $sudo chmod 755 /usr/local/zabbix/bin/check_mysql_replication.sh\r     $sudo chown zabbix:zabbix /usr/local/zabbix/bin/check_mysql_replication.sh\r     ```\r \r 4. 编辑/usr/local/zabbix/etc/zabbix_agentd.conf, 在文件末尾添加下面内容\r \r     ```\r     UserParameter=mysql.replication,/usr/local/zabbix/bin/check_mysql_replication.sh\r     ```\r \r 5. 重启 zabbix agent 进程\r \r     ```\r     $sudo /etc/init.d/zabbix_agentd restart\r     ```\r \r 6. 打开网址 http://zabbix server ip/zabbix, 登录，为 mysql 主服务器添加监控项。点击 “Configuration” -- > “Hosts” -- > 点击mysql主服务器的’items’\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/8.png)\r \r 7. 点击 ‘Create item’ , 定义名字, 设置key为 ‘mysql.replication’, 点击“Save”\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/9.png)\r \r 8. 创建触发器. 定义触发器名, 选择 ‘check_mysql_replication’ 项目\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/10.png)\r \r 9. 设置表达式如下，然后点击 “Insert”\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/11.png)\r \r 10. 设置级别，然后点击 “Save”\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/12.png)\r \r 11. 验证。 在mysql从服务器上，stop slave, 然后看 zabbix 是否监控到了。可以看到确实监控到。\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/13.png)\r \r 12. 检查您的邮箱。收到邮件内容类似下图\r \r   ![](./media/open-source-azure-virtual-machines-linux-configure-zabbix-3/14.png)"}