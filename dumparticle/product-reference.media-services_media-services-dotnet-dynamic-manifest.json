{"Title":"使用 Azure 媒体服务 .NET SDK 创建筛选器","Description":"本主题介绍如何创建筛选器，以便客户端能够使用它们来流式传输流的特定部分。 媒体服务创建动态清单来存档此选择性流。","Content":"# <a name=\"creating-filters-with-azure-media-services-net-sdk\"></a>使用 Azure 媒体服务 .NET SDK 创建筛选器\r > [!div class=\"op_single_selector\"]\r > * [.NET](media-services-dotnet-dynamic-manifest.md)\r > * [REST](media-services-rest-dynamic-manifest.md)\r > \r > \r \r 从 2.11 版开始，媒体服务支持为资产定义筛选器。 这些筛选器是服务器端规则，可让客户选择运行如下操作：只播放一段视频（而非播放完整视频），或只指定客户设备可以处理的一部分音频和视频再现内容（而非与该资产相关的所有再现内容）。 通过按客户请求创建的动态清单可以实现对资产进行筛选，并基于指定的筛选器流式传输视频。\r \r 有关与筛选器和动态清单相关的更多详细信息，请参阅[动态清单概述](media-services-dynamic-manifest-overview.md)。\r \r 本主题介绍如何使用媒体服务 .NET SDK 创建、更新和删除筛选器。 \r \r 请注意，如果更新筛选器，流式处理终结点可能需要 2 分钟的时间来刷新规则。 如果内容是通过使用此筛选器提供的（并在代理和 CDN 缓存中缓存），则更新此筛选器会导致播放器失败。 建议在更新筛选器之后清除缓存。 如果此选项不可用，请考虑使用其他筛选器。 \r \r ## <a name=\"types-used-to-create-filters\"></a>用于创建筛选器的类型\r 创建筛选器时使用以下类型： \r \r * **IStreamingFilter**。  此类型基于以下 REST API [Filter](https://docs.microsoft.com/rest/api/media/operations/filter)\r * **IStreamingAssetFilter**。 此类型基于以下 REST API [AssetFilter](https://docs.microsoft.com/rest/api/media/operations/assetfilter)\r * PresentationTimeRange。 此类型基于以下 REST API [PresentationTimeRange](https://docs.microsoft.com/rest/api/media/operations/presentationtimerange)\r * FilterTrackSelectStatement 和 IFilterTrackPropertyCondition。 这些类型基于以下 REST API [FilterTrackSelect 和 FilterTrackPropertyCondition](https://docs.microsoft.com/rest/api/media/operations/filtertrackselect)\r \r ## <a name=\"createupdatereaddelete-global-filters\"></a>创建/更新/读取/删除全局筛选器\r 下面的代码演示如何使用 .NET 创建、更新、读取和删除资产筛选器。\r \r     string filterName = \"GlobalFilter_\" + Guid.NewGuid().ToString();\r \r     List<FilterTrackSelectStatement> filterTrackSelectStatements = new List<FilterTrackSelectStatement>();\r \r     FilterTrackSelectStatement filterTrackSelectStatement = new FilterTrackSelectStatement();\r     filterTrackSelectStatement.PropertyConditions = new List<IFilterTrackPropertyCondition>();\r     filterTrackSelectStatement.PropertyConditions.Add(new FilterTrackNameCondition(\"Track Name\", FilterTrackCompareOperator.NotEqual));\r     filterTrackSelectStatement.PropertyConditions.Add(new FilterTrackBitrateRangeCondition(new FilterTrackBitrateRange(0, 1), FilterTrackCompareOperator.NotEqual));\r     filterTrackSelectStatement.PropertyConditions.Add(new FilterTrackTypeCondition(FilterTrackType.Audio, FilterTrackCompareOperator.NotEqual));\r     filterTrackSelectStatements.Add(filterTrackSelectStatement);\r \r     // Create\r     IStreamingFilter filter = _context.Filters.Create(filterName, new PresentationTimeRange(), filterTrackSelectStatements);\r \r     // Update\r     filter.PresentationTimeRange = new PresentationTimeRange(timescale: 500);\r     filter.Update();\r \r     // Read\r     var filterUpdated = _context.Filters.FirstOrDefault();\r     Console.WriteLine(filterUpdated.Name);\r \r     // Delete\r     filter.Delete();\r \r \r ## <a name=\"createupdatereaddelete-asset-filters\"></a>创建/更新/读取/删除资产筛选器\r 下面的代码演示如何使用 .NET 创建、更新、读取和删除资产筛选器。\r \r     string assetName = \"AssetFilter_\" + Guid.NewGuid().ToString();\r     var asset = _context.Assets.Create(assetName, AssetCreationOptions.None);\r \r     string filterName = \"AssetFilter_\" + Guid.NewGuid().ToString();\r \r \r     // Create\r     IStreamingAssetFilter filter = asset.AssetFilters.Create(filterName,\r                                         new PresentationTimeRange(), \r                                         new List<FilterTrackSelectStatement>());\r \r     // Update\r     filter.PresentationTimeRange = \r             new PresentationTimeRange(start: 6000000000, end: 72000000000);\r \r     filter.Update();\r \r     // Read\r     asset = _context.Assets.Where(c => c.Id == asset.Id).FirstOrDefault();\r     var filterUpdated = asset.AssetFilters.FirstOrDefault();\r     Console.WriteLine(filterUpdated.Name);\r \r     // Delete\r     filterUpdated.Delete();\r \r \r \r \r ## <a name=\"build-streaming-urls-that-use-filters\"></a>生成使用筛选器的流式处理 URL\r 有关如何发布和传送资产的信息，请参阅[将内容传送到客户概述](media-services-deliver-content-overview.md)。\r \r 以下示例演示了如何将筛选器添加到流式处理 URL。\r \r **MPEG DASH** \r \r ```\r http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=mpd-time-csf, filter=MyFilter)\r ```\r \r **Apple HTTP Live Streaming (HLS) V4**\r \r ```\r http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=m3u8-aapl, filter=MyFilter)\r ```\r \r **Apple HTTP Live Streaming (HLS) V3**\r \r ```\r http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=m3u8-aapl-v3, filter=MyFilter)\r ```\r \r **平滑流**\r \r ```\r http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(filter=MyFilter)\r ```\r \r **HDS**\r \r ```\r http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=f4m-f4f, filter=MyFilter)\r ```\r \r ## <a name=\"see-also\"></a>另请参阅 \r \r [动态清单概述](./media-services-dynamic-manifest-overview.md)"}