{"Title":"Service Fabric 群集Resource Manager - 应用程序组","Description":"概述 Service Fabric 群集 Resource Manager 中的应用程序组功能","Content":"# <a name=\"introduction-to-application-groups\"></a>应用程序组简介\r Service Fabric 的群集 Resource Manager 通常通过将负载（通过[指标](service-fabric-cluster-resource-manager-metrics.md)表示）平均分散到整个群集来管理群集资源。 Service Fabric 管理群集中节点的容量，并通过[容量](service-fabric-cluster-resource-manager-cluster-description.md)管理整个群集。 指标和容量非常适用于许多种工作负荷，但大量使用不同 Service Fabric 应用程序实例的模式有时还有其他要求。 例如，如果想要：\r \r - 为某些命名应用程序实例内的服务保留群集节点上的某些容量\r - 限制在其上运行命名应用程序实例内的服务的节点总数，而不是分散到整个群集上\r - 定义命名应用程序实例本身的容量，限制其中的服务数量或服务的资源总消耗量\r \r 为了满足这些要求，Service Fabric 群集资源管理器支持名为应用程序组的功能。\r \r ## <a name=\"limiting-the-maximum-number-of-nodes\"></a>限制最大节点数\r 应用程序容量的最简单用例出现在需要将应用程序实例限制为特定的最大节点数时。 这样会将该应用程序实例中的所有服务整合到一定数量的计算机上。 尝试预测该命名应用程序实例内的服务所使用的物理资源或设置其上限时，整合会非常有用。 \r \r 下图显示已定义和未定义最大节点数的应用程序实例：\r \r <center>\r ![定义最大节点数的应用程序实例][Image1]\r </center>\r \r 在左侧的示例中，应用程序未定义最大节点数，并且有三个服务。 群集资源管理器已将所有副本分散到六个可用节点，从而在群集中实现最佳均衡（默认行为）。 在右侧示例中，可以看到限制在 3 个节点上的同一应用程序。\r \r 控制此行为的参数称为 MaximumNodes。可在创建应用程序期间设置此参数，或针对已运行的应用程序实例更新此参数。\r \r Powershell\r \r ```posh\r New-ServiceFabricApplication -ApplicationName fabric:/AppName -ApplicationTypeName AppType1 -ApplicationTypeVersion 1.0.0.0 -MaximumNodes 3\r Update-ServiceFabricApplication -Name fabric:/AppName -MaximumNodes 5\r ```\r \r C#\r \r ```csharp\r ApplicationDescription ad = new ApplicationDescription();\r ad.ApplicationName = new Uri(\"fabric:/AppName\");\r ad.ApplicationTypeName = \"AppType1\";\r ad.ApplicationTypeVersion = \"1.0.0.0\";\r ad.MaximumNodes = 3;\r await fc.ApplicationManager.CreateApplicationAsync(ad);\r \r ApplicationUpdateDescription adUpdate = new ApplicationUpdateDescription(new Uri(\"fabric:/AppName\"));\r adUpdate.MaximumNodes = 5;\r await fc.ApplicationManager.UpdateApplicationAsync(adUpdate);\r \r ```\r \r 在节点集中，群集资源管理器并不能保证会将哪些服务对象放在一起或者会使用哪些节点。\r \r ## <a name=\"application-metrics-load-and-capacity\"></a>应用程序指标、负载和容量\r 利用应用程序组，还可以定义与给定命名应用程序实例关联的指标，以及该应用程序实例在这些指标上拥有的容量。 利用应用程序指标，可以跟踪、保留和限制该应用程序实例中服务的资源消耗量。\r \r 对于每个应用程序指标，可设置 2 个值：\r \r - **应用程序总容量** - 此设置代表特定指标的应用程序总容量。 群集 Resource Manager 不允许在此应用程序实例中创建任何新服务，这会造成总负载超出此值。 例如，假设应用程序实例的容量为 10，已有负载为 5。 不允许创建总默认负载为 10 的服务。\r - **最大节点容量** – 此设置指定单个节点上应用程序的最大总负载。 如果负载超过此容量，则群集资源管理器会将副本移到其他节点，降低负载。\r \r Powershell：\r \r ``` posh\r New-ServiceFabricApplication -ApplicationName fabric:/AppName -ApplicationTypeName AppType1 -ApplicationTypeVersion 1.0.0.0 -Metrics @(\"MetricName:Metric1,MaximumNodeCapacity:100,MaximumApplicationCapacity:1000\")\r ```\r \r C#：\r \r ``` csharp\r ApplicationDescription ad = new ApplicationDescription();\r ad.ApplicationName = new Uri(\"fabric:/AppName\");\r ad.ApplicationTypeName = \"AppType1\";\r ad.ApplicationTypeVersion = \"1.0.0.0\";\r \r var appMetric = new ApplicationMetricDescription();\r appMetric.Name = \"Metric1\";\r appMetric.TotalApplicationCapacity = 1000;\r appMetric.MaximumNodeCapacity = 100;\r ad.Metrics.Add(appMetric);\r await fc.ApplicationManager.CreateApplicationAsync(ad);\r ```\r \r ## <a name=\"reserving-capacity\"></a>保留容量\r 应用程序组的另一个常见用途是确保针对给定应用程序实例保留群集中的资源。 创建应用程序实例时，会始终保留空间。\r \r 即使出现以下情况，也会在群集中立即为应用程序保留空间：\r - 应用程序实例已创建，但其中尚不具有任何服务\r - 应用程序实例中的服务数每次都会发生更改 \r - 服务存在，但不会消耗资源 \r \r 为应用程序实例保留资源需要指定两个附加参数：*MinimumNodes* 和 *NodeReservationCapacity*\r \r - **MinimumNodes** - 定义应用程序实例应在其上运行的最小节点数。  \r - **NodeReservationCapacity** - 此设置是应用程序的各项指标。 应用程序中的服务在节点上运行，该值是为该节点上的该应用程序保留的该指标的量。\r \r 结合使用 **MinimumNodes** 和 **NodeReservationCapacity** 可以保证为群集中的应用程序保留最小负载。 如果群集中存在的剩余容量比所需要的总保留容量小，则无法创建应用程序。 \r \r 让我们看看容量保留的示例：\r \r <center>\r ![定义保留容量的应用程序实例][Image2]\r </center>\r \r 在左侧的示例中，应用程序中未定义任何应用程序容量。 群集 Resource Manager 根据一般规则平衡所有内容。\r \r 在右侧的示例中，假设 Application1 是使用以下设置创建的：\r \r - MinimumNodes 设置为 2\r - 应用程序指标定义为\r   - NodeReservationCapacity 为 20\r \r Powershell\r \r  ``` posh\r  New-ServiceFabricApplication -ApplicationName fabric:/AppName -ApplicationTypeName AppType1 -ApplicationTypeVersion 1.0.0.0 -MinimumNodes 2 -Metrics @(\"MetricName:Metric1,NodeReservationCapacity:20\")\r  ```\r \r C#\r \r  ``` csharp\r ApplicationDescription ad = new ApplicationDescription();\r ad.ApplicationName = new Uri(\"fabric:/AppName\");\r ad.ApplicationTypeName = \"AppType1\";\r ad.ApplicationTypeVersion = \"1.0.0.0\";\r ad.MinimumNodes = 2;\r \r var appMetric = new ApplicationMetricDescription();\r appMetric.Name = \"Metric1\";\r appMetric.NodeReservationCapacity = 20;\r \r ad.Metrics.Add(appMetric);\r \r await fc.ApplicationManager.CreateApplicationAsync(ad);\r ```\r \r Service Fabric 为 Application1 保留两个节点上的容量，并不允许 Application2 的服务使用该容量，即使此时 Application1 中的服务唯有消耗负载。 我们认为这些保留的应用程序容量是根据该节点上和群集中的剩余容量消耗和计算的。  可以立即从剩余的群集容量中扣除保留容量，但是仅当特定节点上至少放置一个服务对象时，才从该节点的容量扣除保留的消耗量。 后种保留允许更好地灵活利用资源，因为必要时仅在节点上保留资源。\r \r ## <a name=\"obtaining-the-application-load-information\"></a>获取应用程序负载信息\r 对于每个应用程序，如果具有为一个或多个指标定义的应用程序容量，可以获取其服务的副本报告的聚合负载的相关信息。\r \r Powershell：\r \r ``` posh\r Get-ServiceFabricApplicationLoad -ApplicationName fabric:/MyApplication1\r ```\r \r C#\r \r ``` csharp\r var v = await fc.QueryManager.GetApplicationLoadInformationAsync(\"fabric:/MyApplication1\");\r var metrics = v.ApplicationLoadMetricInformation;\r foreach (ApplicationLoadMetricInformation metric in metrics)\r {\r     Console.WriteLine(metric.ApplicationCapacity);  //total capacity for this metric in this application instance\r     Console.WriteLine(metric.ReservationCapacity);  //reserved capacity for this metric in this application instance\r     Console.WriteLine(metric.ApplicationLoad);  //current load for this metric in this application instance\r }\r ```\r \r ApplicationLoad 查询返回针对应用程序所指定应用程序容量的基本信息。 此信息包括最小节点数和最大节点数信息，以及应用程序当前使用的节点数。 还包括有关每个应用程序负载指标的信息，包括：\r \r * 指标名称：指标的名称。\r * 保留容量：在群集中为此应用程序保留的群集容量。\r * 应用程序负载：此应用程序的子副本的总负载。\r * 应用程序容量：允许的最大应用程序负载值。\r \r ## <a name=\"removing-application-capacity\"></a>删除应用程序容量\r 为应用程序设置应用程序容量参数后，可以使用更新应用程序 API 或 PowerShell cmdlet 来删除这些参数。 例如：\r \r ``` posh\r Update-ServiceFabricApplication -Name fabric:/MyApplication1 -RemoveApplicationCapacity\r \r ```\r \r 此命令从应用程序实例中删除所有应用程序容量管理参数。 其中包括 MinimumNodes、MaximumNodes 和应用程序的指标（如果有）。 该命令立即生效。 此命令完成后，群集资源管理器会使用默认行为管理应用程序。 可以通过 `Update-ServiceFabricApplication`/`System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync()` 再次指定应用程序容量参数。\r \r ### <a name=\"restrictions-on-application-capacity\"></a>应用程序容量的限制\r 必须遵守应用程序容量参数的几项限制。 如果存在验证错误，则不会发生任何更改。\r \r - 所有整数参数必须为非负数。\r - MinimumNodes 不得大于 MaximumNodes。\r - 如果已定义负载指标的容量，则这些容量必须遵守以下规则：\r   - 节点保留容量不得大于最大节点容量。 例如，不能将节点上指标“CPU”的容量限制为 2 个单位，也不能尝试在每个节点上保留 3 个单位。\r   - 如果已指定 MaximumNodes，则 MaximumNodes 和最大节点容量的积不得大于应用程序容量总计。 例如，如果将负载指标“CPU”的最大节点容量设置为 8， 将最大节点数设置为 10。 在这种情况下，此负载指标的应用程序容量总计必须大于 80。\r \r 在创建和更新应用程序的过程中，都会强制限制。\r \r ## <a name=\"how-not-to-use-application-capacity\"></a>在哪些情况下不应使用应用程序容量\r - 不要尝试使用应用程序组功能将应用程序限制在特定节点子集。 换言之，可以指定应用程序最多在 5 个节点上运行，但不能指定群集中特定的 5 个节点。 可使用服务放置约束完成将应用程序限制在特定节点。\r - 不要尝试通过使用应用程序容量确保将同一应用程序中的两个服务放在同一节点上。 改用[关联](service-fabric-cluster-resource-manager-advanced-placement-rules-affinity.md)或[放置约束](service-fabric-cluster-resource-manager-cluster-description.md#node-properties-and-placement-constraints)。\r \r ## <a name=\"next-steps\"></a>后续步骤\r - 有关配置服务的详细信息，请参阅[了解如何配置服务](service-fabric-cluster-resource-manager-configure-services.md)\r - 若要了解群集 Resource Manager 如何管理和均衡群集中的负载，请查看有关[均衡负载](service-fabric-cluster-resource-manager-balancing.md)的文章\r - 从头开始并[获取 Service Fabric 群集 Resource Manager 简介](service-fabric-cluster-resource-manager-introduction.md)\r - 有关在一般情况下指标的工作原理的详细信息，请参阅 [Service Fabric 负载指标](service-fabric-cluster-resource-manager-metrics.md)\r - 群集 Resource Manager 提供许多用于描述群集的选项。 若要详细了解这些选项，请查看这篇[描述 Service Fabric 群集](service-fabric-cluster-resource-manager-cluster-description.md)的文章\r \r [Image1]:./media/service-fabric-cluster-resource-manager-application-groups/application-groups-max-nodes.png\r [Image2]:./media/service-fabric-cluster-resource-manager-application-groups/application-groups-reserved-capacity.png\r \r <!--Update_Description: wording update-->"}