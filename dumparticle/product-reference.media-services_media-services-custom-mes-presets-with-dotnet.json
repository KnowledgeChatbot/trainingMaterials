{"Title":"自定义 Media Encoder Standard 预设","Description":"本主题说明如何通过自定义 Media Encoder Standard 任务预设执行高级编码。 本主题说明如何使用媒体服务 .NET SDK 创建编码任务和作业。 此外，还说明如何向编码作业提供自定义预设。","Content":"# <a name=\"customizing-media-encoder-standard-presets\"></a>自定义 Media Encoder Standard 预设\r \r ## <a name=\"overview\"></a>概述\r \r 本主题演示如何通过使用自定义预设的 Media Encoder Standard (MES) 执行高级编码。 本主题使用 .NET 创建编码任务和执行此任务的作业。  \r \r 本主题介绍如何使用 [H264 多比特率 720p](media-services-mes-preset-H264-Multiple-Bitrate-720p.md) 预设和减少层数来进行自定义预设。 [自定义 Media Encoder Standard 预设](media-services-advanced-encoding-with-mes.md)主题演示了可用于执行高级编码任务的自定义预设。\r \r ## <a id=\"customizing_presets\"></a> 自定义 MES 预设\r \r ### <a name=\"original-preset\"></a>原始预设\r \r 将 [H264 多比特率 720p](media-services-mes-preset-H264-Multiple-Bitrate-720p.md) 主题中定义的 JSON 保存到某个具有 .json 扩展名的文件。 例如，CustomPreset_JSON.json。\r \r ### <a name=\"customized-preset\"></a>自定义的预设\r \r 打开“CustomPreset_JSON.json”文件，删除“H264Layers” 中的前三层，使文件如下所示。\r \r     \r     {  \r       \"Version\": 1.0,  \r       \"Codecs\": [  \r         {  \r           \"KeyFrameInterval\": \"00:00:02\",  \r           \"H264Layers\": [  \r             {  \r               \"Profile\": \"Auto\",  \r               \"Level\": \"auto\",  \r               \"Bitrate\": 1000,  \r               \"MaxBitrate\": 1000,  \r               \"BufferWindow\": \"00:00:05\",  \r               \"Width\": 640,  \r               \"Height\": 360,  \r               \"BFrames\": 3,  \r               \"ReferenceFrames\": 3,  \r               \"AdaptiveBFrame\": true,  \r               \"Type\": \"H264Layer\",  \r               \"FrameRate\": \"0/1\"  \r             },  \r             {  \r               \"Profile\": \"Auto\",  \r               \"Level\": \"auto\",  \r               \"Bitrate\": 650,  \r               \"MaxBitrate\": 650,  \r               \"BufferWindow\": \"00:00:05\",  \r               \"Width\": 640,  \r               \"Height\": 360,  \r               \"BFrames\": 3,  \r               \"ReferenceFrames\": 3,  \r               \"AdaptiveBFrame\": true,  \r               \"Type\": \"H264Layer\",  \r               \"FrameRate\": \"0/1\"  \r             },  \r             {  \r               \"Profile\": \"Auto\",  \r               \"Level\": \"auto\",  \r               \"Bitrate\": 400,  \r               \"MaxBitrate\": 400,  \r               \"BufferWindow\": \"00:00:05\",  \r               \"Width\": 320,  \r               \"Height\": 180,  \r               \"BFrames\": 3,  \r               \"ReferenceFrames\": 3,  \r               \"AdaptiveBFrame\": true,  \r               \"Type\": \"H264Layer\",  \r               \"FrameRate\": \"0/1\"  \r             }  \r           ],  \r           \"Type\": \"H264Video\"  \r         },  \r         {  \r           \"Profile\": \"AACLC\",  \r           \"Channels\": 2,  \r           \"SamplingRate\": 48000,  \r           \"Bitrate\": 128,  \r           \"Type\": \"AACAudio\"  \r         }  \r       ],  \r       \"Outputs\": [  \r         {  \r           \"FileName\": \"{Basename}_{Width}x{Height}_{VideoBitrate}.mp4\",  \r           \"Format\": {  \r             \"Type\": \"MP4Format\"  \r           }  \r         }  \r       ]  \r     }  \r     \r \r ## <a id=\"encoding_with_dotnet\"></a>使用媒体服务 .NET SDK 进行编码\r \r 以下代码示例使用媒体服务 .NET SDK 执行下列任务：\r \r - 创建编码作业。\r - 获取对 Media Encoder Standard 编码器的引用。\r - 加载前面部分中创建的自定义 JSON 预设。\r \r     ```.net\r     // Load the JSON from the local file.\r     string configuration = File.ReadAllText(fileName);\r     ```\r \r - 将编码任务添加到作业。\r - 指定要编码的输入资产。\r - 创建要包含所编码资产的输出资产。\r - 添加事件处理程序以检查作业进度。\r - 提交作业。\r    \r #### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r \r 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r \r #### <a name=\"example\"></a>示例   \r \r     using System;\r     using System.Configuration;\r     using System.IO;\r     using System.Linq;\r     using Microsoft.WindowsAzure.MediaServices.Client;\r     using System.Threading;\r \r     namespace CustomizeMESPresests\r     {\r         class Program\r         {\r         // Read values from the App.config file.\r         private static readonly string _AADTenantDomain =\r         ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r         private static readonly string _RESTAPIEndpoint =\r         ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r         // Field for service context.\r         private static CloudMediaContext _context = null;\r \r         private static readonly string _mediaFiles =\r             Path.GetFullPath(@\"../..\\Media\");\r \r         private static readonly string _singleMP4File =\r             Path.Combine(_mediaFiles, @\"BigBuckBunny.mp4\");\r \r         static void Main(string[] args)\r         {\r             var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r             var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r             _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r             // Get an uploaded asset.\r             var asset = _context.Assets.FirstOrDefault();\r \r             // Encode and generate the output using custom presets.\r             EncodeToAdaptiveBitrateMP4Set(asset);\r \r             Console.ReadLine();\r         }\r \r         static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\r         {\r             // Declare a new job.\r             IJob job = _context.Jobs.Create(\"Media Encoder Standard Job\");\r             // Get a media processor reference, and pass to it the name of the \r             // processor to use for the specific task.\r             IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\r \r             // Load the XML (or JSON) from the local file.\r             string configuration = File.ReadAllText(\"CustomPreset_JSON.json\");\r \r             // Create a task\r             ITask task = job.Tasks.AddNew(\"Media Encoder Standard encoding task\",\r             processor,\r             configuration,\r             TaskOptions.None);\r \r             // Specify the input asset to be encoded.\r             task.InputAssets.Add(asset);\r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is not encrypted. \r             task.OutputAssets.AddNew(\"Output asset\",\r             AssetCreationOptions.None);\r \r             job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\r             job.Submit();\r             job.GetExecutionProgressTask(CancellationToken.None).Wait();\r \r             return job.OutputMediaAssets[0];\r         }\r \r         private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\r         {\r             Console.WriteLine(\"Job state changed event:\");\r             Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r             Console.WriteLine(\"  Current state: \" + e.CurrentState);\r             switch (e.CurrentState)\r             {\r             case JobState.Finished:\r                 Console.WriteLine();\r                 Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\r                 break;\r             case JobState.Canceling:\r             case JobState.Queued:\r             case JobState.Scheduled:\r             case JobState.Processing:\r                 Console.WriteLine(\"Please wait...\\n\");\r                 break;\r             case JobState.Canceled:\r             case JobState.Error:\r \r                 // Cast sender as a job.\r                 IJob job = (IJob)sender;\r \r                 // Display or log error details as needed.\r                 break;\r             default:\r                 break;\r             }\r         }\r \r         private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r         {\r             var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\r             ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\r \r             if (processor == null)\r             throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\r \r             return processor;\r         }\r \r         }\r     }\r \r ## <a name=\"see-also\"></a>另请参阅\r [媒体服务编码概述](media-services-encode-asset.md)\r \r <!--Update_Description: update code to use AAD token instead of ACS-->"}