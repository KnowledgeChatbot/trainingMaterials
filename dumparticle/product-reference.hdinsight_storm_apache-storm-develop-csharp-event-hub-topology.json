{"Title":"使用 Storm 处理来自事件中心的事件 - Azure HDInsight","Description":"了解如何使用在 Visual Studio 中通过用于 Visual Studio 的 HDInsight 工具创建的 C# Storm 拓扑处理来自 Azure 事件中心的数据。","Content":"# <a name=\"process-events-from-azure-event-hubs-with-storm-on-hdinsight-c\"></a>使用 Storm on HDInsight 处理来自 Azure 事件中心的事件 (C#)\r \r [!INCLUDE [azure-sdk-developer-differences](../../../includes/azure-sdk-developer-differences.md)]\r \r \r [!INCLUDE [azure-visual-studio-login-guide](../../../includes/azure-visual-studio-login-guide.md)] 了解如何从 Apache Storm on HDInsight 使用 Azure 事件中心。 本文档使用 C# Storm 拓扑对事件中心读取和写入数据\r \r > [!NOTE]\r > 如需此项目的 Java 版，请参阅[使用 Storm on HDInsight 从 Azure 事件中心处理事件 (Java)](https://azure.microsoft.com/resources/samples/hdinsight-java-storm-eventhub/)。\r \r ## <a name=\"scpnet\"></a>SCP.NET\r \r 本文档中的步骤使用 SCP.NET，后者是一个 NuGet 包，方便用户创建适用于 Storm on HDInsight 的 C# 拓扑和组件。\r \r > [!IMPORTANT]\r > 虽然本文档中的步骤依赖于带 Visual Studio 的 Windows 开发环境，但是也可将编译的项目提交到使用 Linux 的 Storm on HDInsight 群集。 仅 2016 年 10 月 28 日之后创建的基于 Linux 的群集支持 SCP.NET 拓扑。\r \r HDInsight 3.4 及更高版本使用 Mono 运行 C# 拓扑。 本文档中使用的示例适用于 HDInsight 3.6。 如果你计划为 HDInsight 创建自己的 .NET 解决方案，请查看 [Mono 兼容性](http://www.mono-project.com/docs/about-mono/compatibility/)文档了解可能的不兼容性。\r \r > [!WARNING]\r > 如果你在构建使用 SCP.NET 版本 1.0.0.x 的项目时遇到问题，请联系 Microsoft 支持部门以寻求帮助。\r \r ### <a name=\"cluster-versioning\"></a>群集版本控制\r \r 用于项目的 Microsoft.SCP.Net.SDK NuGet 包必须与安装在 HDInsight 上的 Storm 的主要版本匹配。 HDInsight 版本 3.5 和 3.6 使用 Storm 1.x，因此必须对这些群集使用 SCP.NET 版本 1.0.x.x。\r \r [!INCLUDE [hdinsight-linux-acn-version.md](../../../includes/hdinsight-linux-acn-version.md)]\r \r > [!IMPORTANT]\r > 本文档中的示例需要 HDInsight 3.5 或 3.6 群集。\r >\r > Linux 是 HDInsight 3.4 或更高版本上使用的唯一操作系统。 有关详细信息，请参阅 [HDInsight 在 Windows 上停用](../hdinsight-component-versioning.md#hdinsight-windows-retirement)。\r \r C# 拓扑还必须针对 .NET 4.5 运行。\r \r ## <a name=\"how-to-work-with-event-hubs\"></a>如何使用事件中心\r \r Microsoft 提供一组 Java 组件用于与 Storm 拓扑中的事件中心通信。 可以在 [https://github.com/hdinsight/mvn-repo/raw/master/org/apache/storm/storm-eventhubs/1.1.0.1/storm-eventhubs-1.1.0.1.jar](https://github.com/hdinsight/mvn-repo/raw/master/org/apache/storm/storm-eventhubs/1.1.0.1/storm-eventhubs-1.1.0.1.jar) 找到包含这些组件的 HDInsight 3.6 兼容版本的 Java 存档 (JAR) 文件。\r \r > [!IMPORTANT]\r > 虽然组件是以 Java 编写的，但可通过 C# 拓扑轻松使用它们。\r \r 本示例使用以下组件：\r \r * __EventHubSpout__：从事件中心读取数据。\r * __EventHubBolt__：将数据写入事件中心。\r * __EventHubSpoutConfig__：用于配置 EventHubSpout。\r * __EventHubBoltConfig__：用于配置 EventHubBolt。\r \r ### <a name=\"example-spout-usage\"></a>Spout 用法示例\r \r SCP.NET 提供将 EventHubSpout 添加到拓扑的方法。 与使用泛型方法添加 Java 组件相比，这些方法可以更轻松地添加 Spout。 以下示例演示了如何使用 SCP.NET 所提供的 __SetEventHubSpout__ 和 **EventHubSpoutConfig** 方法创建 Spout：\r \r ```csharp\r topologyBuilder.SetEventHubSpout(\r     \"EventHubSpout\",\r     new EventHubSpoutConfig(\r         ConfigurationManager.AppSettings[\"EventHubSharedAccessKeyName\"],\r         ConfigurationManager.AppSettings[\"EventHubSharedAccessKey\"],\r         ConfigurationManager.AppSettings[\"EventHubNamespace\"],\r         ConfigurationManager.AppSettings[\"EventHubEntityPath\"],\r         eventHubPartitions),\r     eventHubPartitions);\r ```\r \r 上面的示例创建了名为 __EventHubSpout__ 的全新 Spout 组件，并将其配置为与事件中心通信。 组件的并行度提示设置为事件中心的分区数。 使用此设置，Storm 可为每个分区创建一个组件实例。\r \r ### <a name=\"example-bolt-usage\"></a>Bolt 用法示例\r \r 使用 **JavaComponmentConstructor** 方法创建 Bolt 的实例。 以下示例演示如何创建和配置 **EventHubBolt** 的新实例：\r \r ```csharp\r // Java construcvtor for the Event Hub Bolt\r JavaComponentConstructor constructor = JavaComponentConstructor.CreateFromClojureExpr(\r     String.Format(@\"(org.apache.storm.eventhubs.bolt.EventHubBolt. (org.apache.storm.eventhubs.bolt.EventHubBoltConfig. \" +\r         @\"\"\"{0}\"\" \"\"{1}\"\" \"\"{2}\"\" \"\"{3}\"\" \"\"{4}\"\" {5}))\",\r         ConfigurationManager.AppSettings[\"EventHubPolicyName\"],\r         ConfigurationManager.AppSettings[\"EventHubPolicyKey\"],\r         ConfigurationManager.AppSettings[\"EventHubNamespace\"],\r         \"servicebus.chinacloudapi.cn\",\r         ConfigurationManager.AppSettings[\"EventHubName\"],\r         \"true\"));\r \r // Set the bolt to subscribe to data from the spout\r topologyBuilder.SetJavaBolt(\r     \"eventhubbolt\",\r     constructor,\r     partitionCount)\r         .shuffleGrouping(\"Spout\");\r ```\r \r > [!NOTE]\r > 本示例使用以字符串形式传递的 Clojure 表达式，而不是像 Spout 示例那样使用 **JavaComponentConstructor** 创建 **EventHubBoltConfig**。 上述任一方法均有效。 使用最适合方法。\r \r ## <a name=\"download-the-completed-project\"></a>下载已完成的项目\r \r 可以从 [GitHub](https://github.com/Azure-Samples/hdinsight-dotnet-java-storm-eventhub) 下载本教程中创建的项目的完整版本。 但是，仍然需要按照本教程中的步骤提供配置设置。\r \r ### <a name=\"prerequisites\"></a>先决条件\r \r * [Apache Storm on HDInsight 3.5 或 3.6 版群集](apache-storm-tutorial-get-started-linux.md)。\r \r     > [!WARNING]\r     > 本文档中使用的示例需要 Storm on HDInsight 3.5 或 3.6 版。 由于重大类名更改，此示例不适用于旧版 HDInsight。 如需此示例的适用于旧式群集的版本，请参阅 [GitHub](https://github.com/Azure-Samples/hdinsight-dotnet-java-storm-eventhub/releases)。\r \r * 一个 [Azure 事件中心](../../event-hubs/event-hubs-create.md)。\r \r * [Azure .NET SDK](/downloads/)。\r \r * [用于 Visual Studio 的 HDInsight 工具](../hadoop/apache-hadoop-visual-studio-tools-get-started.md)。\r \r * Java JDK 1.8 或更高版本，适用于开发环境。 [Oracle](http://www.oracle.com/technetwork/java/javase/downloads/index.html) 提供了 JDK 下载内容。\r \r   * **JAVA_HOME** 环境变量必须指向包含 Java 的目录。\r   * 路径中必须包含 **%JAVA_HOME%/bin** 目录。\r \r ## <a name=\"download-the-event-hubs-components\"></a>下载事件中心组件\r \r 从 [https://github.com/hdinsight/mvn-repo/raw/master/org/apache/storm/storm-eventhubs/1.1.0.1/storm-eventhubs-1.1.0.1.jar](https://github.com/hdinsight/mvn-repo/raw/master/org/apache/storm/storm-eventhubs/1.1.0.1/storm-eventhubs-1.1.0.1.jar) 下载事件中心 Spout 和 Bolt 组件。\r \r 创建一个名为 `eventhubspout` 的目录，并将文件保存到该目录中。\r \r ## <a name=\"configure-event-hubs\"></a>配置事件中心\r \r 事件中心是此示例的数据源。 使用[事件中心入门](../../event-hubs/event-hubs-create.md)的“创建事件中心”部分中的信息。\r \r 1. 创建事件中心后，在 Azure 门户中查看 EventHub 边栏选项卡，选择“共享访问策略”。 选择“+ 添加”添加以下策略： \r \r    | 名称 | 权限 |\r    | --- | --- |\r    | writer |发送 |\r    | reader |侦听 |\r \r     ![共享访问策略窗口的屏幕截图](./media/apache-storm-develop-csharp-event-hub-topology/sas.png)\r \r 2. 选择“读取者”和“写入者”策略。 复制并保存两个策略的主密钥值，因为稍后将使用这些值。\r \r ## <a name=\"configure-the-eventhubwriter\"></a>配置 EventHubWriter\r \r 1. 如果尚未安装最新版本的用于 Visual Studio 的 HDInsight 工具，请参阅[开始使用用于 Visual Studio 的 HDInsight 工具](../hadoop/apache-hadoop-visual-studio-tools-get-started.md)。\r \r 2. 从 [eventhub-storm-hybrid](https://github.com/Azure-Samples/hdinsight-dotnet-java-storm-eventhub)下载解决方案。\r \r 3. 在 **EventHubWriter** 项目中，打开 **App.config** 文件。 使用此前配置的事件中心提供的信息，填充以下项的值：\r \r    | 键 | 值 |\r    | --- | --- |\r    | EventHubPolicyName |写入者（如果对具有“发送”权限的策略使用不同名称，则改用它。） |\r    | EventHubPolicyKey |写入者策略的键。 |\r    | EventHubNamespace |包含事件中心的命名空间。 |\r    | EventHubName |事件中心名称。 |\r    | EventHubPartitionCount |事件中心的分区数。 |\r \r 4. 保存并关闭 **App.config** 文件。\r \r ## <a name=\"configure-the-eventhubreader\"></a>配置 EventHubReader\r \r 1. 打开 **EventHubReader** 项目。\r \r 2. 打开 **EventHubReader** 的 **App.config** 文件。 使用此前配置的事件中心提供的信息，填充以下项的值：\r \r    | 键 | 值 |\r    | --- | --- |\r    | EventHubPolicyName |读取者（如果对具有“侦听”权限的策略使用不同名称，则改用它。） |\r    | EventHubPolicyKey |读取者策略的键。 |\r    | EventHubNamespace |包含事件中心的命名空间。 |\r    | EventHubName |事件中心名称。 |\r    | EventHubPartitionCount |事件中心的分区数。 |\r \r 3. 保存并关闭 **App.config** 文件。\r \r ## <a name=\"deploy-the-topologies\"></a>部署拓扑\r \r 1. 在“解决方案资源管理器”中，右键单击 **EventHubReader** 项目，然后选择“提交到 Storm on HDInsight”。\r \r     ![解决方案资源管理器的屏幕截图，其中突出显示了“提交到 Storm on HDInsight”](./media/apache-storm-develop-csharp-event-hub-topology/submittostorm.png)\r \r 2. 在“提交拓扑”对话框中，选择“Storm 群集”。 展开“其他配置”，选择“Java 文件路径”，选择“...”，然后选择前面下载的 JAR 文件所在的目录。 最后，单击“提交”。\r \r     ![“提交拓扑”对话框的屏幕截图](./media/apache-storm-develop-csharp-event-hub-topology/submit.png)\r \r 3. 提交拓扑之后，将会出现“Storm 拓扑查看器”。 **EventHubReader** 拓扑。\r \r     ![“Storm 拓扑查看器”的屏幕截图](./media/apache-storm-develop-csharp-event-hub-topology/topologyviewer.png)\r \r 4. 在“解决方案资源管理器”中，右键单击 **EventHubWriter** 项目，然后选择“提交到 Storm on HDInsight”。\r \r 5. 在“提交拓扑”对话框中，选择“Storm 群集”。 展开“其他配置”，选择“Java 文件路径”，选择“...”，然后选择前面下载的 JAR 文件所在的目录。 最后，单击“提交”。\r \r 6. 提交拓扑之后，在“Storm 拓扑查看器”中刷新拓扑列表以验证这两个拓扑是否正在群集上运行。\r \r 7. 在“Storm 拓扑查看器”中，选择 **EventHubReader** 拓扑。\r \r 8. 若要打开 Bolt 的组件摘要，请双击图表中的“LogBolt”组件。\r \r 9. 在“执行器”部分，选择“端口”列中的链接之一。 这将显示由组件记录的信息。 记录的信息类似于以下文本：\r \r         2017-03-02 14:51:29.255 m.s.p.TaskHost [INFO] Received C# STDOUT: 2017-03-02 14:51:29,255 [1] INFO  EventHubReader_LogBolt [(null)] - Received data: {\"deviceValue\":1830978598,\"deviceId\":\"8566ccbc-034d-45db-883d-d8a31f34068e\"}\r         2017-03-02 14:51:29.283 m.s.p.TaskHost [INFO] Received C# STDOUT: 2017-03-02 14:51:29,283 [1] INFO  EventHubReader_LogBolt [(null)] - Received data: {\"deviceValue\":1756413275,\"deviceId\":\"647a5eff-823d-482f-a8b4-b95b35ae570b\"}\r         2017-03-02 14:51:29.313 m.s.p.TaskHost [INFO] Received C# STDOUT: 2017-03-02 14:51:29,312 [1] INFO  EventHubReader_LogBolt [(null)] - Received data: {\"deviceValue\":1108478910,\"deviceId\":\"206a68fa-8264-4d61-9100-bfdb68ee8f0a\"}\r \r ## <a name=\"stop-the-topologies\"></a>停止拓扑\r \r 若要停止拓扑，请在“Storm 拓扑查看器”中选择每个拓扑，然后单击“终止”。\r \r ![“Storm 拓扑查看器”的屏幕截图，其中突出显示了“终止”按钮](./media/apache-storm-develop-csharp-event-hub-topology/killtopology.png)\r \r ## <a name=\"delete-your-cluster\"></a>删除群集\r \r [!INCLUDE [delete-cluster-warning](../../../includes/hdinsight-delete-cluster-warning.md)]\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 本文档已介绍如何使用 C# 拓扑中的 Java 事件中心 Spout 和 Bolt 处理 Azure 事件中心内的数据。 若要了解有关创建 C# 拓扑的详细信息，请参阅以下主题：\r \r * [使用 Visual Studio 开发 Apache Storm on HDInsight 的 C# 拓扑](apache-storm-develop-csharp-visual-studio-topology.md)\r * [SCP 编程指南](apache-storm-scp-programming-guide.md)\r * [Storm on HDInsight 的示例拓扑](apache-storm-example-topology.md)\r \r \r <!--Update_Description: update wording and link references-->"}