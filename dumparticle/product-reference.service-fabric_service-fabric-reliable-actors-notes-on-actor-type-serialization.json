{"Title":"有关执行组件类型序列化的 Reliable Actors 说明","Description":"讨论了定义可序列化类的基本要求，这些类可用于定义 Service Fabric Reliable Actors 的状态和接口","Content":"# <a name=\"notes-on-service-fabric-reliable-actors-type-serialization\"></a>有关 Service Fabric Reliable Actors 类型序列化的说明\r 所有方法的参数、执行组件接口中每个方法返回的任务的结果类型和执行组件的状态管理器中存储的对象都必须是[数据协定可序列化](https://msdn.microsoft.com/library/ms731923.aspx)。 这同样适用于[执行组件事件接口](service-fabric-reliable-actors-events.md)中定义的方法的参数。 （执行组件事件接口方法始终返回 void。）\r \r ## <a name=\"custom-data-types\"></a>自定义数据类型\r 在此示例中，以下执行组件接口定义了一个返回自定义数据类型（名为 `VoicemailBox`）的方法：\r \r ```csharp\r public interface IVoiceMailBoxActor : IActor\r {\r     Task<VoicemailBox> GetMailBoxAsync();\r }\r ```\r \r ```Java\r public interface VoiceMailBoxActor extends Actor\r {\r     CompletableFuture<VoicemailBox> getMailBoxAsync();\r }\r ```\r \r 此接口由使用状态管理器来存储 `VoicemailBox` 对象的执行组件实现：\r \r ```csharp\r [StatePersistence(StatePersistence.Persisted)]\r public class VoiceMailBoxActor : Actor, IVoicemailBoxActor\r {\r     public VoiceMailBoxActor(ActorService actorService, ActorId actorId)\r         : base(actorService, actorId)\r     {\r     }\r \r     public Task<VoicemailBox> GetMailboxAsync()\r     {\r         return this.StateManager.GetStateAsync<VoicemailBox>(\"Mailbox\");\r     }\r }\r \r ```\r \r ```Java\r @StatePersistenceAttribute(statePersistence = StatePersistence.Persisted)\r public class VoiceMailBoxActorImpl extends FabricActor implements VoicemailBoxActor\r {\r     public VoiceMailBoxActorImpl(ActorService actorService, ActorId actorId)\r     {\r          super(actorService, actorId);\r     }\r \r     public CompletableFuture<VoicemailBox> getMailBoxAsync()\r     {\r          return this.stateManager().getStateAsync(\"Mailbox\");\r     }\r }\r \r ```\r \r 在此示例中，如果 `VoicemailBox` 对象出现以下情况，则序列化该对象：\r \r * 在执行组件实例和调用方之间传输该对象。\r * 该对象保存在状态管理器中，即持久保存在磁盘中，并且已复制到其他节点。\r \r Reliable Actor 框架使用 DataContract 序列化。 因此，自定义数据对象及其成员必须分别使用 **DataContract** 和 **DataMember** 属性进行批注。\r \r ```csharp\r [DataContract]\r public class Voicemail\r {\r     [DataMember]\r     public Guid Id { get; set; }\r \r     [DataMember]\r     public string Message { get; set; }\r \r     [DataMember]\r     public DateTime ReceivedAt { get; set; }\r }\r ```\r ```Java\r public class Voicemail implements Serializable\r {\r     private static final long serialVersionUID = 42L;\r \r     private UUID id;                    //getUUID() and setUUID()\r \r     private String message;             //getMessage() and setMessage()\r \r     private GregorianCalendar receivedAt; //getReceivedAt() and setReceivedAt()\r }\r ```\r \r ```csharp\r [DataContract]\r public class VoicemailBox\r {\r     public VoicemailBox()\r     {\r         this.MessageList = new List<Voicemail>();\r     }\r \r     [DataMember]\r     public List<Voicemail> MessageList { get; set; }\r \r     [DataMember]\r     public string Greeting { get; set; }\r }\r ```\r ```Java\r public class VoicemailBox implements Serializable\r {\r     static final long serialVersionUID = 42L;\r \r     public VoicemailBox()\r     {\r         this.messageList = new ArrayList<Voicemail>();\r     }\r \r     private List<Voicemail> messageList;   //getMessageList() and setMessageList()\r \r     private String greeting;               //getGreeting() and setGreeting()\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r * [执行组件生命周期和垃圾回收](service-fabric-reliable-actors-lifecycle.md)\r * [执行组件计时器和提醒](service-fabric-reliable-actors-timers-reminders.md)\r * [执行组件事件](service-fabric-reliable-actors-events.md)\r * [执行组件可重入性](service-fabric-reliable-actors-reentrancy.md)\r * [执行组件多态性和面向对象的设计模式](service-fabric-reliable-actors-polymorphism.md)\r * [执行组件诊断和性能监视](service-fabric-reliable-actors-diagnostics.md)\r \r <!--Update_Description: update meta properties -->"}