{"Title":"使用 Node.js 连接设备","Description":"介绍如何使用以 Node.js 编写的应用程序将设备连接到 Azure IoT 套件预配置远程监控解决方案。","Content":"# <a name=\"connect-your-device-to-the-remote-monitoring-preconfigured-solution-nodejs\"></a>将设备连接到远程监控预配置解决方案 (Node.js)\r [!INCLUDE [iot-suite-v1-selector-connecting](../../includes/iot-suite-v1-selector-connecting.md)]\r \r ## <a name=\"create-a-nodejs-sample-solution\"></a>创建 node.js 示例解决方案\r \r 请确保已在开发计算机上安装 Node.js 版本 0.11.5 或更高版本。 若要检查版本，可在命令行中运行 `node --version` 。\r \r 1. 在开发计算机上创建名为 **RemoteMonitoring** 的文件夹。 在命令行环境中导航到此文件夹。\r \r 1. 运行以下命令下载并安装完成示例应用所需的包：\r \r     ```\r     npm init\r     npm install azure-iot-device azure-iot-device-mqtt --save\r     ```\r \r 1. 在 **RemoteMonitoring** 文件夹中，创建名为 **remote_monitoring.js** 的文件。 在文本编辑器中打开此文件。\r \r 1. 在 **remote_monitoring.js** 文件中，添加以下 `require` 语句：\r \r     ```nodejs\r     'use strict';\r \r     var Protocol = require('azure-iot-device-mqtt').Mqtt;\r     var Client = require('azure-iot-device').Client;\r     var ConnectionString = require('azure-iot-device').ConnectionString;\r     var Message = require('azure-iot-device').Message;\r     ```\r \r 1. 在 `require` 语句之后添加以下变量声明。 将占位符值 [Device Id] 和 [Device Key] 替换为在远程监控解决方案仪表板中记下的设备值。 使用解决方案仪表板中的 IoT 中心主机名替换 [IoTHub Name]。 例如，如果 IoT 中心主机名是 **contoso.azure-devices.cn**，则将 [IoTHub Name] 替换为 **contoso**：\r \r     ```nodejs\r     var connectionString = 'HostName=[IoTHub Name].azure-devices.cn;DeviceId=[Device Id];SharedAccessKey=[Device Key]';\r     var deviceId = ConnectionString.parse(connectionString).DeviceId;\r     ```\r \r 1. 添加以下变量用于定义一些基本遥测数据：\r \r     ```nodejs\r     var temperature = 50;\r     var humidity = 50;\r     var externalTemperature = 55;\r     ```\r \r 1. 添加以下帮助器函数用于列显操作结果：\r \r     ```nodejs\r     function printErrorFor(op) {\r         return function printError(err) {\r             if (err) console.log(op + ' error: ' + err.toString());\r         };\r     }\r     ```\r \r 1. 添加以下帮助器函数用于随机化遥测值：\r \r     ```nodejs\r     function generateRandomIncrement() {\r         return ((Math.random() * 2) - 1);\r     }\r     ```\r \r 1. 为设备在启动时发送的 **DeviceInfo** 对象添加以下定义：\r \r     ```nodejs\r     var deviceMetaData = {\r         'ObjectType': 'DeviceInfo',\r         'IsSimulatedDevice': 0,\r         'Version': '1.0',\r         'DeviceProperties': {\r             'DeviceID': deviceId,\r             'HubEnabledState': 1\r         }\r     };\r     ```\r \r 1. 为设备孪生报告的值添加以下定义。 此定义包括设备支持的直接方法的说明：\r \r     ```nodejs\r     var reportedProperties = {\r         \"Device\": {\r             \"DeviceState\": \"normal\",\r             \"Location\": {\r                 \"Latitude\": 47.642877,\r                 \"Longitude\": -122.125497\r             }\r         },\r         \"Config\": {\r             \"TemperatureMeanValue\": 56.7,\r             \"TelemetryInterval\": 45\r         },\r         \"System\": {\r             \"Manufacturer\": \"Contoso Inc.\",\r             \"FirmwareVersion\": \"2.22\",\r             \"InstalledRAM\": \"8 MB\",\r             \"ModelNumber\": \"DB-14\",\r             \"Platform\": \"Plat 9.75\",\r             \"Processor\": \"i3-9\",\r             \"SerialNumber\": \"SER99\"\r         },\r         \"Location\": {\r             \"Latitude\": 47.642877,\r             \"Longitude\": -122.125497\r         },\r         \"SupportedMethods\": {\r             \"Reboot\": \"Reboot the device\",\r             \"InitiateFirmwareUpdate--FwPackageURI-string\": \"Updates device Firmware. Use parameter FwPackageURI to specifiy the URI of the firmware file\"\r         },\r     }\r     ```\r \r 1. 添加以下函数用于处理 **Reboot** 直接方法调用：\r \r     ```nodejs\r     function onReboot(request, response) {\r         // Implement actual logic here.\r         console.log('Simulated reboot...');\r \r         // Complete the response\r         response.send(200, \"Rebooting device\", function(err) {\r             if(!!err) {\r                 console.error('An error occurred when sending a method response:\\n' + err.toString());\r             } else {\r                 console.log('Response to method \\'' + request.methodName + '\\' sent successfully.' );\r             }\r         });\r     }\r     ```\r \r 1. 添加以下函数用于处理 **InitiateFirmwareUpdate** 直接方法调用。 此直接方法使用参数指定要下载的固件映像的位置，并在设备上异步启动固件更新：\r \r     ```nodejs\r     function onInitiateFirmwareUpdate(request, response) {\r         console.log('Simulated firmware update initiated, using: ' + request.payload.FwPackageURI);\r \r         // Complete the response\r         response.send(200, \"Firmware update initiated\", function(err) {\r             if(!!err) {\r                 console.error('An error occurred when sending a method response:\\n' + err.toString());\r             } else {\r                 console.log('Response to method \\'' + request.methodName + '\\' sent successfully.' );\r             }\r         });\r \r         // Add logic here to perform the firmware update asynchronously\r     }\r     ```\r \r 1. 添加以下代码用于创建客户端实例：\r \r     ```nodejs\r     var client = Client.fromConnectionString(connectionString, Protocol);\r     ```\r \r 1. 添加以下代码来执行下述操作：\r \r     * 打开连接。\r     * 发送 **DeviceInfo** 对象。\r     * 设置所需属性的处理程序。\r     * 发送报告的属性。\r     * 为直接方法注册处理程序。\r     * 开始发送遥测数据。\r \r     ```nodejs\r     client.open(function (err) {\r         if (err) {\r             printErrorFor('open')(err);\r         } else {\r             console.log('Sending device metadata:\\n' + JSON.stringify(deviceMetaData));\r             client.sendEvent(new Message(JSON.stringify(deviceMetaData)), printErrorFor('send metadata'));\r \r             // Create device twin\r             client.getTwin(function(err, twin) {\r                 if (err) {\r                     console.error('Could not get device twin');\r                 } else {\r                     console.log('Device twin created');\r \r                     twin.on('properties.desired', function(delta) {\r                         console.log('Received new desired properties:');\r                         console.log(JSON.stringify(delta));\r                     });\r \r                     // Send reported properties\r                     twin.properties.reported.update(reportedProperties, function(err) {\r                         if (err) throw err;\r                         console.log('twin state reported');\r                     });\r \r                     // Register handlers for direct methods\r                     client.onDeviceMethod('Reboot', onReboot);\r                     client.onDeviceMethod('InitiateFirmwareUpdate', onInitiateFirmwareUpdate);\r                 }\r             });\r \r             // Start sending telemetry\r             var sendInterval = setInterval(function () {\r                 temperature += generateRandomIncrement();\r                 externalTemperature += generateRandomIncrement();\r                 humidity += generateRandomIncrement();\r \r                 var data = JSON.stringify({\r                     'DeviceID': deviceId,\r                     'Temperature': temperature,\r                     'Humidity': humidity,\r                     'ExternalTemperature': externalTemperature\r                 });\r \r                 console.log('Sending device event data:\\n' + data);\r                 client.sendEvent(new Message(data), printErrorFor('send event'));\r             }, 5000);\r \r             client.on('error', function (err) {\r                 printErrorFor('client')(err);\r                 if (sendInterval) clearInterval(sendInterval);\r                 client.close(printErrorFor('client.close'));\r             });\r         }\r     });\r     ```\r \r 1. 保存对 **remote_monitoring.js** 文件的更改。\r \r 1. 在命令提示符下运行以下命令，启动示例应用程序：\r    \r     ```\r     node remote_monitoring.js\r     ```\r \r [!INCLUDE [iot-suite-v1-visualize-connecting](../../includes/iot-suite-v1-visualize-connecting.md)]\r \r [lnk-github-repo]: https://github.com/azure/azure-iot-sdk-node\r [lnk-github-prepare]: https://github.com/Azure/azure-iot-sdk-node/blob/master/doc/node-devbox-setup.md\r "}