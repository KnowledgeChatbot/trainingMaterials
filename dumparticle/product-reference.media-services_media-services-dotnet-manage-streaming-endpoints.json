{"Title":"使用 .NET SDK 管理流式处理终结点","Description":"本主题说明如何使用 Azure 门户管理流式处理终结点。","Content":"# <a name=\"manage-streaming-endpoints-with-net-sdk\"></a>使用 .NET SDK 管理流式处理终结点\r \r >[!NOTE]\r >请确保查看[概述](media-services-streaming-endpoints-overview.md)主题。 另请查看 [StreamingEndpoint](https://docs.microsoft.com/rest/api/media/operations/streamingendpoint)。\r \r 本主题中的代码演示如何使用 Azure 媒体服务 .NET SDK 执行以下任务：\r \r - 检查默认的流式处理终结点。\r - 创建/添加新的流式处理终结点。\r \r     如果计划使用不同的 CDN 或者使用一个 CDN 和直接访问，则可能需要多个流式处理终结点。\r \r     > [!NOTE]\r     > 仅当流式处理终结点处于运行状态时才进行计费。\r     \r - 更新流式处理终结点。\r     \r     请确保调用 Update() 函数。\r \r - 删除流式处理终结点。\r \r     >[!NOTE]\r     >无法删除默认流式处理终结点。\r \r 有关如何缩放流式处理终结点的信息，请参阅[此](media-services-portal-scale-streaming-endpoints.md)主题。\r \r ## <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r \r 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r \r ## <a name=\"add-code-that-manages-streaming-endpoints\"></a>添加管理流式处理终结点的代码\r     \r 将 Program.cs 中的代码替换为以下代码：\r \r     using System;\r     using System.Configuration;\r     using System.Linq;\r     using Microsoft.WindowsAzure.MediaServices.Client;\r     using Microsoft.WindowsAzure.MediaServices.Client.Live;\r \r     namespace AMSStreamingEndpoint\r     {\r         class Program\r         {\r         // Read values from the App.config file.\r         private static readonly string _AADTenantDomain =\r         ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r         private static readonly string _RESTAPIEndpoint =\r         ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r         private static CloudMediaContext _context = null;\r \r         static void Main(string[] args)\r         {\r             var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r             var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r             _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r             var defaultStreamingEndpoint = _context.StreamingEndpoints.Where(s => s.Name.Contains(\"default\")).FirstOrDefault();\r             ExamineStreamingEndpoint(defaultStreamingEndpoint);\r \r             IStreamingEndpoint newStreamingEndpoint = AddStreamingEndpoint();\r             UpdateStreamingEndpoint(newStreamingEndpoint);\r             DeleteStreamingEndpoint(newStreamingEndpoint);\r         }\r \r         static public void ExamineStreamingEndpoint(IStreamingEndpoint streamingEndpoint)\r         {\r             Console.WriteLine(streamingEndpoint.Name);\r             Console.WriteLine(streamingEndpoint.StreamingEndpointVersion);\r             Console.WriteLine(streamingEndpoint.FreeTrialEndTime);\r             Console.WriteLine(streamingEndpoint.ScaleUnits);\r             Console.WriteLine(streamingEndpoint.CdnProvider);\r             Console.WriteLine(streamingEndpoint.CdnProfile);\r             Console.WriteLine(streamingEndpoint.CdnEnabled);\r         }\r \r         static public IStreamingEndpoint AddStreamingEndpoint()\r         {\r             var name = \"StreamingEndpoint\" + DateTime.UtcNow.ToString(\"hhmmss\");\r             var option = new StreamingEndpointCreationOptions(name, 1)\r             {\r             StreamingEndpointVersion = new Version(\"2.0\"),\r             CdnEnabled = true,\r             CdnProfile = \"CdnProfile\",\r             CdnProvider = CdnProviderType.PremiumVerizon\r             };\r \r             var streamingEndpoint = _context.StreamingEndpoints.Create(option);\r \r             return streamingEndpoint;\r         }\r \r         static public void UpdateStreamingEndpoint(IStreamingEndpoint streamingEndpoint)\r         {\r             if (streamingEndpoint.StreamingEndpointVersion == \"1.0\")\r             streamingEndpoint.StreamingEndpointVersion = \"2.0\";\r \r             streamingEndpoint.CdnEnabled = false;\r             streamingEndpoint.Update();\r         }\r \r         static public void DeleteStreamingEndpoint(IStreamingEndpoint streamingEndpoint)\r         {\r             streamingEndpoint.Delete();\r         }\r         }\r     }\r \r \r "}