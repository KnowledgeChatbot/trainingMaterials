{"Title":"如何使用 paho mqttv3 库发送消息到 Azure IoT 中心","Description":"如何使用 paho mqttv3 库发送消息到 Azure IoT 中心","Content":"\r # 如何使用 paho mqttv3 库发送消息到 Azure IoT 中心\r \r Azure IoT 中心支持多种协议，比如 AMQP， MQTT 等等，也支持多种语言，比如 Java， C 等等。这意味着，除了使用 Azure 官方提供的 IoT 中心 SDK 之外，还可以使用社区中一些常用的库来与 Azure IoT 中心进行交互。这篇文章将演示如何使用 paho mqttv3 库发送消息到 Azure IoT 中心，以及如何利用 property_bag 发送包含其他属性的消息。\r \r ## 添加引用\r \r ```\r <dependency>\r     <groupId>org.eclipse.paho</groupId>\r     <artifactId>org.eclipse.paho.client.mqttv3</artifactId>\r     <version>1.1.0</version>\r </dependency>\r <!-- for base64 decode and encode -->\r <dependency>\r     <groupId>commons-codec</groupId>\r     <artifactId>commons-codec</artifactId>\r     <version>1.10</version>\r </dependency>\r ```\r \r ## 生成 SAS 令牌\r \r SAS 令牌将作为基于 MQTT 协议连接 Azure IoT 中心时使用的密码。\r \r ```\r private static String generateSasToken(String serverUri, String key) throws UnsupportedEncodingException {\r         String tokenFormat = \"SharedAccessSignature sig=%s&se=%s&sr=%s\";\r         String scope = URLEncoder.encode(serverUri, StandardCharsets.UTF_8.toString());\r         long expiryTime = System.currentTimeMillis() / 1000l + 600 + 1l;\r         String signatureStr = generateSignature(scope, expiryTime, key);\r \r         return String.format(tokenFormat, signatureStr, expiryTime, scope);\r }\r private static String generateSignature(String resrouceUri, long expiryTime, String deviceKey) throws UnsupportedEncodingException\r {\r         byte[] rawSig = String.format(\"%s\\n%s\", resrouceUri, expiryTime).getBytes(StandardCharsets.UTF_8);\r         byte[] decodedDeviceKey = Base64.decodeBase64(deviceKey.getBytes());\r         String hmacSha256 = \"HmacSHA256\";\r         SecretKeySpec secretKey = new SecretKeySpec(decodedDeviceKey, hmacSha256);\r         byte[] encryptedSig = null;\r         try\r         {\r             Mac hMacSha256 = Mac.getInstance(hmacSha256);\r             hMacSha256.init(secretKey);\r             encryptedSig = hMacSha256.doFinal(rawSig);\r         }\r         catch (NoSuchAlgorithmException e)\r         {\r             // should never happen, since the algorithm is hard-coded\r         }\r         catch (InvalidKeyException e)\r         {\r             // should never happen, since the algorithm is hard-coded\r         }\r         byte[] encryptedSigBase64 = Base64.encodeBase64(encryptedSig);\r         String utf8Sig = new String(encryptedSigBase64, StandardCharsets.UTF_8);\r         String signatureStr = URLEncoder.encode(utf8Sig, StandardCharsets.UTF_8.name());\r         return signatureStr;\r }\r ```\r \r ## 连接 Azure IoT 中心\r \r ```\r String hostName = \"\"; // e.g. iothubdemo.azure-devices.cn\r String deviceId = \"\";\r String deviceKey = \"\";\r \r MqttAsyncClient client = new MqttAsyncClient(serverURI, deviceId, new MemoryPersistence());\r MqttConnectOptions connOpts = new MqttConnectOptions();\r connOpts.setUserName(hostName + \"/\" + deviceId);\r connOpts.setPassword(generateSasToken(hostName + \"/devices/\" + deviceId, deviceKey).toCharArray());\r connOpts.setMaxInflight(100);\r connOpts.setCleanSession(false);\r connOpts.setAutomaticReconnect(true);\r \r IMqttToken conToken = client.connect(connOpts);\r conToken.waitForCompletion();\r System.out.println(\"Connected to IOT Hub server \" + hostName);\r ```\r \r ## 发送消息\r \r ```\r String msgStr = \"message \" + i;\r MqttMessage message = new MqttMessage(msgStr.getBytes());\r message.setQos(1);\r IMqttDeliveryToken token = client.publish(topic, message);\r // wait here will make everything serialization\r token.waitForCompletion();\r System.out.println(\"Sent message \" + i);\r ```\r \r ## 利用 property_bag 发送包含其他属性的消息\r \r ### 添加 property_bag 到主题中\r \r ```\r // demo for topic name with property_bag: devices/{device_id}/messages/events/{property_bag}\r String topicProperty = URLEncoder.encode(\"testp\", \"UTF-8\") + \"=\" + URLEncoder.encode(\"testv\", \"UTF-8\");\r String topicWithProperty = \"devices/\" + deviceId + \"/messages/events/\" + topicProperty;\r ```\r \r ### 发送消息到带有 property_bag 的主题\r \r ```\r // demo for topic name with property_bag\r // in this way, all events will contains the property\r IMqttDeliveryToken delToken = client.publish(topicWithProperty, message);\r ```\r \r ## 资源链接\r \r 示例代码：[https://github.com/wacn/AOG-CodeSample/tree/master/IotHub/Java/nature-mqtt-sample/](https://github.com/wacn/AOG-CodeSample/tree/master/IotHub/Java/nature-mqtt-sample/)"}