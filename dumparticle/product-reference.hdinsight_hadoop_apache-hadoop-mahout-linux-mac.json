{"Title":"使用 Mahout 和 HDInsight (SSH) 生成推荐 - Azure","Description":"了解如何使用 Apache Mahout 机器学习库通过 HDInsight (Hadoop) 生成电影推荐。","Content":"# <a name=\"generate-movie-recommendations-by-using-apache-mahout-with-linux-based-hadoop-in-hdinsight-ssh\"></a>通过 HDInsight (SSH) 中基于 Linux 的 Hadoop 使用 Apache Mahout 生成电影推荐\r \r [!INCLUDE [mahout-selector](../../../includes/hdinsight-selector-mahout.md)]\r \r 了解如何使用 [Apache Mahout](http://mahout.apache.org) 机器学习库通过 Azure HDInsight 生成电影推荐。\r \r Mahout 是适用于 Apache Hadoop 的 [计算机学习][ml] 库。 Mahout 包含用于处理数据的算法，例如筛选、分类和群集。 在本文中，用户使用推荐引擎根据好友看过的电影生成电影推荐。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r * 基于 Linux 的 HDInsight 群集。 有关创建该群集的信息，请参阅 [开始在 HDInsight 中使用基于 Linux 的 Hadoop][getstarted]。\r \r [!INCLUDE [hdinsight-linux-acn-version.md](../../../includes/hdinsight-linux-acn-version.md)]\r \r > [!IMPORTANT]\r > Linux 是在 HDInsight 3.4 版或更高版本上使用的唯一操作系统。 有关详细信息，请参阅 [HDInsight 在 Windows 上停用](../hdinsight-component-versioning.md#hdinsight-windows-retirement)。\r \r * SSH 客户端。 有关详细信息，请参阅[将 SSH 与 HDInsight 配合使用](../hdinsight-hadoop-linux-use-ssh-unix.md)文档。\r \r ## <a name=\"mahout-versioning\"></a>Mahout 版本控制\r \r 若要深入了解 HDInsight 中的 Mahout 版本，请参阅 [HDInsight 版本和 Hadoop 组件](../hdinsight-component-versioning.md)。\r \r ## <a name=\"recommendations\"></a>了解建议\r \r Mahout 提供的功能之一是推荐引擎。 此引擎接受 `userID`、`itemId` 和 `prefValue` 格式（项的首选项）的数据。 然后，Mahout 将执行共现分析，以确定：偏好某个项的用户也偏好其他类似项。 随后，Mahout 确定拥有类似项偏好的用户，这些偏好可用于推荐。\r \r 下面的工作流是使用电影数据的简化示例：\r \r * **共现**：Joe、Alice 和 Bob 都喜欢电影星球大战、帝国反击战和绝地大反击。 Mahout 可确定喜欢以上电影之一的用户也喜欢其他两部。\r \r * **共现**：Bob 和 Alice 还喜欢电影幽灵的威胁、克隆人的进攻和西斯的复仇。 Mahout 可确定喜欢前面三部电影的用户也喜欢这三部电影。\r \r * **类似性推荐**：由于 Joe 喜欢前三部电影，Mahout 会查看具有类似首选项的其他人喜欢的电影，但是 Joe 还未观看过（喜欢/评价）。 在这种情况下，Mahout 推荐《幽灵的威胁》、《克隆人的进攻》和《西斯的复仇》。\r \r ### <a name=\"understanding-the-data\"></a>了解数据\r \r 为方便起见， [GroupLens 研究][movielens] 以兼容 Mahout 的格式提供电影的评价数据。 此数据在 `/HdiSamples/HdiSamples/MahoutMovieData` 中群集的默认存储中可用。\r \r 有两个文件，即 `moviedb.txt` 和 `user-ratings.txt`。 `user-ratings.txt` 文件在分析期间使用。 `moviedb.txt` 用于在查看结果时提供用户友好的文本信息。\r \r user-ratings.txt 中包含的数据具有 `userID`、`movieID`、`userRating` 和 `timestamp` 结构，指示每个用户对电影评级的情况。 下面是数据的示例：\r \r     196    242    3    881250949\r     186    302    3    891717742\r     22    377    1    878887116\r     244    51    2    880606923\r     166    346    1    886397596\r \r ## <a name=\"run-the-analysis\"></a>运行分析\r \r 通过 SSH 到群集的连接，使用以下命令运行推荐作业：\r \r ```bash\r mahout recommenditembased -s SIMILARITY_COOCCURRENCE -i /HdiSamples/HdiSamples/MahoutMovieData/user-ratings.txt -o /example/data/mahoutout --tempDir /temp/mahouttemp\r ```\r \r > [!NOTE]\r > 该作业可能需要几分钟才能完成，并可能运行多个 MapReduce 作业。\r \r ## <a name=\"view-the-output\"></a>查看输出\r \r 1. 作业完成后，使用以下命令查看生成的输出：\r \r     ```bash\r     hdfs dfs -text /example/data/mahoutout/part-r-00000\r     ```\r \r     输出如下所示：\r \r         1    [234:5.0,347:5.0,237:5.0,47:5.0,282:5.0,275:5.0,88:5.0,515:5.0,514:5.0,121:5.0]\r         2    [282:5.0,210:5.0,237:5.0,234:5.0,347:5.0,121:5.0,258:5.0,515:5.0,462:5.0,79:5.0]\r         3    [284:5.0,285:4.828125,508:4.7543354,845:4.75,319:4.705128,124:4.7045455,150:4.6938777,311:4.6769233,248:4.65625,272:4.649266]\r         4    [690:5.0,12:5.0,234:5.0,275:5.0,121:5.0,255:5.0,237:5.0,895:5.0,282:5.0,117:5.0]\r \r     第一列是 `userID`。 “[”和“]”中包含的值为 `movieId`:`recommendationScore`。\r \r 2. 可使用该输出以及 moviedb.txt 提供有关建议的详细信息。 首先，使用以下命令在本地复制文件：\r \r     ```bash\r     hdfs dfs -get /example/data/mahoutout/part-r-00000 recommendations.txt\r     hdfs dfs -get /HdiSamples/HdiSamples/MahoutMovieData/* .\r     ```\r \r     此命令会将输出数据复制到当前目录中名为 **recommendations.txt** 的文件以及电影数据文件。\r \r 3. 使用如下命令创建 Python 脚本，该脚本查找电影名称中是否存在建议输出中的数据：\r \r     ```bash\r     nano show_recommendations.py\r     ```\r \r     编辑器打开后，使用以下文本作为该文件的内容：\r \r    ```python\r    #!/usr/bin/env python\r \r    import sys\r \r    if len(sys.argv) != 5:\r         print \"Arguments: userId userDataFilename movieFilename recommendationFilename\"\r         sys.exit(1)\r \r    userId, userDataFilename, movieFilename, recommendationFilename = sys.argv[1:]\r \r    print \"Reading Movies Descriptions\"\r    movieFile = open(movieFilename)\r    movieById = {}\r    for line in movieFile:\r        tokens = line.split(\"|\")\r        movieById[tokens[0]] = tokens[1:]\r    movieFile.close()\r \r    print \"Reading Rated Movies\"\r    userDataFile = open(userDataFilename)\r    ratedMovieIds = []\r    for line in userDataFile:\r        tokens = line.split(\"\\t\")\r        if tokens[0] == userId:\r            ratedMovieIds.append((tokens[1],tokens[2]))\r    userDataFile.close()\r \r    print \"Reading Recommendations\"\r    recommendationFile = open(recommendationFilename)\r    recommendations = []\r    for line in recommendationFile:\r        tokens = line.split(\"\\t\")\r        if tokens[0] == userId:\r            movieIdAndScores = tokens[1].strip(\"[]\\n\").split(\",\")\r            recommendations = [ movieIdAndScore.split(\":\") for movieIdAndScore in movieIdAndScores ]\r            break\r    recommendationFile.close()\r \r    print \"Rated Movies\"\r    print \"------------------------\"\r    for movieId, rating in ratedMovieIds:\r        print \"%s, rating=%s\" % (movieById[movieId][0], rating)\r    print \"------------------------\"\r \r    print \"Recommended Movies\"\r    print \"------------------------\"\r    for movieId, score in recommendations:\r        print \"%s, score=%s\" % (movieById[movieId][0], score)\r    print \"------------------------\"\r    ```\r \r     按 **Ctrl-X**、**Y**，最后按 **Enter** 来保存数据。\r \r 4. 运行 Python 脚本。 以下命令假设用户处于内含所有已下载文件的目录中：\r \r     ```bash\r     python show_recommendations.py 4 user-ratings.txt moviedb.txt recommendations.txt\r     ```\r \r     此命令查看为用户 ID 4 生成的建议。\r \r     * **user-ratings.txt** 文件用于检索已被评价过的电影。\r \r     * **moviedb.txt** 文件用于检索电影的名称。\r \r     * **recommendations.txt** 用于检索此用户的电影建议。\r \r      此命令的输出类似于以下文本：\r \r     ```\r     Seven Years in Tibet (1997), score=5.0\r     Indiana Jones and the Last Crusade (1989), score=5.0\r     Jaws (1975), score=5.0\r     Sense and Sensibility (1995), score=5.0\r     Independence Day (ID4) (1996), score=5.0\r     My Best Friend's Wedding (1997), score=5.0\r     Jerry Maguire (1996), score=5.0\r     Scream 2 (1997), score=5.0\r     Time to Kill, A (1996), score=5.0\r     ```\r \r ## <a name=\"delete-temporary-data\"></a>删除临时数据\r \r Mahout 作业不删除在处理作业时创建的临时数据。 在示例作业中指定 `--tempDir` 参数，以将临时文件隔离到特定路径中轻松删除。 若要删除临时文件，请使用以下命令：\r \r ```bash\r hdfs dfs -rm -f -r /temp/mahouttemp\r ```\r \r > [!WARNING]\r > 如需再次运行此命令，则还必须删除输出目录。 使用以下命令删除此目录：\r >\r > `hdfs dfs -rm -f -r /example/data/mahoutout`\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 既已学习如何使用 Mahout，可探索在 HDInsight 上处理数据的其他方式：\r \r * [Hive 和 HDInsight 配合使用](hdinsight-use-hive.md)\r * [Pig 和 HDInsight 配合使用](hdinsight-use-pig.md)\r * [MapReduce 和 HDInsight 配合使用](hdinsight-use-mapreduce.md)\r \r [build]: http://mahout.apache.org/developers/buildingmahout.html\r [movielens]: http://grouplens.org/datasets/movielens/\r [100k]: http://files.grouplens.org/datasets/movielens/ml-100k.zip\r [getstarted]:apache-hadoop-linux-tutorial-get-started.md\r [upload]: ../hdinsight-upload-data.md\r [ml]: http://en.wikipedia.org/wiki/Machine_learning\r [forest]: http://en.wikipedia.org/wiki/Random_forest\r [enableremote]: ./media/hdinsight-mahout/enableremote.png\r [connect]: ./media/hdinsight-mahout/connect.png\r [hadoopcli]: ./media/hdinsight-mahout/hadoopcli.png\r [tools]: https://github.com/Blackmist/hdinsight-tools\r \r \r \r <!--Update_Description: update wording and link references-->"}