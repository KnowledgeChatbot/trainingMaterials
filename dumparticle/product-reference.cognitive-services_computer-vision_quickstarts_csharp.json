{"Title":"计算机视觉 API C# 快速入门","Description":"获取信息和代码示例，帮助自己快速开始使用 C# 和认知服务中的计算机视觉 API。","Content":"# <a name=\"computer-vision-c-quick-starts\"></a>计算机视觉 C# 快速入门\r \r 本文提供信息和代码示例来帮助读者快速开始使用计算机视觉 API 和 C# 来完成以下任务：\r - [分析图像](#AnalyzeImage)\r - [使用特定于域的模型](#DomainSpecificModel)\r - [以智能方式生成缩略图](#GetThumbnail)\r - [从图像中检测并提取打印的文本](#OCR)\r - [从图像中检测并提取手写的文本](#RecognizeText)\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r - 在[此处](https://github.com/Microsoft/Cognitive-vision-windows)获取 Microsoft 计算机视觉 API Windows SDK。\r - 若要使用计算机视觉 API，需要一个订阅密钥。 可在[此处](/cognitive-services/Computer-vision/Vision-API-How-to-Topics/HowToSubscribe)获取免费订阅密钥。\r \r ## 使用计算机视觉 API 通过 C# 分析图像 <a name=\"AnalyzeImage\"> </a>\r \r 使用[“分析图像”方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fa)，可以基于图像内容提取视觉特征。 可以上传图像或指定图像 URL 并选择要返回的特征，包括：\r - 与图像内容相关的标记的详细列表。\r - 完整句子中图像内容的说明。\r - 图像包含的任何人脸的坐标、性别和年龄。\r - ImageType（剪贴画或线条绘图）。\r - 主色、强调色，或者图像是否为黑白色。\r - 在此[分类](../Category-Taxonomy.md)中定义的类别。\r - 图像是否包含成人或性暗示内容？\r \r ### <a name=\"analyze-an-image-c-example-request\"></a>分析图像 C# 示例请求\r \r 在 Visual Studio 中创建一个新的控制台解决方案，然后将 Program.cs 替换为以下代码。 更改 `uriBase` 以使用订阅密钥的获取位置，并将 `subscriptionKey` 值替换为有效的订阅密钥。\r \r ```c#\r using System;\r using System.IO;\r using System.Net.Http;\r using System.Net.Http.Headers;\r using System.Text;\r \r namespace CSHttpClientSample\r {\r     static class Program\r     {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         const string subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         const string uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/analyze\";\r \r \r         static void Main()\r         {\r             // Get the path and filename to process from the user.\r             Console.WriteLine(\"Analyze an image:\");\r             Console.Write(\"Enter the path to an image you wish to analzye: \");\r             string imageFilePath = Console.ReadLine();\r \r             // Execute the REST API call.\r             MakeAnalysisRequest(imageFilePath);\r \r             Console.WriteLine(\"\\nPlease wait a moment for the results to appear. Then, press Enter to exit...\\n\");\r             Console.ReadLine();\r         }\r \r \r         /// <summary>\r         /// Gets the analysis of the specified image file by using the Computer Vision REST API.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file.</param>\r         static async void MakeAnalysisRequest(string imageFilePath)\r         {\r             HttpClient client = new HttpClient();\r \r             // Request headers.\r             client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request parameters. A third optional parameter is \"details\".\r             string requestParameters = \"visualFeatures=Categories,Description,Color&language=en\";\r \r             // Assemble the URI for the REST API Call.\r             string uri = uriBase + \"?\" + requestParameters;\r \r             HttpResponseMessage response;\r \r             // Request body. Posts a locally stored JPEG image.\r             byte[] byteData = GetImageAsByteArray(imageFilePath);\r \r             using (ByteArrayContent content = new ByteArrayContent(byteData))\r             {\r                 // This example uses content type \"application/octet-stream\".\r                 // The other content types you can use are \"application/json\" and \"multipart/form-data\".\r                 content.Headers.ContentType = new MediaTypeHeaderValue(\"application/octet-stream\");\r                 \r                 // Execute the REST API call.\r                 response = await client.PostAsync(uri, content);\r \r                 // Get the JSON response.\r                 string contentString = await response.Content.ReadAsStringAsync();\r \r                 // Display the JSON response.\r                 Console.WriteLine(\"\\nResponse:\\n\");\r                 Console.WriteLine(JsonPrettyPrint(contentString));\r             }\r         }\r \r \r         /// <summary>\r         /// Returns the contents of the specified file as a byte array.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file to read.</param>\r         /// <returns>The byte array of the image data.</returns>\r         static byte[] GetImageAsByteArray(string imageFilePath)\r         {\r             FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);\r             BinaryReader binaryReader = new BinaryReader(fileStream);\r             return binaryReader.ReadBytes((int)fileStream.Length);\r         }\r \r \r         /// <summary>\r         /// Formats the given JSON string by adding line breaks and indents.\r         /// </summary>\r         /// <param name=\"json\">The raw JSON string to format.</param>\r         /// <returns>The formatted JSON string.</returns>\r         static string JsonPrettyPrint(string json)\r         {\r             if (string.IsNullOrEmpty(json))\r                 return string.Empty;\r \r             json = json.Replace(Environment.NewLine, \"\").Replace(\"\\t\", \"\");\r \r             StringBuilder sb = new StringBuilder();\r             bool quote = false;\r             bool ignore = false;\r             int offset = 0;\r             int indentLength = 3;\r \r             foreach(char ch in json)\r             {\r                 switch (ch)\r                 {\r                     case '\"':\r                         if (!ignore) quote = !quote;\r                         break;\r                     case '\\'':\r                         if (quote) ignore = !ignore;\r                         break;\r                 }\r \r                 if (quote)\r                     sb.Append(ch);\r                 else\r                 {\r                     switch (ch)\r                     {\r                         case '{':\r                         case '[':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', ++offset * indentLength));\r                             break;\r                         case '}':\r                         case ']':\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', --offset * indentLength));\r                             sb.Append(ch);\r                             break;\r                         case ',':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', offset * indentLength));\r                             break;\r                         case ':':\r                             sb.Append(ch);\r                             sb.Append(' ');\r                             break;\r                         default:\r                             if (ch != ' ') sb.Append(ch);\r                             break;\r                     }\r                 }\r             }\r \r             return sb.ToString().Trim();\r         }\r     }\r }\r ```\r \r ### <a name=\"analyze-an-image-response\"></a>分析图像响应\r \r 成功响应将以 JSON 格式返回。 下面是成功响应的示例：\r \r ```json\r {\r    \"categories\": [\r       {\r          \"name\": \"abstract_\",\r          \"score\": 0.00390625\r       },\r       {\r          \"name\": \"others_\",\r          \"score\": 0.0234375\r       },\r       {\r          \"name\": \"outdoor_\",\r          \"score\": 0.00390625\r       }\r    ],\r    \"description\": {\r       \"tags\": [\r          \"road\",\r          \"building\",\r          \"outdoor\",\r          \"street\",\r          \"night\",\r          \"black\",\r          \"city\",\r          \"white\",\r          \"light\",\r          \"sitting\",\r          \"riding\",\r          \"man\",\r          \"side\",\r          \"empty\",\r          \"rain\",\r          \"corner\",\r          \"traffic\",\r          \"lit\",\r          \"hydrant\",\r          \"stop\",\r          \"board\",\r          \"parked\",\r          \"bus\",\r          \"tall\"\r       ],\r       \"captions\": [\r          {\r             \"text\": \"a close up of an empty city street at night\",\r             \"confidence\": 0.7965622853462756\r          }\r       ]\r    },\r    \"requestId\": \"dddf1ac9-7e66-4c47-bdef-222f3fe5aa23\",\r    \"metadata\": {\r       \"width\": 3733,\r       \"height\": 1986,\r       \"format\": \"Jpeg\"\r    },\r    \"color\": {\r       \"dominantColorForeground\": \"Black\",\r       \"dominantColorBackground\": \"Black\",\r       \"dominantColors\": [\r          \"Black\",\r          \"Grey\"\r       ],\r       \"accentColor\": \"666666\",\r       \"isBWImg\": true\r    }\r }\r ```\r \r ## 使用特定于域的模型 <a name=\"DomainSpecificModel\"> </a>\r \r 特定于域的模型是经过训练，可在图像中识别一组特定对象的模型。 当前可用的两个特定于域的模型为 celebrities 和 landmarks。 以下示例识别图像中的地标。\r \r ### <a name=\"landmark-c-example-request\"></a>地标 C# 示例请求\r \r 在 Visual Studio 中创建一个新的控制台解决方案，然后将 Program.cs 替换为以下代码。 更改 `uriBase` 以使用订阅密钥的获取位置，并将 `subscriptionKey` 值替换为有效的订阅密钥。\r \r ```c#\r using System;\r using System.IO;\r using System.Net.Http;\r using System.Net.Http.Headers;\r using System.Text;\r \r namespace CSHttpClientSample\r {\r     static class Program\r     {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         const string subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         // if you want to use the celebrities model, change \"landmarks\" to \"celebrities\" here and in \r         // requestParameters to use the Celebrities model.\r         const string uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/models/landmarks/analyze\";\r \r \r         static void Main()\r         {\r             // Get the path and filename to process from the user.\r             Console.WriteLine(\"Domain-Specific Model:\");\r             Console.Write(\"Enter the path to an image you wish to analzye for landmarks: \");\r             string imageFilePath = Console.ReadLine();\r \r             // Execute the REST API call.\r             MakeAnalysisRequest(imageFilePath);\r \r             Console.WriteLine(\"\\nPlease wait a moment for the results to appear. Then, press Enter to exit ...\\n\");\r             Console.ReadLine();\r         }\r \r \r         /// <summary>\r         /// Gets a thumbnail image from the specified image file by using the Computer Vision REST API.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file to use to create the thumbnail image.</param>\r         static async void MakeAnalysisRequest(string imageFilePath)\r         {\r             HttpClient client = new HttpClient();\r \r             // Request headers.\r             client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request parameters. Change \"landmarks\" to \"celebrities\" here and in uriBase to use the Celebrities model.\r             string requestParameters = \"model=landmarks\";\r \r             // Assemble the URI for the REST API Call.\r             string uri = uriBase + \"?\" + requestParameters;\r \r             HttpResponseMessage response;\r \r             // Request body. Posts a locally stored JPEG image.\r             byte[] byteData = GetImageAsByteArray(imageFilePath);\r \r             using (ByteArrayContent content = new ByteArrayContent(byteData))\r             {\r                 // This example uses content type \"application/octet-stream\".\r                 // The other content types you can use are \"application/json\" and \"multipart/form-data\".\r                 content.Headers.ContentType = new MediaTypeHeaderValue(\"application/octet-stream\");\r                 \r                 // Execute the REST API call.\r                 response = await client.PostAsync(uri, content);\r \r                 // Get the JSON response.\r                 string contentString = await response.Content.ReadAsStringAsync();\r \r                 // Display the JSON response.\r                 Console.WriteLine(\"\\nResponse:\\n\");\r                 Console.WriteLine(JsonPrettyPrint(contentString));\r             }\r         }\r \r \r         /// <summary>\r         /// Returns the contents of the specified file as a byte array.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file to read.</param>\r         /// <returns>The byte array of the image data.</returns>\r         static byte[] GetImageAsByteArray(string imageFilePath)\r         {\r             FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);\r             BinaryReader binaryReader = new BinaryReader(fileStream);\r             return binaryReader.ReadBytes((int)fileStream.Length);\r         }\r \r \r         /// <summary>\r         /// Formats the given JSON string by adding line breaks and indents.\r         /// </summary>\r         /// <param name=\"json\">The raw JSON string to format.</param>\r         /// <returns>The formatted JSON string.</returns>\r         static string JsonPrettyPrint(string json)\r         {\r             if (string.IsNullOrEmpty(json))\r                 return string.Empty;\r \r             json = json.Replace(Environment.NewLine, \"\").Replace(\"\\t\", \"\");\r \r             StringBuilder sb = new StringBuilder();\r             bool quote = false;\r             bool ignore = false;\r             int offset = 0;\r             int indentLength = 3;\r \r             foreach (char ch in json)\r             {\r                 switch (ch)\r                 {\r                     case '\"':\r                         if (!ignore) quote = !quote;\r                         break;\r                     case '\\'':\r                         if (quote) ignore = !ignore;\r                         break;\r                 }\r \r                 if (quote)\r                     sb.Append(ch);\r                 else\r                 {\r                     switch (ch)\r                     {\r                         case '{':\r                         case '[':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', ++offset * indentLength));\r                             break;\r                         case '}':\r                         case ']':\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', --offset * indentLength));\r                             sb.Append(ch);\r                             break;\r                         case ',':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', offset * indentLength));\r                             break;\r                         case ':':\r                             sb.Append(ch);\r                             sb.Append(' ');\r                             break;\r                         default:\r                             if (ch != ' ') sb.Append(ch);\r                             break;\r                     }\r                 }\r             }\r \r             return sb.ToString().Trim();\r         }\r     }\r }\r ```\r \r ### <a name=\"landmark-example-response\"></a>地标示例响应\r \r 成功响应将以 JSON 格式返回。 下面是成功响应的示例：  \r \r ```json\r {\r    \"requestId\": \"cfe3d4eb-4d9c-4dda-ae63-7d3a27ce6d27\",\r    \"metadata\": {\r       \"width\": 1024,\r       \"height\": 680,\r       \"format\": \"Jpeg\"\r    },\r    \"result\": {\r       \"landmarks\": [\r          {\r             \"name\": \"Space Needle\",\r             \"confidence\": 0.9448209\r          }\r       ]\r    }\r }\r ```\r \r ## 使用计算机视觉 API 通过 C# 获取缩略图 <a name=\"GetThumbnail\"> </a>\r \r 使用[“获取缩略图”方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fb)可以根据图像的兴趣区域 (ROI) 将该图像裁剪为所需的高度和宽度。 甚至可以选取与输入图像纵横比不同的纵横比。\r \r ### <a name=\"get-a-thumbnail-c-example-request\"></a>获取缩略图 C# 示例请求\r \r 在 Visual Studio 中创建一个新的控制台解决方案，然后将 Program.cs 替换为以下代码。 更改 `uriBase` 以使用订阅密钥的获取位置，并将 `subscriptionKey` 值替换为有效的订阅密钥。\r \r ```c#\r using System;\r using System.IO;\r using System.Net.Http;\r using System.Net.Http.Headers;\r using System.Text;\r \r namespace CSHttpClientSample\r {\r     static class Program\r     {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         const string subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         const string uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/generateThumbnail\";\r \r \r         static void Main()\r         {\r             // Get the path and filename to process from the user.\r             Console.WriteLine(\"Thumbnail:\");\r             Console.Write(\"Enter the path to an image you wish to use to create a thumbnail image: \");\r             string imageFilePath = Console.ReadLine();\r \r             // Execute the REST API call.\r             MakeThumbNailRequest(imageFilePath);\r \r             Console.WriteLine(\"\\nPlease wait a moment for the results to appear. Then, press Enter to exit ...\\n\");\r             Console.ReadLine();\r         }\r \r \r         /// <summary>\r         /// Gets a thumbnail image from the specified image file by using the Computer Vision REST API.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file to use to create the thumbnail image.</param>\r         static async void MakeThumbNailRequest(string imageFilePath)\r         {\r             HttpClient client = new HttpClient();\r \r             // Request headers.\r             client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request parameters.\r             string requestParameters = \"width=200&height=150&smartCropping=true\";\r \r             // Assemble the URI for the REST API Call.\r             string uri = uriBase + \"?\" + requestParameters;\r \r             HttpResponseMessage response;\r \r             // Request body. Posts a locally stored JPEG image.\r             byte[] byteData = GetImageAsByteArray(imageFilePath);\r \r             using (ByteArrayContent content = new ByteArrayContent(byteData))\r             {\r                 // This example uses content type \"application/octet-stream\".\r                 // The other content types you can use are \"application/json\" and \"multipart/form-data\".\r                 content.Headers.ContentType = new MediaTypeHeaderValue(\"application/octet-stream\");\r                 \r                 // Execute the REST API call.\r                 response = await client.PostAsync(uri, content);\r \r                 if (response.IsSuccessStatusCode)\r                 {\r                     // Display the response data.\r                     Console.WriteLine(\"\\nResponse:\\n\");\r                     Console.WriteLine(response);\r \r                     // Get the image data.\r                     byte[] thumbnailImageData = await response.Content.ReadAsByteArrayAsync();\r                 }\r                 else\r                 {\r                     // Display the JSON error data.\r                     Console.WriteLine(\"\\nError:\\n\");\r                     Console.WriteLine(JsonPrettyPrint(await response.Content.ReadAsStringAsync()));\r                 }\r             }\r         }\r \r \r         /// <summary>\r         /// Returns the contents of the specified file as a byte array.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file to read.</param>\r         /// <returns>The byte array of the image data.</returns>\r         static byte[] GetImageAsByteArray(string imageFilePath)\r         {\r             FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);\r             BinaryReader binaryReader = new BinaryReader(fileStream);\r             return binaryReader.ReadBytes((int)fileStream.Length);\r         }\r \r \r         /// <summary>\r         /// Formats the given JSON string by adding line breaks and indents.\r         /// </summary>\r         /// <param name=\"json\">The raw JSON string to format.</param>\r         /// <returns>The formatted JSON string.</returns>\r         static string JsonPrettyPrint(string json)\r         {\r             if (string.IsNullOrEmpty(json))\r                 return string.Empty;\r \r             json = json.Replace(Environment.NewLine, \"\").Replace(\"\\t\", \"\");\r \r             StringBuilder sb = new StringBuilder();\r             bool quote = false;\r             bool ignore = false;\r             int offset = 0;\r             int indentLength = 3;\r \r             foreach (char ch in json)\r             {\r                 switch (ch)\r                 {\r                     case '\"':\r                         if (!ignore) quote = !quote;\r                         break;\r                     case '\\'':\r                         if (quote) ignore = !ignore;\r                         break;\r                 }\r \r                 if (quote)\r                     sb.Append(ch);\r                 else\r                 {\r                     switch (ch)\r                     {\r                         case '{':\r                         case '[':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', ++offset * indentLength));\r                             break;\r                         case '}':\r                         case ']':\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', --offset * indentLength));\r                             sb.Append(ch);\r                             break;\r                         case ',':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', offset * indentLength));\r                             break;\r                         case ':':\r                             sb.Append(ch);\r                             sb.Append(' ');\r                             break;\r                         default:\r                             if (ch != ' ') sb.Append(ch);\r                             break;\r                     }\r                 }\r             }\r \r             return sb.ToString().Trim();\r         }\r     }\r }\r ```\r ### <a name=\"get-a-thumbnail-response\"></a>获取缩略图响应\r \r 成功响应包含缩略图二进制文件。 如果请求失败，则响应包含错误代码和消息，以帮助确定问题所在。\r \r ```text\r Response:\r \r StatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.StreamContent, Headers:\r {\r   Pragma: no-cache\r   apim-request-id: 131eb5b4-5807-466d-9656-4c1ef0a64c9b\r   Strict-Transport-Security: max-age=31536000; includeSubDomains; preload\r   x-content-type-options: nosniff\r   Cache-Control: no-cache\r   Date: Tue, 06 Jun 2017 20:54:07 GMT\r   X-AspNet-Version: 4.0.30319\r   X-Powered-By: ASP.NET\r   Content-Length: 5800\r   Content-Type: image/jpeg\r   Expires: -1\r }\r ```\r \r ## 使用计算机视觉 API 通过 C# 执行光学字符识别 (OCR) <a name=\"OCR\"> </a>\r \r 使用[光学字符识别 (OCR) 方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fc)可以检测图像中的打印文本，并将识别到的字符提取到机器可用的字符流中。\r \r ### <a name=\"ocr-c-example-request\"></a>OCR C# 示例请求\r \r 在 Visual Studio 中创建一个新的控制台解决方案，然后将 Program.cs 替换为以下代码。 更改 `uriBase` 以使用订阅密钥的获取位置，并将 `subscriptionKey` 值替换为有效的订阅密钥。\r \r ```c#\r using System;\r using System.IO;\r using System.Net.Http;\r using System.Net.Http.Headers;\r using System.Text;\r \r namespace CSHttpClientSample\r {\r     static class Program\r     {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         const string subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         const string uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/ocr\";\r \r \r         static void Main()\r         {\r             // Get the path and filename to process from the user.\r             Console.WriteLine(\"Optical Character Recognition:\");\r             Console.Write(\"Enter the path to an image with text you wish to read: \");\r             string imageFilePath = Console.ReadLine();\r \r             // Execute the REST API call.\r             MakeOCRRequest(imageFilePath);\r \r             Console.WriteLine(\"\\nPlease wait a moment for the results to appear. Then, press Enter to exit...\\n\");\r             Console.ReadLine();\r         }\r \r \r         /// <summary>\r         /// Gets the text visible in the specified image file by using the Computer Vision REST API.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file.</param>\r         static async void MakeOCRRequest(string imageFilePath)\r         {\r             HttpClient client = new HttpClient();\r \r             // Request headers.\r             client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request parameters.\r             string requestParameters = \"language=unk&detectOrientation=true\";\r \r             // Assemble the URI for the REST API Call.\r             string uri = uriBase + \"?\" + requestParameters;\r \r             HttpResponseMessage response;\r \r             // Request body. Posts a locally stored JPEG image.\r             byte[] byteData = GetImageAsByteArray(imageFilePath);\r \r             using (ByteArrayContent content = new ByteArrayContent(byteData))\r             {\r                 // This example uses content type \"application/octet-stream\".\r                 // The other content types you can use are \"application/json\" and \"multipart/form-data\".\r                 content.Headers.ContentType = new MediaTypeHeaderValue(\"application/octet-stream\");\r                 \r                 // Execute the REST API call.\r                 response = await client.PostAsync(uri, content);\r \r                 // Get the JSON response.\r                 string contentString = await response.Content.ReadAsStringAsync();\r \r                 // Display the JSON response.\r                 Console.WriteLine(\"\\nResponse:\\n\");\r                 Console.WriteLine(JsonPrettyPrint(contentString));\r             }\r         }\r \r \r         /// <summary>\r         /// Returns the contents of the specified file as a byte array.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file to read.</param>\r         /// <returns>The byte array of the image data.</returns>\r         static byte[] GetImageAsByteArray(string imageFilePath)\r         {\r             FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);\r             BinaryReader binaryReader = new BinaryReader(fileStream);\r             return binaryReader.ReadBytes((int)fileStream.Length);\r         }\r \r \r         /// <summary>\r         /// Formats the given JSON string by adding line breaks and indents.\r         /// </summary>\r         /// <param name=\"json\">The raw JSON string to format.</param>\r         /// <returns>The formatted JSON string.</returns>\r         static string JsonPrettyPrint(string json)\r         {\r             if (string.IsNullOrEmpty(json))\r                 return string.Empty;\r \r             json = json.Replace(Environment.NewLine, \"\").Replace(\"\\t\", \"\");\r \r             StringBuilder sb = new StringBuilder();\r             bool quote = false;\r             bool ignore = false;\r             int offset = 0;\r             int indentLength = 3;\r \r             foreach (char ch in json)\r             {\r                 switch (ch)\r                 {\r                     case '\"':\r                         if (!ignore) quote = !quote;\r                         break;\r                     case '\\'':\r                         if (quote) ignore = !ignore;\r                         break;\r                 }\r \r                 if (quote)\r                     sb.Append(ch);\r                 else\r                 {\r                     switch (ch)\r                     {\r                         case '{':\r                         case '[':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', ++offset * indentLength));\r                             break;\r                         case '}':\r                         case ']':\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', --offset * indentLength));\r                             sb.Append(ch);\r                             break;\r                         case ',':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', offset * indentLength));\r                             break;\r                         case ':':\r                             sb.Append(ch);\r                             sb.Append(' ');\r                             break;\r                         default:\r                             if (ch != ' ') sb.Append(ch);\r                             break;\r                     }\r                 }\r             }\r \r             return sb.ToString().Trim();\r         }\r     }\r }\r ```\r \r ### <a name=\"ocr-example-response\"></a>OCR 示例响应\r \r 如果成功，则返回的 OCR 结果包括文本、区域范围框、线条和单词。\r \r ```json\r {\r    \"language\": \"en\",\r    \"textAngle\": -1.5000000000000335,\r    \"orientation\": \"Up\",\r    \"regions\": [\r       {\r          \"boundingBox\": \"154,49,351,575\",\r          \"lines\": [\r             {\r                \"boundingBox\": \"165,49,340,117\",\r                \"words\": [\r                   {\r                      \"boundingBox\": \"165,49,63,109\",\r                      \"text\": \"A\"\r                   },\r                   {\r                      \"boundingBox\": \"261,50,244,116\",\r                      \"text\": \"GOAL\"\r                   }\r                ]\r             },\r             {\r                \"boundingBox\": \"165,169,339,93\",\r                \"words\": [\r                   {\r                      \"boundingBox\": \"165,169,339,93\",\r                      \"text\": \"WITHOUT\"\r                   }\r                ]\r             },\r             {\r                \"boundingBox\": \"159,264,342,117\",\r                \"words\": [\r                   {\r                      \"boundingBox\": \"159,264,64,110\",\r                      \"text\": \"A\"\r                   },\r                   {\r                      \"boundingBox\": \"255,266,246,115\",\r                      \"text\": \"PLAN\"\r                   }\r                ]\r             },\r             {\r                \"boundingBox\": \"161,384,338,119\",\r                \"words\": [\r                   {\r                      \"boundingBox\": \"161,384,86,113\",\r                      \"text\": \"IS\"\r                   },\r                   {\r                      \"boundingBox\": \"274,387,225,116\",\r                      \"text\": \"JUST\"\r                   }\r                ]\r             },\r             {\r                \"boundingBox\": \"154,506,341,118\",\r                \"words\": [\r                   {\r                      \"boundingBox\": \"154,506,62,111\",\r                      \"text\": \"A\"\r                   },\r                   {\r                      \"boundingBox\": \"248,508,247,116\",\r                      \"text\": \"WISH\"\r                   }\r                ]\r             }\r          ]\r       }\r    ]\r }\r ```\r \r ## 使用计算机视觉 API 通过 C# 执行文本识别 <a name=\"RecognizeText\"> </a>\r \r ### <a name=\"handwriting-recognition-c-example\"></a>手写文本识别 C# 示例\r \r 在 Visual Studio 中创建一个新的控制台解决方案，然后将 Program.cs 替换为以下代码。 更改 `uriBase` 以使用订阅密钥的获取位置，并将 `subscriptionKey` 值替换为有效的订阅密钥。\r \r ```c#\r using System;\r using System.IO;\r using System.Linq;\r using System.Net.Http;\r using System.Net.Http.Headers;\r using System.Text;\r \r namespace CSHttpClientSample\r {\r     static class Program\r     {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         const string subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         const string uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/recognizeText\";\r \r \r         static void Main()\r         {\r             // Get the path and filename to process from the user.\r             Console.WriteLine(\"Handwriting Recognition:\");\r             Console.Write(\"Enter the path to an image with handwritten text you wish to read: \");\r             string imageFilePath = Console.ReadLine();\r \r             // Execute the REST API call.\r             ReadHandwrittenText(imageFilePath);\r \r             Console.WriteLine(\"\\nPlease wait a moment for the results to appear. Then, press Enter to exit...\\n\");\r             Console.ReadLine();\r         }\r \r \r         /// <summary>\r         /// Gets the handwritten text from the specified image file by using the Computer Vision REST API.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file with handwritten text.</param>\r         static async void ReadHandwrittenText(string imageFilePath)\r         {\r             HttpClient client = new HttpClient();\r \r             // Request headers.\r             client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request parameter. Set \"handwriting\" to false for printed text.\r             string requestParameters = \"handwriting=true\";\r \r             // Assemble the URI for the REST API Call.\r             string uri = uriBase + \"?\" + requestParameters;\r \r             HttpResponseMessage response = null;\r \r             // This operation requrires two REST API calls. One to submit the image for processing,\r             // the other to retrieve the text found in the image. This value stores the REST API\r             // location to call to retrieve the text.\r             string operationLocation = null;\r \r             // Request body. Posts a locally stored JPEG image.\r             byte[] byteData = GetImageAsByteArray(imageFilePath);\r             ByteArrayContent content = new ByteArrayContent(byteData);\r \r             // This example uses content type \"application/octet-stream\".\r             // You can also use \"application/json\" and specify an image URL.\r             content.Headers.ContentType = new MediaTypeHeaderValue(\"application/octet-stream\");\r \r             // The first REST call starts the async process to analyze the written text in the image.\r             response = await client.PostAsync(uri, content);\r \r             // The response contains the URI to retrieve the result of the process.\r             if (response.IsSuccessStatusCode)\r                 operationLocation = response.Headers.GetValues(\"Operation-Location\").FirstOrDefault();\r             else\r             {\r                 // Display the JSON error data.\r                 Console.WriteLine(\"\\nError:\\n\");\r                 Console.WriteLine(JsonPrettyPrint(await response.Content.ReadAsStringAsync()));\r                 return;\r             }\r \r             // The second REST call retrieves the text written in the image.\r             //\r             // Note: The response may not be immediately available. Handwriting recognition is an\r             // async operation that can take a variable amount of time depending on the length\r             // of the handwritten text. You may need to wait or retry this operation.\r             //\r             // This example checks once per second for ten seconds.\r             string contentString;\r             int i = 0;\r             do\r             {\r                 System.Threading.Thread.Sleep(1000);\r                 response = await client.GetAsync(operationLocation);\r                 contentString = await response.Content.ReadAsStringAsync();\r                 ++i;\r             }\r             while (i < 10 && contentString.IndexOf(\"\\\"status\\\":\\\"Succeeded\\\"\") == -1);\r \r             if (i == 10 && contentString.IndexOf(\"\\\"status\\\":\\\"Succeeded\\\"\") == -1)\r             {\r                 Console.WriteLine(\"\\nTimeout error.\\n\");\r                 return;\r             }\r \r             // Display the JSON response.\r             Console.WriteLine(\"\\nResponse:\\n\");\r             Console.WriteLine(JsonPrettyPrint(contentString));\r         }\r \r \r         /// <summary>\r         /// Returns the contents of the specified file as a byte array.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file to read.</param>\r         /// <returns>The byte array of the image data.</returns>\r         static byte[] GetImageAsByteArray(string imageFilePath)\r         {\r             FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);\r             BinaryReader binaryReader = new BinaryReader(fileStream);\r             return binaryReader.ReadBytes((int)fileStream.Length);\r         }\r \r \r         /// <summary>\r         /// Formats the given JSON string by adding line breaks and indents.\r         /// </summary>\r         /// <param name=\"json\">The raw JSON string to format.</param>\r         /// <returns>The formatted JSON string.</returns>\r         static string JsonPrettyPrint(string json)\r         {\r             if (string.IsNullOrEmpty(json))\r                 return string.Empty;\r \r             json = json.Replace(Environment.NewLine, \"\").Replace(\"\\t\", \"\");\r \r             StringBuilder sb = new StringBuilder();\r             bool quote = false;\r             bool ignore = false;\r             int offset = 0;\r             int indentLength = 3;\r \r             foreach (char ch in json)\r             {\r                 switch (ch)\r                 {\r                     case '\"':\r                         if (!ignore) quote = !quote;\r                         break;\r                     case '\\'':\r                         if (quote) ignore = !ignore;\r                         break;\r                 }\r \r                 if (quote)\r                     sb.Append(ch);\r                 else\r                 {\r                     switch (ch)\r                     {\r                         case '{':\r                         case '[':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', ++offset * indentLength));\r                             break;\r                         case '}':\r                         case ']':\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', --offset * indentLength));\r                             sb.Append(ch);\r                             break;\r                         case ',':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', offset * indentLength));\r                             break;\r                         case ':':\r                             sb.Append(ch);\r                             sb.Append(' ');\r                             break;\r                         default:\r                             if (ch != ' ') sb.Append(ch);\r                             break;\r                     }\r                 }\r             }\r \r             return sb.ToString().Trim();\r         }\r     }\r }\r ```\r \r ### <a name=\"handwriting-recognition-response\"></a>手写文本识别响应\r \r 成功响应将以 JSON 格式返回。 下面是成功响应的示例：\r \r ```json\r {\r    \"status\": \"Succeeded\",\r    \"recognitionResult\": {\r       \"lines\": [\r          {\r             \"boundingBox\": [\r                99,\r                195,\r                1309,\r                45,\r                1340,\r                292,\r                130,\r                442\r             ],\r             \"text\": \"when you write them down\",\r             \"words\": [\r                {\r                   \"boundingBox\": [\r                      152,\r                      191,\r                      383,\r                      154,\r                      341,\r                      421,\r                      110,\r                      458\r                   ],\r                   \"text\": \"when\"\r                },\r                {\r                   \"boundingBox\": [\r                      436,\r                      145,\r                      607,\r                      118,\r                      565,\r                      385,\r                      394,\r                      412\r                   ],\r                   \"text\": \"you\"\r                },\r                {\r                   \"boundingBox\": [\r                      644,\r                      112,\r                      873,\r                      76,\r                      831,\r                      343,\r                      602,\r                      379\r                   ],\r                   \"text\": \"write\"\r                },\r                {\r                   \"boundingBox\": [\r                      895,\r                      72,\r                      1092,\r                      41,\r                      1050,\r                      308,\r                      853,\r                      339\r                   ],\r                   \"text\": \"them\"\r                },\r                {\r                   \"boundingBox\": [\r                      1140,\r                      33,\r                      1400,\r                      0,\r                      1359,\r                      258,\r                      1098,\r                      300\r                   ],\r                   \"text\": \"down\"\r                }\r             ]\r          },\r          {\r             \"boundingBox\": [\r                142,\r                222,\r                1252,\r                62,\r                1269,\r                180,\r                159,\r                340\r             ],\r             \"text\": \"You remember things better\",\r             \"words\": [\r                {\r                   \"boundingBox\": [\r                      140,\r                      223,\r                      267,\r                      205,\r                      288,\r                      324,\r                      162,\r                      342\r                   ],\r                   \"text\": \"You\"\r                },\r                {\r                   \"boundingBox\": [\r                      314,\r                      198,\r                      740,\r                      137,\r                      761,\r                      256,\r                      335,\r                      317\r                   ],\r                   \"text\": \"remember\"\r                },\r                {\r                   \"boundingBox\": [\r                      761,\r                      134,\r                      1026,\r                      95,\r                      1047,\r                      215,\r                      782,\r                      253\r                   ],\r                   \"text\": \"things\"\r                },\r                {\r                   \"boundingBox\": [\r                      1046,\r                      92,\r                      1285,\r                      58,\r                      1307,\r                      177,\r                      1068,\r                      212\r                   ],\r                   \"text\": \"better\"\r                }\r             ]\r          },\r          {\r             \"boundingBox\": [\r                155,\r                405,\r                537,\r                338,\r                557,\r                449,\r                175,\r                516\r             ],\r             \"text\": \"by hand\",\r             \"words\": [\r                {\r                   \"boundingBox\": [\r                      146,\r                      408,\r                      266,\r                      387,\r                      301,\r                      495,\r                      181,\r                      516\r                   ],\r                   \"text\": \"by\"\r                },\r                {\r                   \"boundingBox\": [\r                      290,\r                      383,\r                      569,\r                      334,\r                      604,\r                      443,\r                      325,\r                      491\r                   ],\r                   \"text\": \"hand\"\r                }\r             ]\r          }\r       ]\r    }\r }\r ```\r \r "}