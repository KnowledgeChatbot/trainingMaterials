{"Title":"Service Fabric 中的运行状况监视","Description":"简要介绍 Azure Service Fabric 运行状况监视模型，使用该模型可监视群集及其应用程序和服务。","Content":"# <a name=\"introduction-to-service-fabric-health-monitoring\"></a>Service Fabric 运行状况监视简介\r Azure Service Fabric 引入了一个运行状况模型，该模型提供丰富、灵活且可扩展的运行状况评估和报告。 使用该模型，可对群集及其中所运行服务的状态进行准实时监视。 可以轻松获取运行状况信息，并在潜在问题级联并造成大规模停机之前予以更正。 在典型模型中，服务基于其本地视图发送报告，并聚合信息，以提供整体的群集级别视图。\r \r Service Fabric 组件使用这种提供丰富信息的运行状况模型报告其当前状态。 可以使用相同的机制报告多个应用程序的运行状况。 只要投入时间规划高质量的运行状况报告来捕获自定义条件，就能更轻松地检测并修复运行中应用程序的问题。\r \r <!-- Not Available VIDEO -->\r \r \r > [!NOTE]\r > 我们根据需要为监视的升级启动运行状况子系统。 Service Fabric 提供受监视的应用程序和群集升级，可以确保完全可用性、永不停机，且几乎或完全不需要用户介入。 若要实现这些目标，升级将根据配置的升级策略检查运行状况。 仅当运行状况遵从所需阈值时，才可继续升级。 否则，升级会自动回滚或暂停，以便让管理员有机会修复问题。 若要了解有关应用程序升级的详细信息，请参阅[此文](service-fabric-application-upgrade.md)。\r > \r > \r \r ## <a name=\"health-store\"></a>运行状况存储\r 运行状况存储保留群集中关于实体的运行状况相关信息，以进行轻松的检索和评估。 它作为 Service Fabric 保留的有状态服务进行实现，以确保高度可用性和伸缩性。 运行状况存储是 **fabric:/System** 应用程序的一部分，并且只要群集已启动并正在运行，即可使用。\r \r ## <a name=\"health-entities-and-hierarchy\"></a>运行状况实体和层次结构\r 运行状况实体采用逻辑层次结构进行组织，该结构会捕获不同实体之间的交互和依赖项。 基于从 Service Fabric 组件收到的报告，运行状况存储自动生成实体和层次结构。\r \r 运行状况实体镜像 Service Fabric 实体。 （例如，**运行状况应用程序实体**匹配群集中部署的应用程序实例，**运行状况节点实体**匹配 Service Fabric 群集节点。）运行状况层次结构捕获系统实体的交互并且是进行高级运行状况评估的基础。 可以通过 [Service Fabric 技术概述](service-fabric-technical-overview.md)了解 Service Fabric 的关键概念。 有关应用程序的详细信息，请参阅 [Service Fabric 应用程序模型](service-fabric-application-model.md)。\r \r 利用运行状况实体和层次结构，可有效报告、调试和监视群集和应用程序。 运行状况模型为群集中许多移动片段的运行状况提供准确而*精细*的表示。\r \r ![运行状况实体。][1]\r 运行状况实体基于父-子关系在层次结构中进行组织。\r \r [1]: ./media/service-fabric-health-introduction/servicefabric-health-hierarchy.png\r \r 运行状况实体有：\r \r * **群集**。 表示 Service Fabric 群集的运行状况。 群集运行状况报告说明影响整个群集的条件。 这些条件会影响群集中的多个实体或群集本身。 根据条件，报告者不能将问题缩小到一个或多个不正常子级范围内。 示例包括因网络分区或通信问题导致的群集拆分的中枢部分。\r * **节点**。 表示 Service Fabric 节点的运行状况。 节点运行状况报告描述影响节点功能的条件。 它们通常会影响在其上运行的所有已部署的实体。 示例包括当节点磁盘空间不足（或其他计算机范围属性，例如内存、连接）以及节点已关闭时。 节点实体由节点名称（字符串）标识。\r * **应用程序**。 表示在群集中运行的应用程序实例的运行状况。 应用程序运行状况报告描述影响应用程序整体运行状况的条件。 它们不能将范围缩小至单个的子项（服务或已部署的应用程序）。 示例包括应用程序中不同服务之间的端到端交互。 应用程序实体由应用程序名称 (URI) 标识。\r * **服务**。 表示在群集中运行的服务的运行状况。 服务运行状况报告说明影响服务整体运行状况的条件。 报告者不能将问题范围缩小到不正常分区或副本。 示例包括导致全部分区问题的服务配置（如端口或外部文件共享）。 服务实体由服务名称 (URI) 标识。\r * **分区**。 表示服务分区的运行状况。 分区运行状况报告描述影响整个副本集的条件。 示例包括当副本数目低于目标计数以及分区发生仲裁丢失时的情况。 分区实体由分区 ID (GUID) 标识。\r * **副本**。 表示有状态服务副本或无状态服务实例的运行状况。 该副本是监视器和系统组件可针对应用程序进行报告的最小单位。 对于有状态服务，示例如下：主要副本不能将操作复制到辅助副本以及复制节奏缓慢。 此外，如果无状态的实例耗尽了资源或存在连接问题，就会进行报告。 副本实体由分区 ID (GUID) 和副本或实例 ID（长型值）标识。\r * **DeployedApplication**。 表示 *在节点上运行的应用程序*的运行状况。 已部署应用程序运行状况报告说明特定于节点上的应用程序的条件，该条件不能缩小到部署在同一个节点上的服务包。 示例包括无法从该节点下载应用程序包以及在节点上设置应用程序安全主体时出现问题。 已部署应用程序由应用程序名称 (URI) 和节点名称（字符串）标识。\r * **DeployedServicePackage**。 表示在群集中节点上运行的服务包的运行状况。 它描述特定于服务包的条件，该条件不会影响同一应用程序在同一节点上的其他服务包。 示例包括服务包中的代码包无法启动以及配置包无法读取。 已部署服务包由应用程序名称 (URI)、节点名称（字符串）、服务清单名称（字符串）以及服务包激活 ID（字符串）标识。\r \r 利用运行状况模型的粒度可以轻松地检测和更正问题。 例如，如果服务没有响应，则可报告应用程序实例不正常。 该级别的报告不是理想之选，因为该问题可能不会影响该应用程序中的所有服务。 应对不正常的服务或者对特定子分区（如果有更多信息指向该分区）应用报告。 数据通过层次结构自动呈现：不正常的分区会在服务和应用程序级别显示。 这种聚合有助于更快找出问题的根本原因并解决问题。\r \r 运行状况层次结构由父-子关系组成。 群集由节点和应用程序组成。 应用程序包含服务和已部署的应用程序。 已部署的应用程序包含已部署的服务包。 服务具有分区，并且每个分区都有一个或多个副本。 节点和已部署实体之间具有特殊关系。 如果节点的机构系统组件（故障转移管理器服务）报告某一节点不正常，则它会影响已部署应用程序、服务包和在其上部署的副本。\r \r 运行状况层次结构基于最新的运行状况报告表示系统的最新状态，该报告几乎是实时信息。\r 内部和外部的监视器可以根据应用程序特定逻辑或自定义监视条件，对相同实体进行报告。 用户报告与系统报告共存。\r \r 设计大型云服务时，请投入时间规划如何报告和响应运行状况。 有了这种前期投入准备，可以更轻松地调试、监视和操作该服务。\r \r ## <a name=\"health-states\"></a>运行状况状态\r Service Fabric 使用三种健康状况来描述实体是否正常运行：“正常”、“警告”和“错误”。 发送到运行状况存储的任何报告都必须指定其中一种状态。 运行状况评估结果是其中一种状态。\r \r 可能的[运行状况](https://docs.microsoft.com/dotnet/api/system.fabric.health.healthstate)如下：\r \r * **正常**。 实体正常。 没有针对它或其子项（如果适用）报告已知问题。\r * **警告**。 实体存在一些问题，但仍可正常运行。 例如，存在延迟，但尚未造成任何功能性问题。 在某些情况下，警告条件可能无需外部干预即可自行修复。 在这些情况下，运行状况报告可唤醒意识并提供对正在发生的事情的可见性。 在其他情况下，警告条件可能会在无需用户干预的情况下降级为严重问题。\r * **错误**。 实体不正常。 应采取行动修复实体的状态，因为它无法正常工作。\r * **未知**。 运行状况存储中不存在实体。 此结果可以从合并来自多个组件的结果的分布式查询中获取。 例如，获取节点列表查询发送到 FailoverManager、ClusterManager 和 HealthManager，获取应用程序列表查询发送到 ClusterManager 和 HealthManager。 这些查询会合并来自多个系统组件的结果。 如果其他系统组件返回运行状况存储中不存在的实体，则合并结果包含未知运行状况。 实体不在存储中，因为运行状况报告尚未得到处理或该实体在删除后已被清理。\r \r ## <a name=\"health-policies\"></a>运行状况策略\r 运行状况存储应用运行状况策略，基于实体的报告和子项来确定该实体是否正常运行。\r \r > [!NOTE]\r > 可以在群集清单（适用于群集和节点运行状况评估）或应用程序清单（适用于应用程序评估及其任何子项）中指定运行状况策略。 运行状况评估请求也可以在自定义运行状况评估策略中传递，并且仅用于该评估。\r > \r > \r \r 默认情况下，Service Fabric 针对父-子层次结构关系应用严格的规则（所有内容都必须正常）。 只要其中一个子项具有一个不正常事件，父项则被视为不正常。\r \r ### <a name=\"cluster-health-policy\"></a>群集运行状况策略\r [群集运行状况策略](https://docs.microsoft.com/dotnet/api/system.fabric.health.clusterhealthpolicy)用于评估群集运行状况状态和节点运行状况状态。 可以在群集清单中对它进行定义。 如果该策略不存在，则会使用默认策略（不容许失败）。\r 群集运行状况策略包含：\r \r * [ConsiderWarningAsError](https://docs.microsoft.com/dotnet/api/system.fabric.health.clusterhealthpolicy.considerwarningaserror)。 指定是否在运行状况评估期间将“警告”运行状况报告视为错误。 默认值：false。\r * [MaxPercentUnhealthyApplications](https://docs.microsoft.com/dotnet/api/system.fabric.health.clusterhealthpolicy.maxpercentunhealthyapplications)。 指定群集被视为“错误”之前可以容忍的不正常应用程序最大百分比。\r * [MaxPercentUnhealthyNodes](https://docs.microsoft.com/dotnet/api/system.fabric.health.clusterhealthpolicy.maxpercentunhealthynodes)。 指定群集被视为“错误”之前可以容忍的不正常节点最大百分比。 在大型群集中，某些节点始终处于关闭或无法修复的状态，因此应配置此百分比以便容忍这种情况。\r * [ApplicationTypeHealthPolicyMap](https://docs.microsoft.com/dotnet/api/system.fabric.health.clusterhealthpolicy.applicationtypehealthpolicymap)。 群集运行状况评估期间，可使用应用程序类型运行状况策略，描述特殊应用程序类型。 默认情况下，所有应用程序都放入池中，并使用 MaxPercentUnhealthyApplications 进行评估。 如果某些应用程序类型应以不同的方式处理，则可以从全局池中取出这些类型。 根据与映射中应用程序类型名称关联的百分比来评估这些类型。 例如，群集中有数千个不同类型的应用程序，以及某个特殊应用程序类型的一些应用程序实例。 控制应用程序绝不应出错。 可以将全局的 MaxPercentUnhealthyApplications 指定为 20%，以容许一些失败，但如果应用程序类型为“ControlApplicationType”，请将 MaxPercentUnhealthyApplications 设为 0。 如此一来，如果其中许多应用程序的状况不良，但低于全局状况不良的百分比，则将群集评估为 Warning。 Warning 运行状况并不影响群集升级或由 Error 运行状况触发的其他监视。 但是，即使只有一个控制应用程序出错，也会造成群集不正常，根据具体的升级配置，这会触发回滚或暂停群集升级。\r   对于映射中定义的应用程序类型，所有应用程序实例都从应用程序的全局池中提出。 使用映射中的特定 MaxPercentUnhealthyApplications，根据该应用程序类型的应用程序总数对其进行评估。 所有其他应用程序都保留在全局池中，使用 MaxPercentUnhealthyApplications 进行评估。\r \r 以下示例摘自某个群集清单。 若要定义应用程序类型映射中的条目，请在参数名称前面添加“ApplicationTypeMaxPercentUnhealthyApplications-”，后接应用程序类型名称。\r \r ```xml\r <FabricSettings>\r   <Section Name=\"HealthManager/ClusterHealthPolicy\">\r     <Parameter Name=\"ConsiderWarningAsError\" Value=\"False\" />\r     <Parameter Name=\"MaxPercentUnhealthyApplications\" Value=\"20\" />\r     <Parameter Name=\"MaxPercentUnhealthyNodes\" Value=\"20\" />\r     <Parameter Name=\"ApplicationTypeMaxPercentUnhealthyApplications-ControlApplicationType\" Value=\"0\" />\r   </Section>\r </FabricSettings>\r ```\r \r ### <a name=\"application-health-policy\"></a>应用程序运行状况策略\r [应用程序运行状况策略](https://docs.microsoft.com/dotnet/api/system.fabric.health.applicationhealthpolicy)说明如何对应用程序及其子项进行事件和子项状态聚合评估。 它可以在应用程序清单（应用程序包中的 **ApplicationManifest.xml**）中定义。 如果未指定任何策略，则当运行状况报告或子项处于“警告”或“错误”健康状况时，Service Fabric 会假设实体不正常运行。\r 可配置的策略有：\r \r * [ConsiderWarningAsError](https://docs.microsoft.com/dotnet/api/system.fabric.health.applicationhealthpolicy.considerwarningaserror.aspx)。 指定是否在运行状况评估期间将“警告”运行状况报告视为错误。 默认值：false。\r * [MaxPercentUnhealthyDeployedApplications](https://docs.microsoft.com/dotnet/api/system.fabric.health.applicationhealthpolicy.maxpercentunhealthydeployedapplications)。 指定应用程序被视为“错误”之前可以保留不正常的已部署应用程序的最大容忍百分比。 此百分比的计算方式为：不正常的已部署应用程序数除以群集中目前已部署应用程序的节点数。 计算结果向上进一，以容忍少量节点上出现一次失败。 默认百分比：零。\r * [DefaultServiceTypeHealthPolicy](https://docs.microsoft.com/dotnet/api/system.fabric.health.applicationhealthpolicy.defaultservicetypehealthpolicy)。 指定默认服务类型运行状况策略，该策略会替换应用程序中所有服务类型的默认运行状况策略。\r * [ServiceTypeHealthPolicyMap](https://docs.microsoft.com/dotnet/api/system.fabric.health.applicationhealthpolicy.servicetypehealthpolicymap)。 针对每个服务类型提供服务运行状况策略的映射。 这些策略取代每个指定服务类型的默认服务类型运行状况策略。 例如，如果应用程序包含无状态网关服务类型和有状态引擎服务类型，可为其评估分别配置运行状况策略。 按服务类型指定策略时，可以更精细地控制服务的运行状况。\r \r ### <a name=\"service-type-health-policy\"></a>服务类型运行状况策略\r [服务类型运行状况策略](https://docs.microsoft.com/dotnet/api/system.fabric.health.servicetypehealthpolicy)指定如何评估和聚合服务及服务的子项。 该策略包含：\r \r * [MaxPercentUnhealthyPartitionsPerService](https://docs.microsoft.com/dotnet/api/system.fabric.health.servicetypehealthpolicy.maxpercentunhealthypartitionsperservice)。 指定服务被视为不正常之前不正常分区的最大容忍百分比。 默认百分比：零。\r * [MaxPercentUnhealthyReplicasPerPartition](https://docs.microsoft.com/dotnet/api/system.fabric.health.servicetypehealthpolicy.maxpercentunhealthyreplicasperpartition)。 指定分区被视为不正常之前不正常副本的最大容忍百分比。 默认百分比：零。\r * [MaxPercentUnhealthyServices](https://docs.microsoft.com/dotnet/api/system.fabric.health.servicetypehealthpolicy.maxpercentunhealthyservices)。 指定应用程序被视为不正常之前不正常服务的最大容忍百分比。 默认百分比：零。\r \r 以下示例摘自某个应用程序清单：\r \r ```xml\r     <Policies>\r         <HealthPolicy ConsiderWarningAsError=\"true\" MaxPercentUnhealthyDeployedApplications=\"20\">\r             <DefaultServiceTypeHealthPolicy\r                    MaxPercentUnhealthyServices=\"0\"\r                    MaxPercentUnhealthyPartitionsPerService=\"10\"\r                    MaxPercentUnhealthyReplicasPerPartition=\"0\"/>\r             <ServiceTypeHealthPolicy ServiceTypeName=\"FrontEndServiceType\"\r                    MaxPercentUnhealthyServices=\"0\"\r                    MaxPercentUnhealthyPartitionsPerService=\"20\"\r                    MaxPercentUnhealthyReplicasPerPartition=\"0\"/>\r             <ServiceTypeHealthPolicy ServiceTypeName=\"BackEndServiceType\"\r                    MaxPercentUnhealthyServices=\"20\"\r                    MaxPercentUnhealthyPartitionsPerService=\"0\"\r                    MaxPercentUnhealthyReplicasPerPartition=\"0\">\r             </ServiceTypeHealthPolicy>\r         </HealthPolicy>\r     </Policies>\r ```\r \r ## <a name=\"health-evaluation\"></a>运行状况评估\r 用户和自动化服务可以随时评估任何实体的运行状况。 若要评估实体运行状况，运行状况存储聚合实体上的所有运行状况报告，并评估其所有子项（如果适用）。 运行状况聚合算法使用运行状况策略，这类策略指定如何评估运行状况报告以及如何聚合子项健康状况（如果适用）。\r \r ### <a name=\"health-report-aggregation\"></a>运行状况报告聚合\r 一个实体可以拥有由不同报告器（系统组件或监视器）发送的针对不同属性的多个运行状况报告。 聚合使用关联的运行状况策略，尤其是应用程序或群集运行状况策略的 ConsiderWarningAsError 成员。 ConsiderWarningAsError 指定如何评估警告。\r \r 已聚合运行状况状态由实体上 *最差* 的运行状况报告触发。 如果至少有一个“错误”运行状况报告，则聚合的健康状况为“错误”。\r \r ![“错误”报告的运行状况报告聚合。][2]\r \r 包含一个或多个“错误”运行状况报告的运行状况实体评估为“错误”。 已过期运行状况报告同样如此，无论其健康状况如何。\r \r [2]: ./media/service-fabric-health-introduction/servicefabric-health-report-eval-error.png\r \r 如果没有任何“错误”报告但有一个或多个“警告”，则聚合的健康状况为“警告”或“错误”，具体取决于 ConsiderWarningAsError 策略标志。\r \r ![运行状况报告与“警告”报告聚合，ConsiderWarningAsError 为 false。][3]\r \r 运行状况报告与“警告”报告聚合，ConsiderWarningAsError 设置为 false（默认值）。\r \r [3]: ./media/service-fabric-health-introduction/servicefabric-health-report-eval-warning.png\r \r ### <a name=\"child-health-aggregation\"></a>子项运行状况聚合\r 实体的聚合健康状况反映子项健康状况（如果适用）。 用于聚合子项运行状况状态的算法基于实体类型使用适用的运行状况策略。\r \r ![子实体运行状况聚合。][4]\r \r 基于运行状况策略的子项聚合。\r \r [4]: ./media/service-fabric-health-introduction/servicefabric-health-hierarchy-eval.png\r \r 运行状况存储评估所有子项后，会根据针对不正常子项配置的最大百分比来聚合其健康状况。 此百分比取自基于实体和子项类型的策略。\r \r * 如果所有子项的状态都为“正常”，则子项的聚合健康状况为“正常”。\r * 如果子项具有“正常”状态和“警告”状态，则子项的聚合健康状况为“警告”。\r * 如果具有“错误”状态的子项数量超过允许的不正常子项最大百分比，则聚合的健康状况为“错误”。\r * 如果具有“错误”状态的子项数量在允许的不正常子项最大百分比之内，则聚合的健康状况为“警告”。\r \r ## <a name=\"health-reporting\"></a>运行状况报告\r 系统组件、系统结构应用程序和内部/外部监视器可以针对 Service Fabric 实体进行报告。 报告器基于它们正在监视的条件对监视的实体的运行状况进行 *本地* 判断。 它们无需查看任何全局状态或聚合数据。 理想行为是使用简单的报告器而不是复杂的有机体，因为后者需要分析许多内容才能推断出要发送的信息。\r \r 要将运行状况数据发送到运行状况存储，报告器需要标识受影响的实体并创建运行状况报告。 若要发送报告，请使用 [FabricClient.HealthClient.ReportHealth](https://docs.microsoft.com/dotnet/api/system.fabric.fabricclient.healthclient.reporthealth) API、`Partition` 或 `CodePackageActivationContext` 对象公开的报告运行状况 API、PowerShell cmdlet 或 REST。\r \r ### <a name=\"health-reports\"></a>运行状况报告\r 群集中每个实体的[运行状况报告](https://docs.microsoft.com/dotnet/api/system.fabric.health.healthreport)都包含以下信息：\r \r * **SourceId**。 唯一标识运行状况事件的报告器的字符串。\r * **实体标识符**。 标识对其应用了报告的实体。 它会因[实体类型](service-fabric-health-introduction.md#health-entities-and-hierarchy)而异：\r \r   * Cluster。 无。\r   * 节点。 节点名称（字符串）。\r   * 应用程序。 应用程序名称 (URI)。 表示群集中部署的应用程序实例的名称。\r   * Service。 服务名称 (URI)。 表示群集中部署的服务实例的名称。\r   * Partition。 分区 ID (GUID)。 表示分区唯一标识符。\r   * Replica。 有状态服务副本 ID 或无状态服务实例 ID (INT64)。\r   * DeployedApplication。 应用程序名称 (URI) 和节点名称（字符串）。\r   * DeployedServicePackage。 应用程序名称 (URI)、节点名称（字符串）和服务清单名称（字符串）。\r * **属性**。 允许报告器针对实体的特定属性分类运行状况事件的*字符串*（不是固定的枚举）。 例如，报告者 A 可以报告 Node01“存储”属性的运行状况，报告者 B 可以报告 Node01“连接”属性的运行状况。 在运行状况存储中，这两个报告均被视为 Node01 实体的单独运行状况事件。\r * **说明**。 报告器用于提供有关运行状况事件的详细信息的字符串。 **SourceId**、**属性**和 **HealthState** 应完整说明报告。 说明中添加了用户可读的报告相关信息。 该文本可让管理员和用户更容易了解运行状况报告。\r * **HealthState**。 说明报告的运行状况状态的[枚举](service-fabric-health-introduction.md#health-states)。 接受值的值有“正常”、“警告”和“错误”。\r * **TimeToLive**。 指示运行状况报告有效时长的时间跨度。 结合 **RemoveWhenExpired**时，它能够使运行状况存储知道如何评估过期的事件。 默认情况下，此值为无穷大，表示报告将永远有效。\r * **RemoveWhenExpired**。 布尔值。 如果设置为 true，过期的运行状况报告会自动从运行状况存储中删除，并且该报告不会影响实体运行状况评估。 仅当报告在一段指定时间内有效且报告器不需要显式清除它时使用。也用于从运行状况存储删除报告（例如，监视器被更改并停止发送包含以前的源和属性的报告）。 它可以发送具有短暂的 TimeToLive 和 RemoveWhenExpired 的报告，以清除运行状况存储中的所有以往状态。 如果该值设置为 false，过期的报告在运行状况评估中则被视为错误。 false 值向运行状况存储指示，源应该对此属性进行定期报告。 如果没有定期报告，则监视器必然存在问题。 通过将事件视为错误来捕获监视器运行状况。\r * **SequenceNumber**。 需要不断增加的正整数，它表示报告的顺序。 运行状况存储使用它来检测因网络延迟或其他问题而较晚收到的过时报告。 针对相同的实体、源和属性，如果序列号小于或等于最新应用的序列号，则报告会被拒绝。 如果未指定，则会自动生成序列号。 只有在报告状态转换时，才需放入序列号。 在此情况下，源需要记住它所发送的报告，并保留信息以便在故障转移时进行恢复。\r \r 每个运行状况报告都需要四条信息（SourceId、ntity identifier、Property 和 HealthState）。 不允许 SourceId 字符串以前缀“**System.**”开头，该字符串是为系统报告保留的。 对于相同实体，相同的源和属性只有一个报告。 如果为相同的源和属性生成多个报告，它们会在运行状况客户端（如果按批处理）或在运行状况存储端覆盖彼此。 根据序列号进行这种替换操作：较新的报告（具有更高的序列号）替换较旧的报告。\r \r ### <a name=\"health-events\"></a>运行状况事件\r 在内部，运行状况存储保留[运行状况事件](https://docs.microsoft.com/dotnet/api/system.fabric.health.healthevent)，其中包含报告的所有信息以及其他元数据。 元数据包括向运行状况客户端提供报告的时间，以及在服务器端修改该报告的时间。 运行状况事件通过[运行状况查询](service-fabric-view-entities-aggregated-health.md#health-queries)返回。\r \r 添加的元数据包含：\r \r * **SourceUtcTimestamp**。 报告提供给运行状况客户端的时间（协调世界时）。\r * **LastModifiedUtcTimestamp**。 上次在服务器端修改报告的时间（协调世界时）。\r * **IsExpired**。 用于指示运行状况存储执行查询时报告是否过期的标志。 仅当 RemoveWhenExpired 为 false 时，事件才可能过期。 否则，事件不会通过查询返回，并将从存储中删除。\r * **LastOkTransitionAt**、**LastWarningTransitionAt**、**LastErrorTransitionAt**。 上一次“正常”/“警告”/“错误”转换的时间。 这些字段会针对事件的运行状况状态转换提供历史记录。\r \r 状态转换字段可用于提供更智能的警报或“历史”运行状况事件信息。 适用的情景如下：\r \r * 属性处于“警告”/“错误”状态超过 X 分钟时发出警报。 在一段时间内检查状态可避免对暂时性状态发起警报。 例如，当健康状况处于“警告”状态超过 5 分钟时发出警报，可表达为 (HealthState == Warning and Now - LastWarningTransitionTime > 5 minutes)。\r * 仅针对过去 X 分钟内更改的状态发出警报。 如果在指定时间之前，报告已处于“错误”状态，则可以忽略它，因为之前已对其进行标志。\r * 如果属性在“警告”和“错误”之间切换，则确定它处于不正常状态（即不为“正常”）的时长。 例如，当属性处于不正常状态超过 5 分钟时发出警报，可以表达为 (HealthState != Ok and Now - LastOkTransitionTime > 5 minutes)。\r \r ## <a name=\"example-report-and-evaluate-application-health\"></a>示例：报告和评估应用程序运行状况\r 下列示例在源 **MyWatchdog** 中的应用程序 **fabric:/WordCount** 上通过 PowerShell 发送运行状况报告。 运行状况报告包含有关“错误”运行状况状态下的运行状况属性可用性的信息，含无限 TimeToLive。 然后，它会查询应用程序运行状况，此查询会返回已聚合运行状况状态错误和运行状况事件列表中已报告的运行状况事件。\r \r ```powershell\r PS C:\\> Send-ServiceFabricApplicationHealthReport -ApplicationName fabric:/WordCount -SourceId \"MyWatchdog\" -HealthProperty \"Availability\" -HealthState Error\r \r PS C:\\> Get-ServiceFabricApplicationHealth fabric:/WordCount -ExcludeHealthStatistics\r \r ApplicationName                 : fabric:/WordCount\r AggregatedHealthState           : Error\r UnhealthyEvaluations            :\r                                   Error event: SourceId='MyWatchdog', Property='Availability'.\r \r ServiceHealthStates             :\r                                   ServiceName           : fabric:/WordCount/WordCountService\r                                   AggregatedHealthState : Error\r \r                                   ServiceName           : fabric:/WordCount/WordCountWebService\r                                   AggregatedHealthState : Ok\r \r DeployedApplicationHealthStates :\r                                   ApplicationName       : fabric:/WordCount\r                                   NodeName              : _Node_0\r                                   AggregatedHealthState : Ok\r \r                                   ApplicationName       : fabric:/WordCount\r                                   NodeName              : _Node_2\r                                   AggregatedHealthState : Ok\r \r                                   ApplicationName       : fabric:/WordCount\r                                   NodeName              : _Node_3\r                                   AggregatedHealthState : Ok\r \r                                   ApplicationName       : fabric:/WordCount\r                                   NodeName              : _Node_4\r                                   AggregatedHealthState : Ok\r \r                                   ApplicationName       : fabric:/WordCount\r                                   NodeName              : _Node_1\r                                   AggregatedHealthState : Ok\r \r HealthEvents                    :\r                                   SourceId              : System.CM\r                                   Property              : State\r                                   HealthState           : Ok\r                                   SequenceNumber        : 360\r                                   SentAt                : 3/22/2016 7:56:53 PM\r                                   ReceivedAt            : 3/22/2016 7:56:53 PM\r                                   TTL                   : Infinite\r                                   Description           : Application has been created.\r                                   RemoveWhenExpired     : False\r                                   IsExpired             : False\r                                   Transitions           : Error->Ok = 3/22/2016 7:56:53 PM, LastWarning = 1/1/0001 12:00:00 AM\r \r                                   SourceId              : MyWatchdog\r                                   Property              : Availability\r                                   HealthState           : Error\r                                   SequenceNumber        : 131032204762818013\r                                   SentAt                : 3/23/2016 3:27:56 PM\r                                   ReceivedAt            : 3/23/2016 3:27:56 PM\r                                   TTL                   : Infinite\r                                   Description           :\r                                   RemoveWhenExpired     : False\r                                   IsExpired             : False\r                                   Transitions           : Ok->Error = 3/23/2016 3:27:56 PM, LastWarning = 1/1/0001 12:00:00 AM\r ```\r \r ## <a name=\"health-model-usage\"></a>运行状况模型用法\r 利用运行状况模型，云服务和基础 Service Fabric 平台可进行缩放，因为监视和运行状况判断分布在群集内的不同监视器中。\r 其他系统在群集级别具有单个集中式服务，该服务分析服务发出的所有 *可能* 有用的信息。 此方法会妨碍其可伸缩性。 此外，它不允许使用它们收集具体的信息来帮助识别问题和潜在问题，并尽可能接近根本原因。\r \r 运行状况模型大量用于监视和诊断、评估群集和应用程序运行状况以及监视的升级。 其他服务使用运行状况数据执行自动修复、生成群集运行状况历史记录，以及对某些条件发出警报。\r \r ## <a name=\"next-steps\"></a>后续步骤\r [查看 Service Fabric 运行状况报告](service-fabric-view-entities-aggregated-health.md)\r \r [使用系统运行状况报告进行故障排除](service-fabric-understand-and-troubleshoot-with-system-health-reports.md)\r \r [如何报告和检查服务运行状况](service-fabric-diagnostics-how-to-report-and-check-service-health.md)\r \r [添加自定义 Service Fabric 运行状况报告](service-fabric-report-health.md)\r \r [在本地监视和诊断服务](service-fabric-diagnostics-how-to-monitor-and-diagnose-services-locally.md)\r \r [Service Fabric 应用程序升级](service-fabric-application-upgrade.md)\r \r <!--Update_Description: update meta properties -->"}