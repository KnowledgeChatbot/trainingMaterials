{"Title":"使用 Spark 中的 Python 库分析网站日志 - Azure","Description":"此笔记本演示如何结合使用自定义库和 Azure HDInsight 上的 Spark 来分析日志数据。","Content":"# <a name=\"analyze-website-logs-using-a-custom-python-library-with-spark-cluster-on-hdinsight\"></a>将自定义 Python 库与 HDInsight 上的 Spark 群集配合使用来分析网站日志\r \r 此笔记本演示如何结合使用自定义库和 HDInsight 上的 Spark 来分析日志数据。 我们使用的自定义库是一个名为 **iislogparser.py**的 Python 库。\r \r > [!TIP]\r > 本教程也以在 HDInsight 中创建的 Spark (Linux) 群集上的 Jupyter notebook 的形式提供。 笔记本体验允许通过笔记本本身运行 Python 代码段。 若要从 notebook 内部执行本教程，请创建 Spark 群集，启动 Jupyter notebook (`https://CLUSTERNAME.azurehdinsight.cn/jupyter`)，然后运行 **PySpark** 文件夹下的 notebook“使用自定义 library.ipynb 分析 Spark 的日志”。\r >\r >\r \r **先决条件：**\r \r 必须满足以下条件：\r \r * Azure 订阅。 请参阅[获取 Azure 试用版](https://www.azure.cn/pricing/1rmb-trial/)。\r \r * HDInsight 上的 Apache Spark 群集。 有关说明，请参阅[在 Azure HDInsight 中创建 Apache Spark 群集](apache-spark-jupyter-spark-sql.md)。\r \r ## <a name=\"save-raw-data-as-an-rdd\"></a>将原始数据另存为 RDD\r 在本部分中，将使用与 HDInsight 中的 Apache Spark 群集关联的 [Jupyter](https://jupyter.org) 笔记本来运行用于处理原始示例数据并将其保存为 Hive 表的作业。 示例数据是所有群集在默认情况下均会提供的 .csv 文件 (hvac.csv)。\r \r 将数据保存为 Hive 表之后，下一部分我们将使用 Power BI 和 Tableau 等 BI 工具来连接该 Hive 表。\r \r 1. 在 [Azure 门户](https://portal.azure.cn/)上的启动板中，单击 Spark 群集的磁贴（如果已将它固定到启动板）。 也可以单击“全部浏览” > “HDInsight 群集”导航到群集。   \r 2. 在 Spark 群集边栏选项卡中单击“群集仪表板”，然后单击“Jupyter Notebook”。 出现提示时，请输入群集的管理员凭据。\r \r    > [!NOTE]\r    > 也可以在浏览器中打开以下 URL 访问群集的 Jupyter 笔记本。 将 **CLUSTERNAME** 替换为群集的名称：\r    >\r    > `https://CLUSTERNAME.azurehdinsight.cn/jupyter`\r    >\r    >\r 3. 创建新的笔记本。 单击“新建”，然后单击“PySpark”。\r \r     ![创建新的 Jupyter 笔记本](./media/apache-spark-custom-library-website-log-analysis/hdinsight-create-jupyter-notebook.png \"创建新的 Jupyter 笔记本\")\r 4. 随即创建新笔记本，并以 Untitled.pynb 名称打开。 单击顶部的笔记本名称，并输入一个友好名称。\r \r     ![提供笔记本的名称](./media/apache-spark-custom-library-website-log-analysis/hdinsight-name-jupyter-notebook.png \"提供笔记本的名称\")\r 5. 使用笔记本是使用 PySpark 内核创建的，因此不需要显式创建任何上下文。 运行第一个代码单元格时，系统自动创建 Spark 和 Hive 上下文。 首先，可以导入此方案所需的类型。 将以下代码段粘贴到空白单元格中，并按 **SHIFT + ENTER**。\r \r         from pyspark.sql import Row\r         from pyspark.sql.types import *\r \r 1. 使用群集上已可用的示例日志数据创建 RDD。 可以从 **\\HdiSamples\\HdiSamples\\WebsiteLogSampleData\\SampleLog\\909f2b.log** 中访问与群集关联的默认存储帐户中的数据。\r \r         logs = sc.textFile('wasb:///HdiSamples/HdiSamples/WebsiteLogSampleData/SampleLog/909f2b.log')\r \r 1. 检索示例日志集以验证上一步是否成功完成。\r \r         logs.take(5)\r \r     应该会看到与下面类似的输出：\r \r         # -----------------\r         # THIS IS AN OUTPUT\r         # -----------------\r \r         [u'#Software: Microsoft Internet Information Services 8.0',\r          u'#Fields: date time s-sitename cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) cs(Cookie) cs(Referer) cs-host sc-status sc-substatus sc-win32-status sc-bytes cs-bytes time-taken',\r          u'2014-01-01 02:01:09 SAMPLEWEBSITE GET /blogposts/mvc4/step2.png X-ARR-LOG-ID=2ec4b8ad-3cf0-4442-93ab-837317ece6a1 80 - 1.54.23.196 Mozilla/5.0+(Windows+NT+6.3;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/31.0.1650.63+Safari/537.36 - http://weblogs.asp.net/sample/archive/2007/12/09/asp-net-mvc-framework-part-4-handling-form-edit-and-post-scenarios.aspx www.sample.com 200 0 0 53175 871 46',\r          u'2014-01-01 02:01:09 SAMPLEWEBSITE GET /blogposts/mvc4/step3.png X-ARR-LOG-ID=9eace870-2f49-4efd-b204-0d170da46b4a 80 - 1.54.23.196 Mozilla/5.0+(Windows+NT+6.3;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/31.0.1650.63+Safari/537.36 - http://weblogs.asp.net/sample/archive/2007/12/09/asp-net-mvc-framework-part-4-handling-form-edit-and-post-scenarios.aspx www.sample.com 200 0 0 51237 871 32',\r          u'2014-01-01 02:01:09 SAMPLEWEBSITE GET /blogposts/mvc4/step4.png X-ARR-LOG-ID=4bea5b3d-8ac9-46c9-9b8c-ec3e9500cbea 80 - 1.54.23.196 Mozilla/5.0+(Windows+NT+6.3;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/31.0.1650.63+Safari/537.36 - http://weblogs.asp.net/sample/archive/2007/12/09/asp-net-mvc-framework-part-4-handling-form-edit-and-post-scenarios.aspx www.sample.com 200 0 0 72177 871 47']\r \r ## <a name=\"analyze-log-data-using-a-custom-python-library\"></a>使用自定义 Python 库分析日志数据\r 1. 在上面的输出中，前几行包括标头信息，其余的每一行均与此标头中描述的架构相匹配。 分析此类日志可能很复杂。 因此，可使用自定义 Python 库 (**iislogparser.py**)，它能使分析这类日志变得容易得多。 默认情况下，此库包含在 **/HdiSamples/HdiSamples/WebsiteLogSampleData/iislogparser.py**处 HDInsight 上的 Spark 群集中。\r \r     但是，此库不在 `PYTHONPATH` 中，因此不能通过 `import iislogparser` 等导入语句来使用它。 要使用此库，必须将其分发给所有辅助角色节点。 运行以下代码片段。\r \r         sc.addPyFile('wasb:///HdiSamples/HdiSamples/WebsiteLogSampleData/iislogparser.py')\r \r \r 1. 如果日志行是标题行，则 `iislogparser` 提供返回 `None` 的函数 `parse_log_line`，并且在遇到日志行时返回 `LogLine` 类的实例。 使用 `LogLine` 类从 RDD 中仅提取日志行：\r \r         def parse_line(l):\r             import iislogparser\r             return iislogparser.parse_log_line(l)\r         logLines = logs.map(parse_line).filter(lambda p: p is not None).cache()\r 2. 检索一些提取的日志行，以验证该步骤是否成功完成。\r \r        logLines.take(2)\r \r    输出应如下所示：\r \r        # -----------------\r        # THIS IS AN OUTPUT\r        # -----------------\r \r        [2014-01-01 02:01:09 SAMPLEWEBSITE GET /blogposts/mvc4/step2.png X-ARR-LOG-ID=2ec4b8ad-3cf0-4442-93ab-837317ece6a1 80 - 1.54.23.196 Mozilla/5.0+(Windows+NT+6.3;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/31.0.1650.63+Safari/537.36 - http://weblogs.asp.net/sample/archive/2007/12/09/asp-net-mvc-framework-part-4-handling-form-edit-and-post-scenarios.aspx www.sample.com 200 0 0 53175 871 46,\r         2014-01-01 02:01:09 SAMPLEWEBSITE GET /blogposts/mvc4/step3.png X-ARR-LOG-ID=9eace870-2f49-4efd-b204-0d170da46b4a 80 - 1.54.23.196 Mozilla/5.0+(Windows+NT+6.3;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/31.0.1650.63+Safari/537.36 - http://weblogs.asp.net/sample/archive/2007/12/09/asp-net-mvc-framework-part-4-handling-form-edit-and-post-scenarios.aspx www.sample.com 200 0 0 51237 871 32]\r 3. 反过来，`LogLine` 类具有一些有用的方法，如 `is_error()`，可返回日志条目是否具有错误代码。 使用此类计算提取日志行中的错误数，然后将所有错误记录到另一个文件中。\r \r        errors = logLines.filter(lambda p: p.is_error())\r        numLines = logLines.count()\r        numErrors = errors.count()\r        print 'There are', numErrors, 'errors and', numLines, 'log entries'\r        errors.map(lambda p: str(p)).saveAsTextFile('wasb:///HdiSamples/HdiSamples/WebsiteLogSampleData/SampleLog/909f2b-2.log')\r \r    应该看到如下输出：\r \r        # -----------------\r        # THIS IS AN OUTPUT\r        # -----------------\r \r        There are 30 errors and 646 log entries\r 4. 还可使用 **Matplotlib** 构造数据的可视化效果。 例如，如果要找出请求长时间运行的原因，可能需要查找平均执行时间最长的文件。\r    下面的代码片段检索执行请求花费时间最长的前 25 个资源。\r \r        def avgTimeTakenByKey(rdd):\r            return rdd.combineByKey(lambda line: (line.time_taken, 1),\r                                    lambda x, line: (x[0] + line.time_taken, x[1] + 1),\r                                    lambda x, y: (x[0] + y[0], x[1] + y[1]))\\\r                      .map(lambda x: (x[0], float(x[1][0]) / float(x[1][1])))\r \r        avgTimeTakenByKey(logLines.map(lambda p: (p.cs_uri_stem, p))).top(25, lambda x: x[1])\r \r    应该看到如下输出：\r \r        # -----------------\r        # THIS IS AN OUTPUT\r        # -----------------\r \r        [(u'/blogposts/mvc4/step13.png', 197.5),\r         (u'/blogposts/mvc2/step10.jpg', 179.5),\r         (u'/blogposts/extractusercontrol/step5.png', 170.0),\r         (u'/blogposts/mvc4/step8.png', 159.0),\r         (u'/blogposts/mvcrouting/step22.jpg', 155.0),\r         (u'/blogposts/mvcrouting/step3.jpg', 152.0),\r         (u'/blogposts/linqsproc1/step16.jpg', 138.75),\r         (u'/blogposts/linqsproc1/step26.jpg', 137.33333333333334),\r         (u'/blogposts/vs2008javascript/step10.jpg', 127.0),\r         (u'/blogposts/nested/step2.jpg', 126.0),\r         (u'/blogposts/adminpack/step1.png', 124.0),\r         (u'/BlogPosts/datalistpaging/step2.png', 118.0),\r         (u'/blogposts/mvc4/step35.png', 117.0),\r         (u'/blogposts/mvcrouting/step2.jpg', 116.5),\r         (u'/blogposts/aboutme/basketball.jpg', 109.0),\r         (u'/blogposts/anonymoustypes/step11.jpg', 109.0),\r         (u'/blogposts/mvc4/step12.png', 106.0),\r         (u'/blogposts/linq8/step0.jpg', 105.5),\r         (u'/blogposts/mvc2/step18.jpg', 104.0),\r         (u'/blogposts/mvc2/step11.jpg', 104.0),\r         (u'/blogposts/mvcrouting/step1.jpg', 104.0),\r         (u'/blogposts/extractusercontrol/step1.png', 103.0),\r         (u'/blogposts/sqlvideos/sqlvideos.jpg', 102.0),\r         (u'/blogposts/mvcrouting/step21.jpg', 101.0),\r         (u'/blogposts/mvc4/step1.png', 98.0)]\r 5. 还可以图绘形式显示此信息。 创建绘图的第一步是创建一个临时表 **AverageTime**。 该表按照时间对日志进行分组，以查看在任何特定时间是否存在任何异常延迟峰值。\r \r        avgTimeTakenByMinute = avgTimeTakenByKey(logLines.map(lambda p: (p.datetime.minute, p))).sortByKey()\r        schema = StructType([StructField('Minutes', IntegerType(), True),\r                             StructField('Time', FloatType(), True)])\r \r        avgTimeTakenByMinuteDF = sqlContext.createDataFrame(avgTimeTakenByMinute, schema)\r        avgTimeTakenByMinuteDF.registerTempTable('AverageTime')\r 6. 接下来可以运行以下 SQL 查询以获取 **AverageTime** 表中的所有记录。\r \r        %%sql -o averagetime\r        SELECT * FROM AverageTime\r \r    后接 `-o averagetime` 的 `%%sql` magic 可确保查询输出本地保存在 Jupyter 服务器上（通常在群集的头节点）。 输出作为 [Pandas](http://pandas.pydata.org/) 数据帧进行保存，指定名称为 **averagetime**。\r \r    应该看到如下输出：\r \r    ![SQL 查询输出](./media/apache-spark-custom-library-website-log-analysis/hdinsight-jupyter-sql-qyery-output.png \"SQL 查询输出\")\r \r    有关 `%%sql` magic 的详细信息，请参阅 [%%sql magic 支持的参数](apache-spark-jupyter-notebook-kernels.md#parameters-supported-with-the-sql-magic)。\r 7. 现可使用 Matplotlib（用于构造数据效果可视化的库）创建绘图。 因为必须从本地保存的 **averagetime** 数据帧中创建绘图，所以代码片段必须以 `%%local` magic 开头。 这可确保代码在 Jupyter 服务器上本地运行。\r \r        %%local\r        %matplotlib inline\r        import matplotlib.pyplot as plt\r \r        plt.plot(averagetime['Minutes'], averagetime['Time'], marker='o', linestyle='--')\r        plt.xlabel('Time (min)')\r        plt.ylabel('Average time taken for request (ms)')\r \r    应该看到如下输出：\r \r    ![Matplotlib 输出](./media/apache-spark-custom-library-website-log-analysis/hdinsight-apache-spark-web-log-analysis-plot.png \"Matplotlib 输出\")\r 8. 完成运行应用程序之后，应该要关闭笔记本以释放资源。 为此，请在 Notebook 的“文件”菜单中，单击“关闭并停止”。 这将会关闭 notebook。\r \r ## <a name=\"seealso\"></a>另请参阅\r * [概述：Azure HDInsight 上的 Apache Spark](apache-spark-overview.md)\r \r ### <a name=\"scenarios\"></a>方案\r * [Spark 和 BI：使用 HDInsight 中的 Spark 和 BI 工具执行交互式数据分析](apache-spark-use-bi-tools.md)\r * [Spark 和机器学习：使用 HDInsight 中的 Spark 对使用 HVAC 数据生成温度进行分析](apache-spark-ipython-notebook-machine-learning.md)\r * [Spark 和机器学习：使用 HDInsight 中的 Spark 预测食品检查结果](apache-spark-machine-learning-mllib-ipython.md)\r * [Spark 流式处理：使用 HDInsight 中的 Spark 生成实时流式处理应用程序](../hdinsight-apache-spark-eventhub-streaming.md)\r \r ### <a name=\"create-and-run-applications\"></a>创建和运行应用程序\r * [使用 Scala 创建独立的应用程序](apache-spark-create-standalone-application.md)\r * [使用 Livy 在 Spark 群集中远程运行作业](apache-spark-livy-rest-interface.md)\r \r ### <a name=\"tools-and-extensions\"></a>工具和扩展\r * [使用适用于 IntelliJ IDEA 的 HDInsight 工具插件创建和提交 Spark Scala 应用程序](apache-spark-intellij-tool-plugin.md)\r * [使用用于 IntelliJ IDEA 的 HDInsight 工具插件远程调试 Spark 应用程序](../hdinsight-apache-spark-intellij-tool-plugin-debug-jobs-remotely.md)\r * [在 HDInsight 上的 Spark 群集中使用 Zeppelin 笔记本](apache-spark-zeppelin-notebook.md)\r * [在 HDInsight 的 Spark 群集中可用于 Jupyter 笔记本的内核](apache-spark-jupyter-notebook-kernels.md)\r * [Use external packages with Jupyter notebooks（将外部包与 Jupyter 笔记本配合使用）](apache-spark-jupyter-notebook-use-external-packages.md)\r * [Install Jupyter on your computer and connect to an HDInsight Spark cluster（在计算机上安装 Jupyter 并连接到 HDInsight Spark 群集）](apache-spark-jupyter-notebook-install-locally.md)\r \r ### <a name=\"manage-resources\"></a>管理资源\r * [管理 Azure HDInsight 中 Apache Spark 群集的资源](apache-spark-resource-manager.md)\r * [Track and debug jobs running on an Apache Spark cluster in HDInsight（跟踪和调试 HDInsight 中的 Apache Spark 群集上运行的作业）](apache-spark-job-debugging.md)\r \r \r \r <!--Update_Description: update wording and link references-->"}