{"Title":"Azure Cosmos DB：使用 Golang 和 Azure 门户生成 MongoDB API 控制台应用","Description":"演示一个可以用来连接和查询 Azure Cosmos DB 的 Golang 代码示例","Content":"# <a name=\"azure-cosmos-db-build-a-mongodb-api-console-app-with-golang-and-the-azure-portal\"></a>Azure Cosmos DB：使用 Golang 和 Azure 门户生成 MongoDB API 控制台应用\r \r Azure Cosmos DB 由 世纪互联 提供，是多个区域分布的多模型数据库服务。 可快速创建和查询文档及键/值，这两者都受益于 Azure Cosmos DB 核心的多个区域分发和水平缩放功能。\r <!-- Not Available on Graph -->\r <!-- Notice: 全球分布 to 多个区域分布 -->\r \r 本快速入门演示如何使用以 [Golang](https://golang.org/) 编写的现有 [MongoDB](/cosmos-db/mongodb-introduction) 应用，并将其连接到支持 MongoDB 客户端连接的 Azure Cosmos DB 数据库。\r \r 换而言之，Golang 应用程序仅知道它要使用 MongoDB API 连接到某个数据库。 应用程序完全知道数据存储在 Azure Cosmos DB 中。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r - Azure 订阅。 如果没有 Azure 订阅，可在开始前创建一个[试用帐户](https://www.azure.cn/pricing/1rmb-trial)。 \r \r   [!INCLUDE [cosmos-db-emulator-mongodb](../../includes/cosmos-db-emulator-mongodb.md)]\r \r - [Go](https://golang.org/dl/) 以及 [Go](https://golang.org/) 语言的基础知识。\r - IDE — [Gogland](https://www.jetbrains.com/go/)（由 Jetbrains 开发）、[Visual Studio Code](https://code.visualstudio.com/)（由 Microsoft 开发）或 [Atom](https://atom.io/)。 本教程使用 Goglang。\r \r <a id=\"create-account\"></a>\r ## <a name=\"create-a-database-account\"></a>创建数据库帐户\r \r [!INCLUDE [cosmos-db-create-dbaccount](../../includes/cosmos-db-create-dbaccount-mongodb.md)]\r \r ## <a name=\"clone-the-sample-application\"></a>克隆示例应用程序\r \r 克隆示例应用程序，并安装所需包。\r \r 1. 在 GOROOT\\src 文件夹（默认位于 C:\\Go\\ 中）中创建名为 CosmosDBSample 的文件夹。\r 2. 使用 git 终端窗口（例如 git bash）运行以下命令，将示例存储库克隆到 CosmosDBSample 文件夹中。 \r \r     ```bash\r     git clone https://github.com/Azure-Samples/azure-cosmos-db-mongodb-golang-getting-started.git\r     ```\r 3.  运行以下命令以获取 mgo 包。 \r \r     ```\r     go get gopkg.in/mgo.v2\r     ```\r \r [mgo](http://labix.org/mgo)（发音同 *mango*）驱动程序是适用于 [Go 语言](http://golang.org/)的 [MongoDB](http://www.mongodb.org/) 驱动程序，该语言采用很简单的 API 和标准的 Go 惯用语，实现了多种经过严格测试的精选功能。\r \r <a id=\"connection-string\"></a>\r \r ## <a name=\"update-your-connection-string\"></a>更新连接字符串\r \r 现在返回到 Azure 门户，获取连接字符串信息，并将其复制到应用。\r \r 1. 单击左侧导航菜单中的“快速启动”，并单击“其他”，查看 Go 应用程序所需的连接字符串信息。\r \r 2. 在 Goglang 的 GOROOT\\CosmosDBSample 目录中打开 main.go 文件，并使用 Azure 门户中的连接字符串信息更新以下代码行，如以下屏幕截图所示。 \r \r     数据库名称是 Azure 门户连接字符串窗格中 **Host** 值的前缀。 就下图所示帐户来说，数据库名称为 golang-coach。\r \r     ```go\r     Database: \"The prefix of the Host value in the Azure portal\",\r     Username: \"The Username in the Azure portal\",\r     Password: \"The Password in the Azure portal\",\r     ```\r \r     ![Azure 门户的“快速启动”窗格中的“其他”选项卡，显示连接字符串信息](./media/create-mongodb-golang/cosmos-db-golang-connection-string.png)\r \r 3. 保存 main.go 文件。\r \r ## <a name=\"review-the-code\"></a>查看代码\r \r 让我们快速查看一下 main.go 文件中的情况。 \r \r ### <a name=\"connecting-the-go-app-to-azure-cosmos-db\"></a>将 Go 应用连接到 Azure Cosmos DB\r \r Azure Cosmos DB 支持启用了 SSL 的 MongoDB。 若要连接到启用了 SSL 的 MongoDB，需在 [mgo.DialInfo](http://gopkg.in/mgo.v2#DialInfo) 中定义 **DialServer** 函数，并使用 [tls.*Dial*](http://golang.org/pkg/crypto/tls#Dial) 函数进行连接。\r \r 以下 Golang 代码片段通过 Azure Cosmos DB MongoDB API 连接 Go 应用。 *DialInfo* 类包含与 MongoDB 群集建立会话的选项。\r \r ```go\r // DialInfo holds options for establishing a session with a MongoDB cluster.\r dialInfo := &mgo.DialInfo{\r     Addrs:    []string{\"golang-couch.documents.azure.cn:10255\"}, // Get HOST + PORT\r     Timeout:  60 * time.Second,\r     Database: \"database\", // It can be anything\r     Username: \"username\", // Username\r     Password: \"Azure database connect password from Azure Portal\", // PASSWORD\r     DialServer: func(addr *mgo.ServerAddr) (net.Conn, error) {\r         return tls.Dial(\"tcp\", addr.String(), &tls.Config{})\r     },\r }\r \r // Create a session which maintains a pool of socket connections\r // to our Azure Cosmos DB MongoDB database.\r session, err := mgo.DialWithInfo(dialInfo)\r \r if err != nil {\r     fmt.Printf(\"Can't connect to mongo, go error %v\\n\", err)\r     os.Exit(1)\r }\r \r defer session.Close()\r \r // SetSafe changes the session safety mode.\r // If the safe parameter is nil, the session is put in unsafe mode, \r // and writes become fire-and-forget,\r // without error checking. The unsafe mode is faster since operations won't hold on waiting for a confirmation.\r // \r session.SetSafe(&mgo.Safe{})\r ```\r \r 没有 SSL 连接时，使用 **mgo.Dial()** 方法。 对于 SSL 连接，**mgo.DialWithInfo()** 方法是必需的。\r \r 可以使用 **DialWIthInfo{}** 对象的实例来创建会话对象。 建立会话以后，即可使用以下代码片段访问集合：\r \r ```go\r collection := session.DB(\"database\").C(\"package\")\r ```\r \r <a id=\"create-document\"></a>\r \r ### <a name=\"create-a-document\"></a>创建文档\r \r ```go\r // Model\r type Package struct {\r     Id bson.ObjectId  `bson:\"_id,omitempty\"`\r     FullName      string\r     Description   string\r     StarsCount    int\r     ForksCount    int\r     LastUpdatedBy string\r }\r \r // insert Document in collection\r err = collection.Insert(&Package{\r     FullName:\"react\",\r     Description:\"A framework for building native apps with React.\",\r     ForksCount: 11392,\r     StarsCount:48794,\r     LastUpdatedBy:\"shergin\",\r \r })\r \r if err != nil {\r     log.Fatal(\"Problem inserting data: \", err)\r     return\r }\r ```\r \r ### <a name=\"query-or-read-a-document\"></a>查询或读取文档\r \r Azure Cosmos DB 支持对存储在每个集合中的 JSON 文档进行各种查询。 下面的示例代码演示可针对集合中文档运行的查询。\r \r ```go\r // Get a Document from the collection\r result := Package{}\r err = collection.Find(bson.M{\"fullname\": \"react\"}).One(&result)\r if err != nil {\r     log.Fatal(\"Error finding record: \", err)\r     return\r }\r \r fmt.Println(\"Description:\", result.Description)\r ```\r \r ### <a name=\"update-a-document\"></a>更新文档\r \r ```go\r // Update a document\r updateQuery := bson.M{\"_id\": result.Id}\r change := bson.M{\"$set\": bson.M{\"fullname\": \"react-native\"}}\r err = collection.Update(updateQuery, change)\r if err != nil {\r     log.Fatal(\"Error updating record: \", err)\r     return\r }\r ```\r \r ### <a name=\"delete-a-document\"></a>删除文档\r \r Azure Cosmos DB 支持删除 JSON 文档。\r \r ```go\r // Delete a document\r query := bson.M{\"_id\": result.Id}\r err = collection.Remove(query)\r if err != nil {\r    log.Fatal(\"Error deleting record: \", err)\r    return\r }\r ```\r \r ## <a name=\"run-the-app\"></a>运行应用程序\r \r 1. 在 Goglang 中，确保 GOPATH（依次单击“文件”、“设置”、“Go”、“GOPATH”即可找到）包含安装 gopkg 时所在的位置，默认为 USERPROFILE\\go。 \r 2. 注释掉用于删除文档的行（即第 91-96 行），这样就能在运行应用后看到文档。\r 3. 在 Goglang 中依次单击“运行”、“运行‘生成 main.go 并运行’”。\r \r     应用完成后，将会显示在[创建文档](#create-document)中创建的文档的说明。\r \r     ```\r     Description: A framework for building native apps with React.\r \r     Process finished with exit code 0\r     ```\r \r     ![Goglang，显示应用的输出](./media/create-mongodb-golang/goglang-cosmos-db.png)\r \r ## <a name=\"review-your-document-in-data-explorer\"></a>在数据资源管理器中查看文档\r \r 回到 Azure 门户，在数据资源管理器中查看文档。\r \r 1. 在左侧导航菜单中单击“数据资源管理器(预览)”，展开“golang-coach”、“包”，并单击“文档”。 在“文档”选项卡中单击“\\_id”，在右窗格中显示文档。 \r \r     ![数据资源管理器，显示新创建的文档](./media/create-mongodb-golang/golang-cosmos-db-data-explorer.png)\r \r 2. 然后即可使用内联文档，单击“更新”将其保存。 也可删除该文档，或者创建新文档或查询。\r \r ## <a name=\"review-slas-in-the-azure-portal\"></a>在 Azure 门户中查看 SLA\r \r [!INCLUDE [cosmosdb-tutorial-review-slas](../../includes/cosmos-db-tutorial-review-slas.md)]\r \r ## <a name=\"clean-up-resources\"></a>清理资源\r \r 如果不打算继续使用此应用，请删除本快速入门教程在 Azure 门户中创建的所有资源，步骤如下：\r \r 1. 在 Azure 门户的左侧菜单中，单击“资源组”，然后单击已创建资源的名称。 \r 2. 在资源组页上单击“删除”，在文本框中键入要删除的资源的名称，并单击“删除”。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 本快速入门教程已介绍如何创建 Azure Cosmos DB 帐户和使用 API for MongoDB 运行 Golang 应用。 现在可以将其他数据导入 Cosmos DB 帐户。 \r \r > [!div class=\"nextstepaction\"]\r > [将 MongoDB API 的数据导入 Azure Cosmos DB](mongodb-migrate.md)\r \r <!--Update_Description: update meta properties-->"}