{"Title":"人脸 API C# 快速入门","Description":"获取信息和代码示例，帮助自己快速开始使用认知服务中的人脸 API 和 C#。","Content":"# <a name=\"face-api-c-quick-starts\"></a>人脸 API C# 快速入门\r 本文提供信息和代码示例来帮助读者快速开始使用人脸 API 和 C# 来完成以下任务： \r - [检测图像中的人脸](#Detect) \r - [创建人员组](#Create)\r \r ## <a name=\"prerequisites\"></a>先决条件\r - 在[此处](https://www.nuget.org/packages/Microsoft.ProjectOxford.Face/)获取 Microsoft 人脸 API Windows SDK\r - 在[此处](../../Computer-vision/Vision-API-How-to-Topics/HowToSubscribe.md)详细了解如何获取免费订阅密钥\r \r ## 使用人脸 API 通过 C# 检测图像中的人脸 <a name=\"Detect\"> </a>\r 使用[“人脸 - 检测”方法](https://dev.cognitive.azure.cn/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)可以检测图像中的人脸，并返回人脸属性，包括：\r - 人脸 ID：在多种人脸 API 方案使用的唯一 ID。 \r - 人脸矩形：左侧坐标、顶部坐标、宽度和高度，指示人脸在图像中的位置。\r - 地标：27 点人脸地标数组，指向人脸组成部分的重要位置。\r - 面部属性包括年龄、性别、笑容强度、头部姿势和面部毛发。 \r \r #### <a name=\"face-detect-c-example-request\"></a>人脸检测 C# 示例请求\r \r 本示例是使用人脸 API 客户端库以 C# 语言编写的。 \r \r 1. 在 Visual Studio 中创建新的控制台解决方案。\r 1. 将 Program.cs 替换为以下代码。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 更改 `uriBase` 值以使用订阅密钥的获取位置。\r 1. 运行该程序。\r 1. 输入硬盘上某个图像的路径。\r \r ```c#\r using System;\r using System.IO;\r using System.Net.Http;\r using System.Net.Http.Headers;\r using System.Text;\r \r namespace CSHttpClientSample\r {\r     static class Program\r     {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         const string subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         const string uriBase = \"https://api.cognitive.azure.cn/face/v1.0/detect\";\r \r         static void Main()\r         {\r             // Get the path and filename to process from the user.\r             Console.WriteLine(\"Detect faces:\");\r             Console.Write(\"Enter the path to an image with faces that you wish to analzye: \");\r             string imageFilePath = Console.ReadLine();\r \r             // Execute the REST API call.\r             MakeAnalysisRequest(imageFilePath);\r \r             Console.WriteLine(\"\\nPlease wait a moment for the results to appear. Then, press Enter to exit...\\n\");\r             Console.ReadLine();\r         }\r \r \r         /// <summary>\r         /// Gets the analysis of the specified image file by using the Computer Vision REST API.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file.</param>\r         static async void MakeAnalysisRequest(string imageFilePath)\r         {\r             HttpClient client = new HttpClient();\r \r             // Request headers.\r             client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request parameters. A third optional parameter is \"details\".\r             string requestParameters = \"returnFaceId=true&returnFaceLandmarks=false&returnFaceAttributes=age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise\";\r \r             // Assemble the URI for the REST API Call.\r             string uri = uriBase + \"?\" + requestParameters;\r \r             HttpResponseMessage response;\r \r             // Request body. Posts a locally stored JPEG image.\r             byte[] byteData = GetImageAsByteArray(imageFilePath);\r \r             using (ByteArrayContent content = new ByteArrayContent(byteData))\r             {\r                 // This example uses content type \"application/octet-stream\".\r                 // The other content types you can use are \"application/json\" and \"multipart/form-data\".\r                 content.Headers.ContentType = new MediaTypeHeaderValue(\"application/octet-stream\");\r \r                 // Execute the REST API call.\r                 response = await client.PostAsync(uri, content);\r \r                 // Get the JSON response.\r                 string contentString = await response.Content.ReadAsStringAsync();\r \r                 // Display the JSON response.\r                 Console.WriteLine(\"\\nResponse:\\n\");\r                 Console.WriteLine(JsonPrettyPrint(contentString));\r             }\r         }\r \r \r         /// <summary>\r         /// Returns the contents of the specified file as a byte array.\r         /// </summary>\r         /// <param name=\"imageFilePath\">The image file to read.</param>\r         /// <returns>The byte array of the image data.</returns>\r         static byte[] GetImageAsByteArray(string imageFilePath)\r         {\r             FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);\r             BinaryReader binaryReader = new BinaryReader(fileStream);\r             return binaryReader.ReadBytes((int)fileStream.Length);\r         }\r \r \r         /// <summary>\r         /// Formats the given JSON string by adding line breaks and indents.\r         /// </summary>\r         /// <param name=\"json\">The raw JSON string to format.</param>\r         /// <returns>The formatted JSON string.</returns>\r         static string JsonPrettyPrint(string json)\r         {\r             if (string.IsNullOrEmpty(json))\r                 return string.Empty;\r \r             json = json.Replace(Environment.NewLine, \"\").Replace(\"\\t\", \"\");\r \r             StringBuilder sb = new StringBuilder();\r             bool quote = false;\r             bool ignore = false;\r             int offset = 0;\r             int indentLength = 3;\r \r             foreach (char ch in json)\r             {\r                 switch (ch)\r                 {\r                     case '\"':\r                         if (!ignore) quote = !quote;\r                         break;\r                     case '\\'':\r                         if (quote) ignore = !ignore;\r                         break;\r                 }\r \r                 if (quote)\r                     sb.Append(ch);\r                 else\r                 {\r                     switch (ch)\r                     {\r                         case '{':\r                         case '[':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', ++offset * indentLength));\r                             break;\r                         case '}':\r                         case ']':\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', --offset * indentLength));\r                             sb.Append(ch);\r                             break;\r                         case ',':\r                             sb.Append(ch);\r                             sb.Append(Environment.NewLine);\r                             sb.Append(new string(' ', offset * indentLength));\r                             break;\r                         case ':':\r                             sb.Append(ch);\r                             sb.Append(' ');\r                             break;\r                         default:\r                             if (ch != ' ') sb.Append(ch);\r                             break;\r                     }\r                 }\r             }\r \r             return sb.ToString().Trim();\r         }\r     }\r }\r ```\r #### <a name=\"face-detect-response\"></a>人脸检测响应\r \r 成功响应将以 JSON 格式返回。 下面是成功响应的示例： \r \r ```json\r Response:\r \r [\r    {\r       \"faceId\": \"f7eda569-4603-44b4-8add-cd73c6dec644\",\r       \"faceRectangle\": {\r          \"top\": 131,\r          \"left\": 177,\r          \"width\": 162,\r          \"height\": 162\r       },\r       \"faceAttributes\": {\r          \"smile\": 0.0,\r          \"headPose\": {\r             \"pitch\": 0.0,\r             \"roll\": 0.1,\r             \"yaw\": -32.9\r          },\r          \"gender\": \"female\",\r          \"age\": 22.9,\r          \"facialHair\": {\r             \"moustache\": 0.0,\r             \"beard\": 0.0,\r             \"sideburns\": 0.0\r          },\r          \"glasses\": \"NoGlasses\",\r          \"emotion\": {\r             \"anger\": 0.0,\r             \"contempt\": 0.0,\r             \"disgust\": 0.0,\r             \"fear\": 0.0,\r             \"happiness\": 0.0,\r             \"neutral\": 0.986,\r             \"sadness\": 0.009,\r             \"surprise\": 0.005\r          },\r          \"blur\": {\r             \"blurLevel\": \"low\",\r             \"value\": 0.06\r          },\r          \"exposure\": {\r             \"exposureLevel\": \"goodExposure\",\r             \"value\": 0.67\r          },\r          \"noise\": {\r             \"noiseLevel\": \"low\",\r             \"value\": 0.0\r          },\r          \"makeup\": {\r             \"eyeMakeup\": true,\r             \"lipMakeup\": true\r          },\r          \"accessories\": [\r \r          ],\r          \"occlusion\": {\r             \"foreheadOccluded\": false,\r             \"eyeOccluded\": false,\r             \"mouthOccluded\": false\r          },\r          \"hair\": {\r             \"bald\": 0.0,\r             \"invisible\": false,\r             \"hairColor\": [\r                {\r                   \"color\": \"brown\",\r                   \"confidence\": 1.0\r                },\r                {\r                   \"color\": \"black\",\r                   \"confidence\": 0.87\r                },\r                {\r                   \"color\": \"other\",\r                   \"confidence\": 0.51\r                },\r                {\r                   \"color\": \"blond\",\r                   \"confidence\": 0.08\r                },\r                {\r                   \"color\": \"red\",\r                   \"confidence\": 0.08\r                },\r                {\r                   \"color\": \"gray\",\r                   \"confidence\": 0.02\r                }\r             ]\r          }\r       }\r    }\r ]\r ```\r ## 使用人脸 API 通过 C# 创建人员组 <a name=\"Create\"> </a>\r \r 使用[“人员组 - 创建人员组”方法](https://dev.cognitive.azure.cn/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)可以创建包含指定 personGroupId、名称和用户提供的 userData 的人员组。\r \r #### <a name=\"person-group---create-a-person-group-c-example-request\"></a>“人员组 - 创建人员组”C# 示例请求\r \r 在 Visual Studio 中创建一个新的控制台解决方案，然后将 Program.cs 替换为以下代码。 更改 `string uri` 以使用订阅密钥的获取区域，并将“Ocp-Apim-Subscription-Key”值替换为有效的订阅密钥。\r \r ```c#\r using System;\r using System.Net.Http.Headers;\r using System.Net.Http;\r \r namespace CSHttpClientSample\r {\r     static class Program\r     {\r         static void Main()\r         {\r             Console.WriteLine(\"Enter an ID for the group you wish to create:\");\r             Console.WriteLine(\"(Use numbers, lower case letters, '-' and '_'. The maximum length of the personGroupId is 64.)\");\r \r             string personGroupId = Console.ReadLine();\r             MakeCreateGroupRequest(personGroupId);\r \r             Console.WriteLine(\"\\n\\n\\nWait for the result below, then hit ENTER to exit...\\n\\n\\n\");\r             Console.ReadLine();\r         }\r \r \r         static async void MakeCreateGroupRequest(string personGroupId)\r         {\r             var client = new HttpClient();\r \r             // Request headers - replace this example key with your valid key.\r             client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"6726adbabb494773a28a7a5a21d5974a\");\r \r             // Request URI string.\r             string uri = \"https://api.cognitive.azure.cn/face/v1.0/persongroups/\" + personGroupId;\r \r             // Here \"name\" is for display and doesn't have to be unique. Also, \"userData\" is optional.\r             string json = \"{\\\"name\\\":\\\"My Group\\\", \\\"userData\\\":\\\"Some data related to my group.\\\"}\";\r             HttpContent content = new StringContent(json);\r             content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");\r \r             HttpResponseMessage response = await client.PutAsync(uri, content);\r \r             // If the group was created successfully, you'll see \"OK\".\r             // Otherwise, if a group with the same personGroupId has been created before, you'll see \"Conflict\".\r             Console.WriteLine(\"Response status: \" + response.StatusCode);\r         }\r     }\r }\r ```\r \r "}