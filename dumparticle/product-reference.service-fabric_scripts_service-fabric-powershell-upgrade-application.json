{"Title":"Azure PowerShell 脚本示例 - 升级 Service Fabric 应用程序","Description":"Azure PowerShell 脚本示例 - 升级 Service Fabric 应用程序。","Content":"# <a name=\"upgrade-a-service-fabric-application\"></a>升级 Service Fabric 应用程序\r \r 此示例脚本可将正在运行的 Service Fabric 应用程序实例升级为版本 1.3.0。 该脚本会将新应用程序包复制到群集映像存储区，注册应用程序类型并删除不必要的应用程序包。  该脚本会启动受监控的升级，并持续检查升级状态，直到升级完成或回滚。 根据需要自定义参数。 \r \r 必要时，使用 [Service Fabric SDK](../service-fabric-get-started.md) 安装 Service Fabric PowerShell 模块。 \r \r ## <a name=\"sample-script\"></a>示例脚本\r \r ```powershell\r ## Variables\r $ApplicationPackagePath = \"C:\\Users\\sfuser\\documents\\visual studio 2017\\Projects\\Voting\\Voting\\pkg\\Debug\"\r $ApplicationName = \"fabric:/Voting\"\r $ApplicationTypeName = \"VotingType\"\r $ApplicationTypeVersion = \"1.3.0\"\r $imageStoreConnectionString = \"fabric:ImageStore\"\r $CopyPackageTimeoutSec = 600\r $CompressPackage = $false\r \r ## Check existence of the application\r $oldApplication = Get-ServiceFabricApplication -ApplicationName $ApplicationName\r \r if (!$oldApplication)\r {\r     $errMsg = \"Application '$ApplicationName' doesn't exist in cluster.\"\r     throw $errMsg\r }\r else\r {\r     ## Check upgrade status\r     $upgradeStatus = Get-ServiceFabricApplicationUpgrade -ApplicationName $ApplicationName\r     if ($upgradeStatus.UpgradeState -ne \"RollingBackCompleted\" -and $upgradeStatus.UpgradeState -ne \"RollingForwardCompleted\" -and $upgradeStatus.UpgradeState -ne \"Failed\")\r     {\r         $errMsg = \"An upgrade for the application '$ApplicationTypeName' is already in progress.\"\r         throw $errMsg\r     }\r \r     $reg = Get-ServiceFabricApplicationType -ApplicationTypeName $ApplicationTypeName | Where-Object  { $_.ApplicationTypeVersion -eq $ApplicationTypeVersion }\r     if ($reg)\r     {\r         Write-Host 'Application Type '$ApplicationTypeName' and Version '$ApplicationTypeVersion' was already registered with Cluster, unregistering it...'\r         $reg | Unregister-ServiceFabricApplicationType -Force\r     }\r \r     ## Copy application package to image store\r     $applicationPackagePathInImageStore = $ApplicationTypeName\r     Write-Host \"Copying application package to image store...\"\r     Copy-ServiceFabricApplicationPackage -ApplicationPackagePath $ApplicationPackagePath -ImageStoreConnectionString $imageStoreConnectionString -ApplicationPackagePathInImageStore $applicationPackagePathInImageStore -TimeOutSec $CopyPackageTimeoutSec -CompressPackage:$CompressPackage \r     if(!$?)\r     {\r         throw \"Copying of application package to image store failed. Cannot continue with registering the application.\"\r     }\r \r     ## Register application type\r     Write-Host \"Registering application type...\"\r     Register-ServiceFabricApplicationType -ApplicationPathInImageStore $applicationPackagePathInImageStore\r     if(!$?)\r     {\r         throw \"Registration of application type failed.\"\r     }\r \r     # Remove the application package to free system resources.\r     Remove-ServiceFabricApplicationPackage -ImageStoreConnectionString $imageStoreConnectionString -ApplicationPackagePathInImageStore $applicationPackagePathInImageStore\r     if(!$?)\r     {\r         Write-Host \"Removing the application package failed.\"\r     }\r \r     ## Start monitored application upgrade\r     try\r     {\r         Write-Host \"Start upgrading application...\" \r         Start-ServiceFabricApplicationUpgrade -ApplicationName $ApplicationName -ApplicationTypeVersion $ApplicationTypeVersion -HealthCheckStableDurationSec 60 -UpgradeDomainTimeoutSec 1200 -UpgradeTimeout 3000 -FailureAction Rollback -Monitored\r     }\r     catch\r     {\r         Write-Host (\"Error starting upgrade. \" + $_)\r \r         Write-Host \"Unregister application type '$ApplicationTypeName' and version '$ApplicationTypeVersion' ...\"\r         Unregister-ServiceFabricApplicationType -ApplicationTypeName $ApplicationTypeName -ApplicationTypeVersion $ApplicationTypeVersion -Force\r         throw\r     }\r \r     do\r     {\r         Write-Host \"Waiting for upgrade...\"\r         Start-Sleep -Seconds 3\r         $upgradeStatus = Get-ServiceFabricApplicationUpgrade -ApplicationName $ApplicationName\r     } while ($upgradeStatus.UpgradeState -ne \"RollingBackCompleted\" -and $upgradeStatus.UpgradeState -ne \"RollingForwardCompleted\" -and $upgradeStatus.UpgradeState -ne \"Failed\")\r \r     if($upgradeStatus.UpgradeState -eq \"RollingForwardCompleted\")\r     {\r         Write-Host \"Upgrade completed successfully.\"\r     }\r     elseif($upgradeStatus.UpgradeState -eq \"RollingBackCompleted\")\r     {\r         Write-Error \"Upgrade was Rolled back.\"\r     }\r     elseif($upgradeStatus.UpgradeState -eq \"Failed\")\r     {\r         Write-Error \"Upgrade Failed.\"\r     }\r }\r ```\r \r ## <a name=\"script-explanation\"></a>脚本说明\r \r 此脚本使用以下命令。 表中的每条命令均链接到特定于命令的文档。\r \r | 命令 | 说明 |\r |---|---|\r | [Get-ServiceFabricApplication](https://docs.microsoft.com/powershell/module/servicefabric/get-servicefabricapplication?view=azureservicefabricps) | 获取 Service Fabric 群集中的所有应用程序或特定应用程序。  |\r | [Get-ServiceFabricApplicationUpgrade](https://docs.microsoft.com/powershell/module/servicefabric/get-servicefabricapplicationupgrade?view=azureservicefabricps) | 获取 Service Fabric 应用程序的升级状态。 |\r | [Get-ServiceFabricApplicationType](https://docs.microsoft.com/powershell/module/servicefabric/get-servicefabricapplicationtype?view=azureservicefabricps) | 获取在 Service Fabric 群集上注册的 Service Fabric 应用程序类型。 |\r | [Unregister-ServiceFabricApplicationType](https://docs.microsoft.com/powershell/module/servicefabric/unregister-servicefabricapplicationtype?view=azureservicefabricps) | 注销 Service Fabric 应用程序类型。  |\r | [Copy-ServiceFabricApplicationPackage](https://docs.microsoft.com/powershell/module/servicefabric/copy-servicefabricapplicationpackage?view=azureservicefabricps) | 将 Service Fabric 应用程序包复制到映像存储。  |\r | [Register-ServiceFabricApplicationType](https://docs.microsoft.com/powershell/module/servicefabric/register-servicefabricapplicationtype?view=azureservicefabricps) | 注册 Service Fabric 应用程序类型。 |\r | [Start-ServiceFabricApplicationUpgrade](https://docs.microsoft.com/powershell/module/servicefabric/start-servicefabricapplicationupgrade?view=azureservicefabricps) | 将 Service Fabric 应用程序升级为指定的应用程序类型版本。 |\r | [Remove-ServiceFabricApplicationPackage](https://docs.microsoft.com/powershell/module/servicefabric/remove-servicefabricapplicationpackage?view=azureservicefabricps) | 从映像存储区中删除 Service Fabric 应用程序包。|\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 有关 Service Fabric PowerShell 模块的详细信息，请参阅 [Azure PowerShell 文档](https://docs.microsoft.com/powershell/azure/service-fabric/?view=azureservicefabricps)。\r \r 可以在 [Azure PowerShell 示例](../service-fabric-powershell-samples.md)中找到 Azure Service Fabric 的其他 Powershell 示例。\r \r <!--Update_Description: add new cmdlet of Removing the application package to free system resources.  -->"}