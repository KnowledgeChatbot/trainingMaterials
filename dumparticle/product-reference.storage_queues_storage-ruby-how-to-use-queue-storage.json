{"Title":"如何通过 Ruby 使用队列存储","Description":"了解如何使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。 用 Ruby 编写的相关示例。","Content":"# <a name=\"how-to-use-queue-storage-from-ruby\"></a>如何通过 Ruby 使用队列存储\r [!INCLUDE [storage-selector-queue-include](../../../includes/storage-selector-queue-include.md)]\r \r [!INCLUDE [storage-try-azure-tools-queues](../../../includes/storage-try-azure-tools-queues.md)]\r \r ## <a name=\"overview\"></a>概述\r 本指南演示了如何使用 Microsoft Azure 队列存储服务执行常见方案。 相关示例是使用 Ruby Azure API 编写的。\r 介绍的方案包括**插入**、**扫视**、**获取**和**删除**队列消息以及**创建和删除队列**。\r \r [!INCLUDE [storage-queue-concepts-include](../../../includes/storage-queue-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../../includes/storage-create-account-include.md)]\r \r ## <a name=\"create-a-ruby-application\"></a>创建 Ruby 应用程序\r 创建 Ruby 应用程序。 有关说明，请参阅 [Azure VM 上的 Ruby on Rails Web 应用程序](../../virtual-machines/linux/classic/virtual-machines-linux-classic-ruby-rails-web-app.md)。\r \r ## <a name=\"configure-your-application-to-access-storage\"></a>配置应用程序以访问存储\r 要使用 Azure 存储，需下载和使用 Ruby Azure 包，其中包括与存储 REST 服务进行通信的一组方便的库。\r \r ### <a name=\"use-rubygems-to-obtain-the-package\"></a>使用 RubyGems 获取该程序包\r 1. 使用命令行接口，例如 **PowerShell** (Windows)、**Terminal** (Mac) 或 **Bash** (Unix)。\r 2. 在命令窗口中键入“gem install azure”以安装 gem 和依赖项。\r \r ### <a name=\"import-the-package\"></a>导入包\r 使用常用的文本编辑器将以下内容添加到要在其中使用存储的 Ruby 文件的顶部：\r \r ```ruby\r require \"azure\"\r ```\r \r ## <a name=\"setup-an-azure-storage-connection\"></a>设置 Azure 存储连接\r Azure 模块会读取环境变量 **AZURE\\_STORAGE\\_ACCOUNT** 和 **AZURE\\_STORAGE\\_ACCESS_KEY** 以获取连接到 Azure 存储帐户所需的信息。 如果未设置这些环境变量，则在使用 **Azure::QueueService** 前必须通过以下代码指定帐户信息：\r \r ```ruby\r Azure.config.storage_account_name = \"<your azure storage account>\"\r Azure.config.storage_access_key = \"<your Azure storage access key>\"\r ```\r \r 从 Azure 门户中的经典或 Resource Manager 存储帐户中获取这些值：\r \r 1. 登录到 [Azure 门户](https://portal.azure.cn)。\r 2. 导航到要使用的存储帐户。\r 3. 在右侧的“设置”边栏选项卡中，单击“访问密钥” 。\r 4. 在显示的“访问密钥”边栏选项卡中，可看到访问密钥 1 和访问密钥 2。 可以使用其中任意一个密钥。 \r 5. 单击复制图标以将密钥复制到剪贴板。 \r \r ## <a name=\"how-to-create-a-queue\"></a>如何：创建队列\r 以下代码创建 **Azure::QueueService** 对象，可用于队列。\r \r ```ruby\r azure_queue_service = Azure::QueueService.new\r ```\r \r 使用 **create_queue()** 方法创建具有指定名称的队列。\r \r ```ruby\r begin\r   azure_queue_service.create_queue(\"test-queue\")\r rescue\r   puts $!\r end\r ```\r \r ## <a name=\"how-to-insert-a-message-into-a-queue\"></a>如何：在队列中插入消息\r 若要在队列中插入消息，可使用 **create_message()** 方法创建一条新消息并将其添加到队列中。\r \r ```ruby\r azure_queue_service.create_message(\"test-queue\", \"test message\")\r ```\r \r ## <a name=\"how-to-peek-at-the-next-message\"></a>如何：扫视下一条消息\r 可调用 **peek\\_messages()** 方法，查看队列前面的消息，而不必从队列中将其删除。 默认情况下，**peek\\_messages()** 扫视单条消息。 也可以指定要扫视的消息数。\r \r ```ruby\r result = azure_queue_service.peek_messages(\"test-queue\",\r   {:number_of_messages => 10})\r ```\r \r ## <a name=\"how-to-dequeue-the-next-message\"></a>如何：取消对下一条消息的排队\r 可通过两个步骤从队列中删除消息。\r \r 1. 在调用 **list\\_messages()** 时，默认情况下会获取队列中的下一条消息。 也可以指定要获取的消息数。 从 **list\\_messages()** 返回的消息变得对从此队列读取消息的任何其他代码不可见。 以参数形式传入可见性超时秒数。\r 2. 还必须调用 **delete_message()**，才能完成队列消息删除操作。\r \r 此删除消息的两步过程可确保当代码因硬件或软件故障而无法处理消息时，其他代码实例可以获取同一消息并重试。 代码在处理消息后会立即调用 **delete\\_message()**。\r \r ```ruby\r messages = azure_queue_service.list_messages(\"test-queue\", 30)\r azure_queue_service.delete_message(\"test-queue\", \r   messages[0].id, messages[0].pop_receipt)\r ```\r \r ## <a name=\"how-to-change-the-contents-of-a-queued-message\"></a>如何：更改已排队消息的内容\r 可更改队列中现有消息的内容。 以下代码使用 **update_message()** 方法来更新消息。 该方法返回一个元组，其中包含队列消息的 POP 接收方，以及一个 UTC 日期时间值，表示队列中显示消息的时间。\r \r ```ruby\r message = azure_queue_service.list_messages(\"test-queue\", 30)\r pop_receipt, time_next_visible = azure_queue_service.update_message(\r   \"test-queue\", message.id, message.pop_receipt, \"updated test message\", \r   30)\r ```\r \r ## <a name=\"how-to-additional-options-for-dequeuing-messages\"></a>如何：用于对消息取消排队的其他选项\r 可通过两种方式自定义队列中消息的检索。\r \r 1. 可获取一批消息。\r 2. 可以设置更长或更短的不可见超时时间，从而允许代码使用更多或更少的时间来完全处理每个消息。\r \r 以下代码示例使用 **list\\_messages()** 方法通过一次调用获取 15 条消息。 然后，它打印并删除每条消息。 它还将每条消息的不可见超时时间设置为 5 分钟。\r \r ```ruby\r azure_queue_service.list_messages(\"test-queue\", 300\r   {:number_of_messages => 15}).each do |m|\r   puts m.message_text\r   azure_queue_service.delete_message(\"test-queue\", m.id, m.pop_receipt)\r end\r ```\r \r ## <a name=\"how-to-get-the-queue-length\"></a>如何：获取队列长度\r 可以获取队列中消息数的估计值。 **get\\_queue\\_metadata()** 方法要求队列服务返回有关队列的大概消息数和元数据。\r \r ```ruby\r message_count, metadata = azure_queue_service.get_queue_metadata(\r   \"test-queue\")\r ```\r \r ## <a name=\"how-to-delete-a-queue\"></a>如何：删除队列\r 若要删除队列及其中包含的所有消息，请对队列对象调用 **delete\\_queue()** 方法。\r \r ```ruby\r azure_queue_service.delete_queue(\"test-queue\")\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 既已了解有关队列存储的基础知识，可单击以下链接以了解更复杂的存储任务。\r \r * 访问 [Azure 存储团队博客](http://blogs.msdn.com/b/windowsazurestorage/)\r * 访问 GitHub 上的 [Azure SDK for Ruby](https://github.com/WindowsAzure/azure-sdk-for-ruby) 存储库\r \r 若要了解 Azure 队列服务（本文所述）和 Azure 服务总线队列（[如何使用服务总线队列](../../service-bus-messaging/service-bus-ruby-how-to-use-queues.md)文章中所述）之间的比较，请参阅 [Azure 队列和服务总线队列 - 比较与对照](../../service-bus-messaging/service-bus-azure-and-service-bus-queues-compared-contrasted.md)\r "}