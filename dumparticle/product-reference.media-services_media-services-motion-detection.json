{"Title":"使用 Azure 媒体分析检测动作","Description":"Azure 媒体动作检测器媒体处理器 (MP) 可让你在冗长且平淡的视频中有效识别出你感兴趣的部分。","Content":"# <a name=\"detect-motions-with-azure-media-analytics\"></a>使用 Azure 媒体分析检测动作\r ## <a name=\"overview\"></a>概述\r 借助“Azure Media Motion Detector”媒体处理器 (MP)，用户可在冗长且平淡的视频中有效识别出感兴趣的部分。 可以对静态相机数据片段使用动作检测，以识别视频中有动作的部分。 它会生成 JSON 文件，其中包含带时间戳的元数据，以及发生事件的边界区域。\r \r 此技术面向安全视频提要，它可以将动作分类为相关事件和误报（例如阴影或光源变化）。 这样，便可以在无需查看无止境的不相关事件的情况下，从相机输出生成安全警报，并从长时间的监控视频中提取感兴趣的片段。\r \r **Azure 媒体动作检测器** MP 目前以预览版提供。\r \r 本主题提供有关“Azure Media Motion Detector”的详细信息，并演示如何通过适用于 .NET 的媒体服务 SDK 使用它\r \r ## <a name=\"motion-detector-input-files\"></a>动作检测器输入文件\r 视频文件。 目前支持以下格式：MP4、MOV 和 WMV。\r \r ## <a name=\"task-configuration-preset\"></a>任务配置（预设）\r 在使用 **Azure 媒体动作检测器**创建任务时，必须指定配置预设。 \r \r ### <a name=\"parameters\"></a>Parameters\r 可以使用以下参数：\r \r | 名称 | 选项 | 说明 | 默认 |\r | --- | --- | --- | --- |\r | sensitivityLevel |字符串：'low'、'medium'、'high' |设置报告动作情况的敏感度级别。 调整此项是为了调整误报数量。 |'medium' |\r | frameSamplingValue |正整数 |设置算法的运行频率。 1 等于每个帧，2 是指每隔一个帧，如此类推。 |1 |\r | detectLightChange |布尔值：'true'、'false' |设置是否在结果中报告轻微的更改 |'False' |\r | mergeTimeThreshold |Xs-time: Hh:mm:ss<br/>示例：00:00:03 |指定动作事件之间的时间窗口，其中的 2 个事件将组合成 1 个事件进行报告。 |00:00:00 |\r | detectionZones |检测区域数组：<br/>- 检测区域是一个包含 3 个或 3 个以上点的数组<br/>- 点是指由从 0 到 1 的 x 和 y 组成的坐标。 |描述要使用的多边形检测区域列表。<br/>报告结果时将报告以 ID 表示的区域，其中第一个是 ‘id’:0 |单个区域，涵盖整个帧。 |\r \r ### <a name=\"json-example\"></a>JSON 示例\r     {\r       \"version\": \"1.0\",\r       \"options\": {\r         \"sensitivityLevel\": \"medium\",\r         \"frameSamplingValue\": 1,\r         \"detectLightChange\": \"False\",\r         \"mergeTimeThreshold\":\r         \"00:00:02\",\r         \"detectionZones\": [\r           [\r             {\"x\": 0, \"y\": 0},\r             {\"x\": 0.5, \"y\": 0},\r             {\"x\": 0, \"y\": 1}\r            ],\r           [\r             {\"x\": 0.3, \"y\": 0.3},\r             {\"x\": 0.55, \"y\": 0.3},\r             {\"x\": 0.8, \"y\": 0.3},\r             {\"x\": 0.8, \"y\": 0.55},\r             {\"x\": 0.8, \"y\": 0.8},\r             {\"x\": 0.55, \"y\": 0.8},\r             {\"x\": 0.3, \"y\": 0.8},\r             {\"x\": 0.3, \"y\": 0.55}\r           ]\r         ]\r       }\r     }\r \r \r ## <a name=\"motion-detector-output-files\"></a>动作检测器输出文件\r 动作检测作业会在输出资产中返回 JSON 文件，该文件描述视频中的动作警报和类别。 该文件包含有关在视频中检测到的动作的时间和持续时间的信息。\r \r 一旦固定背景视频（例如监控视频）中出现运动对象，动作检测器 API 将提供指示器。 动作检测器经过训练可减少误报（例如光源和阴影变化）。 当前算法限制包括夜视视频、半透明对象和小对象。\r \r ### <a id=\"output_elements\"></a>输出 JSON 文件中的元素\r > [!NOTE]\r > 在最新版本中，输出 JSON 格式已更改，对某些客户来说可以说是重大更改。\r > \r > \r \r 下表描述了输出 JSON 文件的元素。\r \r | 元素 | 说明 |\r | --- | --- |\r | 版本 |这是指视频 API 的版本。 当前版本为 2。 |\r | 时间刻度 |视频每秒的“刻度”数。 |\r | Offset |时间戳的时间偏移量（以“刻度”为单位）。 在版本 1.0 的视频 API 中，此属性始终为 0。 在我们将来支持的方案中，此值可能会更改。 |\r | Framerate |视频的每秒帧数。 |\r | Width, Height |表示视频的宽度和高度（以像素为单位）。 |\r | 开始 |开始时间戳（以“刻度”为单位）。 |\r | 持续时间 |事件的长度（以“刻度”为单位）。 |\r | 时间间隔 |事件中每个条目的间隔（以“刻度”为单位）。 |\r | 事件 |每个事件片段包含在该持续时间内检测到的动作。 |\r | 类型 |在当前版本中，对于一般动作，该属性始终为“2”。 此标签可让视频 API 在将来的版本中灵活地为动作分类。 |\r | RegionID |如上所述，在此版本中此属性始终为 0。 此标签可让视频 API 在将来的版本中灵活地查找各区域中的动作。 |\r | 区域 |表示你关注的动作在视频中的区域。 <br/><br/>-“id”表示区域面积 - 且在此版本中只有一个，ID 0。 <br/>-“type”代表你关注其动作的区域的形状。 目前支持“矩形”和“多边形”。<br/> 如果指定了“矩形”，则区域具有以 X、Y表示宽度及高度的维度。 X 和 Y 坐标表示规范化 0.0 到 1.0 比例中的区域的左上角 XY 坐标。 宽度和高度表示规范化 0.0 到 1.0 比例中的区域的大小。 在当前版本中，X、Y、宽度和高度始终固定为 0、0 和 1、1。 <br/>如果指定了“多边形”，则区域的维度以点来表示。 <br/> |\r | Fragments |元数据划分成称为“片段”的不同段。 每个片段包含开始时间、持续时间、间隔数字和事件。 没有事件的片段表示在该开始时间和持续时间内没有检测到任何动作。 |\r | 括号 [] |每个括号表示事件中的单个间隔。 如果该间隔显示空括号，则表示没有检测到动作。 |\r | 位置 |事件下的此新项列出发生动作的位置。 这比检测区域更具体。 |\r \r 下面是 JSON 输出示例\r \r     {\r       \"version\": 2,\r       \"timescale\": 23976,\r       \"offset\": 0,\r       \"framerate\": 24,\r       \"width\": 1280,\r       \"height\": 720,\r       \"regions\": [\r         {\r           \"id\": 0,\r           \"type\": \"polygon\",\r           \"points\": [{'x': 0, 'y': 0},\r             {'x': 0.5, 'y': 0},\r             {'x': 0, 'y': 1}]\r         }\r       ],\r       \"fragments\": [\r         {\r           \"start\": 0,\r           \"duration\": 226765\r         },\r         {\r           \"start\": 226765,\r           \"duration\": 47952,\r           \"interval\": 999,\r           \"events\": [\r             [\r               {\r                 \"type\": 2,\r                 \"typeName\": \"motion\",\r                 \"locations\": [\r                   {\r                     \"x\": 0.004184,\r                     \"y\": 0.007463,\r                     \"width\": 0.991667,\r                     \"height\": 0.985185\r                   }\r                 ],\r                 \"regionId\": 0\r               }\r             ],\r \r     …\r ## <a name=\"limitations\"></a>限制\r * 支持的输入视频格式包括 MP4、MOV 和 WMV。\r * 动作检测已针对固定背景视频优化。 算法专注于降低误报，例如光源变化和阴影。\r * 某些动作可能因技术难题而无法检测到，例如夜视视频、半透明对象和小对象。\r \r ## <a name=\"net-sample-code\"></a>.NET 示例代码\r \r 以下程序演示如何：\r \r 1. 创建资产并将媒体文件上传到资产。\r 2. 基于包含以下 json 预设的配置文件，使用视频动作检测任务创建作业。 \r    \r         {\r           \"Version\": \"1.0\",\r           \"Options\": {\r             \"SensitivityLevel\": \"medium\",\r             \"FrameSamplingValue\": 1,\r             \"DetectLightChange\": \"False\",\r             \"MergeTimeThreshold\":\r             \"00:00:02\",\r             \"DetectionZones\": [\r               [\r                 {\"x\": 0, \"y\": 0},\r                 {\"x\": 0.5, \"y\": 0},\r                 {\"x\": 0, \"y\": 1}\r                ],\r               [\r                 {\"x\": 0.3, \"y\": 0.3},\r                 {\"x\": 0.55, \"y\": 0.3},\r                 {\"x\": 0.8, \"y\": 0.3},\r                 {\"x\": 0.8, \"y\": 0.55},\r                 {\"x\": 0.8, \"y\": 0.8},\r                 {\"x\": 0.55, \"y\": 0.8},\r                 {\"x\": 0.3, \"y\": 0.8},\r                 {\"x\": 0.3, \"y\": 0.55}\r               ]\r             ]\r           }\r         }\r 3. 下载输出 JSON 文件。 \r \r #### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r \r 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r \r #### <a name=\"example\"></a>示例\r \r \r     using System;\r     using System.Configuration;\r     using System.IO;\r     using System.Linq;\r     using Microsoft.WindowsAzure.MediaServices.Client;\r     using System.Threading;\r     using System.Threading.Tasks;\r \r     namespace VideoMotionDetection\r     {\r         class Program\r         {\r             // Read values from the App.config file.\r             private static readonly string _AADTenantDomain =\r                 ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r             private static readonly string _RESTAPIEndpoint =\r                 ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r             // Field for service context.\r             private static CloudMediaContext _context = null;\r \r             static void Main(string[] args)\r             {\r                 var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r                 var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r                 _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r                 // Run the VideoMotionDetection job.\r                 var asset = RunVideoMotionDetectionJob(@\"C:\\supportFiles\\VideoMotionDetection\\BigBuckBunny.mp4\",\r                                             @\"C:\\supportFiles\\VideoMotionDetection\\config.json\");\r \r                 // Download the job output asset.\r                 DownloadAsset(asset, @\"C:\\supportFiles\\VideoMotionDetection\\Output\");\r             }\r \r             static IAsset RunVideoMotionDetectionJob(string inputMediaFilePath, string configurationFile)\r             {\r                 // Create an asset and upload the input media file to storage.\r                 IAsset asset = CreateAssetAndUploadSingleFile(inputMediaFilePath,\r                     \"My Video Motion Detection Input Asset\",\r                     AssetCreationOptions.None);\r \r                 // Declare a new job.\r                 IJob job = _context.Jobs.Create(\"My Video Motion Detection Job\");\r \r                 // Get a reference to Azure Media Motion Detector.\r                 string MediaProcessorName = \"Azure Media Motion Detector\";\r \r                 var processor = GetLatestMediaProcessorByName(MediaProcessorName);\r \r                 // Read configuration from the specified file.\r                 string configuration = File.ReadAllText(configurationFile);\r \r                 // Create a task with the encoding details, using a string preset.\r                 ITask task = job.Tasks.AddNew(\"My Video Motion Detection Task\",\r                     processor,\r                     configuration,\r                     TaskOptions.None);\r \r                 // Specify the input asset.\r                 task.InputAssets.Add(asset);\r \r                 // Add an output asset to contain the results of the job.\r                 task.OutputAssets.AddNew(\"My Video Motion Detectoion Output Asset\", AssetCreationOptions.None);\r \r                 // Use the following event handler to check job progress.  \r                 job.StateChanged += new EventHandler<JobStateChangedEventArgs>(StateChanged);\r \r                 // Launch the job.\r                 job.Submit();\r \r                 // Check job execution and wait for job to finish.\r                 Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\r \r                 progressJobTask.Wait();\r \r                 // If job state is Error, the event handling\r                 // method for job progress should log errors.  Here we check\r                 // for error state and exit if needed.\r                 if (job.State == JobState.Error)\r                 {\r                     ErrorDetail error = job.Tasks.First().ErrorDetails.First();\r                     Console.WriteLine(string.Format(\"Error: {0}. {1}\",\r                                                     error.Code,\r                                                     error.Message));\r                     return null;\r                 }\r \r                 return job.OutputMediaAssets[0];\r             }\r \r             static IAsset CreateAssetAndUploadSingleFile(string filePath, string assetName, AssetCreationOptions options)\r             {\r                 IAsset asset = _context.Assets.Create(assetName, options);\r \r                 var assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath));\r                 assetFile.Upload(filePath);\r \r                 return asset;\r             }\r \r             static void DownloadAsset(IAsset asset, string outputDirectory)\r             {\r                 foreach (IAssetFile file in asset.AssetFiles)\r                 {\r                     file.Download(Path.Combine(outputDirectory, file.Name));\r                 }\r             }\r \r             static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r             {\r                 var processor = _context.MediaProcessors\r                     .Where(p => p.Name == mediaProcessorName)\r                     .ToList()\r                     .OrderBy(p => new Version(p.Version))\r                     .LastOrDefault();\r \r                 if (processor == null)\r                     throw new ArgumentException(string.Format(\"Unknown media processor\",\r                                                                mediaProcessorName));\r \r                 return processor;\r             }\r \r             static private void StateChanged(object sender, JobStateChangedEventArgs e)\r             {\r                 Console.WriteLine(\"Job state changed event:\");\r                 Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r                 Console.WriteLine(\"  Current state: \" + e.CurrentState);\r \r                 switch (e.CurrentState)\r                 {\r                     case JobState.Finished:\r                         Console.WriteLine();\r                         Console.WriteLine(\"Job is finished.\");\r                         Console.WriteLine();\r                         break;\r                     case JobState.Canceling:\r                     case JobState.Queued:\r                     case JobState.Scheduled:\r                     case JobState.Processing:\r                         Console.WriteLine(\"Please wait...\\n\");\r                         break;\r                     case JobState.Canceled:\r                     case JobState.Error:\r                         // Cast sender as a job.\r                         IJob job = (IJob)sender;\r                         // Display or log error details as needed.\r                         // LogJobStop(job.Id);\r                         break;\r                     default:\r                         break;\r                 }\r             }\r         }\r     }\r \r \r ## <a name=\"related-links\"></a>相关链接\r [Azure 媒体服务动作检测器博客](https://azure.microsoft.com/blog/motion-detector-update/)\r \r [Azure 媒体服务分析概述](media-services-analytics-overview.md)\r \r [Azure Media Analytics demos（Azure 媒体分析演示）](http://azuremedialabs.azurewebsites.net/demos/Analytics.html)\r <!--Update_Description: update code to use AAD token instead of ACS-->"}