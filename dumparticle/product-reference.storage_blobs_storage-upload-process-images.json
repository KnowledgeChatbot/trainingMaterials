{"Title":"使用 Azure 存储在云中上传图像数据","Description":"将 Azure blob 存储与 Web 应用结合使用来存储应用数据","Content":"# <a name=\"upload-image-data-in-the-cloud-with-azure-storage\"></a>使用 Azure 存储在云中上传图像数据\r \r 本教程是一个系列中的第一部分。 本教程演示如何部署一个 Web 应用，它使用 Azure 存储客户端库将图像上传到存储帐户。 完成后，你将具有一个通过 Azure 存储来存储和显示图像的 Web 应用。\r \r ![图像容器视图](media/storage-upload-process-images/figure2.png)\r \r 在该系列的第一部分中，你将学习如何：\r \r > [!div class=\"checklist\"]\r > * 创建存储帐户\r > * 创建容器并设置权限\r > * 检索访问密钥\r > * 配置应用程序设置\r > * 将 Web 应用部署到 Azure\r > * 与 Web 应用进行交互\r \r 如果选择在本地安装并使用 CLI，本教程要求运行 Azure CLI 2.0.4 或更高版本。 运行 `az --version` 即可查找版本。 如果需要进行安装或升级，请参阅[安装 Azure CLI 2.0](https://docs.azure.cn/cli/install-azure-cli)。 \r \r ## <a name=\"create-a-resource-group\"></a>创建资源组 \r \r 使用 [az group create](https://docs.azure.cn/cli/group#create) 命令创建资源组。 Azure 资源组是在其中部署和管理 Azure 资源的逻辑容器。\r  \r 以下示例创建名为 `myResourceGroup` 的资源组。\r  \r ```azurecli \r az group create --name myResourceGroup --location chinanorth \r ``` \r \r ## <a name=\"create-a-storage-account\"></a>创建存储帐户\r  \r 此示例将图像上传到 Azure 存储帐户中的 blob 容器。 存储帐户提供唯一的命名空间来存储和访问 Azure 存储数据对象。 使用 [az storage account create](https://docs.azure.cn/cli/storage/account#create) 命令在创建的资源组中创建存储帐户。 \r \r > [!IMPORTANT] \r > 在本教程的第 2 部分中，你会对 blob 存储使用事件订阅。 当前仅对美国中西部和美国西部 2 的 Blob 存储帐户支持事件订阅。 由于存在此限制，因此必须创建由示例应用用于存储图像和缩略图的 Blob 存储帐户。   \r \r 在以下命令中，请将 `<blob_storage_account>` 占位符替换成自己的 Blob 存储帐户的全局唯一名称。  \r \r ```azurecli \r az storage account create --name <blob_storage_account> \\\r --location chinanorth --resource-group myResourceGroup \\\r --sku Standard_LRS --kind blobstorage --access-tier hot \r ``` \r  \r ## <a name=\"create-blob-storage-containers\"></a>创建 blob 存储容器\r  \r 应用使用 Blob 存储帐户中的两个容器。 这些容器类似于文件夹，用于存储 blob。 images 容器是应用在其中上传完整分辨率图像的位置。 \r \r 使用 [az storage account keys list](https://docs.azure.cn/cli/storage/account/keys#list) 命令获取存储帐户密钥。 然后使用此密钥通过 [az storage container create](https://docs.azure.cn/cli/storage/container#create) 命令创建两个容器。  \r  \r 在此例中，`<blob_storage_account>` 是你创建的 Blob 存储帐户的名称。 images 容器公共访问权限设置为 `off`，thumbs 容器公共访问权限设置为 `container`。 `container` 公共访问权限设置使访问网页的人员可以查看缩略图。\r  \r ```azurecli \r blobStorageAccount=<blob_storage_account>\r \r blobStorageAccountKey=$(az storage account keys list -g myResourceGroup \\\r -n $blobStorageAccount --query [0].value --output tsv) \r \r az storage container create -n images --account-name $blobStorageAccount \\\r --account-key $blobStorageAccountKey --public-access off \r \r az storage container create -n thumbs --account-name $blobStorageAccount \\\r --account-key $blobStorageAccountKey --public-access container\r \r echo \"Make a note of your blob storage account key...\" \r echo $blobStorageAccountKey \r ``` \r \r 记下 blob 存储帐户名称和密钥。 示例应用使用这些设置连接到存储帐户以上传图像。 \r \r ## <a name=\"create-an-app-service-plan\"></a>创建应用服务计划 \r \r [应用服务计划](../../app-service/azure-web-sites-web-hosting-plans-in-depth-overview.md)指定托管应用的 Web 服务器场的位置、大小和功能。 \r \r 使用 [az appservice plan create](https://docs.azure.cn/cli/appservice/plan#create) 命令创建应用服务计划。 \r \r 以下示例在免费定价层中创建名为 `myAppServicePlan` 的应用服务计划： \r \r ```azurecli \r az appservice plan create --name myAppServicePlan --resource-group myResourceGroup --sku FREE \r ``` \r \r ## <a name=\"create-a-web-app\"></a>创建 Web 应用 \r \r Web 应用为从 GitHub 示例存储库部署的示例应用代码提供承载空间。 使用 [az webapp create](https://docs.azure.cn/cli/webapp#create) 命令在 `myAppServicePlan` 应用服务计划中创建一个 [Web 应用](../../app-service/app-service-web-overview.md)。  \r  \r 在以下命令中，将 `<web_app>` 替换为唯一名称（有效字符是 `a-z`、`0-9` 和 `-`）。 如果 `<web_app>` 不是唯一名称，将收到错误消息：“具有给定名称 `<web_app>` 的网站已存在”。 Web 应用的默认 URL 为 `https://<web_app>.chinacloudsites.cn`。  \r \r ```azurecli\r az webapp create --name <web_app> --resource-group myResourceGroup --plan myAppServicePlan \r ``` \r \r ## <a name=\"deploy-the-sample-app-from-the-github-repository\"></a>从 GitHub 存储库部署示例应用 \r \r 应用服务支持通过多种方式将内容部署到 Web 应用。 在本教程中，你会从公共 GitHub 示例存储库部署 Web 应用：[https://github.com/Azure-Samples/storage-blob-upload-from-webapp](https://github.com/Azure-Samples/storage-blob-upload-from-webapp)。 使用 [az webapp deployment source config](https://docs.azure.cn/cli/webapp/deployment/source#config) 命令配置 Web 应用的 GitHub 部署。 将 `<web_app>` 替换为在上一步中创建的 Web 应用的名称。\r \r 示例项目包含一个 [ASP.NET MVC](https://www.asp.net/mvc) 应用，它接受图像，将其保存到存储帐户，然后从缩略图容器显示图像。 Web 应用使用 Azure 存储客户端库中的 [Microsoft.WindowsAzure.Storage](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage?view=azure-dotnet)、[Microsoft.WindowsAzure.Storage.Blob](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob?view=azure-dotnet) 和 [Microsoft.WindowsAzure.Storage.Auth](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.auth?view=azure-dotnet) 命名空间与 Azure 存储进行交互。 \r \r ```azurecli\r az webapp deployment source config --name <web_app> \\\r --resource-group myResourceGroup --branch master --manual-integration \\\r --repo-url https://github.com/Azure-Samples/storage-blob-upload-from-webapp\r ``` \r \r ## <a name=\"configure-web-app-settings\"></a>配置 Web 应用设置 \r \r 示例 Web 应用使用 [Azure 存储客户端库](https://docs.microsoft.com/dotnet/api/overview/azure/storage?view=azure-dotnet)请求用于上传图像的访问令牌。 在 Web 应用的应用设置中设置存储 SDK 使用的存储帐户凭据。 使用 [az webapp config appsettings set](https://docs.azure.cn/cli/webapp/config/appsettings#set) 命令将应用设置添加到已部署的应用。 \r \r 在下面的命令中，`<blob_storage_account>` 是 Blob 存储帐户的名称，`<blob_storage_key>` 是关联密钥。 将 `<web_app>` 替换为在上一步中创建的 Web 应用的名称。     \r \r ```azurecli \r az webapp config appsettings set --name <web_app> --resource-group myResourceGroup \\\r --settings AzureStorageConfig__AccountName=<blob_storage_account> \\\r AzureStorageConfig__ImageContainer=images  \\\r AzureStorageConfig__ThumbnailContainer=thumbs \\\r AzureStorageConfig__AccountKey=<blob_storage_key>  \r ``` \r \r Web 应用已部署并配置之后，你可以在应用中测试图像上传功能。   \r \r ## <a name=\"upload-an-image\"></a>上传映像 \r \r 若要测试 Web 应用，请浏览到已发布应用的 URL。 Web 应用的默认 URL 为 `https://<web_app>.chinacloudsites.cn`。 选择“上传照片”区域以选择并上传文件，或是将文件拖放到该区域上。 如果成功上传，图像会消失。\r \r ![ImageResizer 应用](media/storage-upload-process-images/figure1.png)\r \r 在示例代码中，`Storagehelper.cs` 文件中的 `UploadFiletoStorage` 任务用于通过 [UploadFromStreamAsync](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblockblob.uploadfromstreamasync?view=azure-dotnet) 方法将图像上传到存储帐户中的 `images` 容器。 下面的代码示例包含 `UploadFiletoStorage` 任务。 \r \r ```csharp\r public static async Task<bool> UploadFileToStorage(Stream fileStream, string fileName, AzureStorageConfig _storageConfig)\r {\r     // Create storagecredentials object by reading the values from the configuration (appsettings.json)\r     StorageCredentials storageCredentials = new StorageCredentials(_storageConfig.AccountName, _storageConfig.AccountKey);\r \r     // Create cloudstorage account by passing the storagecredentials\r     CloudStorageAccount storageAccount = new CloudStorageAccount(storageCredentials, true);\r \r     // Create the blob client.\r     CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\r \r     // Get reference to the blob container by passing the name by reading the value from the configuration (appsettings.json)\r     CloudBlobContainer container = blobClient.GetContainerReference(_storageConfig.ImageContainer);\r \r     // Get the reference to the block blob from the container\r     CloudBlockBlob blockBlob = container.GetBlockBlobReference(fileName);\r \r     // Upload the file\r     await blockBlob.UploadFromStreamAsync(fileStream);\r \r     return await Task.FromResult(true);\r }\r ```\r \r 以下是用于前一任务的类和方法：\r \r |类  |方法  |\r |---------|---------|\r |[StorageCredentials](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.auth.storagecredentials?view=azure-dotnet)     |         |\r |[CloudStorageAccount](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.cloudstorageaccount?view=azure-dotnet)    |  [CreateCloudBlobClient](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.cloudstorageaccount.createcloudblobclient?view=azure-dotnet#Microsoft_WindowsAzure_Storage_CloudStorageAccount_CreateCloudBlobClient)       |\r |[CloudBlobClient](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblobclient?view=azure-dotnet)     |[GetContainerReference](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblobclient.getcontainerreference?view=azure-dotnet#Microsoft_WindowsAzure_Storage_Blob_CloudBlobClient_GetContainerReference_System_String_)         |\r |[CloudBlobContainer](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblobcontainer?view=azure-dotnet)    | [GetBlockBlobReference](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblobcontainer.getblockblobreference?view=azure-dotnet#Microsoft_WindowsAzure_Storage_Blob_CloudBlobContainer_GetBlockBlobReference_System_String_)        |\r |[CloudBlockBlob](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblockblob?view=azure-dotnet)     | [UploadFromStreamAsync](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblockblob.uploadfromstreamasync?view=azure-dotnet)        |\r \r ## <a name=\"verify-the-image-is-shown-in-the-storage-account\"></a>验证图像是否显示在存储帐户中\r \r 登录到 https://portal.azure.cn。 从左侧菜单中，选择“存储帐户”，然后选择你的存储帐户的名称。 在“概览”下，选择“images”容器。\r \r 验证图像是否显示在该容器中。\r \r ![图像容器视图](media/storage-upload-process-images/figure13.png)\r \r ## <a name=\"test-thumbnail-viewing\"></a>测试缩略图查看\r \r 为了测试缩略图查看，你会将图像上传到缩略图容器，以确保应用程序可以读取缩略图容器。\r \r 登录到 https://portal.azure.cn。 从左侧菜单中，选择“存储帐户”，然后选择你的存储帐户的名称。 选择“Blob 服务”下的“容器”，然后选择“thumbs”容器。 选择“上传”以打开“上传 blob”窗格。\r \r 使用文件选取器选择文件，然后选择“上传”。\r \r 导航回到应用，以验证上传到 **thumbs** 容器的图像是否可见。\r \r ![图像容器视图](media/storage-upload-process-images/figure2.png)\r \r 在 Azure 门户中的 **thumbs** 容器中，选择上传的图像，然后选择“删除”以删除图像。 在本系列的第二部分中，你会自动创建缩略图图像，因此无需此测试图像。\r ## <a name=\"next-steps\"></a>后续步骤\r \r 在本系列的第一部分中，你了解了如何配置与存储交互的 Web 应用，例如如何：\r \r > [!div class=\"checklist\"]\r > * 创建存储帐户\r > * 创建容器并设置权限\r > * 检索访问密钥\r > * 配置应用程序设置\r > * 将 Web 应用部署到 Azure\r > * 与 Web 应用进行交互\r "}