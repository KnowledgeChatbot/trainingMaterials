{"Title":"Python 基于固定 IP 来命名 ARM 虚拟机的实现","Description":"如何通过 Python 批量创建基于固定 IP 来命名的 ARM 虚拟机","Content":"\r # Python 基于固定 IP 来命名 ARM 虚拟机的实现\r \r ## **问题描述**\r \r 希望通过 Python 批量创建 ARM 虚拟机，并且在虚拟机命名时加入固定 IP 信息，方便管理维护。\r \r ![vm](./media/aog-virtual-machines-qa-arm-batch-create-set-static-ip-with-python/vm.png)\r \r ## **问题分析**\r \r 在创建 ARM 虚拟机之前，先创建固定 IP，然后获取固定 IP 地址，创建虚拟机时通过该 IP 地址格式化虚拟机名称。然后将固定 IP 配置到网络接口，基于该网络接口配置创建 ARM 虚拟机。\r \r ## **解决方法**\r \r ### **模块安装**\r \r 本文在 Windows Python 环境下进行测试，环境及模块依赖如下：\r \r - 官网下载 msi 安装包，管理员命令行执行以下安装脚本\r \r     ```Bash\r     msiexec /package python-xxx.msi\r     ```\r \r - 使用 PIP 安装 Azure（需要 pip 9+ 支持，Python 2.7 环境已内置 pip 9+ 版本，不需更新）\r \r     ```Bash\r     pip install azure\r     ```\r \r - 查看已安装的模块\r \r     ```Bash\r     pip freeze\r     ```\r \r ### **代码实现**\r \r ```Python\r from azure import *\r from azure.mgmt.compute import ComputeManagementClient\r from azure.mgmt.network import NetworkManagementClient\r from azure.mgmt.resource import ResourceManagementClient\r from azure.common.credentials import UserPassCredentials\r from azure.mgmt.compute.models import *\r from msrest.serialization import *\r \r credentials = UserPassCredentials(\r     \"订阅账户\",\r     \"账户密码\",\r     china=True\r )\r \r resource_client = ResourceManagementClient(\r credentials,\r '订阅 ID',\r base_url = 'https://management.chinacloudapi.cn'\r )\r \r resource_client.providers.register('Microsoft.Compute')\r resource_client.providers.register('Microsoft.Network')\r \r compute_client = ComputeManagementClient(\r credentials,\r '订阅 ID',\r base_url = 'https://management.chinacloudapi.cn'\r )\r \r network_client = NetworkManagementClient(\r credentials,\r     '订阅 ID',\r base_url = 'https://management.chinacloudapi.cn'\r )\r \r # Create Public IP\r # result = network_client.public_ip_addresses.create_or_update(\r #     'geogroup',     #group_name\r #     'geo-ip-01',        #ip_name\r #     PublicIPAddress(\r #         location='China North',\r #         public_ip_allocation_method=IPAllocationMethod.static,\r #         idle_timeout_in_minutes=4,\r #         ),\r #     )\r # result.wait()\r \r public_ip_addresses = 'public_ip_name'\r group_name = ''public_ip_group'\r \r result = network_client.public_ip_addresses.get(group_name,public_ip_addresses)\r print result.__dict__.items()\r print result.ip_address\r print result.ip_address.replace(\".\",\"-\")\r \r storageName = \"storage account name\"\r vmName = \"geovm-\"+result.ip_address.replace(\".\",\"-\")\r print vmName\r \r location = \"chinanorth\"\r print location\r \r os_profile = OSProfile(\r     computer_name= vmName,\r     admin_username='username',\r     admin_password='password,\r )\r print os_profile\r \r hardware_profile = HardwareProfile(\r     vm_size=VirtualMachineSizeTypes.standard_a0\r )\r print hardware_profile\r \r storage_profile = StorageProfile(\r     os_disk=OSDisk(\r         caching=CachingTypes.none,\r         create_option=DiskCreateOptionTypes.from_image,\r         name=vmName,\r         vhd=VirtualHardDisk(\r uri='https://'+storageName+'.blob.core.chinacloudapi.cn/vhds/'+vmName+'.vhd',\r         ),\r     ),\r )\r \r storage_profile.image_reference = ImageReference(\r     publisher='Canonical',\r     offer='UbuntuServer',\r     sku='16.04.0-LTS',\r     version='latest'\r )\r print storage_profile\r \r network_profile = NetworkProfile(\r     network_interfaces=[\r         NetworkInterfaceReference(\r             id=\"在新门户，网络接口-属性中获取资源 ID,该网络接口需要配置固定 IP\",\r         ),\r     ],\r )\r print network_profile\r \r params_create = VirtualMachine(\r     location=location,\r     os_profile=os_profile,\r     hardware_profile=hardware_profile,\r     network_profile=network_profile,\r     storage_profile=storage_profile,\r )\r print params_create\r \r result_create = compute_client.virtual_machines.create_or_update(\r     group_name,\r     vmName,\r     params_create\r )\r \r result_create.wait()\r print 'ok'\r ```"}