{"Title":"Azure WCF 中继本地/云混合应用程序 (.NET)","Description":"了解如何使用 Azure WCF 中继创建 .NET 本地/云混合应用程序。","Content":"# <a name=\"net-on-premisescloud-hybrid-application-using-azure-wcf-relay\"></a>使用 Azure WCF 中继创建 .NET 本地/云混合应用程序\r \r 本文演示如何使用 Azure 和 Visual Studio 生成混合云应用程序。 本教程假定你之前未使用过 Azure。 在不到 30 分钟的时间内，就能让使用多个 Azure 资源的应用程序在云中启动并运行。\r \r 学习内容包括：\r \r * 如何创建或修改现有 Web 服务以供 Web 解决方案使用。\r * 如何使用 Azure WCF 中继服务在 Azure 应用程序和托管于其他某处的 Web 服务之间共享数据。\r \r [!INCLUDE [create-account-note](../../includes/create-account-note.md)]\r \r ## <a name=\"how-azure-relay-helps-with-hybrid-solutions\"></a>Azure 中继功能将为混合解决方案带来哪些帮助\r \r 业务解决方案通常由为处理独特的新业务需求而编写的自定义代码和已有的解决方案和系统所提供的现有功能组成。\r \r 解决方案架构师开始使用云来轻松地处理缩放需求和降低运营成本。 在此过程中，他们发现希望用作其解决方案的构建基块的现有服务资产位于企业防火墙内，无法通过云解决方案轻松访问。 许多内部服务的构建或托管方式使得它们无法在企业网络边缘轻松公开。\r \r [Azure 中继](/service-bus/)的设计考虑到如何利用现有的 Windows Communication Foundation (WCF) Web 服务，使得位于企业外部的解决方案能够安全地访问这些服务，而无需对企业网络基础结构进行彻底的更改。 虽然此类中继服务仍托管在现有环境中，但它们会将侦听传入会话和请求这一任务委派给云托管的中继服务。 Azure 中继还会通过使用[共享访问签名 (SAS)](../service-bus-messaging/service-bus-sas.md) 身份验证来保护这些服务，以阻止未经授权的访问。\r \r ## <a name=\"solution-scenario\"></a>解决方案应用场景\r 在本教程中，你创建一个 ASP.NET 网站，用于查看产品库存页上的产品列表。\r \r \r ![][0]\r \r 本教程假定产品信息位于现有的本地系统中，而且你使用 Azure 中继来访问该系统。 这是由在简单的控制台应用程序中运行的 Web 服务模拟的，并由一系列内存中产品提供支持。 你能够在自己的计算机上运行此控制台应用程序并将 Web 角色部署到 Azure 中。 通过此操作，将会看到在 Azure 数据中心运行的 Web 角色确实会调入你的计算机，即使你的计算机几乎肯定会驻留在至少一个防火墙和一个网络地址转换 (NAT) 层后面，情况也是如此。\r \r ## <a name=\"set-up-the-development-environment\"></a>设置开发环境\r 在开始开发 Azure 应用程序之前，需要下载工具并设置开发环境：\r \r 1. 从 SDK [下载页](https://www.azure.cn/downloads/)安装用于 .NET 的 Azure SDK。\r 2. 在“.NET”列中，单击要使用的 [Visual Studio](http://www.visualstudio.com) 版本。 本教程中的步骤使用 Visual Studio 2017。\r 3. 当提示是要运行还是保存安装程序时，单击“运行”。\r 4. 在“Web 平台安装程序”中，单击“安装”，并继续安装。\r 5. 安装完成后，就有了开始开发应用所需的一切。 SDK 包含了一些工具，可利用这些工具在 Visual Studio 中轻松开发 Azure 应用程序。\r \r ## <a name=\"create-a-namespace\"></a>创建命名空间\r 若要开始在 Azure 中使用中继功能，必须先创建一个服务命名空间。 命名空间提供了用于对应用程序中的 Azure 资源进行寻址的范围容器。 请按照[此处的说明](./relay-create-namespace-portal.md)创建中继命名空间。\r \r ## <a name=\"create-an-on-premises-server\"></a>创建本地服务器\r \r 首先，构建 (mock) 本地产品目录系统。 这非常简单；可以认为，此系统代表一个实际存在的本地产品目录系统，其中包含我们将尝试集成的完整服务图面。\r \r 此项目是一个 Visual Studio 控制台应用程序，它使用 [Azure 服务总线 NuGet 包](https://www.nuget.org/packages/WindowsAzure.ServiceBus/) 来包含服务总线库和配置设置。\r \r ### <a name=\"create-the-project\"></a>创建项目\r \r 1. 使用管理员特权启动 Microsoft Visual Studio。 为此，请右键单击 Visual Studio 程序图标，然后单击“以管理员身份运行”。\r 2. 在 Visual Studio 的“文件”菜单中，单击“新建”，并单击“项目”。\r 3. 从“已安装的模板”的“Visual C#”下，单击“控制台应用(.NET Framework)”。 在“名称”框中，键入名称“ProductsServer”：\r \r    ![][11]\r 4. 单击“确定”创建“ProductsServer”项目。\r 5. 如果已为 Visual Studio 安装 NuGet 包管理器，请跳到下一步骤。 否则，请访问 [NuGet][NuGet]，然后单击[安装 NuGet](http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c)。 按照提示操作以安装 NuGet 包管理器，然后重启 Visual Studio。\r 6. 在解决方案资源管理器中，右键单击“ProductsServer”项目，然后单击“管理 NuGet 程序包”。\r 7. 单击“浏览”选项卡，并搜索 `Microsoft Azure Service Bus`。 选择“WindowsAzure.ServiceBus”包。\r 8. 单击“安装” 并接受使用条款。\r \r    ![][13]\r \r    请注意，现已引用所需的客户端程序集。\r 8. 为产品协定添加新类。 在“解决方案资源管理器”中，右键单击“ProductsServer”项目，单击“添加”，然后单击“类”。\r 9. 在“名称”框中，键入名称 **ProductsContract.cs**。 。\r 10. 在“ProductsContract.cs”中，将命名空间定义替换为以下代码，以定义服务的协定。\r \r     ```csharp\r     namespace ProductsServer\r     {\r         using System.Collections.Generic;\r         using System.Runtime.Serialization;\r         using System.ServiceModel;\r \r         // Define the data contract for the service\r         [DataContract]\r         // Declare the serializable properties.\r         public class ProductData\r         {\r             [DataMember]\r             public string Id { get; set; }\r             [DataMember]\r             public string Name { get; set; }\r             [DataMember]\r             public string Quantity { get; set; }\r         }\r \r         // Define the service contract.\r         [ServiceContract]\r         interface IProducts\r         {\r             [OperationContract]\r             IList<ProductData> GetProducts();\r \r         }\r \r         interface IProductsChannel : IProducts, IClientChannel\r         {\r         }\r     }\r     ```\r 11. 在 Program.cs 中，将命名空间定义替换为以下代码，以为其添加配置文件服务和主机。\r \r     ```csharp\r     namespace ProductsServer\r     {\r         using System;\r         using System.Linq;\r         using System.Collections.Generic;\r         using System.ServiceModel;\r \r         // Implement the IProducts interface.\r         class ProductsService : IProducts\r         {\r \r             // Populate array of products for display on website\r             ProductData[] products =\r                 new []\r                     {\r                         new ProductData{ Id = \"1\", Name = \"Rock\",\r                                          Quantity = \"1\"},\r                         new ProductData{ Id = \"2\", Name = \"Paper\",\r                                          Quantity = \"3\"},\r                         new ProductData{ Id = \"3\", Name = \"Scissors\",\r                                          Quantity = \"5\"},\r                         new ProductData{ Id = \"4\", Name = \"Well\",\r                                          Quantity = \"2500\"},\r                     };\r \r             // Display a message in the service console application\r             // when the list of products is retrieved.\r             public IList<ProductData> GetProducts()\r             {\r                 Console.WriteLine(\"GetProducts called.\");\r                 return products;\r             }\r \r         }\r \r         class Program\r         {\r             // Define the Main() function in the service application.\r             static void Main(string[] args)\r             {\r                 var sh = new ServiceHost(typeof(ProductsService));\r                 sh.Open();\r \r                 Console.WriteLine(\"Press ENTER to close\");\r                 Console.ReadLine();\r \r                 sh.Close();\r             }\r         }\r     }\r     ```\r 12. 在“解决方案资源管理器”中，双击“App.config”文件以在 Visual Studio 编辑器中将其打开。 在 `<system.ServiceModel>` 元素的下面（仍在 `<system.ServiceModel>` 中）添加以下 XML 代码。 确保将 *yourServiceNamespace* 替换为命名空间的名称，并将 *yourKey* 替换为之前从门户中检索到的 SAS 密钥：\r \r     ```xml\r     <system.serviceModel>\r     ...\r       <services>\r          <service name=\"ProductsServer.ProductsService\">\r            <endpoint address=\"sb://yourServiceNamespace.servicebus.chinacloudapi.cn/products\" binding=\"netTcpRelayBinding\" contract=\"ProductsServer.IProducts\" behaviorConfiguration=\"products\"/>\r          </service>\r       </services>\r       <behaviors>\r          <endpointBehaviors>\r            <behavior name=\"products\">\r              <transportClientEndpointBehavior>\r                 <tokenProvider>\r                    <sharedAccessSignature keyName=\"RootManageSharedAccessKey\" key=\"yourKey\" />\r                 </tokenProvider>\r              </transportClientEndpointBehavior>\r            </behavior>\r          </endpointBehaviors>\r       </behaviors>\r     </system.serviceModel>\r     ```\r     就此示例来说，由“transportClientEndpointBehavior”引发的错误只是一个警告，不是阻止问题。\r     \r 13. 仍在 App.config 文件中，在 `<appSettings>` 元素中，将连接字符串值替换为之前从门户获取的连接字符串。\r \r     ```xml\r     <appSettings>\r        <!-- Service Bus specific app settings for messaging connections -->\r        <add key=\"Microsoft.ServiceBus.ConnectionString\"\r            value=\"Endpoint=sb://yourNamespace.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\"/>\r     </appSettings>\r     ```\r 14. 按 **Ctrl+Shift+B** 或从“生成”菜单中单击“生成解决方案”生成应用程序，并验证到目前为止操作的准确性。\r \r ## <a name=\"create-an-aspnet-application\"></a>创建 ASP.NET 应用程序\r \r 在本部分中，需要生成一个简单的 ASP.NET 应用程序，以便显示你的产品服务中检索到的数据。\r \r ### <a name=\"create-the-project\"></a>创建项目\r \r 1. 确保使用管理员权限运行 Visual Studio。\r 2. 在 Visual Studio 的“文件”菜单中，单击“新建”，并单击“项目”。\r 3. 从“已安装的模板”的“Visual C#”下，单击“ASP.NET Web 应用程序(.NET Framework)”。 **ProductsPortal**。 。\r \r    ![][15]\r \r 4. 从“新建 ASP.NET Web 应用程序”对话框的“ASP.NET 模板”列表中，单击“MVC”。\r \r    ![][16]\r \r 6. 单击“更改身份验证”  按钮。 在“更改身份验证”对话框中，确保已选择“无身份验证”，然后单击“确定”。 在本教程中，你将部署无需用户登录的应用。\r \r     ![][18]\r \r 7. 回到“新建 ASP.NET Web 应用程序”对话框，单击“确定”创建 MVC 应用。\r 8. 现在必须配置新 Web 应用的 Azure 资源。 按照[本文的“发布到 Azure”部分](../app-service/app-service-web-get-started-dotnet.md#publish-to-azure)中的步骤操作。 然后，返回到本教程并继续执行下一步。\r 10. 在解决方案资源管理器中，右键单击“模型”，然后依次单击“添加”和“类”。 在“名称”框中，键入名称 **Product.cs**。 。\r \r     ![][17]\r \r ### <a name=\"modify-the-web-application\"></a>修改 Web 应用程序\r 1. 在 Visual Studio 的 Product.cs 文件中将现有命名空间定义替换为以下代码。\r \r    ```csharp\r     // Declare properties for the products inventory.\r     namespace ProductsWeb.Models\r     {\r        public class Product\r        {\r            public string Id { get; set; }\r            public string Name { get; set; }\r            public string Quantity { get; set; }\r        }\r     }\r     ```\r 2. 在解决方案资源管理器中，展开 **Controllers** 文件夹，然后双击 **HomeController.cs** 文件以在 Visual Studio 中将其打开。\r 3. 在 **HomeController.cs**中，将现有命名空间定义替换为以下代码。\r \r     ```csharp\r     namespace ProductsWeb.Controllers\r     {\r         using System.Collections.Generic;\r         using System.Web.Mvc;\r         using Models;\r \r         public class HomeController : Controller\r         {\r             // Return a view of the products inventory.\r             public ActionResult Index(string Identifier, string ProductName)\r             {\r                 var products = new List<Product>\r                     {new Product {Id = Identifier, Name = ProductName}};\r                 return View(products);\r             }\r          }\r     }\r     ```\r 4. 在解决方案资源管理器中，展开 Views\\Shared 文件夹，然后双击 **_Layout.cshtml** 在 Visual Studio 编辑器中将其打开。\r 5. 将每一处 **My ASP.NET Application** 更改为 **Northwind Traders Products**。\r 6. 删除“Home”、“About”和“Contact”链接。 在以下示例中，删除突出显示的代码。\r \r     ![][41]\r \r 7. 在解决方案资源管理器中，展开 Views\\Home 文件夹，然后双击 **Index.cshtml** 在 Visual Studio 编辑器中将其打开。 将文件的全部内容替换为以下代码。\r \r    ```html\r    @model IEnumerable<ProductsWeb.Models.Product>\r \r    @{\r             ViewBag.Title = \"Index\";\r    }\r \r    <h2>Prod Inventory</h2>\r \r    <table>\r              <tr>\r                  <th>\r                      @Html.DisplayNameFor(model => model.Name)\r                  </th>\r                  <th></th>\r                  <th>\r                      @Html.DisplayNameFor(model => model.Quantity)\r                  </th>\r              </tr>\r \r    @foreach (var item in Model) {\r              <tr>\r                  <td>\r                      @Html.DisplayFor(modelItem => item.Name)\r                  </td>\r                  <td>\r                      @Html.DisplayFor(modelItem => item.Quantity)\r                  </td>\r              </tr>\r    }\r \r    </table>\r    ```\r 8. 若要验证到目前为止操作的准确性，可以按 **Ctrl+Shift+B** 生成项目。\r \r ### <a name=\"run-the-app-locally\"></a>在本地运行应用\r 运行应用程序以验证其是否正常运行。\r \r 1. 确保 **ProductsPortal** 是活动项目。 在“解决方案资源管理器”中，右键单击项目名称并选择“设置为启动项目”。\r 2. 在 Visual Studio 中，按 F5。\r 3. 应用程序应在浏览器中显示为正在运行。\r \r    ![][21]\r \r ## <a name=\"put-the-pieces-together\"></a>将各个部分组合在一起\r 下一步是将本地产品服务器与 ASP.NET 应用程序挂钩。\r \r 1. 如果尚未打开在[创建 ASP.NET 应用程序](#create-an-aspnet-application)部分中创建的 **ProductsPortal** 项目，请在 Visual Studio 中重新打开该项目。\r 2. 采用与“创建本地服务器”部分类似的步骤，将 NuGet 包添加到项目“引用”中。 在解决方案资源管理器中，右键单击“ProductsPortal”项目，然后单击“管理 NuGet 程序包”。\r 3. 搜索“WindowsAzure.ServiceBus”，然后选择“WindowsAzure.ServiceBus”项。 然后，完成安装过程并关闭此对话框。\r 4. 在解决方案资源管理器中，右键单击“ProductsPortal”项目，然后单击“添加”，再单击“现有项”。\r 5. 从 **ProductsServer** 控制台项目导航到 **ProductsContract.cs** 文件。 单击以突出显示 ProductsContract.cs。 单击“添加”旁边的向下箭头，然后单击“添加为链接”。\r \r    ![][24]\r 6. 现在，在 Visual Studio 编辑器中打开 **HomeController.cs** 文件，并将命名空间定义替换为以下代码。 确保将 *yourServiceNamespace* 替换为你的服务命名空间的名称，并将 *yourKey* 替换为你的 SAS 密钥。 这使客户端能够调用本地服务，并返回调用的结果。\r \r    ```csharp\r    namespace ProductsWeb.Controllers\r    {\r        using System.Linq;\r        using System.ServiceModel;\r        using System.Web.Mvc;\r        using Microsoft.ServiceBus;\r        using Models;\r        using ProductsServer;\r \r        public class HomeController : Controller\r        {\r            // Declare the channel factory.\r            static ChannelFactory<IProductsChannel> channelFactory;\r \r            static HomeController()\r            {\r                // Create shared access signature token credentials for authentication.\r                channelFactory = new ChannelFactory<IProductsChannel>(new NetTcpRelayBinding(),\r                    \"sb://yourServiceNamespace.servicebus.chinacloudapi.cn/products\");\r                channelFactory.Endpoint.Behaviors.Add(new TransportClientEndpointBehavior {\r                    TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\r                        \"RootManageSharedAccessKey\", \"yourKey\") });\r            }\r \r            public ActionResult Index()\r            {\r                using (IProductsChannel channel = channelFactory.CreateChannel())\r                {\r                    // Return a view of the products inventory.\r                    return this.View(from prod in channel.GetProducts()\r                                     select\r                                         new Product { Id = prod.Id, Name = prod.Name,\r                                             Quantity = prod.Quantity });\r                }\r            }\r        }\r    }\r    ```\r 7. 在解决方案资源管理器中，右键单击 **ProductsPortal** 解决方案（确保右键单击解决方案，而不是项目）。 单击“添加”，然后单击“现有项目”。\r 8. 导航到 **ProductsServer** 项目，然后双击“ProductsServer.csproj”解决方案文件将其添加。\r 9. **ProductsServer** 必须正在运行，才能在 **ProductsPortal** 上显示数据。 在解决方案资源管理器中，右键单击“ProductsPortal”解决方案并单击“属性”。  对话框。\r 10. 在左侧，单击“启动项目”。 在右侧，单击“多个启动项目”。 确保 **ProductsServer** 和 **ProductsPortal** 按此顺序显示，并且将“启动”设置为两者的操作。\r \r       ![][25]\r 11. 仍在“属性”对话框中，单击左侧的“项目依赖项”。\r 12. 在“项目”列表中，单击“ProductsServer”。 确保未选择“ProductsPortal”。\r 13. 在“项目”列表中，单击“ProductsPortal”。 确保已选择 **ProductsServer**。\r \r     ![][26]\r 14. 单击你正在使用的 Visual Studio 版本的“安装 SDK”in the **属性页** ”。\r \r ## <a name=\"run-the-project-locally\"></a>在本地运行项目\r 若要在本地测试应用程序，请在 Visual Studio 中按 **F5**。 本地服务器 (**ProductsServer**) 应该会先启动，然后 **ProductsPortal** 应用程序应该会在浏览器窗口中启动。 这次，你会看到产品库存列出了从产品服务本地系统中检索到的数据。\r \r ![][10]\r \r 按“ProductsPortal”页上的“刷新”。 每次刷新该页面时，都会看到服务器应用在调用来自 **ProductsServer** 的 `GetProducts()` 时显示一条消息。\r \r 关闭这两个应用程序，然后再继续执行下一步。\r \r ## <a name=\"deploy-the-productsportal-project-to-an-azure-web-app\"></a>将 ProductsPortal 项目部署到 Azure Web 应用\r \r 下一步是重新发布 Azure Web 应用 ProductsPortal 前端。 请执行以下操作：\r \r 1. 在“解决方案资源管理器”中，右键单击“ProductsPortal”项目并单击“发布”。 然后，在“发布”页中单击“发布”。\r \r   > [!NOTE]\r   > 在部署后自动启动 **ProductsPortal** Web 项目时，可能会在浏览器窗口中看到错误消息。 这在意料之中，因为 **ProductsServer** 应用程序尚未运行。\r   >\r   > \r \r 2. 复制已部署 Web 应用的 URL，你在下一个步骤中需要用到该 URL。 也可以从 Visual Studio 的“Azure 应用服务活动”窗口中获取此 URL：\r \r ![][9]\r \r 3. 关闭浏览器窗口，停止正在运行的应用程序。\r \r ### <a name=\"set-productsportal-as-web-app\"></a>将 ProductsPortal 设置为 Web 应用\r 在云中运行应用程序之前，必须确保 **ProductsPortal** 从 Visual Studio 内以 Web 应用的形式启动。\r \r 1. 在 Visual Studio 中，右键单击“ProductsPortal”项目，然后单击“属性”。\r 2. 在左侧列中，单击“Web”。\r 3. 在“启动操作”部分中，单击“启动 URL”按钮，然后在文本框中输入先前部署的 Web 应用的 URL；例如 `http://productsportal1234567890.azurewebsites.net/`。\r \r     ![][27]\r 4. 从 Visual Studio 的“文件”菜单中，单击“全部保存”。\r 5. 从 Visual Studio 的“生成”菜单中，单击“重新生成解决方案”。\r \r ## <a name=\"run-the-application\"></a>运行应用程序\r 1. 按 F5 生成并运行应用程序。 本地服务器（**ProductsServer** 控制台应用程序）应该会先启动，然后 **ProductsPortal** 应用程序应该会在浏览器窗口中启动，如以下屏幕截图所示。 再次提请注意，产品库存列表会列出从产品服务本地系统检索到的数据，并在 Web 应用中显示该数据。 请检查 URL，确保 **ProductsPortal** 正在云中以 Azure Web 应用的形式运行。\r \r    ![][1]\r \r    > [!IMPORTANT]\r    > **ProductsServer** 控制台应用程序必须正在运行，而且能够为 **ProductsPortal** 应用程序提供数据。 如果浏览器显示错误，请再多等几秒钟，让 **ProductsServer** 加载并显示以下消息。 然后按浏览器中的“刷新”。\r    >\r    >\r \r    ![][37]\r 2. 返回到浏览器中，按“ProductsPortal”页上的“刷新”。 每次刷新该页面时，都会看到服务器应用在调用来自 **ProductsServer** 的 `GetProducts()` 时显示一条消息。\r \r     ![][38]\r \r ## <a name=\"next-steps\"></a>后续步骤\r 若要了解有关 Azure 中继的详细信息，请参阅以下资源：  \r \r * [什么是 Azure 中继？](./relay-what-is-it.md)  \r * [如何使用 Azure 中继](relay-wcf-dotnet-get-started.md)  \r \r [0]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hybrid.png\r [1]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/App2.png\r [NuGet]: http://nuget.org\r \r [11]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-con-1.png\r [13]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-multi-tier-13.png\r [15]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-2.png\r [16]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-4.png\r [17]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-7.png\r [18]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-5.png\r [9]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-9.png\r [10]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/App3.png\r \r [21]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/App1.png\r [24]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-12.png\r [25]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-13.png\r [26]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-14.png\r [27]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-8.png\r \r [36]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/App2.png\r [37]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-service1.png\r [38]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-service2.png\r [41]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-multi-tier-40.png\r [43]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-43.png\r \r \r <!--Update_Description:update meta properties and wording-->"}