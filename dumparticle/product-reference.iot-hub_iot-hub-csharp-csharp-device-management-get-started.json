{"Title":"Azure IoT 中心设备管理入门 (.NET/.NET)","Description":"如何使用 Azure IoT 中心设备管理启动远程设备重启。 使用适用于 .NET 的 Azure IoT 设备 SDK 实现包含直接方法的模拟设备应用，并使用适用于 .NET 的 Azure IoT 服务 SDK 实现调用直接方法的服务应用。","Content":"# <a name=\"get-started-with-device-management-netnet\"></a>设备管理入门 (.NET/.NET)\r \r [!INCLUDE [iot-hub-selector-dm-getstarted](../../includes/iot-hub-selector-dm-getstarted.md)]\r \r 本教程演示如何：\r \r * 使用 Azure 门户创建 IoT 中心，以及如何在 IoT 中心创建设备标识。\r * 创建包含重新启动该设备的直接方法的模拟设备应用。 直接方法是从云中调用的。\r * 创建一个 .NET 控制台应用，其通过 IoT 中心在模拟设备应用上调用重新启动直接方法。\r \r 在本教程结束时，会得到两个 .NET 控制台应用：\r \r * **SimulateManagedDevice**，它使用先前创建的设备标识连接到 IoT 中心，接收重新启动直接方法，模拟物理重新启动，并报告上次重新启动的时间。\r * **TriggerReboot**，它在模拟设备应用中调用直接方法、显示响应以及显示更新的报告属性。\r \r 要完成本教程，需要以下各项：\r \r * Visual Studio 2015 或 Visual Studio 2017。\r * 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r \r [!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r \r <a id=\"DeviceIdentity_csharp\"></a>\r [!INCLUDE [iot-hub-get-started-create-device-identity-portal](../../includes/iot-hub-get-started-create-device-identity-portal.md)]\r \r ## <a name=\"trigger-a-remote-reboot-on-the-device-using-a-direct-method\"></a>使用直接方法在设备上触发远程重新启动\r 在本部分中，你创建一个 .NET 控制台应用（使用 C#）以使用直接方法在设备上启动远程重新启动。 该应用使用设备孪生查询来搜索该设备的上次重新启动时间。\r \r 1. 在 Visual Studio 中，使用“控制台应用(.NET Framework)”项目模板将 Visual C# Windows 经典桌面项目添加到新解决方案。 确保 .NET Framework 版本为 4.5.1 或更高。 **TriggerReboot**。\r \r     ![新的 Visual C# Windows 经典桌面项目][img-createserviceapp]\r \r 2. 在“解决方案资源管理器”中，右键单击“TriggerReboot”项目，并单击“管理 NuGet 包”。\r 3. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索 **microsoft.azure.devices**，选择“安装”以安装 **Microsoft.Azure.Devices** 包，并接受使用条款。 此过程会下载、安装 [Azure IoT 服务 SDK][lnk-nuget-service-sdk] NuGet 包及其依赖项并添加对它的引用。\r \r     ![“NuGet 包管理器”窗口][img-servicenuget]\r 4. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r    \r         using Microsoft.Azure.Devices;\r         using Microsoft.Azure.Devices.Shared;\r         \r 5. 将以下字段添加到 **Program** 类。 将占位符值替换为在“创建 IoT 中心”部分中为中心创建的 IoT 中心连接字符串。 \r    \r         static RegistryManager registryManager;\r         static string connString = \"{iot hub connection string}\";\r         static ServiceClient client;\r         static string targetDevice = \"myDeviceId\";\r         \r 6. 将以下方法添加到 **Program** 类。  此代码获取重新启动设备的设备孪生并输出报告属性。\r    \r         public static async Task QueryTwinRebootReported()\r         {\r             Twin twin = await registryManager.GetTwinAsync(targetDevice);\r             Console.WriteLine(twin.Properties.Reported.ToJson());\r         }\r         \r 7. 将以下方法添加到 **Program** 类。  此代码使用直接方法在设备上发起重新启动操作。\r \r         public static async Task StartReboot()\r         {\r             client = ServiceClient.CreateFromConnectionString(connString);\r             CloudToDeviceMethod method = new CloudToDeviceMethod(\"reboot\");\r             method.ResponseTimeout = TimeSpan.FromSeconds(30);\r \r             CloudToDeviceMethodResult result = await client.InvokeDeviceMethodAsync(targetDevice, method);\r \r             Console.WriteLine(\"Invoked firmware update on device.\");\r         }\r \r 7. 最后，在 **Main** 方法中添加以下行：\r    \r         registryManager = RegistryManager.CreateFromConnectionString(connString);\r         StartReboot().Wait();\r         QueryTwinRebootReported().Wait();\r         Console.WriteLine(\"Press ENTER to exit.\");\r         Console.ReadLine();\r         \r 8. 生成解决方案。\r \r > [!NOTE]\r > 本教程仅针对设备的报告属性执行单个查询。 在生产代码中，建议使用轮询机制来检测报告属性的更改。\r \r ## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r 在本部分，用户需\r \r * 创建一个 .NET 控制台应用，用于响应通过云调用的直接方法\r * 触发模拟的设备重启\r * 使用报告属性，允许通过设备孪生查询标识设备及其上次重启的时间\r \r 1. 在 Visual Studio 中，使用“**控制台应用程序**”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 将项目命名为“SimulateManagedDevice”。\r    \r     ![新的 Visual C# Windows 经典设备应用][img-createdeviceapp]\r     \r 2. 在解决方案资源管理器中，右键单击“SimulateManagedDevice”项目，并单击“管理 NuGet 包...”。\r 3. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索“microsoft.azure.devices.client”。 选择“安装”，安装“microsoft.azure.devices.client”包，并接受使用条款。 该过程将下载、安装 [Azure IoT 设备 SDK][lnk-nuget-client-sdk] NuGet 包及其依赖项并添加对它的引用。\r    \r     ![“NuGet 包管理器”窗口客户端应用][img-clientnuget]\r 4. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r    \r         using Microsoft.Azure.Devices.Client;\r         using Microsoft.Azure.Devices.Shared;\r \r 5. 将以下字段添加到 **Program** 类。 将占位符值替换为上一部分中所述的设备连接字符串。\r    \r         static string DeviceConnectionString = \"HostName=<yourIotHubName>.azure-devices.cn;DeviceId=<yourIotDeviceName>;SharedAccessKey=<yourIotDeviceAccessKey>\";\r         static DeviceClient Client = null;\r \r 6. 添加以下函数，实现设备上的直接方法：\r \r         static Task<MethodResponse> onReboot(MethodRequest methodRequest, object userContext)\r         {\r             // In a production device, you would trigger a reboot scheduled to start after this method returns\r             // For this sample, we simulate the reboot by writing to the console and updating the reported properties \r             try\r             {\r                 Console.WriteLine(\"Rebooting!\");\r \r                 // Update device twin with reboot time. \r                 TwinCollection reportedProperties, reboot, lastReboot;\r                 lastReboot = new TwinCollection();\r                 reboot = new TwinCollection();\r                 reportedProperties = new TwinCollection();\r                 lastReboot[\"lastReboot\"] = DateTime.Now;\r                 reboot[\"reboot\"] = lastReboot;\r                 reportedProperties[\"iothubDM\"] = reboot;\r                 Client.UpdateReportedPropertiesAsync(reportedProperties).Wait();\r             }\r             catch (Exception ex)\r             {\r                 Console.WriteLine();\r                 Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r             }\r \r             string result = \"'Reboot started.'\";\r             return Task.FromResult(new MethodResponse(Encoding.UTF8.GetBytes(result), 200));\r         }\r \r 7. 最后，将以下代码添加到 **Main** 方法，打开与 IoT 中心的连接并初始化方法侦听器：\r    \r         try\r         {\r             Console.WriteLine(\"Connecting to hub\");\r             Client = DeviceClient.CreateFromConnectionString(DeviceConnectionString, TransportType.Mqtt);\r \r             // setup callback for \"reboot\" method\r             Client.SetMethodHandlerAsync(\"reboot\", onReboot, null).Wait();\r             Console.WriteLine(\"Waiting for reboot method\\n Press enter to exit.\");\r             Console.ReadLine();\r \r             Console.WriteLine(\"Exiting...\");\r \r             // as a good practice, remove the \"reboot\" handler\r             Client.SetMethodHandlerAsync(\"reboot\", null, null).Wait();\r             Client.CloseAsync().Wait();\r         }\r         catch (Exception ex)\r         {\r             Console.WriteLine();\r             Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r         }\r         \r 8. 在 Visual Studio 的“解决方案资源管理器”中右键单击解决方案，并单击“设置启动项目...”。选择“单个启动项目”，并在下拉菜单中选择“SimulateManagedDevice”项目。 生成解决方案。       \r \r > [!NOTE]\r > 为简单起见，本教程不实现任何重试策略。 在生产代码中，应该按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r \r \r ## <a name=\"run-the-apps\"></a>运行应用\r 现在，已准备就绪，可以运行应用。\r 1. 运行 .NET 设备应用“SimulateManagedDevice”。  右键单击“SimulateManagedDevice”项目，选择“调试”，并选择“启动新实例”。 它应开始侦听来自 IoT 中心的方法调用： \r \r 2. 现在，设备已连接，正在等待方法调用，此时可运行 .NET **TriggerReboot** 应用来调用模拟设备应用中的重新启动方法。 右键单击“TriggerReboot”项目，选择“调试”，并选择“启动新实例”。 应当会看到写入到  **SimulatedManagedDevice** 控制台中的“Rebooting!” 以及写入到 **TriggerReboot** 控制台中的设备报告属性（包括上次重新启动时间）。\r    \r     ![服务和设备应用运行][img-combinedrun]\r \r [!INCLUDE [iot-hub-dm-followup](../../includes/iot-hub-dm-followup.md)]\r \r <!-- images and links -->\r [img-output]: ./media/iot-hub-get-started-with-dm/image6.png\r [img-dm-ui]: ./media/iot-hub-get-started-with-dm/dmui.png\r [img-servicenuget]: ./media/iot-hub-csharp-csharp-device-management-get-started/servicesdknuget.png\r [img-createserviceapp]: ./media/iot-hub-csharp-csharp-device-management-get-started/createserviceapp.png\r [img-clientnuget]: ./media/iot-hub-csharp-csharp-device-management-get-started/clientsdknuget.png\r [img-createdeviceapp]: ./media/iot-hub-csharp-csharp-device-management-get-started/createdeviceapp.png\r [img-combinedrun]: ./media/iot-hub-csharp-csharp-device-management-get-started/combinedrun.png\r \r [lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/blob/master/doc/node-devbox-setup.md\r \r [lnk-free-trial]: http://www.azure.cn/pricing/1rmb-trial/\r [Azure portal]: https://portal.azure.cn/\r [Using resource groups to manage your Azure resources]: ../azure-portal/resource-group-portal.md\r [lnk-dm-github]: https://github.com/Azure/azure-iot-device-management\r \r [lnk-devtwin]: iot-hub-devguide-device-twins.md\r [lnk-c2dmethod]: iot-hub-devguide-direct-methods.md\r [lnk-transient-faults]: https://msdn.microsoft.com/library/hh680901(v=pandp.50).aspx\r [lnk-nuget-client-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices.Client/\r [lnk-nuget-service-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\r \r <!--Update_Description: update wording and meta data-->"}