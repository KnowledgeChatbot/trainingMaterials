{"Title":"如何容器化 Azure Service Fabric 微服务（预览版）","Description":"Azure Service Fabric 已添加用于容器化 Service Fabric 微服务的新功能。 此功能目前以预览版提供。","Content":"# <a name=\"how-to-containerize-your-service-fabric-reliable-services-and-reliable-actors-preview\"></a>如何容器化 Service Fabric Reliable Services 和 Reliable Actors（预览版）\r \r Service Fabric 支持容器化 Service Fabric 微服务（基于 Reliable Services 和 Reliable Actor 的服务）。 有关详细信息，请参阅 [Service Fabric 容器](service-fabric-containers-overview.md)。\r \r  此功能处于预览版，本文提供了各种步骤来获取在容器内运行的服务。  \r \r > [!NOTE]\r > 此功能处于预览版，在生产环境中不受支持。 当前此功能仅适用于 Windows。\r \r ## <a name=\"steps-to-containerize-your-service-fabric-application\"></a>容器化 Service Fabric 应用程序的步骤\r \r 1. 在 Visual Studio 中打开 Service Fabric 应用程序。\r \r 2. 将 [SFBinaryLoader.cs](https://github.com/Azure/service-fabric-scripts-and-templates/blob/master/code/SFBinaryLoaderForContainers/SFBinaryLoader.cs) 类添加到项目。 此类中的代码在容器中运行时，是用于在应用程序中正确加载 Service Fabric 运行时二进制文件的帮助程序。\r \r 3. 对于要容器化的每个代码包，在程序入口点初始化加载程序。 将以下代码片段中所示的静态构造函数添加到程序入口点文件中。\r \r   ```csharp\r   namespace MyApplication\r   {\r       internal static class Program\r       {\r           static Program()\r           {\r               SFBinaryLoader.Initialize();\r           }\r \r           /// <summary>\r           /// This is the entry point of the service host process.\r           /// </summary>\r           private static void Main()\r           {\r   ```\r \r 4. 生成并[打包](service-fabric-package-apps.md#Package-App)项目。 若要生成并创建包，请在解决方案资源管理器中右键单击应用程序项目，选择“包”命令。\r \r 5. 对于每个需要容器化的代码包，运行 PowerShell 脚本 [CreateDockerPackage.ps1](https://github.com/Azure/service-fabric-scripts-and-templates/blob/master/scripts/CodePackageToDockerPackage/CreateDockerPackage.ps1)。 用法如下：\r   ```powershell\r     $codePackagePath = 'Path to the code package to containerize.'\r     $dockerPackageOutputDirectoryPath = 'Output path for the generated docker folder.'\r     $applicationExeName = 'Name of the ode package executable.'\r     CreateDockerPackage.ps1 -CodePackageDirectoryPath $codePackagePath -DockerPackageOutputDirectoryPath $dockerPackageOutputDirectoryPath -ApplicationExeName $applicationExeName\r  ```\r   该脚本在 $dockerPackageOutputDirectoryPath 处生成包含 Docker 项目的文件夹。 可以根据需要修改生成的 Dockerfile 来公开任何端口，以及运行设置脚本等。\r \r 6. 接下来需要[生成](service-fabric-get-started-containers.md#Build-Containers) Docker 容器包并将其[推送](service-fabric-get-started-containers.md#Push-Containers)到存储库。\r \r 7. 修改 ApplicationManifest.xml 和 ServiceManifest.xml，以添加容器映像、存储库信息、注册表身份验证和端口到主机映射。 有关修改清单的信息，请参阅[创建 Azure Service Fabric 容器应用程序](service-fabric-get-started-containers.md)。 服务清单中的代码包定义需要替换为相应的容器映像。 请确保将入口点更改为 ContainerHost 类型。\r \r   ```xml\r <!-- Code package is your service executable. -->\r <CodePackage Name=\"Code\" Version=\"1.0.0\">\r   <EntryPoint>\r     <!-- Follow this link for more information about deploying Windows containers to Service Fabric: https://aka.ms/sfguestcontainers -->\r     <ContainerHost>\r       <ImageName>myregistry.azurecr.io/samples/helloworldapp</ImageName>\r     </ContainerHost>\r   </EntryPoint>\r   <!-- Pass environment variables to your container: -->    \r </CodePackage>\r   ```\r \r 8. 为复制器和服务终结点添加端口到主机映射。 由于 Service Fabric 在运行时分配这两个端口，因此 ContainerPort 会设置为零，将分配的端口用于映射。\r \r  ```xml\r <Policies>\r   <ContainerHostPolicies CodePackageRef=\"Code\">\r     <PortBinding ContainerPort=\"0\" EndpointRef=\"ServiceEndpoint\"/>\r     <PortBinding ContainerPort=\"0\" EndpointRef=\"ReplicatorEndpoint\"/>\r   </ContainerHostPolicies>\r </Policies>\r  ```\r \r 9. 若要测试此应用程序，需要将其部署到正在运行版本 5.7 或更高版本的群集。 此外，需要编辑和更新群集设置，启用此预览版功能。 请按照[本文](service-fabric-cluster-fabric-settings.md)中的步骤操作，添加下一步所示的设置。\r ```\r       {\r         \"name\": \"Hosting\",\r         \"parameters\": [\r           {\r             \"name\": \"FabricContainerAppsEnabled\",\r             \"value\": \"true\"\r           }\r         ]\r       }\r ```\r 10. 接下来，将已编辑的应用程序包[部署](service-fabric-deploy-remove-applications.md)到此群集。\r \r 现在，你应当已拥有了运行群集的容器化 Service Fabric 应用程序。\r \r ## <a name=\"next-steps\"></a>后续步骤\r * 详细了解如何运行 [Service Fabric 上的容器](service-fabric-get-started-containers.md)。\r * 了解 Service Fabric [应用程序生命周期](service-fabric-application-lifecycle.md)。\r \r <!--Update_Description: new articles of inside containerss in service fabric -->"}