{"Title":"使用 Azure 媒体视频缩略图创建视频摘要","Description":"视频摘要可通过自动选择来自源视频的有趣片段帮助你创建长视频的摘要。 要提供有关长视频内容的快速概述时，这很有用。","Content":"# <a name=\"use-azure-media-video-thumbnails-to-create-a-video-summarization\"></a>使用 Azure 媒体视频缩略图创建视频摘要\r ## <a name=\"overview\"></a>概述\r 通过 Azure Media Video Thumbnails 媒体处理器 (MP)，可创建视频摘要，这对于要预览长视频摘要的客户来说很有用。 例如，当客户将鼠标悬停在缩略图上时，他们可能希望看到一小段“摘要视频”。 使用配置预设值稍稍调整 **Azure 媒体视频缩略图** 的参数，就可使用 MP 的强大镜头检测和串联技术，以算法形式生成描述性子剪辑。  \r \r **Azure 媒体视频缩略图** MP 目前处于预览状态。\r \r 此主题提供有关 Azure Media Video Thumbnail 的详细信息，并演示如何将它与用于 .NET 的媒体服务 SDK 配合使用。\r \r ## <a name=\"limitations\"></a>限制\r \r 在某些情况下，如果视频不是由不同的场景构成，则输出仅为单张快照。\r \r ## <a name=\"video-summary-example\"></a>视频摘要示例\r 下面是 Azure 媒体视频缩略图媒体处理器可以执行的操作的一些示例：\r \r ### <a name=\"original-video\"></a>原始视频\r [原始视频](http://ampdemo.azureedge.net/azuremediaplayer.html?url=https%3A%2F%2Fnimbuscdn-nimbuspm.streaming.mediaservices.chinacloudapi.cn%2Faed33834-ec2d-4788-88b5-a4505b3d032c%2FMicrosoft%27s%20HoloLens%20Live%20Demonstration.ism%2Fmanifest)\r \r ### <a name=\"video-thumbnail-result\"></a>视频缩略图结果\r [视频缩略图结果](http://ampdemo.azureedge.net/azuremediaplayer.html?url=http%3A%2F%2Fnimbuscdn-nimbuspm.streaming.mediaservices.chinacloudapi.cn%2Ff5c91052-4232-41d4-b531-062e07b6a9ae%2FHololens%2520Demo_VideoThumbnails_MotionThumbnail.mp4)\r \r ## <a name=\"task-configuration-preset\"></a>任务配置（预设）\r 使用 **Azure 媒体视频缩略图**创建视频缩略图时，必须指定配置预设值。 以上缩略图示例使用以下 JSON 基本配置创建：\r \r ```\r {\"version\":\"1.0\"}\r ```\r \r 当前你可更改以下参数：\r \r | Param | 说明 |\r | --- | --- |\r | outputAudio |指定生成的视频是否包含音频。 <br/>允许的值为：True 或 False。 默认值为 True。 |\r | fadeInFadeOut |指定单独动态缩略图之间是否使用淡入淡出转换。  <br/>允许的值为：True 或 False。  默认值为 True。 |\r | maxMotionThumbnailDurationInSecs |指定生成的整个视频的时长的整数。  默认值取决于原始视频的持续时间。 |\r \r 下表描述了当 **maxMotionThumbnailInSecs** 未使用时的默认持续时间。\r \r |  |  |  |\r | --- | --- | --- | --- | --- |\r | 视频持续时间 |d < 3 分钟 |3 分钟 < d < 15 分钟 |\r | 缩略图持续时间 |15 秒（2-3 个场景） |30 秒（3-5 个场景） |\r \r 下面的 JSON 设置可用的参数。\r \r ```\r {\r     \"version\": \"1.0\",\r     \"options\": {\r         \"outputAudio\": \"true\",\r         \"maxMotionThumbnailDurationInSecs\": \"10\",\r         \"fadeInFadeOut\": \"true\"\r     }\r }\r ```\r \r ## <a name=\"net-sample-code\"></a>.NET 示例代码\r \r 以下程序演示如何：\r \r 1. 创建资产并将媒体文件上传到资产。\r 2. 使用基于包含以下 json 预设值的配置文件的视频缩略图任务，创建一个作业。 \r \r     ```\r     {               \r         \"version\": \"1.0\",\r         \"options\": {\r             \"outputAudio\": \"true\",\r             \"maxMotionThumbnailDurationInSecs\": \"30\",\r             \"fadeInFadeOut\": \"false\"\r         }\r     }\r     ```\r \r 3. 下载输出文件。 \r \r #### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r \r 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r \r #### <a name=\"example\"></a>示例\r \r     using System;\r     using System.Configuration;\r     using System.IO;\r     using System.Linq;\r     using Microsoft.WindowsAzure.MediaServices.Client;\r     using System.Threading;\r     using System.Threading.Tasks;\r \r     namespace VideoSummarization\r     {\r         class Program\r         {\r             // Read values from the App.config file.\r             private static readonly string _AADTenantDomain =\r                 ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r             private static readonly string _RESTAPIEndpoint =\r                 ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r             // Field for service context.\r             private static CloudMediaContext _context = null;\r \r             static void Main(string[] args)\r             {\r                 var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r                 var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r                 _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r \r                 // Run the thumbnail job.\r                 var asset = RunVideoThumbnailJob(@\"C:\\supportFiles\\VideoThumbnail\\BigBuckBunny.mp4\",\r                                             @\"C:\\supportFiles\\VideoThumbnail\\config.json\");\r \r                 // Download the job output asset.\r                 DownloadAsset(asset, @\"C:\\supportFiles\\VideoThumbnail\\Output\");\r             }\r \r             static IAsset RunVideoThumbnailJob(string inputMediaFilePath, string configurationFile)\r             {\r                 // Create an asset and upload the input media file to storage.\r                 IAsset asset = CreateAssetAndUploadSingleFile(inputMediaFilePath,\r                     \"My Video Thumbnail Input Asset\",\r                     AssetCreationOptions.None);\r \r                 // Declare a new job.\r                 IJob job = _context.Jobs.Create(\"My Video Thumbnail Job\");\r \r                 // Get a reference to Azure Media Video Thumbnails.\r                 string MediaProcessorName = \"Azure Media Video Thumbnails\";\r \r                 var processor = GetLatestMediaProcessorByName(MediaProcessorName);\r \r                 // Read configuration from the specified file.\r                 string configuration = File.ReadAllText(configurationFile);\r \r                 // Create a task with the encoding details, using a string preset.\r                 ITask task = job.Tasks.AddNew(\"My Video Thumbnail Task\",\r                     processor,\r                     configuration,\r                     TaskOptions.None);\r \r                 // Specify the input asset.\r                 task.InputAssets.Add(asset);\r \r                 // Add an output asset to contain the results of the job.\r                 task.OutputAssets.AddNew(\"My Video Thumbnail Output Asset\", AssetCreationOptions.None);\r \r                 // Use the following event handler to check job progress.  \r                 job.StateChanged += new EventHandler<JobStateChangedEventArgs>(StateChanged);\r \r                 // Launch the job.\r                 job.Submit();\r \r                 // Check job execution and wait for job to finish.\r                 Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\r \r                 progressJobTask.Wait();\r \r                 // If job state is Error, the event handling\r                 // method for job progress should log errors.  Here we check\r                 // for error state and exit if needed.\r                 if (job.State == JobState.Error)\r                 {\r                     ErrorDetail error = job.Tasks.First().ErrorDetails.First();\r                     Console.WriteLine(string.Format(\"Error: {0}. {1}\",\r                                                     error.Code,\r                                                     error.Message));\r                     return null;\r                 }\r \r                 return job.OutputMediaAssets[0];\r             }\r \r             static IAsset CreateAssetAndUploadSingleFile(string filePath, string assetName, AssetCreationOptions options)\r             {\r                 IAsset asset = _context.Assets.Create(assetName, options);\r \r                 var assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath));\r                 assetFile.Upload(filePath);\r \r                 return asset;\r             }\r \r             static void DownloadAsset(IAsset asset, string outputDirectory)\r             {\r                 foreach (IAssetFile file in asset.AssetFiles)\r                 {\r                     file.Download(Path.Combine(outputDirectory, file.Name));\r                 }\r             }\r \r             static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r             {\r                 var processor = _context.MediaProcessors\r                     .Where(p => p.Name == mediaProcessorName)\r                     .ToList()\r                     .OrderBy(p => new Version(p.Version))\r                     .LastOrDefault();\r \r                 if (processor == null)\r                     throw new ArgumentException(string.Format(\"Unknown media processor\",\r                                                                mediaProcessorName));\r \r                 return processor;\r             }\r \r             static private void StateChanged(object sender, JobStateChangedEventArgs e)\r             {\r                 Console.WriteLine(\"Job state changed event:\");\r                 Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r                 Console.WriteLine(\"  Current state: \" + e.CurrentState);\r \r                 switch (e.CurrentState)\r                 {\r                     case JobState.Finished:\r                         Console.WriteLine();\r                         Console.WriteLine(\"Job is finished.\");\r                         Console.WriteLine();\r                         break;\r                     case JobState.Canceling:\r                     case JobState.Queued:\r                     case JobState.Scheduled:\r                     case JobState.Processing:\r                         Console.WriteLine(\"Please wait...\\n\");\r                         break;\r                     case JobState.Canceled:\r                     case JobState.Error:\r                         // Cast sender as a job.\r                         IJob job = (IJob)sender;\r                         // Display or log error details as needed.\r                         // LogJobStop(job.Id);\r                         break;\r                     default:\r                         break;\r                 }\r             }\r \r         }\r     }\r \r ### <a name=\"video-thumbnail-output\"></a>视频缩略图输出\r \r [视频缩略图输出](http://ampdemo.azureedge.net/azuremediaplayer.html?url=http%3A%2F%2Fnimbuscdn-nimbuspm.streaming.mediaservices.chinacloudapi.cn%2Fd06f24dc-bc81-488e-a8d0-348b7dc41b56%2FHololens%2520Demo_VideoThumbnails_MotionThumbnail.mp4)\r \r ## <a name=\"related-links\"></a>相关链接\r [Azure 媒体服务分析概述](media-services-analytics-overview.md)\r \r [Azure Media Analytics demos（Azure 媒体分析演示）](http://azuremedialabs.azurewebsites.net/demos/Analytics.html)\r <!--Update_Description: update code to use AAD token instead of ACS-->"}