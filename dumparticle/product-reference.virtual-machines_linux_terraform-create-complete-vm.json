{"Title":"在 Azure 中使用 Terraform 创建完整的 Linux 虚拟机基础结构","Description":"了解如何在 Azure 中使用 Terraform 创建和管理完整的 Linux 虚拟机环境","Content":"# <a name=\"create-a-complete-linux-virtual-machine-infrastructure-in-azure-with-terraform\"></a>在 Azure 中使用 Terraform 创建完整的 Linux 虚拟机基础结构\r \r 使用 Terraform 可以在 Azure 中定义和创建完整的基础结构部署。 以用户可读格式生成 Terraform 模板，用于以一致且可重现的方式创建和配置 Azure 资源。 本文介绍了如何使用 Terraform 创建完整的 Linux 环境和支持资源。 另外，还可以了解如何[安装和配置 Terraform](terraform-install-configure.md)。\r \r ## <a name=\"create-azure-connection-and-resource-group\"></a>创建 Azure 连接和资源组\r \r 我们来详细地了解 Terraform 模板的每个部分。 还可以看到完整版本的 [Terraform 模板](#complete-terraform-script)，可以复制并粘贴这些模板。\r \r `provider` 部分告知 Terraform 使用 Azure 提供程序。 若要获取 subscription_id、client_id、client_secret 和 *tenant_id* 的值，请参阅[安装和配置 Terraform](terraform-install-configure.md)。 如果为这些值创建环境变量，则不包含此部分。\r \r ```tf\r provider \"azurerm\" {\r     subscription_id = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\r     client_id       = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\r     client_secret   = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\r     tenant_id       = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\r     environment     = \"china\"\r }\r ```\r \r 以下部分在 `chinaeast` 位置创建名为 `myResourceGroup` 的资源组：\r \r ```tf\r resource \"azurerm_resource_group\" \"myterraformgroup\" {\r     name     = \"myResourceGroup\"\r     location = \"China East\"\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r ```\r \r 在其他部分中，可以使用 ${azurerm_resource_group.myterraformgroup.name} 引用该资源组。\r \r ## <a name=\"create-virtual-network\"></a>创建虚拟网络\r 以下部分在 10.0.0.0/16 地址空间中创建名为 myVnet 的虚拟网络：\r \r ```tf\r resource \"azurerm_virtual_network\" \"myterraformnetwork\" {\r     name                = \"myVnet\"\r     address_space       = [\"10.0.0.0/16\"]\r     location            = \"China East\"\r     resource_group_name = \"${azurerm_resource_group.myterraformgroup.name}\"\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r ```\r \r 以下部分在 myVnet 虚拟网络中创建名为 mySubnet 的子网\r \r ```tf\r resource \"azurerm_subnet\" \"myterraformsubnet\" {\r     name                 = \"mySubnet\"\r     resource_group_name  = \"${azurerm_resource_group.myterraformgroup.name}\"\r     virtual_network_name = \"${azurerm_virtual_network.myterraformnetwork.name}\"\r     address_prefix       = \"10.0.2.0/24\"\r }\r ```\r \r ## <a name=\"create-public-ip-address\"></a>创建公共 IP 地址\r 若要通过 Internet 访问资源，请创建公共 IP 地址并将其分配到 VM。 以下部分创建名为 myPublicIP 的公共 IP 地址：\r \r ```tf\r resource \"azurerm_public_ip\" \"myterraformpublicip\" {\r     name                         = \"myPublicIP\"\r     location                     = \"China East\"\r     resource_group_name          = \"${azurerm_resource_group.myterraformgroup.name}\"\r     public_ip_address_allocation = \"dynamic\"\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r ```\r \r ## <a name=\"create-network-security-group\"></a>创建网络安全组\r 网络安全组控制传入和传出 VM 的网络流量。 以下部分创建名为 myNetworkSecurityGroup 的网络安全组并定义允许 TCP 端口 22 上的 SSH 流量的规则：\r \r ```tf\r resource \"azurerm_network_security_group\" \"temyterraformpublicipnsg\" {\r     name                = \"myNetworkSecurityGroup\"\r     location            = \"China East\"\r     resource_group_name = \"${azurerm_resource_group.myterraformgroup.name}\"\r     ;\r     security_rule {\r         name                       = \"SSH\"\r         priority                   = 1001\r         direction                  = \"Inbound\"\r         access                     = \"Allow\"\r         protocol                   = \"Tcp\"\r         source_port_range          = \"*\"\r         destination_port_range     = \"22\"\r         source_address_prefix      = \"*\"\r         destination_address_prefix = \"*\"\r     }\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r ```\r \r ## <a name=\"create-virtual-network-interface-card\"></a>创建虚拟网络接口卡\r 虚拟网络接口卡 (NIC) 将 VM 连接到规定的虚拟网络、公共 IP 地址和网络安全组。 Ansible 操作手册的以下部分创建名为 \"myNIC\"并连接到已创建的虚拟网络资源的虚拟 NIC：\r \r ```tf\r resource \"azurerm_network_interface\" \"myterraformnic\" {\r     name                = \"myNIC\"\r     location            = \"China East\"\r     resource_group_name = \"${azurerm_resource_group.myterraformgroup.name}\"\r \r     ip_configuration {\r         name                          = \"myNicConfiguration\"\r         subnet_id                     = \"${azurerm_subnet.myterraformsubnet.id}\"\r         private_ip_address_allocation = \"dynamic\"\r         public_ip_address_id          = \"${azurerm_public_ip.myterraformpublicip.id}\"\r     }\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r ```\r \r ## <a name=\"create-storage-account-for-diagnostics\"></a>创建存储帐户以进行诊断\r 若要为 VM 存储启动诊断，需要一个存储帐户。 这些启动诊断可帮助你排查问题和监视 VM 状态。 你创建的存储帐户仅用于存储启动诊断数据。 由于每个存储帐户必须具有唯一名称，以下部分会生成一些随机文本：\r \r ```tf\r resource \"random_id\" \"randomId\" {\r     keepers = {\r         # Generate a new ID only when a new resource group is defined\r         resource_group = \"${azurerm_resource_group.myterraformgroup.name}\"\r     }\r \r     byte_length = 8\r }\r ```\r \r 现在可以创建存储帐户了。 以下部分创建一个存储帐户，其名称基于上一步中生成的随机文本：\r \r ```tf\r resource \"azurerm_storage_account\" \"mystorageaccount\" {\r     name                = \"diag${random_id.randomId.hex}\"\r     resource_group_name = \"${azurerm_resource_group.myterraformgroup.name}\"\r     location            = \"China East\"\r     account_replication_type = \"LRS\"\r     account_tier = \"Standard\"\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r ```\r \r ## <a name=\"create-virtual-machine\"></a>创建虚拟机\r \r 最后一步是创建 VM 并使用所有已创建的资源。 以下部分创建名为 myVM 的 VM 并附加名为 myNIC 的虚拟 NIC。 将使用最新的 Ubuntu 16.04 LTS 映像，并且在禁用密码身份验证的情况下创建名为 azureuser 的用户。\r \r  ssh_keys 部分中提供了 SSH 密钥数据。 在 *key_data* 字段中提供有效的公共 SSH 密钥。\r \r ```tf\r resource \"azurerm_virtual_machine\" \"myterraformvm\" {\r     name                  = \"myVM\"\r     location              = \"China East\"\r     resource_group_name   = \"${azurerm_resource_group.myterraformgroup.name}\"\r     network_interface_ids = [\"${azurerm_network_interface.myterraformnic.id}\"]\r     vm_size               = \"Standard_DS1_v2\"\r \r     storage_os_disk {\r         name              = \"myOsDisk\"\r         caching           = \"ReadWrite\"\r         create_option     = \"FromImage\"\r         managed_disk_type = \"Premium_LRS\"\r     }\r \r     storage_image_reference {\r         publisher = \"Canonical\"\r         offer     = \"UbuntuServer\"\r         sku       = \"16.04.0-LTS\"\r         version   = \"latest\"\r     }\r \r     os_profile {\r         computer_name  = \"myvm\"\r         admin_username = \"azureuser\"\r     }\r \r     os_profile_linux_config {\r         disable_password_authentication = true\r         ssh_keys {\r             path     = \"/home/azureuser/.ssh/authorized_keys\"\r             key_data = \"ssh-rsa AAAAB3Nz{snip}hwhqT9h\"\r         }\r     }\r \r     boot_diagnostics {\r         enabled     = \"true\"\r         storage_uri = \"${azurerm_storage_account.mystorageaccount.primary_blob_endpoint}\"\r     }\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r ```\r \r ## <a name=\"complete-terraform-script\"></a>完成 Terraform 脚本\r \r 若要将所有这些部分组合在一起，并在操作中看到 Terraform，请创建名为 terraform_azure.tf 的文件并粘贴以下内容：\r \r ```tf\r variable \"resourcename\" {\r   default = \"myResourceGroup\"\r }\r \r # Configure the Azure Provider\r provider \"azurerm\" {\r     subscription_id = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\r     client_id       = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\r     client_secret   = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\r     tenant_id       = \"xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\r     environment     = \"china\"\r }\r \r # Create a resource group if it doesn't exist\r resource \"azurerm_resource_group\" \"myterraformgroup\" {\r     name     = \"myResourceGroup\"\r     location = \"China East\"\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r \r # Create virtual network\r resource \"azurerm_virtual_network\" \"myterraformnetwork\" {\r     name                = \"myVnet\"\r     address_space       = [\"10.0.0.0/16\"]\r     location            = \"China East\"\r     resource_group_name = \"${azurerm_resource_group.myterraformgroup.name}\"\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r \r # Create subnet\r resource \"azurerm_subnet\" \"myterraformsubnet\" {\r     name                 = \"mySubnet\"\r     resource_group_name  = \"${azurerm_resource_group.myterraformgroup.name}\"\r     virtual_network_name = \"${azurerm_virtual_network.myterraformnetwork.name}\"\r     address_prefix       = \"10.0.1.0/24\"\r }\r \r # Create public IPs\r resource \"azurerm_public_ip\" \"myterraformpublicip\" {\r     name                         = \"myPublicIP\"\r     location                     = \"China East\"\r     resource_group_name          = \"${azurerm_resource_group.myterraformgroup.name}\"\r     public_ip_address_allocation = \"dynamic\"\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r \r # Create Network Security Group and rule\r resource \"azurerm_network_security_group\" \"myterraformnsg\" {\r     name                = \"myNetworkSecurityGroup\"\r     location            = \"China East\"\r     resource_group_name = \"${azurerm_resource_group.myterraformgroup.name}\"\r \r     security_rule {\r         name                       = \"SSH\"\r         priority                   = 1001\r         direction                  = \"Inbound\"\r         access                     = \"Allow\"\r         protocol                   = \"Tcp\"\r         source_port_range          = \"*\"\r         destination_port_range     = \"22\"\r         source_address_prefix      = \"*\"\r         destination_address_prefix = \"*\"\r     }\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r \r # Create network interface\r resource \"azurerm_network_interface\" \"myterraformnic\" {\r     name                      = \"myNIC\"\r     location                  = \"China East\"\r     resource_group_name       = \"${azurerm_resource_group.myterraformgroup.name}\"\r     network_security_group_id = \"${azurerm_network_security_group.myterraformnsg.id}\"\r \r     ip_configuration {\r         name                          = \"myNicConfiguration\"\r         subnet_id                     = \"${azurerm_subnet.myterraformsubnet.id}\"\r         private_ip_address_allocation = \"dynamic\"\r         public_ip_address_id          = \"${azurerm_public_ip.myterraformpublicip.id}\"\r     }\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r \r # Generate random text for a unique storage account name\r resource \"random_id\" \"randomId\" {\r     keepers = {\r         # Generate a new ID only when a new resource group is defined\r         resource_group = \"${azurerm_resource_group.myterraformgroup.name}\"\r     }\r \r     byte_length = 8\r }\r \r # Create storage account for boot diagnostics\r resource \"azurerm_storage_account\" \"mystorageaccount\" {\r     name                = \"diag${random_id.randomId.hex}\"\r     resource_group_name = \"${azurerm_resource_group.myterraformgroup.name}\"\r     location            = \"China East\"\r     account_replication_type = \"LRS\"\r     account_tier = \"Standard\"\r \r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r \r # Create virtual machine\r resource \"azurerm_virtual_machine\" \"myterraformvm\" {\r     name                  = \"myVM\"\r     location              = \"China East\"\r     resource_group_name   = \"${azurerm_resource_group.myterraformgroup.name}\"\r     network_interface_ids = [\"${azurerm_network_interface.myterraformnic.id}\"]\r     vm_size               = \"Standard_DS1_v2\"\r \r     storage_os_disk {\r         name              = \"myOsDisk\"\r         caching           = \"ReadWrite\"\r         create_option     = \"FromImage\"\r         managed_disk_type = \"Premium_LRS\"\r     }\r \r     storage_image_reference {\r         publisher = \"Canonical\"\r         offer     = \"UbuntuServer\"\r         sku       = \"16.04.0-LTS\"\r         version   = \"latest\"\r     }\r \r     os_profile {\r         computer_name  = \"myvm\"\r         admin_username = \"azureuser\"\r     }\r \r     os_profile_linux_config {\r         disable_password_authentication = true\r         ssh_keys {\r             path     = \"/home/azureuser/.ssh/authorized_keys\"\r             key_data = \"ssh-rsa AAAAB3Nz{snip}hwhqT9h\"\r         }\r     }\r \r     boot_diagnostics {\r         enabled = \"true\"\r         storage_uri = \"${azurerm_storage_account.mystorageaccount.primary_blob_endpoint}\"\r     }\r \r     tags {\r         environment = \"Terraform Demo\"\r     }\r }\r ```\r \r ## <a name=\"build-and-deploy-the-infrastructure\"></a>构建并部署基础结构\r 创建 Terraform 模板后，第一步是初始化 Terraform。 此步骤可确保 Terraform 具有你要在 Azure 中生成模板的所有必备组件。\r \r ```bash\r terraform init\r ```\r \r 下一步是让 Terraform 检查并验证模板。 此步骤将请求的资源与 Terraform 保存的状态信息进行比较，然后输出计划的执行。 资源不是在 Azure 中创建的。\r \r ```bash\r terraform plan\r ```\r \r 执行上述命令后，应会出现类似于以下屏幕的内容：\r \r ```bash\r Refreshing Terraform state in-memory prior to plan...\r The refreshed state will be used to calculate this plan, but will not be\r persisted to local or remote state storage.\r \r ...\r \r Note: You didn't specify an \"-out\" parameter to save this plan, so when\r \"apply\" is called, Terraform can't guarantee this is what will execute.\r   + azurerm_resource_group.myterraform\r       <snip>\r   + azurerm_virtual_network.myterraformnetwork\r       <snip>\r   + azurerm_network_interface.myterraformnic\r       <snip>\r   + azurerm_network_security_group.myterraformnsg\r       <snip>\r   + azurerm_public_ip.myterraformpublicip\r       <snip>\r   + azurerm_subnet.myterraformsubnet\r       <snip>\r   + azurerm_virtual_machine.myterraformvm\r       <snip>\r Plan: 7 to add, 0 to change, 0 to destroy.\r ```\r \r 如果所有内容正确无误，并且你已准备好在 Azure 中构建基础结构，请在 Terraform 中应用模板：\r \r ```bash\r terraform apply\r ```\r \r Terraform 完成后，VM 基础结构即已准备完毕。 可使用 [az vm show](https://docs.azure.cn/zh-cn/cli/vm?view=azure-cli-latest#show) 获取 VM 的 公共 IP 地址：\r \r ```azurecli\r az vm show --resource-group myResourceGroup --name myVM -d --query [publicIps] --o tsv\r ```\r \r 然后，可以通过 SSH 连接到 VM：\r \r ```bash\r ssh azureuser@<publicIps>\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 现已使用 Terraform 在 Azure 中创建了基本基础结构。 有关更复杂的方案（包括使用负载均衡器和虚拟机规模集的示例），请参阅众多的[适用于 Azure 的 Terraform 示例](https://github.com/hashicorp/terraform/tree/master/examples)。 有关受支持 Azure 提供程序的最新列表，请参阅 [Terraform 文档](https://www.terraform.io/docs/providers/azurerm/index.html)。\r \r <!--Update_Description: update meta properties， wording update -->"}