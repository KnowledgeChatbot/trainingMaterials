{"Title":"自定义预配置解决方案","Description":"提供有关如何自定义 Azure IoT 套件预配置解决方案的指导。","Content":"# <a name=\"customize-a-preconfigured-solution\"></a>自定义预配置解决方案\r \r Azure IoT 套件提供的预配置解决方案演示了套件中的服务如何协力提供端到端解决方案。 从这个起点开始，有多个地方可以针对特定应用场景扩展和自定义解决方案。 以下各节描述了这些常见的自定义点。\r \r ## <a name=\"find-the-source-code\"></a>查找源代码\r \r 预配置解决方案的源代码可在以下 GitHub 存储库获得：\r \r * 远程监控： [https://www.github.com/Azure/azure-iot-remote-monitoring](https://github.com/Azure/azure-iot-remote-monitoring)\r * 预测性维护： [https://github.com/Azure/azure-iot-predictive-maintenance](https://github.com/Azure/azure-iot-predictive-maintenance)\r \r 提供预配置解决方案源代码的目的，在于演示实现使用 Azure IoT 套件的 IoT 解决方案的端到端功能时所采用的模式和做法。 可以找到有关如何在 GitHub 存储库中生成和部署解决方案的详细信息。\r \r ## <a name=\"change-the-preconfigured-rules\"></a>更改预配置规则\r \r 远程监控解决方案包含三个 [Azure 流分析](/stream-analytics/)作业，这些作业可处理解决方案中的设备信息、遥测数据及规则逻辑。\r \r [远程监控预配置解决方案演练](iot-suite-v1-remote-monitoring-sample-walkthrough.md)深入介绍了这三个流分析作业及其语法。 \r \r 可以直接编辑这些作业以更改逻辑，或添加特定于方案的逻辑。 可以按以下方式查找流分析作业：\r \r 1. 转到 [Azure 门户](https://portal.azure.cn)。\r 2. 导航到名称与 IoT 解决方案相同的资源组。 \r 3. 选择要修改的 Azure 流分析作业。 \r 4. 在命令集中选择“停止”以停止作业。 \r 5. 编辑输入、查询及输出。\r    \r     简单修改的目的在于更改**规则**作业的查询，以便使用“<”而不是“>”。 编辑规则时，解决方案门户仍会显示“>”，但请注意行为如何由于基础作业中的更改而翻转。\r 6. 启动作业\r \r > [!NOTE]\r > 远程监控仪表板依赖特定数据，因此更改作业可能会导致仪表板出现故障。\r >\r >\r \r ## <a name=\"add-your-own-rules\"></a>添加自己的规则\r \r 除了更改预配置的 Azure 流分析作业，也可以使用 Azure 门户添加新作业或添加对现有作业的新查询。\r \r ## <a name=\"customize-devices\"></a>自定义设备\r \r 最常见的扩展活动之一是使用方案特定的设备。 使用设备的方法有数种。 这些方法包括更改模拟设备以符合方案，或使用 IoT 设备 SDK 将物理设备连接到解决方案。\r \r 有关添加设备的分步指南，请参阅 [Iot 套件连接设备](iot-suite-v1-connecting-devices.md)一文和[远程监控 C SDK 示例](https://github.com/Azure/azure-iot-sdk-c/tree/master/serializer/samples/remote_monitoring)。 本示例旨在配合远程监控预配置解决方案使用。\r \r ### <a name=\"create-your-own-simulated-device\"></a>创建自己的模拟设备\r \r [远程监控解决方案源代码](https://github.com/Azure/azure-iot-remote-monitoring)中包含 .NET 模拟器。 此模拟器是解决方案中预配的模拟器，可以对其进行更改以发送不同的元数据、遥测数据和响应不同的命令和方法。\r \r 远程监控预配置解决方案模拟器中的预配置模拟器是发出温度和湿度遥测的冷却设备。 派生 GitHub 存储库后，可以修改 [Simulator.WebJob](https://github.com/Azure/azure-iot-remote-monitoring/tree/master/Simulator/Simulator.WebJob) 项目中的模拟器。\r \r ### <a name=\"available-locations-for-simulated-devices\"></a>模拟设备的可用位置\r \r 可以 [SampleDeviceFactory.cs][lnk-sample-device-factory]中更改这些位置。\r \r ### <a name=\"add-a-desired-property-update-handler-to-the-simulator\"></a>将所需的属性更新处理程序添加到模拟器\r \r 可在解决方案门户中设置设备所需属性的值。 当设备检索所需的属性值时，由设备负责处理属性更改请求。 要通过所需的属性添加属性值更改支持，需要将一个处理程序添加到模拟器。\r \r 模拟器包含 **SetPointTemp** 和 **TelemetryInterval** 属性的处理程序，可以通过在解决方案门户中设置所需值来更新这些属性。\r \r 以下示例演示了 **CoolerDevice** 类中 **SetPointTemp** 所需属性的处理程序：\r \r ```csharp\r protected async Task OnSetPointTempUpdate(object value)\r {\r     var telemetry = _telemetryController as ITelemetryWithSetPointTemperature;\r     telemetry.SetPointTemperature = Convert.ToDouble(value);\r \r     await SetReportedPropertyAsync(SetPointTempPropertyName, telemetry.SetPointTemperature);\r }\r ```\r \r 此方法更新遥测点温度，并通过设置报告的属性向 IoT 中心报告更改。\r \r 可以遵循前一示例中的模式，为自己的属性添加自己的处理程序。\r \r 此外，必须按以下示例中所示，通过 **CoolerDevice** 构造函数将所需的属性绑定到处理程序：\r \r ```csharp\r _desiredPropertyUpdateHandlers.Add(SetPointTempPropertyName, OnSetPointTempUpdate);\r ```\r \r 请注意， **SetPointTempPropertyName** 是定义为“Config.SetPointTemp”的常量。\r \r ### <a name=\"add-support-for-a-new-method-to-the-simulator\"></a>将新方法支持添加到模拟器\r \r 可以自定义模拟器，以添加对新[方法（直接方法）][lnk-direct-methods]的支持。 需要执行两个重要步骤：\r \r - 模拟器必须在预配置解决方案中向 IoT 中心告知方法的详细信息。\r - 模拟器必须包含相应的代码，以便在通过解决方案资源管理器中的“设备详细信息”面板或者通过作业调用该方法时，能够处理方法调用。\r \r 远程监控预配置解决方案使用 *报告的属性* 向 IoT 中心发送受支持方法的详细信息。 解决方案后端维护每个设备支持的所有方法的列表，以及方法调用的历史记录。 可在解决方案门户中查看有关设备的这些信息以及调用方法。\r \r 为了告知 IoT 中心某个设备支持某个方法，设备必须将该方法的详细信息添加到报告的属性中的 **SupportedMethods** 节点：\r \r ```json\r \"SupportedMethods\": {\r   \"<method signature>\": \"<method description>\",\r   \"<method signature>\": \"<method description>\"\r }\r ```\r \r 方法签名采用以下格式： `<method name>--<parameter #0 name>-<parameter #1 type>-...-<parameter #n name>-<parameter #n type>`。 例如，若要指定 **InitiateFirmwareUpdate** 方法，需要名为 **FwPackageURI** 的字符串参数，请使用以下方法签名：\r \r ```json\r InitiateFirmwareUpate--FwPackageURI-string: \"description of method\"\r ```\r \r 有关受支持的参数类型的列表，请参阅 Infrastructure 项目中的 **CommandTypes** 类。\r \r 要删除某个方法，请在报告的属性中将方法签名设置为 `null` 。\r \r > [!NOTE]\r > 从设备接收 *设备信息* 消息时，解决方案后端只会更新有关受支持方法的信息。\r >\r >\r \r 以下代码示例摘自 Common 项目中的 **SampleDeviceFactory** 类，演示如何将方法添加到设备发送的报告属性中的 **SupportedMethods** 列表：\r \r ```csharp\r device.Commands.Add(new Command(\r     \"InitiateFirmwareUpdate\",\r     DeliveryType.Method,\r     \"Updates device Firmware. Use parameter 'FwPackageUri' to specifiy the URI of the firmware file, e.g. https://iotrmassets.blob.core.chinacloudapi.cn/firmwares/FW20.bin\",\r     new[] { new Parameter(\"FwPackageUri\", \"string\") }\r ));\r ```\r \r 此代码片段将添加 **InitiateFirmwareUpdate** 方法的详细信息，包括要在解决方案门户中显示的文本，以及所需方法参数的详细信息。\r \r 模拟器在启动时，将向 IoT 中心发送报告的属性，包括支持的方法列表。\r \r 将模拟器支持的每个方法的处理程序添加到模拟器代码。 可以在 Simulator.WebJob 项目的 **CoolerDevice** 类中查看现有的处理程序。 以下示例演示了 **InitiateFirmwareUpdate** 方法的处理程序：\r \r ```csharp\r public async Task<MethodResponse> OnInitiateFirmwareUpdate(MethodRequest methodRequest, object userContext)\r {\r     if (_deviceManagementTask != null && !_deviceManagementTask.IsCompleted)\r     {\r         return await Task.FromResult(BuildMethodRespose(new\r         {\r             Message = \"Device is busy\"\r         }, 409));\r     }\r \r     try\r     {\r         var operation = new FirmwareUpdate(methodRequest);\r         _deviceManagementTask = operation.Run(Transport).ContinueWith(async task =>\r         {\r             // after firmware completed, we reset telemetry\r             var telemetry = _telemetryController as ITelemetryWithTemperatureMeanValue;\r             if (telemetry != null)\r             {\r                 telemetry.TemperatureMeanValue = 34.5;\r             }\r \r             await UpdateReportedTemperatureMeanValue();\r         });\r \r         return await Task.FromResult(BuildMethodRespose(new\r         {\r             Message = \"FirmwareUpdate accepted\",\r             Uri = operation.Uri\r         }));\r     }\r     catch (Exception ex)\r     {\r         return await Task.FromResult(BuildMethodRespose(new\r         {\r             Message = ex.Message\r         }, 400));\r     }\r }\r ```\r \r 方法处理程序的名称必须以 `On` 开头，后接方法的名称。 **methodRequest** 参数包含通过解决方案后端使用方法调用传递的所有参数。 返回值的类型必须是 **Task&lt;MethodResponse&gt;**。 可以借助 **BuildMethodResponse** 实用工具方法创建返回值。\r \r 在方法处理程序中，可以：\r \r - 启动异步任务。\r - 从 IoT 中心的 *设备孪生* 中检索所需的属性。\r - 使用 **CoolerDevice** 类中的 **SetReportedPropertyAsync** 方法更新单个报告属性。\r - 通过创建 **TwinCollection** 实例并调用 **Transport.UpdateReportedPropertiesAsync** 方法更新多个报告属性。\r \r 上面的固件更新示例将执行以下步骤：\r \r - 检查设备是否能够接受固件更新请求。\r - 以异步方式启动固件更新操作，完成该操作时重置遥测。\r - 立即返回“FirmwareUpdate 已接受”消息，指出设备已接受请求。\r \r ### <a name=\"build-and-use-your-own-physical-device\"></a>构建并使用自己的（物理）设备\r \r [Azure IoT SDK](https://github.com/Azure/azure-iot-sdks) 提供用于将各种设备类型（语言和操作系统）连接到 IoT 解决方案中的库。\r \r ## <a name=\"modify-dashboard-limits\"></a>修改仪表板限制\r \r ### <a name=\"number-of-devices-displayed-in-dashboard-dropdown\"></a>仪表板下拉列表中显示的设备数\r \r 默认值为 200。 可以在 [DashboardController.cs][lnk-dashboard-controller]中更改此数字。\r \r ### <a name=\"number-of-pins-to-display-in-bing-map-control\"></a>必应地图控件中显示的图钉数\r \r 默认值为 200。 可以在 [TelemetryApiController.cs][lnk-telemetry-api-controller-01]中更改此数字。\r \r ### <a name=\"time-period-of-telemetry-graph\"></a>遥测图形的时间段\r \r 默认值为 10 分钟。 可以在 [TelmetryApiController.cs][lnk-telemetry-api-controller-02]中更改此值。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 若要详细了解自定义预配置解决方案的选项，请参阅：\r \r * [配合使用动态遥测和远程监控预配置解决方案][lnk-dynamic]\r * [远程监控预配置解决方案中的设备信息元数据][lnk-devinfo]\r \r [lnk-dynamic]: iot-suite-v1-dynamic-telemetry.md\r [lnk-devinfo]: iot-suite-v1-remote-monitoring-device-info.md\r \r [lnk-permissions]: iot-suite-v1-permissions.md\r [lnk-dashboard-controller]: https://github.com/Azure/azure-iot-remote-monitoring/blob/3fd43b8a9f7e0f2774d73f3569439063705cebe4/DeviceAdministration/Web/Controllers/DashboardController.cs#L27\r [lnk-telemetry-api-controller-01]: https://github.com/Azure/azure-iot-remote-monitoring/blob/3fd43b8a9f7e0f2774d73f3569439063705cebe4/DeviceAdministration/Web/WebApiControllers/TelemetryApiController.cs#L27\r [lnk-telemetry-api-controller-02]: https://github.com/Azure/azure-iot-remote-monitoring/blob/e7003339f73e21d3930f71ceba1e74fb5c0d9ea0/DeviceAdministration/Web/WebApiControllers/TelemetryApiController.cs#L25 \r [lnk-sample-device-factory]: https://github.com/Azure/azure-iot-remote-monitoring/blob/master/Common/Factory/SampleDeviceFactory.cs#L40\r [lnk-direct-methods]: ../iot-hub/iot-hub-devguide-direct-methods.md\r "}