{"Title":"将 Azure Service Fabric 与 API 管理集成","Description":"了解如何快速开始使用 Azure API 管理和 Service Fabric。","Content":"# <a name=\"deploy-api-management-with-service-fabric\"></a>部署 API 管理与 Service Fabric\r 本教程是一个系列中的第三部分。  使用 Service Fabric 部署 Azure API 管理是一个高级方案。  当需要使用一组丰富的路由规则为后端 Service Fabric 服务发布 API 时，API 管理非常有用。 云应用程序通常都需要使用前端网关，为用户、设备或其他应用程序提供同一个入口点。 在 Service Fabric 中，网关可以是专为流量入口（如 APP.NET Core 应用程序、事件中心、IoT 中心或 Azure API 管理）设计的任意无状态服务。 \r \r 本教程演示如何设置 [Azure API 管理](../api-management/api-management-key-concepts.md)与 Service Fabric，以在 Service Fabric 中将流量路由至后端服务。  完成后，便已将 API 管理部署到 VNET，并已将 API 操作配置为将流量发送到后端无状态服务。 若要详细了解使用 Service Fabric 的 Azure API 管理方案，请参阅[概述](service-fabric-api-management-overview.md)一文。\r \r 本教程介绍如何执行下列操作：\r \r > [!div class=\"checklist\"]\r > * 部署 API 管理\r > * 配置 API 管理\r > * 创建 API 操作\r > * 配置后端策略\r > * 将 API 添加到产品\r \r 在此系列教程中，你将学习如何：\r > [!div class=\"checklist\"]\r > * 使用模板在 Azure 上创建安全的 [Windows 群集](service-fabric-tutorial-create-vnet-and-windows-cluster.md)或 [Linux 群集](service-fabric-tutorial-create-vnet-and-linux-cluster.md)\r > * [缩小或扩大群集](/service-fabric-tutorial-scale-cluster.md)\r > * 部署 API 管理与 Service Fabric\r \r ## <a name=\"prerequisites\"></a>先决条件\r 在开始学习本教程之前：\r - 如果还没有 Azure 订阅，请创建一个[试用帐户](https://www.azure.cn/pricing/1rmb-trial/?WT.mc_id=A261C142F)\r - 安装 [Azure PowerShell 模块 4.1 或更高版本](https://docs.microsoft.com/powershell/azure/install-azurerm-ps)或 [Azure CLI 2.0](https://docs.azure.cn/zh-cn/cli/install-azure-cli?view=azure-cli-latest)。\r - 在 Azure 上创建安全的 [Windows 群集](service-fabric-tutorial-create-vnet-and-windows-cluster.md)或 [Linux 群集](service-fabric-tutorial-create-vnet-and-linux-cluster.md)\r - 如果部署 Windows 群集，请设置 Windows 开发环境。 安装 [Visual Studio 2017](http://www.visualstudio.com) 和 **Azure 开发**、**ASP.NET 和 Web 开发**以及 **.NET Core 跨平台开发**工作负荷。  然后设置 [.NET 开发环境](service-fabric-get-started.md)。\r - 如果部署 Linux 群集，请在 [Linux](service-fabric-get-started-linux.md) 或 [MacOS](service-fabric-get-started-mac.md) 上设置一个 Java 开发环境。  安装 [Service Fabric CLI](service-fabric-cli.md)。 \r \r ## <a name=\"network-topology\"></a>网络拓扑\r 既然在 Azure 上拥有安全的 [Windows 群集](service-fabric-tutorial-create-vnet-and-windows-cluster.md)或 [Linux 群集](service-fabric-tutorial-create-vnet-and-linux-cluster.md)，可以在子网和专为 API 管理指定的 NSG 中将 API 管理部署到虚拟网络 (VNET)。 在本教程中，已预配置 API 管理资源管理器模板以使用在前文 [Windows 群集教程](service-fabric-tutorial-create-vnet-and-windows-cluster.md)或 [Linux 群集教程](service-fabric-tutorial-create-vnet-and-linux-cluster.md)中设置的 VNET、子网和 NSG 的名称。 本教程将以下拓扑部署到 Azure，其中 API 管理和 Service Fabric 位于同一虚拟网络的子网中：\r \r  ![图片题注][sf-apim-topology-overview]\r \r ## <a name=\"sign-in-to-azure-and-select-your-subscription\"></a>登录到 Azure，然后选择订阅\r 执行 Azure 命令之前，登录到你的 Azure 帐户并选择你的订阅。\r \r ```powershell\r Login-AzureRmAccount -EnvironmentName AzureChinaCloud\r Get-AzureRmSubscription\r Set-AzureRmContext -SubscriptionId <guid>\r ```\r \r [!INCLUDE [azure-cli-2-azurechinacloud-environment-parameter](../../includes/azure-cli-2-azurechinacloud-environment-parameter.md)]\r \r ```azurecli\r az login\r az account set --subscription <guid>\r ```\r \r ## <a name=\"deploy-a-service-fabric-back-end-service\"></a>部署 Service Fabric 后端服务\r \r 在配置 API 管理以将流量路由到 Service Fabric 后端服务前，首先需要一个运行的服务来接受请求。  如果前面创建了 [Windows 群集](service-fabric-tutorial-create-vnet-and-windows-cluster.md)，请部署 .NET Service Fabric 服务。  如果前面创建了 [Linux 群集](service-fabric-tutorial-create-vnet-and-linux-cluster.md)，请部署 Java Service Fabric 服务。\r \r ### <a name=\"deploy-a-net-service-fabric-service\"></a>部署 .NET Service Fabric 服务\r \r 在本教程中，使用默认的 Web API 项目模板创建一个基本的无状态 ASP.NET Core 可靠服务。 这可为服务创建一个 HTTP 终结点，可通过 Azure API 管理公开此终结点。\r \r 以管理员身份启动 Visual Studio 并创建 ASP.NET Core 服务：\r \r  1. 在 Visual Studio 中，选择“文件”->“新建项目”。\r  2. 选择“云”下的 Service Fabric 应用程序模板并将其命名为“ApiApplication”。\r  3. 选择 ASP.NET Core 服务模板并将项目命名为“WebApiService”。\r  4. 选择 Web API ASP.NET Core 1.1 项目模板。\r  5. 创建项目后，打开 `PackageRoot\\ServiceManifest.xml` 并从终结点资源配置中删除 `Port` 属性：\r \r     ```xml\r     <Resources>\r       <Endpoints>\r         <Endpoint Protocol=\"http\" Name=\"ServiceEndpoint\" Type=\"Input\" />\r       </Endpoints>\r     </Resources>\r     ```\r \r     删除端口允许 Service Fabric 从应用程序端口范围动态指定一个端口，可通过群集资源管理器模板中的网络安全组将其打开，从而允许流量从 API 管理流向该端口。\r \r  6. 可在本地于 Visual Studio 中按下 F5 来验证 Web API。 \r \r     打开 Service Fabric 资源管理器并深入了解 ASP.NET Core 服务的特定实例，以查看服务正在侦听的基址。 将 `/api/values` 添加到基址，然后在浏览器中打开，这在 Web API 模板的 ValuesController 上调用 Get 方法。 它会返回模板提供的默认响应，即包含两个字符串的 JSON 数组：\r \r     ```json\r     [\"value1\", \"value2\"]`\r     ```\r \r     这是你通过 Azure 中的 API 管理公开的终结点。\r \r  7. 最后，将应用程序部署到 Azure 中的群集。 在 Visual Studio 中，右键单击“应用程序”项目，然后选择“发布”。 提供群集终结点（例如，`mycluster.chinaeast.cloudapp.chinacloudapi.cn:19000`），将应用程序部署到 Azure 中的 Service Fabric 群集。\r \r 名为 `fabric:/ApiApplication/WebApiService` 的 ASP.NET Core 无状态服务现在应在 Azure 的 Service Fabric 群集中运行。\r \r ### <a name=\"create-a-java-service-fabric-service\"></a>创建 Java Service Fabric 服务\r 本教程部署一个将消息回显给用户的基本 Web 服务器。 此回显服务器示例应用程序包含用于你的服务的一个 HTTP 终结点，此终结点是通过 Azure API 管理公开的。\r \r 1. 克隆 Java 入门示例。\r \r    ```bash\r    git clone https://github.com/Azure-Samples/service-fabric-java-getting-started.git\r    cd service-fabric-java-getting-started\r    ```\r \r 2. 编辑 *Services/EchoServer/EchoServer1.0/EchoServerApplication/EchoServerPkg/ServiceManifest.xml*。 更新终结点，使服务在端口 8081 上进行侦听。\r \r    ```xml\r    <Endpoint Name=\"WebEndpoint\" Protocol=\"http\" Port=\"8081\" />\r    ```\r \r 3. 保存 *ServiceManifest.xml*，然后构建 EchoServer1.0 应用程序。\r \r    ```bash\r    cd Services/EchoServer/EchoServer1.0/\r    gradle\r    ```\r \r 4. 将应用程序部署到群集。\r \r    ```bash\r    cd Scripts\r    sfctl cluster select --endpoint http://mycluster.chinaeast.cloudapp.chinacloudapi.cn:19080\r    ./install.sh\r    ```\r \r    一个名为 `fabric:/EchoServerApplication/EchoServerService` 的 Java 无状态服务现在应在 Azure 中的 Service Fabric 群集中运行。\r \r 5. 打开浏览器并键入 http://mycluster.chinaeast.cloudapp.chinacloudapi.cn:8081/getMessage，此时会看到“[version 1.0]Hello World!!!” 显示。\r \r ## <a name=\"download-and-understand-the-resource-manager-template\"></a>下载资源管理器模板并了解其相关信息\r 下载并保存以下资源管理器模板和参数文件：\r \r - [apim.json][apim-arm]\r - [apim.parameters.json][apim-parameters-arm]\r \r 以下部分介绍由 apim.json 模板定义的资源。 有关详细信息，请访问每个部分中模板引用文档的链接。 文本稍后部分设置了 apim.parameters.json 参数文件中定义的可配置参数。\r \r <!-- Not Available on From ### <a name=\"microsoftapimanagementservice\"></a>Microsoft.ApiManagement/service -->\r <!-- Not Available on To ### <a name=\"microsoftapimanagementserviceapispolicies\"></a>Microsoft.ApiManagement/service/apis/policies -->\r \r \r 有关完整的 Service Fabric 后端策略属性，请参阅 [API 管理后端文档](/api-management/api-management-transformation-policies#SetBackendService)\r \r ## <a name=\"set-parameters-and-deploy-api-management\"></a>设置参数和部署 API 管理\r 在部署的 apim.parameters.json 中填写以下空参数。 \r \r |参数|值|\r |---|---|\r |apimInstanceName|sf-apim|\r |apimPublisherEmail|myemail@contosos.com|\r |apimSku|开发人员|\r |serviceFabricCertificateName|sfclustertutorialgroup320171031144217|\r |certificatePassword|q6D7nN%6ck@6| \r |serviceFabricCertificateThumbprint|C4C1E541AD512B8065280292A8BA6079C3F26F10 |\r |serviceFabricCertificate|&lt;base-64 编码字符串&gt;|\r |url_path|/api/values|\r |clusterHttpManagementEndpoint|https://mysfcluster.chinaeast.cloudapp.chinacloudapi.cn:19080|\r |inbound_policy|&lt;XML 字符串&gt;|\r \r “certificatePassword”和“serviceFabricCertificateThumbprint”必须与用于设置群集的群集证书匹配。  \r \r “serviceFabricCertificate”是 base-64 编码字符串形式的证书，可以使用以下脚本生成：\r \r ```powershell\r $bytes = [System.IO.File]::ReadAllBytes(\"C:\\mycertificates\\sfclustertutorialgroup220171109113527.pfx\");\r $b64 = [System.Convert]::ToBase64String($bytes);\r [System.Io.File]::WriteAllText(\"C:\\mycertificates\\sfclustertutorialgroup220171109113527.txt\", $b64);\r ```\r \r 在“inbound_policy”中，如果之前已经部署了 .NET 后端服务，则将“service-name”替换为 `fabric:/ApiApplication/WebApiService`，如果部署了 Java 服务，则替换为 `fabric:/EchoServerApplication/EchoServerService`。\r \r ```xml\r <policies>\r   <inbound>\r     <base/>\r     <set-backend-service \r         backend-id=\"servicefabric\"\r         sf-service-instance-name=\"service-name\"\r         sf-resolve-condition=\"@((int)context.Response.StatusCode != 200)\" />\r   </inbound>\r   <backend>\r     <base/>\r   </backend>\r   <outbound>\r     <base/>\r   </outbound>\r </policies>\r ```\r \r 使用以下脚本为 API 管理部署资源管理器模板和参数文件：\r \r ```powershell\r $ResourceGroupName = \"sfclustertutorialgroup\"\r New-AzureRmResourceGroupDeployment -ResourceGroupName $ResourceGroupName -TemplateFile .\\apim.json -TemplateParameterFile .\\apim.parameters.json -Verbose\r ```\r \r ```azurecli\r ResourceGroupName=\"sfclustertutorialgroup\"\r az group deployment create --name ApiMgmtDeployment --resource-group $ResourceGroupName --template-file apim.json --parameters @apim.parameters.json \r ```\r \r ## <a name=\"test-it\"></a>测试\r \r 现在可以尝试直接从 [Azure 门户](https://portal.azure.cn)通过 API 管理将请求发送到 Service Fabric 中的后端服务。\r \r  1. 在 API 管理服务中，选择“API”。\r  2. 在于之前的步骤中创建的“Service Fabric App”API 中，选择“测试”选项卡，然后选择“Values”操作。\r  3. 单击“发送”按钮，将测试请求发送到后端服务。  应该会看到类似于以下内容的 HTTP 响应：\r \r     ```http\r     HTTP/1.1 200 OK\r \r     Transfer-Encoding: chunked\r \r     Content-Type: application/json; charset=utf-8\r \r     Vary: Origin\r \r     Access-Control-Allow-Origin: https://apimanagement.hosting.portal.chinacloudapi.cn\r \r     Access-Control-Allow-Credentials: true\r \r     Access-Control-Expose-Headers: Transfer-Encoding,Date,Server,Vary,Ocp-Apim-Trace-Location\r \r     Ocp-Apim-Trace-Location: https://apimgmtstuvyx3wa3oqhdbwy.blob.core.chinacloudapi.cn/apiinspectorcontainer/RaVVuJBQ9yxtdyH55BAsjQ2-1?sv=2015-07-08&sr=b&sig=Ab6dPyLpTGAU6TdmlEVu32DMfdCXTiKAASUlwSq3jcY%3D&se=2017-09-15T05%3A49%3A53Z&sp=r&traceId=ed9f1f4332e34883a774c34aa899b832\r \r     Date: Thu, 14 Sep 2017 05:49:56 GMT\r \r     [\r     \"value1\",\r     \"value2\"\r     ]\r     ```\r \r ## <a name=\"clean-up-resources\"></a>清理资源\r \r 群集由群集资源本身以及其他 Azure 资源组成。 若要删除群集及其占用的所有资源，最简单的方式是删除资源组。\r \r 登录到 Azure，选择要删除的群集的订阅 ID。  可通过登录到 [Azure 门户](http://portal.azure.cn)查找订阅 ID。 使用 [Remove-AzureRMResourceGroup cmdlet](https://docs.microsoft.com/powershell/module/azurerm.resources/remove-azurermresourcegroup) 删除资源组和所有群集资源。\r \r ```powershell\r $ResourceGroupName = \"sfclustertutorialgroup\"\r Remove-AzureRmResourceGroup -Name $ResourceGroupName -Force\r ```\r \r ```azurecli\r ResourceGroupName=\"sfclustertutorialgroup\"\r az group delete --name $ResourceGroupName\r ```\r \r ## <a name=\"conclusion\"></a>结束语\r 在本教程中，你已学习了如何执行以下操作：\r \r > [!div class=\"checklist\"]\r > * 部署 API 管理\r > * 配置 API 管理\r > * 创建 API 操作\r > * 配置后端策略\r > * 将 API 添加到产品\r \r [azure-powershell]: https://www.azure.cn/documentation/articles/powershell-install-configure/\r \r [apim-arm]:https://github.com/Azure-Samples/service-fabric-api-management/blob/master/apim.json\r [apim-parameters-arm]:https://github.com/Azure-Samples/service-fabric-api-management/blob/master/apim.parameters.json\r \r [network-arm]: https://github.com/Azure-Samples/service-fabric-api-management/blob/master/network.json\r [network-parameters-arm]: https://github.com/Azure-Samples/service-fabric-api-management/blob/master/network.parameters.json\r \r [cluster-arm]: https://github.com/Azure-Samples/service-fabric-api-management/blob/master/cluster.json\r [cluster-parameters-arm]: https://github.com/Azure-Samples/service-fabric-api-management/blob/master/cluster.parameters.json\r \r <!-- pics -->\r [sf-apim-topology-overview]: ./media/service-fabric-tutorial-deploy-api-management/sf-apim-topology-overview.png\r \r <!--Update_Description: update meta properties, wording update, update link -->\r "}