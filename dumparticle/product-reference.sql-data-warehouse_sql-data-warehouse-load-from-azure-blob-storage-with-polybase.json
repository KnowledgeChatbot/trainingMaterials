{"Title":"从 Azure blob 加载到 Azure 数据仓库","Description":"了解如何使用 PolyBase 将数据从 Azure Blob 存储加载到 SQL 数据仓库。将公共数据中的一些表加载到 Contoso 零售数据仓库架构。","Content":"\r # 将数据从 Azure Blob 存储加载到 SQL 数据仓库 (PolyBase)\r \r > [!div class=\"op_single_selector\"]\r <!-- Data Factory not supported on Azure.cn -->\r <!-- - [Data Factory](/documentation/articles/sql-data-warehouse-load-from-azure-blob-storage-with-data-factory/) -->\r - [PolyBase](./sql-data-warehouse-load-from-azure-blob-storage-with-polybase.md)\r \r 使用 PolyBase 和 T-SQL 命令将数据从 Azure Blob 存储加载到 Azure SQL 数据仓库。\r \r 为简单起见，本教程会将两个表从公共 Azure 存储 Blob 加载到 Contoso 零售数据仓库架构。若要加载完整的数据集，请运行 Microsoft SQL Server 示例存储库中的 [Load the full Contoso Retail Data Warehouse][Load the full Contoso Retail Data Warehouse]（加载完整的 Contoso 零售数据仓库）示例。\r \r 在本教程中，将了解：\r \r 1. 配置 PolyBase 以从 Azure Blob 存储加载数据\r 2. 将公共数据加载到数据库\r 3. 完成加载后执行优化。\r \r ## 开始之前\r 若要运行本教程，需要一个已包含 SQL 数据仓库数据库的 Azure 帐户。如果没有此帐户，请参阅 [Create a SQL Data Warehouse][Create a SQL Data Warehouse]（创建 SQL 数据仓库）。\r \r ## 1.配置数据源\r PolyBase 使用 T-SQL 外部对象，定义外部数据的位置和属性。外部对象定义存储在 SQL 数据仓库中。数据本身存储在外部。\r \r ### 1.1.创建凭据\r 如果要加载 Contoso 公共数据，请**跳过此步骤**。不需要以安全方式访问公共数据，因为它已经可供任何人访问。\r \r 如果你使用本教程作为加载自己数据的模板，请**不要跳过此步骤**。若要通过凭据访问数据，请使用以下脚本创建数据库范围的凭据，然后在定义数据源的位置时使用该凭据。\r \r ```\r -- A：创建主密钥。\r -- 仅当主密钥不存在时才是必要的。\r -- 若要在下一步中加密凭据机密，则该步骤是必需的。\r CREATE MASTER KEY;\r \r -- B：创建数据库范围的凭据 \r -- IDENTITY：提供任何字符串，它不用于 Azure 存储的身份验证。\r -- SECRET：提供 Azure 存储帐户密钥。\r \r CREATE DATABASE SCOPED CREDENTIAL AzureStorageCredential\r WITH\r     IDENTITY = 'user',\r     SECRET = '<azure_storage_account_key>'\r ;\r \r -- C：创建外部数据源 \r -- TYPE：HADOOP - PolyBase 使用 Hadoop API 访问 Azure Blob 存储中的数据。\r -- LOCATION：提供 Azure 存储帐户名称和 Blob 容器名称。\r -- CREDENTIAL：提供上一步中创建的凭据。\r \r CREATE EXTERNAL DATA SOURCE AzureStorage\r WITH (\r     TYPE = HADOOP,\r     LOCATION = 'wasbs://<blob_container_name>@<azure_storage_account_name>.blob.core.chinacloudapi.cn',\r     CREDENTIAL = AzureStorageCredential\r );\r ```\r \r 跳到步骤 2。\r \r ### 1.2.创建外部数据源\r 使用 [CREATE EXTERNAL DATA SOURCE][CREATE EXTERNAL DATA SOURCE] 命令存储数据的位置以及数据的类型。\r \r ```sql\r CREATE EXTERNAL DATA SOURCE AzureStorage_west_public\r WITH \r (  \r     TYPE = Hadoop \r ,   LOCATION = 'wasbs://contosoretaildw-tables@contosoretaildw.blob.core.chinacloudapi.cn/'\r ); \r ```\r \r > [!IMPORTANT]\r > 如果选择公开 Azure Blob 存储容器，请记住，由于你是数据所有者，因此在数据离开数据中心时，需要支付数据传出费用。\r > \r > \r \r ## 2.配置数据格式\r \r 数据存储在 Azure Blob 存储中的文本文件内，每个字段以分隔符隔开。运行 [CREATE EXTERNAL FILE FORMAT][CREATE EXTERNAL FILE FORMAT] 命令，指定文本文件中数据的格式。Contoso 数据未压缩，以坚线分隔。\r \r ```sql\r CREATE EXTERNAL FILE FORMAT TextFileFormat \r WITH \r (   FORMAT_TYPE = DELIMITEDTEXT\r ,    FORMAT_OPTIONS    (   FIELD_TERMINATOR = '|'\r                     ,    STRING_DELIMITER = ''\r                     ,    DATE_FORMAT         = 'yyyy-MM-dd HH:mm:ss.fff'\r                     ,    USE_TYPE_DEFAULT = FALSE \r                     )\r );\r ```\r \r ## 3.创建外部表\r 指定数据源和文件格式后，可以开始创建外部表。\r \r ### 3.1.创建数据的架构。\r 若要创建一个位置用于存储数据库中的 Contoso 数据，请创建架构。\r \r ```sql\r CREATE SCHEMA [asb]\r GO\r ```\r \r ### 3.2.创建外部表。\r 运行此脚本以创建 DimProduct 和 FactOnlineSales 外部表。在这里，我们只需定义列名和数据类型，然后以 Azure blob 存储文件的格式将其绑定到这些文件的位置。定义存储在 SQL 数据仓库中，数据仍位于 Azure 存储 Blob 中。\r \r **LOCATION** 参数是 Azure 存储 Blob 中根文件夹下的文件夹。每个表位于不同的文件夹中。\r \r ```sql\r --DimProduct\r CREATE EXTERNAL TABLE [asb].DimProduct (\r     [ProductKey] [int] NOT NULL,\r     [ProductLabel] [nvarchar](255) NULL,\r     [ProductName] [nvarchar](500) NULL,\r     [ProductDescription] [nvarchar](400) NULL,\r     [ProductSubcategoryKey] [int] NULL,\r     [Manufacturer] [nvarchar](50) NULL,\r     [BrandName] [nvarchar](50) NULL,\r     [ClassID] [nvarchar](10) NULL,\r     [ClassName] [nvarchar](20) NULL,\r     [StyleID] [nvarchar](10) NULL,\r     [StyleName] [nvarchar](20) NULL,\r     [ColorID] [nvarchar](10) NULL,\r     [ColorName] [nvarchar](20) NOT NULL,\r     [Size] [nvarchar](50) NULL,\r     [SizeRange] [nvarchar](50) NULL,\r     [SizeUnitMeasureID] [nvarchar](20) NULL,\r     [Weight] [float] NULL,\r     [WeightUnitMeasureID] [nvarchar](20) NULL,\r     [UnitOfMeasureID] [nvarchar](10) NULL,\r     [UnitOfMeasureName] [nvarchar](40) NULL,\r     [StockTypeID] [nvarchar](10) NULL,\r     [StockTypeName] [nvarchar](40) NULL,\r     [UnitCost] [money] NULL,\r     [UnitPrice] [money] NULL,\r     [AvailableForSaleDate] [datetime] NULL,\r     [StopSaleDate] [datetime] NULL,\r     [Status] [nvarchar](7) NULL,\r     [ImageURL] [nvarchar](150) NULL,\r     [ProductURL] [nvarchar](150) NULL,\r     [ETLLoadID] [int] NULL,\r     [LoadDate] [datetime] NULL,\r     [UpdateDate] [datetime] NULL\r )\r WITH\r (\r     LOCATION='/DimProduct/' \r ,   DATA_SOURCE = AzureStorage_west_public\r ,   FILE_FORMAT = TextFileFormat\r ,   REJECT_TYPE = VALUE\r ,   REJECT_VALUE = 0\r )\r ;\r \r --FactOnlineSales\r CREATE EXTERNAL TABLE [asb].FactOnlineSales \r (\r     [OnlineSalesKey] [int]  NOT NULL,\r     [DateKey] [datetime] NOT NULL,\r     [StoreKey] [int] NOT NULL,\r     [ProductKey] [int] NOT NULL,\r     [PromotionKey] [int] NOT NULL,\r     [CurrencyKey] [int] NOT NULL,\r     [CustomerKey] [int] NOT NULL,\r     [SalesOrderNumber] [nvarchar](20) NOT NULL,\r     [SalesOrderLineNumber] [int] NULL,\r     [SalesQuantity] [int] NOT NULL,\r     [SalesAmount] [money] NOT NULL,\r     [ReturnQuantity] [int] NOT NULL,\r     [ReturnAmount] [money] NULL,\r     [DiscountQuantity] [int] NULL,\r     [DiscountAmount] [money] NULL,\r     [TotalCost] [money] NOT NULL,\r     [UnitCost] [money] NULL,\r     [UnitPrice] [money] NULL,\r     [ETLLoadID] [int] NULL,\r     [LoadDate] [datetime] NULL,\r     [UpdateDate] [datetime] NULL\r )\r WITH\r (\r     LOCATION='/FactOnlineSales/' \r ,   DATA_SOURCE = AzureStorage_west_public\r ,   FILE_FORMAT = TextFileFormat\r ,   REJECT_TYPE = VALUE\r ,   REJECT_VALUE = 0\r )\r ;\r ```\r \r ## 4.加载数据\r 可通过其他方式访问外部数据。可以直接从外部表查询数据，将数据加载到新数据库表，或者将外部数据添加到现有数据库表。\r \r ### 4.1.创建新架构\r CTAS 可创建包含数据的新表。首先，请创建 contoso 数据的架构。\r \r ```sql\r CREATE SCHEMA [cso]\r GO\r ```\r \r ### 4.2.将数据加载到新表\r 若要从 Azure Blob 存储加载数据并将其保存到数据库中的某个表内，请使用 [CREATE TABLE AS SELECT (Transact-SQL)][CREATE TABLE AS SELECT (Transact-SQL)] 语句。使用 CTAS 加载可以利用你刚刚创建的强类型化外部表。若要将数据载入新表，请对每个表使用一个 [CTAS][CTAS] 语句。\r \r CTAS 将创建新表，并在该表中填充 select 语句的结果。CTAS 将新表定义为包含与 select 语句结果相同的列和数据类型。如果选择了外部表中的所有列，新表将是外部表中的列和数据类型的副本。\r \r 在此示例中，我们将以哈希分布表的形式创建维度表和事实表。\r \r ```sql\r SELECT GETDATE();\r GO\r \r CREATE TABLE [cso].[DimProduct]            WITH (DISTRIBUTION = HASH([ProductKey]  ) ) AS SELECT * FROM [asb].[DimProduct]             OPTION (LABEL = 'CTAS : Load [cso].[DimProduct]             ');\r CREATE TABLE [cso].[FactOnlineSales]       WITH (DISTRIBUTION = HASH([ProductKey]  ) ) AS SELECT * FROM [asb].[FactOnlineSales]        OPTION (LABEL = 'CTAS : Load [cso].[FactOnlineSales]        ');\r ```\r \r ### 4.3 跟踪加载进度\r 可以使用动态管理视图 (DMV) 跟踪加载操作的进度。\r \r ```sql\r -- To see all requests\r SELECT * FROM sys.dm_pdw_exec_requests;\r \r -- To see a particular request identified by its label\r SELECT * FROM sys.dm_pdw_exec_requests as r\r WHERE r.[label] = 'CTAS : Load [cso].[DimProduct]             '\r       OR r.[label] = 'CTAS : Load [cso].[FactOnlineSales]        '\r ;\r \r -- To track bytes and files\r SELECT\r     r.command,\r     s.request_id,\r     r.status,\r     count(distinct input_name) as nbr_files, \r     sum(s.bytes_processed)/1024/1024 as gb_processed\r FROM\r     sys.dm_pdw_exec_requests r\r     inner join sys.dm_pdw_dms_external_work s\r         on r.request_id = s.request_id\r WHERE \r     r.[label] = 'CTAS : Load [cso].[DimProduct]             '\r     OR r.[label] = 'CTAS : Load [cso].[FactOnlineSales]        '\r GROUP BY\r     r.command,\r     s.request_id,\r     r.status\r ORDER BY\r     nbr_files desc,\r     gb_processed desc;\r ```\r \r ## 5.优化列存储压缩\r 默认情况下，SQL 数据仓库将表存储为聚集列存储索引。加载完成后，某些数据行可能未压缩到列存储中。发生这种情况的原因多种多样。若要了解详细信息，请参阅[管理列存储索引][manage columnstore indexes]。\r \r 若要在加载后优化查询性能和列存储压缩，请重新生成表，以强制列存储索引压缩所有行。\r \r ```sql\r SELECT GETDATE();\r GO\r \r ALTER INDEX ALL ON [cso].[DimProduct]               REBUILD;\r ALTER INDEX ALL ON [cso].[FactOnlineSales]          REBUILD;\r ```\r \r 有关维护列存储索引的详细信息，请参阅[管理列存储索引][manage columnstore indexes]一文。\r \r ## 6.优化统计信息\r 最好是在加载之后马上创建单列统计信息。对于统计信息，可以使用多个选项。例如，如果针对每个列创建单列统计信息，则重新生成所有统计信息可能需要花费很长时间。如果知道某些列不会在查询谓词中使用，可以不创建有关这些列的统计信息。\r \r 如果决定针对每个表的每个列创建单列统计信息，可以使用 [statistics][statistics]（统计信息）一文中的存储过程代码示例 `prc_sqldw_create_stats`。\r \r 以下示例是创建统计信息的不错起点。它会针对维度表中的每个列以及事实表中的每个联接列创建单列统计信息。以后，随时可以将单列或多列统计信息添加到其他事实表列。\r \r ```sql\r CREATE STATISTICS [stat_cso_DimProduct_AvailableForSaleDate] ON [cso].[DimProduct]([AvailableForSaleDate]);\r CREATE STATISTICS [stat_cso_DimProduct_BrandName] ON [cso].[DimProduct]([BrandName]);\r CREATE STATISTICS [stat_cso_DimProduct_ClassID] ON [cso].[DimProduct]([ClassID]);\r CREATE STATISTICS [stat_cso_DimProduct_ClassName] ON [cso].[DimProduct]([ClassName]);\r CREATE STATISTICS [stat_cso_DimProduct_ColorID] ON [cso].[DimProduct]([ColorID]);\r CREATE STATISTICS [stat_cso_DimProduct_ColorName] ON [cso].[DimProduct]([ColorName]);\r CREATE STATISTICS [stat_cso_DimProduct_ETLLoadID] ON [cso].[DimProduct]([ETLLoadID]);\r CREATE STATISTICS [stat_cso_DimProduct_ImageURL] ON [cso].[DimProduct]([ImageURL]);\r CREATE STATISTICS [stat_cso_DimProduct_LoadDate] ON [cso].[DimProduct]([LoadDate]);\r CREATE STATISTICS [stat_cso_DimProduct_Manufacturer] ON [cso].[DimProduct]([Manufacturer]);\r CREATE STATISTICS [stat_cso_DimProduct_ProductDescription] ON [cso].[DimProduct]([ProductDescription]);\r CREATE STATISTICS [stat_cso_DimProduct_ProductKey] ON [cso].[DimProduct]([ProductKey]);\r CREATE STATISTICS [stat_cso_DimProduct_ProductLabel] ON [cso].[DimProduct]([ProductLabel]);\r CREATE STATISTICS [stat_cso_DimProduct_ProductName] ON [cso].[DimProduct]([ProductName]);\r CREATE STATISTICS [stat_cso_DimProduct_ProductSubcategoryKey] ON [cso].[DimProduct]([ProductSubcategoryKey]);\r CREATE STATISTICS [stat_cso_DimProduct_ProductURL] ON [cso].[DimProduct]([ProductURL]);\r CREATE STATISTICS [stat_cso_DimProduct_Size] ON [cso].[DimProduct]([Size]);\r CREATE STATISTICS [stat_cso_DimProduct_SizeRange] ON [cso].[DimProduct]([SizeRange]);\r CREATE STATISTICS [stat_cso_DimProduct_SizeUnitMeasureID] ON [cso].[DimProduct]([SizeUnitMeasureID]);\r CREATE STATISTICS [stat_cso_DimProduct_Status] ON [cso].[DimProduct]([Status]);\r CREATE STATISTICS [stat_cso_DimProduct_StockTypeID] ON [cso].[DimProduct]([StockTypeID]);\r CREATE STATISTICS [stat_cso_DimProduct_StockTypeName] ON [cso].[DimProduct]([StockTypeName]);\r CREATE STATISTICS [stat_cso_DimProduct_StopSaleDate] ON [cso].[DimProduct]([StopSaleDate]);\r CREATE STATISTICS [stat_cso_DimProduct_StyleID] ON [cso].[DimProduct]([StyleID]);\r CREATE STATISTICS [stat_cso_DimProduct_StyleName] ON [cso].[DimProduct]([StyleName]);\r CREATE STATISTICS [stat_cso_DimProduct_UnitCost] ON [cso].[DimProduct]([UnitCost]);\r CREATE STATISTICS [stat_cso_DimProduct_UnitOfMeasureID] ON [cso].[DimProduct]([UnitOfMeasureID]);\r CREATE STATISTICS [stat_cso_DimProduct_UnitOfMeasureName] ON [cso].[DimProduct]([UnitOfMeasureName]);\r CREATE STATISTICS [stat_cso_DimProduct_UnitPrice] ON [cso].[DimProduct]([UnitPrice]);\r CREATE STATISTICS [stat_cso_DimProduct_UpdateDate] ON [cso].[DimProduct]([UpdateDate]);\r CREATE STATISTICS [stat_cso_DimProduct_Weight] ON [cso].[DimProduct]([Weight]);\r CREATE STATISTICS [stat_cso_DimProduct_WeightUnitMeasureID] ON [cso].[DimProduct]([WeightUnitMeasureID]);\r CREATE STATISTICS [stat_cso_FactOnlineSales_CurrencyKey] ON [cso].[FactOnlineSales]([CurrencyKey]);\r CREATE STATISTICS [stat_cso_FactOnlineSales_CustomerKey] ON [cso].[FactOnlineSales]([CustomerKey]);\r CREATE STATISTICS [stat_cso_FactOnlineSales_DateKey] ON [cso].[FactOnlineSales]([DateKey]);\r CREATE STATISTICS [stat_cso_FactOnlineSales_OnlineSalesKey] ON [cso].[FactOnlineSales]([OnlineSalesKey]);\r CREATE STATISTICS [stat_cso_FactOnlineSales_ProductKey] ON [cso].[FactOnlineSales]([ProductKey]);\r CREATE STATISTICS [stat_cso_FactOnlineSales_PromotionKey] ON [cso].[FactOnlineSales]([PromotionKey]);\r CREATE STATISTICS [stat_cso_FactOnlineSales_StoreKey] ON [cso].[FactOnlineSales]([StoreKey]);\r ```\r \r ## 大功告成！\r 已成功地将公共数据加载到 Azure SQL 数据仓库。干得不错！\r \r 现在，可以使用如下所示的查询，开始查询表：\r \r ```sql\r SELECT  SUM(f.[SalesAmount]) AS [sales_by_brand_amount]\r ,       p.[BrandName]\r FROM    [cso].[FactOnlineSales] AS f\r JOIN    [cso].[DimProduct]      AS p ON f.[ProductKey] = p.[ProductKey]\r GROUP BY p.[BrandName]\r ```\r \r ## 后续步骤\r 若要加载整个 Contoso 零售数据仓库数据，可以使用脚本。\r 有关更多开发技巧，请参阅 [SQL Data Warehouse development overview][SQL Data Warehouse development overview]（SQL 数据仓库开发概述）。\r \r <!--Image references-->\r \r <!--Article references-->\r [Create a SQL Data Warehouse]: ./sql-data-warehouse-get-started-provision.md\r [Load data into SQL Data Warehouse]: ./sql-data-warehouse-overview-load.md\r [SQL Data Warehouse development overview]: ./sql-data-warehouse-overview-develop.md\r [manage columnstore indexes]: ./sql-data-warehouse-tables-index.md\r [Statistics]: ./sql-data-warehouse-tables-statistics.md\r [CTAS]: ./sql-data-warehouse-develop-ctas.md\r [label]: ./sql-data-warehouse-develop-label.md\r \r <!--MSDN references-->\r [CREATE EXTERNAL DATA SOURCE]: https://msdn.microsoft.com/zh-cn/library/dn935022.aspx\r [CREATE EXTERNAL FILE FORMAT]: https://msdn.microsoft.com/zh-cn/library/dn935026.aspx\r [CREATE TABLE AS SELECT (Transact-SQL)]: https://msdn.microsoft.com/zh-cn/library/mt204041.aspx\r [sys.dm_pdw_exec_requests]: https://msdn.microsoft.com/zh-cn/library/mt203887.aspx\r [REBUILD]: https://msdn.microsoft.com/zh-cn/library/ms188388.aspx\r \r <!--Other Web references-->\r \r [Microsoft Download Center]: http://www.microsoft.com/download/details.aspx?id=36433\r [Load the full Contoso Retail Data Warehouse]: https://github.com/Microsoft/sql-server-samples/tree/master/samples/databases/contoso-data-warehouse/readme.md\r \r <!---HONumber=Mooncake_0313_2017-->\r <!--Update_Description:update meta properties;wroding update-->"}