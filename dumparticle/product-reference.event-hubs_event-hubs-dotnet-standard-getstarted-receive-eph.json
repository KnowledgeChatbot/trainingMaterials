{"Title":"使用 .NET Standard 从 Azure 事件中心接收事件","Description":"使用 .NET Standard 中的 EventProcessorHost 接收消息入门","Content":"# <a name=\"get-started-receiving-messages-with-the-event-processor-host-in-net-standard\"></a>使用 .NET Standard 中的事件处理程序主机接收消息入门\r \r > [!NOTE]\r > [GitHub](https://github.com/Azure/azure-event-hubs/tree/master/samples/DotNet/Microsoft.Azure.EventHubs/SampleEphReceiver) 上提供了此示例。\r \r 本教程演示如何编写使用 **EventProcessorHost** 从事件中心接收消息的 .NET Core 控制台应用程序。 可以按原样运行 [GitHub](https://github.com/Azure/azure-event-hubs/tree/master/samples/DotNet/Microsoft.Azure.EventHubs/SampleEphReceiver) 解决方案，将字符串替换为事件中心和存储帐户的值。 或者，可以按照本教程中的步骤创建自己的解决方案。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r * [Microsoft Visual Studio 2015 或 2017](http://www.visualstudio.com)。 本教程中的示例使用 Visual Studio 2017，但也支持 Visual Studio 2015。\r * [.NET Core Visual Studio 2015 或 2017 工具](http://www.microsoft.com/net/core)。\r * Azure 订阅。\r * Azure 事件中心命名空间。\r * 一个 Azure 存储帐户。\r \r ## <a name=\"create-an-event-hubs-namespace-and-an-event-hub\"></a>创建事件中心命名空间和事件中心  \r \r 第一步是使用 [Azure 门户](https://portal.azure.cn)创建事件中心类型的命名空间，并获取应用程序与事件中心进行通信所需的管理凭据。 若要创建命名空间和事件中心，请按照[本文](event-hubs-create.md)中的步骤操作，然后继续执行以下步骤。  \r \r ## <a name=\"create-an-azure-storage-account\"></a>创建 Azure 存储帐户  \r \r 1. 登录到 [Azure 门户](https://portal.azure.cn)。  \r 2. 在门户的左侧导航窗格中，依次单击“新建”、“存储”和“存储帐户”。  \r 3. 完成“存储帐户”边栏选项卡中的字段，并单击“创建”。\r \r     ![创建存储帐户][1]\r \r 4. 看到“部署成功”消息后，单击新存储帐户名。 在“概要”边栏选项卡中单击“Blob”。 “Blob 服务”边栏选项卡打开时，单击顶部的“+ 容器”。 为容器指定名称，并关闭“Blob 服务”边栏选项卡。  \r 5. 单击左侧边栏选项卡中的“访问密钥”，复制存储容器、存储帐户的名称和 **key1** 的值。 将这些值保存到记事本或其他临时位置。  \r \r ## <a name=\"create-a-console-application\"></a>创建控制台应用程序\r \r 启动 Visual Studio。 在“文件”菜单中，单击“新建”，并单击“项目”。 创建 .NET Core 控制台应用程序。\r \r ![新建项目][2]\r \r ## <a name=\"add-the-event-hubs-nuget-package\"></a>添加事件中心 NuGet 包\r \r 通过执行以下步骤，将 [`Microsoft.Azure.EventHubs`](https://www.nuget.org/packages/Microsoft.Azure.EventHubs/) 和 [`Microsoft.Azure.EventHubs.Processor`](https://www.nuget.org/packages/Microsoft.Azure.EventHubs.Processor/) .NET 标准库 NuGet 包添加到项目中： \r \r 1. 右键单击新创建的项目，并选择“管理 NuGet 包” 。\r 2. 单击“浏览”选项卡，然后搜索“Microsoft.Azure.EventHubs”，并选择“Microsoft.Azure.EventHubs”包。 单击“安装”以完成安装，并关闭此对话框。\r 3. 重复步骤 1 和步骤 2，安装“Microsoft.Azure.EventHubs.Processor”包。\r \r ## <a name=\"implement-the-ieventprocessor-interface\"></a>实现 IEventProcessor 接口\r \r 1. 在“解决方案资源管理器”中，右键单击该项目，单击“添加”，并单击“类”。 将新类命名为 **SimpleEventProcessor**。\r \r 2. 打开 SimpleEventProcessor.cs 文件，并将以下 `using` 语句添加到文件顶部。\r \r     ```csharp\r     using Microsoft.Azure.EventHubs;\r     using Microsoft.Azure.EventHubs.Processor;\r     using System.Threading.Tasks;\r     ```\r \r 3. 实现 `IEventProcessor` 接口。 将 `SimpleEventProcessor` 类的全部内容替换为以下代码：\r \r     ```csharp\r     public class SimpleEventProcessor : IEventProcessor\r     {\r         public Task CloseAsync(PartitionContext context, CloseReason reason)\r         {\r             Console.WriteLine($\"Processor Shutting Down. Partition '{context.PartitionId}', Reason: '{reason}'.\");\r             return Task.CompletedTask;\r         }\r \r         public Task OpenAsync(PartitionContext context)\r         {\r             Console.WriteLine($\"SimpleEventProcessor initialized. Partition: '{context.PartitionId}'\");\r             return Task.CompletedTask;\r         }\r \r         public Task ProcessErrorAsync(PartitionContext context, Exception error)\r         {\r             Console.WriteLine($\"Error on Partition: {context.PartitionId}, Error: {error.Message}\");\r             return Task.CompletedTask;\r         }\r \r         public Task ProcessEventsAsync(PartitionContext context, IEnumerable<EventData> messages)\r         {\r             foreach (var eventData in messages)\r             {\r                 var data = Encoding.UTF8.GetString(eventData.Body.Array, eventData.Body.Offset, eventData.Body.Count);\r                 Console.WriteLine($\"Message received. Partition: '{context.PartitionId}', Data: '{data}'\");\r             }\r \r             return context.CheckpointAsync();\r         }\r     }\r     ```\r \r ## <a name=\"write-a-main-console-method-that-uses-the-simpleeventprocessor-class-to-receive-messages\"></a>编写使用 SimpleEventProcessor 类接收消息的主控制台方法\r \r 1. 在 Program.cs 文件顶部添加以下 `using` 语句。\r \r     ```csharp\r     using Microsoft.Azure.EventHubs;\r     using Microsoft.Azure.EventHubs.Processor;\r     using System.Threading.Tasks;\r     ```\r \r 2. 向 `Program` 类添加常量作为事件中心连接字符串、事件中心名称、存储帐户容器名称、存储帐户名称和存储帐户密钥。 添加以下代码，并将占位符替换为其对应的值。\r \r     ```csharp\r     private const string EhConnectionString = \"{Event Hubs connection string}\";\r     private const string EhEntityPath = \"{Event Hub path/name}\";\r     private const string StorageContainerName = \"{Storage account container name}\";\r     private const string StorageAccountName = \"{Storage account name}\";\r     private const string StorageAccountKey = \"{Storage account key}\";\r \r     private static readonly string StorageConnectionString = string.Format(\"DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}\", StorageAccountName, StorageAccountKey);\r     ```\r \r 3. 将名为 `MainAsync` 的新方法添加到 `Program` 类，如下所示：\r \r     ```csharp\r     private static async Task MainAsync(string[] args)\r     {\r         Console.WriteLine(\"Registering EventProcessor...\");\r \r         var eventProcessorHost = new EventProcessorHost(\r             EhEntityPath,\r             PartitionReceiver.DefaultConsumerGroupName,\r             EhConnectionString,\r             StorageConnectionString,\r             StorageContainerName);\r \r         // Registers the Event Processor Host and starts receiving messages\r         await eventProcessorHost.RegisterEventProcessorAsync<SimpleEventProcessor>();\r \r         Console.WriteLine(\"Receiving. Press ENTER to stop worker.\");\r         Console.ReadLine();\r \r         // Disposes of the Event Processor Host\r         await eventProcessorHost.UnregisterEventProcessorAsync();\r     }\r     ```\r \r 3. 在 `Main` 方法中添加以下代码行：\r \r     ```csharp\r     MainAsync(args).GetAwaiter().GetResult();\r     ```\r \r     Program.cs 文件的内容如下所示：\r \r     ```csharp\r     namespace SampleEphReceiver\r     {\r \r         public class Program\r         {\r             private const string EhConnectionString = \"{Event Hubs connection string}\";\r             private const string EhEntityPath = \"{Event Hub path/name}\";\r             private const string StorageContainerName = \"{Storage account container name}\";\r             private const string StorageAccountName = \"{Storage account name}\";\r             private const string StorageAccountKey = \"{Storage account key}\";\r \r             private static readonly string StorageConnectionString = string.Format(\"DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}\", StorageAccountName, StorageAccountKey);\r \r             public static void Main(string[] args)\r             {\r                 MainAsync(args).GetAwaiter().GetResult();\r             }\r \r             private static async Task MainAsync(string[] args)\r             {\r                 Console.WriteLine(\"Registering EventProcessor...\");\r \r                 var eventProcessorHost = new EventProcessorHost(\r                     EhEntityPath,\r                     PartitionReceiver.DefaultConsumerGroupName,\r                     EhConnectionString,\r                     StorageConnectionString,\r                     StorageContainerName);\r \r                 // Registers the Event Processor Host and starts receiving messages\r                 await eventProcessorHost.RegisterEventProcessorAsync<SimpleEventProcessor>();\r \r                 Console.WriteLine(\"Receiving. Press ENTER to stop worker.\");\r                 Console.ReadLine();\r \r                 // Disposes of the Event Processor Host\r                 await eventProcessorHost.UnregisterEventProcessorAsync();\r             }\r         }\r     }\r     ```\r \r 4. 运行程序，并确保没有任何错误。\r \r 祝贺你！ 现在已使用事件处理器主机从事件中心接收消息。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 访问以下链接可以了解有关事件中心的详细信息：\r \r * [事件中心概述](event-hubs-what-is-event-hubs.md)\r * [创建事件中心](event-hubs-create.md)\r * [事件中心常见问题](event-hubs-faq.md)\r \r [1]: ./media/event-hubs-dotnet-standard-getstarted-receive-eph/event-hubs-python1.png\r [2]: ./media/event-hubs-dotnet-standard-getstarted-receive-eph/netcore.png\r \r <!--Update_Description: update meta properties, wording update-->"}