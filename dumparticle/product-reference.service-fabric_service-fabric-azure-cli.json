{"Title":"Azure Service Fabric XPlat CLI 入门","Description":"Azure Service Fabric XPlat CLI 入门","Content":"# <a name=\"using-the-xplat-cli-to-interact-with-a-service-fabric-cluster\"></a>使用 XPlat CLI 与 Service Fabric 群集交互\r \r 可以在 Linux 计算机上使用 Linux 上的 XPlat CLI 与 Service Fabric 群集进行交互。\r \r 第一步是通过 git rep 获取最新版本的 CLI，并使用以下命令在路径中设置该版本：\r \r ```sh\r  git clone https://github.com/Azure/azure-xplat-cli.git\r  cd azure-xplat-cli\r  npm install\r  sudo ln -s \\$(pwd)/bin/azure /usr/bin/azure\r  azure servicefabric\r ```\r \r 对于 CLI 支持的每个命令，可以键入该命令的名称获取相关的帮助。\r 这些命令支持自动补全。 例如，使用以下命令可以获取所有应用程序命令的帮助。 \r \r ```sh\r  azure servicefabric application \r ```\r \r 可以进一步筛选特定命令的帮助，如以下示例所示：\r \r ```sh\r  azure servicefabric application  create\r ```\r \r 若要在 CLI 中启用自动补全，请运行以下命令：\r \r ```sh\r azure --completion >> ~/azure.completion.sh\r echo 'source ~/azure.completion.sh' >> ~/.sh\\_profile\r source ~/azure.completion.sh\r ```\r \r 以下命令连接到群集，并显示群集中的节点：\r \r ```sh\r  azure servicefabric cluster connect http://localhost:19080\r  azure servicefabric node show\r ```\r \r 若要使用命名参数并了解其用途，可以在命令后面键入 --help。 例如：\r \r ```sh\r  azure servicefabric node show --help\r  azure servicefabric application create --help\r ```\r \r 从 **不属于群集**的计算机连接到多计算机群集时，可以使用以下命令：\r \r ```sh\r  azure servicefabric cluster connect http://PublicIPorFQDN:19080\r ```\r \r 根据需要，将 PublicIPorFQDN 标记替换为实际 IP 或 FQDN。 从 **属于群集**的计算机连接到多计算机群集时，可以使用以下命令：\r \r ```sh\r  azure servicefabric cluster connect --connection-endpoint http://localhost:19080 --client-connection-endpoint PublicIPorFQDN:19000\r ```\r \r 可以使用 PowerShell 或 CLI 来与通过 Azure 门户创建的 Linux Service Fabric 群集交互。\r \r > [!WARNING]\r > 这些群集不安全，因此，可以通过在群集清单中添加公共 IP 地址打开单机。\r \r ## <a name=\"using-the-xplat-cli-to-connect-to-a-service-fabric-cluster\"></a>使用 XPlat CLI 连接到 Service Fabric 群集\r \r 以下 Azure CLI 命令说明如何连接到安全群集。 证书详细信息必须与群集节点上的证书匹配。\r \r ```sh\r azure servicefabric cluster connect --connection-endpoint http://ip:19080 --client-key-path /tmp/key --client-cert-path /tmp/cert\r ```\r \r 如果证书具有证书颁发机构 (CA)，需要按以下示例所示添加 --ca-cert-path 参数： \r \r ```sh\r  azure servicefabric cluster connect --connection-endpoint http://ip:19080 --client-key-path /tmp/key --client-cert-path /tmp/cert --ca-cert-path /tmp/ca1,/tmp/ca2 \r ```\r \r 如果有多个 CA，请使用逗号作为分隔符。\r \r 如果证书中的公用名与连接终结点不匹配，则可以使用参数 `--strict-ssl-false` 跳过验证，如下面的命令中所示：\r \r ```sh\r azure servicefabric cluster connect --connection-endpoint http://ip:19080 --client-key-path /tmp/key --client-cert-path /tmp/cert --strict-ssl-false \r ```\r \r 如果想要跳过 CA 验证，可以添加 -reject-unauthorized-false 参数，如下面的命令中所示： \r \r ```sh\r azure servicefabric cluster connect --connection-endpoint http://ip:19080 --client-key-path /tmp/key --client-cert-path /tmp/cert --reject-unauthorized-false \r ```\r \r 在连接后，应能够运行其他 CLI 命令以与群集进行交互。\r \r ## <a name=\"deploying-your-service-fabric-application\"></a>部署 Service Fabric 应用程序\r \r 执行以下命令可以复制、注册和启动 Service Fabric 应用程序：\r \r ```sh\r azure servicefabric application package copy [applicationPackagePath] [imageStoreConnectionString] [applicationPathInImageStore]\r azure servicefabric application type register [applicationPathinImageStore]\r azure servicefabric application create [applicationName] [applicationTypeName] [applicationTypeVersion]\r ```\r \r ## <a name=\"upgrading-your-application\"></a>升级应用程序\r \r 该进程类似于 [Windows 中的进程](service-fabric-application-upgrade-tutorial-powershell.md)。\r \r 从项目根目录生成、复制、注册并创建应用程序。 如果应用程序实例名为“`fabric:/MySFApp`”，且类型为 MySFApp，则命令如下所示：\r \r ```sh\r  azure servicefabric cluster connect http://localhost:19080\r  azure servicefabric application package copy MySFApp fabric:ImageStore\r  azure servicefabric application type register MySFApp\r  azure servicefabric application create fabric:/MySFApp MySFApp 1.0\r ```\r \r 对应用程序进行更改，并重新构建已修改的服务。  使用更新的服务版本（在适当情况下，还包括代码、配置或数据）更新已修改的服务的清单文件 (ServiceManifest.xml)。 同时，请使用更新的应用程序版本号和已修改的服务修改应用程序的清单 (ApplicationManifest.xml)。  现在，使用以下命令复制并注册已更新的应用程序：\r \r ```sh\r  azure servicefabric cluster connect http://localhost:19080>\r  azure servicefabric application package copy MySFApp fabric:ImageStore\r  azure servicefabric application type register MySFApp\r ```\r \r 接下来，可以使用以下命令启动应用程序升级：\r \r ```sh\r  azure servicefabric application upgrade start --application-name fabric:/MySFApp --target-application-type-version 2.0 --rolling-upgrade-mode UnmonitoredAuto\r ```\r \r 现在，可以使用 SFX 监视应用程序升级。 应用程序在几分钟内即可完成更新。 还可以尝试出现错误的更新应用程序，检查 Service Fabric 中的自动回滚功能。\r \r ## <a name=\"converting-from-pfx-to-pem-and-vice-versa\"></a>从 PFX 转换到 PEM，反之亦然\r \r 可能需要在本地计算机（搭载 Windows 或 Linux）中安装证书以访问不同环境中的安全群集。 例如，从 Windows 计算机访问受保护的 Linux 群集时，需要将证书从 PFX 转换到 PEM；反之，需要从 PEM 转换到 PFX。 \r \r 要将 PEM 文件转换为 PFX 文件，请使用以下命令：\r \r ```bash\r openssl pkcs12 -export -out certificate.pfx -inkey mycert.pem -in mycert.pem -certfile mycert.pem\r ```\r \r 要将 PFX 文件转换为 PEM 文件，请使用以下命令：\r \r ```bash\r openssl pkcs12 -in certificate.pfx -out mycert.pem -nodes\r ```\r \r 有关详细信息，请参阅 [OpenSSL 文档](https://www.openssl.org/docs/man1.0.1/apps/pkcs12.html)。\r \r <a name=\"troubleshooting\"></a>\r ## <a name=\"troubleshooting\"></a>故障排除\r \r ### <a name=\"copying-of-the-application-package-does-not-succeed\"></a>未成功复制应用程序包\r \r 检查是否已安装 `openssh` 。 默认情况下，Ubuntu Desktop 未安装此软件。 使用以下命令安装它：\r \r ```sh\r sudo apt-get install openssh-server openssh-client**\r ```\r \r 如果问题仍然存在，请尝试通过使用以下命令更改 `sshd_config` 文件来对 ssh 禁用 PAM：\r \r ```sh\r sudo vi /etc/ssh/sshd_config\r #Change the line with UsePAM to the following: UsePAM no\r sudo service sshd reload\r ```\r \r 如果问题仍然存在，请尝试通过执行以下命令增加 ssh 会话数：\r \r ```sh\r sudo vi /etc/ssh/sshd\\_config\r # Add the following to lines:\r # MaxSessions 500\r # MaxStartups 300:30:500\r sudo service sshd reload\r ```\r \r 目前不支持使用密钥（而不是密码）进行 ssh 身份验证（因为平台使用 ssh 来复制包），请改用密码身份验证。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r [设置开发环境，并将 Service Fabric 应用程序部署到 Linux 群集](service-fabric-get-started-linux.md)。\r \r ## <a name=\"related-articles\"></a>相关文章\r \r * [Service Fabric 和 Azure CLI 2.0 入门](service-fabric-azure-cli-2-0.md)\r \r <!--Update_Description: wording update-->"}