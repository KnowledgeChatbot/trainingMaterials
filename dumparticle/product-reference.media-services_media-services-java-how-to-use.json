{"Title":"开始使用 Java 传送点播内容","Description":"本教程引导用户完成相关步骤，利用 Java 和 Azure 媒体服务 (AMS) 应用程序实现基本的点播视频 (VoD) 内容传送服务。","Content":"# <a name=\"get-started-with-the-java-client-sdk-for-azure-media-services\"></a>用于 Azure 媒体服务的 Java 客户端 SDK 入门\r [!INCLUDE [media-services-selector-get-started](../../includes/media-services-selector-get-started.md)]\r \r 本教程介绍了通过 Java 客户端 SDK 在 Azure 媒体服务中实施基本的视频内容传送服务的步骤。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 以下是完成本教程所要做好的准备：\r \r * 一个 Azure 帐户。 有关详细信息，请参阅 [Azure 试用](https://www.azure.cn/pricing/1rmb-trial/)。 \r * 一个媒体服务帐户。 若要创建媒体服务帐户，请参阅[如何创建媒体服务帐户](media-services-portal-create-account.md)。\r * 当前的 [Azure 媒体服务 Java SDK](https://mvnrepository.com/artifact/com.microsoft.azure/azure-media/latest)\r \r ## <a name=\"how-to-import-the-azure-media-services-java-client-sdk-package\"></a>如何：导入 Azure 媒体服务 Java 客户端 SDK 包\r \r 若要开始使用用于 Java 的媒体服务 SDK，请添加 [Azure 媒体服务 Java SDK](https://mvnrepository.com/artifact/com.microsoft.azure/azure-media/latest) 提供的 `azure-media` 包的当前版本 (0.9.8) 的引用。\r \r 例如，如果生成工具为 `gradle`，请向 `build.gradle` 文件添加以下依赖项：\r \r     compile group: 'com.microsoft.azure', name: 'azure-media', version: '0.9.8'\r \r >[!IMPORTANT]\r >自 `azure-media` 包的版本 `0.9.8` 开始，SDK 添加了对 Auzre Active Directory (AAD) 身份验证的支持，删除了对 Azure 访问控制服务 (ACS) 身份验证的支持。 ACS 服务将在 2018 年 6 月 1 日弃用。 建议尽快迁移到 Azure AD 身份验证模型。 有关迁移的详细信息，请阅读[通过 Azure AD 身份验证访问 Azure 媒体服务 API](media-services-use-aad-auth-to-access-ams-api.md) 一文。\r \r >[!NOTE]\r >可以在 [GitHub 存储库](https://github.com/Azure/azure-sdk-for-java/tree/0.9/services/azure-media)中找到 Azure 媒体服务的源代码。 请确保切换到 0.9 分支而非主分支。 \r \r ## <a name=\"how-to-use-azure-media-services-with-java\"></a>如何：将 Azure 媒体服务与 Java 配合使用\r \r >[!NOTE]\r >创建媒体服务帐户后，会将一个处于“已停止”状态的**默认**流式处理终结点添加到帐户。  若要开始对内容进行流式处理并利用动态打包和动态加密功能，必须确保要从其流式获取内容的流式处理终结点处于“正在运行”状态。\r \r 以下代码演示了如何创建资产、如何将媒体文件上传到该资产、如何使用任务运行作业以转换资产，以及如何创建定位符来流式传输视频。\r \r 在使用此代码之前，设置一个媒体服务帐户。 有关设置帐户的信息，请参阅[如何创建媒体服务帐户](media-services-portal-create-account.md)。\r \r 此代码使用 Azure AD 服务主体身份验证连接到 Azure 媒体服务 API。 创建一个 Azure AD 应用程序，在代码中为以下变量指定值：\r * `tenant`：Azure AD 应用程序所在的 Azure AD 租户域\r * `clientId`：Azure AD 应用程序的客户端 ID\r * `clientKey`：Azure AD 应用程序的客户端密钥\r * `restApiEndpoint`：Azure 媒体服务帐户的 REST API 终结点\r \r 可以创建一个 Azure AD 应用程序，然后从 Azure 门户获取前面的配置值。 有关详细信息，请参阅[使用 Azure 门户进行 Azure AD 身份验证入门](https://docs.microsoft.com/azure/media-services/media-services-portal-get-started-with-aad)的“服务主体身份验证”部分。\r \r 该代码还依赖于本地存储的视频文件。 必须编辑代码，提供自己的要上传的本地文件。\r \r     import java.io.*;\r     import java.net.URI;\r     import java.security.NoSuchAlgorithmException;\r     import java.util.EnumSet;\r     import java.util.concurrent.ExecutorService;\r     import java.util.concurrent.Executors;\r \r     import com.microsoft.windowsazure.Configuration;\r     import com.microsoft.windowsazure.exception.ServiceException;\r     import com.microsoft.windowsazure.services.media.MediaConfiguration;\r     import com.microsoft.windowsazure.services.media.MediaContract;\r     import com.microsoft.windowsazure.services.media.MediaService;\r     import com.microsoft.windowsazure.services.media.WritableBlobContainerContract;\r     import com.microsoft.windowsazure.services.media.authentication.AzureAdClientSymmetricKey;\r     import com.microsoft.windowsazure.services.media.authentication.AzureAdTokenCredentials;\r     import com.microsoft.windowsazure.services.media.authentication.AzureAdTokenProvider;\r     import com.microsoft.windowsazure.services.media.authentication.AzureEnvironments;\r     import com.microsoft.windowsazure.services.media.models.AccessPolicy;\r     import com.microsoft.windowsazure.services.media.models.AccessPolicyInfo;\r     import com.microsoft.windowsazure.services.media.models.AccessPolicyPermission;\r     import com.microsoft.windowsazure.services.media.models.Asset;\r     import com.microsoft.windowsazure.services.media.models.AssetFile;\r     import com.microsoft.windowsazure.services.media.models.AssetFileInfo;\r     import com.microsoft.windowsazure.services.media.models.AssetInfo;\r     import com.microsoft.windowsazure.services.media.models.Job;\r     import com.microsoft.windowsazure.services.media.models.JobInfo;\r     import com.microsoft.windowsazure.services.media.models.JobState;\r     import com.microsoft.windowsazure.services.media.models.ListResult;\r     import com.microsoft.windowsazure.services.media.models.Locator;\r     import com.microsoft.windowsazure.services.media.models.LocatorInfo;\r     import com.microsoft.windowsazure.services.media.models.LocatorType;\r     import com.microsoft.windowsazure.services.media.models.MediaProcessor;\r     import com.microsoft.windowsazure.services.media.models.MediaProcessorInfo;\r     import com.microsoft.windowsazure.services.media.models.Task;\r \r     public class Program\r     {\r         // Media Services account credentials configuration\r         private static String tenant = \"tenant.partner.onmschina.cn\";\r         private static String clientId = \"<client id>\";\r         private static String clientKey = \"<client key>\";\r         private static String restApiEndpoint = \"https://account_name.restv2.region_name.media.chinacloudapi.cn/api/\";\r \r         // Media Services API\r         private static MediaContract mediaService;\r \r         // Encoder configuration\r         // This is using the default Adaptive Streaming encoding preset. \r         // You can choose to use a custom preset, or any other sample defined preset. \r         // In addition you can use other processors, like Speech Analyzer, or Redactor if desired.\r         private static String preferedEncoder = \"Media Encoder Standard\";\r         private static String encodingPreset = \"Adaptive Streaming\";\r \r         public static void main(String[] args)\r         {\r             ExecutorService executorService = Executors.newFixedThreadPool(1);\r \r             try {\r                 // Setup Azure AD Service Principal Symmetric Key Credentials\r                 AzureAdTokenCredentials credentials = new AzureAdTokenCredentials(\r                         tenant,\r                         new AzureAdClientSymmetricKey(clientId, clientKey),\r                         AzureEnvironments.AzureChinaCloudEnvironment);\r \r                 AzureAdTokenProvider provider = new AzureAdTokenProvider(credentials, executorService);\r \r                 // Create a new configuration with the credentials\r                 Configuration configuration = MediaConfiguration.configureWithAzureAdTokenProvider(\r                         new URI(restApiEndpoint),\r                         provider);\r \r                 // Create the media service provisioned with the new configuration\r                 mediaService = MediaService.create(configuration);\r \r                 // Upload a local file to an Asset\r                 AssetInfo uploadAsset = uploadFileAndCreateAsset(\"Video Name\", \"C:/path/to/video.mp4\");\r                 System.out.println(\"Uploaded Asset Id: \" + uploadAsset.getId());\r \r                 // Transform the Asset\r                 AssetInfo encodedAsset = encode(uploadAsset);\r                 System.out.println(\"Encoded Asset Id: \" + encodedAsset.getId());\r \r                 // Create the Streaming Origin Locator\r                 String url = getStreamingOriginLocator(encodedAsset);\r \r                 System.out.println(\"Origin Locator URL: \" + url);\r                 System.out.println(\"Sample completed!\");\r \r             } catch (ServiceException se) {\r                 System.out.println(\"ServiceException encountered.\");\r                 System.out.println(se.toString());\r             } catch (Exception e) {\r                 System.out.println(\"Exception encountered.\");\r                 System.out.println(e.toString());\r             } finally {\r                 executorService.shutdown();\r             }\r         }\r \r         private static AssetInfo uploadFileAndCreateAsset(String assetName, String fileName)\r             throws ServiceException, FileNotFoundException, NoSuchAlgorithmException {\r \r             WritableBlobContainerContract uploader;\r             AssetInfo resultAsset;\r             AccessPolicyInfo uploadAccessPolicy;\r             LocatorInfo uploadLocator = null;\r \r             // Create an Asset\r             resultAsset = mediaService.create(Asset.create().setName(assetName).setAlternateId(\"altId\"));\r             System.out.println(\"Created Asset \" + fileName);\r \r             // Create an AccessPolicy that provides Write access for 15 minutes\r             uploadAccessPolicy = mediaService\r                 .create(AccessPolicy.create(\"uploadAccessPolicy\", 15.0, EnumSet.of(AccessPolicyPermission.WRITE)));\r \r             // Create a Locator using the AccessPolicy and Asset\r             uploadLocator = mediaService\r                 .create(Locator.create(uploadAccessPolicy.getId(), resultAsset.getId(), LocatorType.SAS));\r \r             // Create the Blob Writer using the Locator\r             uploader = mediaService.createBlobWriter(uploadLocator);\r \r             File file = new File(fileName);\r \r             // The local file that will be uploaded to your Media Services account\r             InputStream input = new FileInputStream(file);\r \r             System.out.println(\"Uploading \" + fileName);\r \r             // Upload the local file to the media asset\r             uploader.createBlockBlob(file.getName(), input);\r \r             // Inform Media Services about the uploaded files\r             mediaService.action(AssetFile.createFileInfos(resultAsset.getId()));\r             System.out.println(\"Uploaded Asset File \" + fileName);\r \r             mediaService.delete(Locator.delete(uploadLocator.getId()));\r             mediaService.delete(AccessPolicy.delete(uploadAccessPolicy.getId()));\r \r             return resultAsset;\r         }\r \r         // Create a Job that contains a Task to transform the Asset\r         private static AssetInfo encode(AssetInfo assetToEncode)\r             throws ServiceException, InterruptedException {\r \r             // Retrieve the list of Media Processors that match the name\r             ListResult<MediaProcessorInfo> mediaProcessors = mediaService\r                             .list(MediaProcessor.list().set(\"$filter\", String.format(\"Name eq '%s'\", preferedEncoder)));\r \r             // Use the latest version of the Media Processor\r             MediaProcessorInfo mediaProcessor = null;\r             for (MediaProcessorInfo info : mediaProcessors) {\r                 if (null == mediaProcessor || info.getVersion().compareTo(mediaProcessor.getVersion()) > 0) {\r                     mediaProcessor = info;\r                 }\r             }\r \r             System.out.println(\"Using Media Processor: \" + mediaProcessor.getName() + \" \" + mediaProcessor.getVersion());\r \r             // Create a task with the specified Media Processor\r             String outputAssetName = String.format(\"%s as %s\", assetToEncode.getName(), encodingPreset);\r             String taskXml = \"<taskBody><inputAsset>JobInputAsset(0)</inputAsset>\"\r                     + \"<outputAsset assetCreationOptions=\\\"0\\\"\" // AssetCreationOptions.None\r                     + \" assetName=\\\"\" + outputAssetName + \"\\\">JobOutputAsset(0)</outputAsset></taskBody>\";\r \r             Task.CreateBatchOperation task = Task.create(mediaProcessor.getId(), taskXml)\r                     .setConfiguration(encodingPreset).setName(\"Encoding\");\r \r             // Create the Job; this automatically schedules and runs it.\r             Job.Creator jobCreator = Job.create()\r                     .setName(String.format(\"Encoding %s to %s\", assetToEncode.getName(), encodingPreset))\r                     .addInputMediaAsset(assetToEncode.getId()).setPriority(2).addTaskCreator(task);\r             JobInfo job = mediaService.create(jobCreator);\r \r             String jobId = job.getId();\r             System.out.println(\"Created Job with Id: \" + jobId);\r \r             // Check to see if the Job has completed\r             checkJobStatus(jobId);\r             // Done with the Job\r \r             // Retrieve the output Asset\r             ListResult<AssetInfo> outputAssets = mediaService.list(Asset.list(job.getOutputAssetsLink()));\r             return outputAssets.get(0);\r         }\r \r \r         public static String getStreamingOriginLocator(AssetInfo asset) throws ServiceException {\r             // Get the .ISM AssetFile\r             ListResult<AssetFileInfo> assetFiles = mediaService.list(AssetFile.list(asset.getAssetFilesLink()));\r             AssetFileInfo streamingAssetFile = null;\r             for (AssetFileInfo file : assetFiles) {\r                 if (file.getName().toLowerCase().endsWith(\".ism\")) {\r                     streamingAssetFile = file;\r                     break;\r                 }\r             }\r \r             AccessPolicyInfo originAccessPolicy;\r             LocatorInfo originLocator = null;\r \r             // Create a 30-day read only AccessPolicy\r             double durationInMinutes = 60 * 24 * 30;\r             originAccessPolicy = mediaService.create(\r                     AccessPolicy.create(\"Streaming policy\", durationInMinutes, EnumSet.of(AccessPolicyPermission.READ)));\r \r             // Create a Locator using the AccessPolicy and Asset\r             originLocator = mediaService\r                     .create(Locator.create(originAccessPolicy.getId(), asset.getId(), LocatorType.OnDemandOrigin));\r \r             // Create a Smooth Streaming base URL\r             return originLocator.getPath() + streamingAssetFile.getName() + \"/manifest\";\r         }\r \r         private static void checkJobStatus(String jobId) throws InterruptedException, ServiceException {\r             boolean done = false;\r             JobState jobState = null;\r             while (!done) {\r                 // Sleep for 5 seconds\r                 Thread.sleep(5000);\r \r                 // Query the updated Job state\r                 jobState = mediaService.get(Job.get(jobId)).getState();\r                 System.out.println(\"Job state: \" + jobState);\r \r                 if (jobState == JobState.Finished || jobState == JobState.Canceled || jobState == JobState.Error) {\r                     done = true;\r                 }\r             }\r         }\r     }\r \r \r \r \r ## <a name=\"additional-resources\"></a>其他资源\r 有关如何在 Azure 中开发 Java 应用的详细信息，请参阅 [Java 开发中心][Azure Java Developer Center]和[面向 Java 开发人员的 Azure][Azure for Java developers]。\r \r \r 有关媒体服务 Javadoc 文档，请参阅[适用于 Java 的 Azure 库文档][适用于 Java 的 Azure 库文档]。\r <!--Update_Description:update two links;add one note about AMS policy limitations-->\r <!-- URLs. -->\r \r   [Azure Media Services SDK Maven Package]: https://mvnrepository.com/artifact/com.microsoft.azure/azure-media/latest\r   [Azure Java Developer Center]: /develop/java/\r   [Azure for Java developers]: https://docs.microsoft.com/java/azure/\r   [Media Services Client Development]: ./media-services-develop-video-players.md"}