{"Title":"在 Java 中创建第一个可靠的 Azure 微服务","Description":"介绍如何创建包含无状态服务和有状态服务的 Azure Service Fabric 应用程序。","Content":"# <a name=\"get-started-with-reliable-services\"></a>Reliable Services 入门\r > [!div class=\"op_single_selector\"]\r > * [Windows 上的 C#](service-fabric-reliable-services-quick-start.md)\r > * [Linux 上的 Java](service-fabric-reliable-services-quick-start-java.md)\r >\r >\r \r 本文介绍 Azure Service Fabric Reliable Services 的基础知识，并演示如何创建和部署以 Java 编写的简单 Reliable Service 应用程序。\r <!-- Not Available  This Microsoft Virtual Academy -->\r \r ## <a name=\"installation-and-setup\"></a>安装和设置\r 在开始之前，请确保已在计算机上设置 Service Fabric 开发环境。\r 如果需要设置环境，请转到[在 Mac 上开始使用](service-fabric-get-started-mac.md)或[在 Linux 上开始使用](service-fabric-get-started-linux.md)。\r \r ## <a name=\"basic-concepts\"></a>基本概念\r 了解几个基本概念，即可开始使用 Reliable Services：\r \r * **服务类型**：这是服务实现。 它由编写的可扩展 `StatelessService` 的类、其中使用的任何其他代码或依赖项以及名称和版本号定义。\r * **命名服务实例**：若要运行服务，需要创建服务类型的命名实例，就像创建类类型的对象实例一样。 事实上，服务实例是编写的服务类的对象实例化。\r * **服务宿主**：创建的命名服务实例需在宿主中运行。 服务宿主是可以运行服务实例的进程。\r * **服务注册**：通过注册可将所有对象融合在一起。 只有在服务宿主中将服务类型注册 Service Fabric 运行时，Service Fabric 才能创建该类型的可运行实例。  \r \r ## <a name=\"create-a-stateless-service\"></a>创建无状态服务\r 首先创建 Service Fabric 应用程序。 适用于 Linux 的 Service Fabric SDK 包括一个 Yeoman 生成器，它为包含无状态服务的 Service Fabric 应用程序提供基架。 首先，请运行以下 Yeoman 命令：\r \r ```bash\r $ yo azuresfjava\r ```\r \r 按照说明创建 **可靠无状态服务**。 本教程将应用程序命名为“HelloWorldApplication”，将服务命名为“HelloWorld”。 结果包含 `HelloWorldApplication` 和 `HelloWorld` 的目录。\r \r ```bash\r HelloWorldApplication/\r ├── build.gradle\r ├── HelloWorld\r │   ├── build.gradle\r │   └── src\r │       └── statelessservice\r │           ├── HelloWorldServiceHost.java\r │           └── HelloWorldService.java\r ├── HelloWorldApplication\r │   ├── ApplicationManifest.xml\r │   └── HelloWorldPkg\r │       ├── Code\r │       │   ├── entryPoint.sh\r │       │   └── _readme.txt\r │       ├── Config\r │       │   └── _readme.txt\r │       ├── Data\r │       │   └── _readme.txt\r │       └── ServiceManifest.xml\r ├── install.sh\r ├── settings.gradle\r └── uninstall.sh\r ```\r \r ## <a name=\"implement-the-service\"></a>实现服务\r 打开 **HelloWorldApplication/HelloWorld/src/statelessservice/HelloWorldService.java**。 此类定义服务类型，可以运行任何代码。 服务 API 为代码提供两个入口点：\r \r * 名为 `runAsync()`的开放式入口点方法，可在其中开始执行任何工作负荷，包括长时间运行的计算工作负荷。\r \r ```java\r @Override\r protected CompletableFuture<?> runAsync(CancellationToken cancellationToken) {\r     ...\r }\r ```\r \r * 一个通信入口点，可在其中插入选择的通信堆栈。 可在其中开始接收来自用户和其他服务的请求。\r \r ```java\r @Override\r protected List<ServiceInstanceListener> createServiceInstanceListeners() {\r     ...\r }\r ```\r \r 在本教程中，我们重点介绍 `runAsync()` 入口点方法。 可在其中立即开始运行代码。\r \r ### <a name=\"runasync\"></a>RunAsync\r 当服务实例已放置并且可以执行时，平台将调用此方法。 对于无状态服务，这就意味着打开服务实例。 需要关闭服务实例时，将提供取消标记进行协调。 在 Service Fabric 中，服务的整个生存期内可能多次出现服务实例的这一打开-关闭循环。 发生这种情况的原因多种多样，包括：\r \r * 系统可能会移动服务实例以实现资源平衡。\r * 代码中发生错误。\r * 应用程序或系统升级。\r * 基础硬件遇到中断。\r \r Service Fabric 会管理此业务流程，以便保持服务的高度可用和适当均衡。\r \r `runAsync()` 不应以同步方式阻止。 RunAsync 实现应返回 CompletableFuture，以允许运行时继续执行。 如果工作负荷需要实现应在 CompletableFuture 内部完成的长时间运行任务。\r \r #### <a name=\"cancellation\"></a>取消\r 取消工作负荷是一项由所提供的取消标记协调的协同操作。 系统会等任务结束后（成功完成、取消或出现故障）再执行下一步操作。 当系统请求取消时，请务必接受取消标记，完成所有任务，并尽快退出 `runAsync()`。 以下示例演示如何处理取消事件：\r \r ```java\r     @Override\r     protected CompletableFuture<?> runAsync(CancellationToken cancellationToken) {\r \r         // TODO: Replace the following sample code with your own logic\r         // or remove this runAsync override if it's not needed in your service.\r \r         CompletableFuture.runAsync(() -> {\r           long iterations = 0;\r           while(true)\r           {\r             cancellationToken.throwIfCancellationRequested();\r             logger.log(Level.INFO, \"Working-{0}\", ++iterations);\r \r             try\r             {\r               Thread.sleep(1000);\r             }\r             catch (IOException ex) {}\r           }\r         });\r     }\r ```\r \r ### <a name=\"service-registration\"></a>服务注册\r 必须将服务类型注册到 Service Fabric 运行时。 服务类型在 `ServiceManifest.xml` 中以及实现 `StatelessService` 的服务类中定义。 服务注册在进程主入口点中执行。 在本示例中，进程主入口点为 `HelloWorldServiceHost.java`：\r \r ```java\r public static void main(String[] args) throws Exception {\r     try {\r         ServiceRuntime.registerStatelessServiceAsync(\"HelloWorldType\", (context) -> new HelloWorldService(), Duration.ofSeconds(10));\r         logger.log(Level.INFO, \"Registered stateless service type HelloWorldType.\");\r         Thread.sleep(Long.MAX_VALUE);\r     }\r     catch (Exception ex) {\r         logger.log(Level.SEVERE, \"Exception in registration:\", ex);\r         throw ex;\r     }\r }\r ```\r \r ## <a name=\"run-the-application\"></a>运行应用程序\r \r Yeoman 基架包含用于生成应用程序的 gradle 脚本，以及用于部署和删除应用程序的 bash 脚本。 若要运行应用程序，请先使用 gradle 构建应用程序：\r \r ```bash\r $ gradle\r ```\r \r 这会生成可以使用 Service Fabric CLI 部署的 Service Fabric 应用程序包。\r \r ### <a name=\"deploy-with-service-fabric-cli\"></a>使用 Service Fabric CLI 部署\r \r Install.sh 脚本包含用于部署应用程序包的 Service Fabric CLI 命令。 运行 install.sh 脚本以部署此应用程序。\r \r ```bash\r $ ./install.sh\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r * [Service Fabric CLI 入门](service-fabric-cli.md)\r \r <!--Update_Description: update meta properties -->"}