{"Title":"如何使用适用于 Azure 移动应用的 iOS SDK","Description":"如何使用适用于 Azure 移动应用的 iOS SDK","Content":"# <a name=\"how-to-use-ios-client-library-for-azure-mobile-apps\"></a>如何使用适用于 Azure 移动应用的 iOS 客户端库\r \r [!INCLUDE [app-service-mobile-selector-client-library](../../includes/app-service-mobile-selector-client-library.md)]\r \r 本指南介绍如何使用最新的 [Azure 移动应用 iOS SDK][1]执行常见任务。 对于 Azure 移动应用的新手，请先完成 [Azure Mobile Apps Quick Start] （Azure 移动应用快速入门），创建后端、创建表并下载预先生成的 iOS Xcode 项目。 本指南侧重于客户端 iOS SDK。 若要了解有关用于后端的服务器端 SDK 的详细信息，请参阅 Server SDK 操作方法。\r \r ## <a name=\"reference-documentation\"></a>参考文档\r \r iOS 客户端 SDK 的参考文档位于此处： [Azure Mobile Apps iOS Client Reference][2]（Azure 移动应用 iOS 客户端参考）。\r \r ## <a name=\"supported-platforms\"></a>支持的平台\r \r iOS SDK 支持适用于 iOS 8.0 版及更高版本的 Objective-C 项目、Swift 2.2 项目和 Swift 2.3 项目。\r \r “服务器流”身份验证在呈现的 UI 中使用 WebView。  如果设备不能显示 Web 视图 UI，则需使用本产品范围外的另一种身份验证方法。  \r 因此这个 SDK 不适用于监视类型或同样受限制的设备。\r \r ##<a name=\"Setup\"></a>安装与先决条件\r \r 本指南假设已创建了包含表的后端。本指南假设该表的架构与这些教程中的表相同。本指南还假设在代码中引用了 `MicrosoftAzureMobile.framework` 并导入了 `MicrosoftAzureMobile/MicrosoftAzureMobile.h`。\r \r ##<a name=\"create-client\"></a>如何创建客户端\r \r 若要在项目中访问 Azure 移动应用后端，请创建 `MSClient`。将 `AppUrl` 替换为应用 URL。可以将 `gatewayURLString` 和 `applicationKey` 留空。如果设置了用于身份验证的网关，请使用网关 URL 填充 `gatewayURLString`。\r \r **Objective-C**：\r \r ```\r MSClient *client = [MSClient clientWithApplicationURLString:@\"AppUrl\"];\r ```\r \r **Swift**：\r \r ```\r let client = MSClient(applicationURLString: \"AppUrl\")\r ```\r \r ##<a name=\"table-reference\"></a>如何：创建表引用\r \r 若要访问或更新数据，请创建到后端表的引用。将 `TodoItem` 替换为表名称\r \r **Objective-C**：\r \r ```\r MSTable *table = [client tableWithName:@\"TodoItem\"];\r ```\r \r **Swift**：\r \r ```\r let table = client.tableWithName(\"TodoItem\")\r ```\r \r ##<a name=\"querying\"></a>如何：查询数据\r \r 若要创建数据库查询，请查询 `MSTable` 对象。 以下查询会获取 `TodoItem` 中的所有项，并记录每个项的文本。\r \r **Objective-C**：\r \r ```\r [table readWithCompletion:^(MSQueryResult *result, NSError *error) {\r         if(error) { // error is nil if no error occured\r                 NSLog(@\"ERROR %@\", error);\r         } else {\r                 for(NSDictionary *item in result.items) { // items is NSArray of records that match query\r                         NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\r                 }\r         }\r }];\r ```\r \r **Swift**：\r \r ```\r table.readWithCompletion { (result, error) in\r     if let err = error {\r         print(\"ERROR \", err)\r     } else if let items = result?.items {\r         for item in items {\r             print(\"Todo Item: \", item[\"text\"])\r         }\r     }\r }\r ```\r \r ##<a name=\"filtering\"></a>如何：筛选器返回的数据\r \r 可以使用许多可用选项来筛选结果。\r \r 若要使用谓词进行筛选，请使用 `NSPredicate` 和 `readWithPredicate`。以下筛选器返回的数据只用于查找未完成的待办事项。\r \r **Objective-C**：\r \r ```\r // Create a predicate that finds items where complete is false\r NSPredicate * predicate = [NSPredicate predicateWithFormat:@\"complete == NO\"];\r // Query the TodoItem table\r [table readWithPredicate:predicate completion:^(MSQueryResult *result, NSError *error) {\r         if(error) {\r                 NSLog(@\"ERROR %@\", error);\r         } else {\r                 for(NSDictionary *item in result.items) {\r                         NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\r                 }\r         }\r }];\r ```\r \r **Swift**：\r \r ```\r // Create a predicate that finds items where complete is false\r let predicate =  NSPredicate(format: \"complete == NO\")\r // Query the TodoItem table\r table.readWithPredicate(predicate) { (result, error) in\r     if let err = error {\r         print(\"ERROR \", err)\r     } else if let items = result?.items {\r         for item in items {\r             print(\"Todo Item: \", item[\"text\"])\r         }\r     }\r }\r ```\r \r ##<a name=\"query-object\"></a>如何：使用 MSQuery\r \r 若要执行复杂查询（包括排序和分页），请使用谓词直接创建 `MSQuery` 对象：\r \r **Objective-C**：\r \r ```\r MSQuery *query = [table query];\r MSQuery *query = [table queryWithPredicate: [NSPredicate predicateWithFormat:@\"complete == NO\"]];\r ```\r \r **Swift**：\r \r ```\r let query = table.query()\r let query = table.queryWithPredicate(NSPredicate(format: \"complete == NO\"))\r ```\r \r `MSQuery` 允许用户控制几种查询行为。\r \r * 指定结果顺序\r * 限制要返回的字段\r * 限制要返回的记录数\r * 指定响应中的总计数\r * 指定请求中的自定义查询字符串参数\r * 应用其他函数\r \r 通过对对象调用 `readWithCompletion` 来执行 `MSQuery` 查询。\r \r ## <a name=\"sorting\"></a>如何：使用 MSQuery 对数据排序\r \r 让我们先看一个示例，来了解如何对结果排序。 如果要对字段“text”进行升序排序，并对“complete”进行降序排序，请调用 `MSQuery` ，如下所示：\r \r **Objective-C**：\r \r ```\r [query orderByAscending:@\"text\"];\r [query orderByDescending:@\"complete\"];\r [query readWithCompletion:^(MSQueryResult *result, NSError *error) {\r         if(error) {\r                 NSLog(@\"ERROR %@\", error);\r         } else {\r                 for(NSDictionary *item in result.items) {\r                         NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\r                 }\r         }\r }];\r ```\r \r **Swift**：\r \r ```\r query.orderByAscending(\"text\")\r query.orderByDescending(\"complete\")\r query.readWithCompletion { (result, error) in\r     if let err = error {\r         print(\"ERROR \", err)\r     } else if let items = result?.items {\r         for item in items {\r             print(\"Todo Item: \", item[\"text\"])\r         }\r     }\r }\r ```\r \r ## <a name=\"selecting\"></a><a name=\"parameters\"></a>如何：使用 MSQuery 限制字段和展开查询字符串参数\r \r 若要限制在查询中返回的字段，请在 **selectFields** 属性中指定字段的名称。此示例只返回 text 和 completed 字段：\r \r **Objective-C**：\r \r ```\r query.selectFields = @[@\"text\", @\"complete\"];\r ```\r \r **Swift**：\r \r ```\r query.selectFields = [\"text\", \"complete\"]\r ```\r \r 若要在服务器请求中包含其他查询字符串参数（例如，某个自定义服务器端脚本要使用这些参数），请按如下所示填充 `query.parameters`：\r \r **Objective-C**：\r \r ```\r query.parameters = @{\r     @\"myKey1\" : @\"value1\",\r     @\"myKey2\" : @\"value2\",\r };\r ```\r \r **Swift**：\r \r ```\r query.parameters = [\"myKey1\": \"value1\", \"myKey2\": \"value2\"]\r ```\r \r ## <a name=\"paging\"></a>如何配置页面大小\r \r 凭借 Azure 移动应用，页面大小可以控制从后端表中一次所拉取的记录数量。 `pull` 数据的调用稍后会基于此页面大小对数据进行批量处理，直到没有更多要提取的记录。\r \r 可使用 **MSPullSettings** 配置页面大小，如下所示。 默认页面大小为 50，以下示例中则改为 3。\r \r 可以配置不同的页面大小，以提高性能。如果有大量小型数据记录，增大页面大小可减少服务器往返次数。\r \r 此设置仅控制客户端侧的页面大小。如果客户端请求的页面大小超过移动应用后端支持的大小，则页面大小受限于后端配置为支持的最大值。\r \r 此设置也是数据记录的数目，而不是字节大小。\r \r 如果要增加客户端页面大小，还应增加服务器上的页面大小。 请参阅[“如何：调整表分页大小”](./app-service-mobile-dotnet-backend-how-to-use-server-sdk.md)中的步骤执行此操作。\r \r **Objective-C**：\r \r ```\r   MSPullSettings *pullSettings = [[MSPullSettings alloc] initWithPageSize:3];\r   [table  pullWithQuery:query queryId:@nil settings:pullSettings\r                         completion:^(NSError * _Nullable error) {\r                                if(error) {\r                     NSLog(@\"ERROR %@\", error);\r                 } \r                            }];\r ```\r \r **Swift**：\r \r ```\r let pullSettings = MSPullSettings(pageSize: 3)\r table.pullWithQuery(query, queryId:nil, settings: pullSettings) { (error) in\r     if let err = error {\r         print(\"ERROR \", err)\r     } \r }\r ```\r \r ##<a name=\"inserting\"></a>如何：插入数据\r \r 若要插入新的表行，请创建 `NSDictionary` 并调用 `table insert`。 如果启用[动态架构]，Azure App Service 移动后端将根据 `NSDictionary` 自动生成新列。\r \r 如果未提供 `id` ，后端会自动生成新的唯一 ID。 提供自己的 `id`，以使用电子邮件地址、用户名或自己的自定义值作为 ID。 提供自己的 ID 可以让联接和业务导向型数据库逻辑变得更容易。\r \r `result` 包含插入的新项。 根据服务器逻辑，与传递给服务器的项相比，它可能包含其他或已修改的数据。\r \r **Objective-C**：\r \r ```\r NSDictionary *newItem = @{@\"id\": @\"custom-id\", @\"text\": @\"my new item\", @\"complete\" : @NO};\r [table insert:newItem completion:^(NSDictionary *result, NSError *error) {\r     if(error) {\r         NSLog(@\"ERROR %@\", error);\r     } else {\r         NSLog(@\"Todo Item: %@\", [result objectForKey:@\"text\"]);\r     }\r }];\r ```\r \r **Swift**：\r \r ```\r let newItem = [\"id\": \"custom-id\", \"text\": \"my new item\", \"complete\": false]\r table.insert(newItem) { (result, error) in\r     if let err = error {\r         print(\"ERROR \", err)\r     } else if let item = result {\r         print(\"Todo Item: \", item[\"text\"])\r     }\r }\r ```\r \r ##<a name=\"modifying\"></a>如何：修改数据\r \r 若要更新现有的行，请修改项并调用 `update`：\r \r **Objective-C**：\r \r ```\r NSMutableDictionary *newItem = [oldItem mutableCopy]; // oldItem is NSDictionary\r [newItem setValue:@\"Updated text\" forKey:@\"text\"];\r [table update:newItem completion:^(NSDictionary *result, NSError *error) {\r     if(error) {\r         NSLog(@\"ERROR %@\", error);\r     } else {\r         NSLog(@\"Todo Item: %@\", [result objectForKey:@\"text\"]);\r     }\r }];\r ```\r \r **Swift**：\r \r ```\r if let newItem = oldItem.mutableCopy() as? NSMutableDictionary {\r     newItem[\"text\"] = \"Updated text\"\r     table2.update(newItem as [NSObject: AnyObject], completion: { (result, error) -> Void in\r         if let err = error {\r             print(\"ERROR \", err)\r         } else if let item = result {\r             print(\"Todo Item: \", item[\"text\"])\r         }\r     })\r }\r ```\r \r 或者，提供行 ID 和更新的字段：\r \r **Objective-C**：\r \r ```\r [table update:@{@\"id\":@\"custom-id\", @\"text\":\"my EDITED item\"} completion:^(NSDictionary *result, NSError *error) {\r     if(error) {\r         NSLog(@\"ERROR %@\", error);\r     } else {\r         NSLog(@\"Todo Item: %@\", [result objectForKey:@\"text\"]);\r     }\r }];\r ```\r \r **Swift**：\r \r ```\r table.update([\"id\": \"custom-id\", \"text\": \"my EDITED item\"]) { (result, error) in\r     if let err = error {\r         print(\"ERROR \", err)\r     } else if let item = result {\r         print(\"Todo Item: \", item[\"text\"])\r     }\r }\r ```\r \r 进行更新时，至少必须设置 `id` 属性。\r \r ##<a name=\"deleting\"></a>如何：删除数据\r \r 若要删除某个项，请对该项调用 `delete` ：\r \r **Objective-C**：\r \r ```\r [table delete:item completion:^(id itemId, NSError *error) {\r     if(error) {\r         NSLog(@\"ERROR %@\", error);\r     } else {\r         NSLog(@\"Todo Item ID: %@\", itemId);\r     }\r }];\r ```\r \r **Swift**：\r \r ```\r table.delete(newItem as [NSObject: AnyObject]) { (itemId, error) in\r     if let err = error {\r         print(\"ERROR \", err)\r     } else {\r         print(\"Todo Item ID: \", itemId)\r     }\r }\r ```\r \r 或者，提供行 ID 来进行删除：\r \r **Objective-C**：\r \r ```\r [table deleteWithId:@\"37BBF396-11F0-4B39-85C8-B319C729AF6D\" completion:^(id itemId, NSError *error) {\r     if(error) {\r         NSLog(@\"ERROR %@\", error);\r     } else {\r         NSLog(@\"Todo Item ID: %@\", itemId);\r     }\r }];\r ```\r \r **Swift**：\r \r ```\r table.deleteWithId(\"37BBF396-11F0-4B39-85C8-B319C729AF6D\") { (itemId, error) in\r     if let err = error {\r         print(\"ERROR \", err)\r     } else {\r         print(\"Todo Item ID: \", itemId)\r     }\r }\r ```\r \r 进行删除时，至少必须设置 `id` 属性。\r \r ##<a name=\"customapi\"></a>如何调用自定义 API\r \r 使用自定义 API 可以公开任何后端功能。 无需映射到表操作。 不仅能进一步控制消息，甚至还可以读取或设置标头，并更改响应正文格式。 若要了解如何在后端上创建自定义 API，请阅读[自定义 API](./app-service-mobile-node-backend-how-to-use-server-sdk.md#work-easy-apis)\r \r 若要调用自定义 API，请调用 `MSClient.invokeAPI`。 请求和响应内容被视为 JSON。 若要使用其他媒体类型，[请使用 `invokeAPI` 的其他重载][5]。  若要发出 `GET` 请求而不是 `POST` 请求，请将参数 `HTTPMethod` 设置为 `\"GET\"`，将参数 `body` 设置为 `nil`（因为 GET 请求没有消息正文）。如果自定义 API 支持其他 HTTP 谓词，请相应地更改 `HTTPMethod`。\r \r **Objective-C**：\r ```\r [self.client invokeAPI:@\"sendEmail\"\r                   body:@{ @\"contents\": @\"Hello world!\" }\r             HTTPMethod:@\"POST\"\r             parameters:@{ @\"to\": @\"bill@contoso.com\", @\"subject\" : @\"Hi!\" }\r                headers:nil\r             completion: ^(NSData *result, NSHTTPURLResponse *response, NSError *error) {\r                 if(error) {\r                     NSLog(@\"ERROR %@\", error);\r                 } else {\r                     // Do something with result\r                 }\r             }];\r ```\r \r **Swift**：\r \r ```\r client.invokeAPI(\"sendEmail\",\r             body: [ \"contents\": \"Hello World\" ],\r             HTTPMethod: \"POST\",\r             parameters: [ \"to\": \"bill@contoso.com\", \"subject\" : \"Hi!\" ],\r             headers: nil)\r             {\r                 (result, response, error) -> Void in\r                 if let err = error {\r                     print(\"ERROR \", err)\r                 } else if let res = result {\r                           // Do something with result\r                 }\r         }\r ```\r \r ##<a name=\"templates\"></a>如何注册推送模板以发送跨平台通知\r \r 若要注册模板，请在客户端应用中连同 **client.push registerDeviceToken** 方法一起传递模板即可。\r \r **Objective-C**：\r \r ```\r [client.push registerDeviceToken:deviceToken template:iOSTemplate completion:^(NSError *error) {\r     if(error) {\r         NSLog(@\"ERROR %@\", error);\r     }\r }];\r ```\r \r **Swift**：\r \r ```\r     client.push?.registerDeviceToken(NSData(), template: iOSTemplate, completion: { (error) in\r         if let err = error {\r             print(\"ERROR \", err)\r         }\r     })\r ```\r \r 模板类型是 NSDictionary，可以包含采用以下格式的多个模板：\r \r **Objective-C**：\r \r ```\r NSDictionary *iOSTemplate = @{ @\"templateName\": @{ @\"body\": @{ @\"aps\": @{ @\"alert\": @\"$(message)\" } } } };\r ```\r \r **Swift**：\r \r ```\r let iOSTemplate = [\"templateName\": [\"body\": [\"aps\": [\"alert\": \"$(message)\"]]]]\r ```\r \r 出于安全考虑，从请求中删除所有标记。  要将标记添加到安装或安装中的模板，请参阅 [Work with the .NET backend server SDK for Azure Mobile Apps][4]（使用适用于 Azure 移动应用的 .NET 后端服务器 SDK）。  若要使用这些注册的模板发送通知，请参阅 [通知中心 API][3]。\r \r ##<a name=\"errors\"></a>如何：处理错误\r \r 调用 Azure 应用服务移动后端时，完成块包含 `NSError` 参数。 如果出错，此参数为非 nil 值。 应该在代码中检查此参数，并根据需要处理错误，如前面的代码片段中所示。\r \r 文件 [`<WindowsAzureMobileServices/MSError.h>`][6] 定义常量 `MSErrorResponseKey`、`MSErrorRequestKey` 和 `MSErrorServerItemKey`。若要获取与错误相关的更多数据，请执行以下操作：\r \r **Objective-C**：\r \r ```\r NSDictionary *serverItem = [error.userInfo objectForKey:MSErrorServerItemKey];\r ```\r \r **Swift**：\r \r ```\r let serverItem = error.userInfo[MSErrorServerItemKey]\r ```\r \r 此外，该文件还定义每个错误代码的常量：\r \r **Objective-C**：\r \r ```\r if (error.code == MSErrorPreconditionFailed) {\r ```\r \r **Swift**：\r \r ```\r if (error.code == MSErrorPreconditionFailed) {\r ```\r \r ## <a name=\"adal\"></a>如何使用 Active Directory 身份验证库对用户进行身份验证\r \r 可以借助 Active Directory 身份验证库 (ADAL) 使用 Azure Active Directory 将用户登录到应用程序。使用标识提供者 SDK 的客户端流身份验证优于使用 `loginWithProvider:completion:` 方法。客户端流身份验证提供更自然的 UX 体验，并允许进行额外的自定义。\r \r 1. 根据 [How to configure App Service for Active Directory login][7] （如何为 Active Directory 登录配置应用服务）教程的说明，为 AAD 登录配置移动应用。 请务必完成注册本机客户端应用程序的可选步骤。 对于 iOS，建议重定向 URI 采用 `<app-scheme>://<bundle-id>` 格式。 \r \r 2. 使用 Cocoapods 安装 ADAL。编辑 Podfile 以包含以下定义，将 **YOUR-PROJECT** 替换为 Xcode 项目的名称：\r \r     ```\r     source 'https://github.com/CocoaPods/Specs.git'\r     link_with ['YOUR-PROJECT']\r     xcodeproj 'YOUR-PROJECT'\r     ```\r Pod：\r \r         pod 'ADALiOS'\r \r 3. 使用终端，从包含项目的目录运行 `pod install`，然后打开生成的 Xcode 工作区（而不是项目）。\r \r 4. 根据使用的语言，将以下代码添加到应用程序。 在每个应用程序中，进行以下替换：\r \r     * 将 **INSERT-AUTHORITY-HERE** 替换为在其中预配应用程序的租户的名称。格式应为 https://login.chinacloudapi.cn/contoso.partner.onmschina.cn 。可以从 [Azure 经典管理门户]中的 Azure Active Directory 的“域”选项卡复制此值。\r     * 将 **INSERT-RESOURCE-ID-HERE** 替换移动应用后端的客户端 ID。 可以在门户中“Azure Active Directory 设置”下面的“高级”选项卡获取此客户端 ID。\r     * 将 **INSERT-CLIENT-ID-HERE** 替换为从本机客户端应用程序复制的客户端 ID。\r     * 使用 HTTPS 方案将 **INSERT-REDIRECT-URI-HERE** 替换为站点的 _/.auth/login/done_ 终结点。此值应类似于  https://contoso.chinacloudsites.cn/.auth/login/done 。\r \r **Objective-C**：\r \r ```\r #import <ADALiOS/ADAuthenticationContext.h>\r #import <ADALiOS/ADAuthenticationSettings.h>\r // ...\r - (void) authenticate:(UIViewController*) parent\r            completion:(void (^) (MSUser*, NSError*))completionBlock;\r {\r     NSString *authority = @\"INSERT-AUTHORITY-HERE\";\r     NSString *resourceId = @\"INSERT-RESOURCE-ID-HERE\";\r     NSString *clientId = @\"INSERT-CLIENT-ID-HERE\";\r     NSURL *redirectUri = [[NSURL alloc]initWithString:@\"INSERT-REDIRECT-URI-HERE\"];\r     ADAuthenticationError *error;\r     ADAuthenticationContext *authContext = [ADAuthenticationContext authenticationContextWithAuthority:authority error:&error];\r     authContext.parentController = parent;\r     [ADAuthenticationSettings sharedInstance].enableFullScreen = YES;\r     [authContext acquireTokenWithResource:resourceId\r                                  clientId:clientId\r                               redirectUri:redirectUri\r                           completionBlock:^(ADAuthenticationResult *result) {\r                               if (result.status != AD_SUCCEEDED)\r                               {\r                                   completionBlock(nil, result.error);;\r                               }\r                               else\r                               {\r                                   NSDictionary *payload = @{\r                                                             @\"access_token\" : result.tokenCacheStoreItem.accessToken\r                                                             };\r                                   [client loginWithProvider:@\"aad\" token:payload completion:completionBlock];\r                               }\r                           }];\r }\r ```\r \r **Swift**：\r \r ```\r // add the following imports to your bridging header:\r //\t\t#import <ADALiOS/ADAuthenticationContext.h>\r //\t\t#import <ADALiOS/ADAuthenticationSettings.h>\r \r func authenticate(parent: UIViewController, completion: (MSUser?, NSError?) -> Void) {\r     let authority = \"INSERT-AUTHORITY-HERE\"\r     let resourceId = \"INSERT-RESOURCE-ID-HERE\"\r     let clientId = \"INSERT-CLIENT-ID-HERE\"\r     let redirectUri = NSURL(string: \"INSERT-REDIRECT-URI-HERE\")\r     var error: AutoreleasingUnsafeMutablePointer<ADAuthenticationError?> = nil\r     let authContext = ADAuthenticationContext(authority: authority, error: error)\r     authContext.parentController = parent\r     ADAuthenticationSettings.sharedInstance().enableFullScreen = true\r     authContext.acquireTokenWithResource(resourceId, clientId: clientId, redirectUri: redirectUri) { (result) in\r             if result.status != AD_SUCCEEDED {\r                 completion(nil, result.error)\r             }\r             else {\r                 let payload: [String: String] = [\"access_token\": result.tokenCacheStoreItem.accessToken]\r                 client.loginWithProvider(\"aad\", token: payload, completion: completion)\r             }\r         }\r }\r ```\r \r <!-- Anchors. -->\r \r [What is Mobile Services]: #what-is\r [Concepts]: #concepts\r [Setup and Prerequisites]: #Setup\r [How to: Create the Mobile Services client]: #create-client\r [How to: Create a table reference]: #table-reference\r [How to: Query data from a mobile service]: #querying\r [Filter returned data]: #filtering\r [Sort returned data]: #sorting\r [Return data in pages]: #paging\r [Select specific columns]: #selecting\r [How to: Bind data to the user interface]: #binding\r [How to: Insert data into a mobile service]: #inserting\r [How to: Modify data in a mobile service]: #modifying\r [How to: Authenticate users]: #authentication\r [Cache authentication tokens]: #caching-tokens\r [How to: Upload images and large files]: #blobs\r [How to: Handle errors]: #errors\r [How to: Design unit tests]: #unit-testing\r [How to: Customize the client]: #customizing\r [Customize request headers]: #custom-headers\r [Customize data type serialization]: #custom-serialization\r [Next Steps]: #next-steps\r [How to: Use MSQuery]: #query-object\r \r <!-- Images. -->\r \r <!-- URLs. -->\r [Azure Mobile Apps Quick Start]: ./app-service-mobile-ios-get-started.md\r \r \r \r \r [Mobile Services SDK]: https://go.microsoft.com/fwLink/p/?LinkID=266533\r [iOS SDK]: https://developer.apple.com/xcode\r \r [Handling Expired Tokens]: http://go.microsoft.com/fwlink/p/?LinkId=301955\r [Live Connect SDK]: http://go.microsoft.com/fwlink/p/?LinkId=301960\r [Permissions]: http://msdn.microsoft.com/zh-cn/library/azure/jj193161.aspx\r [动态架构]: http://go.microsoft.com/fwlink/p/?LinkId=296271\r [Create a table]: http://msdn.microsoft.com/library/windowsazure/jj193162.aspx\r [NSDictionary object]: http://go.microsoft.com/fwlink/p/?LinkId=301965\r [ASCII control codes C0 and C1]: http://en.wikipedia.org/wiki/Data_link_escape_character#C1_set\r [CLI to manage Mobile Services tables]: https://docs.azure.cn/zh-cn/cli/get-started-with-az-cli2?view=azure-cli-lastest\r [ Azure 经典管理门户]: http://manage.windowsazure.cn\r [Fabric Dashboard]: https://www.fabric.io/home\r [Fabric for iOS - Getting Started]: https://docs.fabric.io/ios/fabric/getting-started.html\r [1]: https://github.com/Azure/azure-mobile-apps-ios-client/blob/master/README.md#ios-client-sdk\r [2]: http://azure.github.io/azure-mobile-apps-ios-client/\r [3]: https://msdn.microsoft.com/zh-cn/library/azure/dn495101.aspx\r [4]: ./app-service-mobile-dotnet-backend-how-to-use-server-sdk.md#tags\r [5]: http://azure.github.io/azure-mobile-services/iOS/v3/Classes/MSClient.html#//api/name/invokeAPI:data:HTTPMethod:parameters:headers:completion:\r [6]: https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h\r [7]: ../app-service/app-service-mobile-how-to-configure-active-directory-authentication.md\r [8]: ../active-directory/active-directory-devquickstarts-ios.md\r \r [10]: https://developers.facebook.com/docs/ios/getting-started\r \r <!--Update_Description: update meta data and some links-->"}