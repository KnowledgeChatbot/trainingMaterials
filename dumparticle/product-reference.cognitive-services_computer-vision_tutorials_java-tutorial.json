{"Title":"计算机视觉 API Java 教程","Description":"探讨一个使用 Microsoft 认知服务中的计算机视觉 API 的基本 Java Swing 应用。 执行 OCR，创建缩略图，并处理图像中的视觉特征。","Content":"# <a name=\"computer-vision-api-java-tutorial\"></a>计算机视觉 API Java 教程\r \r 本教程介绍 Microsoft 认知服务计算机视觉 REST API 的功能。\r \r 探讨一个使用计算机视觉 REST API 执行光学字符识别 (OCR)、创建智能裁剪的缩略图，以及在图像中检测、标记和描述视觉特征（包括人脸）并对其分类的 Java Swing 应用程序。 此示例允许提交图像 URL 来分析或处理图像。 可以使用此开源示例作为模板在 Java 中生成自己的应用，以便使用计算机视觉 REST API。\r \r 本教程介绍如何将计算机视觉用于以下领域：\r \r > [!div class=\"checklist\"]\r > * 分析图像\r > * 标识图像中的自然或人工地标\r > * 标识图像中的名人\r > * 根据图像创建高质量缩略图\r > * 读取图像中的印刷体文本\r > * 读取图像中的手写文本\r \r Java Swing 形式的应用程序已编写好，但尚无功能。 在本教程中，请添加特定于计算机视觉 REST API 的代码，以便完成应用程序的功能。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r ### <a name=\"platform-requirements\"></a>平台要求\r \r 本教程的内容已使用 NetBeans IDE 开发。 具体说来，是 Java SE 版本的 NetBeans，可[在此处下载](https://netbeans.org/downloads/index.html)。\r \r ### <a name=\"subscribe-to-computer-vision-api-and-get-a-subscription-key\"></a>订阅计算机视觉 API 并获取订阅密钥 \r \r 创建示例之前，必须在 [Azure 门户](https://portal.azure.cn)中创建带计算机视觉 API 的认知服务， 然后即可获取订阅密钥。\r \r ## <a name=\"download-the-tutorial-project\"></a>下载教程项目\r \r 1. 转到[认知服务 Java 计算机视觉教程](https://github.com/Azure-Samples/cognitive-services-java-computer-vision-tutorial)存储库。\r 1. 单击“克隆或下载”按钮。\r 1. 单击“下载 ZIP”下载教程项目的 .zip 文件。\r \r 不需解压缩 .zip 文件的内容，因为 NetBeans 从 .zip 文件导入项目。\r \r ## <a name=\"import-the-tutorial-project\"></a>导入教程项目\r \r 将 cognitive-services-java-computer-vision-tutorial-master.zip 文件导入 NetBeans。\r \r 1. 在 NetBeans 中单击“文件” > “导入项目” > “从 ZIP...”。此时会显示“从 ZIP 导入项目”对话框。\r 1. 在“ZIP 文件:”字段中单击“浏览”按钮，找到 cognitive-services-java-computer-vision-tutorial-master.zip 文件，然后单击“打开”。\r 1. 在“从 ZIP 导入项目”对话框中单击“导入”。\r 1. 在“项目”面板中，展开“ComputerVision” > “源包” > **&lt;&gt;“默认包”**。 \r    某些版本的 NetBeans 使用 src 而不是“源包” > **&lt;&gt;**“默认包”。 在这种情况下，请展开src。\r 1. 双击“MainFrame.java”将文件加载到 NetBeans 编辑器中。 此时会显示 MainFrame.java 文件的“设计”选项卡。\r 1. 单击“源”选项卡查看 Java 源代码。\r \r ## <a name=\"build-and-run-the-tutorial-project\"></a>生成并运行教程项目\r \r 1. 按 F6 生成并运行教程应用程序。\r \r     在教程应用程序中单击相应的选项卡，打开该功能的窗格。 按钮的方法为空，因此不执行任何操作。\r \r     窗口底部为字段“订阅密钥”和“订阅区域”。 必须向这些字段填充有效的订阅密钥以及该订阅密钥的正确区域。 \r \r 1. 退出教程应用程序。\r \r ## <a name=\"add-the-tutorial-code\"></a>添加教程代码\r \r Java Swing 应用程序设置了六个选项卡。 每个选项卡演示的计算机视觉功能（分析、OCR 等）各不相同。 教程的六个部分并不互相依赖，因此可以添加一个部分、所有六个部分，或者一个或两个部分。 可以按任意顺序添加这些部分。\r \r 让我们开始吧。\r \r ## <a name=\"analyze-an-image\"></a>分析图像\r \r 计算机视觉的分析功能可以针对 2,000 多个可识别对象、生物、场景和动作对图像进行分析。 分析完成以后，分析功能会返回一个 JSON 对象，用描述性标记、颜色分析、标题等对图像进行描述。\r \r 若要完成教程应用程序的分析功能，请执行以下步骤：\r \r ### <a name=\"analyze-step-1-add-the-event-handler-code-for-the-form-button\"></a>分析步骤 1：为窗体按钮添加事件处理程序代码\r \r analyzeImageButtonActionPerformed 事件处理程序方法会清除窗体，显示在 URL 中指定的图像，然后调用 AnalyzeImage 方法进行图像分析。 当 AnalyzeImage 返回时，该方法会在“响应”文本区域显示格式化的 JSON 响应，从 JSONObject 提取第一个标题，然后显示该标题，以及该标题正确的置信水平。\r \r 复制以下代码并将其粘贴到 analyzeImageButtonActionPerformed 方法中。\r \r > [!NOTE]\r > NetBeans 不允许将内容粘贴到方法定义行 (```private void```) 或该方法的右大括号处。 若要复制代码，请复制方法定义和右大括号之间的行，然后将其通过粘贴方式覆盖方法的内容。\r \r ```java\r     private void analyzeImageButtonActionPerformed(java.awt.event.ActionEvent evt) {\r         URL analyzeImageUrl;\r         \r         // Clear out the previous image, response, and caption, if any.\r         analyzeImage.setIcon(new ImageIcon());\r         analyzeCaptionLabel.setText(\"\");\r         analyzeResponseTextArea.setText(\"\");\r         \r         // Display the image specified in the text box.\r         try {\r             analyzeImageUrl = new URL(analyzeImageUriTextBox.getText());\r             BufferedImage bImage = ImageIO.read(analyzeImageUrl);\r             scaleAndShowImage(bImage, analyzeImage);\r         } catch(IOException e) {\r             analyzeResponseTextArea.setText(\"Error loading Analyze image: \" + e.getMessage());\r             return;\r         }\r         \r         // Analyze the image.\r         JSONObject jsonObj = AnalyzeImage(analyzeImageUrl.toString());\r         \r         // A return of null indicates failure.\r         if (jsonObj == null) {\r             return;\r         }\r         \r         // Format and display the JSON response.\r         analyzeResponseTextArea.setText(jsonObj.toString(2));\r                 \r         // Extract the text and confidence from the first caption in the description object.\r         if (jsonObj.has(\"description\") && jsonObj.getJSONObject(\"description\").has(\"captions\")) {\r \r             JSONObject jsonCaption = jsonObj.getJSONObject(\"description\").getJSONArray(\"captions\").getJSONObject(0);\r             \r             if (jsonCaption.has(\"text\") && jsonCaption.has(\"confidence\")) {\r                 \r                 analyzeCaptionLabel.setText(\"Caption: \" + jsonCaption.getString(\"text\") + \r                         \" (confidence: \" + jsonCaption.getDouble(\"confidence\") + \").\");\r             }\r         }\r     }\r ```\r \r ### <a name=\"analyze-step-2-add-the-wrapper-for-the-rest-api-call\"></a>分析步骤 2：为 REST API 调用添加包装器\r \r AnalyzeImage 方法包装进行图像分析的 REST API 调用。 该方法返回 JSONObject 对图像进行描述，或者在出错的情况下返回 null。\r \r 复制 AnalyzeImage 方法并将其粘贴到 analyzeImageButtonActionPerformed 方法下方。\r \r ```java\r     /**\r      - Encapsulates the Microsoft Cognitive Services REST API call to analyze an image.\r      - @param imageUrl: The string URL of the image to analyze.\r      - @return: A JSONObject describing the image, or null if a runtime error occurs.\r      */\r     private JSONObject AnalyzeImage(String imageUrl) {\r         try (CloseableHttpClient httpclient = HttpClientBuilder.create().build())\r         {\r             // Create the URI to access the REST API call for Analyze Image.\r             String uriString = uriBasePreRegion + \r                     String.valueOf(subscriptionRegionComboBox.getSelectedItem()) + \r                     uriBasePostRegion + uriBaseAnalyze;\r             URIBuilder builder = new URIBuilder(uriString);\r \r             // Request parameters. All of them are optional.\r             builder.setParameter(\"visualFeatures\", \"Categories,Description,Color,Adult\");\r             builder.setParameter(\"language\", \"en\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = builder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKeyTextField.getText());\r \r             // Request body.\r             StringEntity reqEntity = new StringEntity(\"{\\\"url\\\":\\\"\" + imageUrl + \"\\\"}\");\r             request.setEntity(reqEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpclient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             // If we got a response, parse it and display it.\r             if (entity != null)\r             {\r                 // Return the JSONObject.\r                 String jsonString = EntityUtils.toString(entity);\r                 return new JSONObject(jsonString);\r             } else {\r                 // No response. Return null.\r                 return null;\r             }\r         }\r         catch (Exception e)\r         {\r             // Display error message.\r             System.out.println(e.getMessage());\r             return null;\r         }\r     }\r  ```\r \r ### <a name=\"analyze-step-3-run-the-application\"></a>分析步骤 3：运行应用程序\r \r 按 F6 运行应用程序。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 输入要分析的图像的 URL，然后单击“分析图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"recognize-a-landmark\"></a>识别地标\r \r 计算机视觉的地标功能可以分析图像中是否存在自然的和人工的地标，例如山脉或著名建筑。 分析完以后，地标功能会返回一个 JSON 对象，其中标识了图像中发现的地标。\r \r 若要完成教程应用程序的地标功能，请执行以下步骤：\r \r ### <a name=\"landmark-step-1-add-the-event-handler-code-for-the-form-button\"></a>地标步骤 1：为窗体按钮添加事件处理程序代码\r \r landmarkImageButtonActionPerformed 事件处理程序方法会清除窗体，显示在 URL 中指定的图像，然后调用 LandmarkImage 方法进行图像分析。 当 LandmarkImage 返回时，该方法会在“响应”文本区域显示格式化的 JSON 响应，然后从 JSONObject 提取第一个地标名称，并将其连同指示地标已正确标识的置信水平显示在窗口中。\r \r 复制以下代码并将其粘贴到 landmarkImageButtonActionPerformed 方法中。\r \r > [!NOTE]\r > NetBeans 不允许将内容粘贴到方法定义行 (```private void```) 或该方法的右大括号处。 若要复制代码，请复制方法定义和右大括号之间的行，然后将其通过粘贴方式覆盖方法的内容。\r \r ```java\r     private void landmarkImageButtonActionPerformed(java.awt.event.ActionEvent evt) {\r         URL landmarkImageUrl;\r         \r         // Clear out the previous image, response, and caption, if any.\r         landmarkImage.setIcon(new ImageIcon());\r         landmarkCaptionLabel.setText(\"\");\r         landmarkResponseTextArea.setText(\"\");\r         \r         // Display the image specified in the text box.\r         try {\r             landmarkImageUrl = new URL(landmarkImageUriTextBox.getText());\r             BufferedImage bImage = ImageIO.read(landmarkImageUrl);\r             scaleAndShowImage(bImage, landmarkImage);\r         } catch(IOException e) {\r             landmarkResponseTextArea.setText(\"Error loading Landmark image: \" + e.getMessage());\r             return;\r         }\r         \r         // Identify the landmark in the image.\r         JSONObject jsonObj = LandmarkImage(landmarkImageUrl.toString());\r         \r         // A return of null indicates failure.\r         if (jsonObj == null) {\r             return;\r         }\r         \r         // Format and display the JSON response.\r         landmarkResponseTextArea.setText(jsonObj.toString(2));\r                 \r         // Extract the text and confidence from the first caption in the description object.\r         if (jsonObj.has(\"result\") && jsonObj.getJSONObject(\"result\").has(\"landmarks\")) {\r \r             JSONObject jsonCaption = jsonObj.getJSONObject(\"result\").getJSONArray(\"landmarks\").getJSONObject(0);\r             \r             if (jsonCaption.has(\"name\") && jsonCaption.has(\"confidence\")) {\r \r                 landmarkCaptionLabel.setText(\"Caption: \" + jsonCaption.getString(\"name\") + \r                         \" (confidence: \" + jsonCaption.getDouble(\"confidence\") + \").\");\r             }\r         }\r     }\r ```\r \r ### <a name=\"landmark-step-2-add-the-wrapper-for-the-rest-api-call\"></a>地标步骤 2：为 REST API 调用添加包装器\r \r LandmarkImage 方法包装进行图像分析的 REST API 调用。 该方法返回 JSONObject 对图像中找到的地标进行描述，或者在出错的情况下返回 null。\r \r 复制 LandmarkImage 方法并将其粘贴到 landmarkImageButtonActionPerformed 方法下方。\r \r ```java\r      /**\r      - Encapsulates the Microsoft Cognitive Services REST API call to identify a landmark in an image.\r      - @param imageUrl: The string URL of the image to process.\r      - @return: A JSONObject describing the image, or null if a runtime error occurs.\r      */\r     private JSONObject LandmarkImage(String imageUrl) {\r         try (CloseableHttpClient httpclient = HttpClientBuilder.create().build())\r         {\r             // Create the URI to access the REST API call to identify a Landmark in an image.\r             String uriString = uriBasePreRegion + \r                     String.valueOf(subscriptionRegionComboBox.getSelectedItem()) + \r                     uriBasePostRegion + uriBaseLandmark;\r             URIBuilder builder = new URIBuilder(uriString);\r \r             // Request parameters. All of them are optional.\r             builder.setParameter(\"visualFeatures\", \"Categories,Description,Color\");\r             builder.setParameter(\"language\", \"en\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = builder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKeyTextField.getText());\r \r             // Request body.\r             StringEntity reqEntity = new StringEntity(\"{\\\"url\\\":\\\"\" + imageUrl + \"\\\"}\");\r             request.setEntity(reqEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpclient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             // If we got a response, parse it and display it.\r             if (entity != null)\r             {\r                 // Return the JSONObject.\r                 String jsonString = EntityUtils.toString(entity);\r                 return new JSONObject(jsonString);\r             } else {\r                 // No response. Return null.\r                 return null;\r             }\r         }\r         catch (Exception e)\r         {\r             // Display error message.\r             System.out.println(e.getMessage());\r             return null;\r         }\r     }\r ```\r \r ### <a name=\"landmark-step-3-run-the-application\"></a>地标步骤 3：运行应用程序\r \r 按 F6 运行应用程序。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 单击“地标”选项卡，输入地标图像的 URL，然后单击“分析图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"recognize-celebrities\"></a>识别名人\r \r 计算机视觉的名人功能分析图像中是否存在名人。 分析完以后，名人功能会返回一个 JSON 对象，其中标识了图像中发现的名人。\r \r 若要完成教程应用程序的名人功能，请执行以下步骤：\r \r ### <a name=\"celebrities-step-1-add-the-event-handler-code-for-the-form-button\"></a>名人步骤 1：为窗体按钮添加事件处理程序代码\r \r celebritiesImageButtonActionPerformed 事件处理程序方法会清除窗体，显示在 URL 中指定的图像，然后调用 CelebritiesImage 方法进行图像分析。 当 CelebritiesImage 返回时，该方法会在“响应”文本区域显示格式化的 JSON 响应，然后从 JSONObject 提取第一个名人名称，并将该名称连同指示名人已正确标识的置信水平显示在窗口中。\r \r 复制以下代码并将其粘贴到 celebritiesImageButtonActionPerformed 方法中。\r \r > [!NOTE]\r > NetBeans 不允许将内容粘贴到方法定义行 (```private void```) 或该方法的右大括号处。 若要复制代码，请复制方法定义和右大括号之间的行，然后将其通过粘贴方式覆盖方法的内容。\r \r ```java\r     private void celebritiesImageButtonActionPerformed(java.awt.event.ActionEvent evt) {\r         URL celebritiesImageUrl;\r         \r         // Clear out the previous image, response, and caption, if any.\r         celebritiesImage.setIcon(new ImageIcon());\r         celebritiesCaptionLabel.setText(\"\");\r         celebritiesResponseTextArea.setText(\"\");\r         \r         // Display the image specified in the text box.\r         try {\r             celebritiesImageUrl = new URL(celebritiesImageUriTextBox.getText());\r             BufferedImage bImage = ImageIO.read(celebritiesImageUrl);\r             scaleAndShowImage(bImage, celebritiesImage);\r         } catch(IOException e) {\r             celebritiesResponseTextArea.setText(\"Error loading Celebrity image: \" + e.getMessage());\r             return;\r         }\r         \r         // Identify the celebrities in the image.\r         JSONObject jsonObj = CelebritiesImage(celebritiesImageUrl.toString());\r         \r         // A return of null indicates failure.\r         if (jsonObj == null) {\r             return;\r         }\r         \r         // Format and display the JSON response.\r         celebritiesResponseTextArea.setText(jsonObj.toString(2));\r                 \r         // Extract the text and confidence from the first caption in the description object.\r         if (jsonObj.has(\"result\") && jsonObj.getJSONObject(\"result\").has(\"celebrities\")) {\r \r             JSONObject jsonCaption = jsonObj.getJSONObject(\"result\").getJSONArray(\"celebrities\").getJSONObject(0);\r             \r             if (jsonCaption.has(\"name\") && jsonCaption.has(\"confidence\")) {\r \r                 celebritiesCaptionLabel.setText(\"Caption: \" + jsonCaption.getString(\"name\") + \r                         \" (confidence: \" + jsonCaption.getDouble(\"confidence\") + \").\");\r             }\r         }\r     }\r ```\r \r ### <a name=\"celebrities-step-2-add-the-wrapper-for-the-rest-api-call\"></a>名人步骤 2：为 REST API 调用添加包装器\r \r CelebritiesImage 方法包装进行图像分析的 REST API 调用。 该方法返回 JSONObject 对图像中找到的名人进行描述，或者在出错的情况下返回 null。\r \r 复制 CelebritiesImage 方法并将其粘贴到 celebritiesImageButtonActionPerformed 方法下方。\r \r ```java\r      /**\r      - Encapsulates the Microsoft Cognitive Services REST API call to identify celebrities in an image.\r      - @param imageUrl: The string URL of the image to process.\r      - @return: A JSONObject describing the image, or null if a runtime error occurs.\r      */\r     private JSONObject CelebritiesImage(String imageUrl) {\r         try (CloseableHttpClient httpclient = HttpClientBuilder.create().build())\r         {\r             // Create the URI to access the REST API call to identify celebrities in an image.\r             String uriString = uriBasePreRegion + \r                     String.valueOf(subscriptionRegionComboBox.getSelectedItem()) + \r                     uriBasePostRegion + uriBaseCelebrities;\r             URIBuilder builder = new URIBuilder(uriString);\r \r             // Request parameters. All of them are optional.\r             builder.setParameter(\"visualFeatures\", \"Categories,Description,Color\");\r             builder.setParameter(\"language\", \"en\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = builder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKeyTextField.getText());\r \r             // Request body.\r             StringEntity reqEntity = new StringEntity(\"{\\\"url\\\":\\\"\" + imageUrl + \"\\\"}\");\r             request.setEntity(reqEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpclient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             // If we got a response, parse it and display it.\r             if (entity != null)\r             {\r                 // Return the JSONObject.\r                 String jsonString = EntityUtils.toString(entity);\r                 return new JSONObject(jsonString);\r             } else {\r                 // No response. Return null.\r                 return null;\r             }\r         }\r         catch (Exception e)\r         {\r             // Display error message.\r             System.out.println(e.getMessage());\r             return null;\r         }\r     }\r ```\r \r ### <a name=\"celebrities-step-3-run-the-application\"></a>名人步骤 3：运行应用程序\r \r 按 F6 运行应用程序。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 单击“名人”选项卡，输入名人图像的 URL，然后单击“分析图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"intelligently-generate-a-thumbnail\"></a>以智能方式生成缩略图\r \r 计算机视觉的缩略图功能根据图像生成缩略图。 缩略图功能可以使用智能裁剪功能来标识图像中的感兴趣区域，使缩略图聚焦在该区域，目的是生成更美的缩略图。\r \r 若要完成教程应用程序的缩略图功能，请执行以下步骤：\r \r ### <a name=\"thumbnail-step-1-add-the-event-handler-code-for-the-form-button\"></a>缩略图步骤 1：为窗体按钮添加事件处理程序代码\r \r thumbnailImageButtonActionPerformed 事件处理程序方法会清除窗体，显示在 URL 中指定的图像，然后调用 getThumbnailImage 方法创建缩略图。 当 getThumbnailImage 返回时，该方法显示生成的缩略图。\r \r 复制以下代码并将其粘贴到 thumbnailImageButtonActionPerformed 方法中。\r \r > [!NOTE]\r > NetBeans 不允许将内容粘贴到方法定义行 (```private void```) 或该方法的右大括号处。 若要复制代码，请复制方法定义和右大括号之间的行，然后将其通过粘贴方式覆盖方法的内容。\r \r ```java\r     private void thumbnailImageButtonActionPerformed(java.awt.event.ActionEvent evt) {\r         URL thumbnailImageUrl;\r         JSONObject jsonError[] = new JSONObject[1];\r         \r         // Clear out the previous image, response, and thumbnail, if any.\r         thumbnailSourceImage.setIcon(new ImageIcon());\r         thumbnailResponseTextArea.setText(\"\");\r         thumbnailImage.setIcon(new ImageIcon());\r \r         // Display the image specified in the text box.\r         try {\r             thumbnailImageUrl = new URL(thumbnailImageUriTextBox.getText());\r             BufferedImage bImage = ImageIO.read(thumbnailImageUrl);\r             scaleAndShowImage(bImage, thumbnailSourceImage);\r         } catch(IOException e) {\r             thumbnailResponseTextArea.setText(\"Error loading image to thumbnail: \" + e.getMessage());\r             return;\r         }\r         \r         // Get the thumbnail for the image.\r         BufferedImage thumbnail = getThumbnailImage(thumbnailImageUrl.toString(), jsonError);\r         \r         // A non-null value indicates error.\r         if (jsonError[0] != null) {\r             // Format and display the JSON error.\r             thumbnailResponseTextArea.setText(jsonError[0].toString(2));\r             return;\r         }\r         \r         // Display the thumbnail.\r         if (thumbnail != null) {\r             scaleAndShowImage(thumbnail, thumbnailImage);\r         }\r     }\r ```\r \r ### <a name=\"thumbnail-step-2-add-the-wrapper-for-the-rest-api-call\"></a>缩略图步骤 2：为 REST API 调用添加包装器\r \r getThumbnailImage 方法包装进行图像分析的 REST API 调用。 该方法返回 BufferedImage，其中包含缩略图，或者在出错的情况下返回 null。 错误消息会返回到 jsonError 字符串数组的第一个元素中。\r \r 复制以下 getThumbnailImage 方法并将其粘贴到 thumbnailImageButtonActionPerformed 方法下方。\r \r ```java\r      /**\r      - Encapsulates the Microsoft Cognitive Services REST API call to create a thumbnail for an image.\r      - @param imageUrl: The string URL of the image to process.\r      - @return: A BufferedImage containing the thumbnail, or null if a runtime error occurs. In the case\r      - of an error, the error message will be returned in the first element of the jsonError string array.\r      */\r     private BufferedImage getThumbnailImage(String imageUrl, JSONObject[] jsonError) {\r         try (CloseableHttpClient httpclient = HttpClientBuilder.create().build())\r         {\r             // Create the URI to access the REST API call to identify celebrities in an image.\r             String uriString = uriBasePreRegion + \r                     String.valueOf(subscriptionRegionComboBox.getSelectedItem()) + \r                     uriBasePostRegion + uriBaseThumbnail;\r             URIBuilder uriBuilder = new URIBuilder(uriString);\r \r             // Request parameters.\r             uriBuilder.setParameter(\"width\", \"100\");\r             uriBuilder.setParameter(\"height\", \"150\");\r             uriBuilder.setParameter(\"smartCropping\", \"true\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = uriBuilder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKeyTextField.getText());\r \r             // Request body.\r             StringEntity requestEntity = new StringEntity(\"{\\\"url\\\":\\\"\" + imageUrl + \"\\\"}\");\r             request.setEntity(requestEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpclient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             // Check for success.\r             if (response.getStatusLine().getStatusCode() == 200)\r             {\r                 // Return the thumbnail.\r                 return ImageIO.read(entity.getContent());\r             }\r             else\r             {\r                 // Format and display the JSON error message.\r                 String jsonString = EntityUtils.toString(entity);\r                 jsonError[0] = new JSONObject(jsonString);\r                 return null;\r             }\r         }\r         catch (Exception e)\r         {\r             String errorMessage = e.getMessage();\r             System.out.println(errorMessage);\r             jsonError[0] = new JSONObject(errorMessage);\r             return null;\r         }\r     }\r ```\r \r ### <a name=\"thumbnail-step-3-run-the-application\"></a>缩略图步骤 3：运行应用程序\r \r 按 F6 运行应用程序。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 单击“缩略图”选项卡，输入图像的 URL，然后单击“生成缩略图”按钮对图像进行分析并查看结果。\r \r ## <a name=\"read-printed-text-ocr\"></a>读取印刷体文本 (OCR)\r \r 计算机视觉的光学字符识别 (OCR) 功能分析图像中是否有印刷体文本。 分析完以后，OCR 会返回一个 JSON 对象，其中包含图像中的文本和文本位置。\r \r 若要完成教程应用程序的 OCR 功能，请执行以下步骤：\r \r ### <a name=\"ocr-step-1-add-the-event-handler-code-for-the-form-button\"></a>OCR 步骤 1：为窗体按钮添加事件处理程序代码\r \r ocrImageButtonActionPerformed 事件处理程序方法会清除窗体，显示在 URL 中指定的图像，然后调用 OcrImage 方法进行图像分析。 当 OcrImage 返回时，该方法会在“响应”文本区域以格式化 JSON 的方式显示检测到的文本。\r \r 复制以下代码并将其粘贴到 ocrImageButtonActionPerformed 方法中。\r \r > [!NOTE]\r > NetBeans 不允许将内容粘贴到方法定义行 (```private void```) 或该方法的右大括号处。 若要复制代码，请复制方法定义和右大括号之间的行，然后将其通过粘贴方式覆盖方法的内容。\r \r ```java\r     private void ocrImageButtonActionPerformed(java.awt.event.ActionEvent evt) {\r         URL ocrImageUrl;\r         \r         // Clear out the previous image, response, and caption, if any.\r         ocrImage.setIcon(new ImageIcon());\r         ocrResponseTextArea.setText(\"\");\r         \r         // Display the image specified in the text box.\r         try {\r             ocrImageUrl = new URL(ocrImageUriTextBox.getText());\r             BufferedImage bImage = ImageIO.read(ocrImageUrl);\r             scaleAndShowImage(bImage, ocrImage);\r         } catch(IOException e) {\r             ocrResponseTextArea.setText(\"Error loading OCR image: \" + e.getMessage());\r             return;\r         }\r         \r         // Read the text in the image.\r         JSONObject jsonObj = OcrImage(ocrImageUrl.toString());\r         \r         // A return of null indicates failure.\r         if (jsonObj == null) {\r             return;\r         }\r         \r         // Format and display the JSON response.\r         ocrResponseTextArea.setText(jsonObj.toString(2));\r     }\r ```\r \r ### <a name=\"ocr-step-2-add-the-wrapper-for-the-rest-api-call\"></a>OCR 步骤 2：为 REST API 调用添加包装器\r \r OcrImage 方法包装进行图像分析的 REST API 调用。 该方法返回从调用返回的 JSON 数据的 JSONObject，或者在出现错误的情况下返回 null。\r \r 复制以下 OcrImage 方法并将其粘贴到 ocrImageButtonActionPerformed 方法下方。\r \r ```java\r      /**\r      - Encapsulates the Microsoft Cognitive Services REST API call to read text in an image.\r      - @param imageUrl: The string URL of the image to process.\r      - @return: A JSONObject describing the image, or null if a runtime error occurs.\r      */\r     private JSONObject OcrImage(String imageUrl) {\r         try (CloseableHttpClient httpclient = HttpClientBuilder.create().build())\r         {\r             // Create the URI to access the REST API call to read text in an image.\r             String uriString = uriBasePreRegion + \r                     String.valueOf(subscriptionRegionComboBox.getSelectedItem()) + \r                     uriBasePostRegion + uriBaseOcr;\r             URIBuilder uriBuilder = new URIBuilder(uriString);\r \r             // Request parameters.\r             uriBuilder.setParameter(\"language\", \"unk\");\r             uriBuilder.setParameter(\"detectOrientation \", \"true\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = uriBuilder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKeyTextField.getText());\r \r             // Request body.\r             StringEntity reqEntity = new StringEntity(\"{\\\"url\\\":\\\"\" + imageUrl + \"\\\"}\");\r             request.setEntity(reqEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpclient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             // If we got a response, parse it and display it.\r             if (entity != null)\r             {\r                 // Return the JSONObject.\r                 String jsonString = EntityUtils.toString(entity);\r                 return new JSONObject(jsonString);\r             } else {\r                 // No response. Return null.\r                 return null;\r             }\r         }\r         catch (Exception e)\r         {\r             // Display error message.\r             System.out.println(e.getMessage());\r             return null;\r         }\r     }\r ```\r \r ### <a name=\"ocr-step-3-run-the-application\"></a>OCR 步骤 3：运行应用程序\r \r 按 F6 运行应用程序。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 单击“OCR”选项卡，输入印刷体文本图像的 URL，然后单击“读取图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"read-handwritten-text-handwriting-recognition\"></a>读取手写文本（手写识别）\r \r 计算机视觉的手写识别功能分析图像中是否有手写文本。 分析完以后，手写识别功能会返回一个 JSON 对象，其中包含图像中的文本和文本位置。\r \r 若要完成教程应用程序的手写识别功能，请执行以下步骤：\r \r ### <a name=\"handwriting-recognition-step-1-add-the-event-handler-code-for-the-form-button\"></a>手写识别步骤 1：为窗体按钮添加事件处理程序代码\r \r handwritingImageButtonActionPerformed 事件处理程序方法会清除窗体，显示在 URL 中指定的图像，然后调用 HandwritingImage 方法进行图像分析。 当 HandwritingImage 返回时，该方法会在“响应”文本区域以格式化 JSON 的方式显示检测到的文本。\r \r 复制以下代码并将其粘贴到 handwritingImageButtonActionPerformed 方法中。\r \r > [!NOTE]\r > NetBeans 不允许将内容粘贴到方法定义行 (```private void```) 或该方法的右大括号处。 若要复制代码，请复制方法定义和右大括号之间的行，然后将其通过粘贴方式覆盖方法的内容。\r \r ```java\r     private void handwritingImageButtonActionPerformed(java.awt.event.ActionEvent evt) {\r         URL handwritingImageUrl;\r         \r         // Clear out the previous image, response, and caption, if any.\r         handwritingImage.setIcon(new ImageIcon());\r         handwritingResponseTextArea.setText(\"\");\r         \r         // Display the image specified in the text box.\r         try {\r             handwritingImageUrl = new URL(handwritingImageUriTextBox.getText());\r             BufferedImage bImage = ImageIO.read(handwritingImageUrl);\r             scaleAndShowImage(bImage, handwritingImage);\r         } catch(IOException e) {\r             handwritingResponseTextArea.setText(\"Error loading Handwriting image: \" + e.getMessage());\r             return;\r         }\r         \r         // Read the text in the image.\r         JSONObject jsonObj = HandwritingImage(handwritingImageUrl.toString());\r         \r         // A return of null indicates failure.\r         if (jsonObj == null) {\r             return;\r         }\r         \r         // Format and display the JSON response.\r         handwritingResponseTextArea.setText(jsonObj.toString(2));\r     }\r ```\r \r ### <a name=\"handwriting-recognition-step-2-add-the-wrapper-for-the-rest-api-call\"></a>手写识别步骤 2：为 REST API 调用添加包装器\r \r HandwritingImage 方法包装两个进行图像分析所需的 REST API 调用。 由于手写识别很耗时，因此使用一个两步过程。 第一个调用提交需处理的图像；第二个调用检索处理完成时检测到的文本。\r \r 检索文本后，HandwritingImage 方法返回 JSONObject 对文本和文本位置进行说明，或者在出错的情况下返回 null。\r \r 复制以下 HandwritingImage 方法并将其粘贴到 handwritingImageButtonActionPerformed 方法下方。\r \r ```java\r      /**\r      - Encapsulates the Microsoft Cognitive Services REST API call to read handwritten text in an image.\r      - @param imageUrl: The string URL of the image to process.\r      - @return: A JSONObject describing the image, or null if a runtime error occurs.\r      */\r     private JSONObject HandwritingImage(String imageUrl) {\r         try (CloseableHttpClient textClient = HttpClientBuilder.create().build();\r              CloseableHttpClient resultClient = HttpClientBuilder.create().build())\r         {\r             // Create the URI to access the REST API call to read text in an image.\r             String uriString = uriBasePreRegion + \r                     String.valueOf(subscriptionRegionComboBox.getSelectedItem()) + \r                     uriBasePostRegion + uriBaseHandwriting;\r             URIBuilder uriBuilder = new URIBuilder(uriString);\r             \r             // Request parameters.\r             uriBuilder.setParameter(\"handwriting\", \"true\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = uriBuilder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKeyTextField.getText());\r \r             // Request body.\r             StringEntity reqEntity = new StringEntity(\"{\\\"url\\\":\\\"\" + imageUrl + \"\\\"}\");\r             request.setEntity(reqEntity);\r \r             // Execute the REST API call and get the response.\r             HttpResponse textResponse = textClient.execute(request);\r             \r             // Check for success.\r             if (textResponse.getStatusLine().getStatusCode() != 202) {\r                 // An error occured. Return the JSON error message.\r                 HttpEntity entity = textResponse.getEntity();\r                 String jsonString = EntityUtils.toString(entity);\r                 return new JSONObject(jsonString);\r             }\r             \r             String operationLocation = null;\r \r             // The 'Operation-Location' in the response contains the URI to retrieve the recognized text.\r             Header[] responseHeaders = textResponse.getAllHeaders();\r             for(Header header : responseHeaders) {\r                 if(header.getName().equals(\"Operation-Location\"))\r                 {\r                     // This string is the URI where you can get the text recognition operation result.\r                     operationLocation = header.getValue();\r                     break;\r                 }\r             }\r             \r             // NOTE: The response may not be immediately available. Handwriting recognition is an\r             // async operation that can take a variable amount of time depending on the length\r             // of the text you want to recognize. You may need to wait or retry this operation.\r             //\r             // This example checks once per second for ten seconds.\r             \r             JSONObject responseObj = null;\r             int i = 0;\r             do {\r                 // Wait one second.\r                 Thread.sleep(1000);\r                 \r                 // Check to see if the operation completed.\r                 HttpGet resultRequest = new HttpGet(operationLocation);\r                 resultRequest.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKeyTextField.getText());\r                 HttpResponse resultResponse = resultClient.execute(resultRequest);\r                 HttpEntity responseEntity = resultResponse.getEntity();\r                 if (responseEntity != null)\r                 {\r                     // Get the JSON response.\r                     String jsonString = EntityUtils.toString(responseEntity);\r                     responseObj = new JSONObject(jsonString);\r                 }\r             }\r             while (i < 10 && responseObj != null &&\r                     !responseObj.getString(\"status\").equalsIgnoreCase(\"Succeeded\"));\r             \r             // If the operation completed, return the JSON object.\r             if (responseObj != null) {\r                 return responseObj;\r             } else {\r                 // Return null for timeout error.\r                 System.out.println(\"Timeout error.\");\r                 return null;\r             }\r         }\r         catch (Exception e)\r         {\r             // Display error message.\r             System.out.println(e.getMessage());\r             return null;\r         }\r     }\r ```\r \r ### <a name=\"handwriting-recognition-step-3-run-the-application\"></a>手写识别步骤 3：运行应用程序\r \r 若要运行应用程序，请按 F6。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 单击“读取手写文本”选项卡，输入手写文本图像的 URL，然后单击“读取图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r - [计算机视觉 API C&#35; 教程](CSharpTutorial.md)\r - [计算机视觉 API Python 教程](PythonTutorial.md)\r \r "}