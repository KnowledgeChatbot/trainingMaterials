{"Title":"Azure API 管理转换策略","Description":"了解可在 Azure API 管理中使用的转换策略。","Content":"# <a name=\"api-management-transformation-policies\"></a>API 管理转换策略\r 本主题提供以下 API 管理策略的参考。 有关添加和配置策略的信息，请参阅 [API 管理中的策略](http://go.microsoft.com/fwlink/?LinkID=398186)。  \r   \r ##  <a name=\"TransformationPolicies\"></a> 转换策略  \r   \r -   [将 JSON 转换为 XML](./api-management-transformation-policies.md#ConvertJSONtoXML) - 将请求或响应正文从 JSON 转换为 XML。  \r   \r -   [将 XML 转换为 JSON](./api-management-transformation-policies.md#ConvertXMLtoJSON) - 将请求或响应正文从 XML 转换为 JSON。  \r   \r -   [查找并替换正文中的字符串](./api-management-transformation-policies.md#Findandreplacestringinbody) - 查找请求或响应子字符串，并将其替换为不同的子字符串。  \r   \r -   [在内容中屏蔽 URL](./api-management-transformation-policies.md#MaskURLSContent) - 重写（屏蔽）响应正文中的链接，使其通过网关指向等效的链接。  \r   \r -   [设置后端服务](./api-management-transformation-policies.md#SetBackendService) - 更改传入请求的后端服务。  \r   \r -   [设置正文](./api-management-transformation-policies.md#SetBody) - 设置传入和传出请求的消息正文。  \r   \r -   [设置 HTTP 标头](./api-management-transformation-policies.md#SetHTTPheader) - 向现有的响应和/或请求标头赋值，或者添加新的响应和/或请求标头。  \r   \r -   [设置查询字符串参数](./api-management-transformation-policies.md#SetQueryStringParameter) - 添加、删除请求查询字符串参数或替换其值。  \r   \r -   [重写 URL](./api-management-transformation-policies.md#RewriteURL) - 将请求 URL 从其公用格式转换为 Web 服务所需的格式。  \r   \r -   [使用 XSLT 转换 XML](./api-management-transformation-policies.md#XSLTransform) - 在请求或响应正文中将 XSL 转换应用到 XML。  \r   \r ##  <a name=\"ConvertJSONtoXML\">将 JSON 转换为 XML</a>  \r  `json-to-xml` 策略将请求或响应正文从 JSON 转换为 XML。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <json-to-xml apply=\"always | content-type-json\" consider-accept-header=\"true | false\"/>  \r ```  \r   \r ### <a name=\"example\"></a>示例  \r   \r ```xml  \r <policies>  \r     <inbound>  \r         <base />  \r     </inbound>  \r     <outbound>  \r         <base />  \r         <json-to-xml apply=\"always\" consider-accept-header=\"false\" />  \r     </outbound>  \r </policies>  \r ```  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |json-to-xml|根元素。|是|  \r   \r ### <a name=\"attributes\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |apply|属性必须设置为以下值之一。<br /><br /> -   always - 始终应用转换。<br />-   content-type-json - 仅在响应的 Content-Type 标头指示存在 JSON 的情况下进行转换。|是|不适用|  \r |consider-accept-header|属性必须设置为以下值之一。<br /><br /> -   true - 如果在请求的 Accept 标头中请求了 JSON，则应用转换。<br />-   false - 始终应用转换。|否|true|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站、错误时  \r   \r -   **策略范围：**全局、产品、API、操作  \r   \r ##  <a name=\"ConvertXMLtoJSON\"></a> 将 XML 转换为 JSON  \r  `xml-to-json` 策略将请求或响应正文从 XML 转换为 JSON。 此策略可以用来根据仅用 XML 的后端 Web 服务来提升 API。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <xml-to-json kind=\"javascript-friendly | direct\" apply=\"always | content-type-xml\" consider-accept-header=\"true | false\"/>  \r ```  \r   \r ### <a name=\"example\"></a>示例  \r   \r ```xml  \r <policies>  \r     <inbound>  \r         <base />  \r     </inbound>  \r     <outbound>  \r         <base />  \r         <xml-to-json kind=\"direct\" apply=\"always\" consider-accept-header=\"false\" />  \r     </outbound>  \r </policies>  \r ```  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |xml-to-json|根元素。|是|  \r   \r ### <a name=\"attributes\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |kind|属性必须设置为以下值之一。<br /><br /> -   javascript-friendly - 转换后的 JSON 具有 JavaScript 开发人员熟知的形式。<br />-   direct - 转换后的 JSON 反映了原始 XML 文档的结构。|是|不适用|  \r |apply|属性必须设置为以下值之一。<br /><br /> -   always - 始终转换。<br />-   content-type-xml - 仅在响应的 Content-Type 标头指示存在 XML 的情况下进行转换。|是|不适用|  \r |consider-accept-header|属性必须设置为以下值之一。<br /><br /> -   true - 如果在请求的 Accept 标头中请求了 XML，则应用转换。<br />-   false - 始终应用转换。|否|true|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站、错误时  \r   \r -   **策略范围：**全局、产品、API、操作  \r   \r ##  <a name=\"Findandreplacestringinbody\"></a> 在正文中查找并替换字符串  \r  `find-and-replace` 策略查找请求或响应子字符串并将其替换为不同的子字符串。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <find-and-replace from=\"what to replace\" to=\"replacement\" />  \r ```  \r   \r ### <a name=\"example\"></a>示例  \r   \r ```xml  \r <find-and-replace from=\"notebook\" to=\"laptop\" />  \r ```  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |find-and-replace|根元素。|是|  \r   \r ### <a name=\"attributes\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |from|要搜索的字符串。|是|不适用|  \r |to|替换字符串。 指定一个零长度的替换字符串，以便删除搜索字符串。|是|不适用|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站、后端、错误时  \r   \r -   **策略范围：**全局、产品、API、操作  \r   \r ##  <a name=\"MaskURLSContent\"></a> 在内容中屏蔽 URL  \r  `redirect-content-urls` 策略重写（屏蔽）响应正文中的链接，使其通过网关指向等效的链接。 在出站节中用于重写响应正文链接，使之指向网关。 在入站节中使用，以便获得相反的效果。  \r   \r > [!NOTE]\r >  此策略不更改任何标头值，例如 `Location` 标头值。 若要更改标头值，请使用 [set-header](./api-management-transformation-policies.md#SetHTTPheader) 策略。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <redirect-content-urls />  \r ```  \r   \r ### <a name=\"example\"></a>示例  \r   \r ```xml  \r <redirect-content-urls />  \r ```  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |redirect-content-urls|根元素。|是|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站  \r   \r -   **策略范围：**全局、产品、API、操作  \r   \r ##  <a name=\"SetBackendService\"></a> 设置后端服务  \r  使用 `set-backend-service` 策略将传入请求重定向到一个后端，此后端不同于在 API 设置中为该操作指定的后端。 此策略将传入请求的后端服务基 URL 更改为在策略中指定的基 URL。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <set-backend-service base-url=\"base URL of the backend service\" />  \r ```  \r   \r ### <a name=\"example\"></a>示例  \r   \r ```xml  \r <policies>  \r     <inbound>  \r         <choose>  \r             <when condition=\"@(context.Request.Url.Query.GetValueOrDefault(\"version\") == \"2013-05\")\">  \r                 <set-backend-service base-url=\"http://contoso.com/api/8.2/\" />  \r             </when>  \r             <when condition=\"@(context.Request.Url.Query.GetValueOrDefault(\"version\") == \"2014-03\")\">  \r                 <set-backend-service base-url=\"http://contoso.com/api/9.1/\" />  \r             </when>  \r         </choose>  \r         <base />  \r     </inbound>  \r     <outbound>  \r         <base />  \r     </outbound>  \r </policies>  \r ```  \r 在此示例中，所设置的后端服务策略根据查询字符串中传递的版本值将请求路由到一个后端服务，该服务不同于在 API 中指定的服务。\r   \r 后端服务基 URL 最初派生自 API 设置。 因此，请求 URL `https://contoso.azure-api.cn/api/partners/15?version=2013-05&subscription-key=abcdef` 变为 `http://contoso.com/api/10.4/partners/15?version=2013-05&subscription-key=abcdef`，其中 `http://contoso.com/api/10.4/` 是在 API 设置中指定的后端服务 URL。  \r   \r 应用 [<choose\\>](./api-management-advanced-policies.md#choose) 策略语句时，后端服务基 URL 可能会再次更改为 `http://contoso.com/api/8.2` 或 `http://contoso.com/api/9.1`，具体取决于版本请求查询参数的值。 例如，如果值为 `\"2013-15\"`，最终请求 URL 将变为 `http://contoso.com/api/8.2/partners/15?version=2013-05&subscription-key=abcdef`。  \r   \r 如果需要进一步转换请求，可使用其他[转换策略](./api-management-transformation-policies.md#TransformationPolicies)。 例如，在将请求路由到特定于版本的后端以后，要删除版本查询参数，可以使用[设置查询字符串参数](./api-management-transformation-policies.md#SetQueryStringParameter)策略删除现在的冗余版本属性。  \r   \r ### <a name=\"example\"></a>示例  \r   \r ```xml  \r <policies>  \r     <inbound>  \r         <set-backend-service backend-id=\"my-sf-service\" sf-partition-key=\"@(context.Request.Url.Query.GetValueOrDefault(\"userId\",\"\")\" sf-replica-type=\"primary\" /> \r     </inbound>  \r     <outbound>  \r         <base />  \r     </outbound>  \r </policies>  \r ```  \r 在此示例中，策略使用 userId 查询字符串作为分区键并使用该分区的主要副本，将请求路由到 Service Fabric 后端。  \r \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |set-backend-service|根元素。|是|  \r   \r ### <a name=\"attributes\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |base-url|新的后端服务基 URL。|否|不适用|  \r |backend-id|要路由到的后端标识符。|否|不适用|  \r |sf-partition-key|只有在后端为 Service Fabric 服务且使用“backend-id”指定时才适用。 用于从名称解析服务中解析特定分区。|否|不适用|  \r |sf-replica-type|只有在后端为 Service Fabric 服务且使用“backend-id”指定时才适用。 控制请求是否应转到分区的主要副本或次要副本。 |否|不适用|    \r |sf-resolve-condition|只有在后端为 Service Fabric 服务时才适用。 确定对 Service Fabric 后端的调用是否针对新解析重复进行的条件。|否|不适用|    \r |sf-service-instance-name|只有在后端为 Service Fabric 服务时才适用。 允许在运行时更改服务实例。 |否|不适用|    \r \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、后端  \r   \r -   **策略范围：**全局、产品、API、操作  \r   \r ##  <a name=\"SetBody\"></a> 设置正文  \r  使用 `set-body` 策略设置传入和传出请求的消息正文。 可以使用 `context.Request.Body` 属性或 `context.Response.Body` 访问消息正文，具体取决于策略是在入站节中还是在出站节中。  \r   \r > [!IMPORTANT]\r >  请注意，默认情况下，当用户使用 `context.Request.Body` 或 `context.Response.Body` 访问消息正文时，原始的消息正文会丢失，必须将正文返回到表达式中，以便对其进行设置。 若要保留正文内容，请在访问消息时将 `preserveContent` 参数设置为 `true`。 如果 `preserveContent` 设置为 `true`，而表达式返回了不同的正文，则会使用返回的正文。  \r >   \r >  在使用 `set-body` 策略时，请注意以下事项。  \r >   \r >  -   若要使用 `set-body` 策略返回全新的或更新的正文，则不需将 `preserveContent` 设置为 `true`，因为是在显式提供全新的正文内容。  \r > -   将响应的内容保留在入站管道中并不合理，因为尚无响应。  \r > -   将请求的内容保留在出站管道中并不合理，因为请求此时已发送到后端。  \r > -   如果在没有消息正文的情况下使用此策略（例如在入站 GET 中使用），则会引发异常。  \r   \r  有关详细信息，请参阅[上下文变量](./api-management-policy-expressions.md#ContextVariables)表中的 `context.Request.Body`、`context.Response.Body`、`IMessage` 部分。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <set-body>new body value as text</set-body>  \r ```  \r   \r ### <a name=\"examples\"></a>示例  \r   \r #### <a name=\"literal-text-example\"></a>文字文本示例  \r   \r ```xml  \r <set-body>Hello world!</set-body>  \r ```  \r   \r #### <a name=\"example-accessing-the-body-as-a-string-note-that-we-are-preserving-the-original-request-body-so-that-we-can-access-it-later-in-the-pipeline\"></a>示例：访问字符串形式的正文。 请注意，我们会保留原始请求正文，以便稍后可以在管道中进行访问。\r   \r ```xml  \r <set-body>  \r @{   \r     string inBody = context.Request.Body.As<string>(preserveContent: true);   \r     if (inBody[0] =='c') {   \r         inBody[0] = 'm';   \r     }   \r     return inBody;   \r }  \r </set-body>  \r ```  \r   \r #### <a name=\"example-accessing-the-body-as-a-jobject-note-that-since-we-are-not-reserving-the-original-request-body-accesing-it-later-in-the-pipeline-will-result-in-an-exception\"></a>示例：访问 JObject 形式的正文。 请注意，由于我们不保留原始请求正文，稍后在管道进行访问会产生异常。  \r   \r ```xml  \r <set-body>   \r @{   \r     JObject inBody = context.Request.Body.As<JObject>();   \r     if (inBody.attribute == <tag>) {   \r         inBody[0] = 'm';   \r     }   \r     return inBody.ToString();   \r }   \r </set-body>  \r   \r ```  \r   \r #### <a name=\"filter-response-based-on-product\"></a>根据产品筛选响应  \r  以下示例演示了如何进行内容筛选，方法是：在使用 `Starter` 产品时删除从后端服务接收的响应中的数据元素。 \r   \r ```xml  \r <!-- Copy this snippet into the outbound section to remove a number of data elements from the response received from the backend service based on the name of the api product -->  \r <choose>  \r   <when condition=\"@(context.Response.StatusCode == 200 && context.Product.Name.Equals(\"Starter\"))\">  \r     <set-body>@{  \r         var response = context.Response.Body.As<JObject>();  \r         foreach (var key in new [] {\"minutely\", \"hourly\", \"daily\", \"flags\"}) {  \r           response.Property (key).Remove ();  \r         }  \r         return response.ToString();  \r       }  \r     </set-body>  \r   </when>  \r </choose>  \r ```  \r \r ### <a name=\"using-liquid-templates-with-set-body\"></a>将 Liquid 模板用于设置正文 \r 可将 `set-body` 策略配置为使用 [Liquid](https://shopify.github.io/liquid/basics/introduction/) 模板语言以转换请求或响应正文。 如需完全重设消息格式，则此模板非常有用。\r \r > [!IMPORTANT]\r > 在“C# 模式”下配置 `set-body` 策略中使用的 Liquid 的实现。 执行筛选之类的操作时这点尤为重要。 例如，使用日期筛选器需要使用 Pascal 大小写和 C# 日期格式，如：\r >\r > {{body.foo.startDateTime| Date:\"yyyyMMddTHH:mm:ddZ\"}}\r \r > [!IMPORTANT]\r > 为正确绑定到使用 Liquid 模板的 XML 正文，请使用 `set-header` 策略将 Content-Type 设置为 application/xml、text/xml 或任何以 +xml 结尾的类型；对于 JSON 正文，其必须是 application/json、text/json 或任何以 +json 结尾的类型。\r \r #### <a name=\"convert-json-to-soap-using-a-liquid-template\"></a>使用 Liquid 模板将 JSON 转换为 SOAP\r ```xml\r <set-body template=\"liquid\">\r     <soap:Envelope xmlns=\"http://tempuri.org/\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r         <soap:Body>\r             <GetOpenOrders>\r                 <cust>{{body.getOpenOrders.cust}}</cust>\r             </GetOpenOrders>\r         </soap:Body>\r     </soap:Envelope>\r </set-body>\r ```\r \r #### <a name=\"tranform-json-using-a-liquid-template\"></a>使用 Liquid 模板转换 JSON\r ```xml\r {\r \"order\": {\r     \"id\": \"{{body.customer.purchase.identifier}}\",\r     \"summary\": \"{{body.customer.purchase.orderShortDesc}}\"\r     }\r }\r ```\r \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |set-body|根元素。 包含正文文本，或者包含会返回正文的表达式。|是|  \r \r ### <a name=\"properties\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |template|用于更改设置正文策略运行的模板模式。 目前唯一支持的值是：<br /><br />- liquid - 设置正文策略会使用 liquid 模板引擎 |否|liquid|  \r \r 对于访问请求和响应信息，Liquid 模板可绑定到具有以下属性的上下文对象： <br />\r <pre>context.\r     Request.\r         Url\r         Method\r         OriginalMethod\r         OriginalUrl\r         IpAddress\r         MatchedParameters\r         HasBody\r         ClientCertificates\r         Headers\r \r     Response.\r         StatusCode\r         Method\r         Headers\r Url.\r     Scheme\r     Host\r     Port\r     Path\r     Query\r     QueryString\r     ToUri\r     ToString\r \r OriginalUrl.\r     Scheme\r     Host\r     Port\r     Path\r     Query\r     QueryString\r     ToUri\r     ToString\r </pre>\r \r \r \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站、后端  \r   \r -   **策略范围：**全局、产品、API、操作  \r   \r ##  <a name=\"SetHTTPheader\"></a> 设置 HTTP 标头  \r  `set-header` 策略向现有的响应和/或请求标头赋值，或者添加新的响应和/或请求标头。  \r   \r  在 HTTP 消息中插入 HTTP 标头列表。 将此策略放到入站管道中后，它将为传递给目标服务的请求设置 HTTP 标头。 将此策略放到出站管道中后，它将为发送到网关客户端的响应设置 HTTP 标头。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <set-header name=\"header name\" exists-action=\"override | skip | append | delete\">  \r     <value>value</value> <!--for multiple headers with the same name add additional value elements-->  \r </set-header>  \r ```  \r   \r ### <a name=\"examples\"></a>示例  \r   \r #### <a name=\"example\"></a>示例  \r   \r ```xml  \r <set-header name=\"some header name\" exists-action=\"override\">  \r     <value>20</value>   \r </set-header>  \r ```  \r   \r #### <a name=\"forward-context-information-to-the-backend-service\"></a>将上下文信息转发到后端服务  \r  此示例演示了如何在 API 级别应用策略，以便将上下文信息提供给后端服务。 \r \r ```xml  \r <!-- Copy this snippet into the inbound element to forward some context information, user id and the region the gateway is hosted in, to the backend service for logging or evaluation -->  \r <set-header name=\"x-request-context-data\" exists-action=\"override\">  \r   <value>@(context.User.Id)</value>  \r   <value>@(context.Deployment.Region)</value>  \r </set-header>  \r ```  \r   \r  有关详细信息，请参阅[策略表达式](./api-management-policy-expressions.md)和[上下文变量](./api-management-policy-expressions.md#ContextVariables)。  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |set-header|根元素。|是|  \r |value|指定要设置的标头的值。 如需多个标头使用同一名称，可添加更多的 `value` 元素。|是|  \r   \r ### <a name=\"properties\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |exists-action|指定当标头已指定时要执行的操作。 此属性必须具有下列值之一。<br /><br /> -   override - 替换现有标头的值。<br />-   skip - 不替换现有标头值。<br />-   append - 将值追加到现有标头值。<br />-   delete - 从请求中删除标头。<br /><br /> 如果设置为 `override`，则登记多个同名的条目会导致根据所有条目（将多次列出）设置标头；结果中只会设置列出的值。|否|override|  \r |name|指定要设置的标头的名称。|是|不适用|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站、后端、错误时  \r   \r -   **策略范围：**全局、产品、API、操作  \r   \r ##  <a name=\"SetQueryStringParameter\"></a> 设置查询字符串参数  \r  `set-query-parameter` 策略添加、删除请求查询字符串参数或替换其值。 可用于传递后端服务所需的查询参数，这些参数是可选的或者永远不能出现在请求中。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <set-query-parameter name=\"param name\" exists-action=\"override | skip | append | delete\">  \r     <value>value</value> <!--for multiple parameters with the same name add additional value elements-->  \r </set-query-parameter>  \r ```  \r   \r ### <a name=\"examples\"></a>示例  \r   \r #### <a name=\"example\"></a>示例  \r   \r ```xml  \r   \r <set-query-parameter>  \r   <parameter name=\"api-key\" exists-action=\"skip\">  \r     <value>12345678901</value>  \r   </parameter>  \r   <!-- for multiple parameters with the same name add additional value elements -->  \r </set-query-parameter>  \r   \r ```  \r   \r #### <a name=\"forward-context-information-to-the-backend-service\"></a>将上下文信息转发到后端服务  \r  此示例演示了如何在 API 级别应用策略，以便将上下文信息提供给后端服务。 \r   \r ```xml  \r <!-- Copy this snippet into the inbound element to forward a piece of context, product name in this example, to the backend service for logging or evaluation -->  \r <set-query-parameter name=\"x-product-name\" exists-action=\"override\">  \r   <value>@(context.Product.Name)</value>  \r </set-query-parameter>  \r   \r ```  \r   \r  有关详细信息，请参阅[策略表达式](./api-management-policy-expressions.md)和[上下文变量](./api-management-policy-expressions.md#ContextVariables)。  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |set-query-parameter|根元素。|是|  \r |value|指定要设置的查询参数的值。 如需多个查询参数使用同一名称，可添加更多的 `value` 元素。|是|  \r   \r ### <a name=\"properties\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |exists-action|指定当查询参数已指定时要执行的操作。 此属性必须具有下列值之一。<br /><br /> -   override - 替换现有参数的值。<br />-   skip - 不替换现有查询参数值。<br />-   append - 将值追加到现有查询参数值。<br />-   delete - 从请求中删除查询参数。<br /><br /> 如果设置为 `override`，则登记多个同名的条目会导致根据所有条目（将多次列出）设置查询参数；结果中只会设置列出的值。|否|override|  \r |name|指定要设置的查询参数的名称。|是|不适用|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、后端  \r   \r -   **策略范围：**全局、产品、API、操作  \r   \r ##  <a name=\"RewriteURL\"></a> 重写 URL  \r  `rewrite-uri` 策略将请求 URL 从其公用格式转换为 Web 服务所需的格式，如以下示例所示。  \r   \r -   公共 URL - `http://api.example.com/storenumber/ordernumber`  \r   \r -   请求 URL - `http://api.example.com/v2/US/hardware/storenumber&ordernumber?City&State`  \r   \r  如果要将用户和/或浏览器友好的 URL 转换成 Web 服务所需的 URL 格式，则可使用此策略。 应用此策略的前提是公开备用的 URL 格式，例如简洁 URL、RESTful URL、用户友好的 URL 或 SEO 友好的 URL。这些 URL 是纯结构化 URL，不包含查询字符串，只包含资源的路径（在方案和颁发机构的后面）。 通常会出于美观、可用性或搜索引擎优化 (SEO) 目的使用这种 URL。  \r   \r > [!NOTE]\r >  只能使用此策略添加查询字符串参数。 不能在重写 URL 中添加额外的模板路径参数。  \r \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <rewrite-uri template=\"uri template\" copy-unmatched-params=\"true | false\" />  \r ```  \r   \r ### <a name=\"example\"></a>示例  \r   \r ```xml  \r <policies>  \r     <inbound>  \r         <base />  \r         <rewrite-uri template=\"/v2/US/hardware/{storenumber}&{ordernumber}?City=city&State=state\" />  \r     </inbound>  \r     <outbound>  \r         <base />  \r     </outbound>  \r </policies>  \r ```  \r ```xml\r <!-- Assuming incoming request is /get?a=b&c=d and operation template is set to /get?a={b} -->\r <policies>  \r     <inbound>  \r         <base />  \r         <rewrite-uri template=\"/put\" />  \r     </inbound>  \r     <outbound>  \r         <base />  \r     </outbound>  \r </policies>  \r <!-- Resulting URL will be /put?c=d -->\r ```  \r ```xml\r <!-- Assuming incoming request is /get?a=b&c=d and operation template is set to /get?a={b} -->\r <policies>  \r     <inbound>  \r         <base />  \r         <rewrite-uri template=\"/put\" copy-unmatched-params=\"false\" />  \r     </inbound>  \r     <outbound>  \r         <base />  \r     </outbound>  \r </policies>  \r <!-- Resulting URL will be /put -->\r ```\r \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |rewrite-uri|根元素。|是|  \r   \r ### <a name=\"attributes\"></a>属性  \r   \r |属性|说明|必选|默认|  \r |---------------|-----------------|--------------|-------------|  \r |template|包含任何查询字符串参数的实际 Web 服务 URL。 使用表达式时，整个值必须是一个表达式。|是|不适用|  \r |copy-unmatched-params|指定是否将原始 URL 模板中不存在的传入请求中的查询参数添加到重新编写模板定义的 URL|否|true|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站  \r   \r -   **策略范围：**产品、API、操作  \r   \r ##  <a name=\"XSLTransform\"></a> 使用 XSLT 转换 XML  \r  `Transform XML using an XSLT` 策略在请求或响应正文中将 XSL 转换应用到 XML。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <xsl-transform>  \r     <parameter name=\"User-Agent\">@(context.Request.Headers.GetValueOrDefault(\"User-Agent\",\"non-specified\"))</parameter>  \r     <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \r         <xsl:output method=\"xml\" indent=\"yes\" />  \r         <xsl:param name=\"User-Agent\" />  \r         <xsl:template match=\"* | @* | node()\">  \r             <xsl:copy>  \r                 <xsl:if test=\"self::* and not(parent::*)\">  \r                     <xsl:attribute name=\"User-Agent\">  \r                         <xsl:value-of select=\"$User-Agent\" />  \r                     </xsl:attribute>  \r                 </xsl:if>  \r                 <xsl:apply-templates select=\"* | @* | node()\" />  \r             </xsl:copy>  \r         </xsl:template>  \r     </xsl:stylesheet>  \r   </xsl-transform>  \r ```  \r   \r ### <a name=\"example\"></a>示例  \r   \r ```xml  \r <policies>  \r   <inbound>  \r       <base />  \r   </inbound>  \r   <outbound>  \r       <base />  \r       <xsl-transform>  \r         <xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \r             <xsl:output omit-xml-declaration=\"yes\" method=\"xml\" indent=\"yes\" />  \r             <!-- Copy all nodes directly-->  \r             <xsl:template match=\"node()| @*|*\">  \r                 <xsl:copy>  \r                     <xsl:apply-templates select=\"@* | node()|*\" />  \r                 </xsl:copy>  \r             </xsl:template>  \r         </xsl:stylesheet>  \r     </xsl-transform>  \r   </outbound>  \r </policies>  \r ```  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |xsl-transform|根元素。|是|  \r |参数|用于定义在转换中使用的变量|否|  \r |xsl:stylesheet|根样式表元素。 在其中定义的所有元素和属性都遵循标准的 [XSLT 规范](http://www.w3.org/TR/xslt)|是|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站  \r   \r -   **策略范围：**全局、产品、API、操作  \r   \r ## <a name=\"next-steps\"></a>后续步骤\r 有关如何使用策略的详细信息，请参阅 [API 管理中的策略](./api-management-howto-policies.md)。  \r "}