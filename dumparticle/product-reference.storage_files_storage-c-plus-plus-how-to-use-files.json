{"Title":"使用 C++ 针对 Azure 文件进行开发","Description":"了解如何开发使用 Azure 文件来存储文件数据的 C++ 应用程序和服务。","Content":"# <a name=\"develop-for-azure-files-with-c\"></a>使用 C++ 针对 Azure 文件进行开发\r [!INCLUDE [storage-selector-file-include](../../../includes/storage-selector-file-include.md)]\r \r [!INCLUDE [storage-try-azure-tools-files](../../../includes/storage-try-azure-tools-files.md)]\r \r ## <a name=\"about-this-tutorial\"></a>关于本教程\r \r 本教程介绍如何针对 Azure 文件执行基本的操作。 通过用 C++ 编写的示例，学习如何创建共享和目录，以及如何上传、列出和删除文件。 如果不熟悉 Azure 文件，请先了解下面各部分中的概念，以便理解相关示例。\r \r \r * 创建和删除 Azure 文件共享\r * 创建和删除目录\r * 枚举 Azure 文件共享中的文件和目录\r * 上传、下载和删除文件\r * 设置 Azure 文件共享的配额（最大大小）\r * 若一个文件使用在共享中定义的共享访问策略，则为该文件创建一个共享访问签名（SAS 密钥）。\r \r > [!Note]  \r > 由于 Azure 文件可以通过 SMB 进行访问，因此可以编写简单的应用程序，通过标准的 C++ I/O 类和函数来访问 Azure 文件共享。 本文将介绍如何编写使用 Azure 存储 C++ SDK 的应用程序，该 SDK 使用 [文件 REST API](https://docs.microsoft.com/rest/api/storageservices/fileservices/file-service-rest-api) 与 Azure 文件通信。\r \r ## <a name=\"create-a-c-application\"></a>创建 C++ 应用程序\r 若要生成示例，需要安装用于 C++ 的 Azure 存储客户端库 2.4.0。 此外，应该已经创建了一个 Azure 存储帐户。\r \r 若要安装用于 C++ 的 Azure 存储客户端 2.4.0，可以使用以下方法之一：\r \r * **Linux：**按照[适用于 C++ 的 Azure 存储客户端库自述文件](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)页中提供的说明操作。\r * **Windows：**在 Visual Studio 中，单击“工具”&gt;“NuGet 包管理器”&gt;“程序包管理器控制台”。 在 [NuGet 包管理器控制台](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)中，键入以下命令，并按 **ENTER**。\r \r ```\r Install-Package wastorage\r ```\r \r ## <a name=\"set-up-your-application-to-use-azure-files\"></a>设置应用程序以使用 Azure 文件\r 将以下 include 语句添加到要在其中操作 Azure 文件的 C++ 源文件的顶部：\r \r ```cpp\r #include <was/storage_account.h>\r #include <was/file.h>\r ```\r \r ## <a name=\"set-up-an-azure-storage-connection-string\"></a>设置 Azure 存储连接字符串\r 要使用文件存储，需要连接到 Azure 存储帐户。 第一步是配置连接字符串，该字符串用于连接到存储帐户。 为此，我们需要定义一个静态变量。\r \r ```cpp\r // Define the connection-string with your values.\r const utility::string_t \r storage_connection_string(U(\"DefaultEndpointsProtocol=https;AccountName=your_storage_account;AccountKey=your_storage_account_key;EndpointSuffix=core.chinacloudapi.cn\"));\r ```\r \r ## <a name=\"connecting-to-an-azure-storage-account\"></a>连接到 Azure 存储帐户\r 可使用 **cloud_storage_account** 类来表示存储帐户信息。 要从存储连接字符串中检索存储帐户信息，可以使用 **parse** 方法。\r \r ```cpp\r // Retrieve storage account from connection string.    \r azure::storage::cloud_storage_account storage_account = \r   azure::storage::cloud_storage_account::parse(storage_connection_string);\r ```\r \r ## <a name=\"create-an-azure-file-share\"></a>创建 Azure 文件共享\r Azure 文件共享中的所有文件和目录都位于名为 Share 的容器内。 存储帐户可以拥有无数的共享，只要帐户容量允许。 要获得共享及其内容的访问权限，需要使用 Azure 文件客户端。\r \r ```cpp\r // Create the Azure Files client.\r azure::storage::cloud_file_client file_client = \r   storage_account.create_cloud_file_client();\r ```\r \r 使用 Azure 文件客户端可以获取对共享的引用。\r \r ```cpp\r // Get a reference to the file share\r azure::storage::cloud_file_share share = \r   file_client.get_share_reference(_XPLATSTR(\"my-sample-share\"));\r ```\r \r 若要创建共享，可使用 **cloud_file_share** 对象的 **create_if_not_exists** 方法。\r \r ```cpp\r if (share.create_if_not_exists()) {    \r     std::wcout << U(\"New share created\") << std::endl;    \r }\r ```\r \r 此时，**share** 保留对名为 **my-sample-share** 的共享的引用。\r \r ## <a name=\"delete-an-azure-file-share\"></a>删除 Azure 文件共享\r 删除共享时，可针对 cloud_file_share 对象调用 **delete_if_exists** 方法。 以下是具有此类功能的示例代码。\r \r ```cpp\r // Get a reference to the share.\r azure::storage::cloud_file_share share = \r   file_client.get_share_reference(_XPLATSTR(\"my-sample-share\"));\r \r // delete the share if exists\r share.delete_share_if_exists();\r ```\r \r ## <a name=\"create-a-directory\"></a>创建目录\r 可以将文件置于子目录中，而不是将其全部置于根目录中，以便对存储进行有效的组织。 使用 Azure 文件可以创建帐户允许的任意数目的目录。 下面的代码会在根目录下创建一个名为 **my-sample-directory** 的目录，以及一个名为 **my-sample-subdirectory** 的子目录。\r \r ```cpp\r // Retrieve a reference to a directory\r azure::storage::cloud_file_directory directory = share.get_directory_reference(_XPLATSTR(\"my-sample-directory\"));\r \r // Return value is true if the share did not exist and was successfully created.\r directory.create_if_not_exists();\r \r // Create a subdirectory.\r azure::storage::cloud_file_directory subdirectory = \r   directory.get_subdirectory_reference(_XPLATSTR(\"my-sample-subdirectory\"));\r subdirectory.create_if_not_exists();\r ```\r \r ## <a name=\"delete-a-directory\"></a>删除目录\r 删除目录很简单，但需注意的是，不能删除仍然包含文件或其他目录的目录。\r \r ```cpp\r // Get a reference to the share.\r azure::storage::cloud_file_share share = \r   file_client.get_share_reference(_XPLATSTR(\"my-sample-share\"));\r \r // Get a reference to the directory.\r azure::storage::cloud_file_directory directory = \r   share.get_directory_reference(_XPLATSTR(\"my-sample-directory\"));\r \r // Get a reference to the subdirectory you want to delete.\r azure::storage::cloud_file_directory sub_directory =\r   directory.get_subdirectory_reference(_XPLATSTR(\"my-sample-subdirectory\"));\r \r // Delete the subdirectory and the sample directory.\r sub_directory.delete_directory_if_exists();\r \r directory.delete_directory_if_exists();\r ```\r \r ## <a name=\"enumerate-files-and-directories-in-an-azure-file-share\"></a>枚举 Azure 文件共享中的文件和目录\r 通过针对 **cloud_file_directory** 引用调用 **list_files_and_directories**，可以轻松获取共享内文件和目录的列表。 若要访问返回的 **list_file_and_directory_item** 的丰富属性和方法集，必须调用 **list_file_and_directory_item.as_file** 方法以获取 **cloud_file** 对象，或调用 **list_file_and_directory_item.as_directory** 方法以获取 **cloud_file_directory** 对象。\r \r 下面的代码演示如何检索和输出共享的根目录中每一项的 URI。\r \r ```cpp\r //Get a reference to the root directory for the share.\r azure::storage::cloud_file_directory root_dir = \r   share.get_root_directory_reference();\r \r // Output URI of each item.\r azure::storage::list_file_and_diretory_result_iterator end_of_results;\r \r for (auto it = directory.list_files_and_directories(); it != end_of_results; ++it)\r {\r     if(it->is_directory())\r     {\r         ucout << \"Directory: \" << it->as_directory().uri().primary_uri().to_string() << std::endl;\r     }\r     else if (it->is_file())\r     {\r         ucout << \"File: \" << it->as_file().uri().primary_uri().to_string() << std::endl;\r     }        \r }\r ```\r \r ## <a name=\"upload-a-file\"></a>上传文件\r Azure 文件共享至少包含文件所在的根目录。 本部分会介绍如何将文件从本地存储上传到共享所在的根目录。\r \r 上传文件的第一步是获取对文件所在的目录的引用。 为此，需要调用共享对象的 **get_root_directory_reference** 方法。\r \r ```cpp\r //Get a reference to the root directory for the share.\r azure::storage::cloud_file_directory root_dir = share.get_root_directory_reference();\r ```\r \r 现在，已经有了共享所在根目录的引用，因此可以将文件上传到其中。 此示例从文件、文本和流上传。\r \r ```cpp\r // Upload a file from a stream.\r concurrency::streams::istream input_stream = \r   concurrency::streams::file_stream<uint8_t>::open_istream(_XPLATSTR(\"DataFile.txt\")).get();\r \r azure::storage::cloud_file file1 = \r   root_dir.get_file_reference(_XPLATSTR(\"my-sample-file-1\"));\r file1.upload_from_stream(input_stream);\r \r // Upload some files from text.\r azure::storage::cloud_file file2 = \r   root_dir.get_file_reference(_XPLATSTR(\"my-sample-file-2\"));\r file2.upload_text(_XPLATSTR(\"more text\"));\r \r // Upload a file from a file.\r azure::storage::cloud_file file4 = \r   root_dir.get_file_reference(_XPLATSTR(\"my-sample-file-3\"));\r file4.upload_from_file(_XPLATSTR(\"DataFile.txt\"));    \r ```\r \r ## <a name=\"download-a-file\"></a>下载文件\r 如果要下载文件，请先检索文件引用，然后调用 **download_to_stream** 方法，将文件内容传输到流对象，随后可将该流对象保存到本地本件。 也可使用 **download_to_file** 方法将文件的内容下载到本地文件。 可使用 **download_text** 方法，以文本字符串形式下载文件的内容。\r \r 下面的示例使用 **download_to_stream** 和 **download_text** 方法，演示如何下载之前部分中创建的文件。\r \r ```cpp\r // Download as text\r azure::storage::cloud_file text_file = \r   root_dir.get_file_reference(_XPLATSTR(\"my-sample-file-2\"));\r utility::string_t text = text_file.download_text();\r ucout << \"File Text: \" << text << std::endl;\r \r // Download as a stream.\r azure::storage::cloud_file stream_file = \r   root_dir.get_file_reference(_XPLATSTR(\"my-sample-file-3\"));\r \r concurrency::streams::container_buffer<std::vector<uint8_t>> buffer;\r concurrency::streams::ostream output_stream(buffer);\r stream_file.download_to_stream(output_stream);\r std::ofstream outfile(\"DownloadFile.txt\", std::ofstream::binary);\r std::vector<unsigned char>& data = buffer.collection();\r outfile.write((char *)&data[0], buffer.size());\r outfile.close();\r ```\r \r ## <a name=\"delete-a-file\"></a>删除文件\r 另一项常见的 Azure 文件操作是删除文件。 下面的代码删除存储在根目录下的名为 my-sample-file-3 的文件。\r \r ```cpp\r // Get a reference to the root directory for the share.    \r azure::storage::cloud_file_share share = \r   file_client.get_share_reference(_XPLATSTR(\"my-sample-share\"));\r \r azure::storage::cloud_file_directory root_dir = \r   share.get_root_directory_reference();\r \r azure::storage::cloud_file file = \r   root_dir.get_file_reference(_XPLATSTR(\"my-sample-file-3\"));\r \r file.delete_file_if_exists();\r ```\r \r ## <a name=\"set-the-quota-maximum-size-for-an-azure-file-share\"></a>设置 Azure 文件共享的配额（最大大小）\r 可以使用 GB 作为单位设置文件的配额（或最大大小）。 还可以查看共享当前存储了多少数据。\r \r 通过设置一个共享的配额，可以限制在该共享上存储的文件的总大小。 如果共享上文件的总大小超过在共享上设定的配额，则客户端不能增加现有文件的大小或创建新文件，除非这些文件是空的。\r \r 下面的示例演示如何检查共享的当前使用情况，以及如何设置共享的配额。\r \r ```cpp\r // Parse the connection string for the storage account.\r azure::storage::cloud_storage_account storage_account = \r   azure::storage::cloud_storage_account::parse(storage_connection_string);\r \r // Create the file client.\r azure::storage::cloud_file_client file_client = \r   storage_account.create_cloud_file_client();\r \r // Get a reference to the share.\r azure::storage::cloud_file_share share = \r   file_client.get_share_reference(_XPLATSTR(\"my-sample-share\"));\r if (share.exists())\r {\r     std::cout << \"Current share usage: \" << share.download_share_usage() << \"/\" << share.properties().quota();\r \r     //This line sets the quota to 2560GB\r     share.resize(2560);\r \r     std::cout << \"Quota increased: \" << share.download_share_usage() << \"/\" << share.properties().quota();\r \r }\r ```\r \r ## <a name=\"generate-a-shared-access-signature-for-a-file-or-file-share\"></a>为文件或文件共享生成共享访问签名\r 可以为文件共享或单个文件生成共享访问签名 (SAS)。 还可以在文件共享上创建一个共享访问策略以管理共享访问签名。 建议创建共享访问策略，因为它提供了一种在受到威胁时撤消 SAS 的方式。\r \r 以下示例在一个共享上创建共享访问策略，并使用该策略为共享中的一个文件提供 SAS 约束。\r \r ```cpp\r // Parse the connection string for the storage account.\r azure::storage::cloud_storage_account storage_account = \r   azure::storage::cloud_storage_account::parse(storage_connection_string);\r \r // Create the file client and get a reference to the share\r azure::storage::cloud_file_client file_client = \r   storage_account.create_cloud_file_client();\r \r azure::storage::cloud_file_share share = \r   file_client.get_share_reference(_XPLATSTR(\"my-sample-share\"));\r \r if (share.exists())\r {\r     // Create and assign a policy\r     utility::string_t policy_name = _XPLATSTR(\"sampleSharePolicy\");\r \r     azure::storage::file_shared_access_policy sharedPolicy = \r       azure::storage::file_shared_access_policy();\r \r     //set permissions to expire in 90 minutes\r     sharedPolicy.set_expiry(utility::datetime::utc_now() + \r        utility::datetime::from_minutes(90));\r \r     //give read and write permissions\r     sharedPolicy.set_permissions(azure::storage::file_shared_access_policy::permissions::write | azure::storage::file_shared_access_policy::permissions::read);\r \r     //set permissions for the share\r     azure::storage::file_share_permissions permissions;    \r \r     //retrieve the current list of shared access policies\r     azure::storage::shared_access_policies<azure::storage::file_shared_access_policy> policies;\r \r     //add the new shared policy\r     policies.insert(std::make_pair(policy_name, sharedPolicy));\r \r     //save the updated policy list\r     permissions.set_policies(policies);\r     share.upload_permissions(permissions);\r \r     //Retrieve the root directory and file references\r     azure::storage::cloud_file_directory root_dir = \r         share.get_root_directory_reference();\r     azure::storage::cloud_file file = \r       root_dir.get_file_reference(_XPLATSTR(\"my-sample-file-1\"));\r \r     // Generate a SAS for a file in the share \r     //  and associate this access policy with it.        \r     utility::string_t sas_token = file.get_shared_access_signature(sharedPolicy);\r \r     // Create a new CloudFile object from the SAS, and write some text to the file.        \r     azure::storage::cloud_file file_with_sas(azure::storage::storage_credentials(sas_token).transform_uri(file.uri().primary_uri()));\r     utility::string_t text = _XPLATSTR(\"My sample content\");        \r     file_with_sas.upload_text(text);        \r \r     //Download and print URL with SAS.\r     utility::string_t downloaded_text = file_with_sas.download_text();        \r     ucout << downloaded_text << std::endl;        \r     ucout << azure::storage::storage_credentials(sas_token).transform_uri(file.uri().primary_uri()).to_string() << std::endl;\r \r }\r ```\r ## <a name=\"next-steps\"></a>后续步骤\r 若要了解有关 Azure 存储的详细信息，请参阅以下资源：\r \r * [适用于 C++ 的存储客户端库](https://github.com/Azure/azure-storage-cpp)\r * [Azure Storage File Service Samples in C++] (https://github.com/Azure-Samples/storage-file-cpp-getting-started)（C++ 中的 Azure 存储文件服务示例）\r * [Azure 存储资源管理器](http://go.microsoft.com/fwlink/?LinkID=822673&clcid=0x409)\r * [Azure 存储文档](/storage/)\r \r "}