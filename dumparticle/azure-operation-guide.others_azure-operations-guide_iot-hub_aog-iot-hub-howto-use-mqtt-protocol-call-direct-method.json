{"Title":"Node JS 如何使用 MQTT 协议调用“直接方法”","Description":"Node JS 如何使用 MQTT 协议调用“直接方法”","Content":"\r # Node JS 如何使用 MQTT 协议调用“直接方法”\r \r Azure IOT SDK 中封装了使用 MQTT 协议调用“直接方法”的用法，如果想直接使用 MQTT 协议自己调用 Azure IOT 来实现“直接方法”的调用，虽然官方文档也有介绍，但依照官方文档的步骤，依然无法调用，这是因为文档中讲解到的一些参数并不详细，具体可以参考以下文档和代码 :\r \r 使用 NodeJS 调用 MQTT 协议，需要依赖 [MQTT.JS](https://github.com/mqttjs/MQTT.js)。\r \r 首先建立 NodeJS 项目目录，然后安装 MQTT 依赖包 :\r \r ```\r npm install mqtt --save\r ```\r \r 其次，在代码中配置连接 IOT 字符串，连接并接受云端通过调用“直接方法”发送来的消息 :\r \r ```\r var mqtt = require('mqtt')\r var URL = require('url');\r var QueryString = require('querystring');\r \r var options = {\r     cmd: 'connect',\r     protocolId: 'MQTT',\r     protocolVersion: 4,\r     clean: false,\r     clientId: 'kevindevice',\r     rejectUnauthorized: true,\r     username: 'xuhuaIOT.azure-devices.cn/kevindevice/api-version=2016-11-14',\r     reconnectPeriod: 0, // Client will handle reconnection at the higher level\r     password : new Buffer('SharedAccessSignature sr=xuhuaIOT.azure-devices.cn%2Fdevices%2Fkevindevice&sig=wU3c8uu6AqTKoKF0OAtBE3K7ZcAkhelhFux6vNYEiho%3D&se=1485411010')\r };\r var client = mqtt.connect('mqtts://xuhuaIOT.azure-devices.cn', options);\r \r client.on('connect', () => {\r     client.subscribe('$iothub/methods/POST/#', { qos: 0 }, function (err) {\r         if (err) {\r             console.error(\"Direct method error: \" + err.message);\r         } else {\r             console.log(\"Successfully subscribe to direct method\");\r         }\r     });\r \r })\r \r client.on('message', (topic, message) => {\r     console.log(topic);\r     var methodMessage = parseMessage(topic, message);\r     console.log('message' + methodMessage);\r \r     client.publish('$iothub/methods/res/200/?$rid=' + methodMessage.requestId, JSON.stringify({\"message\":\"reboot successfully\"}), { qos: 0, retain: false }, function(err) {});\r })\r \r var handleRebootRequest = function(message) {\r     console.log('Response to method \\'' + message + '\\' sent successfully.');\r }\r \r var parseMessage = function(topic, body) {\r var url, path, query;\r try {\r     url = URL.parse(topic);\r     path = url.path.split('/');\r     query = QueryString.parse(url.query);\r }\r catch(err) {\r     console.error(err)\r     return undefined;\r }\r \r // if the topic has a querystring then 'path' will include it; so\r // we strip it out\r var lastPathComponent = path[path.length - 1];\r if(lastPathComponent.indexOf('?') !== -1) {\r     path[path.length - 1] = lastPathComponent.substr(\r     0, lastPathComponent.indexOf('?')\r     );\r }\r \r if(path.length > 0 && path[0] === '$iothub') {\r     var message = {};\r     if(path.length > 1 && path[1].length > 0) {\r     // create an object for the module; for example, $iothub/twin/...\r     // would result in there being a message.twin object\r     var mod = message[path[1]] = {};\r \r     // parse the request ID if there is one\r     if(!!(query.$rid)) {\r         message.requestId = query.$rid;\r     }\r \r     // parse the other properties properties (excluding $rid)\r     message.properties = query;\r     delete message.properties.$rid;\r \r     // save the body\r     message.body = body;\r \r     // parse the verb\r     if(path.length > 2 && path[2].length > 0) {\r         mod.verb = path[2];\r \r         // This is a topic that looks like this:\r         //  $iothub/methods/POST/{method name}?$rid={request id}&{serialized properties}\r         // We parse the method name out.\r         if(path.length > 3 && path[3].length > 0) {\r         mod.methodName = path[3];\r         } else {\r         // The service published a message on a strange topic name. This is\r         // probably a service bug. At any rate we don't know what to do with\r         // this strange topic so we throw.\r         throw new Error('Device method call\\'s MQTT topic name does not include the method name.');\r         }\r     }\r     }\r     return message;\r }\r return undefined;\r }\r ```\r \r 本示例是设备接受 Azure IOTHub 云端调用“直接方法”发来的消息，并进行响应处理。\r \r >[!NOTE]\r > IOT 的用户名必需是 `{iothubhostname}/{device_id}/ api-version={api-version}`, 官方文档中没有提及要记入 api-version，但实际测试下来，这里是必须要有的。\r \r 参考文档：\r \r [Azure IoT 中心使用直接方法](/iot-hub/iot-hub-node-node-direct-methods)<br>\r [Azure IoT 中心直接方法的介绍](/iot-hub/iot-hub-devguide-direct-methods)"}