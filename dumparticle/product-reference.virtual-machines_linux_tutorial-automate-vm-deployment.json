{"Title":"如何在首次启动 Linux 虚拟机时对其进行自定义","Description":"了解在 Azure 中首次启动 Linux VM 时如何使用 cloud-init 和 Key Vault 对其进行自定义","Content":"# <a name=\"how-to-customize-a-linux-virtual-machine-on-first-boot\"></a>如何在首次启动 Linux 虚拟机时对其进行自定义\r 在前面的教程中，你已学习如何通过 SSH 连接到虚拟机 (VM) 并手动安装 NGINX。 若要以快速一致的方式创建 VM，通常需要某种形式的自动化。 在首次启动 VM 时实现自定义的常见方法是使用 [cloud-init](https://cloudinit.readthedocs.io)。 本教程介绍如何执行下列操作：\r \r > [!div class=\"checklist\"]\r > * 创建 cloud-init 配置文件\r > * 创建使用 cloud-init 文件的 VM\r > * 在创建 VM 后，查看正在运行的 Node.js 应用\r > * 使用 Key Vault 安全地存储证书\r > * 使用 cloud-init 自动进行 NGINX 的安全部署\r \r [!INCLUDE [azure-cli-2-azurechinacloud-environment-parameter](../../../includes/azure-cli-2-azurechinacloud-environment-parameter.md)]\r \r 如果选择在本地安装并使用 CLI，本教程要求运行 Azure CLI 2.0.4 或更高版本。 运行 `az --version` 即可查找版本。 如果需要进行安装或升级，请参阅[安装 Azure CLI 2.0](https://docs.azure.cn/zh-cn/cli/install-azure-cli?view=azure-cli-latest)。  \r \r ## <a name=\"cloud-init-overview\"></a>Cloud-init 概述\r [Cloud-init](https://cloudinit.readthedocs.io) 是一种广泛使用的方法，用于在首次启动 Linux VM 时对其进行自定义。 可使用 cloud-init 来安装程序包和写入文件，或者配置用户和安全性。 在初始启动期间运行 cloud-init 时，无需额外的步骤和代理即可应用配置。\r \r Cloud-init 还支持不同的发行版。 例如，不需使用 apt-get install 或 yum install 来安装包， 而是可定义要安装的程序包的列表。 Cloud-init 将对所选发行版自动使用本机包管理工具。\r \r 我们正在与合作伙伴协作，将 cloud-init 纳入用户向 Azure 提供的映像中并使其在映像中正常运行。 下表概述了 cloud-init 当前在 Azure 平台映像上的可用性：\r \r | 别名 | 发布者 | 产品 | SKU | Version |\r |:--- |:--- |:--- |:--- |:--- |:--- |\r | UbuntuLTS |Canonical |UbuntuServer |16.04-LTS |最新 |\r | UbuntuLTS |Canonical |UbuntuServer |14.04.5-LTS |最新 |\r | CoreOS |CoreOS |CoreOS |Stable |latest |\r \r ## <a name=\"create-cloud-init-config-file\"></a>创建 cloud-init 配置文件\r 若要运行 cloud-init，请创建一个 VM，以便安装 NGINX 并运行简单的“Hello World”Node.js 应用。 以下 cloud-init 配置会安装所需的程序包，创建 Node.js 应用，然后初始化并启动该应用。\r \r 在当前 shell 中，创建名为“cloud-init.txt”的文件并粘贴下面的配置。 可使用任何想要使用的编辑器。 请确保已正确复制整个 cloud-init 文件，尤其是第一行：\r \r ```yaml\r #cloud-config\r package_upgrade: true\r packages:\r   - nginx\r   - nodejs\r   - npm\r write_files:\r   - owner: www-data:www-data\r   - path: /etc/nginx/sites-available/default\r     content: |\r       server {\r         listen 80;\r         location / {\r           proxy_pass http://localhost:3000;\r           proxy_http_version 1.1;\r           proxy_set_header Upgrade $http_upgrade;\r           proxy_set_header Connection keep-alive;\r           proxy_set_header Host $host;\r           proxy_cache_bypass $http_upgrade;\r         }\r       }\r   - owner: azureuser:azureuser\r   - path: /home/azureuser/myapp/index.js\r     content: |\r       var express = require('express')\r       var app = express()\r       var os = require('os');\r       app.get('/', function (req, res) {\r         res.send('Hello World from host ' + os.hostname() + '!')\r       })\r       app.listen(3000, function () {\r         console.log('Hello world app listening on port 3000!')\r       })\r runcmd:\r   - service nginx restart\r   - cd \"/home/azureuser/myapp\"\r   - npm init\r   - npm install express -y\r   - nodejs index.js\r ```\r \r 有关 cloud-init 配置选项的详细信息，请参阅 [cloud-init 配置示例](https://cloudinit.readthedocs.io/en/latest/topics/examples.html)。\r \r ## <a name=\"create-virtual-machine\"></a>创建虚拟机\r 使用 [az group create](https://docs.azure.cn/zh-cn/cli/group?view=azure-cli-latest#create) 创建资源组，然后才能创建 VM。 以下示例在“chinaeast”位置创建名为“myResourceGroupAutomate”的资源组：\r \r ```azurecli \r az group create --name myResourceGroupAutomate --location chinaeast\r ```\r \r 现在，请使用 [az vm create](https://docs.azure.cn/zh-cn/cli/vm?view=azure-cli-latest#create) 创建 VM。 使用 `--custom-data` 参数传入 cloud-init 配置文件。 如果未将 cloud-init.txt 配置文件保存在现有工作目录中，请提供该文件的完整路径。 以下示例创建名为“myAutomatedVM”的 VM：\r \r ```azurecli \r az vm create \\\r     --resource-group myResourceGroupAutomate \\\r     --name myVM \\\r     --image UbuntuLTS \\\r     --admin-username azureuser \\\r     --generate-ssh-keys \\\r     --custom-data cloud-init.txt\r ```\r \r 创建 VM、安装程序包和启动应用需耗时几分钟。 在 Azure CLI 返回提示之后，仍然存在继续运行的后台任务。 可能还需等待几分钟才能访问应用。 创建 VM 后，请记下 Azure CLI 显示的 `publicIpAddress`。 此地址用于通过 Web 浏览器访问 Node.js 应用。\r \r 若要使 VM 能使用 Web 流量，请通过 [az vm open-port](https://docs.azure.cn/zh-cn/cli/vm?view=azure-cli-latest#open-port) 从 Internet 打开端口 80：\r \r ```azurecli \r az vm open-port --port 80 --resource-group myResourceGroupAutomate --name myVM\r ```\r \r ## <a name=\"test-web-app\"></a>测试 Web 应用\r 现在可以打开 Web 浏览器，在地址栏中输入“http://<publicIpAddress>”。 在 VM 创建过程中提供自己的公共 IP 地址。 Node.js 应用如下例所示：\r \r ![查看运行中的 NGINX 站点](./media/tutorial-automate-vm-deployment/nginx.png)\r \r ## <a name=\"inject-certificates-from-key-vault\"></a>注入 Key Vault 中的证书\r 此可选部分展示了如何在 Azure Key Vault 中安全存储证书，并在 VM 部署期间将其注入。 此过程可确保首次启动时将最新的证书注入到 VM 中，不必使用包含内嵌证书的自定义映像。 在该过程中，证书永远不会离开 Azure 平台，也不会在脚本、命令行历史记录或模板中公开。\r \r Azure Key Vault 保护加密密钥和机密，例如证书或密码。 Key Vault 有助于简化密钥管理过程，让你能够持续掌控用于数据访问和加密的密钥。 此方案介绍了一些用于证书创建和使用的 Key Vault 概念，但未详述如何使用 Key Vault。\r \r 以下步骤演示如何：\r \r - 创建 Azure Key Vault\r - 生成证书或将其上传到 Key Vault\r - 利用要注入到 VM 的证书创建密钥\r - 创建 VM 并注入证书\r \r ### <a name=\"create-an-azure-key-vault\"></a>创建 Azure Key Vault\r 首先，使用 [az keyvault create](https://docs.azure.cn/zh-cn/cli/keyvault?view=azure-cli-latest#create) 创建 Key Vault，并在部署 VM 时启用该 Key Vault。 每个 Key Vault 均需具备唯一名称且全部小写。 将下例中的 mykeyvault 替换为自己唯一的 Key Vault 名称：\r \r ```azurecli \r keyvault_name=mykeyvault\r az keyvault create \\\r     --resource-group myResourceGroupAutomate \\\r     --name $keyvault_name \\\r     --enabled-for-deployment\r ```\r \r ### <a name=\"generate-certificate-and-store-in-key-vault\"></a>生成证书并将其存储在 Key Vault 中\r 为供生产使用，应通过 [az keyvault certificate import](https://docs.azure.cn/zh-cn/cli/keyvault/certificate?view=azure-cli-latest#import) 导入由受信任的提供程序签名的有效证书。 在本教程中，以下示例显示了如何使用 [az keyvault certificate create](https://docs.azure.cn/zh-cn/cli/keyvault/certificate?view=azure-cli-latest#create) 生成使用默认证书策略的自签名证书：\r \r ```azurecli \r az keyvault certificate create \\\r     --vault-name $keyvault_name \\\r     --name mycert \\\r     --policy \"$(az keyvault certificate get-default-policy)\"\r ```\r \r ### <a name=\"prepare-certificate-for-use-with-vm\"></a>准备用于 VM 的证书\r 若要在 VM 创建过程中使用该证书，请使用 [az keyvault secret list-versions](https://docs.azure.cn/zh-cn/cli/keyvault/secret?view=azure-cli-latest#list-versions) 获取证书的 ID。 VM 需要特定格式的证书才能在启动时将其注入，因此请使用 [az vm format-secret](https://docs.azure.cn/zh-cn/cli/vm?view=azure-cli-latest#format-secret) 转换该证书。 以下示例将这些命令的输出分配给变量，以便在后续步骤中使用：\r \r ```azurecli \r secret=$(az keyvault secret list-versions \\\r           --vault-name $keyvault_name \\\r           --name mycert \\\r           --query \"[?attributes.enabled].id\" --output tsv)\r vm_secret=$(az vm format-secret --secret \"$secret\")\r ```\r \r ### <a name=\"create-cloud-init-config-to-secure-nginx\"></a>创建 cloud-init 配置以保护 NGINX\r 创建 VM 时，证书和密钥都将存储在受保护的 /var/lib/waagent/ 目录中。 要将证书自动添加到 VM 并配置 NGINX，可使用上一示例中已更新的 cloud-init 配置。\r \r 创建名为“cloud-init-secured.txt”的文件并粘贴下面的配置。 同样，请确保已正确复制整个 cloud-init 文件，尤其是第一行：\r \r ```yaml\r #cloud-config\r package_upgrade: true\r packages:\r   - nginx\r   - nodejs\r   - npm\r write_files:\r   - owner: www-data:www-data\r   - path: /etc/nginx/sites-available/default\r     content: |\r       server {\r         listen 80;\r         listen 443 ssl;\r         ssl_certificate /etc/nginx/ssl/mycert.cert;\r         ssl_certificate_key /etc/nginx/ssl/mycert.prv;\r         location / {\r           proxy_pass http://localhost:3000;\r           proxy_http_version 1.1;\r           proxy_set_header Upgrade $http_upgrade;\r           proxy_set_header Connection keep-alive;\r           proxy_set_header Host $host;\r           proxy_cache_bypass $http_upgrade;\r         }\r       }\r   - owner: azureuser:azureuser\r   - path: /home/azureuser/myapp/index.js\r     content: |\r       var express = require('express')\r       var app = express()\r       var os = require('os');\r       app.get('/', function (req, res) {\r         res.send('Hello World from host ' + os.hostname() + '!')\r       })\r       app.listen(3000, function () {\r         console.log('Hello world app listening on port 3000!')\r       })\r runcmd:\r   - secretsname=$(find /var/lib/waagent/ -name \"*.prv\" | cut -c -57)\r   - mkdir /etc/nginx/ssl\r   - cp $secretsname.crt /etc/nginx/ssl/mycert.cert\r   - cp $secretsname.prv /etc/nginx/ssl/mycert.prv\r   - service nginx restart\r   - cd \"/home/azureuser/myapp\"\r   - npm init\r   - npm install express -y\r   - nodejs index.js\r ```\r \r ### <a name=\"create-secure-vm\"></a>创建安全的 VM\r 现在，请使用 [az vm create](https://docs.azure.cn/zh-cn/cli/vm?view=azure-cli-latest#create) 创建 VM。 使用 `--secrets` 参数注入 Key Vault 中的证书数据。 与上个示例一样，使用 `--custom-data` 参数传入 cloud-init 配置：\r \r ```azurecli \r az vm create \\\r     --resource-group myResourceGroupAutomate \\\r     --name myVMSecured \\\r     --image UbuntuLTS \\\r     --admin-username azureuser \\\r     --generate-ssh-keys \\\r     --custom-data cloud-init-secured.txt \\\r     --secrets \"$vm_secret\"\r ```\r \r 创建 VM、安装程序包和启动应用需耗时几分钟。 在 Azure CLI 返回提示之后，仍然存在继续运行的后台任务。 可能还需等待几分钟才能访问应用。 创建 VM 后，请记下 Azure CLI 显示的 `publicIpAddress`。 此地址用于通过 Web 浏览器访问 Node.js 应用。\r \r 若要使 VM 能使用安全的 Web 流量，请通过 [az vm open-port](https://docs.azure.cn/zh-cn/cli/vm?view=azure-cli-latest#open-port) 从 Internet 打开端口 443：\r \r ```azurecli \r az vm open-port \\\r     --resource-group myResourceGroupAutomate \\\r     --name myVMSecured \\\r     --port 443\r ```\r \r ### <a name=\"test-secure-web-app\"></a>测试 Web 应用是否安全\r 现在可以打开 Web 浏览器，在地址栏中输入“https://<publicIpAddress>”。 在 VM 创建过程中提供自己的公共 IP 地址。 若使用自签名的证书，请接受安全警告：\r \r ![接受 Web 浏览器安全警告](./media/tutorial-automate-vm-deployment/browser-warning.png)\r \r 随即显示受保护的 NGINX 站点和 Node.js 应用，如下例所示：\r \r ![查看运行中的安全 NGINX 站点](./media/tutorial-automate-vm-deployment/secured-nginx.png)\r \r ## <a name=\"next-steps\"></a>后续步骤\r 在本教程中，你使用 cloud-init 在首次启动时配置了 VM。 你已了解如何：\r \r > [!div class=\"checklist\"]\r > * 创建 cloud-init 配置文件\r > * 创建使用 cloud-init 文件的 VM\r > * 在创建 VM 后，查看正在运行的 Node.js 应用\r > * 使用 Key Vault 安全地存储证书\r > * 使用 cloud-init 自动进行 NGINX 的安全部署\r \r 转到下一教程，了解如何创建自定义 VM 映像。\r \r > [!div class=\"nextstepaction\"]\r > [创建自定义 VM 映像](./tutorial-custom-images.md)\r \r <!--Update_Description: update meta properties, wording update-->"}