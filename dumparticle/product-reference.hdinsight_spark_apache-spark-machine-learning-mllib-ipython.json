{"Title":"使用 HDInsight 上的 Spark MLlib 创建机器学习应用的示例","Description":"了解如何使用 Spark MLlib 创建机器学习应用，用于通过逻辑回归使用分类分析数据集。","Content":"# <a name=\"use-spark-mllib-to-build-a-machine-learning-application-and-analyze-a-dataset\"></a>使用 Spark MLlib 生成机器学习应用程序和分析数据集\r \r 了解如何使用 Spark **MLlib** 创建机器学习应用程序，用于对开放数据集执行简单的预测分析。 本示例摘自 Spark 的内置机器学习库，它通过逻辑回归使用分类。 \r \r > [!TIP]\r > 本示例也以在 HDInsight 中创建的 Spark (Linux) 群集上的 Jupyter Notebook 的形式提供。 笔记本体验允许通过笔记本本身运行 Python 代码段。 若要在 Notebook 中执行本教程，请创建 Spark 群集并启动 Jupyter Notebook (`https://CLUSTERNAME.azurehdinsight.cn/jupyter`)。 然后，运行 **Python** 文件夹下的 Notebook“Spark 机器学习 - 使用 MLlib.ipynb 对食品检测数据进行预测分析”。\r >\r >\r \r MLlib 是一个核心 Spark 库，它提供了许多可用于机器学习任务的实用工具，包括适用于以下任务的实用工具：\r \r * 分类\r * 回归\r * 群集功能\r * 主题建模\r * 单值分解 (SVD) 和主体组件分析 (PCA)\r * 假设测试和计算示例统计信息\r \r ## <a name=\"what-are-classification-and-logistic-regression\"></a>分类和逻辑回归是什么？\r “分类”是一种很常见的机器学习任务，是将输入数据归入各类别的过程。 分类算法的作用是找出如何为提供的输入数据分配“标签”。 例如，可以联想机器学习算法，该算法接受股票信息作为输入并将股票划分为两个类别：应该卖出的股票和应该保留的股票。\r \r 逻辑回归是用于分类的算法。 Spark 的逻辑回归 API 可用于 *二元分类*，或将输入数据归类到两组中的一组。 有关逻辑回归的详细信息，请参阅 [维基百科](https://en.wikipedia.org/wiki/Logistic_regression)。\r \r 总之，逻辑回归过程会产生“逻辑函数”  ，该函数可用于预测输入向量属于其中一个组的概率。  \r \r ## <a name=\"predictive-analysis-example-on-food-inspection-data\"></a>对食品检测数据进行预测分析的示例\r 本示例使用 Spark 对食品检测数据 (**Food_Inspections1.csv**) 执行一些预测分析，这些数据通过 [City of Shanghai data portal](https://data.cityofchicago.org/)（上海市数据门户）获取。 此数据集包含在上海执行的食品检验的相关信息，包括被检查的每个食品机构的信息、发现的违规行为（如果有）以及检验结果。 CSV 数据文件在与群集（位于 **/HdiSamples/HdiSamples/FoodInspectionData/Food_Inspections1.csv**）关联的存储帐户中可用。\r \r 在以下步骤中，将开发一个模型以查看如何通过食物检测或为何失败。\r \r ## <a name=\"start-building-a-spark-mmlib-machine-learning-app\"></a>开始生成 Spark MMLib 机器学习应用\r 1. 在 [Azure 门户](https://portal.azure.cn/)上的启动板中，单击 Spark 群集的磁贴（如果已将它固定到启动板）。 也可以单击“全部浏览” > “HDInsight 群集”导航到群集。   \r 1. 在 Spark 群集边栏选项卡中单击“群集仪表板”，然后单击“Jupyter Notebook”。 出现提示时，请输入群集的管理员凭据。\r \r    > [!NOTE]\r    > 也可以在浏览器中打开以下 URL 访问群集的 Jupyter 笔记本。 将 **CLUSTERNAME** 替换为群集的名称：\r    >\r    > `https://CLUSTERNAME.azurehdinsight.cn/jupyter`\r    >\r    >\r 1. 创建 Notebook。 单击“新建”，然后单击“PySpark”。\r \r     ![创建新的 Jupyter Notebook](./media/apache-spark-machine-learning-mllib-ipython/spark-machine-learning-create-jupyter.png \"创建新的 Jupyter Notebook\")\r     \r 1. 随即创建新笔记本，并以 Untitled.pynb 名称打开。 单击顶部的笔记本名称，并输入一个友好名称。\r \r     ![提供笔记本的名称](./media/apache-spark-machine-learning-mllib-ipython/spark-machine-learning-name-jupyter.png \"提供笔记本的名称\")\r     \r 1. 使用笔记本是使用 PySpark 内核创建的，因此不需要显式创建任何上下文。 运行第一个代码单元格时，系统自动为你创建 Spark 和 Hive 上下文。 可以通过导入此方案所需的类型来开始构建机器学习应用程序。 为此，请将光标放在单元格中，并按 **SHIFT + ENTER**。\r \r         from pyspark.ml import Pipeline\r         from pyspark.ml.classification import LogisticRegression\r         from pyspark.ml.feature import HashingTF, Tokenizer\r         from pyspark.sql import Row\r         from pyspark.sql.functions import UserDefinedFunction\r         from pyspark.sql.types import *\r \r ## <a name=\"construct-an-input-dataframe\"></a>构造输入数据帧\r 可以使用 `sqlContext` 对结构化数据执行转换。 第一个任务是将示例数据 ((**Food_Inspections1.csv**)) 加载到 Spark SQL 数据帧中。\r \r 1. 由于原始数据是 CSV 格式，所以需要使用 Spark 上下文将文件的每一行拉取到内存中作为非结构化文本，并使用 Python 的 CSV 库单独分析每一行。\r \r         def csvParse(s):\r             import csv\r             from StringIO import StringIO\r             sio = StringIO(s)\r             value = csv.reader(sio).next()\r             sio.close()\r             return value\r \r         inspections = sc.textFile('wasb:///HdiSamples/HdiSamples/FoodInspectionData/Food_Inspections1.csv')\\\r                         .map(csvParse)\r 1. 我们现在有 CSV 文件，可用作 RDD。  若要了解数据的架构，请从 RDD 中检索一行。\r \r         inspections.take(1)\r \r     应该看到如下输出：\r \r         # -----------------\r         # THIS IS AN OUTPUT\r         # -----------------\r \r         [['413707',\r           'LUNA PARK INC',\r           'LUNA PARK  DAY CARE',\r           '2049789',\r           \"Children's Services Facility\",\r           'Risk 1 (High)',\r           '3250 W FOSTER AVE ',\r           'CHICAGO',\r           'IL',\r           '60625',\r           '09/21/2010',\r           'License-Task Force',\r           'Fail',\r           '24. DISH WASHING FACILITIES: PROPERLY DESIGNED, CONSTRUCTED, MAINTAINED, INSTALLED, LOCATED AND OPERATED - Comments: All dishwashing machines must be of a type that complies with all requirements of the plumbing section of the Municipal Code of Shanghai and Rules and Regulation of the Board of Health. OBSEVERD THE 3 COMPARTMENT SINK BACKING UP INTO THE 1ST AND 2ND COMPARTMENT WITH CLEAR WATER AND SLOWLY DRAINING OUT. INST NEED HAVE IT REPAIR. CITATION ISSUED, SERIOUS VIOLATION 7-38-030 H000062369-10 COURT DATE 10-28-10 TIME 1 P.M. ROOM 107 400 W. SURPERIOR. | 36. LIGHTING: REQUIRED MINIMUM FOOT-CANDLES OF LIGHT PROVIDED, FIXTURES SHIELDED - Comments: Shielding to protect against broken glass falling into food shall be provided for all artificial lighting sources in preparation, service, and display facilities. LIGHT SHIELD ARE MISSING UNDER HOOD OF  COOKING EQUIPMENT AND NEED TO REPLACE LIGHT UNDER UNIT. 4 LIGHTS ARE OUT IN THE REAR CHILDREN AREA,IN THE KINDERGARDEN CLASS ROOM. 2 LIGHT ARE OUT EAST REAR, LIGHT FRONT WEST ROOM. NEED TO REPLACE ALL LIGHT THAT ARE NOT WORKING. | 35. WALLS, CEILINGS, ATTACHED EQUIPMENT CONSTRUCTED PER CODE: GOOD REPAIR, SURFACES CLEAN AND DUST-LESS CLEANING METHODS - Comments: The walls and ceilings shall be in good repair and easily cleaned. MISSING CEILING TILES WITH STAINS IN WEST,EAST, IN FRONT AREA WEST, AND BY THE 15MOS AREA. NEED TO BE REPLACED. | 32. FOOD AND NON-FOOD CONTACT SURFACES PROPERLY DESIGNED, CONSTRUCTED AND MAINTAINED - Comments: All food and non-food contact equipment and utensils shall be smooth, easily cleanable, and durable, and shall be in good repair. SPLASH GUARDED ARE NEEDED BY THE EXPOSED HAND SINK IN THE KITCHEN AREA | 34. FLOORS: CONSTRUCTED PER CODE, CLEANED, GOOD REPAIR, COVING INSTALLED, DUST-LESS CLEANING METHODS USED - Comments: The floors shall be constructed per code, be smooth and easily cleaned, and be kept clean and in good repair. INST NEED TO ELEVATE ALL FOOD ITEMS 6INCH OFF THE FLOOR 6 INCH AWAY FORM WALL.  ',\r           '41.97583445690982',\r           '-87.7107455232781',\r           '(41.97583445690982, -87.7107455232781)']]\r 1. 上面的输出让我们对输入文件架构有了一定理解。 该文件包含每个机构的名称、机构的类型、地址、检测数据和位置等等。 选择可用于预测分析的几个列，将结果分组为数据帧，然后用该数据帧创建临时表。\r \r         schema = StructType([\r         StructField(\"id\", IntegerType(), False),\r         StructField(\"name\", StringType(), False),\r         StructField(\"results\", StringType(), False),\r         StructField(\"violations\", StringType(), True)])\r \r         df = sqlContext.createDataFrame(inspections.map(lambda l: (int(l[0]), l[1], l[12], l[13])) , schema)\r         df.registerTempTable('CountResults')\r 1. 现在便有了一个可在其上执行分析操作的数据帧 `df`。 还有一个名为 **CountResults**的临时表。 数据帧中已包含四个所需的列：**ID**、**名称**、**结果**和**违规行为**。\r \r     现在获取一个小型数据样本：\r \r         df.show(5)\r \r     应该看到如下输出：\r \r         # -----------------\r         # THIS IS AN OUTPUT\r         # -----------------\r \r         +------+--------------------+-------+--------------------+\r         |    id|                name|results|          violations|\r         +------+--------------------+-------+--------------------+\r         |413707|       LUNA PARK INC|   Fail|24. DISH WASHING ...|\r         |391234|       CAFE SELMARIE|   Fail|2. FACILITIES TO ...|\r         |413751|          MANCHU WOK|   Pass|33. FOOD AND NON-...|\r         |413708|BENCHMARK HOSPITA...|   Pass|                    |\r         |413722|           JJ BURGER|   Pass|                    |\r         +------+--------------------+-------+--------------------+\r \r ## <a name=\"understand-the-data\"></a>了解数据\r 1. 让我们开始了解数据集所包含的内容。 例如，“结果”  列中有哪些不同的值？\r \r         df.select('results').distinct().show()\r \r     应该看到如下输出：\r \r         # -----------------\r         # THIS IS AN OUTPUT\r         # -----------------\r \r         +--------------------+\r         |             results|\r         +--------------------+\r         |                Fail|\r         |Business Not Located|\r         |                Pass|\r         |  Pass w/ Conditions|\r         |     Out of Business|\r         +--------------------+\r 1. 快速可视化可以帮助我们推断这些结果的分布。 临时表 **CountResults** 中已存在数据。 可以对表运行以下 SQL 查询，以更好地了解结果的分布情况。\r \r         %%sql -o countResultsdf\r         SELECT results, COUNT(results) AS cnt FROM CountResults GROUP BY results\r \r     后接 `-o countResultsdf` 的 `%%sql` magic 可确保查询输出本地保存在 Jupyter 服务器上（通常在群集的头节点）。 输出将作为 [Pandas](http://pandas.pydata.org/) 数据帧进行保存，指定名称为 **countResultsdf**。\r \r     应该会显示如下输出：\r \r     ![SQL 查询输出](./media/apache-spark-machine-learning-mllib-ipython/spark-machine-learning-query-output.png \"SQL 查询输出\")\r \r     有关 `%%sql` magic 以及可在 PySpark 内核中使用的其他 magic 的详细信息，请参阅[包含 Spark HDInsight 群集的 Jupyter Notebook 上可用的内核](apache-spark-jupyter-notebook-kernels.md#parameters-supported-with-the-sql-magic)。\r     \r 1. 还可以使用 Matplotlib（用于构建数据可视化效果的库）创建绘图。 因为必须从本地保存的 **countResultsdf** 数据帧中创建绘图，所以代码片段必须以 `%%local` magic 开头。 这可确保代码在 Jupyter 服务器上本地运行。\r \r         %%local\r         %matplotlib inline\r         import matplotlib.pyplot as plt\r \r         labels = countResultsdf['results']\r         sizes = countResultsdf['cnt']\r         colors = ['turquoise', 'seagreen', 'mediumslateblue', 'palegreen', 'coral']\r         plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors)\r         plt.axis('equal')\r \r     应该看到如下输出：\r \r     ![Spark 机器学习应用程序输出 - 包含五种不同检测结果的饼图](./media/apache-spark-machine-learning-mllib-ipython/spark-machine-learning-result-output-1.png \"Spark 机器学习结果输出\")\r     \r 1. 可以看到，检测可有 5 种不同的结果：\r \r    * 未找到企业\r    * 失败\r    * 通过\r    * 有条件通过\r    * 停业\r \r      让我们开发一个模型，它可以猜测食品检测的结果，假设是违规的情况。 由于逻辑回归是二元分类方法，因此有必要将数据分为两个类别：“失败”和“通过”。 “有条件通过”仍然属于通过，所以在定型模型时，会将这两个结果视为等效。 得到其他结果（“未找到企业”或“停止经营”）的数据没有用，所以将其从训练集中删除。 由于这两个类别占结果很小的比例，所以这样操作应该没有问题。\r 1. 继续操作并将现有数据帧 (`df`) 转换为新的数据帧，其中每个检测以“违规行为标签对”表示。 在本例中，`0.0` 标签表示失败，`1.0` 标签表示成功，`-1.0` 标签表示除了这两个以外的结果。 计算新数据帧时，将筛选出这些其他结果。\r \r         def labelForResults(s):\r             if s == 'Fail':\r                 return 0.0\r             elif s == 'Pass w/ Conditions' or s == 'Pass':\r                 return 1.0\r             else:\r                 return -1.0\r         label = UserDefinedFunction(labelForResults, DoubleType())\r         labeledData = df.select(label(df.results).alias('label'), df.violations).where('label >= 0')\r \r     让我们从标记的数据中检索一行，看看它是什么样子。\r \r         labeledData.take(1)\r \r     应该看到如下输出：\r \r         # -----------------\r         # THIS IS AN OUTPUT\r         # -----------------\r \r         [Row(label=0.0, violations=u\"41. PREMISES MAINTAINED FREE OF LITTER, UNNECESSARY ARTICLES, CLEANING  EQUIPMENT PROPERLY STORED - Comments: All parts of the food establishment and all parts of the property used in connection with the operation of the establishment shall be kept neat and clean and should not produce any offensive odors.  REMOVE MATTRESS FROM SMALL DUMPSTER. | 35. WALLS, CEILINGS, ATTACHED EQUIPMENT CONSTRUCTED PER CODE: GOOD REPAIR, SURFACES CLEAN AND DUST-LESS CLEANING METHODS - Comments: The walls and ceilings shall be in good repair and easily cleaned.  REPAIR MISALIGNED DOORS AND DOOR NEAR ELEVATOR.  DETAIL CLEAN BLACK MOLD LIKE SUBSTANCE FROM WALLS BY BOTH DISH MACHINES.  REPAIR OR REMOVE BASEBOARD UNDER DISH MACHINE (LEFT REAR KITCHEN). SEAL ALL GAPS.  REPLACE MILK CRATES USED IN WALK IN COOLERS AND STORAGE AREAS WITH PROPER SHELVING AT LEAST 6' OFF THE FLOOR.  | 38. VENTILATION: ROOMS AND EQUIPMENT VENTED AS REQUIRED: PLUMBING: INSTALLED AND MAINTAINED - Comments: The flow of air discharged from kitchen fans shall always be through a duct to a point above the roofline.  REPAIR BROKEN VENTILATION IN MEN'S AND WOMEN'S WASHROOMS NEXT TO DINING AREA. | 32. FOOD AND NON-FOOD CONTACT SURFACES PROPERLY DESIGNED, CONSTRUCTED AND MAINTAINED - Comments: All food and non-food contact equipment and utensils shall be smooth, easily cleanable, and durable, and shall be in good repair.  REPAIR DAMAGED PLUG ON LEFT SIDE OF 2 COMPARTMENT SINK.  REPAIR SELF CLOSER ON BOTTOM LEFT DOOR OF 4 DOOR PREP UNIT NEXT TO OFFICE.\")]\r \r ## <a name=\"create-a-logistic-regression-model-from-the-input-dataframe\"></a>从输入数据帧创建逻辑回归模型\r 最后一项任务是将标签数据转换为逻辑回归可分析的格式。 逻辑回归算法的输入应为一组“标签特征向量对”，其中“特征向量”是表示输入点的数字向量。 因此，我们需要将“违规”列（它是半结构化的，并且包含大量自定义文本形式的注释）转换为机器容易理解的实数数组。\r \r 用于处理自然语言的一种标准机器学习方法是为每个不同的单词分配一个“索引”，并将一个向量传递给机器学习算法，以使每个索引的值包含该词在文本字符串中的相对频率。\r \r MLlib 提供了执行此操作的一种简单方法。 首先，“标记”每个违规字符串以获取每个字符串中的各个单词。 然后使用 `HashingTF` 将每组标记转换为特征向量，随后可将其传递给逻辑回归算法以构建模型。 将使用“管道”按顺序执行所有这些步骤。\r \r     tokenizer = Tokenizer(inputCol=\"violations\", outputCol=\"words\")\r     hashingTF = HashingTF(inputCol=tokenizer.getOutputCol(), outputCol=\"features\")\r     lr = LogisticRegression(maxIter=10, regParam=0.01)\r     pipeline = Pipeline(stages=[tokenizer, hashingTF, lr])\r \r     model = pipeline.fit(labeledData)\r \r ## <a name=\"evaluate-the-model-on-a-separate-test-dataset\"></a>在单独的测试数据集上评估模型\r 我们可以使用先前创建的模型，基于观察到的违规，预测  新的检测的结果。 在数据集 **Food_Inspections1.csv** 上训练此模型。 使用第二个数据集 **Food_Inspections2.csv** 来评估此模型对新数据的功能性。 第二个数据集 (**Food_Inspections2.csv**) 应已存在于与群集关联的默认存储容器中。\r \r 1. 以下代码段创建新的数据帧 **predictionsDf**，其中包含模型生成的预测。 该代码段还基于数据帧创建名为 **Predictions** 的临时表。\r \r         testData = sc.textFile('wasb:///HdiSamples/HdiSamples/FoodInspectionData/Food_Inspections2.csv')\\\r                  .map(csvParse) \\\r                  .map(lambda l: (int(l[0]), l[1], l[12], l[13]))\r         testDf = sqlContext.createDataFrame(testData, schema).where(\"results = 'Fail' OR results = 'Pass' OR results = 'Pass w/ Conditions'\")\r         predictionsDf = model.transform(testDf)\r         predictionsDf.registerTempTable('Predictions')\r         predictionsDf.columns\r \r     应该看到如下输出：\r \r         # -----------------\r         # THIS IS AN OUTPUT\r         # -----------------\r \r         ['id',\r          'name',\r          'results',\r          'violations',\r          'words',\r          'features',\r          'rawPrediction',\r          'probability',\r          'prediction']\r 1. 查看其中的一个预测。 运行此代码段：\r \r         predictionsDf.take(1)\r \r    显示了对测试数据集中第一个条目的预测。\r 1. `model.transform()` 方法对具有相同架构的任何新数据应用相同的转换，并得出如何对数据进行分类的预测。 可以做一些简单的统计，来了解预测的准确性：\r \r         numSuccesses = predictionsDf.where(\"\"\"(prediction = 0 AND results = 'Fail') OR\r                                               (prediction = 1 AND (results = 'Pass' OR\r                                                                    results = 'Pass w/ Conditions'))\"\"\").count()\r         numInspections = predictionsDf.count()\r \r         print \"There were\", numInspections, \"inspections and there were\", numSuccesses, \"successful predictions\"\r         print \"This is a\", str((float(numSuccesses) / float(numInspections)) * 100) + \"%\", \"success rate\"\r \r     输出如下所示：\r \r         # -----------------\r         # THIS IS AN OUTPUT\r         # -----------------\r \r         There were 9315 inspections and there were 8087 successful predictions\r         This is a 86.8169618894% success rate\r \r     配合使用 Spark 和逻辑回归提供了违规描述（英语）与某个给定企业是否会通过食品检验之间关系的准确模型。\r \r ## <a name=\"create-a-visual-representation-of-the-prediction\"></a>创建预测的可视化表示形式\r 现在可以构造最终的可视化效果，以帮助推断此测试的结果。\r \r 1. 首先，我们从之前创建的 **Predictions** 临时表中提取不同的预测和结果。 以下查询将输出分为 *true_positive*、*false_positive*、*true_negative* 和 *false_negative*。 在以下查询中，将使用 `-q` 关闭可视化，还会（使用 `-o`）将输出保存为随后可与 `%%local` magic 配合使用的数据帧。\r \r         %%sql -q -o true_positive\r         SELECT count(*) AS cnt FROM Predictions WHERE prediction = 0 AND results = 'Fail'\r \r         %%sql -q -o false_positive\r         SELECT count(*) AS cnt FROM Predictions WHERE prediction = 0 AND (results = 'Pass' OR results = 'Pass w/ Conditions')\r \r         %%sql -q -o true_negative\r         SELECT count(*) AS cnt FROM Predictions WHERE prediction = 1 AND results = 'Fail'\r \r         %%sql -q -o false_negative\r         SELECT count(*) AS cnt FROM Predictions WHERE prediction = 1 AND (results = 'Pass' OR results = 'Pass w/ Conditions')\r 1. 最后，使用以下代码段通过 **Matplotlib**生成绘图。\r \r         %%local\r         %matplotlib inline\r         import matplotlib.pyplot as plt\r \r         labels = ['True positive', 'False positive', 'True negative', 'False negative']\r         sizes = [true_positive['cnt'], false_positive['cnt'], false_negative['cnt'], true_negative['cnt']]\r         colors = ['turquoise', 'seagreen', 'mediumslateblue', 'palegreen', 'coral']\r         plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors)\r         plt.axis('equal')\r \r     应会看到以下输出：\r \r     ![Spark 机器学习应用程序输出 - 显示失败食品检测结果百分比的饼图](./media/apache-spark-machine-learning-mllib-ipython/spark-machine-learning-result-output-2.png \"Spark 机器学习结果输出\")\r \r     在该图中，“正”的结果指未通过食品检验，而“负”的结果指通过检验。\r \r ## <a name=\"shut-down-the-notebook\"></a>关闭笔记本\r 完成运行应用程序之后，应该要关闭 Notebook 以释放资源。 为此，请在 Notebook 的“文件”菜单中，单击“关闭并停止”。 这会关闭 Notebook。\r \r ## <a name=\"seealso\"></a>另请参阅\r * [概述：Azure HDInsight 上的 Apache Spark](apache-spark-overview.md)\r \r ### <a name=\"scenarios\"></a>方案\r * [Spark 和 BI：使用 HDInsight 中的 Spark 和 BI 工具执行交互式数据分析](apache-spark-use-bi-tools.md)\r * [Spark 和机器学习：使用 HDInsight 中的 Spark 对使用 HVAC 数据生成温度进行分析](apache-spark-ipython-notebook-machine-learning.md)\r * [Spark 流式处理：使用 HDInsight 中的 Spark 生成实时流式处理应用程序](apache-spark-eventhub-streaming.md)\r * [使用 HDInsight 中的 Spark 分析网站日志](apache-spark-custom-library-website-log-analysis.md)\r \r ### <a name=\"create-and-run-applications\"></a>创建和运行应用程序\r * [使用 Scala 创建独立的应用程序](apache-spark-create-standalone-application.md)\r * [使用 Livy 在 Spark 群集中远程运行作业](apache-spark-livy-rest-interface.md)\r \r ### <a name=\"tools-and-extensions\"></a>工具和扩展\r * [使用适用于 IntelliJ IDEA 的 HDInsight 工具插件创建和提交 Spark Scala 应用程序](apache-spark-intellij-tool-plugin.md)\r * [使用用于 IntelliJ IDEA 的 HDInsight 工具插件远程调试 Spark 应用程序](apache-spark-intellij-tool-plugin-debug-jobs-remotely.md)\r * [在 HDInsight 上的 Spark 群集中使用 Zeppelin 笔记本](apache-spark-zeppelin-notebook.md)\r * [在 HDInsight 的 Spark 群集中可用于 Jupyter 笔记本的内核](apache-spark-jupyter-notebook-kernels.md)\r * [Use external packages with Jupyter notebooks（将外部包与 Jupyter 笔记本配合使用）](apache-spark-jupyter-notebook-use-external-packages.md)\r * [Install Jupyter on your computer and connect to an HDInsight Spark cluster（在计算机上安装 Jupyter 并连接到 HDInsight Spark 群集）](apache-spark-jupyter-notebook-install-locally.md)\r \r ### <a name=\"manage-resources\"></a>管理资源\r * [管理 Azure HDInsight 中 Apache Spark 群集的资源](apache-spark-resource-manager.md)\r * [Track and debug jobs running on an Apache Spark cluster in HDInsight（跟踪和调试 HDInsight 中的 Apache Spark 群集上运行的作业）](apache-spark-job-debugging.md)\r \r \r \r \r <!--Update_Description: update wording and link references-->"}