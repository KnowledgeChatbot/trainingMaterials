{"Title":"MySQL Database on Azure如何在客户端配置验证机制确认长连接有效性","Description":"针对用户在使用MySQL Database on Azure中遇到的一些常见技术问题,提供快速解答。如果您仍存有疑问,欢迎联系技术支持。","Content":"\r # 如何在客户端配置验证机制确认长连接有效性\r \r > [!div class=\"op_single_selector\"]\r > * [中文](https://docs.azure.cn/zh-cn/mysql/mysql-database-validationquery)\r > * [英文](https://docs.azure.cn/en-us/mysql/mysql-database-validationquery)\r \r 在[如何高效连接到MySQL Database on Azure](./mysql-database-connection-pool.md)一文中谈到，为了更好地使用数据库的连接资源，我们推荐您使用连接池或长连接的方法进行数据库访问。但需要注意的是连接池或长连接也存在时效性。这是因为服务器会设置超时机制，如果一个连接在一段时间内处于闲置状态，服务器就会关闭这个链接，以释放不必要的资源占用。这就造成了如果客户端长时间在idle状态，再次访问数据库较慢的问题，相当于客户端与服务器间重新建立了连接请求。因此，为了保障在使用过程中，连接的有效性，本文以Tomcat JDBC 连接池为例，介绍如何在客户端配置验证机制确认长连接的有效性。\r \r 通过设定testOnBorrow参数，在有新的请求时，如果连接池中有闲置的可用连接，在返回这个闲置连接之前，连接池会自动验证这个连接的有效性，如果有效，直接返回，如果无效，连接池会回收这个无效连接，重新建立一个新的有效连接并返回。这样会有效地保障数据库的访问速度。\r \r 具体设置用户可参考[JDBC Connection Pool官方介绍文档](https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html#Common_Attributes)。主要需要配置以下三个参数： TestOnBorrow (设为ture), ValidationQuery (设为 SELECT 1), ValidationQueryTimeout (设为1)，具体示例代码如下：\r \r ```\r  public class SimpleTestOnBorrowExample {\r       public static void main(String[] args) throws Exception {\r           PoolProperties p = new PoolProperties();\r           p.setUrl(\"jdbc:mysql://localhost:3306/mysql\");\r           p.setDriverClassName(\"com.mysql.jdbc.Driver\");\r           p.setUsername(\"root\");\r           p.setPassword(\"password\");\r             // The indication of whether objects will be validated by the idle object evictor (if any). \r             // If an object fails to validate, it will be dropped from the pool. \r             // NOTE - for a true value to have any effect, the validationQuery or validatorClassName parameter must be set to a non-null string. \r           p.setTestOnBorrow(true); \r \r             // The SQL query that will be used to validate connections from this pool before returning them to the caller.\r             // If specified, this query does not have to return any data, it just can't throw a SQLException.\r           p.setValidationQuery(\"SELECT 1\");\r \r             // The timeout in seconds before a connection validation queries fail. \r             // This works by calling java.sql.Statement.setQueryTimeout(seconds) on the statement that executes the validationQuery. \r             // The pool itself doesn't timeout the query, it is still up to the JDBC driver to enforce query timeouts. \r             // A value less than or equal to zero will disable this feature.\r           p.setValidationQueryTimeout(1);\r             // set other usefull pool properties.\r           DataSource datasource = new DataSource();\r           datasource.setPoolProperties(p);\r \r           Connection con = null;\r           try {\r             con = datasource.getConnection();\r             // execute your query here\r           } finally {\r             if (con!=null) try {con.close();}catch (Exception ignore) {}\r           }\r       }\r   }\r ```"}