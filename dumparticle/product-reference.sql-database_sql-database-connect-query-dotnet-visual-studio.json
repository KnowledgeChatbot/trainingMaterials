{"Title":"使用 Visual Studio 和 .NET 查询 Azure SQL 数据库","Description":"本主题介绍如何使用 Visual Studio 创建可连接到 Azure SQL 数据库的程序并使用 Transact-SQL 语句对其进行查询。","Content":"# <a name=\"use-net-c-with-visual-studio-to-connect-and-query-an-azure-sql-database\"></a>使用 .NET (C#) 和 Visual Studio 连接和查询 Azure SQL 数据库\r \r 本快速入门教程演示了如何使用 [.NET framework](https://www.microsoft.com/net/) 与 Visual Studio 创建可连接到 Azure SQL 数据库的 C# 程序，并使用 Transact-SQL 语句查询数据。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 若要完成本快速入门教程，请确保具备以下条件：\r \r - Azure SQL 数据库。 此快速入门使用以下某个快速入门中创建的资源： \r \r    - [创建 DB - 门户](sql-database-get-started-portal.md)\r    - [创建 DB - CLI](sql-database-get-started-cli.md)\r    - [创建 DB - PowerShell](sql-database-get-started-powershell.md)\r \r - 针对用于本快速入门教程的计算机的公共 IP 地址制定[服务器级防火墙规则](sql-database-get-started-portal.md#create-a-server-level-firewall-rule)。\r - 已安装 [Visual Studio Community 2017、Visual Studio Professional 2017 或 Visual Studio Enterprise 2017](https://www.visualstudio.com/downloads/)。\r \r ## <a name=\"sql-server-connection-information\"></a>SQL Server 连接信息\r \r 获取连接到 Azure SQL 数据库所需的连接信息。 在后续过程中，将需要完全限定的服务器名称、数据库名称和登录信息。\r \r 1. 登录到 [Azure 门户](https://portal.azure.cn/)。\r 2. 从左侧菜单中选择“SQL 数据库”，并单击“SQL 数据库”页上的数据库。 \r 3. 在数据库的“概览”页上，查看如下图所示的完全限定的服务器名称。 将鼠标悬停在服务器名称上即可打开“通过单击进行复制”选项。 \r \r    ![server-name](./media/sql-database-connect-query-dotnet/server-name.png) \r \r 4. 如果忘了 Azure SQL 数据库服务器的登录信息，请导航到 SQL 数据库服务器页，以查看服务器管理员名称。 必要时可重置密码。\r \r 5. 单击“显示数据库连接字符串”。\r \r 6. 查看完整的 ADO.NET 连接字符串。\r \r     ![ADO.NET 连接字符串](./media/sql-database-connect-query-dotnet/adonet-connection-string.png)\r \r > [!IMPORTANT]\r > 对于在其上执行本教程操作的计算机，必须为其公共 IP 地址制定防火墙规则。 如果使用其他计算机或其他公共 IP 地址，则[使用 Azure 门户创建服务器级防火墙规则](sql-database-get-started-portal.md#create-a-server-level-firewall-rule)。 \r >\r \r ## <a name=\"create-a-new-visual-studio-project\"></a>新建 Visual Studio 项目\r \r 1. 在 Visual Studio 中，依次选择“文件”、“新建”、“项目”。 \r 2. 在“新建项目”对话框中，展开“Visual C#”。\r 3. 选择“控制台应用”，然后输入“sqltest”作为项目名称。\r 4. 单击“确定”，在 Visual Studio 中创建并打开新项目\r 4. 在“解决方案资源管理器”中，右键单击“sqltest”，然后单击“管理 NuGet 包”。 \r 5. 转到“浏览”，搜索 ```System.Data.SqlClient```，找到后将其选中。\r 6. 在“System.Data.SqlClient”页中单击“安装”。\r 7. 安装完成后，查看所做的更改，然后单击“确定”以关闭“预览”窗口。 \r 8. 如果显示“接受许可证”窗口，则单击“我接受”。\r \r ## <a name=\"insert-code-to-query-sql-database\"></a>插入用于查询 SQL 数据库的代码\r 1. 切换到 Program.cs（或者必要时将其打开）\r \r 2. 将 Program.cs 的内容替换为以下代码，为服务器、数据库、用户和密码添加相应的值。\r \r ```csharp\r using System;\r using System.Data.SqlClient;\r using System.Text;\r \r namespace sqltest\r {\r     class Program\r     {\r         static void Main(string[] args)\r         {\r             try \r             { \r                 SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();\r                 builder.DataSource = \"your_server.database.chinacloudapi.cn\"; \r                 builder.UserID = \"your_user\";            \r                 builder.Password = \"your_password\";     \r                 builder.InitialCatalog = \"your_database\";\r \r                 using (SqlConnection connection = new SqlConnection(builder.ConnectionString))\r                 {\r                     Console.WriteLine(\"\\nQuery data example:\");\r                     Console.WriteLine(\"=========================================\\n\");\r \r                     connection.Open();       \r                     StringBuilder sb = new StringBuilder();\r                     sb.Append(\"SELECT TOP 20 pc.Name as CategoryName, p.name as ProductName \");\r                     sb.Append(\"FROM [SalesLT].[ProductCategory] pc \");\r                     sb.Append(\"JOIN [SalesLT].[Product] p \");\r                     sb.Append(\"ON pc.productcategoryid = p.productcategoryid;\");\r                     String sql = sb.ToString();\r \r                     using (SqlCommand command = new SqlCommand(sql, connection))\r                     {\r                         using (SqlDataReader reader = command.ExecuteReader())\r                         {\r                             while (reader.Read())\r                             {\r                                 Console.WriteLine(\"{0} {1}\", reader.GetString(0), reader.GetString(1));\r                             }\r                         }\r                     }                    \r                 }\r             }\r             catch (SqlException e)\r             {\r                 Console.WriteLine(e.ToString());\r             }\r             Console.ReadLine();\r         }\r     }\r }\r ```\r \r ## <a name=\"run-the-code\"></a>运行代码\r \r 1. 按 **F5** 运行应用程序。\r 2. 验证是否已返回前 20 行，然后关闭应用程序窗口。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r - 了解如何在 Windows/Linux/macOS 中[使用 .NET Core 连接和查询 Azure SQL 数据库](sql-database-connect-query-dotnet-core.md)。  \r - 了解[在 Windows/Linux/macOS 中通过命令行使用 .NET Core 入门](https://docs.microsoft.com/dotnet/core/tutorials/using-with-xplat-cli)。\r - 了解如何[使用 SSMS 设计第一个 Azure SQL 数据库](sql-database-design-first-database.md)，或者如何[使用 .NET 设计第一个 Azure SQL 数据库](sql-database-design-first-database-csharp.md)。\r - 有关 .NET 的详细信息，请参阅 [.NET 文档](https://docs.microsoft.com/dotnet/)。\r "}