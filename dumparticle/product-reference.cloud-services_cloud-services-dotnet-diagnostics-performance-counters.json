{"Title":"在 Azure 诊断中使用性能计数器","Description":"在 Azure 云服务或虚拟机中使用性能计数器查找瓶颈和优化性能。","Content":"# <a name=\"create-and-use-performance-counters-in-an-azure-application\"></a>在 Azure 应用程序中创建和使用性能计数器\r \r 本文介绍性能计数器的好处，以及如何将其置于 Azure 应用程序中。可以使用性能计数器收集数据，查找瓶颈以及优化系统和应用程序的性能。\r \r 还可以收集适用于 Windows Server、IIS 和 ASP.NET 的性能计数器，并可将其用于确定 Azure Web 角色、辅助角色和虚拟机的运行状况。 此外，还可以创建和使用自定义性能计数器。  \r \r 可以检查性能计数器数据\r 1. 直接在应用程序主机上进行，使用远程桌面访问性能计数器工具\r 2. 通过 System Center Operations Manager 使用 Azure Management Pack 进行\r 3. 使用其他监视工具访问传输到 Azure 存储的诊断数据。有关详细信息，请参阅[在 Azure 存储中存储和查看诊断数据](https://msdn.microsoft.com/zh-cn/library/azure/hh411534.aspx)。  \r \r 有关在 [Azure 门户](http://portal.azure.cn)中监视应用程序性能的详细信息，请参阅[如何监视云服务](./cloud-services-how-to-monitor.md)。\r \r 有关创建日志记录和跟踪策略以及使用诊断和其他技术排查问题及优化 Azure 应用程序的其他深入指南，请参阅[有关开发 Azure 应用程序的问题排查最佳实践](https://msdn.microsoft.com/zh-cn/library/azure/hh771389.aspx)。\r \r ## <a name=\"enable-performance-counter-monitoring\"></a>启用性能计数器监视\r \r 默认情况下，不启用性能计数器。应用程序或启动任务必须修改默认诊断代理配置，以包括要为每个角色实例监视的特定性能计数器。\r \r ### <a name=\"performance-counters-available-for-azure\"></a>适用于 Azure 的性能计数器\r \r Azure 提供了一部分适用于 Windows Server、IIS 和 ASP.NET 堆栈的性能计数器。下表列出了一些特别适用于 Azure 应用程序的性能计数器。\r \r |计数器类别：对象（实例）|计数器名称 |引用|\r |---|---|---|\r |.NET CLR Exceptions(Global)|引发的异常数/秒   |异常性能计数器|\r |.NET CLR Memory(Global)    |GC 中的时间百分比            |内存性能计数器|\r |ASP.NET                      |应用程序重新启动    |ASP.NET 性能计数器|\r |ASP.NET                      |请求执行时间  |ASP.NET 性能计数器|\r |ASP.NET                      |断开连接的请求数   |ASP.NET 性能计数器|\r |ASP.NET                      |工作进程重新启动 |ASP.NET 性能计数器|\r |ASP.NET Applications(Total)|请求总数        |ASP.NET 性能计数器|\r |ASP.NET Applications(Total)|请求数/秒          |ASP.NET 性能计数器|\r |ASP.NET v4.0.30319           |请求执行时间  |ASP.NET 性能计数器|\r |ASP.NET v4.0.30319           |请求等待时间       |ASP.NET 性能计数器|\r |ASP.NET v4.0.30319           |当前请求        |ASP.NET 性能计数器|\r |ASP.NET v4.0.30319           |排队的请求数         |ASP.NET 性能计数器|\r |ASP.NET v4.0.30319           |拒绝的请求数       |ASP.NET 性能计数器|\r |内存                       |可用兆字节数        |内存性能计数器|\r |内存                       |提交的字节数         |内存性能计数器|\r |Processor(_Total)            |处理器时间百分比        |ASP.NET 性能计数器|\r |TCPv4                        |连接失败     |TCP 对象|\r |TCPv4                        |已建立连接 |TCP 对象|\r |TCPv4                        |连接重置       |TCP 对象|\r |TCPv4                        |发送的段数/秒       |TCP 对象|\r |Network Interface(*)         |收到的字节数/秒      |网络接口对象|\r |Network Interface(*)         |发送的字节数/秒          |网络接口对象|\r |Network Interface(Microsoft Virtual Machine Bus Network Adapter _2)|收到的字节数/秒|网络接口对象|\r |Network Interface(Microsoft Virtual Machine Bus Network Adapter _2)|发送的字节数/秒|网络接口对象|\r |Network Interface(Microsoft Virtual Machine Bus Network Adapter _2)|字节总数/秒|网络接口对象|\r \r ## <a name=\"create-and-add-custom-performance-counters-to-your-application\"></a>创建自定义性能计数器并将其添加到应用程序\r \r Azure 支持针对 Web 角色和辅助角色创建和修改自定义性能计数器。这些计数器可用于跟踪和监视应用程序特定行为。可以使用提升的权限通过启动任务、Web 角色或辅助角色创建和删除自定义性能计数器类别和说明符。\r \r > [!NOTE]\r > 用于更改自定义性能计数器的代码必须具有提升的权限才能运行。 如果代码位于 Web 角色或辅助角色中，则该角色必须在 ServiceDefinition.csdef 文件中包括标记 <Runtime executionContext=\"elevated\" /> 才能使角色正常初始化。\r >\r >\r \r 可以使用诊断代理将自定义性能计数器数据发送到 Azure 存储。\r \r 标准性能计数器数据由 Azure 进程生成。必须由 Web 角色或辅助角色应用程序创建自定义性能计数器数据。请参阅[性能计数器类型](https://msdn.microsoft.com/zh-cn/library/z573042h.aspx)，以了解有关可以存储在自定义性能计数器中的数据类型。\r \r ## <a name=\"store-and-view-performance-counter-data\"></a>存储和查看性能计数器数据\r \r Azure 缓存性能计数器数据和其他诊断信息。当正在运行的角色实例使用远程桌面访问权限查看性能监视器之类的工具时，此数据可用于进行远程监视。若要保留角色实例以外的数据，诊断代理必须将数据传输到 Azure 存储。缓存的性能计数器数据的大小限制可以在诊断代理中配置，也可以将其配置为所有诊断数据的共享限制的一部分。有关如何设置缓冲区大小的详细信息，请参阅 [OverallQuotaInMB](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.diagnostics.diagnosticmonitorconfiguration.overallquotainmb.aspx) 和 [DirectoriesBufferConfiguration](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.diagnostics.directoriesbufferconfiguration.aspx)。请参阅[在 Azure 存储中存储和查看诊断数据](https://msdn.microsoft.com/zh-cn/library/azure/hh411534.aspx)，了解通过设置诊断代理将数据传输到存储帐户。\r \r 每个配置的性能计数器实例均按指定的采样率进行记录，并通过计划的传输请求或按需传输请求将采样的数据传输到存储帐户。可以将自动传输计划为每分钟一次。通过诊断代理传输的性能计数器数据存储在存储帐户的 WADPerformanceCountersTable 表中。该表可以通过标准 Azure 存储 API 方法进行访问和查询。请参阅 [Azure 性能计数器示例](http://code.msdn.microsoft.com/Windows-Azure-PerformanceCo-7d80ebf9)，以获取通过 WADPerformanceCountersTable 表查询和显示性能计数器数据的示例。\r \r >[!NOTE]\r > 根据诊断代理传输频率和队列延迟，存储帐户中的最新性能计数器数据可能会过时数分钟。\r >\r >\r \r ## <a name=\"enable-performance-counters-using-diagnostics-configuration-file\"></a>使用诊断配置文件启用性能计数器\r \r 使用以下过程在 Azure 应用程序中启用性能计数器。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 本部分假定已将诊断监视器导入应用程序中，并且已将诊断配置文件（SDK 2.4 及更低版本中的 diagnostics.wadcfg，或 SDK 2.5 及更高版本中的 diagnostics.wadcfgx）添加到 Visual Studio 解决方案中。 请参阅[在 Azure 云服务和虚拟机中启用诊断](./cloud-services-dotnet-diagnostics.md)中的步骤 1 和 2，获取详细信息。\r \r ## <a name=\"step-1-collect-and-store-data-from-performance-counters\"></a>步骤 1：通过性能计数器收集和存储数据\r \r 将诊断文件添加到 Visual Studio 解决方案后，可以在 Azure 应用程序中配置性能计数器数据的收集和存储。 通过将性能计数器添加到诊断文件可做到这一点。 首先，在实例中收集诊断数据（包括性能计数器）。 然后，将该数据保留到 Azure 表服务中的 WADPerformanceCountersTable 表，因此还需要在应用程序中指定存储帐户。 如果在计算模拟器中本地测试应用程序，则也可在存储模拟器中本地存储诊断数据。 必须先转到 [Azure 门户](http://portal.azure.com/)并创建经典存储帐户，然后才能存储诊断数据。 最佳做法是在 Azure 应用程序所在的地理位置找到存储帐户。 通过将 Azure 应用程序和存储帐户保存在同一地理位置，可以避免支付外部带宽费用和减少延迟。\r \r ### <a name=\"add-performance-counters-to-the-diagnostics-file\"></a>将性能计数器添加到诊断文件\r \r 可以使用多个计数器。下例介绍了建议用于 Web 和辅助角色监视的几个性能计数器。\r \r 打开诊断文件（在 SDK 2.4 及更低版本中为 diagnostics.wadcfg，在 SDK 2.5 及更高版本中为 diagnostics.wadcfgx），将以下代码添加到 DiagnosticMonitorConfiguration 元素中：\r \r ```xml\r <PerformanceCounters bufferQuotaInMB=\"0\" scheduledTransferPeriod=\"PT30M\">\r    <PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT30S\" />\r \r <!-- Use the Process(w3wp) category counters in a web role -->\r \r    <PerformanceCounterConfiguration counterSpecifier=\"\\Process(w3wp)\\% Processor Time\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\Process(w3wp)\\Private Bytes\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\Process(w3wp)\\Thread Count\" sampleRate=\"PT30S\" />\r \r <!-- Use the Process(WaWorkerHost) category counters in a worker role.\r    <PerformanceCounterConfiguration counterSpecifier=\"\\Process(WaWorkerHost)\\% Processor Time\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\Process(WaWorkerHost)\\Private Bytes\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\Process(WaWorkerHost)\\Thread Count\" sampleRate=\"PT30S\" />\r -->\r \r    <PerformanceCounterConfiguration counterSpecifier=\"\\.NET CLR Interop(_Global_)# of marshalling\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\.NET CLR Loading(_Global_)\\% Time Loading\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\.NET CLR LocksAndThreads(_Global_)\\Contention Rate / sec\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\.NET CLR Memory(_Global_)# Bytes in all Heaps\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\.NET CLR Networking(_Global_)\\Connections Established\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\.NET CLR Remoting(_Global_)\\Remote Calls/sec\" sampleRate=\"PT30S\" />\r    <PerformanceCounterConfiguration counterSpecifier=\"\\.NET CLR Jit(_Global_)\\% Time in Jit\" sampleRate=\"PT30S\" />\r </PerformanceCounters>\r ```\r \r bufferQuotaInMB 属性，指定可用于数据收集类型（Azure 日志、IIS 日志等）的文件系统存储的最大量。 默认值为 0。 在达到配额时，将删除最旧的数据，因为将添加新数据。 所有 bufferQuotaInMB 属性的总和必须大于 OverallQuotaInMB 特性的值。 有关确定收集诊断数据需要多少存储的更多详细讨论，请参阅 [有关开发 Azure 应用程序的问题排查最佳实践](https://msdn.microsoft.com/zh-cn/library/windowsazure/hh771389.aspx)中的“设置 WAD”一节。\r \r scheduledTransferPeriod 特性，指定计划数据传输之间的时间间隔，取整为最接近的分钟数。 在下面的示例中，将其设置为 PT30M（30 分钟）。 将传输时间段设置为较小的值（如 1 分钟）会对应用程序的生产性能产生负面影响，但在测试时有助于快速查看诊断信息。 计划的传输时间段应足够小以确保不会在实例上覆盖诊断数据，但也应足够大以确保不会影响应用程序的性能。\r \r counterSpecifier 属性指定要收集的性能计数器。sampleRate 属性指定性能计数器的采样速度（此示例中为 30 秒）。\r \r 添加要收集的性能计数器后，将更改保存到诊断文件。接下来，需要指定将诊断数据保留到的存储帐户。\r \r ### <a name=\"specify-the-storage-account\"></a>指定存储帐户\r \r 若要将诊断信息保存到 Azure 存储帐户，则必须在服务配置 (ServiceConfiguration.cscfg) 文件中指定连接字符串。\r \r 对于 Azure SDK 2.5，可在 diagnostics.wadcfgx 文件中指定存储帐户。\r \r > [!NOTE]\r > 这些说明仅适用于 Azure SDK 2.4 及更低版本。 对于 Azure SDK 2.5，可在 diagnostics.wadcfgx 文件中指定存储帐户。\r >\r >\r \r 设置连接字符串：\r \r 1. 使用常用文本编辑器打开 ServiceConfiguration.Cloud.cscfg 文件，并设置存储的连接字符串。 可以在 Azure 门户的存储帐户仪表板的“访问密钥”下找到 *AccountName* 和 *AccountKey* 值。\r \r     ```xml\r     <ConfigurationSettings>\r        <Setting name=\"Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString\" value=\"DefaultEndpointsProtocol=https;AccountName=<name>;AccountKey=<key>\"/>\r     </ConfigurationSettings>\r     ```\r 2. 保存 ServiceConfiguration.Cloud.cscfg 文件。\r \r 3. 打开 ServiceConfiguration.Local.cscfg 文件，并确认已将 UseDevelopmentStorage 设置为 true。\r \r     ```xml\r     <ConfigurationSettings>\r       <Settingname=\"Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString\" value=\"UseDevelopmentStorage=true\"/>\r     </ConfigurationSettings>\r     ```\r 现已设置连接字符串，在部署应用程序时，该应用程序会将诊断数据保存到存储帐户。\r 4. 保存并生成项目，然后部署应用程序。\r \r ## <a name=\"step-2-optional-create-custom-performance-counters\"></a>步骤 2：（可选）创建自定义性能计数器\r \r 除了预定义的性能计数器外，还可以添加自己的自定义性能计数器来监视 Web 角色或辅助角色。自定义性能计数器可用于跟踪和监视应用程序特定行为，并且可使用提升的权限在启动任务、Web 角色或辅助角色中创建或删除该计数器。\r \r Azure 诊断代理会在启动后一分钟刷新 .wadcfg 文件中的性能计数器配置。如果在 OnStart 方法中创建自定义性能计数器，并且启动任务的执行时间超过 1 分钟，则自定义性能计数器不会在 Azure 诊断代理尝试加载时创建。在这种情况下，Azure 诊断可正确捕获除自定义性能计数器以外的所有诊断数据。若要解决此问题，可以在启动任务中创建性能计数器，也可以在创建性能计数器后将部分启动任务工作转移到 OnStart 方法。\r \r 执行下列步骤，创建一个名为“\\MyCustomCounterCategory\\MyButton1Counter”的简单自定义性能计数器：\r \r 1. 打开应用程序的服务定义文件 (CSDEF)。\r 2. 将 Runtime 元素添加到 WebRole 或 WorkerRole 元素，可允许使用提升的权限执行：\r \r     ```xml\r     <runtime executioncontext=\"elevated\"/>\r     ```\r 3. 保存文件。\r 4. 打开诊断文件（在 SDK 2.4 及更低版本中为 diagnostics.wadcfg，在 SDK 2.5 及更高版本中为 diagnostics.wadcfgx），将以下代码添加到 DiagnosticMonitorConfiguration 中 \r \r     ```xml\r     <PerformanceCounters bufferQuotaInMB=\"0\" scheduledTransferPeriod=\"PT30M\">\r      <PerformanceCounterConfiguration counterSpecifier=\"\\MyCustomCounterCategory\\MyButton1Counter\" sampleRate=\"PT30S\"/>\r     </PerformanceCounters>\r     ```\r 5. 保存文件。\r 6. 先使用角色的 OnStart 方法创建自定义性能计数器类别，然后再调用 base.OnStart。 以下 C# 示例将创建一个自定义类别（如果尚不存在）：\r \r     ```csharp\r     public override bool OnStart()\r     {\r     if (!PerformanceCounterCategory.Exists(\"MyCustomCounterCategory\"))\r     {\r        CounterCreationDataCollection counterCollection = new CounterCreationDataCollection();\r \r        // add a counter tracking user button1 clicks\r        CounterCreationData operationTotal1 = new CounterCreationData();\r        operationTotal1.CounterName = \"MyButton1Counter\";\r        operationTotal1.CounterHelp = \"My Custom Counter for Button1\";\r        operationTotal1.CounterType = PerformanceCounterType.NumberOfItems32;\r        counterCollection.Add(operationTotal1);\r \r        PerformanceCounterCategory.Create(\r          \"MyCustomCounterCategory\",\r          \"My Custom Counter Category\",\r          PerformanceCounterCategoryType.SingleInstance, counterCollection);\r \r        Trace.WriteLine(\"Custom counter category created.\");\r     }\r     else{\r        Trace.WriteLine(\"Custom counter category already exists.\");\r     }\r \r     return base.OnStart();\r     }\r     ```\r 7. 更新应用程序中的计数器。 下面的示例对 Button1_Click 事件更新自定义性能计数器：\r \r     ```csharp\r     protected void Button1_Click(object sender, EventArgs e)\r         {\r          PerformanceCounter button1Counter = new PerformanceCounter(\r            \"MyCustomCounterCategory\",\r            \"MyButton1Counter\",\r            string.Empty,\r            false);\r          button1Counter.Increment();\r         this.Button1.Text = \"Button 1 count: \" +\r            button1Counter.RawValue.ToString();\r         }\r     ```\r 8. 保存文件。  \r \r 现在，将由 Azure 诊断监视器收集自定义性能计数器数据。\r \r ## <a name=\"step-3-query-performance-counter-data\"></a>步骤 3：查询性能计数器数据\r \r 部署并运行应用程序后，诊断监视器将开始收集性能计数器并将该数据保存到 Azure 存储。 使用 Cerebrata 提供的工具（例如 Visual Studio 中的服务器资源管理器、[Azure 存储资源管理器](http://azurestorageexplorer.codeplex.com/)或 [Azure 诊断管理器](http://www.cerebrata.com/Products/AzureDiagnosticsManager/Default.aspx)）查看 WADPerformanceCountersTable 表中的性能计数器数据。 还可以使用 [C#](../cosmos-db/table-storage-how-to-use-dotnet.md)、[Java](../cosmos-db/table-storage-how-to-use-java.md)、[Node.js](../cosmos-db/table-storage-how-to-use-nodejs.md)、[Python](../cosmos-db/table-storage-how-to-use-python.md)、[Ruby](../cosmos-db/table-storage-how-to-use-ruby.md) 或 [PHP](../cosmos-db/table-storage-how-to-use-php.md) 以编程方式查询表服务。\r \r 以下 C# 示例显示针对 WADPerformanceCountersTable 表的基本查询，并将诊断数据保存到 CSV 文件中。 将性能计数器保存到 CSV 文件后，可以使用 Microsoft Excel 中的图形功能或使用其他一些工具来使数据可视化。 请务必添加对 Microsoft.WindowsAzure.Storage.dll（包含在 2012 年 10 月版的 Azure SDK for .NET 及更高版本中）的引用。 程序集安装在 %Program Files%\\Microsoft SDKs\\Microsoft Azure.NET SDK\\version-num\\ref\\ 目录中。\r \r ```csharp\r using Microsoft.WindowsAzure.Storage;\r using Microsoft.WindowsAzure.Storage.Auth;\r using Microsoft.WindowsAzure.Storage.Table;\r ...\r \r // Get the connection string. When using Azure Cloud Services, it is recommended\r // you store your connection string using the Azure service configuration\r // system (*.csdef and *.cscfg files). You can you use the CloudConfigurationManager type\r // to retrieve your storage connection string.  If you're not using Cloud Services, it's\r // recommended that you store the connection string in your web.config or app.config file.\r // Use the ConfigurationManager type to retrieve your storage connection string.\r \r string connectionString = Microsoft.WindowsAzure.CloudConfigurationManager.GetSetting(\"StorageConnectionString\");\r //string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings[\"StorageConnectionString\"].ConnectionString;\r \r // Get a reference to the storage account using the connection string.  You can also use the development\r // storage account (Storage Emulator) for local debugging.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(connectionString);\r //CloudStorageAccount storageAccount = CloudStorageAccount.DevelopmentStorageAccount;\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable object that represents the \"WADPerformanceCountersTable\" table.\r CloudTable table = tableClient.GetTableReference(\"WADPerformanceCountersTable\");\r \r // Create the table query, filter on a specific CounterName, DeploymentId and RoleInstance.\r TableQuery<PerformanceCountersEntity> query = new TableQuery<PerformanceCountersEntity>()\r    .Where(\r       TableQuery.CombineFilters(\r       TableQuery.GenerateFilterCondition(\"CounterName\", QueryComparisons.Equal, @\"\\Processor(_Total)\\% Processor Time\"),\r       TableOperators.And,\r       TableQuery.CombineFilters(\r       TableQuery.GenerateFilterCondition(\"DeploymentId\", QueryComparisons.Equal, \"ec26b7a1720447e1bcdeefc41c4892a3\"),\r       TableOperators.And,\r       TableQuery.GenerateFilterCondition(\"RoleInstance\", QueryComparisons.Equal, \"WebRole1_IN_0\")\r       )\r    )\r );\r \r // Execute the table query.\r IEnumerable<PerformanceCountersEntity> result = table.ExecuteQuery(query);\r \r // Process the query results and build a CSV file.\r StringBuilder sb = new StringBuilder(\"TimeStamp,EventTickCount,DeploymentId,Role,RoleInstance,CounterName,CounterValue\\n\");\r \r foreach (PerformanceCountersEntity entity in result)\r {\r    sb.Append(entity.Timestamp + \",\" + entity.EventTickCount + \",\" + entity.DeploymentId + \",\"\r       + entity.Role + \",\" + entity.RoleInstance + \",\" + entity.CounterName + \",\" + entity.CounterValue+\"\\n\");\r }\r \r StreamWriter sw = File.CreateText(@\"C:\\temp\\PerfCounters.csv\");\r sw.Write(sb.ToString());\r sw.Close();\r ```\r \r 实体将映射到使用派生自 TableEntity 的自定义类的 C# 对象。 以下代码定义表示 **WADPerformanceCountersTable** 表中性能计数器的实体类。\r \r ```csharp\r public class PerformanceCountersEntity : TableEntity\r {\r    public long EventTickCount { get; set; }\r    public string DeploymentId { get; set; }\r    public string Role { get; set; }\r    public string RoleInstance { get; set; }\r    public string CounterName { get; set; }\r    public double CounterValue { get; set; }\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r [查看有关 Azure 诊断的其他文章](../azure-diagnostics.md)\r \r <!--Update_Description:update meta properties and wording-->"}