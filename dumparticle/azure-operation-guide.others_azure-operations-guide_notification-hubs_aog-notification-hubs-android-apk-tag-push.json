{"Title":"Azure 通知中心结合 Android 百度云推送实现消息定制化服务","Description":"Azure 通知中心结合 Android 百度云推送实现消息定制化服务","Content":"\r # Azure 通知中心结合 Android 百度云推送实现消息定制化服务\r \r ## 功能要点\r \r 1. 完成 azure 通知中心 到 android apk 的消息推送。\r 2. 利用 tag 完成分组发送测试（实现信息发送的定制化服务）。\r \r ## 环境依赖\r \r - IDE：Android studio\r - AVM：Genymotion\r \r ## 原理分析\r \r ![principle-analysis.jpg](./media/aog-notification-hubs-android-apk-tag-push/principle-analysis.jpg)\r \r ### 测试案例(集成原有的百度 PushDemo)\r \r 1. 注册百度云推送，下载 [SDK](http://boscdn.bpc.baidu.com/channelpush/sdk/Baidu-Push-SDK-Android-L2-5.5.0.50.zip)，也可以直接扫描二维码手机安装 apk。\r \r     ![download-baidu-sdk.jpg](./media/aog-notification-hubs-android-apk-tag-push/download-baidu-sdk.jpg)\r \r     利用创建的通知直接进行测试：\r \r     ![test.jpg](./media/aog-notification-hubs-android-apk-tag-push/test.jpg)\r \r 2. 测试完成后将推送服务关联到 azure 通知中心：\r     1. 使用 Android studio 导入下载解压后的项目: `file/new/input project`, 项目默认为 Android。\r \r         ![android-studio-import-project.png](./media/aog-notification-hubs-android-apk-tag-push/android-studio-import-project.png)\r \r     2. 在 `app/lab` 目录导入 `notification-hubs-android-sdk-0.4.jar`, `app/build.gradle` 加入：\r \r         compile files('libs/notification-hubs-android-sdk-0.4.jar')，完成对包的引用。\r \r         ![android-studio-include.jpg](./media/aog-notification-hubs-android-apk-tag-push/android-studio-include.jpg)\r \r     3. PushDemo 中加入 `import com.yutao.demo.R`;\r \r         ![android-studio-import-demo.jpg](./media/aog-notification-hubs-android-apk-tag-push/android-studio-import-demo.jpg)\r \r     4. 添加 `ConfigurationSettings.java` 类加入相关参数，主要目的是配置相关参数。\r \r         >[!NOTE]\r         >代码中相关参数均已经无效，仅供格式参考\r \r         ```\r         package com.baidu.push.example;\r \r         /**\r          * Created by yu.tao on 10/26/2016.\r          */\r         public class ConfigurationSettings {\r             public static String API_KEY = \"I0ZXwxxFhewpXe36tx433QaG\";\r             public static String NotificationHubName = \"baidudemotest\";\r             public static String NotificationHubConnectionString = \"Endpoint=sb://yutaonotification.servicebus.chinacloudapi.cn/;SharedAccessKeyName=DefaultListenSharedAccessSignature;SharedAccessKey=4RyJjHcAm7PW9Tr83S5PQ9Qbi/AqbYFl2PfSACGI1UY=\";\r \r         }\r         ```\r \r     5. MyPushMessageReceiver 类中添加代码绑定到 azure notification ：\r \r         ```\r         public static NotificationHub hub = null;\r         public static String mChannelId, mUserId;\r \r         public static final String TAG = MyPushMessageReceiver.class\r              .getSimpleName();\r \r         //add test\r \r         // public static final String TAG = MyPushMessageReceiver.class\r         //        .getSimpleName();\r \r         /**\r         * 调用PushManager.startWork后，sdk将对push\r         * server发起绑定请求，这个过程是异步的。绑定请求的结果通过onBind返回。 如果您需要用单播推送，需要把这里获取的channel\r         * id和user id上传到应用server中，再调用server接口用channel id和user id给单个手机或者用户推送。\r         *\r         * @param context\r         *            BroadcastReceiver的执行Context\r         * @param errorCode\r         *            绑定接口返回值，0 - 成功\r         * @param appid\r         *            应用id。errorCode非0时为null\r         * @param userId\r         *            应用user id。errorCode非0时为null\r         * @param channelId\r         *            应用channel id。errorCode非0时为null\r         * @param requestId\r         *            向服务端发起的请求id。在追查问题时有用；\r         * @return none\r         */\r         @Override\r         public void onBind(Context context, int errorCode, String appid,\r              String userId, String channelId, String requestId) {\r          String responseString = \"onBind errorCode=\" + errorCode + \" appid=\"\r                  + appid + \" userId=\" + userId + \" channelId=\" + channelId\r                  + \" requestId=\" + requestId;\r          Log.d(TAG, responseString);\r \r          mChannelId = channelId;\r          mUserId = userId;\r \r          if (errorCode == 0) {\r              // 绑定成功\r              Log.d(TAG, \"绑定成功\");\r          }\r          // Demo更新界面展示代码，应用请在这里加入自己的处理逻辑\r         // updateContent(context, responseString);\r \r          try {\r              if (hub == null) {\r                  hub = new NotificationHub(\r                          ConfigurationSettings.NotificationHubName,\r                          ConfigurationSettings.NotificationHubConnectionString,\r                          context);\r                  Log.i(TAG, \"Notification hub initialized\");\r              }\r          } catch (Exception e) {\r              Log.e(TAG, e.getMessage());\r          }\r \r          registerWithNotificationHubs();\r \r          Log.d(\"注册到azure\",\"注册成功\");\r \r          updateContent(context, responseString);\r         }\r \r         private void registerWithNotificationHubs() {\r          new AsyncTask<Void, Void, Void>() {\r              @Override\r              protected Void doInBackground(Void... params) {\r                  try {\r                      hub.registerBaidu(mUserId, mChannelId);\r                      Log.i(TAG, \"Registered with Notification Hub - '\"\r                              + ConfigurationSettings.NotificationHubName + \"'\"\r                              + \" with UserId - '\"\r                              + mUserId + \"' and Channel Id - '\"\r                              + mChannelId + \"'\");\r                  } catch (Exception e) {\r                      Log.e(TAG, e.getMessage());\r                  }\r                  return null;\r              }\r          }.execute(null, null, null);\r         }\r         f)      对LoginActivity类添加代码，标黄部分为添加代码：\r         @Override\r         protected void onCreate(Bundle savedInstanceState) {\r         super.onCreate(savedInstanceState);\r \r         mWebView = new WebView(LoginActivity.this);\r \r         setContentView(mWebView);\r \r         initWebView(mWebView);\r \r         getAccessToken();\r \r         PushManager.startWork(getApplicationContext(),\r                 PushConstants.LOGIN_TYPE_API_KEY, ConfigurationSettings.API_KEY);\r         }\r         ```\r \r     6. 后台发送端代码编写：\r \r         ```\r         String baiduid = \"580671960443544459\";\r         String channelid = \"3853836944444043049\";\r \r         NotificationHub hub = new NotificationHub(\"Endpoint=sb://yutaonotification.servicebus.chinacloudapi.cn/;SharedAccessKeyName=DefaultFullSharedAccessSignature;SharedAccessKey=8xCem7s4223GB/rSLvTi222OhjMBHF5NDwUoTZ8KPTA=\", \"baidudemotest\");\r \r         BaiduRegistration reg = new BaiduRegistration(baiduid,channelid);\r \r         reg.setTagsFromString(\"tagtest\");\r \r         hub.createRegistration(reg);\r \r         //发送测试\r         String message = \"{\\\"title\\\":\\\"Java SDK test\\\",\\\"description\\\":\\\"english !\\\"}\";\r \r         //发送测试\r         Notification n = Notification.createBaiduNotifiation(message);\r \r         hub.sendNotification(n);\r         ```\r \r ## 实验测试\r \r ### 虚拟机界面：\r \r ![vm-pushdemo](./media/aog-notification-hubs-android-apk-tag-push/vm-pushdemo.jpg)\r \r - 无 tag 发送：\r \r     ```\r     hub.sendNotification(n);\r     ```\r \r     ![no-tag](./media/aog-notification-hubs-android-apk-tag-push/no-tag.jpg)\r \r - 有 tag 发送 1，注册包含目标 tag：\r \r     ```\r     hub.sendNotification(n, \"hello\");\r     ```\r \r     ![tag-1](./media/aog-notification-hubs-android-apk-tag-push/tag-1.jpg)\r \r - 有 tag 发送 2，注册不包含目标 tag：无法接收到消息。\r \r     ```\r     hub.sendNotification(n, \"world\");\r     ```\r \r     ![tag-2](./media/aog-notification-hubs-android-apk-tag-push/tag-2.jpg)\r \r >[!NOTE]\r >Android studio 问题比较多，有时候注释也会报错，需要根据情况更新版本。"}