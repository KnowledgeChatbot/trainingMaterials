{"Title":"在 Node.js 中将 Raspberry Pi 预配到远程监控 - Azure","Description":"介绍如何使用以 Node.js 编写的应用程序将 Raspberry Pi 设备连接到 Azure IoT 套件预配置远程监控解决方案。","Content":"# <a name=\"connect-your-raspberry-pi-device-to-the-remote-monitoring-preconfigured-solution-nodejs\"></a>将 Raspberry Pi 设备连接到远程监控预配置解决方案 (Node.js)\r \r [!INCLUDE [iot-suite-selector-connecting](../../includes/iot-suite-selector-connecting.md)]\r \r 本教程介绍如何将物理设备连接到远程监控预配置解决方案。 在本教程中，将使用 Node.js，它对于资源约束最少的环境是一个不错的选择。\r \r ### <a name=\"required-hardware\"></a>所需硬件\r \r 一个台式机，用于通过远程方式连接到 Raspberry Pi 上的命令行。\r \r [适用于 Raspberry Pi 3 的 Microsoft IoT 初学者套件](https://docs.azure.cn/zh-cn/develop/iot/iot-starter-kits)或等效组件。 本教程使用工具包中的以下项目：\r \r - Raspberry Pi 3\r - MicroSD 卡（带 NOOBS）\r - USB 迷你电缆\r - 以太网电缆\r \r ### <a name=\"required-desktop-software\"></a>所需的桌面软件\r \r 需要在台式机上安装 SSH 客户端，才能远程访问 Raspberry Pi 上的命令行。\r \r - Windows 不包括 SSH 客户端。 建议使用 [PuTTY](http://www.putty.org/)。\r - 大多数 Linux 发行版和 Mac OS 包括命令行 SSH 实用工具。 有关详细信息，请参阅 [SSH Using Linux or Mac OS](https://www.raspberrypi.org/documentation/remote-access/ssh/unix.md)（使用 Linux 或 Mac OS 的 SSH）。\r \r ### <a name=\"required-raspberry-pi-software\"></a>所需的 Raspberry Pi 软件\r \r 如果尚未这样做，请在 Raspberry Pi 上安装 Node.js 4.0.0 或更高版本。 以下步骤演示如何在 Raspberry Pi 上安装 Node.js v6.11.4：\r \r 1. 使用 `ssh` 连接到 Raspberry Pi。 有关详细信息，请参阅 [Raspberry Pi 网站](https://www.raspberrypi.org/)上的 [SSH（安全外壳）](https://www.raspberrypi.org/documentation/remote-access/ssh/README.md)。\r \r 1. 使用以下命令更新 Raspberry Pi：\r \r     ```sh\r     sudo apt-get update\r     ```\r \r 1. 使用以下命令将 Node.js 二进制文件下载到 Raspberry Pi 上：\r \r     ```sh\r     wget https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-armv7l.tar.gz\r     ```\r \r 1. 使用以下命令安装二进制文件：\r \r     ```sh\r     sudo tar -C /usr/local --strip-components 1 -xzf node-v6.11.4-linux-armv7l.tar.gz\r     ```\r \r 1. 使用以下命令验证已成功安装 Node.js v6.11.4：\r \r     ```sh\r     node --version\r     ```\r \r ## <a name=\"create-a-nodejs-solution\"></a>创建 Node.js 解决方案\r \r 使用与 Raspberry Pi 的 `ssh` 连接完成以下步骤：\r \r 1. 在 Raspberry Pi 上的主文件夹中创建名为 `RemoteMonitoring` 的文件夹。 在命令行中导航到此文件夹：\r \r     ```sh\r     cd ~\r     mkdir RemoteMonitoring\r     cd RemoteMonitoring\r     ```\r \r 1. 若要下载并安装完成示例应用所需的包，请运行以下命令：\r \r     ```sh\r     npm init\r     npm install azure-iot-device azure-iot-device-mqtt --save\r     ```\r \r 1. 在 `RemoteMonitoring` 文件夹中，创建名为 **remote_monitoring.js** 的文件。 在文本编辑器中打开此文件。 在 Raspberry Pi 上，可以使用 `nano` 或 `vi` 文本编辑器。\r \r 1. 在 **remote_monitoring.js** 文件中，添加以下 `require` 语句：\r \r     ```nodejs\r     'use strict';\r \r     var Protocol = require('azure-iot-device-mqtt').Mqtt;\r     var Client = require('azure-iot-device').Client;\r     var ConnectionString = require('azure-iot-device').ConnectionString;\r     var Message = require('azure-iot-device').Message;\r     ```\r \r 1. 在 `require` 语句之后添加以下变量声明。 将占位符值 `{Device Id}` 和 `{Device Key}` 替换为针对远程监控解决方案中预配的设备记下的值。 使用解决方案中的 IoT 中心主机名替换 `{IoTHub Name}`。 例如，如果 IoT 中心主机名是 `contoso.azure-devices.cn`，请将 `{IoTHub Name}` 替换为 `contoso`：\r \r     ```nodejs\r     var connectionString = 'HostName={IoTHub Name}.azure-devices.cn;DeviceId={Device Id};SharedAccessKey={Device Key}';\r     var deviceId = ConnectionString.parse(connectionString).DeviceId;\r     ```\r \r 1. 若要定义一些基本遥测数据，请添加以下变量：\r \r     ```nodejs\r     var temperature = 50;\r     var temperatureUnit = 'F';\r     var humidity = 50;\r     var humidityUnit = '%';\r     var pressure = 55;\r     var pressureUnit = 'psig';\r     ```\r \r 1. 若要定义一些属性值，请添加以下变量：\r \r     ```nodejs\r     var temperatureSchema = 'chiller-temperature;v1';\r     var humiditySchema = 'chiller-humidity;v1';\r     var pressureSchema = 'chiller-pressure;v1';\r     var interval = \"00:00:05\";\r     var deviceType = \"Chiller\";\r     var deviceFirmware = \"1.0.0\";\r     var deviceFirmwareUpdateStatus = \"\";\r     var deviceLocation = \"Building 44\";\r     var deviceLatitude = 47.638928;\r     var deviceLongitude = -122.13476;\r     ```\r \r 1. 添加以下变量以定义要发送到解决方案的报告属性。 这些属性包括用于说明设备使用的方法和遥测的元数据：\r \r     ```nodejs\r     var reportedProperties = {\r       \"Protocol\": \"MQTT\",\r       \"SupportedMethods\": \"Reboot,FirmwareUpdate,EmergencyValveRelease,IncreasePressure\",\r       \"Telemetry\": {\r         \"TemperatureSchema\": {\r           \"Interval\": interval,\r           \"MessageTemplate\": \"{\\\"temperature\\\":${temperature},\\\"temperature_unit\\\":\\\"${temperature_unit}\\\"}\",\r           \"MessageSchema\": {\r             \"Name\": temperatureSchema,\r             \"Format\": \"JSON\",\r             \"Fields\": {\r               \"temperature\": \"Double\",\r               \"temperature_unit\": \"Text\"\r             }\r           }\r         },\r         \"HumiditySchema\": {\r           \"Interval\": interval,\r           \"MessageTemplate\": \"{\\\"humidity\\\":${humidity},\\\"humidity_unit\\\":\\\"${humidity_unit}\\\"}\",\r           \"MessageSchema\": {\r             \"Name\": humiditySchema,\r             \"Format\": \"JSON\",\r             \"Fields\": {\r               \"humidity\": \"Double\",\r               \"humidity_unit\": \"Text\"\r             }\r           }\r         },\r         \"PressureSchema\": {\r           \"Interval\": interval,\r           \"MessageTemplate\": \"{\\\"pressure\\\":${pressure},\\\"pressure_unit\\\":\\\"${pressure_unit}\\\"}\",\r           \"MessageSchema\": {\r             \"Name\": pressureSchema,\r             \"Format\": \"JSON\",\r             \"Fields\": {\r               \"pressure\": \"Double\",\r               \"pressure_unit\": \"Text\"\r             }\r           }\r         }\r       },\r       \"Type\": deviceType,\r       \"Firmware\": deviceFirmware,\r       \"FirmwareUpdateStatus\": deviceFirmwareUpdateStatus,\r       \"Location\": deviceLocation,\r       \"Latitude\": deviceLatitude,\r       \"Longitude\": deviceLongitude\r     }\r     ```\r \r 1. 若要输出操作结果，请添加以下帮助程序函数：\r \r     ```nodejs\r     function printErrorFor(op) {\r         return function printError(err) {\r             if (err) console.log(op + ' error: ' + err.toString());\r         };\r     }\r     ```\r \r 1. 添加以下帮助器函数用于随机化遥测值：\r \r     ```nodejs\r     function generateRandomIncrement() {\r         return ((Math.random() * 2) - 1);\r     }\r     ```\r \r 1. 添加以下函数以处理解决方案中的直接方法调用。 解决方案使用直接方法对设备进行操作：\r \r     ```nodejs\r     function onDirectMethod(request, response) {\r       // Implement logic asynchronously here.\r       console.log('Simulated ' + request.methodName);\r \r       // Complete the response\r       response.send(200, request.methodName + ' was called on the device', function (err) {\r         if (!!err) {\r           console.error('An error ocurred when sending a method response:\\n' +\r             err.toString());\r         } else {\r           console.log('Response to method \\'' + request.methodName +\r             '\\' sent successfully.');\r         }\r       });\r     }\r     ```\r \r 1. 添加以下代码将遥测数据发送到解决方案。 客户端应用将属性添加到消息，以确定消息架构：\r \r     ```node.js\r     function sendTelemetry(data, schema) {\r       var d = new Date();\r       var payload = JSON.stringify(data);\r       var message = new Message(payload);\r       message.properties.add('$$CreationTimeUtc', d.toISOString());\r       message.properties.add('$$MessageSchema', schema);\r       message.properties.add('$$ContentType', 'JSON');\r \r       console.log('Sending device message data:\\n' + payload);\r       client.sendEvent(message, printErrorFor('send event'));\r     }\r     ```\r \r 1. 添加以下代码用于创建客户端实例：\r \r     ```nodejs\r     var client = Client.fromConnectionString(connectionString, Protocol);\r     ```\r \r 1. 添加以下代码来执行下述操作：\r \r     - 打开连接。\r     - 设置所需属性的处理程序。\r     - 发送报告的属性。\r     - 为直接方法注册处理程序。\r     - 开始发送遥测数据。\r \r     ```nodejs\r     client.open(function (err) {\r       if (err) {\r         printErrorFor('open')(err);\r       } else {\r         // Create device Twin\r         client.getTwin(function (err, twin) {\r           if (err) {\r             console.error('Could not get device twin');\r           } else {\r             console.log('Device twin created');\r \r             twin.on('properties.desired', function (delta) {\r               // Handle desired properties set by solution\r               console.log('Received new desired properties:');\r               console.log(JSON.stringify(delta));\r             });\r \r             // Send reported properties\r             twin.properties.reported.update(reportedProperties, function (err) {\r               if (err) throw err;\r               console.log('twin state reported');\r             });\r \r             // Register handlers for all the method names we are interested in.\r             // Consider separate handlers for each method.\r             client.onDeviceMethod('Reboot', onDirectMethod);\r             client.onDeviceMethod('FirmwareUpdate', onDirectMethod);\r             client.onDeviceMethod('EmergencyValveRelease', onDirectMethod);\r             client.onDeviceMethod('IncreasePressure', onDirectMethod);\r           }\r         });\r \r         // Start sending telemetry\r         var sendTemperatureInterval = setInterval(function () {\r           temperature += generateRandomIncrement();\r           var data = {\r             'temperature': temperature,\r             'temperature_unit': temperatureUnit\r           };\r           sendTelemetry(data, temperatureSchema)\r         }, 5000);\r \r         var sendHumidityInterval = setInterval(function () {\r           humidity += generateRandomIncrement();\r           var data = {\r             'humidity': humidity,\r             'humidity_unit': humidityUnit\r           };\r           sendTelemetry(data, humiditySchema)\r         }, 5000);\r \r         var sendPressureInterval = setInterval(function () {\r           pressure += generateRandomIncrement();\r           var data = {\r             'pressure': pressure,\r             'pressure_unit': pressureUnit\r           };\r           sendTelemetry(data, pressureSchema)\r         }, 5000);\r \r         client.on('error', function (err) {\r           printErrorFor('client')(err);\r           if (sendTemperatureInterval) clearInterval(sendTemperatureInterval);\r           if (sendHumidityInterval) clearInterval(sendHumidityInterval);\r           if (sendPressureInterval) clearInterval(sendPressureInterval);\r           client.close(printErrorFor('client.close'));\r         });\r       }\r     });\r     ```\r \r 1. 保存对 **remote_monitoring.js** 文件的更改。\r \r 1. 若要启动示例应用程序，请在 Raspberry Pi 上的命令提示符下运行以下命令：\r \r     ```sh\r     node remote_monitoring.js\r     ```\r \r [!INCLUDE [iot-suite-visualize-connecting](../../includes/iot-suite-visualize-connecting.md)]\r "}