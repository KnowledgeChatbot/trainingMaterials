{"Title":"使用 C 将 Raspberry Pi 预配到远程监控 - Azure","Description":"介绍如何使用以 C 编写的应用程序将 Raspberry Pi 设备连接到 Azure IoT 套件预配置远程监控解决方案。","Content":"# <a name=\"connect-your-raspberry-pi-device-to-the-remote-monitoring-preconfigured-solution-c\"></a>将 Raspberry Pi 设备连接到远程监控预配置解决方案 (C)\r \r [!INCLUDE [iot-suite-selector-connecting](../../includes/iot-suite-selector-connecting.md)]\r \r 本教程介绍如何将物理设备连接到远程监控预配置解决方案。 与受约束设备上运行的大多数嵌入式应用程序一样，Raspberry Pi 设备应用程序的客户端代码是用 C 语言编写的。在本教程中，将在运行 Raspbian OS 的 Raspberry Pi 上生成应用程序。\r \r ### <a name=\"required-hardware\"></a>所需硬件\r \r 一个台式机，用于通过远程方式连接到 Raspberry Pi 上的命令行。\r \r [适用于 Raspberry Pi 3 的 Microsoft IoT 初学者套件](https://docs.azure.cn/zh-cn/develop/iot/iot-starter-kits)或等效组件。 本教程使用工具包中的以下项目：\r \r - Raspberry Pi 3\r - MicroSD 卡（带 NOOBS）\r - USB 迷你电缆\r - 以太网电缆\r \r ### <a name=\"required-desktop-software\"></a>所需的桌面软件\r \r 需要在台式机上安装 SSH 客户端，才能远程访问 Raspberry Pi 上的命令行。\r \r - Windows 不包括 SSH 客户端。 建议使用 [PuTTY](http://www.putty.org/)。\r - 大多数 Linux 发行版和 Mac OS 包括命令行 SSH 实用工具。 有关详细信息，请参阅 [SSH Using Linux or Mac OS](https://www.raspberrypi.org/documentation/remote-access/ssh/unix.md)（使用 Linux 或 Mac OS 的 SSH）。\r \r ### <a name=\"required-raspberry-pi-software\"></a>所需的 Raspberry Pi 软件\r \r 以下步骤演示如何准备 Raspberry Pi 以生成可连接到预配置解决方案的 C 应用程序：\r \r 1. 使用 `ssh` 连接到 Raspberry Pi。 有关详细信息，请参阅 [Raspberry Pi 网站](https://www.raspberrypi.org/)上的 [SSH（安全外壳）](https://www.raspberrypi.org/documentation/remote-access/ssh/README.md)。\r \r 1. 使用以下命令更新 Raspberry Pi：\r \r     ```sh\r     sudo apt-get update\r     ```\r \r 1. 使用以下命令将所需的开发工具和库添加到 Raspberry Pi：\r \r     ```sh\r     sudo apt-get install g++ make cmake gcc git\r     ```\r \r 1. 使用以下命令安装 IoT 中心客户端库：\r \r     ```sh\r     grep -q -F 'deb http://ppa.launchpad.net/aziotsdklinux/ppa-azureiot/ubuntu vivid main' /etc/apt/sources.list || sudo sh -c \"echo 'deb http://ppa.launchpad.net/aziotsdklinux/ppa-azureiot/ubuntu vivid main' >> /etc/apt/sources.list\"\r     grep -q -F 'deb-src http://ppa.launchpad.net/aziotsdklinux/ppa-azureiot/ubuntu vivid main' /etc/apt/sources.list || sudo sh -c \"echo 'deb-src http://ppa.launchpad.net/aziotsdklinux/ppa-azureiot/ubuntu vivid main' >> /etc/apt/sources.list\"\r     sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys FDA6A393E4C2257F\r     sudo apt-get update\r     sudo apt-get install -y azure-iot-sdk-c-dev cmake libcurl4-openssl-dev git-core\r     ```\r \r 1. 使用以下命令将 Parson JSON 分析器克隆到 Raspberry Pi：\r \r     ```sh\r     cd ~\r     git clone https://github.com/kgabis/parson.git\r     ```\r \r ## <a name=\"create-a-project\"></a>创建一个项目\r \r 使用与 Raspberry Pi 的 `ssh` 连接完成以下步骤：\r \r 1. 在 Raspberry Pi 上的主文件夹中创建名为 `remote_monitoring` 的文件夹。 在命令行中导航到此文件夹：\r \r     ```sh\r     cd ~\r     mkdir remote_monitoring\r     cd remote_monitoring\r     ```\r \r 1. 在 `remote_monitoring` 文件夹中创建四个文件：`main.c`、`remote_monitoring.c`、`remote_monitoring.h` 和 `CMakeLists.txt`。\r \r 1. 在 `remote_monitoring` 文件夹中创建名为 `parson` 的文件夹。\r \r 1. 将文件 `parson.c` 和 `parson.h` 从 Parson 存储库的本地副本复制到 `remote_monitoring/parson` 文件夹。\r \r 1. 在文本编辑器中打开 `remote_monitoring.c` 文件。 在 Raspberry Pi 上，可以使用 `nano` 或 `vi` 文本编辑器。 添加以下 `#include` 语句：\r \r     ```c\r     #include \"iothubtransportmqtt.h\"\r     #include \"schemalib.h\"\r     #include \"iothub_client.h\"\r     #include \"serializer_devicetwin.h\"\r     #include \"schemaserializer.h\"\r     #include \"azure_c_shared_utility/threadapi.h\"\r     #include \"azure_c_shared_utility/platform.h\"\r     #include \"parson.h\"\r     ```\r \r [!INCLUDE [iot-suite-connecting-code](../../includes/iot-suite-connecting-code.md)]\r \r ## <a name=\"add-code-to-run-the-app\"></a>添加代码以运行应用\r \r 在文本编辑器中打开 `remote_monitoring.h` 文件。 添加以下代码：\r \r ```c\r void remote_monitoring_run(void);\r ```\r \r 在文本编辑器中打开 `main.c` 文件。 添加以下代码：\r \r ```c\r #include \"remote_monitoring.h\"\r \r int main(void)\r {\r   remote_monitoring_run();\r \r   return 0;\r }\r ```\r \r ## <a name=\"build-and-run-the-application\"></a>生成并运行应用程序\r \r 以下步骤描述如何使用 *CMake* 生成客户端应用程序。\r \r 1. 在文本编辑器中，打开 `remote_monitoring` 文件夹中的 **CMakeLists.txt** 文件。\r \r 1. 添加以下指令，以定义如何生成客户端应用程序：\r \r     ```cmake\r     macro(compileAsC99)\r       if (CMAKE_VERSION VERSION_LESS \"3.1\")\r         if (CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\r           set (CMAKE_C_FLAGS \"--std=c99 ${CMAKE_C_FLAGS}\")\r           set (CMAKE_CXX_FLAGS \"--std=c++11 ${CMAKE_CXX_FLAGS}\")\r         endif()\r       else()\r         set (CMAKE_C_STANDARD 99)\r         set (CMAKE_CXX_STANDARD 11)\r       endif()\r     endmacro(compileAsC99)\r \r     cmake_minimum_required(VERSION 2.8.11)\r     compileAsC99()\r \r     set(AZUREIOT_INC_FOLDER \"${CMAKE_SOURCE_DIR}\" \"${CMAKE_SOURCE_DIR}/parson\" \"/usr/include/azureiot\" \"/usr/include/azureiot/inc\")\r \r     include_directories(${AZUREIOT_INC_FOLDER})\r \r     set(sample_application_c_files\r         ./parson/parson.c\r         ./remote_monitoring.c\r         ./main.c\r     )\r \r     set(sample_application_h_files\r         ./parson/parson.h\r         ./remote_monitoring.h\r     )\r \r     add_executable(sample_app ${sample_application_c_files} ${sample_application_h_files})\r \r     target_link_libraries(sample_app\r         serializer\r         iothub_client\r         iothub_client_mqtt_transport\r         aziotsharedutil\r         umqtt\r         pthread\r         curl\r         ssl\r         crypto\r         m\r     )\r     ```\r \r 1. 在 `remote_monitoring` 文件夹中，创建一个文件夹以存储 CMake 生成的 *make* 文件。 然后运行 **cmake** 和 **make** 命令，如下所示：\r \r     ```sh\r     mkdir cmake\r     cd cmake\r     cmake ../\r     make\r     ```\r \r 1. 运行客户端应用程序，并将遥测数据发送到 IoT 中心：\r \r     ```sh\r     ./sample_app\r     ```\r \r [!INCLUDE [iot-suite-visualize-connecting](../../includes/iot-suite-visualize-connecting.md)]\r "}