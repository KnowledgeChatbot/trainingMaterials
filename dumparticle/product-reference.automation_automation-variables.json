{"Title":"Azure 自动化中的变量资产","Description":"变量资产是可供 Azure 自动化中的所有 Runbook 使用的值。 本文介绍了变量的详细信息，以及如何在文本创作中使用变量。","Content":"# <a name=\"variable-assets-in-azure-automation\"></a>Azure 自动化中的变量资产\r \r 变量资产是可供自动化帐户中的所有 Runbook 使用的值。 可以从 Azure 经典管理门户、Windows PowerShell 和 Runbook 中创建、修改和检索变量资产。 自动化变量可用于以下方案：\r \r - 在多个 Runbook 之间共享某个值。\r \r - 在同一 Runbook 中的多个作业之间共享某个值。\r \r - 从门户或通过 Runbook 使用的 Windows PowerShell 命令行管理某个值。\r \r 自动化变量将保留，以便在 Runbook 失败时它们仍然继续可用。  这也允许一个 Runbook 设置的值随后由另一个 Runbook 使用，或由同一 Runbook 在下次运行时使用。\r \r 创建变量时，可以指定将其加密存储。  变量加密后，将安全地存储在 Azure 自动化中，并且不能从 Azure PowerShell 模块随附的 [Get-AzureAutomationVariable](http://msdn.microsoft.com/library/dn913772.aspx) cmdlet 检索变量值。  可以检索加密值的唯一方法是从 Runbook 中的 **Get-AutomationVariable** 活动检索。\r \r > [!NOTE]\r > Azure 自动化中的安全资产包括凭据、证书、连接和加密的变量。 这些资产已使用针对每个自动化帐户生成的唯一密钥加密并存储在 Azure 自动化中。 此密钥由主证书加密，并存储在 Azure 自动化中。 在存储安全资产之前，会先使用主证书来解密自动化帐户的密钥，然后使用该密钥来加密资产。\r \r ## <a name=\"variable-types\"></a>变量类型\r \r 当使用 Azure 经典管理门户创建变量时，你必须通过下拉列表指定一个数据类型，以便门户可以显示用于输入变量值的相应控件。 该变量并不局限于此数据类型，但如果想要指定不同类型的值，则必须使用 Windows PowerShell 设置该变量。 如果指定“未定义”，则该变量的值将设置为 **$null**，并且必须使用 [Set-AzureAutomationVariable](http://msdn.microsoft.com/library/dn913767.aspx) cmdlet 或 **Set-AutomationVariable** 活动来设置该值。 无法在该门户中创建或更改复杂变量类型的值，但可以使用 Windows PowerShell 提供任何类型的值。 复杂类型将作为 [PSCustomObject](http://msdn.microsoft.com/library/system.management.automation.pscustomobject.aspx) 返回。\r \r 可以通过创建一个数组或哈希表并将其保存到变量，来将多个值存储到单一变量。\r \r 下面列出了自动化中的可用变量类型：\r \r * String\r * Integer\r * DateTime\r * Boolean\r * Null\r \r >[!NOTE]\r >变量资产限制为 1024 个字符。 \r \r ## <a name=\"cmdlets-and-workflow-activities\"></a>Cmdlet 和工作流活动\r \r 下表中的 cmdlet 用于通过 Windows PowerShell 创建和管理自动化变量。 可在自动化 Runbook 中使用的 [Azure PowerShell 模块](../powershell-install-configure.md) 已随附了这些 cmdlet。\r \r |Cmdlet|说明|\r |:---|:---|\r |[Get-AzureAutomationVariable](http://msdn.microsoft.com/library/dn913772.aspx)|检索现有变量的值。|\r |[New-AzureAutomationVariable](http://msdn.microsoft.com/library/dn913771.aspx)|创建新变量并设置变量值。|\r |[Remove-AzureAutomationVariable](http://msdn.microsoft.com/library/dn913775.aspx)|删除现有变量。|\r |[Set-AzureAutomationVariable](http://msdn.microsoft.com/library/dn913767.aspx)|设置现有变量的值。|\r \r 下表中的工作流活动用于在 Runbook 中访问自动化变量。 它们仅可在 Runbook 中使用，而不作为 Azure PowerShell 模块的一部分提供。\r \r |工作流活动|说明|\r |:---|:---|\r |Get-AutomationVariable|检索现有变量的值。|\r |Set-AutomationVariable|设置现有变量的值。|\r \r > [!NOTE] \r > 应避免在 Runbook 中的 **Get-AutomationVariable** 的 -Name 参数中使用变量，因为这可能会使设计时发现 Runbook 与自动化变量之间的依赖关系变得复杂化。\r \r ## <a name=\"creating-an-automation-variable\"></a>创建自动化变量\r \r ### <a name=\"to-create-a-variable-with-the-azure-classic-management-portal\"></a>使用 Azure 经典管理门户创建变量\r \r 1. 在自动化帐户中，单击窗口顶部的“资产”。\r 1. 在窗口底部，单击“添加设置” 。\r 1. 单击“添加变量” 。\r 1. 完成向导并单击复选框以保存新变量。\r \r ### <a name=\"to-create-a-variable-with-windows-powershell\"></a>使用 Windows PowerShell 创建变量\r \r [New-AzureAutomationVariable](http://msdn.microsoft.com/library/dn913771.aspx) cmdlet 可创建变量并设置其初始值。 可以使用 [Get-AzureAutomationVariable](http://msdn.microsoft.com/library/dn913772.aspx) 检索该值。 如果该值为简单类型，则返回相同的类型。 如果其为复杂类型，则返回 **PSCustomObject** 。\r \r 下面的示例命令演示如何创建字符串类型的变量，并返回其值。\r \r     New-AzureAutomationVariable -AutomationAccountName \"MyAutomationAccount\" -Name 'MyStringVariable' -Encrypted $false -Value 'My String'\r     $string = (Get-AzureAutomationVariable -AutomationAccountName \"MyAutomationAccount\" -Name 'MyStringVariable').Value\r \r 下面的示例命令演示如何创建复杂类型的变量，并返回其属性。 在这种情况下，会使用来自 **Get-AzureVM** 的虚拟机对象。\r \r     $vm = Get-AzureVM -ServiceName \"MyVM\" -Name \"MyVM\"\r     New-AzureAutomationVariable -AutomationAccountName \"MyAutomationAccount\" -Name \"MyComplexVariable\" -Encrypted $false -Value $vm\r \r     $vmValue = (Get-AzureAutomationVariable -AutomationAccountName \"MyAutomationAccount\" -Name \"MyComplexVariable\").Value\r     $vmName = $vmValue.Name\r     $vmIpAddress = $vmValue.IpAddress\r \r ## <a name=\"using-a-variable-in-a-runbook\"></a>在 Runbook 中使用变量\r \r 使用 Set-AutomationVariable 活动设置 Runbook 中自动化变量的值，并使用 Get-AutomationVariable 检索该值。  不应在 Runbook 中使用 Set-AzureAutomationVariable 或 Get-AzureAutomationVariable cmdlet，因为它们的效率低于工作流活动。  你也无法使用 **Get-AzureAutomationVariable**检索安全变量的值。  从 Runbook 中创建新变量的唯一方法是使用 [New-AzureAutomationVariable](http://msdn.microsoft.com/library/dn913771.aspx) cmdlet。\r \r ### <a name=\"textual-runbook-samples\"></a>文本 Runbook 示例\r \r #### <a name=\"setting-and-retrieving-a-simple-value-from-a-variable\"></a>设置和检索变量中的一个简单值\r \r 下面的示例命令演示如何设置和检索文本 Runbook 中的变量。 在此示例中，假定已经创建了名为 NumberOfIterations 和 NumberOfRunnings 的整数类型变量以及名为 SampleMessage 的字符串类型变量。\r \r     $NumberOfIterations = Get-AutomationVariable -Name 'NumberOfIterations'\r     $NumberOfRunnings = Get-AutomationVariable -Name 'NumberOfRunnings'\r     $SampleMessage = Get-AutomationVariable -Name 'SampleMessage'\r \r     Write-Output \"Runbook has been run $NumberOfRunnings times.\"\r \r     for ($i = 1; $i -le $NumberOfIterations; $i++) {\r        Write-Output \"$i`: $SampleMessage\"\r     }\r     Set-AutomationVariable -Name NumberOfRunnings -Value ($NumberOfRunnings += 1)\r \r #### <a name=\"setting-and-retrieving-a-complex-object-in-a-variable\"></a>设置和检索变量中的复杂对象\r \r 下面的示例代码演示如何更新文本 Runbook 中具有复杂值的变量。 在此示例中，使用 **Get-AzureVM** 检索到一个 Azure 虚拟机并保存到一个现有的自动化变量。  如 [变量类型](#variable-types)中所述，该对象存储为一个 PSCustomObject。\r \r     $vm = Get-AzureVM -ServiceName \"MyVM\" -Name \"MyVM\"\r     Set-AutomationVariable -Name \"MyComplexVariable\" -Value $vm\r \r 在下面的代码中，从该变量检索值并将其用于启动虚拟机。\r \r     $vmObject = Get-AutomationVariable -Name \"MyComplexVariable\"\r     if ($vmObject.PowerState -eq 'Stopped') {\r        Start-AzureVM -ServiceName $vmObject.ServiceName -Name $vmObject.Name\r     }\r \r #### <a name=\"setting-and-retrieving-a-collection-in-a-variable\"></a>设置和检索变量中的集合\r \r 下面的示例代码演示如何使用文本 Runbook 中包含一组复杂值的变量。 在此示例中，使用 **Get-AzureVM** 检索到多个 Azure 虚拟机并保存到一个现有的自动化变量。  如 [变量类型](#variable-types)中所述，变量存储为一组 PSCustomObject。\r \r     $vms = Get-AzureVM | Where -FilterScript {$_.Name -match \"my\"}     \r     Set-AutomationVariable -Name 'MyComplexVariable' -Value $vms\r \r 在下面的代码中，从该变量检索此集合并将其用于启动每个虚拟机。\r \r     $vmValues = Get-AutomationVariable -Name \"MyComplexVariable\"\r     ForEach ($vmValue in $vmValues)\r     {\r        if ($vmValue.PowerState -eq 'Stopped') {\r           Start-AzureVM -ServiceName $vmValue.ServiceName -Name $vmValue.Name\r        }\r     }\r "}