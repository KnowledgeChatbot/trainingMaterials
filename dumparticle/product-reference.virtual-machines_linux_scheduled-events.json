{"Title":"Azure 中 Linux VM 的计划事件","Description":"Linux 虚拟机上使用 Azure 元数据服务的计划事件。","Content":"# <a name=\"azure-metadata-service-scheduled-events-preview-for-linux-vms\"></a>Azure 元数据服务：适用于 Linux VM 的计划事件（预览）\r \r 计划事件是 Azure 元数据服务中的其中一个子服务。 它负责显示有关即将发生的事件（例如，重新启动）的信息，使应用程序可以为其做准备并限制中断。 它可用于所有 Azure 虚拟机类型（包括 PaaS 和 IaaS）。 计划事件为虚拟机提供了执行预防性任务的时间，将事件的影响降到最低。 \r \r 计划事件可用于 Windows 和 Linux VM。 有关 Windows 上的计划事件的信息，请参阅[适用于 Windows VM 的计划事件](../windows/scheduled-events.md)。\r \r ## <a name=\"why-scheduled-events\"></a>为何使用计划事件？\r \r 通过计划事件，可以采取措施限制由平台启动的维护或由用户启动的操作对服务带来的影响。 \r \r 使用复制技术保持状态的多实例工作负荷可能易受到跨多个实例频繁发生的服务中断的影响。 此类中断可能导致任务开销昂贵（例如，重新生成索引）甚至副本丢失。 \r \r 在很多其他情况下，通过正常关闭序列（如完成或取消正在进行的事务）、将任务重新分配给群集中的其他 VM（手动故障转移）或从网络负载均衡器池中删除虚拟机，可能都可提高服务的整体可用性。 \r \r 有时通知管理员即将发生的事件或记录此类事件也可帮助提高在云中托管的应用程序的可服务性。\r \r Azure 元数据服务在以下用例中显示计划事件：\r -   平台启动的维护（例如，主机 OS 部署）\r -   用户启动的调用（例如，用户重启或重新部署 VM）\r \r \r ## <a name=\"the-basics\"></a>基础知识  \r \r Azure 元数据服务公开在 VM 中使用可访问的 REST 终结点运行虚拟机的相关信息。 该信息通过不可路由的 IP 提供，因此不会在 VM 外部公开。\r \r ### <a name=\"scope\"></a>范围\r 计划事件会显示到云服务中的所有虚拟机或可用性集中的所有虚拟机上。 因此，应查看事件中的 `Resources` 字段以确定将受到影响的 VM。 \r \r ### <a name=\"discovering-the-endpoint\"></a>发现终结点\r 如果在虚拟网络 (VNet) 中创建虚拟机，可从不可路由 IP `169.254.169.254` 获得元数据服务。\r 如果不在虚拟网络中创建虚拟机（云服务和经典 VM 的默认情况），需要使用其他逻辑发现可使用的终结点。 \r \r ### <a name=\"versioning\"></a>版本控制 \r 已对实例元数据服务进行了版本控制。 版本是必需的，当前版本为 `2017-03-01`。\r \r > [!NOTE] \r > 支持的计划事件的前一预览版 {latest} 发布为 api-version。 此格式不再受支持，并且将在未来弃用。\r \r ### <a name=\"using-headers\"></a>使用标头\r 查询元数据服务时，必须提供标头 `Metadata: true` 以确保不会在无意中重定向该请求。\r \r ### <a name=\"enabling-scheduled-events\"></a>启用计划事件\r 首次请求计划事件时，Azure 会在虚拟机上隐式启用该功能。 因此，第一次调用时应该会延迟响应最多两分钟。\r \r ### <a name=\"user-initiated-maintenance\"></a>用户启动的维护\r 用户通过 Azure 门户、API、CLI 或 PowerShell 启动的虚拟机维护会生成计划事件。 这样便可以在应用程序中测试维护准备逻辑，并可以通过应用程序准备用户启动的维护。\r \r 重启虚拟机会计划 `Reboot` 类型的事件。 重新部署虚拟机会计划 `Redeploy` 类型的事件。\r \r > [!NOTE] \r > 目前，可以同时计划最多 10 个用户启动的维护操作。 在计划事件公开发布之前将放宽此限制。\r \r > [!NOTE] \r > 目前，生成计划事件的用户启动的维护不可配置。 可配置性已计划在将来的版本中推出。\r \r ## <a name=\"using-the-api\"></a>使用 API\r \r ### <a name=\"query-for-events\"></a>查询事件\r 只需进行以下调用即可查询计划事件：\r \r ```\r curl -H Metadata:true http://169.254.169.254/metadata/scheduledevents?api-version=2017-03-01\r ```\r \r 响应包含计划事件的数组。 数组为空意味着目前没有计划事件。\r 如果有计划事件，响应会包含事件的数组： \r ```\r {\r     \"DocumentIncarnation\": {IncarnationID},\r     \"Events\": [\r         {\r             \"EventId\": {eventID},\r             \"EventType\": \"Reboot\" | \"Redeploy\" | \"Freeze\",\r             \"ResourceType\": \"VirtualMachine\",\r             \"Resources\": [{resourceName}],\r             \"EventStatus\": \"Scheduled\" | \"Started\",\r             \"NotBefore\": {timeInUTC},              \r         }\r     ]\r }\r ```\r \r ### <a name=\"event-properties\"></a>事件属性\r |属性  |  说明 |\r | - | - |\r | EventId | 此事件的全局唯一标识符。 <br><br> 示例： <br><ul><li>602d9444-d2cd-49c7-8624-8643e7171297  |\r | EventType | 此事件造成的影响。 <br><br> 值： <br><ul><li> `Freeze`：虚拟机计划暂停数秒。 暂停 CPU，但不会对内存、打开文件或网络连接造成影响。 <li>`Reboot`：虚拟机将计划重新启动（非持久性内存将丢失）。 <li>`Redeploy`：虚拟机计划移到另一个节点（临时磁盘将丢失）。 |\r | ResourceType | 此事件影响的资源的类型。 <br><br> 值： <ul><li>`VirtualMachine`|\r | 资源| 此事件影响的资源的列表。 它保证最多只能包含一个[更新域](manage-availability.md)的计算机，但可能不包含该更新域中的所有计算机。 <br><br> 示例： <br><ul><li> [\"FrontEnd_IN_0\", \"BackEnd_IN_0\"] |\r | 事件状态 | 此事件的状态。 <br><br> 值： <ul><li>`Scheduled`：此事件计划在 `NotBefore` 属性指定的时间之后启动。<li>`Started`：此事件已启动。</ul> 不提供 `Completed` 或类似状态；事件完成后，将不再返回事件。\r | NotBefore| 此事件可能会在之后启动的时间。 <br><br> 示例： <br><ul><li> 2016-09-19T18:29:47Z  |\r \r ### <a name=\"event-scheduling\"></a>事件计划\r 将根据事件类型为每个事件计划将来的最小量时间。 此时间反映在某个事件的 `NotBefore` 属性上。 \r \r |EventType  | 最小值通知 |\r | - | - |\r | 冻结| 15 分钟 |\r | 重新启动 | 15 分钟 |\r | 重新部署 | 10 分钟 |\r \r ### <a name=\"starting-an-event\"></a>启动事件 \r \r 了解即将发生的事件并完成正常关闭逻辑后，可以通过使用 `EventId` 对元数据服务进行 `POST` 调用来批准未完成的事件。 这指示 Azure 可以缩短最小通知时间（如可能）。 \r \r ```\r curl -H Metadata:true -X POST -d '{\"DocumentIncarnation\":\"5\", \"StartRequests\": [{\"EventId\": \"f020ba2e-3bc0-4c40-a10b-86575a9eabd5\"}]}' http://169.254.169.254/metadata/scheduledevents?api-version=2017-03-01\r ```\r \r > [!NOTE] \r > 确认事件后，即可允许事件针对事件中所有的 `Resources` 继续进行，而不仅仅是确认该事件的虚拟机。 因此，可以选择一个指挥计算机来协调该确认，为简单起见，可选择 `Resources` 字段中的第一个计算机。\r \r \r \r \r ## <a name=\"python-sample\"></a>Python 示例 \r \r 下例将查询计划事件的元数据服务器并审核所有未完成的事件。\r \r ```python\r #!/usr/bin/python\r \r import json\r import urllib2\r import socket\r import sys\r \r metadata_url = \"http://169.254.169.254/metadata/scheduledevents?api-version=2017-03-01\"\r headers = \"{Metadata:true}\"\r this_host = socket.gethostname()\r \r def get_scheduled_events():\r    req = urllib2.Request(metadata_url)\r    req.add_header('Metadata', 'true')\r    resp = urllib2.urlopen(req)\r    data = json.loads(resp.read())\r    return data\r \r def handle_scheduled_events(data):\r     for evt in data['Events']:\r         eventid = evt['EventId']\r         status = evt['EventStatus']\r         resources = evt['Resources']\r         eventtype = evt['EventType']\r         resourcetype = evt['ResourceType']\r         notbefore = evt['NotBefore'].replace(\" \",\"_\")\r         if this_host in resources:\r             print \"+ Scheduled Event. This host is scheduled for \" + eventype + \" not before \" + notbefore\r             # Add logic for handling events here\r \r def main():\r    data = get_scheduled_events()\r    handle_scheduled_events(data)\r    \r if __name__ == '__main__':\r   main()\r   sys.exit(0)\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤 \r \r - 有关 API 的更多信息，请参阅[实例元数据服务](instance-metadata-service.md)。\r - [Azure 中 Linux 虚拟机的计划内维护](planned-maintenance.md)。\r "}