{"Title":"如何使用 Azure Redis 缓存","Description":"了解如何使用 Azure Redis 缓存提高 Azure 应用程序的性能","Content":"# <a name=\"how-to-use-azure-redis-cache\"></a>如何使用 Azure Redis 缓存\r > [!div class=\"op_single_selector\"]\r > * [.NET](cache-dotnet-how-to-use-azure-redis-cache.md)\r > * [ASP.NET](cache-web-app-howto.md)\r > * [Node.js](cache-nodejs-get-started.md)\r > * [Java](cache-java-get-started.md)\r > * [Python](cache-python-get-started.md)\r > \r > \r \r 本指南说明如何开始使用 **Azure Redis 缓存**。 Azure Redis 缓存以常用的开源 Redis 缓存为基础。 这使你能够访问 Azure.cn 管理的安全、专用的 Redis 缓存。 可以通过 Azure 中的任何应用程序访问使用 Azure Redis 缓存创建的缓存。\r \r Azure Redis 缓存提供以下层：\r \r - **基本** - 单个节点。 多种大小，最大 53 GB。\r - **标准** - 双节点主/副本配置。 多种大小，最大 53 GB。 99.9% SLA。\r - **高级** - 双节点主/副本配置，最多有 10 个分片。 多个大小（从 6 GB 到 530 GB）。 标准层的所有功能加上其他功能，包括支持 [Redis 群集](cache-how-to-premium-clustering.md)、[Redis 持久性](cache-how-to-premium-persistence.md)和 [Azure 虚拟网络](cache-how-to-premium-vnet.md)。 99.9% SLA。\r \r 每个级别在功能和定价方面存在差异。 有关定价信息，请参阅[缓存定价详细信息][Cache Pricing Details]。\r \r 本指南说明如何使用以 C\\# 代码编写的 [StackExchange.Redis][StackExchange.Redis] 客户端。 涉及的任务包括**创建和配置缓存**、**配置缓存客户端**，以及**在缓存中添加和删除对象**。 有关使用 Azure Redis 缓存的详细信息，请参阅[后续步骤][Next Steps]。 有关构建使用 Redis 缓存的 ASP.NET MVC Web 应用的分步教程，请参阅 [How to create a Web App with Redis Cache](cache-web-app-howto.md)（如何创建使用 Redis 缓存的 Web 应用）。\r \r <a name=\"getting-started-cache-service\"></a>\r \r ## <a name=\"get-started-with-azure-redis-cache\"></a>开始使用 Azure Redis 缓存\r Azure Redis 缓存非常容易上手。 若要开始使用，需要首先设置和配置缓存。 接下来，配置缓存客户端，以便它们可以访问缓存。 在配置了缓存客户端后，就可以开始使用它们。\r \r - [创建缓存][Create the cache]\r - [配置缓存客户端][Configure the cache clients]\r \r <a name=\"create-cache\"></a>\r \r ## <a name=\"create-a-cache\"></a>创建缓存\r [!INCLUDE [azurerm-azurechinacloud-environment-parameter](../../includes/azurerm-azurechinacloud-environment-parameter.md)]\r \r [!INCLUDE [redis-cache-create](../../includes/redis-cache-create.md)]\r \r ### <a name=\"to-access-your-cache-after-its-created\"></a>访问已创建的缓存\r [!INCLUDE [redis-cache-create](../../includes/redis-cache-browse.md)]\r \r 有关配置缓存的详细信息，请参阅 [如何配置 Azure Redis 缓存](cache-configure.md)。\r \r <a name=\"NuGet\"></a>\r \r ## <a name=\"configure-the-cache-clients\"></a>配置缓存客户端\r [!INCLUDE [redis-cache-configure](../../includes/redis-cache-configure-stackexchange-redis-nuget.md)]\r \r 配置客户端项目的缓存后，就可以使用以下各节中介绍的方法来使用缓存。\r \r <a name=\"working-with-caches\"></a>\r \r ## <a name=\"working-with-caches\"></a>使用缓存\r 本节中的步骤介绍如何使用缓存执行常见任务。\r \r - [连接到缓存][Connect to the cache]\r - [添加和从缓存检索对象][Add and retrieve objects from the cache]\r - [处理缓存中的 .NET 对象](#work-with-net-objects-in-the-cache)\r \r <a name=\"connect-to-cache\"></a>\r \r ## <a name=\"connect-to-the-cache\"></a>连接到缓存\r 若要以编程方式使用缓存，需要引用该缓存。 以下代码添加到想使用 StackExchange.Redis 客户端的任何文件的顶部，以访问 Azure Redis 缓存。\r \r     using StackExchange.Redis;\r \r > [!NOTE]\r > StackExchange.Redis 客户端需要.NET Framework 4 或更高版本。\r > \r > \r \r 到 Azure Redis 缓存的连接由 `ConnectionMultiplexer` 类管理。 此类应共享并在客户端应用程序中重复使用，不需要在每次执行操作的基础上创建。 \r \r 若要连接到 Azure Redis 缓存并返回连接的 `ConnectionMultiplexer` 的实例，请调用静态 `Connect` 方法并传入缓存终结点和密钥。 使用从 Azure 门户生成的密钥作为密码参数。\r \r     ConnectionMultiplexer connection = ConnectionMultiplexer.Connect(\"contoso5.redis.cache.chinacloudapi.cn,abortConnect=false,ssl=true,password=...\");\r \r > [!IMPORTANT]\r > 警告：切勿将凭据存储在源代码中。 为了使本示例简单明了，我以源代码来呈现凭据内容。 有关如何存储凭据的详细信息，请参阅[应用程序字符串和连接字符串的工作原理][How Application Strings and Connection Strings Work]。\r > \r > \r \r 如果不想使用 SSL，请设置 `ssl=false` 或者省略 `ssl` 参数。\r \r > [!NOTE]\r > 默认情况下，为新缓存禁用非 SSL 端口。 有关启用非 SSL 端口的说明，请参阅[访问端口](cache-configure.md#access-ports)。\r > \r > \r \r 共享应用程序中的 `ConnectionMultiplexer` 实例的一个方法是，拥有返回连接示例的静态属性（与下列示例类似）。 此方法是一种线程安全方法，可仅初始化单一连接的 `ConnectionMultiplexer` 实例。 在这些示例中， `abortConnect` 设置为 false，这表示即使未建立 Azure Redis 缓存连接，也可成功调用。 `ConnectionMultiplexer` 的一个关键功能是，一旦解决网络问题和其他原因，它便会自动还原缓存连接。\r \r     private static Lazy<ConnectionMultiplexer> lazyConnection = new Lazy<ConnectionMultiplexer>(() =>\r     {\r         return ConnectionMultiplexer.Connect(\"contoso5.redis.cache.chinacloudapi.cn,abortConnect=false,ssl=true,password=...\");\r     });\r \r     public static ConnectionMultiplexer Connection\r     {\r         get\r         {\r             return lazyConnection.Value;\r         }\r     }\r \r 有关高级连接配置选项的详细信息，请参阅 [StackExchange.Redis 配置模型][StackExchange.Redis configuration model]。\r \r [!INCLUDE [redis-cache-create](../../includes/redis-cache-access-keys.md)]\r \r 建立连接后，通过调用 `ConnectionMultiplexer.GetDatabase` 方法返回对 Redis 缓存数据库的引用。 从 `GetDatabase` 方法返回的对象是一个轻型直通对象，不需要存储。\r \r     // Connection refers to a property that returns a ConnectionMultiplexer\r     // as shown in the previous example.\r     IDatabase cache = Connection.GetDatabase();\r \r     // Perform cache operations using the cache object...\r     // Simple put of integral data types into the cache\r     cache.StringSet(\"key1\", \"value\");\r     cache.StringSet(\"key2\", 25);\r \r     // Simple get of data types from the cache\r     string key1 = cache.StringGet(\"key1\");\r     int key2 = (int)cache.StringGet(\"key2\");\r \r Azure Redis 缓存的数据库数目（默认为 16 个）是可以配置的，因此可以通过逻辑方式隔离 Redis 缓存中的数据。 有关详细信息，请参阅[什么是 Redis 数据库？](cache-faq.md#what-are-redis-databases)和[默认 Redis 服务器配置](cache-configure.md#default-redis-server-configuration)。\r \r 已经知道如何连接到 Azure Redis 缓存实例并返回对缓存数据库的引用，现在让我们看看如何使用缓存。\r \r <a name=\"add-object\"></a>\r \r ## <a name=\"add-and-retrieve-objects-from-the-cache\"></a>从缓存添加和检索对象\r 可以使用 `StringSet` 和 `StringGet` 方法在缓存中存储和检索项。\r \r     // If key1 exists, it is overwritten.\r     cache.StringSet(\"key1\", \"value1\");\r \r     string value = cache.StringGet(\"key1\");\r \r Redis 将大多数数据存储为 Redis 字符串，但这些字符串可能包含许多类型的数据，包括序列化的二进制数据，可在缓存中存储 .NET 对象时使用。\r \r 调用 `StringGet` 时，如果该对象存在，则返回它，如果该对象不存在，则返回 `null`。 如果返回 `null`，则可从所需的数据源检索值，并将其存储在缓存中供后续使用。 此使用模式称为缓存端模式。\r \r     string value = cache.StringGet(\"key1\");\r     if (value == null)\r     {\r         // The item keyed by \"key1\" is not in the cache. Obtain\r         // it from the desired data source and add it to the cache.\r         value = GetValueFromDataSource();\r \r         cache.StringSet(\"key1\", value);\r     }\r \r 也可使用 `RedisValue`，如以下示例所示。 `RedisValue` 具有隐式运算符，适用于整型数据类型，并可用于 `null` 是缓存项的预期值的情况。\r \r \r     RedisValue value = cache.StringGet(\"key1\");\r     if (!value.HasValue)\r     {\r         value = GetValueFromDataSource();\r         cache.StringSet(\"key1\", value);\r     }\r \r \r 要在缓存中指定项的过期时间，请使用 `StringSet` 的 `TimeSpan` 参数。\r \r     cache.StringSet(\"key1\", \"value1\", TimeSpan.FromMinutes(90));\r \r ## <a name=\"work-with-net-objects-in-the-cache\"></a>处理缓存中的 .NET 对象\r Azure Redis 缓存可以缓存 .NET 对象以及基元数据类型，但在缓存 .NET 对象之前，必须将其序列化。 此 .NET 对象序列化是应用程序开发人员的责任，同时赋与开发人员选择序列化程序的弹性。\r \r 序列化对象的一种简单方式是使用 [Newtonsoft.Json.NET](https://www.nuget.org/packages/Newtonsoft.Json/8.0.1-beta1) 中的 `JsonConvert` 序列化方法，并与 JSON 相互序列化。 以下示例演示了使用 `Employee` 对象实例执行 GET 和 SET。\r \r     class Employee\r     {\r         public int Id { get; set; }\r         public string Name { get; set; }\r \r         public Employee(int EmployeeId, string Name)\r         {\r             this.Id = EmployeeId;\r             this.Name = Name;\r         }\r     }\r \r     // Store to cache\r     cache.StringSet(\"e25\", JsonConvert.SerializeObject(new Employee(25, \"Clayton Gragg\")));\r \r     // Retrieve from cache\r     Employee e25 = JsonConvert.DeserializeObject<Employee>(cache.StringGet(\"e25\"));\r \r <a name=\"next-steps\"></a>\r \r ## <a name=\"next-steps\"></a>后续步骤\r 现在，已学习了基础知识，接下来请打开以下链接了解有关 Azure Redis 缓存的详细信息。\r \r - 了解 Azure Redis 缓存的 ASP.NET 提供程序。\r   - [Azure Redis 会话状态提供程序](cache-aspnet-session-state-provider.md)\r   - [Azure Redis 缓存 ASP.NET 输出缓存提供程序](cache-aspnet-output-cache-provider.md)\r - [启用缓存诊断](cache-how-to-monitor.md#enable-cache-diagnostics)，以便可以[监视](cache-how-to-monitor.md)缓存的运行状况。 可以在 Azure 门户中查看指标，也可以使用所选的工具[下载和查看](https://github.com/rustd/RedisSamples/tree/master/CustomMonitoring)这些指标。\r - 查看 [StackExchange.Redis 缓存客户端文档][StackExchange.Redis cache client documentation]。\r   - 可以从许多 Redis 客户端和开发语言访问 azure Redis 缓存。 有关详细信息，请参阅 [http://redis.io/clients][http://redis.io/clients]。\r - Azure Redis 缓存还可与第三方服务和工具搭配使用，如 Redsmin 和 Redis Desktop Manager。\r   - 有关 Redsmin 的详细信息，请参阅[如何检索 Azure Redis 连接字符串并将其用于 Redsmin][How to retrieve an Azure Redis connection string and use it with Redsmin]。\r   - 使用 [RedisDesktopManager](https://github.com/uglide/RedisDesktopManager)通过 GUI 访问和检查 Azure Redis 缓存中的数据。\r - 请参阅 [redis][redis] 文档并阅读 [redis 数据类型][redis data types]和 [Redis 数据类型的十五分钟介绍][a fifteen minute introduction to Redis data types]。\r \r <!-- INTRA-TOPIC LINKS -->\r [Next Steps]: #next-steps\r [Introduction to Azure Redis Cache (Video)]: #video\r [What is Azure Redis Cache?]: #what-is\r [Create an Azure Cache]: #create-cache\r [Which type of caching is right for me?]: #choosing-cache\r [Prepare Your Visual Studio Project to Use Azure Caching]: #prepare-vs\r [Configure Your Application to Use Caching]: #configure-app\r [Get Started with Azure Redis Cache]: #getting-started-cache-service\r [Create the cache]: #create-cache\r [Configure the cache]: #enable-caching\r [Configure the cache clients]: #NuGet\r [Working with Caches]: #working-with-caches\r [Connect to the cache]: #connect-to-cache\r [Add and retrieve objects from the cache]: #add-object\r [Specify the expiration of an object in the cache]: #specify-expiration\r [Store ASP.NET session state in the cache]: #store-session\r \r \r <!-- IMAGES -->\r \r \r [StackExchangeNuget]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-stackexchange-redis.png\r \r [NuGetMenu]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-manage-nuget-menu.png\r \r [CacheProperties]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-properties.png\r \r [ManageKeys]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-manage-keys.png\r \r [SessionStateNuGet]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-session-state-provider.png\r \r [BrowseCaches]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-browse-caches.png\r \r [Caches]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-caches.png\r \r \r \r \r \r \r \r <!-- LINKS -->\r [http://redis.io/clients]: http://redis.io/clients\r [Develop in other languages for Azure Redis Cache]: /redis-cache\r [How to retrieve an Azure Redis connection string and use it with Redsmin]: https://redsmin.uservoice.com/knowledgebase/articles/485711-how-to-connect-redsmin-to-azure-redis-cache\r [Azure Redis Session State Provider]: /redis-cache/cache-aspnet-session-state-provider\r [How to: Configure a Cache Client Programmatically]: https://docs.azure.cn\r [Session State Provider for Azure Cache]: http://go.microsoft.com/fwlink/?LinkId=320835\r [Azure AppFabric Cache: Caching Session State]: http://www.microsoft.com/showcase/details.aspx?uuid=87c833e9-97a9-42b2-8bb1-7601f9b5ca20\r [Output Cache Provider for Azure Cache]: http://go.microsoft.com/fwlink/?LinkId=320837\r [Azure Shared Caching]: http://msdn.microsoft.com/library/windowsazure/gg278356.aspx\r [Team Blog]: http://blogs.msdn.com/b/windowsazure/\r [Azure Caching]: http://www.microsoft.com/showcase/Search.aspx?phrase=azure+caching\r [How to Configure Virtual Machine Sizes]: http://go.microsoft.com/fwlink/?LinkId=164387\r [Azure Caching Capacity Planning Considerations]: http://go.microsoft.com/fwlink/?LinkId=320167\r [Azure Caching]: http://go.microsoft.com/fwlink/?LinkId=252658\r [How to: Set the Cacheability of an ASP.NET Page Declaratively]: http://msdn.microsoft.com/library/zd1ysf1y.aspx\r [How to: Set a Page's Cacheability Programmatically]: http://msdn.microsoft.com/library/z852zf6b.aspx\r [Configure a cache in Azure Redis Cache]: http://msdn.microsoft.com/library/azure/dn793612.aspx\r \r [StackExchange.Redis configuration model]: https://stackexchange.github.io/StackExchange.Redis/Configuration\r \r [Work with .NET objects in the cache]: /redis-cache/cache-dotnet-how-to-use-azure-redis-cache#working-with-caches\r \r [NuGet Package Manager Installation]: http://go.microsoft.com/fwlink/?LinkId=240311\r [Cache Pricing Details]: https://www.azure.cn/pricing/details/redis-cache/\r [Azure portal]: https://portal.azure.cn/\r \r [Overview of Azure Redis Cache]: /redis-cache/\r [Azure Redis Cache]: /redis-cache/\r \r [Migrate to Azure Redis Cache]: http://go.microsoft.com/fwlink/?LinkId=317347\r [Azure Redis Cache Samples]: http://go.microsoft.com/fwlink/?LinkId=320840\r [Using Resource groups to manage your Azure resources]: ../azure-resource-manager/resource-group-overview.md\r \r [StackExchange.Redis]: http://github.com/StackExchange/StackExchange.Redis\r [StackExchange.Redis cache client documentation]: http://github.com/StackExchange/StackExchange.Redis#documentation\r \r [Redis]: http://redis.io/documentation\r [Redis data types]: http://redis.io/topics/data-types\r [a fifteen minute introduction to Redis data types]: http://redis.io/topics/data-types-intro\r \r [How Application Strings and Connection Strings Work]: http://azure.microsoft.com/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/\r \r \r <!--Update_Description: wording update-->\r "}