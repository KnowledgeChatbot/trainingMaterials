{"Title":"人脸 API Java 快速入门","Description":"获取信息和代码示例，帮助自己快速开始使用认知服务中的人脸 API 和 Java。","Content":"# <a name=\"face-api-java-quick-starts\"></a>人脸 API Java 快速入门\r 本文提供信息和代码示例来帮助读者快速开始使用人脸 API 和 Java 来完成以下任务： \r - [检测图像中的人脸](#Detect) \r - [创建人员组](#Create)\r \r ## <a name=\"prerequisites\"></a>先决条件\r - 在[此处](https://github.com/Microsoft/Cognitive-face-android)获取 Microsoft 人脸 API Android SDK\r - 在[此处](../../Computer-vision/Vision-API-How-to-Topics/HowToSubscribe.md)详细了解如何获取免费订阅密钥\r \r ## 使用人脸 API 通过 Java 检测图像中的人脸 <a name=\"Detect\"> </a>\r 使用[“人脸 - 检测”方法](https://dev.cognitive.azure.cn/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236)可以检测图像中的人脸，并返回人脸属性，包括：\r - 人脸 ID：在多种人脸 API 方案使用的唯一 ID。 \r - 人脸矩形：左侧坐标、顶部坐标、宽度和高度，指示人脸在图像中的位置。\r - 地标：27 点人脸地标数组，指向人脸组成部分的重要位置。\r - 面部属性包括年龄、性别、笑容强度、头部姿势和面部毛发。 \r \r #### <a name=\"face-detect-java-example-request\"></a>人脸检测 Java 示例请求\r \r 若要运行示例，请执行以下步骤：\r \r 1. 创建新的命令行应用。\r 1. 将 Main 类替换为以下代码（保留所有 `package` 语句）。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 根据需要更改 `uriBase` 值，以使用订阅密钥的获取位置。\r 1. 从 Maven 存储库将这些全局库下载到项目中的 `lib` 目录：\r    - `org.apache.httpcomponents:httpclient:4.2.4`\r    - `org.json:json:20170516`\r 1. 运行“Main”。\r \r ```java\r // This sample uses the Apache HTTP client library(org.apache.httpcomponents:httpclient:4.2.4)\r // and the org.json library (org.json:json:20170516).\r \r import java.net.URI;\r import org.apache.http.HttpEntity;\r import org.apache.http.HttpResponse;\r import org.apache.http.client.HttpClient;\r import org.apache.http.client.methods.HttpPost;\r import org.apache.http.entity.StringEntity;\r import org.apache.http.client.utils.URIBuilder;\r import org.apache.http.impl.client.DefaultHttpClient;\r import org.apache.http.util.EntityUtils;\r import org.json.JSONArray;\r import org.json.JSONObject;\r \r public class Main\r {\r     // **********************************************\r     // *** Update or verify the following values. ***\r     // **********************************************\r \r     // Replace the subscriptionKey string value with your valid subscription key.\r     public static final String subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r     public static final String uriBase = \"https://api.cognitive.azure.cn/face/v1.0/detect\";\r \r     public static void main(String[] args)\r     {\r         HttpClient httpclient = new DefaultHttpClient();\r \r         try\r         {\r             URIBuilder builder = new URIBuilder(uriBase);\r \r             // Request parameters. All of them are optional.\r             builder.setParameter(\"returnFaceId\", \"true\");\r             builder.setParameter(\"returnFaceLandmarks\", \"false\");\r             builder.setParameter(\"returnFaceAttributes\", \"age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = builder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request body.\r             StringEntity reqEntity = new StringEntity(\"{\\\"url\\\":\\\"https://upload.wikimedia.org/wikipedia/commons/c/c3/RH_Louise_Lillian_Gish.jpg\\\"}\");\r             request.setEntity(reqEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpclient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             if (entity != null)\r             {\r                 // Format and display the JSON response.\r                 System.out.println(\"REST Response:\\n\");\r \r                 String jsonString = EntityUtils.toString(entity).trim();\r                 if (jsonString.charAt(0) == '[') {\r                     JSONArray jsonArray = new JSONArray(jsonString);\r                     System.out.println(jsonArray.toString(2));\r                 }\r                 else if (jsonString.charAt(0) == '{') {\r                     JSONObject jsonObject = new JSONObject(jsonString);\r                     System.out.println(jsonObject.toString(2));\r                 } else {\r                     System.out.println(jsonString);\r                 }\r             }\r         }\r         catch (Exception e)\r         {\r             // Display error message.\r             System.out.println(e.getMessage());\r         }\r     }\r }\r ```\r \r #### <a name=\"face-detect-response\"></a>人脸检测响应\r \r 成功响应将以 JSON 格式返回。 下面是成功响应的示例： \r \r ```json\r REST Response:\r \r [{\r   \"faceRectangle\": {\r     \"top\": 131,\r     \"left\": 177,\r     \"width\": 162,\r     \"height\": 162\r   },\r   \"faceAttributes\": {\r     \"makeup\": {\r       \"eyeMakeup\": true,\r       \"lipMakeup\": true\r     },\r     \"facialHair\": {\r       \"sideburns\": 0,\r       \"beard\": 0,\r       \"moustache\": 0\r     },\r     \"gender\": \"female\",\r     \"accessories\": [],\r     \"blur\": {\r       \"blurLevel\": \"low\",\r       \"value\": 0.06\r     },\r     \"headPose\": {\r       \"roll\": 0.1,\r       \"pitch\": 0,\r       \"yaw\": -32.9\r     },\r     \"smile\": 0,\r     \"glasses\": \"NoGlasses\",\r     \"hair\": {\r       \"bald\": 0,\r       \"invisible\": false,\r       \"hairColor\": [\r         {\r           \"color\": \"brown\",\r           \"confidence\": 1\r         },\r         {\r           \"color\": \"black\",\r           \"confidence\": 0.87\r         },\r         {\r           \"color\": \"other\",\r           \"confidence\": 0.51\r         },\r         {\r           \"color\": \"blond\",\r           \"confidence\": 0.08\r         },\r         {\r           \"color\": \"red\",\r           \"confidence\": 0.08\r         },\r         {\r           \"color\": \"gray\",\r           \"confidence\": 0.02\r         }\r       ]\r     },\r     \"emotion\": {\r       \"contempt\": 0,\r       \"surprise\": 0.005,\r       \"happiness\": 0,\r       \"neutral\": 0.986,\r       \"sadness\": 0.009,\r       \"disgust\": 0,\r       \"anger\": 0,\r       \"fear\": 0\r     },\r     \"exposure\": {\r       \"value\": 0.67,\r       \"exposureLevel\": \"goodExposure\"\r     },\r     \"occlusion\": {\r       \"eyeOccluded\": false,\r       \"mouthOccluded\": false,\r       \"foreheadOccluded\": false\r     },\r     \"noise\": {\r       \"noiseLevel\": \"low\",\r       \"value\": 0\r     },\r     \"age\": 22.9\r   },\r   \"faceId\": \"49d55c17-e018-4a42-ba7b-8cbbdfae7c6f\"\r }]\r \r Process finished with exit code 0\r ```\r \r ## 使用人脸 API 通过 Java 创建人员组 <a name=\"Create\"> </a>\r \r 使用[“人员组 - 创建人员组”方法](https://dev.cognitive.azure.cn/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)可以创建包含指定 personGroupId、名称和用户提供的 userData 的人员组。 人员组是“人脸 - 识别”API 的最重要参数之一。 “识别”API 会在指定的人员组中搜索人员的平面。\r \r #### <a name=\"person-group---create-a-person-group-example\"></a>“人员组 - 创建人员组”示例\r \r 更改 REST URL 以使用订阅密钥的获取位置，并将“Ocp-Apim-Subscription-Key”值替换为有效的订阅密钥。\r \r ```java\r // // This sample uses the Apache HTTP client from HTTP Components (http://hc.apache.org/httpcomponents-client-ga/)\r import java.net.URI;\r import org.apache.http.HttpEntity;\r import org.apache.http.HttpResponse;\r import org.apache.http.client.HttpClient;\r import org.apache.http.client.methods.HttpPut;\r import org.apache.http.entity.StringEntity;\r import org.apache.http.client.utils.URIBuilder;\r import org.apache.http.impl.client.DefaultHttpClient;\r import org.apache.http.util.EntityUtils;\r \r public class Main\r {\r     public static void main(String[] args)\r     {\r         HttpClient httpClient = new DefaultHttpClient();\r \r         try\r         {\r             // The valid characters for the ID below include numbers, English letters in lower case, '-', and '_'.\r             // The maximum length of the personGroupId is 64.\r             String personGroupId = \"example-group-00\";\r \r             URIBuilder builder = new URIBuilder(\"https://api.cognitive.azure.cn/face/v1.0/persongroups/\" +\r                                                 personGroupId);\r \r             URI uri = builder.build();\r             HttpPut request = new HttpPut(uri);\r \r             // Request headers. Replace the example key with your valid subscription key.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", \"13hc77781f7e4b19b5fcdd72a8df7156\");\r \r             // Request body. The name field is the display name you want for the group (must be under 128 characters).\r             // The size limit for what you want to include in the userData field is 16KB.\r             String body = \"{ \\\"name\\\":\\\"My Group\\\",\\\"userData\\\":\\\"User-provided data attached to the person group.\\\" }\";\r \r             StringEntity reqEntity = new StringEntity(body);\r             request.setEntity(reqEntity);\r \r             HttpResponse response = httpClient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             if (entity != null)\r             {\r                 System.out.println(EntityUtils.toString(entity));\r             }\r         }\r         catch (Exception e)\r         {\r             System.out.println(e.getMessage());\r         }\r     }\r }\r ```\r \r "}