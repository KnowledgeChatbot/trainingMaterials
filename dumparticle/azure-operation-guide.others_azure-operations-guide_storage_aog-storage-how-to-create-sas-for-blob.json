{"Title":"如何为Azure存储的Blob创建SAS（共享访问签名）令牌","Description":"如何为Blob创建SAS令牌","Content":"\r #如何为Azure存储的Blob创建SAS（共享访问签名）令牌\r \r 存储账号名称和存储账号密钥是操作存储账号的重要的信息，一旦存储账号外泄，存储账号内的资源将会完全暴露。SAS可以帮助我们避免存储账户密钥的泄露，请阅读[这篇文章](/storage/storage-dotnet-shared-access-signature-part-1)了解SAS的详细的概念，文章中也包含了令牌中各个参数的含义。\r \r 这篇文章将帮助我们创建SAS令牌\r \r - .Net的方式创建SAS令牌\r - PowerShell的方式创建SAS令牌\r - Rest API的方式创建Blob的SAS令牌\r \r ##.Net的方式创建SAS令牌\r \r 关于.Net的方式创建SAS令牌请阅读下面的文章：\r \r [创建SAS并将SAS用于Blob服务](/storage/storage-dotnet-shared-access-signature-part-2)\r \r ##PowerShell的方式创建SAS 令牌\r \r >使用Powershell前有关Azure PowerShell的安装、配置和连接到订阅请阅读[这篇文章](/powershell-install-configure)\r \r 下面内容包含：\r \r - 创建容器的临时SAS令牌\r - 为Blob创建临时SAS令牌\r - 根据容器临时SAS令牌上传文件\r - 给容器指定存储访问策略\r - 为Blob创建具有存储访问策略的SAS令牌\r \r **如何为容器和Blob创建SAS令牌**\r \r ```\r #定义一些参数\r $storageAccountName = <storage account name>\r $storageAccountKey = <storage account key>\r $containerName = 'sastest'\r \r #PowerShell的方式创建storage操作的上下文\r $storageContext = New-AzureStorageContext -Environment AzureChinaCloud -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey\r \r #创建一个新的容器\r $container = New-AzureStorageContainer -Context $storageContext -Name $containerName\r $cbc = $container.CloudBlobContainer\r \r #为容器创建临时SAS (临时SAS和具有存储访问策略的SAS请阅读下面的参考文档)\r $sasToken = New-AzureStorageContainerSASToken -container $containerName -permission rwl -Context $storageContext\r write-host $sasToken\r \r $sasTokenNoWrite = New-AzureStorageContainerSASToken -container $containerName -permission rl -Context $storageContext\r \r #为blob创建SAS 令牌\r New-AzureStorageBlobSASToken -Container 'sastest' -Blob 'test.txt' -Context $storageContext -Permission rw\t\t\r ```\r \r 参考文档： [临时SAS和具有存储访问策略的SAS](/storage/storage-dotnet-shared-access-signature-part-1)\r \r PowerShell指令：[New-AzureStorageContainerSASToken](https://msdn.microsoft.com/zh-cn/library/azure/dn584416.aspx)、\r [New-AzureStorageBlobSASToken](https://msdn.microsoft.com/zh-cn/library/f3833d85-ef4e-449e-8e81-1a2367e39026)\t\t\r \r **如何在已知SAS令牌的情况下来使用**\r \r ```\r #在知道Blob容器SAS令牌的客户端创建存储上下文\r $storageContextClient = New-AzureStorageContext -StorageAccountName $storageAccountName -SASToken $sasToken\t\r #这个存储上下文只可以在该容器下做相应的操作并且只能拥有在创建过程中赋予的权限\r #如果你要继续创建container将会报错\r New-AzureStorageContainer -Context $storageContextClient -Name 'test1'\r #错误内容: New-AzureStorageContainer : The remote server returned an error: (403) Forbidden.\r \r #测试上传文件\r $ImageToUpload = \"D:\\test.PNG\"\r Set-AzureStorageBlobContent -Container 'sastest' -File $ImageToUpload -Context $storageContextClient\r \r #如果知道Blob的SAS令牌的话，我们就可以知道完整的Blob的url，并可以执行相应权限的操作。\t\t\r ```\r \r 结果：\r \r ![](./media/aog-storage-how-to-create-sas-for-blob/use-sas-token-create-blob.PNG)\r \r **注意**:在创建临时SAS中我们赋予了read、write和list权限，如果没有write权限上述上传将会报错具体如下所示\r \r ```\r $storageContextClientNoWrite = New-AzureStorageContext -StorageAccountName $storageAccountName -SASToken $sasTokenNoWrite\r Set-AzureStorageBlobContent -container 'sastest' -File $ImageToUpload -Context $storageContextClientNoWrite\r ```\r \r ![](./media/aog-storage-how-to-create-sas-for-blob/no-write-permission.PNG)\r \r **创建具有存储访问策略的Blob的SAS令牌**\r \r ```\r #定义一些参数\r $storageAccountName = <storage account name>\r $storageAccountKey = <storage account key>\r $containerNameWithPolicy = 'sastestwithpolicy'\r \r #PowerShell的方式创建storage操作的上下文\r $storageContext = New-AzureStorageContext -Environment AzureChinaCloud -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey\r \r #创建一个新的容器\r $container = New-AzureStorageContainer -Context $storageContext -Name $containerNameWithPolicy\r $cbc = $container.CloudBlobContainer\r #为新创建的容器设置存储访问策略\r $permissions = $cbc.GetPermissions();\r $policyName = 'policy1'\r $policy = new-object 'Microsoft.WindowsAzure.Storage.Blob.SharedAccessBlobPolicy'\r $policy.SharedAccessStartTime = $(Get-Date).ToUniversalTime().AddMinutes(-5)\r $policy.SharedAccessExpiryTime = $(Get-Date).ToUniversalTime().AddDays(10)\r $policy.Permissions = \"Read,Write,List,Delete\"\r $permissions.SharedAccessPolicies.Add($policyName, $policy)\r $cbc.SetPermissions($permissions);\r \r #获取SAS令牌\r $sas = $cbc.GetSharedAccessSignature($policy, $policyName)\r Write-Host 'Shared Access Signature= '$($sas.Substring(1))''\r \r #为blob创建访问策略为policy1的SAS令牌\r New-AzureStorageBlobSASToken -Container 'sastestwithpolicy' -Policy 'policy1' -Blob 'test.txt' -Context $storageContext\r \r #如何删除存储访问策略\r Remove-AzureStorageContainerStoredAccessPolicy -Container \"sastestwithpolicy\" -context $storageContext -Policy 'policy1'\r ```\r \r 存储策略的好处可以更方便我们管理SAS。它比临时SAS多了以下功能\r \r - 删除存储访问策略吊销SAS\r - 设置存储访问策略的过期时间来吊销SAS\r - 可以通过上述方式批量吊销SAS\r \r 关于吊销SAS的更详细信息，请阅读[这篇文章](/storage/storage-dotnet-shared-access-signature-part-1)。\r \r ##Rest API的方式创建Blob的SAS令牌\r \r 参考文档：[共享访问签名的示例](https://msdn.microsoft.com/zh-cn/library/azure/dn140256.aspx)、[建立存储的访问策略](https://msdn.microsoft.com/zh-cn/library/azure/dn140257.aspx)、[构造服务 SAS](https://msdn.microsoft.com/zh-cn/library/azure/dn140255.aspx)\r \r - 通过Rest API方式创建临时SAS\r - 通过Rest API方式创建具有存储访问策略的SAS\r \r ####通过Rest API方式创建临时SAS\r \r ```\r      public static string GenerateSAS()\r     {       \r         string accountName = \"sas\";\r         string accountKey = \"<account Key>\";\r         #设置访问权限\r         string signedpermissions = \"r\";\r         #设置临时SAS的过期时间\r         string signedstart = DateTime.UtcNow.ToString(\"O\");\r         string signedexpiry = DateTime.UtcNow.AddDays(1).ToString(\"O\");\r         #设置需要访问的资源\r         string canonicalizedresource = \"/blob/\"+accountName+\"/sastestwithpolicy/test.txt\";\r         #设置提供访问的IP的范围\r         string signedIP = \"\";\r         #指定HTTP协议\r         string signedProtocol = \"\";\r         string signedidentifier = \"\";\r         #指定Rest API版本\r         string signedversion = \"2015-04-05\";\r         #设置响应标头\r         string rscc = \"\";\r         string rscd = \"file; attachment\";\r         string rsce = \"\";\r         string rscl = \"\";\r         string rsct = \"binary\";\r \r         string StringToSign = signedpermissions + \"\\n\" +\r            signedstart + \"\\n\" +\r            signedexpiry + \"\\n\" +\r            canonicalizedresource + \"\\n\" +\r            signedidentifier + \"\\n\" +\r            signedIP + \"\\n\" +\r            signedProtocol + \"\\n\" +\r            signedversion + \"\\n\" +\r            rscc + \"\\n\" +\r            rscd + \"\\n\" +\r            rsce + \"\\n\" +\r            rscl + \"\\n\" +\r            rsct;\r \r         #获取签名（签名是利用 SHA256 算法通过字符串到签名和密钥计算然后使用 Base64 编码进行编码的 HMAC）\r         byte[] SignatureBytes = System.Text.Encoding.UTF8.GetBytes(StringToSign);\r         System.Security.Cryptography.HMACSHA256 SHA256 = new System.Security.Cryptography.HMACSHA256(Convert.FromBase64String(accountKey));\r         string sig = Convert.ToBase64String(SHA256.ComputeHash(SignatureBytes));\r \r         string sasURL = string.Format(\"http://{0}.blob.core.chinacloudapi.cn/sastestwithpolicy/test.txt?sv={1}&sr={2}&sig={3}&st={4}&se={5}&sp={6}&rscd={7}&rsct={8}\",\r             HttpUtility.UrlEncode(accountName),\r             HttpUtility.UrlEncode(signedversion),\r             HttpUtility.UrlEncode(\"b\"),\r             HttpUtility.UrlEncode(sig),\r             HttpUtility.UrlEncode(signedstart),\r             HttpUtility.UrlEncode(signedexpiry),\r             HttpUtility.UrlEncode(signedpermissions),\r             HttpUtility.UrlEncode(rscd),\r             HttpUtility.UrlEncode(rsct)\r             );\r \r         return sasURL;\r     }\r ```\r \r ####通过Rest API方式创建具有存储访问策略的SAS\r 使用上述PowerShell操作过程中创建的存储访问策略\"policy1\"，有关Rest API方式创建存储访问策略请阅读[这篇文章](https://msdn.microsoft.com/zh-cn/library/azure/dd179391.aspx)。\r \r ```\r      public static string GenerateSAS()\r     {    \r         string accountName = \"sas\";\r         string accountKey = \"<account key>\";\r \r         #设置带存储访问策略的SAS不需要设置开始时间、过期时间、访问权限\r         string signedpermissions = \"\";\r         string signedstart = \"\";\r         string signedexpiry = \"\";\r \r         string canonicalizedresource = \"/blob/\"+accountName+\"/sastestwithpolicy/test.txt\";\r         string signedIP = \"\";\r         string signedProtocol = \"\";\r         #指定存储访问策略\r         string signedidentifier = \"policy1\";\r         string signedversion = \"2015-04-05\";\r \r         string rscc = \"\";\r         string rscd = \"file; attachment\";\r         string rsce = \"\";\r         string rscl = \"\";\r         string rsct = \"binary\";\r \r         string StringToSign = signedpermissions + \"\\n\" +\r            signedstart + \"\\n\" +\r            signedexpiry + \"\\n\" +\r            canonicalizedresource + \"\\n\" +\r            signedidentifier + \"\\n\" +\r            signedIP + \"\\n\" +\r            signedProtocol + \"\\n\" +\r            signedversion + \"\\n\" +\r            rscc + \"\\n\" +\r            rscd + \"\\n\" +\r            rsce + \"\\n\" +\r            rscl + \"\\n\" +\r            rsct;\r \r         byte[] SignatureBytes = System.Text.Encoding.UTF8.GetBytes(StringToSign);\r         System.Security.Cryptography.HMACSHA256 SHA256 = new System.Security.Cryptography.HMACSHA256(Convert.FromBase64String(accountKey));\r         string sig = Convert.ToBase64String(SHA256.ComputeHash(SignatureBytes));\r         #SAS URL去掉开始时间、过期时间和访问权限，增加si\r         string sasURL = string.Format(\"http://{0}.blob.core.chinacloudapi.cn/sastestwithpolicy/test.txt?si={1}&sv={2}&sr={3}&sig={4}&rscd={5}&rsct={6}\",\r            HttpUtility.UrlEncode(accountName),\r            HttpUtility.UrlEncode(signedidentifier),\r            HttpUtility.UrlEncode(signedversion),\r            HttpUtility.UrlEncode(\"b\"),\r            HttpUtility.UrlEncode(sig),\r            HttpUtility.UrlEncode(rscd),\r            HttpUtility.UrlEncode(rsct)\r          );           \r         return sasURL;\r     }\r ```"}