{"Title":"跨具有不同架构的云数据库进行查询","Description":"如何在垂直分区上设置跨数据库查询","Content":"# <a name=\"query-across-cloud-databases-with-different-schemas-preview\"></a>跨具有不同架构的云数据库进行查询（预览版）\r ![跨不同数据库中的表进行查询][1]\r \r 垂直分区的数据库在不同的数据库中使用不同的表集。 这意味着不同数据库上的架构是不同的。 例如，清单的所有表都位于一个数据库上，而与会计相关的所有表都位于第二个数据库上。 \r \r ## <a name=\"prerequisites\"></a>先决条件\r * 用户必须拥有 ALTER ANY EXTERNAL DATA SOURCE 权限。 此权限包含在 ALTER DATABASE 权限中。\r * 引用基础数据源需要 ALTER ANY EXTERNAL DATA SOURCE 权限。\r \r ## <a name=\"overview\"></a>概述\r \r > [!NOTE]\r > 与水平分区不同，这些 DDL 语句并不依赖于通过弹性数据库客户端库定义包含分片映射的数据层。\r >\r \r 1. [CREATE MASTER KEY](https://msdn.microsoft.com/library/ms174382.aspx)\r 2. [CREATE DATABASE SCOPED CREDENTIAL](https://msdn.microsoft.com/library/mt270260.aspx)\r 3. [CREATE EXTERNAL DATA SOURCE](https://msdn.microsoft.com/library/dn935022.aspx)\r 4. [CREATE EXTERNAL TABLE](https://msdn.microsoft.com/library/dn935021.aspx) \r \r ## <a name=\"create-database-scoped-master-key-and-credentials\"></a>创建数据库范围的主密钥和凭据\r 弹性查询使用此凭据连接到远程数据库。  \r \r ```\r CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'password';\r CREATE DATABASE SCOPED CREDENTIAL <credential_name>  WITH IDENTITY = '<username>',  \r SECRET = '<password>'\r [;]\r ```\r > [!NOTE]\r > 确保 `<username>` 不包含任何“@servername”后缀。 \r >\r \r ## <a name=\"create-external-data-sources\"></a>创建外部数据源\r 语法：\r \r ```\r <External_Data_Source> ::=\r CREATE EXTERNAL DATA SOURCE <data_source_name> WITH \r            (TYPE = RDBMS,\r             LOCATION = ’<fully_qualified_server_name>’,\r             DATABASE_NAME = ‘<remote_database_name>’,  \r             CREDENTIAL = <credential_name> \r             ) [;] \r ```\r > [!IMPORTANT]\r > TYPE 参数必须设置为 **RDBMS**。 \r >\r \r ### <a name=\"example\"></a>示例\r 以下示例说明了如何使用 CREATE 语句创建外部数据源。 \r \r ```\r CREATE EXTERNAL DATA SOURCE RemoteReferenceData \r WITH \r ( \r     TYPE=RDBMS, \r     LOCATION='myserver.database.chinacloudapi.cn', \r     DATABASE_NAME='ReferenceData', \r     CREDENTIAL= SqlUser \r ); \r ```\r \r 若要检索当前外部数据源的列表： \r \r ```\r select * from sys.external_data_sources; \r ```\r \r ### <a name=\"external-tables\"></a>外部表\r 语法：\r \r ```\r CREATE EXTERNAL TABLE [ database_name . [ schema_name ] . | schema_name . ] table_name  \r ( { <column_definition> } [ ,...n ])     \r { WITH ( <rdbms_external_table_options> ) } \r )[;] \r \r <rdbms_external_table_options> ::= \r   DATA_SOURCE = <External_Data_Source>, \r   [ SCHEMA_NAME = N'nonescaped_schema_name',] \r   [ OBJECT_NAME = N'nonescaped_object_name',] \r ```\r \r ### <a name=\"example\"></a>示例\r ```\r CREATE EXTERNAL TABLE [dbo].[customer]( \r     [c_id] int NOT NULL, \r     [c_firstname] nvarchar(256) NULL, \r     [c_lastname] nvarchar(256) NOT NULL, \r     [street] nvarchar(256) NOT NULL, \r     [city] nvarchar(256) NOT NULL, \r     [state] nvarchar(20) NULL, \r     [country] nvarchar(50) NOT NULL, \r ) \r WITH \r ( \r        DATA_SOURCE = RemoteReferenceData \r ); \r ```\r \r 以下示例演示如何从当前数据库中检索外部表的列表： \r \r ```\r select * from sys.external_tables; \r ```\r \r ### <a name=\"remarks\"></a>备注\r 弹性查询将扩展现有的外部表语法以定义使用 RDBMS 类型的外部数据源的外部表。 垂直分区的外部表定义涉及以下几个方面： \r \r * **架构**：外部表 DDL 定义了你的查询可以使用的架构。 外部表定义中提供的架构需要与存储实际数据的远程数据库中的表的架构相匹配。 \r * **远程数据库引用**：外部表 DDL 引用外部数据源。 外部数据源指定存储实际表数据的远程数据库的逻辑服务器名称和数据库名称。 \r \r 使用上一节中所述的外部数据源时，用于创建外部表的语法如下： \r \r DATA_SOURCE 子句定义用于外部表的外部数据源（即，在垂直分区情况下的远程数据库）。  \r \r 使用 SCHEMA_NAME 和 OBJECT_NAME 子句可分别将外部表定义映射到远程数据库上不同架构中的表，或映射到具有不同名称的表。 如果要在远程数据库上为目录视图或 DMV 定义外部表，或者在远程表名已在本地使用的任何其他情况下，这两个子句很有用。  \r \r 以下 DDL 语句从本地目录中删除现有的外部表定义。 它不会影响远程数据库。 \r \r ```\r DROP EXTERNAL TABLE [ [ schema_name ] . | schema_name. ] table_name[;]  \r ```\r \r **CREATE/DROP EXTERNAL TABLE 的权限：**外部表 DDL 需要 ALTER ANY EXTERNAL DATA SOURCE 权限，在引用基础数据源时也需要该权限。  \r \r ## <a name=\"security-considerations\"></a>安全注意事项\r 有权访问外部表的用户在使用外部数据源定义中提供的凭据时自动获得对基础远程表的访问权。 你应小心管理对外部表的访问权以避免通过外部数据源的凭据意外地提升权限。 可以使用常规 SQL 权限来授予或撤消对外部表的访问权，就像它是常规表一样。  \r \r ## <a name=\"example-querying-vertically-partitioned-databases\"></a>示例：正在查询垂直分区数据库\r 以下查询执行订单和订单行的两个本地表和客户的远程表之间的三向联接。 这是弹性查询的引用数据用例的示例： \r \r ```\r SELECT      \r  c_id as customer,\r  c_lastname as customer_name,\r  count(*) as cnt_orderline, \r  max(ol_quantity) as max_quantity,\r  avg(ol_amount) as avg_amount,\r  min(ol_delivery_d) as min_deliv_date\r FROM customer \r JOIN orders \r ON c_id = o_c_id\r JOIN  order_line \r ON o_id = ol_o_id and o_c_id = ol_c_id\r WHERE c_id = 100\r ```\r \r ## <a name=\"stored-procedure-for-remote-t-sql-execution-spexecuteremote\"></a>用于远程 T-SQL 执行的存储过程：sp\\_execute_remote\r 弹性查询还引入了一个存储过程，以便提供对分片的直接访问。 该存储过程名为 [sp\\_execute \\_remote](https://msdn.microsoft.com/library/mt703714)，可用于执行远程存储过程或远程数据库上的 T-SQL 代码。 它采用了以下参数： \r \r * 数据源名称 (nvarchar)：RDBMS 类型的外部数据源名称。 \r * 查询 (nvarchar)：要在每个分片上执行的 T-SQL 查询。 \r * 参数声明 (nvarchar) - 可选：在查询参数（如 sp_executesql）中使用的参数的字符串（包含数据类型定义）。 \r * 参数值列表 - 可选：以逗号分隔的参数值（如 sp_executesql）的列表。\r \r sp\\_execute\\_remote 使用调用参数中提供的外部数据源在远程数据库上执行给定的 T-SQL 语句。 它使用外部数据源的凭据连接到分片映射管理器数据库和远程数据库。  \r \r 示例： \r \r ```\r EXEC sp_execute_remote\r     N'MyExtSrc',\r     N'select count(w_id) as foo from warehouse' \r ```\r \r ## <a name=\"connectivity-for-tools\"></a>工具的连接\r 可以使用常规 SQL Server 连接字符串将 BI 和数据集成工具连接到 SQL 数据库服务器上已启用弹性查询并已定义外部表的数据库。 请确保支持将 SQL Server 用作工具的数据源。 然后可以引用弹性查询数据库及其外部表，就如同使用工具连接的任何其他 SQL Server 数据库一样。 \r \r ## <a name=\"best-practices\"></a>最佳实践\r * 确保已通过在 SQL 数据库防火墙配置中启用对 Azure 服务的访问授予弹性查询终结点数据库访问远程数据库的权限。 另请确保外部数据源定义中提供的凭据可以成功登录到远程数据库并有权访问远程表。  \r * 弹性查询最适合大部分计算可以在远程数据库上完成的查询。 使用可以在远程数据库或联接上求值的选择性筛选器谓词（可以完全在远程数据库上执行），通常可以获得最佳查询性能。 其他查询模式可能需要从远程数据库加载大量数据并且可能会执行效果不佳。 \r \r ## <a name=\"next-steps\"></a>后续步骤\r \r * 有关弹性查询的概述，请参阅[弹性查询概述](sql-database-elastic-query-overview.md)。\r * 有关垂直分区的教程，请参阅[跨数据库查询（垂直分区）入门](sql-database-elastic-query-getting-started-vertical.md)。\r * 有关水平分区（分片）的教程，请参阅[弹性查询入门 - 水平分区（分片）](sql-database-elastic-query-getting-started.md)。\r * 有关水平分区数据的语法和示例查询，请参阅[查询水平分区数据](sql-database-elastic-query-horizontal-partitioning.md)\r * 请参阅 [sp\\_execute \\_remote](https://msdn.microsoft.com/library/mt703714)，了解在单个远程 Azure SQL 数据库或在水平分区方案中用作分片的一组数据库中执行 Transact-SQL 语句的存储过程。\r \r <!--Image references-->\r [1]: ./media/sql-database-elastic-query-vertical-partitioning/verticalpartitioning.png\r \r <!--anchors-->"}