{"Title":"如何通过 Java 使用 Azure Blob 存储（对象存储）","Description":"使用 Azure Blob 存储（对象存储）将非结构化数据存储在云中。","Content":"# <a name=\"how-to-use-blob-storage-from-java\"></a>如何通过 Java 使用 Blob 存储\r [!INCLUDE [storage-selector-blob-include](../../../includes/storage-selector-blob-include.md)]\r \r [!INCLUDE [storage-check-out-samples-java](../../../includes/storage-check-out-samples-java.md)]\r \r ## <a name=\"overview\"></a>概述\r Azure Blob 存储是一种将非结构化数据作为对象/Blob 存储在云中的服务。 Blob 存储可以存储任何类型的文本或二进制数据，例如文档、媒体文件或应用程序安装程序。 Blob 存储也称为对象存储。\r \r 本文介绍如何使用 Azure Blob 存储执行常见任务。 这些示例用 Java 编写并使用 [Azure Storage SDK for Java][Azure Storage SDK for Java]。 涉及的任务包括上传、列出、下载和删除 Blob。 有关 Blob 的详细信息，请参阅[后续步骤](#Next-Steps)部分。\r \r > [!NOTE]\r > SDK 提供给在 Android 设备上使用 Azure 存储的开发人员。 有关详细信息，请参阅[用于 Android 的 Azure 存储 SDK][Azure Storage SDK for Android]。\r \r [!INCLUDE [storage-blob-concepts-include](../../../includes/storage-blob-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../../includes/storage-create-account-include.md)]\r \r ## <a name=\"create-a-java-application\"></a>创建 Java 应用程序\r 本文涉及使用存储功能，这些功能可在本地 Java 应用程序中运行，或在 Azure 的 Web 角色或辅助角色中通过运行的代码来运行。\r \r 为此，需要安装 Java 开发工具包 (JDK)，并在 Azure 订阅中创建一个 Azure 存储帐户。 完成此操作后，需要验证开发系统是否满足最低要求和 GitHub 上的 [Azure Storage SDK for Java][Azure Storage SDK for Java] 存储库中列出的依赖项。 如果系统满足这些要求，可以按照说明下载和安装系统中该存储库的 Azure Storage Libraries for Java。 完成这些任务后，便能够创建一个 Java 应用程序，以便使用本文中的示例。\r \r ## <a name=\"configure-your-application-to-access-blob-storage\"></a>配置应用程序以访问 Blob 存储\r 将下列导入语句添加到要在其中使用 Azure 存储 API 以访问 Blob 的 Java 文件的顶部：\r \r ```java\r // Include the following imports to use blob APIs.\r import com.microsoft.azure.storage.*;\r import com.microsoft.azure.storage.blob.*;\r ```\r \r ## <a name=\"set-up-an-azure-storage-connection-string\"></a>设置 Azure 存储连接字符串\r Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。 在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 AccountName 和 AccountKey 值使用 [Azure 门户](https://portal.azure.cn)中列出的存储帐户的名称和存储帐户的主访问密钥。 下面的示例演示如何声明一个静态字段以保存连接字符串。\r \r ```java\r // Define the connection-string with your values\r public static final String storageConnectionString =\r     \"DefaultEndpointsProtocol=http;\" +\r     \"AccountName=your_storage_account;\" +\r     \"AccountKey=your_storage_account_key;\" +\r     \"EndpointSuffix=core.chinacloudapi.cn\";\r ```\r \r 在 Azure 的角色中运行的应用程序中，此字符串可存储在服务配置文件 *ServiceConfiguration.cscfg*中，并可通过调用 **RoleEnvironment.getConfigurationSettings** 方法进行访问。 下面的示例从服务配置文件中名为 **StorageConnectionString** 的 *Setting* 元素获取连接字符串。\r \r ```java\r // Retrieve storage account from connection-string.\r String storageConnectionString =\r     RoleEnvironment.getConfigurationSettings().get(\"StorageConnectionString\");\r ```\r \r 下面的示例假定使用了这两个方法之一来获取存储连接字符串。\r \r ## <a name=\"create-a-container\"></a>创建容器\r 利用 **CloudBlobClient** 对象，可以获得容器和 Blob 的引用对象。 以下代码创建 **CloudBlobClient** 对象。\r \r > [!NOTE]\r > 还有其他方式来创建 **CloudStorageAccount** 对象；有关详细信息，请参阅 [CloudBlobContainer.listBlobs]中的 **CloudStorageAccount**。\r \r [!INCLUDE [storage-container-naming-rules-include](../../../includes/storage-container-naming-rules-include.md)]\r \r 使用 **CloudBlobClient** 对象获取对要使用的容器的引用。 可使用 **createIfNotExists** 方法创建容器（如果不存在），否则返回现有容器。 默认情况下，新容器是专用容器，因此必须指定存储访问密钥（如之前所做的那样）才能从该容器下载 Blob。\r \r ```java\r try\r {\r     // Retrieve storage account from connection-string.\r     CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\r \r     // Create the blob client.\r     CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\r \r     // Get a reference to a container.\r     // The container name must be lower case\r     CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\r \r     // Create the container if it does not exist.\r     container.createIfNotExists();\r }\r catch (Exception e)\r {\r     // Output the stack trace.\r     e.printStackTrace();\r }\r ```\r \r ### <a name=\"optional-configure-a-container-for-public-access\"></a>可选：配置进行公共访问的容器\r 默认情况下，容器的权限已配置为允许进行私有访问，但你也可以轻松地将容器的权限配置为允许 Internet 上的用户进行公开的、只读的访问：\r \r ```java\r // Create a permissions object.\r BlobContainerPermissions containerPermissions = new BlobContainerPermissions();\r \r // Include public access in the permissions object.\r containerPermissions.setPublicAccess(BlobContainerPublicAccessType.CONTAINER);\r \r // Set the permissions on the container.\r container.uploadPermissions(containerPermissions);\r ```\r \r ## <a name=\"upload-a-blob-into-a-container\"></a>将 Blob 上传到容器中\r 要将文件上传到 Blob，请获取容器引用，并使用它获取 Blob 引用。 获取 Blob 引用后，可以通过对该 Blob 引用调用 upload 来上传任何数据流。 此操作会创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。 下面的代码示例演示了这一点，并假定已创建容器。\r \r ```java\r try\r {\r     // Retrieve storage account from connection-string.\r     CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\r \r     // Create the blob client.\r     CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\r \r     // Retrieve reference to a previously created container.\r     CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\r \r     // Define the path to a local file.\r     final String filePath = \"C:\\\\myimages\\\\myimage.jpg\";\r \r     // Create or overwrite the \"myimage.jpg\" blob with contents from a local file.\r     CloudBlockBlob blob = container.getBlockBlobReference(\"myimage.jpg\");\r     File source = new File(filePath);\r     blob.upload(new FileInputStream(source), source.length());\r }\r catch (Exception e)\r {\r     // Output the stack trace.\r     e.printStackTrace();\r }\r ```\r \r ## <a name=\"list-the-blobs-in-a-container\"></a>列出容器中的 Blob\r 若要列出容器中的 Blob，请先获取容器引用，就像上传 Blob 时执行的操作一样。 可将容器的 **listBlobs** 方法用于 **for** 循环。 以下代码将容器中每个 Blob 的 URI 输出到控制台。\r \r ```java\r try\r {\r     // Retrieve storage account from connection-string.\r     CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\r \r     // Create the blob client.\r     CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\r \r     // Retrieve reference to a previously created container.\r     CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\r \r     // Loop over blobs within the container and output the URI to each of them.\r     for (ListBlobItem blobItem : container.listBlobs()) {\r         System.out.println(blobItem.getUri());\r     }\r }\r catch (Exception e)\r {\r     // Output the stack trace.\r     e.printStackTrace();\r }\r ```\r \r 请注意，可以命名 Blob，并在其名称中包含路径信息。 这会创建一个虚拟目录结构，可以像传统文件系统一样组织和遍历。 注意，该目录结构仅仅是虚拟的 - Blob 存储中唯一可用的资源是容器和 Blob。 但是，客户端库提供 **CloudBlobDirectory** 对象来引用虚拟目录，并简化了以这种方式组织的 Blob 的使用过程。\r \r 例如，可以创建一个名为“photos”的容器，可以在其中上传名为“rootphoto1”、“2010/photo1”、“2010/photo2”和“2011/photo1”的 Blob。 这会在“photos”容器中创建虚拟目录“2010”和“2011”。 对“photos”容器调用 **listBlobs** 时，返回的集合将包含表示最高层所含目录和 Blob 的 **CloudBlobDirectory** 和 **CloudBlob** 对象。 在本例中，返回目录“2010”和“2011”以及照片“rootphoto1”。 可使用 **instanceof** 运算符来区分这些对象。\r \r 还可以向 **listBlobs** 方法传入参数，并将 **useFlatBlobListing** 参数设置为 true。 这会导致返回每个 Blob，而无论目录如何。 有关详细信息，请参阅 **Azure 存储客户端 SDK 参考** 中的 [CloudBlobContainer.listBlobs]。\r \r ## <a name=\"download-a-blob\"></a>下载 Blob\r 若要下载 Blob，请执行之前用于上传 Blob 的相同步骤以获取 Blob 引用。 在上传示例中，对 Blob 对象调用了 upload。 在下面的示例中，调用 download 以将 Blob 内容传输到可用于将 Blob 保存到本地文件的流对象（如 **FileOutputStream**）。\r \r ```java\r try\r {\r     // Retrieve storage account from connection-string.\r     CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\r \r     // Create the blob client.\r     CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\r \r     // Retrieve reference to a previously created container.\r     CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\r \r     // Loop through each blob item in the container.\r     for (ListBlobItem blobItem : container.listBlobs()) {\r         // If the item is a blob, not a virtual directory.\r         if (blobItem instanceof CloudBlob) {\r             // Download the item and save it to a file with the same name.\r             CloudBlob blob = (CloudBlob) blobItem;\r             blob.download(new FileOutputStream(\"C:\\\\mydownloads\\\\\" + blob.getName()));\r         }\r     }\r }\r catch (Exception e)\r {\r     // Output the stack trace.\r     e.printStackTrace();\r }\r ```\r \r ## <a name=\"delete-a-blob\"></a>删除 Blob\r 如果要删除 Blob，请获取 Blob 引用，并调用 **deleteIfExists**。\r \r ```java\r try\r {\r     // Retrieve storage account from connection-string.\r     CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\r \r     // Create the blob client.\r     CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\r \r     // Retrieve reference to a previously created container.\r     CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\r \r     // Retrieve reference to a blob named \"myimage.jpg\".\r     CloudBlockBlob blob = container.getBlockBlobReference(\"myimage.jpg\");\r \r     // Delete the blob.\r     blob.deleteIfExists();\r }\r catch (Exception e)\r {\r     // Output the stack trace.\r     e.printStackTrace();\r }\r ```\r \r ## <a name=\"delete-a-blob-container\"></a>删除 Blob 容器\r 最后，如果要删除 Blob 容器，请获取 Blob 容器引用，并调用 **deleteIfExists**。\r \r ```java\r try\r {\r     // Retrieve storage account from connection-string.\r     CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\r \r     // Create the blob client.\r     CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\r \r     // Retrieve reference to a previously created container.\r     CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\r \r     // Delete the blob container.\r     container.deleteIfExists();\r }\r catch (Exception e)\r {\r     // Output the stack trace.\r     e.printStackTrace();\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 现在，已了解有关 Blob 存储的基础知识，可单击下面的链接来了解更复杂的存储任务。\r \r * [Azure Storage SDK for Java][Azure Storage SDK for Java]\r * [CloudBlobContainer.listBlobs][CloudBlobContainer.listBlobs]\r * [Azure Storage REST API（Azure 存储 REST API）][Azure Storage REST API]\r * [Azure 存储团队博客][Azure Storage Team Blog]\r \r 有关详细信息，另请参阅[面向 Java 开发人员的 Azure](/java/)。\r \r [Azure SDK for Java]: /java/\r [Azure Storage SDK for Java]: https://github.com/azure/azure-storage-java\r [Azure Storage SDK for Android]: https://github.com/azure/azure-storage-android\r [CloudBlobContainer.listBlobs]: http://azure.github.io/azure-storage-java/\r [Azure Storage REST API]: https://msdn.microsoft.com/zh-cn/library/azure/dd179355.aspx\r [Azure Storage Team Blog]: http://blogs.msdn.com/b/windowsazurestorage/\r \r <!--Update_Description: update Java Dev Center link-->"}