{"Title":"创建共享访问签名 (SAS) 并将其用于 Azure Blob 存储","Description":"本教程演示如何创建共享访问签名并用于 Blob 存储，以及如何在客户端应用程序中使用这些签名。","Content":"# <a name=\"shared-access-signatures-part-2-create-and-use-a-sas-with-blob-storage\"></a>共享访问签名，第 2 部分：创建 SAS 并将 SAS 用于 Blob 存储\r \r 本教程的[第 1 部分](../common/storage-dotnet-shared-access-signature-part-1.md?toc=%2fstorage%2fblobs%2ftoc.json)介绍了共享访问签名 (SAS) 并说明了使用共享访问签名的最佳做法。 第 2 部分演示如何生成共享访问签名以及如何将共享访问签名用于 Blob 存储。 示例是用 C# 编写的并使用了 Azure .NET 存储客户端库。 本教程中的示例：\r \r * 在容器上生成共享访问签名\r * 在 Blob 上生成共享访问签名\r * 创建用于管理容器资源上的签名的存储访问策略\r * 在客户端应用程序中测试共享访问签名\r \r ## <a name=\"about-this-tutorial\"></a>关于本教程\r 本教程中将创建两个控制台应用程序，用于演示如何创建共享访问签名并将其用于容器和 Blob：\r \r 应用程序 1：管理应用程序。 为容器和 Blob 生成共享访问签名。 在源代码中含入存储帐户访问密钥。\r \r 应用程序 2：客户端应用程序。 使用第一个应用程序创建的共享访问签名访问容器和 Blob 资源。 仅使用共享访问签名访问容器和 Blob 资源--它不包括存储帐户访问密钥。\r \r ## <a name=\"part-1-create-a-console-application-to-generate-shared-access-signatures\"></a>第 1 部分：创建控制台应用程序，生成共享访问签名\r 首先，确保安装了用于 .NET 的 Azure 存储客户端库。 可以安装包含该客户端库最新程序集的 [NuGet 包](http://nuget.org/packages/WindowsAzure.Storage/ \"NuGet 包\")。 这是确保具有最新修补程序的建议方法。 还可以下载作为客户端库组成部分的[用于 .NET 的 Azure SDK](/downloads/) 最新版本。\r \r 在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 **GenerateSharedAccessSignatures**。 使用以下方法之一添加对 [Microsoft.WindowsAzure.ConfigurationManager](https://www.nuget.org/packages/Microsoft.WindowsAzure.ConfigurationManager) 和 [WindowsAzure.Storage](https://www.nuget.org/packages/WindowsAzure.Storage/) 的引用：\r \r * 使用 Visual Studio 中的 [NuGet 包管理器](https://docs.nuget.org/consume/installing-nuget)。 选择“项目” > “管理 NuGet 包”，联机搜索每个包 （Microsoft.WindowsAzure.ConfigurationManager 和 WindowsAzure.Storage）并进行安装。\r * 另外，还可以在安装的 Azure SDK 中找到这些程序集，然后添加对它们的引用：\r   * Microsoft.WindowsAzure.Configuration.dll\r   * Microsoft.WindowsAzure.Storage.dll\r \r 在 Program.cs 文件的顶部，添加以下 using 指令：\r \r ```csharp\r using System.IO;\r using Microsoft.Azure;\r using Microsoft.WindowsAzure.Storage;\r using Microsoft.WindowsAzure.Storage.Blob;\r ```\r \r 编辑 app.config 文件，使其所含配置设置中的连接字符串指向存储帐户。 app.config 文件应如下所示：\r \r ```xml\r <configuration>\r   <startup>\r     <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5.2\" />\r   </startup>\r   <appSettings>\r     <add key=\"StorageConnectionString\" value=\"DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=mykey;EndpointSuffix=core.chinacloudapi.cn\"/>\r   </appSettings>\r </configuration>\r ```\r \r ### <a name=\"generate-a-shared-access-signature-uri-for-a-container\"></a>为容器生成共享访问签名 URI\r 首先添加一个方法，用于在新容器上生成共享访问签名。 在此用例中，该签名不与存储访问策略相关联，它在 URI 上携带信息，指示它的到期时间以及授予的权限。\r \r 首先，向 Main() 方法添加代码，以便验证对存储帐户的访问并创建新容器：\r \r ```csharp\r static void Main(string[] args)\r {\r     //Parse the connection string and return a reference to the storage account.\r     CloudStorageAccount storageAccount = CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r     //Create the blob client object.\r     CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\r \r     //Get a reference to a container to use for the sample code, and create it if it does not exist.\r     CloudBlobContainer container = blobClient.GetContainerReference(\"sascontainer\");\r     container.CreateIfNotExists();\r \r     //Insert calls to the methods created below here...\r \r     //Require user input before closing the console window.\r     Console.ReadLine();\r }\r ```\r \r 接下来，添加一个方法，该方法为容器生成共享访问签名并且返回签名 URI：\r \r ```csharp\r static string GetContainerSasUri(CloudBlobContainer container)\r {\r     //Set the expiry time and permissions for the container.\r     //In this case no start time is specified, so the shared access signature becomes valid immediately.\r     SharedAccessBlobPolicy sasConstraints = new SharedAccessBlobPolicy();\r     sasConstraints.SharedAccessExpiryTime = DateTimeOffset.UtcNow.AddHours(24);\r     sasConstraints.Permissions = SharedAccessBlobPermissions.List | SharedAccessBlobPermissions.Write;\r \r     //Generate the shared access signature on the container, setting the constraints directly on the signature.\r     string sasContainerToken = container.GetSharedAccessSignature(sasConstraints);\r \r     //Return the URI string for the container, including the SAS token.\r     return container.Uri + sasContainerToken;\r }\r ```\r \r 在 Main() 方法的底部，调用 Console.ReadLine() 之前，添加以下代码行，以调用 GetContainerSasUri() 并将签名 URI 写入控制台窗口：\r \r ```csharp\r //Generate a SAS URI for the container, without a stored access policy.\r Console.WriteLine(\"Container SAS URI: \" + GetContainerSasUri(container));\r Console.WriteLine();\r ```\r \r 编译并且运行以输出新容器的共享访问签名 URI。 该 URI 与以下类似：\r \r ```\r https://storageaccount.blob.core.chinacloudapi.cn/sascontainer?sv=2012-02-12&se=2013-04-13T00%3A12%3A08Z&sr=c&sp=wl&sig=t%2BbzU9%2B7ry4okULN9S0wst%2F8MCUhTjrHyV9rDNLSe8g%3D\r ```\r \r 运行代码后，为容器创建的共享访问签名会在接下来的 24 小时内有效。 该签名向客户端授予列出容器中的 Blob 以及将新 Blob 写入容器的权限。\r \r ### <a name=\"generate-a-shared-access-signature-uri-for-a-blob\"></a>为 Blob 生成共享访问签名 URI\r 接下来编写类似的代码，用于在容器内创建新 Blob 并为其生成共享访问签名。 该共享访问签名不与某一存储访问策略相关联，因此，它在 URI 中包括开始时间、到期时间和权限的信息。\r \r 添加一个新方法，该方法创建一个新 Blob 并且向其中写入某些文本，并生成共享访问签名并返回签名 URI：\r \r ```csharp\r static string GetBlobSasUri(CloudBlobContainer container)\r {\r     //Get a reference to a blob within the container.\r     CloudBlockBlob blob = container.GetBlockBlobReference(\"sasblob.txt\");\r \r     //Upload text to the blob. If the blob does not yet exist, it will be created.\r     //If the blob does exist, its existing content will be overwritten.\r     string blobContent = \"This blob will be accessible to clients via a shared access signature (SAS).\";\r     blob.UploadText(blobContent);\r \r     //Set the expiry time and permissions for the blob.\r     //In this case, the start time is specified as a few minutes in the past, to mitigate clock skew.\r     //The shared access signature will be valid immediately.\r     SharedAccessBlobPolicy sasConstraints = new SharedAccessBlobPolicy();\r     sasConstraints.SharedAccessStartTime = DateTimeOffset.UtcNow.AddMinutes(-5);\r     sasConstraints.SharedAccessExpiryTime = DateTimeOffset.UtcNow.AddHours(24);\r     sasConstraints.Permissions = SharedAccessBlobPermissions.Read | SharedAccessBlobPermissions.Write;\r \r     //Generate the shared access signature on the blob, setting the constraints directly on the signature.\r     string sasBlobToken = blob.GetSharedAccessSignature(sasConstraints);\r \r     //Return the URI string for the container, including the SAS token.\r     return blob.Uri + sasBlobToken;\r }\r ```\r \r 在 Main() 方法的底部，调用 Console.ReadLine() 之前，添加以下代码行，以调用 GetBlobSasUri() 并将共享访问签名 URI 写入控制台窗口：\r \r ```csharp\r //Generate a SAS URI for a blob within the container, without a stored access policy.\r Console.WriteLine(\"Blob SAS URI: \" + GetBlobSasUri(container));\r Console.WriteLine();\r ```\r \r 编译并且运行以输出新 Blob 的共享访问签名 URI。 该 URI 与以下类似：\r \r ```\r https://storageaccount.blob.core.chinacloudapi.cn/sascontainer/sasblob.txt?sv=2012-02-12&st=2013-04-12T23%3A37%3A08Z&se=2013-04-13T00%3A12%3A08Z&sr=b&sp=rw&sig=dF2064yHtc8RusQLvkQFPItYdeOz3zR8zHsDMBi4S30%3D\r ```\r \r ### <a name=\"create-a-stored-access-policy-on-the-container\"></a>在容器上创建存储访问策略\r 现在来在容器上创建一个存储访问策略，该策略定义与其相关联的任何共享访问签名的约束。\r \r 在前面的示例中，我们指定了开始时间（隐式或显式）、到期时间以及共享访问签名 URI 本身的权限。 接下来的示例在存储访问策略上指定这些内容，而不是在共享访问签名上指定。 这样做将使我们不必重新发布共享访问签名即可更改这些约束。\r \r 可以使一个或多个约束作用于共享访问签名，使其余的约束作用于存储访问策略。 但只能在其中一个位置指定开始时间、到期时间和权限。 例如，不能同时在共享访问签名和存储访问策略上指定权限。\r \r 向容器添加一个存储的访问策略时，必须获取容器的现有权限，添加新的访问策略，并设置容器的权限。\r \r 添加一个新方法，该方法在窗口上创建一个新的存储访问策略并返回该策略的名称：\r \r ```csharp\r static void CreateSharedAccessPolicy(CloudBlobClient blobClient, CloudBlobContainer container,\r     string policyName)\r {\r     //Get the container's existing permissions.\r     BlobContainerPermissions permissions = container.GetPermissions();\r \r     //Create a new shared access policy and define its constraints.\r     SharedAccessBlobPolicy sharedPolicy = new SharedAccessBlobPolicy()\r     {\r         SharedAccessExpiryTime = DateTimeOffset.UtcNow.AddHours(24),\r         Permissions = SharedAccessBlobPermissions.Write | SharedAccessBlobPermissions.List | SharedAccessBlobPermissions.Read\r     };\r \r     //Add the new policy to the container's permissions, and set the container's permissions.\r     permissions.SharedAccessPolicies.Add(policyName, sharedPolicy);\r     container.SetPermissions(permissions);\r }\r ```\r \r 在 Main() 方法的底部，调用 Console.ReadLine() 之前，添加以下代码行，以先清除任何现有访问策略，然后调用 **CreateSharedAccessPolicy()** 方法：\r \r ```csharp\r //Clear any existing access policies on container.\r BlobContainerPermissions perms = container.GetPermissions();\r perms.SharedAccessPolicies.Clear();\r container.SetPermissions(perms);\r \r //Create a new access policy on the container, which may be optionally used to provide constraints for\r //shared access signatures on the container and the blob.\r string sharedAccessPolicyName = \"tutorialpolicy\";\r CreateSharedAccessPolicy(blobClient, container, sharedAccessPolicyName);\r ```\r \r 清除容器上的访问策略时，必须首先获取容器的现有权限，接着清除权限，再次设置权限。\r \r ### <a name=\"generate-a-shared-access-signature-uri-on-the-container-that-uses-an-access-policy\"></a>在使用访问策略的容器上生成共享访问签名 URI\r 接下来，在之前创建的容器上创建另一个共享访问签名，但这次要将该签名与在之前示例中创建的存储访问策略相关联。\r \r 添加一个新方法，为容器生成另一个共享访问签名：\r \r ```csharp\r static string GetContainerSasUriWithPolicy(CloudBlobContainer container, string policyName)\r {\r     //Generate the shared access signature on the container. In this case, all of the constraints for the\r     //shared access signature are specified on the stored access policy.\r     string sasContainerToken = container.GetSharedAccessSignature(null, policyName);\r \r     //Return the URI string for the container, including the SAS token.\r     return container.Uri + sasContainerToken;\r }\r ```\r \r 调用 Console.ReadLine() 之前，在 Main() 方法的底部，添加以下代码行以调用 GetContainerSasUriWithPolicy 方法：\r \r ```csharp\r //Generate a SAS URI for the container, using a stored access policy to set constraints on the SAS.\r Console.WriteLine(\"Container SAS URI using stored access policy: \" + GetContainerSasUriWithPolicy(container, sharedAccessPolicyName));\r Console.WriteLine();\r ```\r \r ### <a name=\"generate-a-shared-access-signature-uri-on-the-blob-that-uses-an-access-policy\"></a>在使用访问策略的 Blob 上生成共享访问签名 URI\r 最后，添加一个类似方法，创建另一个 Blob 并生成与某一存储访问策略相关联的共享访问签名。\r \r 添加一个新方法以便创建 Blob 并且生成共享访问签名：\r \r ```csharp\r static string GetBlobSasUriWithPolicy(CloudBlobContainer container, string policyName)\r {\r     //Get a reference to a blob within the container.\r     CloudBlockBlob blob = container.GetBlockBlobReference(\"sasblobpolicy.txt\");\r \r     //Upload text to the blob. If the blob does not yet exist, it will be created.\r     //If the blob does exist, its existing content will be overwritten.\r     string blobContent = \"This blob will be accessible to clients via a shared access signature. \" +\r     \"A stored access policy defines the constraints for the signature.\";\r     MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(blobContent));\r     ms.Position = 0;\r     using (ms)\r     {\r         blob.UploadFromStream(ms);\r     }\r \r     //Generate the shared access signature on the blob.\r     string sasBlobToken = blob.GetSharedAccessSignature(null, policyName);\r \r     //Return the URI string for the container, including the SAS token.\r     return blob.Uri + sasBlobToken;\r }\r ```\r \r 调用 Console.ReadLine() 之前，在 Main() 方法的底部，添加以下代码行以调用 GetBlobSasUriWithPolicy 方法：\r \r ```csharp\r //Generate a SAS URI for a blob within the container, using a stored access policy to set constraints on the SAS.\r Console.WriteLine(\"Blob SAS URI using stored access policy: \" + GetBlobSasUriWithPolicy(container, sharedAccessPolicyName));\r Console.WriteLine();\r ```\r \r 现在，完整的 Main() 方法看起来应如下所示。 运行它以将共享访问签名 URI 写入控制台窗口，并将它们复制并粘贴到一个文本文件中以在本教程的第二部分中使用。\r \r ```csharp\r static void Main(string[] args)\r {\r     //Parse the connection string and return a reference to the storage account.\r     CloudStorageAccount storageAccount = CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r     //Create the blob client object.\r     CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\r \r     //Get a reference to a container to use for the sample code, and create it if it does not exist.\r     CloudBlobContainer container = blobClient.GetContainerReference(\"sascontainer\");\r     container.CreateIfNotExists();\r \r     //Generate a SAS URI for the container, without a stored access policy.\r     Console.WriteLine(\"Container SAS URI: \" + GetContainerSasUri(container));\r     Console.WriteLine();\r \r     //Generate a SAS URI for a blob within the container, without a stored access policy.\r     Console.WriteLine(\"Blob SAS URI: \" + GetBlobSasUri(container));\r     Console.WriteLine();\r \r     //Clear any existing access policies on container.\r     BlobContainerPermissions perms = container.GetPermissions();\r     perms.SharedAccessPolicies.Clear();\r     container.SetPermissions(perms);\r \r     //Create a new access policy on the container, which may be optionally used to provide constraints for\r     //shared access signatures on the container and the blob.\r     string sharedAccessPolicyName = \"tutorialpolicy\";\r     CreateSharedAccessPolicy(blobClient, container, sharedAccessPolicyName);\r \r     //Generate a SAS URI for the container, using a stored access policy to set constraints on the SAS.\r     Console.WriteLine(\"Container SAS URI using stored access policy: \" + GetContainerSasUriWithPolicy(container, sharedAccessPolicyName));\r     Console.WriteLine();\r \r     //Generate a SAS URI for a blob within the container, using a stored access policy to set constraints on the SAS.\r     Console.WriteLine(\"Blob SAS URI using stored access policy: \" + GetBlobSasUriWithPolicy(container, sharedAccessPolicyName));\r     Console.WriteLine();\r \r     Console.ReadLine();\r }\r ```\r \r 运行 GenerateSharedAccessSignatures 控制台应用程序时，会看到如下输出。 它们是在本教程第 2 部分中使用的共享访问签名。\r \r ```\r Container SAS URI: https://storagesample.blob.core.chinacloudapi.cn/sascontainer?sv=2016-05-31&sr=c&sig=pFlEZD%2F6sJTNLxD%2FQ26Hh85j%2FzYPxZav6mP1KJwnvJE%3D&se=2017-05-16T16%3A16%3A47Z&sp=wl\r \r Blob SAS URI: https://storagesample.blob.core.chinacloudapi.cn/sascontainer/sasblob.txt?sv=2016-05-31&sr=b&sig=%2FiBWAZbXESzCMvRcm7JwJBK0gT0BtPSWEq4pRwmlBRI%3D&st=2017-05-15T16%3A11%3A48Z&se=2017-05-16T16%3A16%3A48Z&sp=rw\r \r Container SAS URI using stored access policy: https://storagesample.blob.core.chinacloudapi.cn/sascontainer?sv=2016-05-31&sr=c&si=tutorialpolicy&sig=aMb6rKDvvpfiGVsZI2rCmyUra6ZPpq%2BZ%2FLyTgAeec%2Bk%3D\r \r Blob SAS URI using stored access policy: https://storagesample.blob.core.chinacloudapi.cn/sascontainer/sasblobpolicy.txt?sv=2016-05-31&sr=b&si=tutorialpolicy&sig=%2FkTWkT23SS45%2FoF4bK2mqXkN%2BPKs%2FyHuzkfQ4GFoZVU%3D\r ```\r \r ## <a name=\"part-2-create-a-console-application-to-test-the-shared-access-signatures\"></a>第 2 部分：创建控制台应用程序来测试共享访问签名\r 为了测试在之前的示例中创建的共享访问签名，我们创建第二个控制台应用程序，该应用程序使用这些签名在容器和 Blob 上执行操作。\r \r > [!NOTE]\r > 如果自你完成本教程的第一部分后超过 24 小时，则你生成的签名不再有效。 在这种情况下，应该在第一个控制台应用程序中运行代码，生成全新的共享访问签名以供在本教程的第二部分使用。\r >\r \r 在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 **ConsumeSharedAccessSignatures**。 按照之前的操作，添加对 [Microsoft.WindowsAzure.ConfigurationManager](https://www.nuget.org/packages/Microsoft.WindowsAzure.ConfigurationManager) 和 [WindowsAzure.Storage](https://www.nuget.org/packages/WindowsAzure.Storage/) 的引用。\r \r 在 Program.cs 文件的顶部，添加以下 using 指令：\r \r ```csharp\r using System.IO;\r using Microsoft.WindowsAzure.Storage;\r using Microsoft.WindowsAzure.Storage.Blob;\r ```\r \r 在 Main() 方法的正文中，添加以下字符串约束，并且将其值更改为在本教程的第 1 部分中生成的共享访问签名。\r \r ```csharp\r static void Main(string[] args)\r {\r     const string containerSAS = \"<your container SAS>\";\r     const string blobSAS = \"<your blob SAS>\";\r     const string containerSASWithAccessPolicy = \"<your container SAS with access policy>\";\r     const string blobSASWithAccessPolicy = \"<your blob SAS with access policy>\";\r }\r ```\r \r ### <a name=\"add-a-method-to-try-container-operations-using-a-shared-access-signature\"></a>添加一个方法，尝试使用共享访问签名执行容器操作\r 接下来添加一个方法，该方法使用共享访问签名为容器测试一些容器操作。 共享访问签名用于返回对容器的引用，并且单独基于该签名对容器的访问进行身份验证。\r \r 将以下方法添加到 Program.cs：\r \r ```csharp\r static void UseContainerSAS(string sas)\r {\r     //Try performing container operations with the SAS provided.\r \r     //Return a reference to the container using the SAS URI.\r     CloudBlobContainer container = new CloudBlobContainer(new Uri(sas));\r \r     //Create a list to store blob URIs returned by a listing operation on the container.\r     List<ICloudBlob> blobList = new List<ICloudBlob>();\r \r     //Write operation: write a new blob to the container.\r     try\r     {\r         CloudBlockBlob blob = container.GetBlockBlobReference(\"blobCreatedViaSAS.txt\");\r         string blobContent = \"This blob was created with a shared access signature granting write permissions to the container. \";\r         blob.UploadText(blobContent);\r \r         Console.WriteLine(\"Write operation succeeded for SAS \" + sas);\r         Console.WriteLine();\r     }\r     catch (StorageException e)\r     {\r         Console.WriteLine(\"Write operation failed for SAS \" + sas);\r         Console.WriteLine(\"Additional error information: \" + e.Message);\r         Console.WriteLine();\r     }\r \r     //List operation: List the blobs in the container.\r     try\r     {\r         foreach (ICloudBlob blob in container.ListBlobs())\r         {\r             blobList.Add(blob);\r         }\r         Console.WriteLine(\"List operation succeeded for SAS \" + sas);\r         Console.WriteLine();\r     }\r     catch (StorageException e)\r     {\r         Console.WriteLine(\"List operation failed for SAS \" + sas);\r         Console.WriteLine(\"Additional error information: \" + e.Message);\r         Console.WriteLine();\r     }\r \r     //Read operation: Get a reference to one of the blobs in the container and read it.\r     try\r     {\r         CloudBlockBlob blob = container.GetBlockBlobReference(blobList[0].Name);\r         MemoryStream msRead = new MemoryStream();\r         msRead.Position = 0;\r         using (msRead)\r         {\r             blob.DownloadToStream(msRead);\r             Console.WriteLine(msRead.Length);\r         }\r         Console.WriteLine(\"Read operation succeeded for SAS \" + sas);\r         Console.WriteLine();\r     }\r     catch (StorageException e)\r     {\r         Console.WriteLine(\"Read operation failed for SAS \" + sas);\r         Console.WriteLine(\"Additional error information: \" + e.Message);\r         Console.WriteLine();\r     }\r     Console.WriteLine();\r \r     //Delete operation: Delete a blob in the container.\r     try\r     {\r         CloudBlockBlob blob = container.GetBlockBlobReference(blobList[0].Name);\r         blob.Delete();\r         Console.WriteLine(\"Delete operation succeeded for SAS \" + sas);\r         Console.WriteLine();\r     }\r     catch (StorageException e)\r     {\r         Console.WriteLine(\"Delete operation failed for SAS \" + sas);\r         Console.WriteLine(\"Additional error information: \" + e.Message);\r         Console.WriteLine();\r     }\r }\r ```\r \r 更新 Main() 方法，使用在容器上创建的两个共享访问签名调用 UseContainerSAS()：\r \r ```csharp\r static void Main(string[] args)\r {\r     string containerSAS = \"<your container SAS>\";\r     string blobSAS = \"<your blob SAS>\";\r     string containerSASWithAccessPolicy = \"<your container SAS with access policy>\";\r     string blobSASWithAccessPolicy = \"<your blob SAS with access policy>\";\r \r     //Call the test methods with the shared access signatures created on the container, with and without the access policy.\r     UseContainerSAS(containerSAS);\r     UseContainerSAS(containerSASWithAccessPolicy);\r \r     Console.ReadLine();\r }\r ```\r \r ### <a name=\"add-a-method-to-try-blob-operations-using-a-shared-access-signature\"></a>添加一个方法，尝试使用共享访问签名执行 Blob 操作\r 最后，添加一个方法，该方法在 Blob 上使用共享访问签名测试一些 Blob 操作。 在本用例中，我们使用在共享访问签名中传入的构造函数 CloudBlockBlob(String) 返回对该 Blob 的引用。 无需其他身份验证；它仅基于签名。\r \r 将以下方法添加到 Program.cs：\r \r ```csharp\r static void UseBlobSAS(string sas)\r {\r     //Try performing blob operations using the SAS provided.\r \r     //Return a reference to the blob using the SAS URI.\r     CloudBlockBlob blob = new CloudBlockBlob(new Uri(sas));\r \r     //Write operation: Write a new blob to the container.\r     try\r     {\r         string blobContent = \"This blob was created with a shared access signature granting write permissions to the blob. \";\r         MemoryStream msWrite = new MemoryStream(Encoding.UTF8.GetBytes(blobContent));\r         msWrite.Position = 0;\r         using (msWrite)\r         {\r             blob.UploadFromStream(msWrite);\r         }\r         Console.WriteLine(\"Write operation succeeded for SAS \" + sas);\r         Console.WriteLine();\r     }\r     catch (StorageException e)\r     {\r         Console.WriteLine(\"Write operation failed for SAS \" + sas);\r         Console.WriteLine(\"Additional error information: \" + e.Message);\r         Console.WriteLine();\r     }\r \r     //Read operation: Read the contents of the blob.\r     try\r     {\r         MemoryStream msRead = new MemoryStream();\r         using (msRead)\r         {\r             blob.DownloadToStream(msRead);\r             msRead.Position = 0;\r             using (StreamReader reader = new StreamReader(msRead, true))\r             {\r                 string line;\r                 while ((line = reader.ReadLine()) != null)\r                 {\r                     Console.WriteLine(line);\r                 }\r             }\r         }\r         Console.WriteLine(\"Read operation succeeded for SAS \" + sas);\r         Console.WriteLine();\r     }\r     catch (StorageException e)\r     {\r         Console.WriteLine(\"Read operation failed for SAS \" + sas);\r         Console.WriteLine(\"Additional error information: \" + e.Message);\r         Console.WriteLine();\r     }\r \r     //Delete operation: Delete the blob.\r     try\r     {\r         blob.Delete();\r         Console.WriteLine(\"Delete operation succeeded for SAS \" + sas);\r         Console.WriteLine();\r     }\r     catch (StorageException e)\r     {\r         Console.WriteLine(\"Delete operation failed for SAS \" + sas);\r         Console.WriteLine(\"Additional error information: \" + e.Message);\r         Console.WriteLine();\r     }\r }\r ```\r \r 更新 Main() 方法，使用在 Blob 上创建的两个共享访问签名调用 UseBlobSAS()：\r \r ```csharp\r static void Main(string[] args)\r {\r     string containerSAS = \"<your container SAS>\";\r     string blobSAS = \"<your blob SAS>\";\r     string containerSASWithAccessPolicy = \"<your container SAS with access policy>\";\r     string blobSASWithAccessPolicy = \"<your blob SAS with access policy>\";\r \r     //Call the test methods with the shared access signatures created on the container, with and without the access policy.\r     UseContainerSAS(containerSAS);\r     UseContainerSAS(containerSASWithAccessPolicy);\r \r     //Call the test methods with the shared access signatures created on the blob, with and without the access policy.\r     UseBlobSAS(blobSAS);\r     UseBlobSAS(blobSASWithAccessPolicy);\r \r     Console.ReadLine();\r }\r ```\r \r 运行该控制台应用程序并观察输出，查看对各个签名允许的操作。 控制台窗口中的输出将与下面的输出类似：\r \r ```\r Write operation succeeded for SAS https://storagesample.blob.core.chinacloudapi.cn/sascontainer?sv=2016-05-31&sr=c&sig=32EaQGuFyDMb3yOAey3wq%2B%2FLwgPQxAgSo7UhzLdyIDU%3D&se=2017-05-16T15%3A41%3A20Z&sp=wl\r \r List operation succeeded for SAS https://storagesample.blob.core.chinacloudapi.cn/sascontainer?sv=2016-05-31&sr=c&sig=32EaQGuFyDMb3yOAey3wq%2B%2FLwgPQxAgSo7UhzLdyIDU%3D&se=2017-05-16T15%3A41%3A20Z&sp=wl\r \r Read operation failed for SAS https://storagesample.blob.core.chinacloudapi.cn/sascontainer?sv=2016-05-31&sr=c&sig=32EaQGuFyDMb3yOAey3wq%2B%2FLwgPQxAgSo7UhzLdyIDU%3D&se=2017-05-16T15%3A41%3A20Z&sp=wl\r Additional error information: The remote server returned an error: (403) Forbidden.\r \r Delete operation failed for SAS https://storagesample.blob.core.chinacloudapi.cn/sascontainer?sv=2016-05-31&sr=c&sig=32EaQGuFyDMb3yOAey3wq%2B%2FLwgPQxAgSo7UhzLdyIDU%3D&se=2017-05-16T15%3A41%3A20Z&sp=wl\r Additional error information: The remote server returned an error: (403) Forbidden.\r \r ...\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r * [共享访问签名，第 1 部分：了解 SAS 模型](../common/storage-dotnet-shared-access-signature-part-1.md?toc=%2fstorage%2fblobs%2ftoc.json)\r * [管理对容器和 blob 的匿名读取访问](storage-manage-access-to-resources.md)\r * [使用共享访问签名委托访问 (REST API)](http://msdn.microsoft.com/library/azure/ee395415.aspx)\r * [介绍表和队列 SAS](http://blogs.msdn.com/b/windowsazurestorage/archive/2012/06/12/introducing-table-sas-shared-access-signature-queue-sas-and-update-to-blob-sas.aspx)\r "}