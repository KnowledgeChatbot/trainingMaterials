{"Title":"Azure PowerShell 脚本示例 - 计算要计费的 Blob 容器总大小","Description":"出于计费目的计算 Azure Blob 存储中容器的总大小。","Content":"# <a name=\"calculate-the-total-billing-size-of-a-blob-container\"></a>计算要计费的 Blob 容器总大小\r \r 此脚本出于估算计费成本的目的，计算 Azure Blob 存储中的容器大小。 此脚本计算容器中各 blob 的大小总和。\r \r [!INCLUDE [sample-powershell-install](../../../includes/sample-powershell-install-no-ssh.md)]\r \r [!INCLUDE [quickstarts-free-trial-note](../../../includes/quickstarts-free-trial-note.md)]\r \r > [!NOTE]\r > 此 PowerShell 脚本出于计费目的计算容器大小。 如果要出于其他目的计算容器大小，请参阅[计算 Blob 存储容器的总大小](../scripts/storage-blobs-container-calculate-size-powershell.md)，获取进行估算的更简单的脚本。\r \r ## <a name=\"determine-the-size-of-the-blob-container\"></a>确定 Blob 容器的大小\r \r Blob 容器的总大小包括容器自身大小，以及容器内所有 blob 的大小。\r \r 下述部分介绍 Blob 容器和 blob 的存储容量计算方法。 在下一部分中，Len(X) 表示字符串中的字符数。\r \r ### <a name=\"blob-containers\"></a>Blob 容器\r \r 下述计算介绍如何估算每个 Blob 容器使用的存储量：\r \r `\r 48 bytes + Len(ContainerName) * 2 bytes +\r For-Each Metadata[3 bytes + Len(MetadataName) + Len(Value)] +\r For-Each Signed Identifier[512 bytes]\r `\r \r 以下是明细信息：\r * 每个容器 48 字节的开销，包括上次修改时间、权限、公共设置，以及其他系统元数据。\r \r * 容器名称以 Unicode 形式存储，因此字节数按字符数乘以 2 计算。\r \r * 对于存储的每个 Blob 容器元数据块，我们将存储名称 (ASCII) 长度，再加上字符串值的长度。\r \r * 每个签名标识符（512 字节）包括签名标识符名称、开始时间、到期时间和权限。\r \r ### <a name=\"blobs\"></a>Blob\r \r 下述计算显示如何估算每个 blob 使用的存储量。\r \r * 块 blob（基本 blob 或快照）：\r \r    `\r    124 bytes + Len(BlobName) * 2 bytes +\r    For-Each Metadata[3 bytes + Len(MetadataName) + Len(Value)] +\r    8 bytes + number of committed and uncommitted blocks * Block ID Size in bytes +\r    SizeInBytes(data in unique committed data blocks stored) +\r    SizeInBytes(data in uncommitted data blocks)\r    `\r \r * 页 blob（基本 blob 或快照）：\r \r    `\r    124 bytes + Len(BlobName) * 2 bytes +\r    For-Each Metadata[3 bytes + Len(MetadataName) + Len(Value)] +\r    number of nonconsecutive page ranges with data * 12 bytes +\r    SizeInBytes(data in unique pages stored)\r    `\r \r 以下是明细信息：\r \r * Blob 的开销为 124 字节，其中包括：\r     - 上次修改时间\r     - 大小\r     - Cache-Control\r     - Content-Type\r     - Content-Language\r     - Content-Encoding\r     - Content-MD5\r     - 权限\r     - 快照信息\r     - 租约\r     - 某些系统元数据\r \r * Blob 名称以 Unicode 形式存储，因此字节数按字符数乘以 2 计算。\r \r * 对于每个存储的元数据块，添加名称长度（以 ASCII 码存储），再加上字符串值的长度。\r \r * 对于块 blob：\r     * 块列表为 8 字节。\r     * 块数乘以块 ID 大小（按字节计）。\r     * 所有已提交和未提交块中数据的大小。 \r     \r     >[!NOTE]\r     >使用快照时，大小仅包括此基本或快照 blob 的唯一数据。 如果未提交块在一周后未被使用，则回收到垃圾桶。 之后不计入账单。\r \r * 对于页 blob：\r     * 字节数按具有数据的不连续页面范围数乘以 12 计算。 这是在调用 GetPageRanges API 时看到的唯一页面范围数。\r \r     * 所有存储页面中的数据大小（按字节计）。 \r     \r     >[!NOTE]\r     >使用快照时，大小仅包含要计数的基本 blob 或快照 blob 的唯一页面。\r \r ## <a name=\"sample-script\"></a>示例脚本\r \r ```powershell\r \r # this script will show how to get the total size of the blobs in a container\r # before running this, you need to create a storage account, create a container,\r #    and upload some blobs into the container\r # note: this retrieves all of the blobs in the container in one command.\r #       connect Azure with Login-AzureRmAccount before you run the script.\r # command line usage: script.ps1 -ResourceGroup {YourResourceGroupName} -StorageAccountName {YourAccountName} -ContainerName {YourContainerName}\r #\r \r param(\r     [Parameter(Mandatory=$true)]\r     [string]$ResourceGroup,\r \r     [Parameter(Mandatory=$true)]\r     [string]$StorageAccountName,\r \r     [Parameter(Mandatory=$true)]\r     [string]$ContainerName\r )\r \r #Set-StrictMode will cause Get-AzureStorageBlob returns result in different data types when there is only one blob\r #Set-StrictMode -Version 2\r \r $VerbosePreference = \"Continue\"\r \r if((Get-Module -ListAvailable Azure) -eq $null)\r {\r     throw \"Azure Powershell not found! Please install from http://www.windowsazure.com/en-us/downloads/#cmd-line-tools\"\r }\r \r # function Get-BlobBytes\r \r function Get-BlobBytes\r {\r     param(\r         [Parameter(Mandatory=$true)]\r         $Blob)\r \r     # Base + blobname\r     $blobSizeInBytes = 124 + $Blob.Name.Length * 2\r \r     # Get size of metadata\r     $metadataEnumerator=$Blob.ICloudBlob.Metadata.GetEnumerator()\r     while($metadataEnumerator.MoveNext())\r     {\r         $blobSizeInBytes += 3 + $metadataEnumerator.Current.Key.Length + $metadataEnumerator.Current.Value.Length\r     }\r \r     if($Blob.BlobType -eq [Microsoft.WindowsAzure.Storage.Blob.BlobType]::BlockBlob)\r     {\r         $blobSizeInBytes += 8\r         # Default is Microsoft.WindowsAzure.Storage.Blob.BlockListingFilter.Committed. Need All\r         $Blob.ICloudBlob.DownloadBlockList([Microsoft.WindowsAzure.Storage.Blob.BlockListingFilter]::All) |\r             ForEach-Object { $blobSizeInBytes += $_.Length + $_.Name.Length }\r     }\r     else\r     {\r         $Blob.ICloudBlob.GetPageRanges() |\r             ForEach-Object { $blobSizeInBytes += 12 + $_.EndOffset - $_.StartOffset }\r     }\r \r     return $blobSizeInBytes\r }\r \r # function Get-ContainerBytes\r \r function Get-ContainerBytes\r {\r     param(\r         [Parameter(Mandatory=$true)]\r         [Microsoft.WindowsAzure.Storage.Blob.CloudBlobContainer]$Container)\r \r     # Base + name of container\r     $containerSizeInBytes = 48 + $Container.Name.Length*2\r \r     # Get size of metadata\r     $metadataEnumerator = $Container.Metadata.GetEnumerator()\r     while($metadataEnumerator.MoveNext())\r     {\r         $containerSizeInBytes += 3 + $metadataEnumerator.Current.Key.Length + $metadataEnumerator.Current.Value.Length\r     }\r \r     # Get size for SharedAccessPolicies\r     $containerSizeInBytes += $Container.GetPermissions().SharedAccessPolicies.Count * 512\r \r     # Calculate size of all blobs.\r     $blobCount = 0\r     $Token = $Null\r     $MaxReturn = 5000\r \r     do {\r         $Blobs = Get-AzureStorageBlob -Context $storageContext -Container $Container.Name -MaxCount $MaxReturn -ContinuationToken $Token\r         if($Blobs -eq $Null) { break }\r \r         #Set-StrictMode will cause Get-AzureStorageBlob returns result in different data types when there is only one blob\r         if($Blobs.GetType().Name -eq \"AzureStorageBlob\")\r         {\r             $Token = $Null\r         }\r         else\r         {\r             $Token = $Blobs[$Blobs.Count - 1].ContinuationToken;\r         }\r \r         $Blobs | ForEach-Object {\r                 $blobSize = Get-BlobBytes $_\r                 $containerSizeInBytes += $blobSize\r                 $blobCount++\r \r                 if(($blobCount % 1000) -eq 0)\r                 {\r                     Write-Verbose(\"Counting {0} Sizing {1} \" -f $blobCount, $containerSizeInBytes)\r                 }\r             }\r     }\r     While ($Token -ne $Null)\r \r     return @{ \"containerSize\" = $containerSizeInBytes; \"blobCount\" = $blobCount }\r }\r \r #Login-AzureRmAccount\r \r $storageAccount = Get-AzureRmStorageAccount -ResourceGroupName $ResourceGroup -Name $StorageAccountName -ErrorAction SilentlyContinue\r if($storageAccount -eq $null)\r {\r     throw \"The storage account specified does not exist in this subscription.\"\r }\r \r $storageContext = $storageAccount.Context\r \r $containers = New-Object System.Collections.ArrayList\r if($ContainerName.Length -ne 0)\r {\r     $container = Get-AzureStorageContainer -Context $storageContext -Name $ContainerName -ErrorAction SilentlyContinue |\r         ForEach-Object { $containers.Add($_) } | Out-Null\r }\r else\r {\r     Get-AzureStorageContainer -Context $storageContext | ForEach-Object { $containers.Add($_) } | Out-Null\r }\r \r $sizeInBytes = 0\r \r if($containers.Count -gt 0)\r {\r     $containers | ForEach-Object {\r         Write-Output(\"Calculating container {0} ...\" -f $_.CloudBlobContainer.Name)\r         $result = Get-ContainerBytes $_.CloudBlobContainer\r         $sizeInBytes += $result.containerSize\r \r         Write-Output(\"Container '{0}' with {1} blobs has a sizeof {2:F2} MB.\" -f $_.CloudBlobContainer.Name,$result.blobCount,($result.containerSize/1MB))\r     }\r }\r else\r {\r     Write-Warning \"No containers found to process in storage account '$StorageAccountName'.\"\r }\r \r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r - 请参阅[计算 Blob 存储容器的总大小](../scripts/storage-blobs-container-calculate-size-powershell.md)，获取估算容器大小的简单脚本。\r \r - 有关 Azure 存储计费的详细信息，请参阅[了解 Windows Azure 存储计费](https://blogs.msdn.microsoft.com/windowsazurestorage/2010/07/08/understanding-windows-azure-storage-billing-bandwidth-transactions-and-capacity/)。\r \r - 有关 Azure PowerShell 模块的详细信息，请参阅 [Azure PowerShell 文档](https://docs.microsoft.com/en-us/powershell/azure/overview?view=azurermps-4.4.1)。\r \r - 有关其他存储 PowerShell 脚本示例，可查看[适用于 Azure 存储的 PowerShell 示例](../blobs/storage-samples-blobs-powershell.md)。\r "}