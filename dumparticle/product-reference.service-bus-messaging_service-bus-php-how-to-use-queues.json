{"Title":"如何通过 PHP 使用服务总线队列","Description":"了解如何在 Azure 中使用服务总线队列。 用 PHP 编写的代码示例。","Content":"# <a name=\"how-to-use-service-bus-queues\"></a>如何使用服务总线队列\r \r [!INCLUDE [service-bus-selector-queues](../../includes/service-bus-selector-queues.md)]\r \r 本指南说明如何使用服务总线队列。 示例采用 PHP 编写并使用 [Azure SDK for PHP](../php-download-sdk.md)。 涉及的任务包括**创建队列**、**发送和接收消息**以及**删除队列**。\r \r [!INCLUDE [howto-service-bus-queues](../../includes/howto-service-bus-queues.md)]\r \r ## <a name=\"create-a-php-application\"></a>创建 PHP 应用程序\r \r 创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码内引用[用于 PHP 的 Azure SDK](../php-download-sdk.md) 中的类。 可以使用任何开发工具或记事本创建应用程序。\r \r > [!NOTE]\r > 在安装 PHP 的过程中，还必须安装并启用 [OpenSSL 扩展](http://php.net/openssl) 。\r > \r > \r \r 本指南会使用服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。\r \r ## <a name=\"get-the-azure-client-libraries\"></a>获取 Azure 客户端库\r \r [!INCLUDE [get-client-libraries](../../includes/get-client-libraries.md)]\r \r ## <a name=\"configure-your-application-to-use-service-bus\"></a>配置应用程序以使用服务总线\r \r 若要使用服务总线队列 API，请执行以下操作：\r \r 1. 使用 [require_once][require_once] 语句引用 autoloader 文件。\r 2. 引用所用的任意类。\r \r 下面的示例演示了如何包括 autoloader 文件并引用 `ServicesBuilder` 类。\r \r > [!NOTE]\r > 本示例（以及本文中的其他示例）假定你已通过 Composer 安装了用于 Azure 的 PHP 客户端库。 如果已手动安装这些库或将其作为 PEAR 包安装，则必须引用 **WindowsAzure.php** autoloader 文件。\r > \r > \r \r ```php\r require_once 'vendor/autoload.php';\r use WindowsAzure\\Common\\ServicesBuilder;\r ```\r \r 在以下示例中， `require_once` 语句将始终显示，但只会引用执行该示例所需的类。\r \r ## <a name=\"set-up-a-service-bus-connection\"></a>设置服务总线连接\r \r 若要实例化服务总线客户端，必须先设置采用以下格式的有效连接字符串：\r \r ```\r Endpoint=[yourEndpoint];SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=[Primary Key]\r ```\r \r 其中，Endpoint 的格式通常为 `[yourNamespace].servicebus.chinacloudapi.cn`。\r \r 若要创建任何 Azure 服务客户端，必须使用 `ServicesBuilder` 类。可执行以下操作：\r \r * 将连接字符串直接传递给它。\r * 使用 CloudConfigurationManager (CCM) 检查多个外部源以获取连接字符串：\r   * 默认情况下，它附带了对一个外部源的支持 - 环境变量\r   * 可通过扩展 `ConnectionStringSource` 类来添加新源\r \r 在此处列出的示例中，将直接传递连接字符串。\r \r ```php\r require_once 'vendor/autoload.php';\r \r     use WindowsAzure\\Common\\ServicesBuilder;\r \r $connectionString = \"Endpoint=[yourEndpoint];SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=[Primary Key]\";\r \r     $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\r ```\r \r ## <a name=\"create-a-queue\"></a>创建队列\r 可以通过 `ServiceBusRestProxy` 类对服务总线队列执行管理操作。 `ServiceBusRestProxy` 对象是通过 `ServicesBuilder::createServiceBusService` 工厂方法构造的，包含一个适当的连接字符串，该字符串封装了令牌权限以对它进行管理。\r \r 以下示例演示了如何实例化 `ServiceBusRestProxy` 并调用 `ServiceBusRestProxy->createQueue` 以在 `MySBNamespace` 服务命名空间内创建名为 `myqueue` 的队列：\r \r ```php\r require_once 'vendor/autoload.php';\r \r     use WindowsAzure\\Common\\ServicesBuilder;\r     use WindowsAzure\\Common\\ServiceException;\r     use WindowsAzure\\ServiceBus\\Models\\QueueInfo;\r \r     // Create Service Bus REST proxy.\r     $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\r \r     try\t{\r         $queueInfo = new QueueInfo(\"myqueue\");\r \r         // Create queue.\r         $serviceBusRestProxy->createQueue($queueInfo);\r     }\r     catch(ServiceException $e){\r         // Handle exception based on error codes and messages.\r         // Error codes and messages are here: \r         // https://docs.microsoft.com/rest/api/storageservices/Common-REST-API-Error-Codes\r         $code = $e->getCode();\r         $error_message = $e->getMessage();\r         echo $code.\": \".$error_message.\"<br />\";\r     }\r ```\r \r > [!NOTE]\r > 可以对 `ServiceBusRestProxy` 对象使用 `listQueues` 方法，以检查具有指定名称的队列是否已位于命名空间中。\r > \r > \r \r ## <a name=\"send-messages-to-a-queue\"></a>向队列发送消息\r 要将消息发送到服务总线队列，应用程序应调用 `ServiceBusRestProxy->sendQueueMessage` 方法。 下面的代码演示了如何将消息发送到先前在 `MySBNamespace` 服务命名空间内创建的 `myqueue` 队列。\r \r ```php\r require_once 'vendor/autoload.php';\r \r     use WindowsAzure\\Common\\ServicesBuilder;\r     use WindowsAzure\\Common\\ServiceException;\r     use WindowsAzure\\ServiceBus\\Models\\BrokeredMessage;\r \r     // Create Service Bus REST proxy.\r     $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\r \r     try\t{\r         // Create message.\r         $message = new BrokeredMessage();\r         $message->setBody(\"my message\");\r \r         // Send message.\r         $serviceBusRestProxy->sendQueueMessage(\"myqueue\", $message);\r     }\r     catch(ServiceException $e){\r         // Handle exception based on error codes and messages.\r         // Error codes and messages are here: \r         // https://docs.microsoft.com/rest/api/storageservices/Common-REST-API-Error-Codes\r         $code = $e->getCode();\r         $error_message = $e->getMessage();\r         echo $code.\": \".$error_message.\"<br />\";\r     }\r ```\r \r 发送到服务总线（以及从服务总线收到）的消息是 [BrokeredMessage][BrokeredMessage] 类的实例。 [BrokeredMessage][BrokeredMessage] 对象包含一组标准方法、用来保存特定于应用程序的自定义属性的属性，以及大量的任意应用程序数据。\r \r 在标准层，服务总线队列支持的最大消息大小为 256 KB。 标头最大为 64 KB，其中包括标准和自定义应用程序属性。 一个队列中包含的消息数量不受限制，但消息的总大小受限制。 队列大小的上限为 5 GB。\r \r ## <a name=\"receive-messages-from-a-queue\"></a>从队列接收消息\r 从队列接收消息的最佳方法是使用 `ServiceBusRestProxy->receiveQueueMessage` 方法。 可通过两种不同的模式接收消息：[ReceiveAndDelete](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.receivemode.receiveanddelete) 和 [PeekLock](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.receivemode.peeklock)。 **PeekLock** 是默认设置。\r \r 使用 [ReceiveAndDelete](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.receivemode.receiveanddelete) 模式时，接收是一项单步操作，即当服务总线接收到队列中某条消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。 [ReceiveAndDelete](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.receivemode.receiveanddelete) 模式是最简单的模式，最适合在发生故障时应用程序允许不处理消息的情况。 为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。 由于服务总线会将消息标记为“已使用”，因此当应用程序重启并重新开始使用消息时，它会遗漏在发生崩溃前使用的消息。\r \r 在默认的 [PeekLock](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.receivemode.peeklock) 模式下，接收消息会变成一个双阶段操作，这将能够支持不能允许丢失消息的应用程序。 当 Service Bus 收到请求时，它会找到要使用的下一个消息，将其锁定以防其他使用方接收它，并将该消息返回给应用程序。 应用程序完成消息处理（或可靠地存储消息以供日后处理）后，它会将收到的消息传递到 `ServiceBusRestProxy->deleteMessage`，从而完成接收过程的第二阶段。 当服务总线发现 `deleteMessage` 调用时，它会将消息标记为“已使用”并将其从队列中删除。\r \r 以下示例演示了如何使用 [PeekLock](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.receivemode.peeklock) 模式（默认模式）接收和处理消息。\r \r ```php\r require_once 'vendor/autoload.php';\r \r     use WindowsAzure\\Common\\ServicesBuilder;\r     use WindowsAzure\\Common\\ServiceException;\r     use WindowsAzure\\ServiceBus\\Models\\ReceiveMessageOptions;\r \r     // Create Service Bus REST proxy.\r     $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\r \r     try\t{\r         // Set the receive mode to PeekLock (default is ReceiveAndDelete).\r         $options = new ReceiveMessageOptions();\r         $options->setPeekLock();\r \r         // Receive message.\r         $message = $serviceBusRestProxy->receiveQueueMessage(\"myqueue\", $options);\r         echo \"Body: \".$message->getBody().\"<br />\";\r         echo \"MessageID: \".$message->getMessageId().\"<br />\";\r \r         /*---------------------------\r             Process message here.\r         ----------------------------*/\r \r         // Delete message. Not necessary if peek lock is not set.\r         echo \"Message deleted.<br />\";\r         $serviceBusRestProxy->deleteMessage($message);\r     }\r     catch(ServiceException $e){\r         // Handle exception based on error codes and messages.\r         // Error codes and messages are here:\r         // https://docs.microsoft.com/rest/api/storageservices/Common-REST-API-Error-Codes\r         $code = $e->getCode();\r         $error_message = $e->getMessage();\r         echo $code.\": \".$error_message.\"<br />\";\r     }\r ```\r \r ## <a name=\"how-to-handle-application-crashes-and-unreadable-messages\"></a>如何：处理应用程序崩溃和不可读消息\r Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。 如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 `unlockMessage` 方法（而不是 `deleteMessage` 方法）。 这会导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。\r \r 还存在与队列中已锁定的消息相关联的超时，并且如果应用程序未能在锁定超时到期之前处理消息（例如，如果应用程序崩溃），服务总线则将自动解锁该消息，使它可以再次被接收。\r \r 如果在处理消息之后，发出 `deleteMessage` 请求之前，应用程序发生崩溃，则在应用程序重启时会将该消息重新传送给它。 此情况通常称作*至少处理一次*，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。 如果某个场景不允许重复处理，则建议向应用程序添加其他逻辑来处理重复消息传送。 这通常可以通过使用消息的 `getMessageId` 方法来实现，消息在多次传送尝试中保持不变。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 现在，已了解服务总线队列的基础知识，请参阅[队列、主题和订阅][Queues, topics, and subscriptions] 以获取更多信息。\r \r 有关详细信息，另请访问 [PHP 开发人员中心](https://www.azure.cn/develop/php/)。\r \r [BrokeredMessage]: https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.brokeredmessage\r [Queues, Topics, and Subscriptions]: ./service-bus-queues-topics-subscriptions.md\r [require_once]: http://php.net/require_once\r \r <!---HONumber=Mooncake_0313_2017-->\r <!--Update_Description:update meta properties and wording-->"}