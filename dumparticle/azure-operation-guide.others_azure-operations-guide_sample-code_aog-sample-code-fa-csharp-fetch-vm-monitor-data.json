{"Title":"C# 获取虚拟机监控数据","Description":"如何通过 C# 获取虚拟机监控数据","Content":"\r # C# 获取虚拟机监控数据\r \r ## **问题描述**\r \r 需要通过本地程序获取 Azure 虚拟机的监控数据并保存成文件时，可以通过接口获取该种数据，然而我们最多只能获取 30 天内的监控数据。\r \r ## **前提条件**\r \r - 下载[订阅文件](https://manage.windowsazure.cn/publishsettings/)\r \r - 安装 VS2015\r \r ## **解决方法**\r \r 引用如下命名空间\r \r ```\r using System;\r using System.Linq;\r using System.Threading.Tasks;\r using System.Configuration;\r using Microsoft.WindowsAzure.Storage;\r using Microsoft.WindowsAzure.Storage.Blob;\r using System.Net;\r using System.Collections.Generic;\r using System.Text;\r using System.Xml.Linq;\r using System.Security.Cryptography.X509Certificates;\r using Microsoft.WindowsAzure.Management;\r using Microsoft.WindowsAzure.Management.Compute;\r using Microsoft.WindowsAzure.Management.Compute.Models;\r using Microsoft.WindowsAzure.Management.Monitoring.Metrics;\r using Microsoft.WindowsAzure.Management.Monitoring.Utilities;\r using Microsoft.WindowsAzure.Management.Scheduler;\r using Microsoft.Azure;\r using Microsoft.WindowsAzure;\r using Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models;\r using System.IO;\r \r //需要将如下代码改为自己的真实信息\r string subscriptionId = \"\";\r string cloudServiceName = \"\";\r string deploymentName = \"\";\r string vmName = \"\";\r \r //加载下载的订阅文件\r XElement xElement = XElement.Load(System.AppDomain.CurrentDomain.BaseDirectory + \"订阅文件\");\r var subscriptionElements = xElement.Descendants(\"Subscription\");\r var base64cer = subscriptionElements.Where(e => e.Attribute(\"Id\").Value.ToString() == subscriptionId).FirstOrDefault().Attribute(\"ManagementCertificate\").Value.ToString();\r \r X509Certificate2 certificateStore = new X509Certificate2(Convert.FromBase64String(base64cer));\r Microsoft.WindowsAzure.SubscriptionCloudCredentials credential = new Microsoft.WindowsAzure.CertificateCloudCredentials(subscriptionId, certificateStore);\r Uri baseUri = new Uri(\"https://management.core.chinacloudapi.cn/\");\r \r MetricsClient metricsClient = new MetricsClient(credential, baseUri);\r \r string cloudServiceResourceId = ResourceIdBuilder.BuildVirtualMachineResourceId(cloudServiceName, deploymentName, vmName);\r // Metric names\r List<string> metricNames = new List<string>() { \"Network Out\", \"Disk Read Bytes/sec\", \"Disk Write Bytes/sec\", \"Percentage CPU\", \"Network In\" };\r TimeSpan timeGrain = TimeSpan.FromHours(1);\r DateTime timeBegin = DateTime.Now.AddDays(-30);\r DateTime time2Start = DateTime.Parse(timeBegin.ToString(\"yyyy-MM-dd\") + \" 00:00:00\");\r DateTime time2Stop = DateTime.Parse(timeBegin.ToString(\"yyyy-MM-dd\") + \" 23:59:59\");\r int rate = (DateTime.Now - time2Start).Days / 13 + 1;\r int addition = (DateTime.Now - time2Start).Days % 13;\r int num1, num2;\r string json = null;\r for (int i = 0; i < rate; i++)\r {\r     num1 = i * 13;\r \r     if (i == rate - 1)\r     {\r         num2 = i * 13 + addition;\r     }\r     else\r     {\r         num2 = (i + 1) * 13;\r     }\r     DateTime startTime = time2Start.AddDays(num1);\r     DateTime endTime = time2Stop.AddDays(num2);\r \r     MetricValueListResponse response = metricsClient.MetricValues.List(cloudServiceResourceId, metricNames, String.Empty, timeGrain, startTime, endTime);\r \r     foreach (MetricValueSet value in response.MetricValueSetCollection.Value)\r     {\r         String valueName = value.Name;\r         Console.WriteLine(\"------------------------Metric: {0}------------------------\", valueName);\r         foreach (MetricValue metricValue in value.MetricValues)\r         {\r             json += value.Name + \",\" + metricValue.Timestamp.AddHours(8) + \",\" + metricValue.Average + \",\" + metricValue.Count + \",\" + metricValue.Maximum + \",\" + metricValue.Minimum + \",\" + metricValue.Total + \"\\r\\n\";\r         }\r     }\r }\r FileStream aFile = new FileStream(AppDomain.CurrentDomain.BaseDirectory + ConfigurationManager.AppSettings[\"VmTracePath\"] + cloudServiceName + \"_\" + deploymentName + \"_\" + vmName + \"_\" + timeBegin.ToString(\"yyyy-MM-dd\") + \"~\" + DateTime.Now.ToString(\"yyyy-MM-dd\") + \".CSV\", FileMode.OpenOrCreate);\r StreamWriter sw = new StreamWriter(aFile, Encoding.GetEncoding(\"GB2312\"));\r sw.Write(json);\r sw.Close();\r ```\r \r ## **测试结果**\r \r 执行程序，在 Debug 文件夹下会看到获取监控信息所写入的文件，名称如下：\r \r ![excel-name](./media/aog-sample-code-fa-csharp-fetch-vm-monitor-data/excel-name.png)\r ![excel-data](./media/aog-sample-code-fa-csharp-fetch-vm-monitor-data/excel-data.png)"}