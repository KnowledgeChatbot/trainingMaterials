{"Title":"Azure IoT 中心设备孪生入门 (.NET/.NET)","Description":"如何使用 Azure IoT 中心设备孪生添加标记，然后使用 IoT 中心查询。 使用适用于 .NET 的 Azure IoT 设备 SDK 实现模拟设备应用，并使用适用于 .NET 的 Azure IoT 服务 SDK 实现可添加标记并运行 IoT 中心查询的服务应用。","Content":"# 设备孪生入门 (.NET/.NET)\r <a id=\"get-started-with-device-twins-netnet\"></a>\r [!INCLUDE [iot-hub-selector-twin-get-started](../../includes/iot-hub-selector-twin-get-started.md)]\r \r 在本教程结束时，将会创建这些 .NET 控制台应用：\r \r * CreateDeviceIdentity，一个 .NET 应用，用于创建设备标识和关联的安全密钥以连接模拟设备应用。\r * AddTagsAndQuery，一个 .NET 后端应用，用于添加标记并查询设备孪生。\r * ReportConnectivity，一个 .NET 设备应用，它模拟使用早前创建的设备标识连接到 IoT 中心的设备，并报告其连接条件。\r \r > [!NOTE]\r > [Azure IoT SDK][lnk-hub-sdks] 文章介绍了可用于构建设备和后端应用的 Azure IoT SDK。\r > \r > \r \r 若要完成本教程，需要满足以下条件：\r \r * Visual Studio 2015 或 Visual Studio 2017。\r * 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r \r [!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r \r [!INCLUDE [iot-hub-get-started-create-device-identity-portal](../../includes/iot-hub-get-started-create-device-identity-portal.md)]\r \r 如果想改为以编程方式创建设备标识，请阅读文章[使用 .NET 将模拟设备连接到 IoT 中心][lnk-device-identity-csharp]中的相应部分。\r \r ## 创建服务应用\r <a id=\"create-the-service-app\"></a>\r 在本部分中，将创建一个 .NET 控制台应用（使用 C#），该应用将位置元数据添加到与 **myDeviceId** 关联的设备孪生。 然后，该应用将选择设备来查询存储在 IoT 中心的设备孪生，然后查询报告手机网络连接的设备孪生。\r \r 1. 在 Visual Studio 中，使用“ **控制台应用程序** ”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 将项目命名为 **AddTagsAndQuery**。\r    \r     ![新的 Visual C# Windows 经典桌面项目][img-createapp]\r 1. 在“解决方案资源管理器”中，右键单击“AddTagsAndQuery”项目，然后单击“管理 NuGet 包...”。\r 1. 在“NuGet 包管理器”窗口中，选择“浏览”，然后搜索“microsoft.azure.devices”。 选择“安装”以安装“Microsoft.Azure.Devices”包，并接受使用条款。 该过程将下载、安装 [Azure IoT 服务 SDK][lnk-nuget-service-sdk] NuGet 包及其依赖项并添加对它的引用。\r    \r     ![“NuGet 包管理器”窗口][img-servicenuget]\r 1. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r    \r         using Microsoft.Azure.Devices;\r 1. 将以下字段添加到 **Program** 类。 将占位符值替换为在上一部分中为中心创建的 IoT 中心连接字符串。\r    \r         static RegistryManager registryManager;\r         static string connectionString = \"{iot hub connection string}\";\r 1. 将以下方法添加到 **Program** 类：\r    \r         public static async Task AddTagsAndQuery()\r         {\r             var twin = await registryManager.GetTwinAsync(\"myDeviceId\");\r             var patch =\r                 @\"{\r                     tags: {\r                         location: {\r                             region: 'US',\r                             plant: 'Redmond43'\r                         }\r                     }\r                 }\";\r             await registryManager.UpdateTwinAsync(twin.DeviceId, patch, twin.ETag);\r    \r             var query = registryManager.CreateQuery(\"SELECT * FROM devices WHERE tags.location.plant = 'Redmond43'\", 100);\r             var twinsInRedmond43 = await query.GetNextAsTwinAsync();\r             Console.WriteLine(\"Devices in Redmond43: {0}\", string.Join(\", \", twinsInRedmond43.Select(t => t.DeviceId)));\r    \r             query = registryManager.CreateQuery(\"SELECT * FROM devices WHERE tags.location.plant = 'Redmond43' AND properties.reported.connectivity.type = 'cellular'\", 100);\r             var twinsInRedmond43UsingCellular = await query.GetNextAsTwinAsync();\r             Console.WriteLine(\"Devices in Redmond43 using cellular network: {0}\", string.Join(\", \", twinsInRedmond43UsingCellular.Select(t => t.DeviceId)));\r         }\r    \r     **RegistryManager** 类公开从该服务与设备孪生交互所需的所有方法。 上面的代码首先初始化 **registryManager** 对象，然后检索 **myDeviceId** 的设备孪生，最后使用所需位置信息更新其标记。\r    \r     在更新后，它将执行两个查询：第一个仅选择位于 **Redmond43** 工厂的设备的设备孪生，第二个将查询细化为仅选择还要通过移动电话网络连接的设备。\r    \r     请注意上面的代码，当它创建 **query** 对象时，会指定返回的最大文档数。 **query** 对象包含 **HasMoreResults** 布尔值属性，你可以使用它多次调用 **GetNextAsTwinAsync** 方法来检索所有结果。 名为 **GetNextAsJson** 的方法可用于非设备孪生的结果（例如聚合查询的结果）。\r 1. 最后，在 **Main** 方法中添加以下行：\r    \r         registryManager = RegistryManager.CreateFromConnectionString(connectionString);\r         AddTagsAndQuery().Wait();\r         Console.WriteLine(\"Press Enter to exit.\");\r         Console.ReadLine();\r \r 1. 在“解决方案资源管理器”中，打开“设置启动项目...”，并确保 **AddTagsAndQuery** 项目的“操作”为“启动”。 生成解决方案。\r 1. 右键单击 **AddTagsAndQuery** 项目并选择“调试”，然后选择“启动新实例”来运行此应用程序。 在查询位于 **Redmond43** 的所有设备的查询结果中，你应该会看到一个设备，而在将结果限制为使用蜂窝网络的设备的查询结果中没有任何设备。\r    \r     ![在窗口中查询结果][img-addtagapp]\r \r 在下一部分中，创建的设备应用将报告连接信息，并更改上一部分中查询的结果。\r \r ## 创建设备应用\r <a id=\"create-the-device-app\"></a>\r 在此部分，需创建一个 .NET 控制台应用作为“myDeviceId”连接到中心，然后更新其报告属性，使其包含它使用手机网络进行连接的信息。\r \r 1. 在 Visual Studio 中，使用“ **控制台应用程序** ”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 将项目命名为“ReportConnectivity”。\r    \r     ![新的 Visual C# Windows 经典设备应用][img-createdeviceapp]\r     \r 1. 在解决方案资源管理器中，右键单击“ReportConnectivity”项目，然后单击“管理 NuGet 包...”。\r 1. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索“microsoft.azure.devices.client”。 选择“安装”，安装“microsoft.azure.devices.client”包，并接受使用条款。 该过程将下载、安装 [Azure IoT 设备 SDK][lnk-nuget-client-sdk] NuGet 包及其依赖项并添加对它的引用。\r    \r     ![“NuGet 包管理器”窗口客户端应用][img-clientnuget]\r 1. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r    \r         using Microsoft.Azure.Devices.Client;\r         using Microsoft.Azure.Devices.Shared;\r         using Newtonsoft.Json;\r \r 1. 将以下字段添加到 **Program** 类。 将占位符值替换为在上一部分中记下的设备连接字符串。\r    \r         static string DeviceConnectionString = \"HostName=<yourIotHubName>.azure-devices.cn;DeviceId=<yourIotDeviceName>;SharedAccessKey=<yourIotDeviceAccessKey>\";\r         static DeviceClient Client = null;\r \r 1. 将以下方法添加到 **Program** 类：\r \r        public static async void InitClient()\r         {\r             try\r             {\r                 Console.WriteLine(\"Connecting to hub\");\r                 Client = DeviceClient.CreateFromConnectionString(DeviceConnectionString, TransportType.Mqtt);\r                 Console.WriteLine(\"Retrieving twin\");\r                 await Client.GetTwinAsync();\r             }\r             catch (Exception ex)\r             {\r                 Console.WriteLine();\r                 Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r             }\r         }\r \r     **Client** 对象公开从该设备与设备孪生交互所需的所有方法。 上述代码会初始化“客户端”对象，然后检索 myDeviceId设备孪生。\r \r 1. 将以下方法添加到 **Program** 类：\r    \r         public static async void ReportConnectivity()\r         {\r             try\r             {\r                 Console.WriteLine(\"Sending connectivity data as reported property\");\r                 \r                 TwinCollection reportedProperties, connectivity;\r                 reportedProperties = new TwinCollection();\r                 connectivity = new TwinCollection();\r                 connectivity[\"type\"] = \"cellular\";\r                 reportedProperties[\"connectivity\"] = connectivity;\r                 await Client.UpdateReportedPropertiesAsync(reportedProperties);\r             }\r             catch (Exception ex)\r             {\r                 Console.WriteLine();\r                 Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r             }\r         }\r \r    上述代码会使用连接信息更新 myDeviceId 的报告属性。\r \r 1. 最后，在 **Main** 方法中添加以下行：\r    \r        try\r        {\r             InitClient();\r             ReportConnectivity();\r        }\r        catch (Exception ex)\r        {\r             Console.WriteLine();\r             Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r        }\r        Console.WriteLine(\"Press Enter to exit.\");\r        Console.ReadLine();\r \r 1. 在“解决方案资源管理器”中，打开“设置启动项目...”，并确保“ReportConnectivity”项目的“操作”为“启动”。 生成解决方案。\r 1. 右键单击“ReportConnectivity”项目并选择“调试”，然后选择“启动新实例”来运行此应用程序。 应该可以看到应用获取孪生信息，然后发送连接信息作为报告属性。\r    \r     ![运行设备应用来报告连接信息][img-rundeviceapp]\r     \r     \r 1. 现在设备报告了其连接信息，该信息应出现在两个查询中。 运行 .NET **AddTagsAndQuery** 应用即可再次运行查询。 这次 **myDeviceId** 应出现在两个查询结果中。\r    \r     ![成功报告设备连接信息][img-tagappsuccess]\r \r ## 后续步骤\r <a id=\"next-steps\"></a>\r 本教程中，在 Azure 门户中配置了新的 IoT 中心，然后在 IoT 中心的标识注册表中创建了设备标识。 已从后端应用以标记形式添加了设备元数据，并编写了模拟的设备应用，用于报告设备孪生中的设备连接信息。 还学习了如何使用类似 SQL 的 IoT 中心查询语言来查询此信息。\r \r 充分利用以下资源：\r \r * 通过 [Get started with IoT Hub][lnk-iothub-getstarted] （IoT 中心入门）教程学习如何从设备发送遥测；\r * 通过[使用所需属性配置设备][lnk-twin-how-to-configure]教程学习如何使用设备孪生的所需属性配置设备；\r * 通过[使用直接方法][lnk-methods-tutorial]教程学习如何以交互方式控制设备（例如从用户控制的应用打开风扇）。\r \r <!-- images -->\r [img-servicenuget]: ./media/iot-hub-csharp-csharp-twin-getstarted/servicesdknuget.png\r [img-createapp]: ./media/iot-hub-csharp-csharp-twin-getstarted/createnetapp.png\r [img-addtagapp]: ./media/iot-hub-csharp-csharp-twin-getstarted/addtagapp.png\r [img-createdeviceapp]: ./media/iot-hub-csharp-csharp-twin-getstarted/createdeviceapp.png\r [img-clientnuget]: ./media/iot-hub-csharp-csharp-twin-getstarted/clientsdknuget.png\r [img-rundeviceapp]: ./media/iot-hub-csharp-csharp-twin-getstarted/rundeviceapp.png\r [img-tagappsuccess]: ./media/iot-hub-csharp-csharp-twin-getstarted/tagappsuccess.png\r \r <!-- links -->\r [lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r [lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r [lnk-nuget-service-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\r [lnk-nuget-client-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices.Client/\r \r [lnk-device-identity-csharp]: ./iot-hub-csharp-csharp-getstarted.md#DeviceIdentity_csharp\r [lnk-d2c]: ./iot-hub-devguide-messaging.md#device-to-cloud-messages\r [lnk-methods]: ./iot-hub-devguide-direct-methods.md\r [lnk-twins]: ./iot-hub-devguide-device-twins.md\r [lnk-query]: ./iot-hub-devguide-query-language.md\r [lnk-identity]: ./iot-hub-devguide-identity-registry.md\r \r [lnk-iothub-getstarted]: ./iot-hub-csharp-csharp-getstarted.md\r [lnk-methods-tutorial]: ./iot-hub-node-node-direct-methods.md\r [lnk-twin-how-to-configure]: ./iot-hub-csharp-node-twin-how-to-configure.md\r \r [lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/blob/master/doc/node-devbox-setup.md\r \r "}