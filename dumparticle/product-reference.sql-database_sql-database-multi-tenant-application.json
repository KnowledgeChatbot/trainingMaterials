{"Title":"实现使用 Azure SQL 数据库的多租户 SaaS 应用程序","Description":"实现使用 Azure SQL 数据库的多租户 SaaS 应用程序。","Content":"# <a name=\"implement-a-multi-tenant-saas-application-using-azure-sql-database\"></a>实现使用 Azure SQL 数据库的多租户 SaaS 应用程序\r \r 多租户应用程序是指云环境中托管的应用程序，它向不共享数据或看不到彼此数据的数百或数千个租户提供一组相同的服务。 例如向云托管环境中的租户提供服务的 SaaS 应用程序。 此模型隔离每个租户的数据，并优化资源的分布以降低成本。 \r \r 本教程演示了如何创建使用 Azure SQL 数据库的多租户 SaaS 应用程序。\r \r 在本教程中，你将学习：\r > [!div class=\"checklist\"]\r > * 使用租户各有数据库模式设置数据库环境来支持多租户 SaaS 应用程序\r > * 创建租户目录\r > * 预配租户数据库并将其注册到租户目录中\r > * 设置示例 Java 应用程序 \r > * 访问租户数据库简单的 Java 控制台应用程序\r > * 删除租户\r \r 如果没有 Azure 订阅，请在开始前[创建一个试用帐户](https://www.azure.cn/1rmb-trial/)。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 若要完成本教程，请确保做好以下准备：\r \r * 已安装最新版本的 PowerShell 和[最新的 Azure PowerShell SDK](/downloads/)\r \r * 已安装最新版本的 [SQL Server Management Studio](http://docs.microsoft.com/sql/ssms/download-sql-server-management-studio-ssms)。 安装 SQL Server Management Studio 还会安装最新版本的 SQLPackage，这是一个可用于自动执行一系列数据库开发任务的命令行实用工具。\r \r * 在计算机上已安装 [Java Runtime Environment (JRE) 8](http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html) 和[最新版 JAVA 开发工具包 (JDK)](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)。 \r \r * 已安装 [Apache Maven](https://maven.apache.org/download.cgi)。 Maven 将用于帮助管理依赖项，构建、测试和运行示例 Java 项目\r \r ## <a name=\"set-up-data-environment\"></a>设置数据环境\r \r 你将为每个租户预配一个数据库。 租户各有数据库模型在租户之间提供了最大程度的隔离，且只需少量的 DevOps 成本。 若要优化云资源的成本，还会将租户数据库预配到可用于优化一组数据库性价比的弹性池中。 若要了解其他数据库预配模型，请[参阅此处](sql-database-design-patterns-multi-tenancy-saas-applications.md#multi-tenant-data-models)。 \r \r 按照以下步骤操作，创建将承载所有租户数据库的 SQL 服务器和弹性池。 \r \r 1. 创建变量来存储本教程其余部分中将使用的值。 确保修改 IP 地址变量以包括你的 IP 地址 \r    \r    ```PowerShell \r    # Set an admin login and password for your database\r    $adminlogin = \"ServerAdmin\"\r    $password = \"ChangeYourAdminPassword1\"\r    \r    # Create random unique names for logical server and tenants\r    $servername = \"server-$(Get-Random)\"\r    $tenant1 = \"geolamice\"\r    $tenant2 = \"ranplex\"\r    \r    # Store current client IP address (modify to include your IP address)\r    $startIpAddress = 0.0.0.0 \r    $endIpAddress = 0.0.0.0\r    ```\r    \r 2. 登录到 Azure 并创建 SQL 服务器和弹性池 \r    \r    ```PowerShell\r    # Login to Azure \r    Login-AzureRmAccount -Environment AzureChinaCloud\r    \r    # Create resource group \r    New-AzureRmResourceGroup -Name \"myResourceGroup\" -Location \"China East\"\r    \r    # Create logical SQL Server with firewall rules \r    New-AzureRmSqlServer -ResourceGroupName \"myResourceGroup\" `\r        -ServerName $servername `\r        -Location \"China East\" `\r        -SqlAdministratorCredentials $(New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $adminlogin, $(ConvertTo-SecureString -String $password -AsPlainText -Force))\r    \r    New-AzureRmSqlServerFirewallRule -ResourceGroupName $resourcegroupname `\r        -ServerName $servername `\r        -FirewallRuleName \"singleAddress\" -StartIpAddress $startIpAddress -EndIpAddress $endIpAddress\r    \r    # Create elastic pool \r    New-AzureRmSqlElasticPool -ResourceGroupName \"myResourceGroup\"\r        -ServerName $servername `\r        -ElasticPoolName \"myElasticPool\" `\r        -Edition \"Standard\" `\r        -Dtu 50 `\r        -DatabaseDtuMin 10 `\r        -DatabaseDtuMax 20\r    ```\r    \r ## <a name=\"create-tenant-catalog\"></a>创建租户目录 \r \r 在多租户 SaaS 应用程序中，务必要了解租户信息的存储位置。 这通常存储在目录数据库中。 目录数据库用于保存租户与存储该租户数据的数据库之间的映射。  无论使用多租户数据库还是单租户数据库，均可使用基本模式。\r \r 按照以下步骤操作，创建示例 SaaS 应用程序的目录数据库。\r \r ```PowerShell\r # Create empty database in pool\r New-AzureRmSqlDatabase  -ResourceGroupName \"myResourceGroup\" `\r     -ServerName $servername `\r     -DatabaseName \"tenantCatalog\" `\r     -ElasticPoolName \"myElasticPool\"\r \r # Create table to track mapping between tenants and their databases\r $commandText = \"\r CREATE TABLE Tenants\r (\r    TenantId         INT IDENTITY PRIMARY KEY,\r    TenantName       NVARCHAR(128) NOT NULL,\r    TenantDatabase   NVARCHAR(128) NOT NULL\r );\r \r CREATE INDEX IX_TenantName ON Tenants (TenantName);\"\r \r Invoke-SqlCmd `\r     -Username $adminlogin `\r     -Password $password `\r     -ServerInstance ($servername + \".database.chinacloudapi.cn\") `\r     -Database \"tenantCatalog\" `\r     -ConnectionTimeout 30 `\r     -Query $commandText `\r     -EncryptConnection\r ```\r \r ## <a name=\"provision-database-for-tenant1-and-register-in-tenant-catalog\"></a>预配“tenant1”的数据库并将其注册到租户目录中 \r 通过 Powershell 预配新租户“tenant1”的数据库，并将此租户注册到目录中。 \r \r ```PowerShell\r # Create empty database in pool for 'tenant1'\r New-AzureRmSqlDatabase  -ResourceGroupName \"myResourceGroup\" `\r     -ServerName $servername `\r     -DatabaseName $tenant1 `\r     -ElasticPoolName \"myElasticPool\"\r \r # Create table WhoAmI and insert tenant name into the table \r $commandText = \"\r CREATE TABLE WhoAmI (TenantName NVARCHAR(128) NOT NULL);\r INSERT INTO WhoAmI VALUES ('Tenant $tenant1');\"\r \r Invoke-SqlCmd `\r     -Username $adminlogin `\r     -Password $password `\r     -ServerInstance ($servername + \".database.chinacloudapi.cn\") `\r     -Database $tenant1 `\r     -ConnectionTimeout 30 `\r     -Query $commandText `\r     -EncryptConnection\r \r # Register 'tenant1' in the tenant catalog \r $commandText = \"\r INSERT INTO Tenants VALUES ('$tenant1', '$tenant1');\"\r Invoke-SqlCmd `\r     -Username $adminlogin `\r     -Password $password `\r     -ServerInstance ($servername + \".database.chinacloudapi.cn\") `\r     -Database \"tenantCatalog\" `\r     -ConnectionTimeout 30 `\r     -Query $commandText `\r     -EncryptConnection\r ```\r \r ## <a name=\"provision-database-for-tenant2-and-register-in-tenant-catalog\"></a>预配“tenant2”的数据库并将其注册到租户目录中\r 通过 Powershell 预配新租户“tenant2”的数据库，并将此租户注册到目录中。 \r \r ```PowerShell\r # Create empty database in pool for 'tenant2'\r New-AzureRmSqlDatabase  -ResourceGroupName \"myResourceGroup\" `\r     -ServerName $servername `\r     -DatabaseName $tenant2 `\r     -ElasticPoolName \"myElasticPool\"\r \r # Create table WhoAmI and insert tenant name into the table \r $commandText = \"\r CREATE TABLE WhoAmI (TenantName NVARCHAR(128) NOT NULL);\r INSERT INTO WhoAmI VALUES ('Tenant $tenant2');\"\r \r Invoke-SqlCmd `\r     -Username $adminlogin `\r     -Password $password `\r     -ServerInstance ($servername + \".database.chinacloudapi.cn\") `\r     -Database $tenant2 `\r     -ConnectionTimeout 30 `\r     -Query $commandText `\r     -EncryptConnection\r \r # Register tenant 'tenant2' in the tenant catalog \r $commandText = \"\r INSERT INTO Tenants VALUES ('$tenant2', '$tenant2');\"\r Invoke-SqlCmd `\r     -Username $adminlogin `\r     -Password $password `\r     -ServerInstance ($servername + \".database.chinacloudapi.cn\") `\r     -Database \"tenantCatalog\" `\r     -ConnectionTimeout 30 `\r     -Query $commandText `\r     -EncryptConnection\r ```\r \r ## <a name=\"set-up-sample-java-application\"></a>设置示例 Java 应用程序 \r \r 1. 创建 Maven 项目。 在命令提示符窗口中键入以下内容：\r    \r    ```\r    mvn archetype:generate -DgroupId=com.microsoft.sqlserver -DartifactId=mssql-jdbc -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\r    ```\r    \r 2. 向 pom.xml 文件添加此依赖项、语言级别及支持 JAR 中清单文件的生成选项：\r    \r    ```XML\r    <dependency>\r          <groupId>com.microsoft.sqlserver</groupId>\r          <artifactId>mssql-jdbc</artifactId>\r          <version>6.1.0.jre8</version>\r    </dependency>\r    \r    <properties>\r          <maven.compiler.source>1.8</maven.compiler.source>\r          <maven.compiler.target>1.8</maven.compiler.target>\r    </properties>\r    \r    <build>\r         <plugins>\r            <plugin>\r               <groupId>org.apache.maven.plugins</groupId>\r               <artifactId>maven-jar-plugin</artifactId>\r               <version>3.0.0</version>\r               <configuration>\r                  <archive>\r                     <manifest>\r                        <mainClass>com.sqldbsamples.App</mainClass>\r                     </manifest>\r                  </archive>\r               </configuration>\r            </plugin>\r         </plugins>\r    </build>\r    ```\r \r 3. 将以下内容添加到 App.java 文件：\r \r    ```java \r    package com.sqldbsamples;\r    \r    import java.util.Map;\r    import java.util.HashMap;\r    import java.io.BufferedReader;\r    import java.io.InputStreamReader;\r    import java.sql.Connection;\r    import java.sql.Statement;\r    import java.sql.PreparedStatement;\r    import java.sql.ResultSet;\r    import java.sql.DriverManager;\r    \r    public class App {\r \r         private static final String SERVER_NAME = \"your-server-name\";\r         private static final String CATALOG_DB_NAME = \"tenantCatalog\";\r         private static final String USER = \"ServerAdmin\";\r         private static final String PASSWORD = \"ChangeYourAdminPassword1\";\r         private static final String CATALOG_DB_URL = String.format(\"jdbc:sqlserver://%s.database.chinacloudapi.cn:1433;database=%s;user=%s;password=%s;encrypt=true;hostNameInCertificate=*.database.chinacloudapi.cn;loginTimeout=30;\", SERVER_NAME, CATALOG_DB_NAME, USER, PASSWORD);\r         private static final String CMD_LIST = \"LIST\";\r         private static final String CMD_QUERY = \"QUERY\";\r         private static final String CMD_QUIT = \"QUIT\";\r \r         public static void main(String[] args) {\r \r             System.out.println(\"\\n############################\");\r             System.out.println(\"## SAAS DATABASE TUTORIAL ##\");\r             System.out.println(\"############################\\n\");\r             System.out.println(\"OPTIONS\");\r             System.out.println(\" \" + CMD_LIST + \" - list tenants\");\r             System.out.println(\" \" + CMD_QUERY + \" <NAME> - connect and tenant query tenant <NAME>\");\r             System.out.println(\" \" + CMD_QUIT + \" - quit the application\\n\");\r             try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {\r                 while(true) {\r                     String[] input = br.readLine().split(\"\\\\s\");\r                     if (null != input && input.length > 0) {\r                         if (input[0].equalsIgnoreCase(CMD_LIST)) {\r                             listTenants();\r                         } else if (input[0].toLowerCase().startsWith(CMD_QUERY.toLowerCase()) && input.length == 2) {\r                             queryTenant(input[1].trim());\r                         } else if (input[0].equalsIgnoreCase(CMD_QUIT)) {\r                             break;\r                         } else {\r                             System.out.println(\" -> Command not supported\");\r                         }\r                     }\r                     System.out.println(\"\");\r                 }\r             } catch (Exception e) {\r                 System.out.println(e.getMessage());\r                 e.printStackTrace();\r             }\r         }\r         private static void listTenants() \r         {\r             // List all tenants that currently exist in the system\r             String sql = \"SELECT TenantName FROM Tenants\";\r             try (Connection connection = DriverManager.getConnection(CATALOG_DB_URL);\r             Statement stmt = connection.createStatement();\r             ResultSet resultSet = stmt.executeQuery(sql)) {\r                 while (resultSet.next()) {\r                     System.out.println(\" -> \" + resultSet.getString(1));\r                 }\r             } catch (Exception e) {\r                 System.out.println(e.getMessage());\r                 e.printStackTrace();\r             }\r         }\r    \r         private static void queryTenant(String name) \r         {\r             // Query the data that was previously inserted into the primary database from the geo replicated database\r             String url = null;\r             String sql = \"SELECT TenantDatabase FROM Tenants WHERE TenantName = ?\";\r             try (Connection connection = DriverManager.getConnection(CATALOG_DB_URL);\r             PreparedStatement pstmt = connection.prepareStatement(sql)) {\r                 pstmt.setString(1, name);\r                 try (ResultSet resultSet = pstmt.executeQuery()) {\r                     if (resultSet.next()) {\r                         url = String.format(\"jdbc:sqlserver://%s.database.chinacloudapi.cn:1433;database=%s;user=%s;password=%s;encrypt=true;hostNameInCertificate=*.database.chinacloudapi.cn;loginTimeout=30;\", SERVER_NAME, resultSet.getString(1), USER, PASSWORD);\r                     }\r                 }\r             } catch (Exception e) {\r                 System.out.println(e.getMessage());\r                 e.printStackTrace();\r             } if (null != url) {\r                 String tenantSql = \"SELECT TenantName FROM WhoAmI\";\r                 try (Connection connection = DriverManager.getConnection(url);\r                 Statement stmt = connection.createStatement()\r                 ResultSet resultSet = stmt.executeQuery(tenantSql)) {\r                     while (resultSet.next()) {\r                         System.out.println(\" -> Entry in table WhoAmI in tenant \" + name + \" is: \" + resultSet.getString(1));\r                     }\r                 } catch (Exception e) {\r                     System.out.println(e.getMessage());\r                     e.printStackTrace();\r                 }\r             } else {\r                 System.out.println(\" -> Tenant \" + name + \" not found\");\r             }\r         }\r     }\r    ```\r \r 4. 保存文件。\r \r 5. 转到命令控制台并执行\r \r    ```bash\r    mvn package\r    ```\r \r 6. 完成后，执行以下操作来运行应用程序 \r    \r    ```\r    mvn -q -e exec:java \"-Dexec.mainClass=com.sqldbsamples.App\"\r    ```\r    \r 如果运行成功，输出将如下所示：\r \r ```\r ############################\r \r ## SAAS DATABASE TUTORIAL ##\r \r ############################\r \r OPTIONS\r \r LIST - list tenants\r \r QUERY <NAME> - connect and tenant query tenant <NAME>\r \r QUIT - quit the application\r \r * List the tenants\r \r * Query tenants you created\r ```\r \r ## <a name=\"delete-first-tenant\"></a>删除第一个租户 \r 通过 PowerShell 删除第一个租户的租户数据库和目录条目。\r \r ```PowerShell\r # Remove 'tenant1' from catalog \r $commandText = \"DELETE FROM Tenants WHERE TenantName = '$tenant1';\"\r Invoke-SqlCmd `\r     -Username $adminlogin `\r     -Password $password `\r     -ServerInstance ($servername + \".database.chinacloudapi.cn\") `\r     -Database \"tenantCatalog\" `\r     -ConnectionTimeout 30 `\r     -Query $commandText `\r     -EncryptConnection\r \r # Delete database \r Remove-AzureRmSqlDatabase -ResourceGroupName \"myResourceGroup\" `\r     -ServerName $servername `\r     -DatabaseName $tenant1\r ```\r \r 尝试使用 Java 应用程序连接到“tenant1”。 将收到一个错误，指出该租户不存在。\r \r ## <a name=\"next-steps\"></a>后续步骤 \r \r 本教程已介绍了如何执行以下操作：\r > [!div class=\"checklist\"]\r > * 使用租户各有数据库模式设置数据库环境来支持多租户 SaaS 应用程序\r > * 创建租户目录\r > * 预配租户数据库并将其注册到租户目录中\r > * 设置示例 Java 应用程序 \r > * 访问租户数据库简单的 Java 控制台应用程序\r > * 删除租户\r \r * 有关常见任务的 PowerShell 示例，请参阅 [SQL 数据库 PowerShell 示例](https://docs.microsoft.com/azure/sql-database/sql-database-powershell-samples)\r \r * 有关多租户 SaaS 应用程序的设计模式，请参阅[设计模式](https://docs.microsoft.com/azure/sql-database/sql-database-design-patterns-multi-tenancy-saas-applications)\r \r * 有关常见 Azure 任务的 Java 示例，请参阅 [Java 开发人员中心](/develop/java/)\r \r <!--Update_Description: wording update-->"}