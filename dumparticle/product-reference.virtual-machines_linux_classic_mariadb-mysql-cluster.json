{"Title":"MariaDB \\(MySQL\\) 群集：Azure 教程","Description":"在 Azure 虚拟机上创建 MariaDB + Galera MySQL 群集","Content":"\r # MariaDB \\(MySQL\\) 群集：Azure 教程\r > [!IMPORTANT]\r > Azure 有两种用于创建和处理资源的不同部署模型：[Azure Resource Manager 部署模型](../../../azure-resource-manager/resource-manager-deployment-model.md)和经典部署模型。本文介绍经典部署模型。Azure 建议大多数新部署使用 Azure Resource Manager 模型。\r \r 本文介绍如何创建 [MariaDB](https://mariadb.org/en/about/) 的多主机 [Galera](http://galeracluster.com/products/) 群集（MySQL 的嵌入式替代版本，稳健、可缩放且可靠），适用于 Azure 虚拟机中的高可用性环境。\r \r ## 体系结构概述\r 本文介绍如何完成以下步骤：\r \r - 创建一个三节点群集。\r - 将数据磁盘与 OS 磁盘隔离开来。\r - 在 RAID-0/条带化设置下创建数据磁盘，以提高 IOPS。\r - 使用 Azure 负载均衡器均衡三个节点的负载。\r - 为了最大程度地减少重复工作，可创建一个包含 MariaDB + Galera 的 VM 映像，并将其用于创建其他群集 VM。\r \r ![系统体系结构](./media/mariadb-mysql-cluster/Setup.png)  \r \r > [!NOTE]\r > 本主题使用 [Azure CLI](../../../xplat-cli-install.md) 工具，请确保按照说明进行下载并连接到你的 Azure 订阅。如需 Azure CLI 中可用命令的参考，可查看 [Azure CLI 命令参考](../../../virtual-machines-command-line-tools.md)。另外还需[创建用于身份验证的 SSH 密钥]，并记下 .pem 文件的位置。\r >\r >\r \r ## 创建模板\r ### 基础结构\r 1. 创建地缘组，将资源保存在一起。\r \r     ```\r     azure account affinity-group create mariadbcluster --location \"China North\" --label \"MariaDB Cluster\"\r     ```\r 2. 创建虚拟网络。\r \r     ```\r     azure network vnet create --address-space 10.0.0.0 --cidr 8 --subnet-name mariadb --subnet-start-ip 10.0.0.0 --subnet-cidr 24 --affinity-group mariadbcluster mariadbvnet\r     ```\r 3. 创建存储帐户，托管所有磁盘。不得将超过 40 个常用磁盘放置在同一存储帐户上，以免达到存储帐户的 20,000 IOPS 上限。在本例中，你将远低于该上限，所以为了简单起见，可以将所有磁盘存储在同一帐户上。\r \r     ```\r     azure storage account create mariadbstorage --label mariadbstorage --affinity-group mariadbcluster\r     ```\r 4. 查找 CentOS 7 虚拟机映像的名称。\r \r     ```\r     azure vm image list | findstr CentOS\r     ```\r     输出类似于 `f1179221e23b4dbb89e39d70e5bc9e72__OpenLogic-CentOS-70-20160329`。\r \r     在以下步骤中使用该名称。\r 5. 创建 VM 模板，将 /path/to/key.pem 替换为生成的 .pem SSH 密钥的存储路径。\r \r     ```\r     azure vm create --virtual-network-name mariadbvnet --subnet-names mariadb --blob-url \"http://mariadbstorage.blob.core.chinacloudapi.cn/vhds/mariadbhatemplate-os.vhd\"  --vm-size Medium --ssh 22 --ssh-cert \"/path/to/key.pem\" --no-ssh-password mariadbtemplate f1179221e23b4dbb89e39d70e5bc9e72__OpenLogic-CentOS-70-20160329 azureuser\r     ```\r 6. 将 4 个 500 GB 的数据磁盘附加到 VM，以便在 RAID 配置中使用。\r \r     ```\r     FOR /L %d IN (1,1,4) DO azure vm disk attach-new mariadbhatemplate 512 http://mariadbstorage.blob.core.chinacloudapi.cn/vhds/mariadbhatemplate-data-%d.vhd\r     ```\r 7. 使用 SSH 登录到在 mariadbhatemplate.chinacloudapp.cn:22 创建的模板 VM，并使用私钥进行连接。\r \r ### 软件\r 1. 获取根。\r \r     ```\r     sudo su\r     ```\r \r 2. 安装 RAID 支持：\r \r     a.安装 mdadm。\r \r     ```\r           yum install mdadm\r     ```\r \r     b.创建具有 EXT4 文件系统的 RAID0/条带化配置。\r \r     ```\r           mdadm --create --verbose /dev/md0 --level=stripe --raid-devices=4 /dev/sdc /dev/sdd /dev/sde /dev/sdf\r           mdadm --detail --scan >> /etc/mdadm.conf\r           mkfs -t ext4 /dev/md0\r     ```\r     c.创建装入点目录。\r \r               mkdir /mnt/data\r     d.检索新创建的 RAID 设备的 UUID。\r \r               blkid | grep /dev/md0\r     e.编辑 /etc/fstab。\r \r               vi /etc/fstab\r     f.添加设备，以便在重新启动时自动装载，并将 UUID 替换为从之前的 **blkid** 命令中获取的值。\r \r               UUID=<UUID FROM PREVIOUS>   /mnt/data ext4   defaults,noatime   1 2\r     g.装载新分区。\r \r               mount /mnt/data\r \r 3. 安装 MariaDB。\r \r     a.创建 MariaDB.repo 文件。\r \r     ```\r             vi /etc/yum.repos.d/MariaDB.repo\r     ```\r \r     b.使用以下内容填充 repo 文件：\r \r     ```\r           [mariadb]\r           name = MariaDB\r           baseurl = http://yum.mariadb.org/10.0/centos7-amd64\r           gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\r           gpgcheck=1\r     ```\r     c.为了避免冲突，请删除现有后缀和 mariadb-libs。\r \r           yum remove postfix mariadb-libs-*\r     d.安装包含 Galera 的 MariaDB。\r \r           yum install MariaDB-Galera-server MariaDB-client galera\r \r 4. 将 MySQL 数据目录移动到 RAID 块设备。\r \r     a.将当前 MySQL 目录复制到新位置，然后删除旧目录。\r \r     ```\r       cp -avr /var/lib/mysql /mnt/data  \r       rm -rf /var/lib/mysql\r     ```\r     b.相应地设置新目录的权限。\r \r            chown -R mysql:mysql /mnt/data && chmod -R 755 /mnt/data/\r \r     c.创建一个符号链接，将旧目录指向 RAID 分区中的新位置。\r \r     ```\r        ln -s /mnt/data/mysql /var/lib/mysql\r     ```\r \r 5. [SELinux 干扰群集操作](http://galeracluster.com/documentation-webpages/configuration.html#selinux)，所以在当前会话中有必要将其禁用。编辑 `/etc/selinux/config`，禁止其随后重新启动。\r \r     ```\r     setenforce 0\r     ```\r \r     然后编辑 `/etc/selinux/config` 以设置 `SELINUX=permissive`\r 6. 验证 MySQL 是否运行。\r \r     a.启动 MySQL。\r \r     ```\r        service mysql start\r     ```\r     b.保护 MySQL 安装、设置根密码、删除匿名用户以禁用远程根登录，以及删除测试数据库。\r \r            mysql_secure_installation\r     c.在数据库上创建一个用户，以便在群集操作中使用，也可以选择在应用程序中使用。\r \r            mysql -u root -p\r            GRANT ALL PRIVILEGES ON *.* TO 'cluster'@'%' IDENTIFIED BY 'p@ssw0rd' WITH GRANT OPTION; FLUSH PRIVILEGES;\r            exit\r \r     d.停止 MySQL。\r \r     ```\r         service mysql stop\r     ```\r 7. 创建配置占位符。\r \r     a.编辑 MySQL 配置，以便为群集设置创建一个占位符。现在不要替换 **`<Variables>`** 或取消注释。通过此模板创建 VM 后，才需执行该操作。\r \r     ```\r        vi /etc/my.cnf.d/server.cnf\r     ```\r     b.编辑 **[galera]** 部分，将其清空。\r \r     c.编辑 **\\[mariadb\\]** 部分。\r \r     ```\r        wsrep_provider=/usr/lib64/galera/libgalera_smm.so\r        binlog_format=ROW\r        wsrep_sst_method=rsync\r        bind-address=0.0.0.0 # When set to 0.0.0.0, the server listens to remote connections\r        default_storage_engine=InnoDB\r        innodb_autoinc_lock_mode=2\r \r        wsrep_sst_auth=cluster:p@ssw0rd # CHANGE: Username and password you created for the SST cluster MySQL user\r        #wsrep_cluster_name='mariadbcluster' # CHANGE: Uncomment and set your desired cluster name\r        #wsrep_cluster_address=\"gcomm://mariadb1,mariadb2,mariadb3\" # CHANGE: Uncomment and Add all your servers\r        #wsrep_node_address='<ServerIP>' # CHANGE: Uncomment and set IP address of this server\r        #wsrep_node_name='<NodeName>' # CHANGE: Uncomment and set the node name of this server\r     ```\r 8. 在 CentOS 7 上使用 FirewallD 打开防火墙上的所需端口。\r \r     * MySQL：`firewall-cmd --zone=public --add-port=3306/tcp --permanent`\r     * GALERA：`firewall-cmd --zone=public --add-port=4567/tcp --permanent`\r     * GALERA IST：`firewall-cmd --zone=public --add-port=4568/tcp --permanent`\r     * RSYNC：`firewall-cmd --zone=public --add-port=4444/tcp --permanent`\r     * 重新加载防火墙：`firewall-cmd --reload`\r \r 9. 优化系统性能。有关详细信息，请参阅[性能调优策略](optimize-mysql.md)。\r \r     a.再次编辑 MySQL 配置文件。\r \r     ```\r        vi /etc/my.cnf.d/server.cnf\r     ```\r     b.编辑 **\\[mariadb\\]** 部分，追加以下内容：\r \r     > [!NOTE]\r     > 建议将 innodb\\_buffer\\_pool\\_size 设置为 VM 的 70% 内存。在此示例中，已针对 RAM 为 3.5 GB 的中型 Azure VM 将其设置为 2.45 GB。\r     >\r     >\r \r     ```\r        innodb_buffer_pool_size = 2508M # The buffer pool contains buffered data and the index. This is usually set to 70 percent of physical memory.\r        innodb_log_file_size = 512M #  Redo logs ensure that write operations are fast, reliable, and recoverable after a crash\r        max_connections = 5000 # A larger value will give the server more time to recycle idled connections\r        innodb_file_per_table = 1 # Speed up the table space transmission and optimize the debris management performance\r        innodb_log_buffer_size = 128M # The log buffer allows transactions to run without having to flush the log to disk before the transactions commit\r        innodb_flush_log_at_trx_commit = 2 # The setting of 2 enables the most data integrity and is suitable for Master in MySQL cluster\r        query_cache_size = 0\r     ```\r 10. 停止 MySQL 并禁止 MySQL 服务在启动时运行，以免在添加节点时导致群集混乱，然后取消预配计算机。\r \r     ```\r     service mysql stop\r     chkconfig mysql off\r     waagent -deprovision\r     ```\r 11. 通过门户捕获 VM。（目前，[Azure CLI 工具中的问题 1268](https://github.com/Azure/azure-xplat-cli/issues/1268) 描述的事实是，Azure CLI 工具所捕获的映像并没有捕获所附加的数据磁盘。）\r \r     a.通过门户关闭计算机。\r \r     b.单击“捕获”，将映像名称指定为“mariadb-galera-image”。提供说明，并选中“我已运行 waagent”。\r \r       ![捕获虚拟机](./media/mariadb-mysql-cluster/Capture2.PNG)  \r \r ## 创建群集\r 使用创建的模板创建 3 个 VM，然后配置并启动群集。\r \r 1. 从所创建的 mariadb-galera-image 映像创建第一个 CentOS 7 VM，提供以下信息：\r \r     - 虚拟网络名称：mariadbvnet\r     - 子网：mariadb\r     - 虚拟机大小：中等\r     - 云服务名称：mariadbha（或者可以通过 mariadbha.chinacloudapp.cn 访问的任何名称）\r     - 虚拟机名称：mariadb1\r     - 用户名：azureuser\r     - SSH 访问权限：启用\r     - 传递 SSH 证书 .pem 文件，将 /path/to/key.pem 替换为生成的 .pem SSH 密钥的存储路径。\r \r     > [!NOTE]\r     > 为清楚起见，以下命令拆开显示在多行内，但每个都应作为一整行进行输入。\r     >\r     >\r     ```\r     azure vm create\r     --virtual-network-name mariadbvnet\r     --subnet-names mariadb\r     --availability-set clusteravset\r     --vm-size Medium\r     --ssh-cert \"/path/to/key.pem\"\r     --no-ssh-password\r     --ssh 22\r     --vm-name mariadb1\r     mariadbha mariadb-galera-image azureuser\r     ```\r 2. 再创建两个虚拟机，将其连接到 mariadbha 云服务。更改 VM 名称，并将 SSH 端口更改为不与同一云服务中的其他 VM 冲突的唯一端口。\r \r     ```\r     azure vm create\r     --virtual-network-name mariadbvnet\r     --subnet-names mariadb\r     --availability-set clusteravset\r     --vm-size Medium\r     --ssh-cert \"/path/to/key.pem\"\r     --no-ssh-password\r     --ssh 23\r     --vm-name mariadb2\r     --connect mariadbha mariadb-galera-image azureuser\r     ```\r     对于 MariaDB3：\r \r     ```\r     azure vm create\r     --virtual-network-name mariadbvnet\r     --subnet-names mariadb\r     --availability-set clusteravset\r     --vm-size Medium\r     --ssh-cert \"/path/to/key.pem\"\r     --no-ssh-password\r     --ssh 24\r     --vm-name mariadb3\r     --connect mariadbha mariadb-galera-image azureuser\r     ```\r 3. 需要获取三个 VM 各自的内部 IP 地址，才能执行下一步：\r \r     ![获取 IP 地址](./media/mariadb-mysql-cluster/IP.png)  \r \r 4. 使用 SSH 登录到三个 VM，编辑每个 VM 上的配置文件。\r \r     ```\r     sudo vi /etc/my.cnf.d/server.cnf\r     ```\r \r     取消 **`wsrep_cluster_name`** 和 **`wsrep_cluster_address`** 的注释，方法是删除所在行开头的 **\\#**。此外，将 **`wsrep_node_address`** 中的 **`<ServerIP>`** 和 **`wsrep_node_name`** 中的 **`<NodeName>`** 分别替换为 VM 的 IP 地址和名称，然后同样取消这些行的注释。\r 5. 启动 MariaDB1 上的群集，并允许其在启动时运行。\r \r     ```\r     sudo service mysql bootstrap\r     chkconfig mysql on\r     ```\r 6. 在 MariaDB2 和 MariaDB3 上启动 MySQL，并允许其在启动时运行。\r \r     ```\r     sudo service mysql start\r     chkconfig mysql on\r     ```\r \r ## 对群集进行负载均衡\r 在创建群集 VM 时，已将其添加到了名为 clusteravset 的可用性集中，确保其放置在不同的容错和更新域上，且 Azure 不会同时在所有虚拟机上执行维护。此配置符合该 Azure 服务级别协议 \\(SLA\\) 将支持的要求。\r \r 现在，使用 Azure 负载均衡器均衡三个节点之间的请求。\r \r 通过 Azure CLI 在计算机上运行以下命令。\r \r 命令参数结构是：`azure vm endpoint create-multiple <MachineName> <PublicPort>:<VMPort>:<Protocol>:<EnableDirectServerReturn>:<Load Balanced Set Name>:<ProbeProtocol>:<ProbePort>`\r \r ```\r azure vm endpoint create-multiple mariadb1 3306:3306:tcp:false:MySQL:tcp:3306\r azure vm endpoint create-multiple mariadb2 3306:3306:tcp:false:MySQL:tcp:3306\r azure vm endpoint create-multiple mariadb3 3306:3306:tcp:false:MySQL:tcp:3306\r ```\r \r CLI 将负载均衡器探测时间间隔设置为 15 秒，这可能有点太长。不管什么 VM，均可在门户的“终结点”下对其进行更改。\r \r ![编辑终结点](./media/mariadb-mysql-cluster/Endpoint.PNG)  \r \r 选择“重新配置负载均衡集”。\r \r ![重新配置负载均衡集](./media/mariadb-mysql-cluster/Endpoint2.PNG)  \r \r 将“探测时间间隔”更改为 5 秒，并保存所做的更改。\r \r ![更改探测时间间隔](./media/mariadb-mysql-cluster/Endpoint3.PNG)  \r \r ## 验证群集\r 繁琐的工作已经完成。现在应该可以在 `mariadbha.chinacloudapp.cn:3306` 访问群集，这将触发负载均衡器并在三个 VM 之间顺利、高效地路由请求。\r \r 使用偏好的 MySQL 客户端进行连接，或从其中一个 VM 进行连接，验证此群集是否正常运行。\r \r ```\r  mysql -u cluster -h mariadbha.chinacloudapp.cn -p\r ```\r \r 然后，创建数据库并在其中填充一些数据。\r \r ```\r CREATE DATABASE TestDB;\r USE TestDB;\r CREATE TABLE TestTable (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, value VARCHAR(255));\r INSERT INTO TestTable (value)  VALUES ('Value1');\r INSERT INTO TestTable (value)  VALUES ('Value2');\r SELECT * FROM TestTable;\r ```\r \r 所创建的数据库将返回下表：\r \r ```\r +----+--------+\r | id | value  |\r +----+--------+\r |  1 | Value1 |\r |  4 | Value2 |\r +----+--------+\r 2 rows in set (0.00 sec)\r ```\r \r <!--Every topic should have next steps and links to the next logical set of content to keep the customer engaged-->\r \r ## 后续步骤\r 在本文中，你在运行 CentOS 7 的 Azure 虚拟机上创建了三节点型 MariaDB + Galera 高可用性群集。VM 通过 Azure 负载均衡器实现负载均衡。\r \r 你可能希望了解[在 Linux 上对 MySQL 进行集群的其他方式](mysql-cluster.md)并探究如何[优化和测试 Azure Linux VM 上的 MySQL 性能](optimize-mysql.md)。\r \r <!--Anchors-->\r \r [Architecture overview]: #architecture-overview\r [Creating the template]: #creating-the-template\r [Creating the cluster]: #creating-the-cluster\r [Load balancing the cluster]: #load-balancing-the-cluster\r [Validating the cluster]: #validating-the-cluster\r [Next steps]: #next-steps\r \r <!--Image references-->\r \r <!--Link references-->\r \r [Galera]: http://galeracluster.com/products/\r [MariaDBs]: https://mariadb.org/en/about/\r [创建用于身份验证的 SSH 密钥]: http://www.jeff.wilcox.name/2013/06/secure-linux-vms-with-ssh-certificates/\r [issue #1268 in the Azure CLI]: https://github.com/Azure/azure-xplat-cli/issues/1268\r \r <!---HONumber=Mooncake_0213_2017-->\r <!--Update_Description: wording update-->"}