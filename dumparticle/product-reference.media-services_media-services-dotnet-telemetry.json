{"Title":"使用 .NET 配置 Azure 媒体服务遥测","Description":"本文说明如何通过 .NET SDK 使用 Azure 媒体服务遥测。","Content":"# <a name=\"configuring-azure-media-services-telemetry-with-net\"></a>使用 .NET 配置 Azure 媒体服务遥测\r \r 本主题介绍了使用 .NET SDK 配置 Azure 媒体服务 (AMS) 遥测时可采取的常规步骤。 \r \r >[!NOTE]\r >有关 AMS 遥测定义和使用方法的详细介绍，请参阅[概述](media-services-telemetry-overview.md)主题。\r \r 可通过以下方式之一使用遥测数据：\r \r - 直接从 Azure 表存储中读取数据（例如使用存储 SDK）。 有关遥测存储表的说明，请参阅 **此主题** 中的 [使用遥测信息](https://msdn.microsoft.com/library/mt742089.aspx) 。\r \r 或\r \r - 使用媒体服务 .NET SDK 中支持的内容来读取存储数据。 本主题说明如何为指定的 AMS 帐户启用遥测，以及如何使用 Azure 媒体服务 .NET SDK 查询度量值。  \r \r ## <a name=\"configuring-telemetry-for-a-media-services-account\"></a>为媒体服务帐户配置遥测\r \r 启用遥测需要执行以下步骤：\r \r - 获取已附加到媒体服务帐户的存储帐户的凭据。 \r - 创建一个通知终结点，将其 EndPointType 设置为 AzureTable，并使 endPontAddress 指向存储表。\r \r     ```\r     INotificationEndPoint notificationEndPoint = \r                   _context.NotificationEndPoints.Create(\"monitoring\", \r                   NotificationEndPointType.AzureTable,\r                   \"https://\" + _mediaServicesStorageAccountName + \".table.core.chinacloudapi.cn/\");\r     ```\r \r - 为要监视的服务创建监视配置设置。 最多允许一个监视配置设置。 \r \r     ```\r     IMonitoringConfiguration monitoringConfiguration = _context.MonitoringConfigurations.Create(notificationEndPoint.Id,\r         new List<ComponentMonitoringSetting>()\r         {\r             new ComponentMonitoringSetting(MonitoringComponent.Channel, MonitoringLevel.Normal),\r             new ComponentMonitoringSetting(MonitoringComponent.StreamingEndpoint, MonitoringLevel.Normal)\r         });\r     ```\r \r ## <a name=\"consuming-telemetry-information\"></a>此主题\r \r 有关使用遥测信息的信息，请参阅 [此主题](media-services-telemetry-overview.md)。\r \r ## <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r \r 1. 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r \r 2. 将以下元素添加到 app.config 文件中定义的 **appSettings**：\r \r     <add key=\"StorageAccountName\" value=\"storage_name\" />\r  \r ## <a name=\"example\"></a>示例  \r     \r 以下示例说明如何为指定的 AMS 帐户启用遥测，以及如何使用 Azure 媒体服务 .NET SDK 查询度量值。  \r \r     using System;\r     using System.Collections.Generic;\r     using System.Configuration;\r     using System.Linq;\r     using Microsoft.WindowsAzure.MediaServices.Client;\r \r     namespace AMSMetrics\r     {\r         class Program\r         {\r         private static readonly string _AADTenantDomain =\r             ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r         private static readonly string _RESTAPIEndpoint =\r             ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r         private static readonly string _mediaServicesStorageAccountName =\r             ConfigurationManager.AppSettings[\"StorageAccountName\"];\r \r         // Field for service context.\r         private static CloudMediaContext _context = null;\r \r         private static IStreamingEndpoint _streamingEndpoint = null;\r         private static IChannel _channel = null;\r \r         static void Main(string[] args)\r         {\r             var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r             var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r             _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r             _streamingEndpoint = _context.StreamingEndpoints.FirstOrDefault();\r             _channel = _context.Channels.FirstOrDefault();\r \r             var monitoringConfigurations = _context.MonitoringConfigurations;\r             IMonitoringConfiguration monitoringConfiguration = null;\r \r             // No more than one monitoring configuration settings is allowed.\r             if (monitoringConfigurations.ToArray().Length != 0)\r             {\r             monitoringConfiguration = _context.MonitoringConfigurations.FirstOrDefault();\r             }\r             else\r             {\r             INotificationEndPoint notificationEndPoint =\r                       _context.NotificationEndPoints.Create(\"monitoring\",\r                       NotificationEndPointType.AzureTable, GetTableEndPoint());\r \r             monitoringConfiguration = _context.MonitoringConfigurations.Create(notificationEndPoint.Id,\r                 new List<ComponentMonitoringSetting>()\r                 {\r                     new ComponentMonitoringSetting(MonitoringComponent.Channel, MonitoringLevel.Normal),\r                     new ComponentMonitoringSetting(MonitoringComponent.StreamingEndpoint, MonitoringLevel.Normal)\r \r                 });\r             }\r \r             //Print metrics for a Streaming Endpoint.\r             PrintStreamingEndpointMetrics();\r \r             Console.ReadLine();\r         }\r \r         private static string GetTableEndPoint()\r         {\r             return \"https://\" + _mediaServicesStorageAccountName + \".table.core.chinacloudapi.cn/\";\r         }\r \r         private static void PrintStreamingEndpointMetrics()\r         {\r             Console.WriteLine(string.Format(\"Telemetry for streaming endpoint '{0}'\", _streamingEndpoint.Name));\r \r             DateTime timerangeEnd = DateTime.UtcNow;\r             DateTime timerangeStart = DateTime.UtcNow.AddHours(-5);\r \r             // Get some streaming endpoint metrics.\r             var telemetry = _streamingEndpoint.GetTelemetry();\r \r             var res = telemetry.GetStreamingEndpointRequestLogs(timerangeStart, timerangeEnd);\r \r             Console.Title = \"Streaming endpoint metrics:\";\r \r             foreach (var log in res)\r             {\r             Console.WriteLine(\"AccountId: {0}\", log.AccountId);\r             Console.WriteLine(\"BytesSent: {0}\", log.BytesSent);\r             Console.WriteLine(\"EndToEndLatency: {0}\", log.EndToEndLatency);\r             Console.WriteLine(\"HostName: {0}\", log.HostName);\r             Console.WriteLine(\"ObservedTime: {0}\", log.ObservedTime);\r             Console.WriteLine(\"PartitionKey: {0}\", log.PartitionKey);\r             Console.WriteLine(\"RequestCount: {0}\", log.RequestCount);\r             Console.WriteLine(\"ResultCode: {0}\", log.ResultCode);\r             Console.WriteLine(\"RowKey: {0}\", log.RowKey);\r             Console.WriteLine(\"ServerLatency: {0}\", log.ServerLatency);\r             Console.WriteLine(\"StatusCode: {0}\", log.StatusCode);\r             Console.WriteLine(\"StreamingEndpointId: {0}\", log.StreamingEndpointId);\r             Console.WriteLine();\r             }\r \r             Console.WriteLine();\r         }\r \r         private static void PrintChannelMetrics()\r         {\r             if (_channel == null)\r             {\r             Console.WriteLine(\"There are no channels in this AMS account\");\r             return;\r             }\r \r             Console.WriteLine(string.Format(\"Telemetry for channel '{0}'\", _channel.Name));\r \r             DateTime timerangeEnd = DateTime.UtcNow; \r             DateTime timerangeStart = DateTime.UtcNow.AddHours(-5);\r \r             // Get some channel metrics.\r             var telemetry = _channel.GetTelemetry();\r \r             var channelMetrics = telemetry.GetChannelHeartbeats(timerangeStart, timerangeEnd);\r \r             // Print the channel metrics.\r             Console.WriteLine(\"Channel metrics:\");\r \r             foreach (var channelHeartbeat in channelMetrics.OrderBy(x => x.ObservedTime))\r             {\r             Console.WriteLine(\r                 \"    Observed time: {0}, Last timestamp: {1}, Incoming bitrate: {2}\",\r                 channelHeartbeat.ObservedTime,\r                 channelHeartbeat.LastTimestamp,\r                 channelHeartbeat.IncomingBitrate);\r             }\r \r             Console.WriteLine();\r         }\r         }\r     }\r \r \r <!--Update_Description: update code to use AAD token instead of ACS-->"}