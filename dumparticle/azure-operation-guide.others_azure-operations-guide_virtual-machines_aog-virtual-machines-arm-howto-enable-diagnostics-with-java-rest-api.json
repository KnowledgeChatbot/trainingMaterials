{"Title":"Java 如何启用 ARM 虚拟机诊断","Description":"Java 如何启用 ARM 虚拟机诊断","Content":"\r # Java 如何启用 ARM 虚拟机诊断\r \r ## 现象描述\r \r 如何通过 Java 语言实现在创建 ARM 虚拟机时开启诊断，并配置相关指标。\r \r ![portal](media/aog-virtual-machines-arm-howto-enable-diagnostics-with-java-rest-api/portal.png)\r \r ## 实现思路\r \r 调研最高版本的 JAVA SDK（1.1.0）源码发现，SDK 层面并未提供任启动诊断和配置诊断的相关接口。然而官方提供了相关的 REST 接口，参考：[如何增加及更新虚拟机扩展](https://docs.microsoft.com/zh-cn/rest/api/compute/extensions/extensions-add-or-update)。\r \r 这个接口为我们提供了向现有的 ARM 虚拟机添加或更新虚拟机扩展（vm extension）的功能，而我们在 Portal 上配置的“**诊断功能**”其实是一个名为 “**IaaSDiagnostics**” 的一个扩展。结合上述的 REST 接口，该 REST 请求示例如下：\r \r ```\r https://management.chinacloudapi.cn/subscriptions/<subId>/resourceGroups/<groupName>/providers/Microsoft.Compute/virtualMachines/<vmName>/extensions/IaaSDiagnostics?api-version=2016-03-30\r ````\r \r 这是一个 Put 请求，请求的参数主要包括 Header 和 Request Body 两部分，官方连接中提供的解释略有不足，以下是我们关于相关参数的说明：\r \r - Header：主要包括 Authorization、Content-Type 及 Host 的设置:\r \r     1. Authorization：提供认证的凭据，如何获取这个值请参考下面认证凭据描述。\r     2. Content-Type：指定为 application/json，以 JSON 数据返回响应。\r     3. Host：指定为“management.chinacloudapi.cn”，终结点地址。\r \r - Request Body：关于扩展的配置信息，可以参考 [Azure Windows VM 扩展配置示例](https://docs.azure.cn/zh-cn/virtual-machines/windows/extensions-configuration-samples)或以下模板:\r \r     ```\r     {\t\r         'type':'Microsoft.Compute/virtualMachines/extensions',\r         'id':'/subscriptions/<subId>/resourceGroups/<groupName>/providers/Microsoft.Compute/virtualMachines/<vmName>/extensions/IaaSDiagnostics',\r         'location':'<location>',\r         'name':'IaaSDiagnostics',\r         'properties':{\r             'type':'IaaSDiagnostics',\r             'publisher':'Microsoft.Azure.Diagnostics',\r             'typeHandlerVersion':'1.5',\r         'settings':{\r             'StorageAccount':'<storageAccountName>',\r             'xmlCfg':'<诊断 XML 配置的 Base64 编码值>'\r         },\r         'protectedSettings':{\r             'storageAccountName':'<storageAccountName>',\r             'storageAccountKey':'<storageAccountKey>',\r             'storageAccountEndPoint':'https://core.chinacloudapi.cn'},\r         'autoUpgradeMinorVersion':true,\r         'instanceView':null\r         }\r     }\r     ```\r \r     1. subId：虚拟机所属的订阅 ID\r     2. groupName:虚拟机所属的资源组名称\r     3. vmName：虚拟机名称\r     4. location：虚拟机地理位置(“China North” 或 “China East”)\r     5. storageAccountName：虚拟诊断数据存储账号名称\r     6. storageAccountKey：虚拟诊断数据存储账号秘钥\r     7. 诊断 XML 配置的 Base64 编码值：这个值是指是将诊断指标配置做 Base64 编码计算得到的值。关于诊断指标配置参考[诊断 1.2 配置架构](https://docs.microsoft.com/zh-cn/azure/monitoring-and-diagnostics/azure-diagnostics-schema-1dot2)、[诊断 1.3 及更高版本的配置架构](https://docs.microsoft.com/zh-cn/azure/monitoring-and-diagnostics/azure-diagnostics-schema-1dot3-and-later)。同时，我们在 GitHub 中提供了相关测试用例：[WadCfg](https://github.com/wacn/AOG-CodeSample/blob/master/VirtualMachines/Java/azure-vmop-demo-master/src/main/java/geo/azure/test/WadCfg.xml) \r \r 接下来我们可以通过 Java 来模拟提交该请求，实现为虚拟机开启诊断功能。\r \r ## 认证凭据\r \r Authorization Header 的值是基于 AAD 方式验证返回的 Token 字符串，详细参考以下步骤：\r \r 1.\t通过 PowerShell 获取认证凭据：\r \r     ```PowerShell\r     # 1.在 PowerShell 中，登录 Azure 账户\r     Login-AzureRmAccount -EnvironmentName AzureChinaCloud\r \r     # 2.选择当前订阅 ID\r     Set-AzureRmContext -SubscriptionId \"订阅 ID\"\r \r     # 3.创建 AD Application\r     $azureAdApplication = New-AzureRmADApplication -DisplayName \"georgeapp\" -HomePage \"https://www.georgeapp.org\" -IdentifierUris \"https://www.georgeapp.org/example\" -Password \"1QAZxsw2\"\r     $azureAdApplication\r \r     # 4.为你的 AD 应用创建服务凭证\r     New-AzureRmADServicePrincipal -ApplicationId $azureAdApplication.ApplicationId\r \r     # 5.为服务凭证授权。如果想了解更多内容，请参考：https://azure.microsoft.com/en-us/documentation/articles/role-based-access-control-what-is/\r     New-AzureRmRoleAssignment -RoleDefinitionName Contributor -ServicePrincipalName $azureAdApplication.ApplicationId \r     ```\r \r     执行上述操作后，就可以获取可用的认证凭据信息：\r \r     - tentantId：第二步执行完成后返回\r     - subId：第二步指定的订阅 ID \r     - clientId：第三步执行完成后返回\r     - clientSecret：第三步中设置的 Password\r \r 2.\t获取 Token :\r \r     ```Java\r     private String getAccessToken() {\r \r             AuthenticationContext context = null;\r             AuthenticationResult result = null;\r             ExecutorService service = null;\r             service = Executors.newFixedThreadPool(1);\r \r             try {\r                 context = new AuthenticationContext(\r     String.format(\"%s/%s\", \r     \"https://login.chinacloudapi.cn\", tentantId),\r                     true, \r     service);\r                 ClientCredential cred = new ClientCredential(\r     clientId, \r     clientSecret);\r     Future<AuthenticationResult> future =   \r     context.acquireToken(\r     \"https://management.chinacloudapi.cn/\", cred,\r                         null);\r \r                 result = future.get();\r \r             } catch (MalformedURLException e) {\r                 e.printStackTrace();\r             } catch (InterruptedException e) {\r                 e.printStackTrace();\r             } catch (ExecutionException e) {\r                 e.printStackTrace();\r             } finally {\r                 service.shutdown();\r             }\r \r             return result.getAccessToken();\r     }\r     ```\r \r 3.\tAuthorization: Bearer <Token>，以下是一个实际的示例:\r \r     BearereyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Im0yZmFQUUZkQzFEVGRmWU1pb09kaHdSblFUMCIsImtpZCI6Im0yZmFQUUZkQzFEVGRmWU1pb09kaHdSblFUMCJ9.eyJhdWQiOiJodHRwczovL21hbmFnZW1lbnQuY29yZS5jaGluYWNsb3VkYXBpLmNuLyIsImlzcyI6Imh0dHBzOi8vc3RzLmNoaW5hY2xvdWRhcGkuY24vYjM4OGI4MDgtMGVjOS00YTA5LWE0MTQtYTdjYmJkOGI3ZTliLyIsImlhdC26MTQ5ODcyMzc1OSwibmJmIjoxNDk4NzIzNzU5LCJleHAiOjE0OTg3Mjc2NTksImFjciI6IjEiLCJhaW8iOiJZMkJnWU5pN2ZUS2Q0WDFxaHFOeGkvUDNsWTJUUXU5ZG1McmR5OEpucnJuTkhMV0RnYzhCIiwiYW1yIjpbInB3ZCJdLCJhcHBpZCI6ImM0NGI0MDgzLTNiYjAtNDljMS1iNDdkLTk3NGU1M2NiZGYzYyIsImFwcGlkYWNyIjoiMiIsImVfZXhwIjoyNjI4MDAsImZhbWlseV9uYW1lIjoiVGVzdDAzIiwiZ2l2ZW5fbmFtZSI6IkNJRSIsImlwYWRkciI6IjEwNi4xMjAuNzguMTkwIiwibmFtZSI6IkNJRSBUZXN0MDMiLCJvaWQiOiI3Njg2OTZiYi1hYjVlLTQ0YzYtOGUxYi03MTIyYjYxYjVlODEiLCJwbGF0ZiI6IjMiLCJwdWlkIjoiMjAwMzNGRkY3MDAxQjlEMCIsInNjcCI6InVzZXJfaW1wZXJzb25hdGlvbiIsInN1YiI6ImZZVkRjRHRKTzlqcTY0VUllU0todnc3LVh3U1JqOGw5cjJvZ3pSRVkwUlkiLCJ0aWQiOiJiMzg4YjgwOC0wZWM5LTRhMDktYTQxNC1hN2NiYmQ4YjdlOWIiLCJ1bmlxdWVfbmFtZSI6IkNJRVRlc3QwM0BNaWNyb3NvZnRJbnRlcm5hbC5wYXJ0bmVyLm9ubXNjaGluYS5jbiIsInVwbiI6IkNJRVRlc3QwM0BNaWNyb3NvZnRJbnRlcm5hbC5wYXJ0bmVyLm9ubXNjaGluYS5jbiIsInZlciI6IjEuMCJ9.C3n47Eoqvo65hYQa9UrZ6yRmedPA4HM96ZEoIQFkyeaql-ezNJVklkO0qUjA567REUJnFvQ_zSDPufLvbrO-VAqCto3w3MN4Pjlkk-4qGTNEAzeoS6k4LOC0-YHHnP_DJGv159IyUoukArNNnWrMs4ELTOw_SbhqB5usTNs7N1GPoZPJCwj5wYryFVlwYA5PN_o0ysIEj3XcdMvY18SEhsz663EJzxe-fwA0XRn7wejbbbTtXlTxvQfno5ZcB8t1IraL51CbZqyNyojc4Ya7n3ZsW6sX12Tt5e0DpMO4QpkIdyrSo1xZ3Mi7uJBAJIol-XIXnrO93_8xTfjn5Mu8_g\r \r ## 运行测试\r \r ```Java\r String resourceName =\"geogroup\";\r String vmName =\"geowin-test-005\";\r String vmLocation =\"China North\";\r String storageAccountName = \"\";\r String storageAccountKey= \"\";\r \r VmDiagnosticOperation diagnosticOperation = new VmDiagnosticOperation(\r \"tenant id\",\r \"client id\", \r \"client secret\",\r \"sub id\");\r \r String result = diagnosticOperation.EnableVMDiagnostic(\r resourceName, \r vmName, \r vmLocation,\r storageAccountName, \r storageAccountKey);\r \r System.out.println(result);\r ```\r     \r ## 运行结果\r \r ![result](media/aog-virtual-machines-arm-howto-enable-diagnostics-with-java-rest-api/result.png)\r \r ## 示例代码\r \r 示例代码已经托管在 GitHub 中，请点击 [azure-vmop-demo](https://github.com/wacn/AOG-CodeSample/tree/master/VirtualMachines/Java/azure-vmop-demo-master) 查看或下载完整代码示例。\r "}