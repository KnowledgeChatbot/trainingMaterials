{"Title":"通过 PowerShell 使用 Mahout HDInsight 生成推荐 - Azure","Description":"了解如何使用 Apache Mahout 机器学习库通过客户端上运行的 PowerShell 脚本中的 HDInsight (Hadoop) 生成电影推荐。","Content":"# <a name=\"generate-movie-recommendations-by-using-apache-mahout-with-hadoop-in-hdinsight-powershell\"></a>将 Apache Mahout 与 HDInsight (PowerShell) 中的 Hadoop 配合使用生成电影推荐\r \r [!INCLUDE [mahout-selector](../../includes/hdinsight-selector-mahout.md)]\r \r 了解如何使用 [Apache Mahout](http://mahout.apache.org) 机器学习库通过 Azure HDInsight 生成电影推荐。 本文档中的示例使用 Azure PowerShell 运行 Mahout 作业。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r [!INCLUDE [hdinsight-linux-acn-version.md](../../includes/hdinsight-linux-acn-version.md)]\r \r * 基于 Linux 的 HDInsight 群集。 有关创建该群集的信息，请参阅 [开始在 HDInsight 中使用基于 Linux 的 Hadoop][getstarted]。\r \r     > [!IMPORTANT]\r     > Linux 是在 HDInsight 3.4 版或更高版本上使用的唯一操作系统。 有关详细信息，请参阅 [HDInsight 在 Windows 上停用](hdinsight-component-versioning.md#hdinsight-windows-retirement)。\r \r * [Azure PowerShell](https://docs.microsoft.com/powershell/azure/overview)\r \r ## <a name=\"recommendations\"></a>使用 Azure PowerShell 生成推荐\r \r > [!WARNING]\r > 本节中的作业通过使用 Azure PowerShell 运行。 许多通过 Mahout 提供的类当前无法与 Azure PowerShell 配合使用。 有关不适用于 Azure PowerShell 的类的列表，请参阅[故障排除](#troubleshooting)部分。\r >\r > 有关使用 SSH 连接到 HDInsight 和直接在群集上运行 Mahout 示例的示例，请参阅[使用 Mahout 和 HDInsight (SSH) 生成电影推荐](hadoop/apache-hadoop-mahout-linux-mac.md)。\r \r 由 Mahout 提供的功能之一是推荐引擎。 此引擎接受 `userID`、`itemId` 和 `prefValue` 格式（项的用户首选项）的数据。 Mahout 使用该数据确定拥有类似项首选项的用户，这些首选项可用于提供建议。\r \r 以下示例是对于建议流程的工作原理的简化演练：\r \r * **共现**：Joe、Alice 和 Bob 都喜欢电影《星球大战》、《帝国反击战》和《绝地归来》。 Mahout 可确定喜欢以上电影之一的用户也喜欢其他两部。\r \r * **共现**：Bob 和 Alice 还喜欢电影《幽灵的威胁》、《克隆人的进攻》和《西斯的复仇》。 Mahout 确定喜欢前面三部电影的用户也喜欢这些电影。\r \r * **类似性推荐**：由于 Joe 喜欢前三部电影，Mahout 会查看具有类似首选项的其他人喜欢的电影，但是 Joe 还未观看过（喜欢/评价）。 在这种情况下，Mahout 推荐《幽灵的威胁》、《克隆人的进攻》和《西斯的复仇》。\r \r ### <a name=\"understanding-the-data\"></a>了解数据\r \r [GroupLens 研究][movielens]以兼容 Mahout 的格式提供电影的评价数据。 此数据可用于群集默认存储的 `/HdiSamples/HdiSamples/MahoutMovieData` 中。\r \r 包含以下两个文件：`moviedb.txt`（有关电影的信息）和 `user-ratings.txt`。 `user-ratings.txt` 文件在分析期间使用。 `moviedb.txt` 文件用于在显示分析结果时，提供便于用户阅读的文本。\r \r user-ratings.txt 中包含的数据具有 `userID`、`movieID`、`userRating` 和 `timestamp` 结构，它会说明每个用户对电影评级的情况。 下面是数据的示例：\r \r     196    242    3    881250949\r     186    302    3    891717742\r     22    377    1    878887116\r     244    51    2    880606923\r     166    346    1    886397596\r \r ### <a name=\"run-the-job\"></a>运行作业\r \r 使用以下 Windows PowerShell 脚本来运行作业，以将 Mahout 推荐引擎用于电影数据：\r \r > [!NOTE]\r > 此文件会提示你输入用于连接到 HDInsight 群集和运行作业的信息。 完成作业和下载 output.txt 文件可能需要几分钟时间。\r \r ```powershell\r # Login to your Azure subscription\r # Is there an active Azure subscription?\r $sub = Get-AzureRmSubscription -ErrorAction SilentlyContinue\r if(-not($sub))\r {\r     Add-AzureRmAccount -EnvironmentName AzureChinaCloud\r }\r \r # If you have multiple subscriptions, set the one to use\r # $subscriptionID = \"<subscription ID to use>\"\r # Select-AzureRmSubscription -SubscriptionId $subscriptionID\r \r # Get cluster info\r $clusterName = Read-Host -Prompt \"Enter the HDInsight cluster name\"\r $creds=Get-Credential -UserName \"admin\" -Message \"Enter the login for the cluster\"\r \r #Get the cluster info so we can get the resource group, storage, etc.\r $clusterInfo = Get-AzureRmHDInsightCluster -ClusterName $clusterName\r $resourceGroup = $clusterInfo.ResourceGroup\r $storageAccountName = $clusterInfo.DefaultStorageAccount.split('.')[0]\r $container = $clusterInfo.DefaultStorageContainer\r $storageAccountKey = (Get-AzureRmStorageAccountKey `\r     -Name $storageAccountName `\r -ResourceGroupName $resourceGroup)[0].Value\r \r #Create a storage context and upload the file\r $context = New-AzureStorageContext `\r     -StorageAccountName $storageAccountName `\r     -StorageAccountKey $storageAccountKey\r \r #Use Hive to figure out the path to the mahout examples\r #Because the file name/path has a version number in it that changes\r $queryString = \"!ls /usr/hdp/current/mahout-client\"\r $hiveJobDefinition = New-AzureRmHDInsightHiveJobDefinition -Query $queryString\r $hiveJob=Start-AzureRmHDInsightJob -ClusterName $clusterName -JobDefinition $hiveJobDefinition -HttpCredential $creds\r wait-azurermhdinsightjob -ClusterName $clusterName -JobId $hiveJob.JobId -HttpCredential $creds > $null\r #Get the files returned from Hive\r $files=get-azurermhdinsightjoboutput -clustername $clusterName -JobId $hiveJob.JobId -DefaultContainer $container -DefaultStorageAccountName $storageAccountName -DefaultStorageAccountKey $storageAccountKey -HttpCredential $creds\r #Find the file that starts with mahout-examples and ends in job.jar\r $jarFile = $files | select-string \"mahout-examples.+job\\.jar\" | % {$_.Matches.Value}\r #Add the full path\r $jarFile = \"file:///usr/hdp/current/mahout-client/$jarFile\"\r \r # The arguments for the mahout job\r # * input - the path to the data uploaded to HDInsight\r # * output - the path to store output data\r # * tempDir - the directory for temp files\r $jobArguments = \"-s\", \"SIMILARITY_COOCCURRENCE\", `\r                 \"--input\", \"/HdiSamples/HdiSamples/MahoutMovieData/user-ratings.txt\",\r                 \"--output\", \"/example/out\",\r                 \"--tempDir\", \"/example/temp\"\r \r # Create the job definition\r $jobDefinition = New-AzureRmHDInsightMapReduceJobDefinition `\r     -JarFile $jarFile `\r     -ClassName \"org.apache.mahout.cf.taste.hadoop.item.RecommenderJob\" `\r     -Arguments $jobArguments\r \r # Start the job\r $job = Start-AzureRmHDInsightJob `\r     -ClusterName $clusterName `\r     -JobDefinition $jobDefinition `\r     -HttpCredential $creds\r \r # Wait on the job to complete\r Write-Host \"Wait for the job to complete ...\" -ForegroundColor Green\r Wait-AzureRmHDInsightJob `\r         -ClusterName $clusterName `\r         -JobId $job.JobId `\r         -HttpCredential $creds\r \r # Write out any error information\r Write-Host \"STDERR\"\r Get-AzureRmHDInsightJobOutput `\r         -Clustername $clusterName `\r         -JobId $job.JobId `\r         -HttpCredential $creds `\r         -DisplayOutputType StandardError\r \r # Download the output\r Get-AzureStorageBlobContent `\r         -Blob example/out/part-r-00000 `\r         -Container $container `\r         -Destination output.txt `\r         -Context $context\r #Download movie and user files for use in displaying results\r Get-AzureStorageBlobContent -blob \"HdiSamples/HdiSamples/MahoutMovieData/moviedb.txt\" `\r         -Container $container `\r         -Destination moviedb.txt `\r         -Context $context\r Get-AzureStorageBlobContent -blob \"HdiSamples/HdiSamples/MahoutMovieData/user-ratings.txt\" `\r         -Container $container `\r         -Destination user-ratings.txt `\r         -Context $context\r ```\r \r > [!NOTE]\r > Mahout 作业不删除在处理作业时创建的临时数据。 在示例作业中指定 `--tempDir` 参数，将临时文件隔离到特定目录中。\r \r Mahout 作业不会将输出返回到 STDOUT。 而是会将其作为 **part-r-00000** 存储在指定的输出目录中。 该脚本将此文件下载到工作站上的当前目录中的 **output.txt** 中。\r \r 以下文本是此文件内容的示例：\r \r     1    [234:5.0,347:5.0,237:5.0,47:5.0,282:5.0,275:5.0,88:5.0,515:5.0,514:5.0,121:5.0]\r     2    [282:5.0,210:5.0,237:5.0,234:5.0,347:5.0,121:5.0,258:5.0,515:5.0,462:5.0,79:5.0]\r     3    [284:5.0,285:4.828125,508:4.7543354,845:4.75,319:4.705128,124:4.7045455,150:4.6938777,311:4.6769233,248:4.65625,272:4.649266]\r     4    [690:5.0,12:5.0,234:5.0,275:5.0,121:5.0,255:5.0,237:5.0,895:5.0,282:5.0,117:5.0]\r \r 第一列是 `userID`。 “[”和“]”中包含的值为 `movieId`:`recommendationScore`。\r \r 该脚本还会下载 `moviedb.txt` 和 `user-ratings.txt` 文件，需要这些文件格式化输出使其更具可读性。\r \r ### <a name=\"view-the-output\"></a>查看输出\r \r 虽然生成的输出也许可用于应用程序中，但不便于用户阅读。 可以使用服务器中的 `moviedb.txt` 将 `movieId` 解析为电影名称。 使用以下 PowerShell 脚本显示包含影片名称的推荐：\r \r ```powershell\r     Displays recommendations for movies.\r .DESCRIPTION\r     Displays recommendations generated by Mahout\r     with HDInsight example in a human readable format.\r .EXAMPLE\r     .\\Show-Recommendation -userId 4\r         -userDataFile \"user-ratings.txt\"\r         -movieFile \"moviedb.txt\"\r         -recommendationFile \"output.txt\"\r #>\r \r Param(\r     #The user ID\r     [Parameter(Mandatory = $true)]\r     [String]$userId,\r \r     [Parameter(Mandatory = $true)]\r     [String]$userDataFile,\r \r     [Parameter(Mandatory = $true)]\r     [String]$movieFile,\r \r     [Parameter(Mandatory = $true)]\r     [String]$recommendationFile\r )\r # Read movie ID & description into hash table\r $movieById = @{}\r foreach($line in Get-Content $movieFile)\r {\r     $tokens = $line.Split(\"|\")\r     $movieById[$tokens[0]] = $tokens[1]\r }\r # Load movies user has already seen (rated)\r # into a hash table\r $ratedMovieIds = @{}\r foreach($line in Get-Content $userDataFile)\r {\r     $tokens = $line.Split(\"`t\")\r     if($tokens[0] -eq $userId)\r     {\r         # Resolve the ID to the movie name\r         $ratedMovieIds[$movieById[$tokens[1]]] = $tokens[2]\r     }\r }\r # Read recommendations generated by Mahout\r $recommendations = @{}\r foreach($line in get-content $recommendationFile)\r {\r     $tokens = $line.Split(\"`t\")\r     if($tokens[0] -eq $userId)\r     {\r         #Trim leading/treailing [] and split at ,\r         $movieIdAndScores = $tokens[1].TrimStart(\"[\").TrimEnd(\"]\").Split(\",\")\r         foreach($movieIdAndScore in $movieIdAndScores)\r         {\r             #Split at : and store title and score in a hash table\r             $idAndScore = $movieIdAndScore.Split(\":\")\r             $recommendations[$movieById[$idAndScore[0]]] = $idAndScore[1]\r         }\r         break\r     }\r }\r \r Write-Output \"Rated movies\" -ForegroundColor Green\r Write-Output \"---------------------------\" -ForegroundColor Green\r $ratedFormat = @{Expression={$_.Name};Label=\"Movie\";Width=40}, `\r                 @{Expression={$_.Value};Label=\"Rating\"}\r $ratedMovieIds | format-table $ratedFormat\r Write-Output \"---------------------------\" -ForegroundColor Green\r \r write-Output \"Recommended movies\" -ForegroundColor Green\r Write-Output \"---------------------------\" -ForegroundColor Green\r $recommendationFormat = @{Expression={$_.Name};Label=\"Movie\";Width=40}, `\r                         @{Expression={$_.Value};Label=\"Score\"}\r $recommendations | format-table $recommendationFormat\r ```\r \r 使用以下命令，以便于用户阅读的格式显示建议： \r \r ```powershell\r .\\show-recommendation.ps1 -userId 4 -userDataFile .\\user-ratings.txt -movieFile .\\moviedb.txt -recommendationFile .\\output.txt\r ```\r \r 输出与以下文本类似：\r \r     Reading movies descriptions\r     Reading rated movies\r     Reading recommendations\r     Rated movies\r     ---------------------------\r     Movie                                    Rating\r     -----                                    ------\r     Devil's Own, The (1997)                  1\r     Alien: Resurrection (1997)               3\r     187 (1997)                               2\r     (lines ommitted)\r \r     ---------------------------\r     Recommended movies\r     ---------------------------\r \r     Movie                                    Score\r     -----                                    -----\r     Good Will Hunting (1997)                 4.6504064\r     Swingers (1996)                          4.6862745\r     Wings of the Dove, The (1997)            4.6666665\r     People vs. Larry Flynt, The (1996)       4.834559\r     Everyone Says I Love You (1996)          4.707071\r     Secrets & Lies (1996)                    4.818182\r     That Thing You Do! (1996)                4.75\r     Grosse Pointe Blank (1997)               4.8235292\r     Donnie Brasco (1997)                     4.6792455\r     Lone Star (1996)                         4.7099237\r \r ## <a name=\"troubleshooting\"></a>故障排除\r \r ### <a name=\"cannot-overwrite-files\"></a>无法覆盖文件\r \r Mahout 作业不清理在处理期间创建的临时文件。 此外，作业不会覆盖现有的输出文件。\r \r 若要避免运行 Mahout 作业时出错，请在每次运行作业之前删除临时文件和输出文件。 若要删除由本文档前面的脚本创建的文件，请使用以下 PowerShell 脚本：\r \r ```powershell\r # Login to your Azure subscription\r # Is there an active Azure subscription?\r $sub = Get-AzureRmSubscription -ErrorAction SilentlyContinue\r if(-not($sub))\r {\r     Add-AzureRmAccount -EnvironmentName AzureChinaCloud\r }\r \r # Get cluster info\r $clusterName = Read-Host -Prompt \"Enter the HDInsight cluster name\"\r $creds=Get-Credential -Message \"Enter the login for the cluster\"\r \r #Get the cluster info so we can get the resource group, storage, etc.\r $clusterInfo = Get-AzureRmHDInsightCluster -ClusterName $clusterName\r $resourceGroup = $clusterInfo.ResourceGroup\r $storageAccountName = $clusterInfo.DefaultStorageAccount.split('.')[0]\r $container = $clusterInfo.DefaultStorageContainer\r $storageAccountKey = (Get-AzureRmStorageAccountKey `\r     -Name $storageAccountName `\r -ResourceGroupName $resourceGroup)[0].Value\r \r #Create a storage context and upload the file\r $context = New-AzureStorageContext `\r     -StorageAccountName $storageAccountName `\r     -StorageAccountKey $storageAccountKey\r \r #Azure PowerShell can't delete blobs using wildcard,\r #so have to get a list and delete one at a time\r # Start with the output\r $blobs = Get-AzureStorageBlob -Container $container -Context $context -Prefix \"example/out\"\r foreach($blob in $blobs)\r {\r     Remove-AzureStorageBlob -Blob $blob.Name -Container $container -context $context\r }\r # Next the temp files\r $blobs = Get-AzureStorageBlob -Container $container -Context $context -Prefix \"example/temp\"\r foreach($blob in $blobs)\r {\r     Remove-AzureStorageBlob -Blob $blob.Name -Container $container -context $context\r }\r ```\r \r ### <a name=\"nopowershell\"></a>不适用于 Azure PowerShell 的类\r \r 在 Windows PowerShell 中使用时，使用以下类的 Mahout 作业返回各种错误消息：\r \r * org.apache.mahout.utils.clustering.ClusterDumper\r * org.apache.mahout.utils.SequenceFileDumper\r * org.apache.mahout.utils.vectors.lucene.Driver\r * org.apache.mahout.utils.vectors.arff.Driver\r * org.apache.mahout.text.WikipediaToSequenceFile\r * org.apache.mahout.clustering.streaming.tools.ResplitSequenceFiles\r * org.apache.mahout.clustering.streaming.tools.ClusterQualitySummarizer\r * org.apache.mahout.classifier.sgd.TrainLogistic\r * org.apache.mahout.classifier.sgd.RunLogistic\r * org.apache.mahout.classifier.sgd.TrainAdaptiveLogistic\r * org.apache.mahout.classifier.sgd.ValidateAdaptiveLogistic\r * org.apache.mahout.classifier.sgd.RunAdaptiveLogistic\r * org.apache.mahout.classifier.sequencelearning.hmm.BaumWelchTrainer\r * org.apache.mahout.classifier.sequencelearning.hmm.ViterbiEvaluator\r * org.apache.mahout.classifier.sequencelearning.hmm.RandomSequenceGenerator\r * org.apache.mahout.classifier.df.tools.Describe\r \r 如果要运行使用这些类的作业，请使用 SSH 连接到 HDInsight 群集，并从命令行运行这些作业。 有关使用 SSH 运行 Mahout 作业的示例，请参阅[使用 Mahout 和 HDInsight (SSH) 生成电影推荐](hadoop/apache-hadoop-mahout-linux-mac.md)。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 既已学习如何使用 Mahout，可探索在 HDInsight 上处理数据的其他方式：\r \r * [Hive 和 HDInsight 配合使用](hadoop/hdinsight-use-hive.md)\r * [Pig 和 HDInsight 配合使用](hadoop/hdinsight-use-pig.md)\r * [MapReduce 和 HDInsight 配合使用](hadoop/hdinsight-use-mapreduce.md)\r \r [build]: http://mahout.apache.org/developers/buildingmahout.html\r [aps]: https://docs.microsoft.com/powershell/azureps-cmdlets-docs\r [movielens]: http://grouplens.org/datasets/movielens/\r [100k]: http://files.grouplens.org/datasets/movielens/ml-100k.zip\r [getstarted]:hadoop/apache-hadoop-linux-tutorial-get-started.md\r [upload]: hdinsight-upload-data.md\r [ml]: http://en.wikipedia.org/wiki/Machine_learning\r [forest]: http://en.wikipedia.org/wiki/Random_forest\r [enableremote]: ./media/hdinsight-mahout/enableremote.png\r [connect]: ./media/hdinsight-mahout/connect.png\r [hadoopcli]: ./media/hdinsight-mahout/hadoopcli.png\r [tools]: https://github.com/Blackmist/hdinsight-tools\r \r \r <!--Update_Description: update wording and link references-->"}