{"Title":"计算机视觉 API JavaScript 快速入门","Description":"获取信息和代码示例，帮助自己快速开始使用 JavaScript 和认知服务中的计算机视觉 API。","Content":"# <a name=\"computer-vision-javascript-quick-starts\"></a>计算机视觉 JavaScript 快速入门\r \r 本文提供信息和代码示例来帮助读者快速开始使用 JavaScript 和计算机视觉 API 来完成以下任务： \r - [分析图像](#AnalyzeImage) \r - [使用特定于域的模型](#DomainSpecificModel)\r - [以智能方式生成缩略图](#GetThumbnail)\r - [从图像中检测并提取文本](#OCR)\r \r 在[此处](../Vision-API-How-to-Topics/HowToSubscribe.md)详细了解如何获取免费订阅密钥\r \r 本文中的大多数示例使用 jQuery 1.9.0。 有关使用 JavaScript 但不使用 jQuery 的示例，请参阅示例[以智能方式生成缩略图](#GetThumbnail)。\r \r ## 使用计算机视觉 API 通过 JavaScript 分析图像 <a name=\"AnalyzeImage\"> </a>\r \r 使用[“分析图像”方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fa)，可以基于图像内容提取视觉特征。 可以上传图像或指定图像 URL 并选择要返回的特征，包括：\r - 与图像内容相关的标记的详细列表。 \r - 完整句子中图像内容的说明。 \r - 图像包含的任何人脸的坐标、性别和年龄。\r - ImageType（剪贴画或线条绘图）\r - 主色、强调色，或者图像是否为黑白色。\r - 在此[分类](../Category-Taxonomy.md)中定义的类别。 \r - 图像是否包含色情或性暗示内容。 \r \r ### <a name=\"analyze-an-image-javascript-example-request\"></a>分析图像 JavaScript 示例请求\r \r 若要运行示例，请执行以下步骤：\r \r 1. 复制以下内容并将其保存到某个文件，例如 `analyze.html`。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 更改 `uriBase` 值以使用订阅密钥的获取位置。\r 1. 将此文件拖放到浏览器中。\r 1. 单击 `Analyze image` 按钮。\r \r ```html\r <!DOCTYPE html>\r <html>\r <head>\r     <title>Analyze Sample</title>\r     <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\"></script>\r </head>\r <body>\r \r <script type=\"text/javascript\">\r     function processImage() {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         var subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         var uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/analyze\";\r \r         // Request parameters.\r         var params = {\r             \"visualFeatures\": \"Categories,Description,Color\",\r             \"details\": \"\",\r             \"language\": \"en\",\r         };\r \r         // Display the image.\r         var sourceImageUrl = document.getElementById(\"inputImage\").value;\r         document.querySelector(\"#sourceImage\").src = sourceImageUrl;\r \r         // Perform the REST API call.\r         $.ajax({\r             url: uriBase + \"?\" + $.param(params),\r             \r             // Request headers.\r             beforeSend: function(xhrObj){\r                 xhrObj.setRequestHeader(\"Content-Type\",\"application/json\");\r                 xhrObj.setRequestHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r             },\r             \r             type: \"POST\",\r             \r             // Request body.\r             data: '{\"url\": ' + '\"' + sourceImageUrl + '\"}',\r         })\r         \r         .done(function(data) {\r             // Show formatted JSON on webpage.\r             $(\"#responseTextArea\").val(JSON.stringify(data, null, 2));\r         })\r         \r         .fail(function(jqXHR, textStatus, errorThrown) {\r             // Display error message.\r             var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r             errorString += (jqXHR.responseText === \"\") ? \"\" : jQuery.parseJSON(jqXHR.responseText).message;\r             alert(errorString);\r         });\r     };\r </script>\r \r <h1>Analyze image:</h1>\r Enter the URL to an image of a natural or artificial landmark, then click the <strong>Analyze image</strong> button.\r <br><br>\r Image to analyze: <input type=\"text\" name=\"inputImage\" id=\"inputImage\" value=\"http://upload.wikimedia.org/wikipedia/commons/3/3c/Shaki_waterfall.jpg\" />\r <button onclick=\"processImage()\">Analyze image</button>\r <br><br>\r <div id=\"wrapper\" style=\"width:1020px; display:table;\">\r     <div id=\"jsonOutput\" style=\"width:600px; display:table-cell;\">\r         Response:\r         <br><br>\r         <textarea id=\"responseTextArea\" class=\"UIInput\" style=\"width:580px; height:400px;\"></textarea>\r     </div>\r     <div id=\"imageDiv\" style=\"width:420px; display:table-cell;\">\r         Source image:\r         <br><br>\r         <img id=\"sourceImage\" width=\"400\" />\r     </div>\r </div>\r </body>\r </html>\r ```\r \r ### <a name=\"analyze-an-image-response\"></a>分析图像响应\r \r 成功响应将以 JSON 格式返回。 下面是成功响应的示例： \r \r ```json\r {\r   \"categories\": [\r     {\r       \"name\": \"outdoor_water\",\r       \"score\": 0.9921875\r     }\r   ],\r   \"description\": {\r     \"tags\": [\r       \"nature\",\r       \"water\",\r       \"waterfall\",\r       \"outdoor\",\r       \"rock\",\r       \"mountain\",\r       \"rocky\",\r       \"grass\",\r       \"hill\",\r       \"top\",\r       \"covered\",\r       \"hillside\",\r       \"standing\",\r       \"side\",\r       \"group\",\r       \"walking\",\r       \"white\",\r       \"man\",\r       \"large\",\r       \"snow\",\r       \"grazing\",\r       \"forest\",\r       \"slope\",\r       \"herd\",\r       \"river\",\r       \"giraffe\",\r       \"field\"\r     ],\r     \"captions\": [\r       {\r         \"text\": \"a large waterfall over a rocky cliff\",\r         \"confidence\": 0.9165146827843689\r       }\r     ]\r   },\r   \"requestId\": \"63d3c630-7f3d-43d7-8a97-143012fc53f4\",\r   \"metadata\": {\r     \"width\": 1280,\r     \"height\": 959,\r     \"format\": \"Jpeg\"\r   },\r   \"color\": {\r     \"dominantColorForeground\": \"Grey\",\r     \"dominantColorBackground\": \"Green\",\r     \"dominantColors\": [\r       \"Grey\",\r       \"Green\"\r     ],\r     \"accentColor\": \"4D5E2F\",\r     \"isBWImg\": false\r   }\r }\r ```\r \r ## 使用特定于域的模型 <a name=\"DomainSpecificModel\"> </a>\r 特定于域的模型是经过训练，可在图像中识别一组特定对象的模型。 当前可用的两个特定于域的模型为 celebrities 和 landmarks。 以下示例识别图像中的地标。\r \r ### <a name=\"landmark-javascript-example-request\"></a>地标 JavaScript 示例请求\r \r 若要运行示例，请执行以下步骤：\r \r 1. 复制以下内容并将其保存到某个文件，例如 `landmark.html`。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 更改 `uriBase` 值以使用订阅密钥的获取位置。\r 1. 将此文件拖放到浏览器中。\r 1. 单击 `Analyze image` 按钮。\r \r ```html\r <!DOCTYPE html>\r <html>\r <head>\r     <title>Landmark Sample</title>\r     <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\"></script>\r </head>\r <body>\r \r <script type=\"text/javascript\">\r     function processImage() {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         var subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         // if you want to use the celebrities model, change \"landmarks\" to \"celebrities\" here and in\r         // uriBuilder.setParameter to use the Celebrities model.\r         var uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/models/landmarks/analyze\";\r \r         // Request parameters.\r         var params = {\r             \"model\": \"landmarks\", // Use \"model\": \"celebrities\" to use the Celebrities model.\r         };\r \r         // Display the image.\r         var sourceImageUrl = document.getElementById(\"inputImage\").value;\r         document.querySelector(\"#sourceImage\").src = sourceImageUrl;\r \r         // Perform the REST API call.\r         $.ajax({\r             url: uriBase + \"?\" + $.param(params),\r \r             // Request headers.\r             beforeSend: function(xhrObj) {\r                 xhrObj.setRequestHeader(\"Content-Type\", \"application/json\");\r                 xhrObj.setRequestHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r             },\r \r             type: \"POST\",\r \r             // Request body.\r             data: '{\"url\": ' + '\"' + sourceImageUrl + '\"}',\r         })\r \r         .done(function(data) {\r             // Show formatted JSON on webpage.\r             $(\"#responseTextArea\").val(JSON.stringify(data, null, 2));\r         })\r \r         .fail(function(jqXHR, textStatus, errorThrown) {\r             // Display error message.\r             var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r             errorString += (jqXHR.responseText === \"\") ? \"\" : jQuery.parseJSON(jqXHR.responseText).message;\r             alert(errorString);\r         });\r     };\r </script>\r \r <h1>Landmark image:</h1>\r Enter the URL to an image of a natural or artificial landmark, then click the <strong>Analyze image</strong> button.\r <br><br>\r Landscape image to analyze: <input type=\"text\" name=\"inputImage\" id=\"inputImage\" value=\"https://upload.wikimedia.org/wikipedia/commons/2/23/Space_Needle_2011-07-04.jpg\" />\r <button onclick=\"processImage()\">Analyze image</button>\r <br><br>\r <div id=\"wrapper\" style=\"width:1020px; display:table;\">\r     <div id=\"jsonOutput\" style=\"width:600px; display:table-cell;\">\r         Response:\r         <br><br>\r         <textarea id=\"responseTextArea\" class=\"UIInput\" style=\"width:580px; height:400px;\"></textarea>\r     </div>\r     <div id=\"imageDiv\" style=\"width:420px; display:table-cell;\">\r         Source image:\r         <br><br>\r         <img id=\"sourceImage\" width=\"400\" />\r     </div>\r </div>\r </body>\r </html>\r ```\r \r ### <a name=\"landmark-example-response\"></a>地标示例响应\r 成功响应将以 JSON 格式返回。 下面是成功响应的示例：\r \r ```json\r {\r   \"requestId\": \"fe0d4539-7a21-4fc6-b7af-3bb24beba390\",\r   \"metadata\": {\r     \"width\": 2096,\r     \"height\": 4132,\r     \"format\": \"Jpeg\"\r   },\r   \"result\": {\r     \"landmarks\": [\r       {\r         \"name\": \"Space Needle\",\r         \"confidence\": 0.9998178\r       }\r     ]\r   }\r }\r ```\r \r ## 使用计算机视觉 API 通过 JavaScript 获取缩略图 <a name=\"GetThumbnail\"> </a>\r 使用[“获取缩略图”方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fb)可以根据图像的兴趣区域 (ROI) 将该图像裁剪为所需的高度和宽度，即使纵横比不同于输入图像。 \r \r ### <a name=\"get-a-thumbnail-javascript-example-request\"></a>获取缩略图 JavaScript 示例请求\r \r 若要运行示例，请执行以下步骤：\r \r 1. 复制以下内容并将其保存到某个文件，例如 `thumbnail.html`。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 更改 `uriBase` 值以使用订阅密钥的获取位置。\r 1. 将此文件拖放到浏览器中。\r 1. 单击 `Generate thumbnail` 按钮。\r \r ```html\r <!DOCTYPE html>\r <html>\r <head>\r     <title>Thumbnail Sample</title>\r </head>\r <body>\r \r <script type=\"text/javascript\">\r     function processImage() {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         var subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         var uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/generateThumbnail\";\r         \r         // Request parameters.\r         var params = \"?width=100&height=150&smartCropping=true\";\r       \r         // Display the source image.\r         var sourceImageUrl = document.getElementById(\"inputImage\").value;\r         document.querySelector(\"#sourceImage\").src = sourceImageUrl;\r \r         // Prepare the REST API call:\r         \r         // Create the HTTP Request object.\r         var xhr = new XMLHttpRequest();\r         \r         // Identify the request as a POST, with the URL and parameters.\r         xhr.open(\"POST\", uriBase + params);\r         \r         // Add the request headers.\r         xhr.setRequestHeader(\"Content-Type\",\"application/json\");\r         xhr.setRequestHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r         \r         // Set the response type to \"blob\" for the thumbnail image data.\r         xhr.responseType = \"blob\";\r         \r         // Process the result of the REST API call.\r         xhr.onreadystatechange = function(e) {\r             if(xhr.readyState === XMLHttpRequest.DONE) {\r                 \r                 // Thumbnail successfully created.\r                 if (xhr.status === 200) {\r                     // Show response headers.\r                     var s = JSON.stringify(xhr.getAllResponseHeaders(), null, 2);\r                     document.getElementById(\"responseTextArea\").value = JSON.stringify(xhr.getAllResponseHeaders(), null, 2);\r                     \r                     // Show thumbnail image.\r                     var urlCreator = window.URL || window.webkitURL;\r                     var imageUrl = urlCreator.createObjectURL(this.response);\r                     document.querySelector(\"#thumbnailImage\").src = imageUrl;\r                 } else {\r                     // Display the error message. The error message is the response body as a JSON string. \r                     // The code in this code block extracts the JSON string from the blob response.\r                     var reader = new FileReader();\r                     \r                     // This event fires after the blob has been read.\r                     reader.addEventListener('loadend', (e) => {\r                         document.getElementById(\"responseTextArea\").value = JSON.stringify(JSON.parse(e.srcElement.result), null, 2);\r                     });\r                     \r                     // Start reading the blob as text.\r                     reader.readAsText(xhr.response);\r                 }\r             }\r         }\r         \r         // Execute the REST API call.\r         xhr.send('{\"url\": ' + '\"' + sourceImageUrl + '\"}');\r     };\r </script>\r \r <h1>Generate thumbnail image:</h1>\r Enter the URL to an image to use in creating a thumbnail image, then click the <strong>Generate thumbnail</strong> button.\r <br><br>\r Image for thumnail: <input type=\"text\" name=\"inputImage\" id=\"inputImage\" value=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Shorkie_Poo_Puppy.jpg/1280px-Shorkie_Poo_Puppy.jpg\" />\r <button onclick=\"processImage()\">Generate thumbnail</button>\r <br><br>\r <div id=\"wrapper\" style=\"width:1160px; display:table;\">\r     <div id=\"jsonOutput\" style=\"width:600px; display:table-cell;\">\r         Response:\r         <br><br>\r         <textarea id=\"responseTextArea\" class=\"UIInput\" style=\"width:580px; height:400px;\"></textarea>\r     </div>\r     <div id=\"imageDiv\" style=\"width:420px; display:table-cell;\">\r         Source image:\r         <br><br>\r         <img id=\"sourceImage\" width=\"400\" />\r     </div>\r     <div id=\"thumbnailDiv\" style=\"width:140px; display:table-cell;\">\r         Thumbnail:\r         <br><br>\r         <img id=\"thumbnailImage\" />\r     </div>\r </div>\r </body>\r </html>\r ```\r \r ### <a name=\"get-a-thumbnail-response\"></a>获取缩略图响应\r \r 成功响应包含缩略图二进制文件。 如果请求失败，则响应包含错误代码和消息，以帮助确定问题所在。\r \r ## 使用计算机视觉 API 通过 JavaScript 执行光学字符识别 (OCR) <a name=\"OCR\"> </a>\r \r 使用[光学字符识别 (OCR) 方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fc)可以检测图像中的文本，并将识别到的字符提取到机器可用的字符流中。\r \r ### <a name=\"ocr-javascript-example-request\"></a>OCR JavaScript 示例请求\r \r 若要运行示例，请执行以下步骤：\r \r 1. 复制以下内容并将其保存到某个文件，例如 `ocr.html`。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 更改 `uriBase` 值以使用订阅密钥的获取位置。\r 1. 将此文件拖放到浏览器中。\r 1. 单击 `Read image` 按钮。\r \r ```html\r <!DOCTYPE html>\r <html>\r <head>\r     <title>OCR Sample</title>\r     <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\"></script>\r </head>\r <body>\r \r <script type=\"text/javascript\">\r     function processImage() {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         var subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         var uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/ocr\";\r \r         // Request parameters.\r         var params = {\r             \"language\": \"unk\",\r             \"detectOrientation \": \"true\",\r         };\r \r         // Display the image.\r         var sourceImageUrl = document.getElementById(\"inputImage\").value;\r         document.querySelector(\"#sourceImage\").src = sourceImageUrl;\r         \r         // Perform the REST API call.\r         $.ajax({\r             url: uriBase + \"?\" + $.param(params),\r             \r             // Request headers.\r             beforeSend: function(jqXHR){\r                 jqXHR.setRequestHeader(\"Content-Type\",\"application/json\");\r                 jqXHR.setRequestHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r             },\r             \r             type: \"POST\",\r             \r             // Request body.\r             data: '{\"url\": ' + '\"' + sourceImageUrl + '\"}',\r         })\r         \r         .done(function(data) {\r             // Show formatted JSON on webpage.\r             $(\"#responseTextArea\").val(JSON.stringify(data, null, 2));\r         })\r         \r         .fail(function(jqXHR, textStatus, errorThrown) {\r             // Display error message.\r             var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r             errorString += (jqXHR.responseText === \"\") ? \"\" : (jQuery.parseJSON(jqXHR.responseText).message) ? \r                 jQuery.parseJSON(jqXHR.responseText).message : jQuery.parseJSON(jqXHR.responseText).error.message;\r             alert(errorString);\r         });\r     };\r </script>\r \r <h1>Optical Character Recognition (OCR):</h1>\r Enter the URL to an image of printed text, then click the <strong>Read image</strong> button.\r <br><br>\r Image to read: <input type=\"text\" name=\"inputImage\" id=\"inputImage\" value=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Atomist_quote_from_Democritus.png/338px-Atomist_quote_from_Democritus.png\" />\r <button onclick=\"processImage()\">Read image</button>\r <br><br>\r <div id=\"wrapper\" style=\"width:1020px; display:table;\">\r     <div id=\"jsonOutput\" style=\"width:600px; display:table-cell;\">\r         Response:\r         <br><br>\r         <textarea id=\"responseTextArea\" class=\"UIInput\" style=\"width:580px; height:400px;\"></textarea>\r     </div>\r     <div id=\"imageDiv\" style=\"width:420px; display:table-cell;\">\r         Source image:\r         <br><br>\r         <img id=\"sourceImage\" width=\"400\" />\r     </div>\r </div>\r </body>\r </html>\r ```\r \r ### <a name=\"ocr-example-response\"></a>OCR 示例响应\r \r 成功响应将以 JSON 格式返回。 返回的 OCR 结果包括文本、区域范围框、线条和单词。\r \r 下面是成功响应的示例：\r \r ```json \r {\r   \"language\": \"en\",\r   \"textAngle\": 0,\r   \"orientation\": \"Up\",\r   \"regions\": [\r     {\r       \"boundingBox\": \"21,16,304,451\",\r       \"lines\": [\r         {\r           \"boundingBox\": \"28,16,288,41\",\r           \"words\": [\r             {\r               \"boundingBox\": \"28,16,288,41\",\r               \"text\": \"NOTHING\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"27,66,283,52\",\r           \"words\": [\r             {\r               \"boundingBox\": \"27,66,283,52\",\r               \"text\": \"EXISTS\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"27,128,292,49\",\r           \"words\": [\r             {\r               \"boundingBox\": \"27,128,292,49\",\r               \"text\": \"EXCEPT\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"24,188,292,54\",\r           \"words\": [\r             {\r               \"boundingBox\": \"24,188,292,54\",\r               \"text\": \"ATOMS\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"22,253,297,32\",\r           \"words\": [\r             {\r               \"boundingBox\": \"22,253,105,32\",\r               \"text\": \"AND\"\r             },\r             {\r               \"boundingBox\": \"144,253,175,32\",\r               \"text\": \"EMPTY\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"21,298,304,60\",\r           \"words\": [\r             {\r               \"boundingBox\": \"21,298,304,60\",\r               \"text\": \"SPACE.\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"26,387,294,37\",\r           \"words\": [\r             {\r               \"boundingBox\": \"26,387,210,37\",\r               \"text\": \"Everything\"\r             },\r             {\r               \"boundingBox\": \"249,389,71,27\",\r               \"text\": \"else\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"127,431,198,36\",\r           \"words\": [\r             {\r               \"boundingBox\": \"127,431,31,29\",\r               \"text\": \"is\"\r             },\r             {\r               \"boundingBox\": \"172,431,153,36\",\r               \"text\": \"opinion.\"\r             }\r           ]\r         }\r       ]\r     }\r   ]\r }\r ```\r \r ## 使用计算机视觉 API 通过 JavaScript 执行文本识别 <a name=\"RecognizeText\"> </a>\r \r ### <a name=\"handwriting-recognition-java-example\"></a>手写文本识别 Java 示例\r \r 若要运行示例，请执行以下步骤：\r \r 1. 复制以下内容并将其保存到某个文件，例如 `handwriting.html`。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 更改 `uriBase` 值以使用订阅密钥的获取位置。\r 1. 将此文件拖放到浏览器中。\r 1. 单击 `Read image` 按钮。\r \r ```html\r <!DOCTYPE html>\r <html>\r <head>\r     <title>Handwriting Sample</title>\r     <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\"></script>\r </head>\r <body>\r \r <script type=\"text/javascript\">\r     function processImage() {\r         // **********************************************\r         // *** Update or verify the following values. ***\r         // **********************************************\r \r         // Replace the subscriptionKey string value with your valid subscription key.\r         var subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r         var uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/RecognizeText\";\r \r         // Request parameters.\r         var params = {\r             \"handwriting\": \"true\",\r         };\r \r         // Display the image.\r         var sourceImageUrl = document.getElementById(\"inputImage\").value;\r         document.querySelector(\"#sourceImage\").src = sourceImageUrl;\r         \r         // This operation requrires two REST API calls. One to submit the image for processing,\r         // the other to retrieve the text found in the image. \r         //\r         // Perform the first REST API call to submit the image for processing.\r         $.ajax({\r             url: uriBase + \"?\" + $.param(params),\r             \r             // Request headers.\r             beforeSend: function(jqXHR){\r                 jqXHR.setRequestHeader(\"Content-Type\",\"application/json\");\r                 jqXHR.setRequestHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r             },\r             \r             type: \"POST\",\r             \r             // Request body.\r             data: '{\"url\": ' + '\"' + sourceImageUrl + '\"}',\r         })\r         \r         .done(function(data, textStatus, jqXHR) {\r             // Show progress.\r             $(\"#responseTextArea\").val(\"Handwritten text submitted. Waiting 10 seconds to retrieve the recognized text.\");\r             \r             // Note: The response may not be immediately available. Handwriting recognition is an\r             // async operation that can take a variable amount of time depending on the length\r             // of the text you want to recognize. You may need to wait or retry this GET operation.\r             //\r             // Wait ten seconds before making the second REST API call.\r             setTimeout(function () { \r                 // The \"Operation-Location\" in the response contains the URI to retrieve the recognized text.\r                 var operationLocation = jqXHR.getResponseHeader(\"Operation-Location\");\r                 \r                 // Perform the second REST API call and get the response.\r                 $.ajax({\r                     url: operationLocation,\r                     \r                     // Request headers.\r                     beforeSend: function(jqXHR){\r                         jqXHR.setRequestHeader(\"Content-Type\",\"application/json\");\r                         jqXHR.setRequestHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r                     },\r                     \r                     type: \"GET\",\r                 })\r                 \r                 .done(function(data) {\r                     // Show formatted JSON on webpage.\r                     $(\"#responseTextArea\").val(JSON.stringify(data, null, 2));\r                 })\r                 \r                 .fail(function(jqXHR, textStatus, errorThrown) {\r                     // Display error message.\r                     var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r                     errorString += (jqXHR.responseText === \"\") ? \"\" : (jQuery.parseJSON(jqXHR.responseText).message) ? \r                         jQuery.parseJSON(jqXHR.responseText).message : jQuery.parseJSON(jqXHR.responseText).error.message;\r                     alert(errorString);\r                 });\r             }, 10000);\r         })\r         \r         .fail(function(jqXHR, textStatus, errorThrown) {\r             // Put the JSON description into the text area.\r             $(\"#responseTextArea\").val(JSON.stringify(jqXHR, null, 2));\r             \r             // Display error message.\r             var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r             errorString += (jqXHR.responseText === \"\") ? \"\" : (jQuery.parseJSON(jqXHR.responseText).message) ? \r                 jQuery.parseJSON(jqXHR.responseText).message : jQuery.parseJSON(jqXHR.responseText).error.message;\r             alert(errorString);\r         });\r     };\r </script>\r <h1>Read handwritten image image:</h1>\r Enter the URL to an image of handwritten text, then click the <strong>Read image</strong> button.\r <br><br>\r Image to read: <input type=\"text\" name=\"inputImage\" id=\"inputImage\" value=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Cursive_Writing_on_Notebook_paper.jpg/800px-Cursive_Writing_on_Notebook_paper.jpg\" />\r <button onclick=\"processImage()\">Read image</button>\r <br><br>\r <div id=\"wrapper\" style=\"width:1020px; display:table;\">\r     <div id=\"jsonOutput\" style=\"width:600px; display:table-cell;\">\r         Response:\r         <br><br>\r         <textarea id=\"responseTextArea\" class=\"UIInput\" style=\"width:580px; height:400px;\"></textarea>\r     </div>\r     <div id=\"imageDiv\" style=\"width:420px; display:table-cell;\">\r         Source image:\r         <br><br>\r         <img id=\"sourceImage\" width=\"400\" />\r     </div>\r </div>\r </body>\r </html>\r ```\r \r ### <a name=\"handwriting-example-response\"></a>手写文本示例响应\r \r 成功响应将以 JSON 格式返回。 返回的手写文本结果包括文本、区域范围框、线条和单词。\r \r 下面是成功响应的示例：\r \r ```json \r {\r   \"status\": \"Succeeded\",\r   \"recognitionResult\": {\r     \"lines\": [\r       {\r         \"boundingBox\": [\r           2,\r           84,\r           783,\r           96,\r           782,\r           154,\r           1,\r           148\r         ],\r         \"text\": \"Pack my box with five dozen liquor jugs\",\r         \"words\": [\r           {\r             \"boundingBox\": [\r               6,\r               86,\r               92,\r               87,\r               71,\r               151,\r               0,\r               150\r             ],\r             \"text\": \"Pack\"\r           },\r           {\r             \"boundingBox\": [\r               86,\r               87,\r               172,\r               88,\r               150,\r               152,\r               64,\r               151\r             ],\r             \"text\": \"my\"\r           },\r           {\r             \"boundingBox\": [\r               165,\r               88,\r               241,\r               89,\r               219,\r               152,\r               144,\r               152\r             ],\r             \"text\": \"box\"\r           },\r           {\r             \"boundingBox\": [\r               234,\r               89,\r               343,\r               90,\r               322,\r               154,\r               213,\r               152\r             ],\r             \"text\": \"with\"\r           },\r           {\r             \"boundingBox\": [\r               347,\r               90,\r               432,\r               91,\r               411,\r               154,\r               325,\r               154\r             ],\r             \"text\": \"five\"\r           },\r           {\r             \"boundingBox\": [\r               432,\r               91,\r               538,\r               92,\r               516,\r               154,\r               411,\r               154\r             ],\r             \"text\": \"dozen\"\r           },\r           {\r             \"boundingBox\": [\r               554,\r               92,\r               696,\r               94,\r               675,\r               154,\r               533,\r               154\r             ],\r             \"text\": \"liquor\"\r           },\r           {\r             \"boundingBox\": [\r               710,\r               94,\r               800,\r               96,\r               800,\r               154,\r               688,\r               154\r             ],\r             \"text\": \"jugs\"\r           }\r         ]\r       },\r       {\r         \"boundingBox\": [\r           2,\r           52,\r           65,\r           46,\r           69,\r           89,\r           7,\r           95\r         ],\r         \"text\": \"dog\",\r         \"words\": [\r           {\r             \"boundingBox\": [\r               0,\r               62,\r               79,\r               39,\r               94,\r               82,\r               0,\r               105\r             ],\r             \"text\": \"dog\"\r           }\r         ]\r       },\r       {\r         \"boundingBox\": [\r           6,\r           2,\r           771,\r           13,\r           770,\r           75,\r           5,\r           64\r         ],\r         \"text\": \"The quick brown fox jumps over the lazy\",\r         \"words\": [\r           {\r             \"boundingBox\": [\r               8,\r               4,\r               92,\r               5,\r               77,\r               71,\r               0,\r               71\r             ],\r             \"text\": \"The\"\r           },\r           {\r             \"boundingBox\": [\r               89,\r               5,\r               188,\r               5,\r               173,\r               72,\r               74,\r               71\r             ],\r             \"text\": \"quick\"\r           },\r           {\r             \"boundingBox\": [\r               188,\r               5,\r               323,\r               6,\r               308,\r               73,\r               173,\r               72\r             ],\r             \"text\": \"brown\"\r           },\r           {\r             \"boundingBox\": [\r               316,\r               6,\r               386,\r               6,\r               371,\r               73,\r               302,\r               73\r             ],\r             \"text\": \"fox\"\r           },\r           {\r             \"boundingBox\": [\r               396,\r               7,\r               508,\r               7,\r               493,\r               74,\r               381,\r               73\r             ],\r             \"text\": \"jumps\"\r           },\r           {\r             \"boundingBox\": [\r               501,\r               7,\r               604,\r               8,\r               589,\r               75,\r               487,\r               74\r             ],\r             \"text\": \"over\"\r           },\r           {\r             \"boundingBox\": [\r               600,\r               8,\r               673,\r               8,\r               658,\r               75,\r               586,\r               75\r             ],\r             \"text\": \"the\"\r           },\r           {\r             \"boundingBox\": [\r               670,\r               8,\r               800,\r               9,\r               787,\r               76,\r               655,\r               75\r             ],\r             \"text\": \"lazy\"\r           }\r         ]\r       }\r     ]\r   }\r }\r ```\r \r "}