{"Title":"使用 Azure IoT 中心路由消息 (Java)","Description":"如何使用路由规则和自定义终结点将消息发送到其他后端服务，从而处理 Azure IoT 中心的设备到云消息。","Content":"# <a name=\"routing-messages-with-iot-hub-java\"></a>使用 IoT 中心路由消息 (Java)\r \r [!INCLUDE [iot-hub-selector-process-d2c](../../includes/iot-hub-selector-process-d2c.md)]\r \r Azure IoT 中心是一项完全托管的服务，可在数百万个设备和一个解决方案后端之间实现安全可靠的双向通信。 其他教程（[simulated-device]和[使用 IoT 中心发送“云到设备”消息][lnk-c2d]）介绍了如何使用 IoT 中心的“设备到云”和“云到设备”的基本消息传递功能。\r \r 本教程以 [simulated-device]教程中所示的代码为基础，说明如何按可缩放的方式通过消息路由处理设备到云的消息。 本教程描述了如何处理需要解决方案后端立即执行操作的消息。 例如，设备可能会发送一条警报消息，触发在 CRM 系统中插入票证。 与此相反，数据点消息仅送入分析引擎。 例如，设备中存储便于日后分析的温度遥测是数据点消息。\r \r 在本教程最后，会运行 3 个 Java 控制台应用：\r \r * **simulated-device**（ [simulated-device] 教程中创建的应用的修改版本）每秒发送一次设备到云的数据点消息，每 10 秒发送一次设备到云的交互式消息。 此应用使用 AMQP 协议实现与 IoT 中心的通信。\r * **read-d2c-messages** 显示设备应用发送的遥测数据。\r * **read-critical-queue** 从附加到 IoT 中心的服务总线队列中取消关键消息的排队。\r \r > [!NOTE]\r > IoT 中心对许多设备平台和语言（包括 C、Java 和 JavaScript）提供 SDK 支持。 若要了解如何将本教程中的设备替换为物理设备，以及如何将设备连接到 IoT 中心，请参阅 [Azure IoT 开发人员中心]。\r > \r > \r \r 要完成本教程，需要以下各项：\r \r * [simulated-device] 教程的完整工作版本。\r * 最新的 [Java SE 开发工具包 8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\r * [Maven 3](https://maven.apache.org/install.html)\r + 有效的 Azure 帐户。 <br/>如果没有帐户，可以创建一个[试用帐户](https://www.azure.cn/pricing/1rmb-trial/)，只需几分钟即可完成。\r \r 我们还建议阅读 [Azure 存储]和 [Azure 服务总线]。\r \r ## <a name=\"send-interactive-messages-from-a-device-app\"></a>从设备应用发送交互式消息\r 在本部分中，会修改在 [simulated-device]教程中创建的设备应用，不定期发送需要立即处理的消息。\r \r 1. 使用文本编辑器打开 simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。 本文件包含用于 **IoT 中心入门** 教程中创建的 [simulated-device] 应用的代码。\r 2. 使用以下代码替换 **MessageSender** 类：\r \r     ```java\r     private static class MessageSender implements Runnable {\r \r         public void run()  {\r             try {\r                 double minTemperature = 20;\r                 double minHumidity = 60;\r                 Random rand = new Random();\r \r                 while (true) {\r                     String msgStr;\r                     Message msg;\r                     if (new Random().nextDouble() > 0.7) {\r                         if (new Random().nextDouble() > 0.5) {\r                             msgStr = \"This is a critical message.\";\r                             msg = new Message(msgStr);\r                             msg.setProperty(\"level\", \"critical\");\r                         } else {\r                             msgStr = \"This is a storage message.\";\r                             msg = new Message(msgStr);\r                             msg.setProperty(\"level\", \"storage\");\r                         }\r                     } else {\r                         double currentTemperature = minTemperature + rand.nextDouble() * 15;\r                         double currentHumidity = minHumidity + rand.nextDouble() * 20; \r                         TelemetryDataPoint telemetryDataPoint = new TelemetryDataPoint();\r                         telemetryDataPoint.deviceId = deviceId;\r                         telemetryDataPoint.temperature = currentTemperature;\r                         telemetryDataPoint.humidity = currentHumidity;\r \r                         msgStr = telemetryDataPoint.serialize();\r                         msg = new Message(msgStr);\r                     }\r \r                     System.out.println(\"Sending: \" + msgStr);\r \r                     Object lockobj = new Object();\r                     EventCallback callback = new EventCallback();\r                     client.sendEventAsync(msg, callback, lockobj);\r \r                     synchronized (lockobj) {\r                         lockobj.wait();\r                     }\r                     Thread.sleep(1000);\r                 }\r             } catch (InterruptedException e) {\r                 System.out.println(\"Finished.\");\r             }\r         }\r     }\r     ```\r    \r     此方法会将 `\"level\": \"critical\"` 和 `\"level\": \"storage\"` 属性随机添加到设备发送的消息，以模拟需要应用程序后端立即执行操作的消息或需要永久存储的消息。 应用程序会在消息属性（而非消息正文）中传递此信息，因此 IoT 中心可将消息路由到适当的消息目标。\r    \r    > [!NOTE]\r    > 可使用消息属性根据各种方案路由消息，包括冷路径处理和此处所示的热路径示例。\r    > \r    > \r \r 2. 保存并关闭 simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。\r \r     > [!NOTE]\r     > 强烈建议按 MSDN 文章 [Transient Fault Handling]（暂时性故障处理）中所述实施指数退让等重试策略。\r \r 3. 若要使用 Maven 构建 **simulated-device** 应用，请在 simulated-device 文件夹的命令提示符处执行以下命令：\r \r     ```cmd/sh\r     mvn clean package -DskipTests\r     ```\r \r ## <a name=\"add-a-queue-to-your-iot-hub-and-route-messages-to-it\"></a>向 IoT 中心添加一个队列并向其路由消息\r \r 本部分创建一个服务总线队列并将其连接到 IoT 中心，还会配置 IoT 中心，根据消息上的现有属性发送消息到队列。 若要深入了解如何处理来自服务总线队列的消息，请参阅 [队列入门][lnk-sb-queues-java]教程。\r \r 1. 按 [队列入门][lnk-sb-queues-java]中所述，创建服务总线队列。 记下命名空间和队列名称。\r \r 2. 在 Azure 门户中，打开 IoT 中心并单击“终结点” 。\r \r     ![IoT 中心的终结点][30]\r \r 3. 在“终结点”边栏选项卡中，单击顶部的“添加”，将队列添加到 IoT 中心。 将终结点命名为“CriticalQueue”，并使用下拉列表选择“服务总线队列”、队列所在的服务总线命名空间和队列名称。 完成后，单击底部的“**保存**”。\r \r     ![添加终结点][31]\r \r 4. 现在单击 IoT 中心的“路由”  。 单击边栏选项卡顶部的“添加” ，创建将消息路由到刚添加的队列的路由规则。 选择“DeviceTelemetry”  作为数据源。 输入 `level=\"critical\"` 作为条件，并选择刚添加为自定义终结点的队列作为路由规则终结点。  。\r \r     ![添加路由][32]\r \r     请确保回退路由设为“开”。 此设置是 IoT 中心的默认配置。\r \r     ![回退路由][33]\r \r ## <a name=\"optional-read-from-the-queue-endpoint\"></a>（可选）从队列终结点读取\r 可按照[队列入门][lnk-sb-queues-java]中的说明，选择性地从队列终结点读取消息。 将应用命名为 **read-critical-queue**。\r \r ## <a name=\"run-the-applications\"></a>运行应用程序\r 现在即可运行 3 个应用程序。\r \r 1. 若要运行 **read-d2c-messages** 应用程序，请在命令提示符或外壳处导航到 read-d2c 文件夹并执行以下命令：\r \r    ```cmd/sh\r    mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"\r    ```\r \r    ![运行 read-d2c-messages][readd2c]\r \r 2. 若要运行 **read-critical-queue** 应用程序，请在命令提示符或外壳处导航到 read-critical-queue 文件夹并执行以下命令：\r \r    ```cmd/sh\r    mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"\r    ```\r \r    ![运行 read-critical-messages][readqueue]\r \r 3. 若要运行 **simulated-device** 应用，请在命令提示符或 shell 处导航到 simulated-device 文件夹并执行以下命令：\r \r    ```cmd/sh\r    mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"\r    ```\r \r    ![运行 simulated-device][simulateddevice]\r \r ## <a name=\"next-steps\"></a>后续步骤\r 在本教程中，介绍了如何使用 IoT 中心的消息路由功能可靠地分派设备到云的消息。\r \r 通过[如何使用 IoT 中心发送云到设备的消息][lnk-c2d] ，了解如何将消息从解决方案后端发送到设备。\r \r 若要查看使用 IoT 中心完成端到端解决方案的示例，请参阅 [Azure IoT 套件][lnk-suite]。\r \r 若要深入了解如何使用 IoT 中心开发解决方案，请参阅 [IoT 中心开发人员指南]。\r \r 若要详细了解 IoT 中心的消息路由，请参阅[使用 IoT 中心发送和接收消息][lnk-devguide-messaging]。\r \r <!-- Images. -->\r <!-- TODO: UPDATE PICTURES -->\r [simulateddevice]: ./media/iot-hub-java-java-process-d2c/runsimulateddevice.png\r [readd2c]: ./media/iot-hub-java-java-process-d2c/runprocessinteractive.png\r [readqueue]: ./media/iot-hub-java-java-process-d2c/runprocessd2c.png\r \r [30]: ./media/iot-hub-java-java-process-d2c/click-endpoints.png\r [31]: ./media/iot-hub-java-java-process-d2c/endpoint-creation.png\r [32]: ./media/iot-hub-java-java-process-d2c/route-creation.png\r [33]: ./media/iot-hub-java-java-process-d2c/fallback-route.png\r \r <!-- Links -->\r \r [lnk-sb-queues-java]: ../service-bus-messaging/service-bus-java-how-to-use-queues.md\r \r [Azure 存储]: /storage/\r [Azure 服务总线]: /service-bus/\r \r [IoT 中心开发人员指南]: ./iot-hub-devguide.md\r [lnk-devguide-messaging]: ./iot-hub-devguide-messaging.md\r [simulated-device]: ./iot-hub-java-java-getstarted.md\r [Azure IoT 开发人员中心]: https://www.azure.cn/develop/iot\r [Transient Fault Handling]: https://msdn.microsoft.com/zh-cn/library/hh675232.aspx\r \r <!-- Links -->\r [Transient Fault Handling]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r \r [lnk-c2d]: ./iot-hub-java-java-c2d.md\r \r [lnk-suite]: /iot-suite/\r \r <!--Update_Description:update wording-->"}