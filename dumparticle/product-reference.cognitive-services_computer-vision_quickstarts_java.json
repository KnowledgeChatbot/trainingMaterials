{"Title":"计算机视觉 API Java 快速入门","Description":"获取信息和代码示例，帮助自己快速开始使用 Java 和认知服务中的计算机视觉 API。","Content":"# <a name=\"computer-vision-java-quick-starts\"></a>计算机视觉 Java 快速入门\r \r 本文提供信息和代码示例来帮助读者快速开始使用 Java 和计算机视觉 API 来完成以下任务：\r - [分析图像](#AnalyzeImage)\r - [使用特定于域的模型](#DomainSpecificModel)\r - [以智能方式生成缩略图](#GetThumbnail)\r - [从图像中检测并提取打印的文本](#OCR)\r - [从图像中检测并提取手写的文本](#RecognizeText)\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r - 在[此处](https://github.com/Microsoft/Cognitive-vision-android)获取 Microsoft 计算机视觉 Android SDK。\r - 若要使用计算机视觉 API，需要一个订阅密钥。 可在[此处](/cognitive-services/Computer-vision/Vision-API-How-to-Topics/HowToSubscribe)获取免费订阅密钥。\r \r ## 使用计算机视觉 API 通过 Java 分析图像 <a name=\"AnalyzeImage\"> </a>\r \r 使用[“分析图像”方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fa)，可以基于图像内容提取视觉特征。 可以上传图像或指定图像 URL 并选择要返回的特征，包括：\r - 与图像内容相关的标记的详细列表。\r - 完整句子中图像内容的说明。\r - 图像包含的任何人脸的坐标、性别和年龄。\r - ImageType（剪贴画或线条绘图）。\r - 主色、强调色，或者图像是否为黑白色。\r - 在此[分类](/cognitive-services/computer-vision/category-taxonomy)中定义的类别。\r - 图像是否包含成人或性暗示内容？\r \r ### <a name=\"analyze-an-image-java-example-request\"></a>分析图像 Java 示例请求\r \r 若要运行示例，请执行以下步骤：\r \r 1. 创建新的命令行应用。\r 1. 将 Main 类替换为以下代码（保留所有 `package` 语句）。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 根据需要更改 `uriBase` 值，以使用订阅密钥的获取位置。\r 1. 从 Maven 存储库将这些全局库下载到项目中的 `lib` 目录：\r    - `org.apache.httpcomponents:httpclient:4.2.4`\r    - `org.json:json:20170516`\r 1. 运行“Main”。\r \r ```java\r // This sample uses the Apache HTTP client library(org.apache.httpcomponents:httpclient:4.2.4)\r // and the org.json library (org.json:json:20170516).\r \r import java.net.URI;\r import org.apache.http.HttpEntity;\r import org.apache.http.HttpResponse;\r import org.apache.http.client.HttpClient;\r import org.apache.http.client.methods.HttpPost;\r import org.apache.http.entity.StringEntity;\r import org.apache.http.client.utils.URIBuilder;\r import org.apache.http.impl.client.DefaultHttpClient;\r import org.apache.http.util.EntityUtils;\r import org.json.JSONObject;\r \r public class Main\r {\r     // **********************************************\r     // *** Update or verify the following values. ***\r     // **********************************************\r \r     // Replace the subscriptionKey string value with your valid subscription key.\r     public static final String subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r     public static final String uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/analyze\";\r \r     public static void main(String[] args)\r     {\r         HttpClient httpclient = new DefaultHttpClient();\r \r         try\r         {\r             URIBuilder builder = new URIBuilder(uriBase);\r \r             // Request parameters. All of them are optional.\r             builder.setParameter(\"visualFeatures\", \"Categories,Description,Color\");\r             builder.setParameter(\"language\", \"en\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = builder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request body.\r             StringEntity reqEntity = new StringEntity(\"{\\\"url\\\":\\\"https://upload.wikimedia.org/wikipedia/commons/1/12/Broadway_and_Times_Square_by_night.jpg\\\"}\");\r             request.setEntity(reqEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpclient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             if (entity != null)\r             {\r                 // Format and display the JSON response.\r                 String jsonString = EntityUtils.toString(entity);\r                 JSONObject json = new JSONObject(jsonString);\r                 System.out.println(\"REST Response:\\n\");\r                 System.out.println(json.toString(2));\r             }\r         }\r         catch (Exception e)\r         {\r             // Display error message.\r             System.out.println(e.getMessage());\r         }\r     }\r }\r ```\r \r ### <a name=\"analyze-an-image-response\"></a>分析图像响应\r \r 成功响应将以 JSON 格式返回。 程序应生成如下所示的输出：\r \r ```json\r REST Response:\r \r {\r   \"metadata\": {\r     \"width\": 1826,\r     \"format\": \"Jpeg\",\r     \"height\": 2436\r   },\r   \"color\": {\r     \"dominantColorForeground\": \"Brown\",\r     \"isBWImg\": false,\r     \"accentColor\": \"B74314\",\r     \"dominantColorBackground\": \"Brown\",\r     \"dominantColors\": [\"Brown\"]\r   },\r   \"requestId\": \"bbffe1a1-4fa3-4a6b-a4d5-a4964c58a811\",\r   \"description\": {\r     \"captions\": [{\r       \"confidence\": 0.8241405091548035,\r       \"text\": \"a group of people on a city street filled with traffic at night\"\r     }],\r     \"tags\": [\r       \"outdoor\",\r       \"building\",\r       \"street\",\r       \"city\",\r       \"busy\",\r       \"people\",\r       \"filled\",\r       \"traffic\",\r       \"many\",\r       \"table\",\r       \"car\",\r       \"group\",\r       \"walking\",\r       \"bunch\",\r       \"crowded\",\r       \"large\",\r       \"night\",\r       \"light\",\r       \"standing\",\r       \"man\",\r       \"tall\",\r       \"umbrella\",\r       \"riding\",\r       \"sign\",\r       \"crowd\"\r     ]\r   },\r   \"categories\": [{\r     \"score\": 0.625,\r     \"name\": \"outdoor_street\"\r   }]\r }\r \r Process finished with exit code 0\r ```\r \r ## 使用特定于域的模型 <a name=\"DomainSpecificModel\"> </a>\r \r 特定于域的模型是经过训练，可在图像中识别一组特定对象的模型。 当前可用的两个特定于域的模型为 celebrities 和 landmarks。 以下示例识别图像中的地标。\r \r ### <a name=\"landmark-java-example-request\"></a>地标 Java 示例请求\r \r 若要运行示例，请执行以下步骤：\r \r 1. 创建新的命令行应用。\r 1. 将 Main 类替换为以下代码（保留所有 `package` 语句）。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 根据需要更改 `uriBase` 值，以使用订阅密钥的获取位置。\r 1. 从 Maven 存储库将这些库下载项目中的 `lib` 目录：\r    - `org.apache.httpcomponents:httpclient:4.2.4`\r    - `org.json:json:20170516`\r 1. 运行“Main”。\r \r ```java\r // This sample uses the Apache HTTP client library(org.apache.httpcomponents:httpclient:4.2.4)\r // and the org.json library (org.json:json:20170516).\r \r import java.net.URI;\r import org.apache.http.HttpEntity;\r import org.apache.http.HttpResponse;\r import org.apache.http.client.HttpClient;\r import org.apache.http.client.methods.HttpPost;\r import org.apache.http.entity.StringEntity;\r import org.apache.http.client.utils.URIBuilder;\r import org.apache.http.impl.client.DefaultHttpClient;\r import org.apache.http.util.EntityUtils;\r import org.json.JSONObject;\r \r public class Main\r {\r     // **********************************************\r     // *** Update or verify the following values. ***\r     // **********************************************\r \r     // Replace the subscriptionKey string value with your valid subscription key.\r     public static final String subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r     // if you want to use the celebrities model, change \"landmarks\" to \"celebrities\" here and in\r     // uriBuilder.setParameter to use the Celebrities model.\r     public static final String uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/models/landmarks/analyze\";\r \r     public static void main(String[] args)\r     {\r         HttpClient httpClient = new DefaultHttpClient();\r \r         try\r         {\r             URIBuilder uriBuilder = new URIBuilder(uriBase);\r \r             // Request parameters.\r             // To use the Celebrities model, change \"landmarks\" to \"celebrities\" here and in uriBase.\r             uriBuilder.setParameter(\"model\", \"landmarks\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = uriBuilder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request body.\r             StringEntity requestEntity = new StringEntity(\"{\\\"url\\\":\\\"https://upload.wikimedia.org/wikipedia/commons/2/23/Space_Needle_2011-07-04.jpg\\\"}\");\r             request.setEntity(requestEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpClient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             if (entity != null)\r             {\r                 // Format and display the JSON response.\r                 String jsonString = EntityUtils.toString(entity);\r                 JSONObject json = new JSONObject(jsonString);\r                 System.out.println(\"REST Response:\\n\");\r                 System.out.println(json.toString(2));\r             }\r         }\r         catch (Exception e)\r         {\r             // Display error message.\r             System.out.println(e.getMessage());\r         }\r     }\r }\r ```\r \r ### <a name=\"landmark-example-response\"></a>地标示例响应\r \r 成功响应将以 JSON 格式返回。 程序应生成如下所示的输出：  \r \r ```json\r REST Response:\r \r {\r   \"result\": {\"landmarks\": [{\r     \"confidence\": 0.9998178,\r     \"name\": \"Space Needle\"\r   }]},\r   \"metadata\": {\r     \"width\": 2096,\r     \"format\": \"Jpeg\",\r     \"height\": 4132\r   },\r   \"requestId\": \"8551c2b7-fcf9-4932-aff3-87e7f744343f\"\r }\r \r Process finished with exit code 0\r ```\r \r ## 使用计算机视觉 API 通过 Java 获取缩略图 <a name=\"GetThumbnail\"> </a>\r \r 使用[“获取缩略图”方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fb)可以根据图像的兴趣区域 (ROI) 将该图像裁剪为所需的高度和宽度。 为缩略图设置的纵横比可以不同于输入图像的纵横比。\r \r ### <a name=\"get-a-thumbnail-java-example-request\"></a>获取缩略图 Java 示例请求\r \r 若要运行示例，请执行以下步骤：\r \r 1. 创建新的命令行应用。\r 1. 将 Main 类替换为以下代码（保留所有 `package` 语句）。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 根据需要更改 `uriBase` 值，以使用订阅密钥的获取位置。\r 1. 从 Maven 存储库将这些库下载项目中的 `lib` 目录：\r    - `org.apache.httpcomponents:httpclient:4.2.4`\r    - `org.json:json:20170516`\r 1. 运行“Main”。\r \r ```java\r // This sample uses the Apache HTTP client library(org.apache.httpcomponents:httpclient:4.2.4)\r // and the org.json library (org.json:json:20170516).\r \r import java.awt.*;\r import javax.swing.*;\r import java.net.URI;\r import java.io.InputStream;\r import javax.imageio.ImageIO;\r import java.awt.image.BufferedImage;\r import org.apache.http.HttpEntity;\r import org.apache.http.HttpResponse;\r import org.apache.http.client.HttpClient;\r import org.apache.http.client.methods.HttpPost;\r import org.apache.http.entity.StringEntity;\r import org.apache.http.client.utils.URIBuilder;\r import org.apache.http.impl.client.DefaultHttpClient;\r import org.apache.http.util.EntityUtils;\r import org.json.JSONObject;\r \r public class Main\r {\r     // **********************************************\r     // *** Update or verify the following values. ***\r     // **********************************************\r \r     // Replace the subscriptionKey string value with your valid subscription key.\r     public static final String subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r     public static final String uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/generateThumbnail\";\r \r \r     public static void main(String[] args)\r     {\r         HttpClient httpClient = new DefaultHttpClient();\r \r         try\r         {\r             URIBuilder uriBuilder = new URIBuilder(uriBase);\r \r             // Request parameters.\r             uriBuilder.setParameter(\"width\", \"100\");\r             uriBuilder.setParameter(\"height\", \"150\");\r             uriBuilder.setParameter(\"smartCropping\", \"true\");\r \r             // Prepare the URI for the REST API call.\r             URI uri = uriBuilder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request body.\r             StringEntity requestEntity = new StringEntity(\"{\\\"url\\\":\\\"https://upload.wikimedia.org/wikipedia/commons/9/94/Bloodhound_Puppy.jpg\\\"}\");\r             request.setEntity(requestEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpClient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             // Check for success.\r             if (response.getStatusLine().getStatusCode() == 200)\r             {\r                 // Display the thumbnail.\r                 System.out.println(\"\\nDisplaying thumbnail.\\n\");\r                 displayImage(entity.getContent());\r             }\r             else\r             {\r                 // Format and display the JSON error message.\r                 String jsonString = EntityUtils.toString(entity);\r                 JSONObject json = new JSONObject(jsonString);\r                 System.out.println(\"Error:\\n\");\r                 System.out.println(json.toString(2));\r             }\r         }\r         catch (Exception e)\r         {\r             System.out.println(e.getMessage());\r         }\r     }\r \r     // Displays the given input stream as an image.\r     private static void displayImage(InputStream inputStream)\r     {\r         try {\r             BufferedImage bufferedImage = ImageIO.read(inputStream);\r \r             ImageIcon imageIcon = new ImageIcon(bufferedImage);\r \r             JLabel jLabel = new JLabel();\r             jLabel.setIcon(imageIcon);\r \r             JFrame jFrame = new JFrame();\r             jFrame.setLayout(new FlowLayout());\r             jFrame.setSize(100, 150);\r \r             jFrame.add(jLabel);\r             jFrame.setVisible(true);\r             jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r         }\r         catch (Exception e) {\r             System.out.println(e.getMessage());\r         }\r     }\r }\r ```\r \r ### <a name=\"get-a-thumbnail-response\"></a>获取缩略图响应\r \r 成功响应包含缩略图二进制文件。 如果请求失败，则响应包含错误代码和消息，以帮助确定问题所在。\r \r ## 使用计算机视觉 API 通过 Java 执行光学字符识别 (OCR) <a name=\"OCR\"> </a>\r \r 使用[光学字符识别 (OCR) 方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fc)可以检测图像中的打印文本，并将识别到的字符提取到机器可用的字符流中。\r \r ### <a name=\"ocr-java-example-request\"></a>OCR Java 示例请求\r \r 若要运行示例，请执行以下步骤：\r \r 1. 创建新的命令行应用。\r 1. 将 Main 类替换为以下代码（保留所有 `package` 语句）。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 根据需要更改 `uriBase` 值，以使用订阅密钥的获取位置。\r 1. 从 Maven 存储库将这些库下载项目中的 `lib` 目录：\r    - `org.apache.httpcomponents:httpclient:4.2.4`\r    - `org.json:json:20170516`\r 1. 运行“Main”。\r \r ```java\r // This sample uses the Apache HTTP client library(org.apache.httpcomponents:httpclient:4.2.4)\r // and the org.json library (org.json:json:20170516).\r \r import java.net.URI;\r import org.apache.http.HttpEntity;\r import org.apache.http.HttpResponse;\r import org.apache.http.client.HttpClient;\r import org.apache.http.client.methods.HttpPost;\r import org.apache.http.entity.StringEntity;\r import org.apache.http.client.utils.URIBuilder;\r import org.apache.http.impl.client.DefaultHttpClient;\r import org.apache.http.util.EntityUtils;\r import org.json.JSONObject;\r \r public class Main\r {\r     // **********************************************\r     // *** Update or verify the following values. ***\r     // **********************************************\r \r     // Replace the subscriptionKey string value with your valid subscription key.\r     public static final String subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r     // if you want to use the celebrities model, change \"landmarks\" to \"celebrities\" here and in\r     // uriBuilder.setParameter to use the Celebrities model.\r     public static final String uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/ocr\";\r \r \r     public static void main(String[] args)\r     {\r         HttpClient httpClient = new DefaultHttpClient();\r \r         try\r         {\r             URIBuilder uriBuilder = new URIBuilder(uriBase);\r \r             uriBuilder.setParameter(\"language\", \"unk\");\r             uriBuilder.setParameter(\"detectOrientation \", \"true\");\r \r             // Request parameters.\r             URI uri = uriBuilder.build();\r             HttpPost request = new HttpPost(uri);\r \r             // Request headers.\r             request.setHeader(\"Content-Type\", \"application/json\");\r             request.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request body.\r             StringEntity requestEntity =\r                     new StringEntity(\"{\\\"url\\\":\\\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Atomist_quote_from_Democritus.png/338px-Atomist_quote_from_Democritus.png\\\"}\");\r             request.setEntity(requestEntity);\r \r             // Execute the REST API call and get the response entity.\r             HttpResponse response = httpClient.execute(request);\r             HttpEntity entity = response.getEntity();\r \r             if (entity != null)\r             {\r                 // Format and display the JSON response.\r                 String jsonString = EntityUtils.toString(entity);\r                 JSONObject json = new JSONObject(jsonString);\r                 System.out.println(\"REST Response:\\n\");\r                 System.out.println(json.toString(2));\r             }\r         }\r         catch (Exception e)\r         {\r             // Display error message.\r             System.out.println(e.getMessage());\r         }\r     }\r }\r ```\r \r ### <a name=\"ocr-example-response\"></a>OCR 示例响应\r \r 成功响应将以 JSON 格式返回。 OCR 结果包括检测到的文本、区域范围框、线条和单词。\r \r 程序应生成如下所示的输出：\r \r ```json\r REST Response:\r \r {\r   \"orientation\": \"Up\",\r   \"regions\": [{\r     \"boundingBox\": \"21,16,304,451\",\r     \"lines\": [\r       {\r         \"boundingBox\": \"28,16,288,41\",\r         \"words\": [{\r           \"boundingBox\": \"28,16,288,41\",\r           \"text\": \"NOTHING\"\r         }]\r       },\r       {\r         \"boundingBox\": \"27,66,283,52\",\r         \"words\": [{\r           \"boundingBox\": \"27,66,283,52\",\r           \"text\": \"EXISTS\"\r         }]\r       },\r       {\r         \"boundingBox\": \"27,128,292,49\",\r         \"words\": [{\r           \"boundingBox\": \"27,128,292,49\",\r           \"text\": \"EXCEPT\"\r         }]\r       },\r       {\r         \"boundingBox\": \"24,188,292,54\",\r         \"words\": [{\r           \"boundingBox\": \"24,188,292,54\",\r           \"text\": \"ATOMS\"\r         }]\r       },\r       {\r         \"boundingBox\": \"22,253,297,32\",\r         \"words\": [\r           {\r             \"boundingBox\": \"22,253,105,32\",\r             \"text\": \"AND\"\r           },\r           {\r             \"boundingBox\": \"144,253,175,32\",\r             \"text\": \"EMPTY\"\r           }\r         ]\r       },\r       {\r         \"boundingBox\": \"21,298,304,60\",\r         \"words\": [{\r           \"boundingBox\": \"21,298,304,60\",\r           \"text\": \"SPACE.\"\r         }]\r       },\r       {\r         \"boundingBox\": \"26,387,294,37\",\r         \"words\": [\r           {\r             \"boundingBox\": \"26,387,210,37\",\r             \"text\": \"Everything\"\r           },\r           {\r             \"boundingBox\": \"249,389,71,27\",\r             \"text\": \"else\"\r           }\r         ]\r       },\r       {\r         \"boundingBox\": \"127,431,198,36\",\r         \"words\": [\r           {\r             \"boundingBox\": \"127,431,31,29\",\r             \"text\": \"is\"\r           },\r           {\r             \"boundingBox\": \"172,431,153,36\",\r             \"text\": \"opinion.\"\r           }\r         ]\r       }\r     ]\r   }],\r   \"textAngle\": 0,\r   \"language\": \"en\"\r }\r \r Process finished with exit code 0\r ```\r \r ## 使用计算机视觉 API 通过 Java 执行文本识别 <a name=\"RecognizeText\"> </a>\r \r ### <a name=\"handwriting-recognition-java-example\"></a>手写文本识别 Java 示例\r \r 若要运行示例，请执行以下步骤：\r \r 1. 创建新的命令行应用。\r 1. 将 Main 类替换为以下代码（保留所有 `package` 语句）。\r 1. 将 `subscriptionKey` 值替换为有效的订阅密钥。\r 1. 根据需要更改 `uriBase` 值，以使用订阅密钥的获取位置。\r 1. 从 Maven 存储库将这些库下载项目中的 `lib` 目录：\r    - `org.apache.httpcomponents:httpclient:4.2.4`\r    - `org.json:json:20170516`\r 1. 运行“Main”。\r \r ```java\r // This sample uses the Apache HTTP client library(org.apache.httpcomponents:httpclient:4.2.4)\r // and the org.json library (org.json:json:20170516).\r \r import java.net.URI;\r import org.apache.http.HttpEntity;\r import org.apache.http.HttpResponse;\r import org.apache.http.client.HttpClient;\r import org.apache.http.client.methods.HttpGet;\r import org.apache.http.client.methods.HttpPost;\r import org.apache.http.entity.StringEntity;\r import org.apache.http.impl.client.DefaultHttpClient;\r import org.apache.http.util.EntityUtils;\r import org.apache.http.Header;\r import org.json.JSONObject;\r \r public class Main\r {\r     // **********************************************\r     // *** Update or verify the following values. ***\r     // **********************************************\r \r     // Replace the subscriptionKey string value with your valid subscription key.\r     public static final String subscriptionKey = \"13hc77781f7e4b19b5fcdd72a8df7156\";\r \r     // For printed text, set \"handwriting\" to false.\r     public static final String uriBase = \"https://api.cognitive.azure.cn/vision/v1.0/recognizeText?handwriting=true\";\r \r     public static void main(String[] args)\r     {\r         HttpClient textClient = new DefaultHttpClient();\r         HttpClient resultClient = new DefaultHttpClient();\r \r         try\r         {\r             // This operation requrires two REST API calls. One to submit the image for processing,\r             // the other to retrieve the text found in the image.\r             //\r             // Begin the REST API call to submit the image for processing.\r             URI uri = new URI(uriBase);\r             HttpPost textRequest = new HttpPost(uri);\r \r             // Request headers. Another valid content type is \"application/octet-stream\".\r             textRequest.setHeader(\"Content-Type\", \"application/json\");\r             textRequest.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             // Request body.\r             StringEntity requestEntity =\r                     new StringEntity(\"{\\\"url\\\":\\\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Cursive_Writing_on_Notebook_paper.jpg/800px-Cursive_Writing_on_Notebook_paper.jpg\\\"}\");\r             textRequest.setEntity(requestEntity);\r \r             // Execute the first REST API call to detect the text.\r             HttpResponse textResponse = textClient.execute(textRequest);\r \r             // Check for success.\r             if (textResponse.getStatusLine().getStatusCode() != 202)\r             {\r                 // Format and display the JSON error message.\r                 HttpEntity entity = textResponse.getEntity();\r                 String jsonString = EntityUtils.toString(entity);\r                 JSONObject json = new JSONObject(jsonString);\r                 System.out.println(\"Error:\\n\");\r                 System.out.println(json.toString(2));\r                 return;\r             }\r \r             String operationLocation = null;\r \r             // The 'Operation-Location' in the response contains the URI to retrieve the recognized text.\r             Header[] responseHeaders = textResponse.getAllHeaders();\r             for(Header header : responseHeaders) {\r                 if(header.getName().equals(\"Operation-Location\"))\r                 {\r                     // This string is the URI where you can get the text recognition operation result.\r                     operationLocation = header.getValue();\r                     break;\r                 }\r             }\r \r             // NOTE: The response may not be immediately available. Handwriting recognition is an\r             // async operation that can take a variable amount of time depending on the length\r             // of the text you want to recognize. You may need to wait or retry this operation.\r \r             System.out.println(\"\\nHandwritten text submitted. Waiting 10 seconds to retrieve the recognized text.\\n\");\r             Thread.sleep(10000);\r \r             // Execute the second REST API call and get the response.\r             HttpGet resultRequest = new HttpGet(operationLocation);\r             resultRequest.setHeader(\"Ocp-Apim-Subscription-Key\", subscriptionKey);\r \r             HttpResponse resultResponse = resultClient.execute(resultRequest);\r             HttpEntity responseEntity = resultResponse.getEntity();\r \r             if (responseEntity != null)\r             {\r                 // Format and display the JSON response.\r                 String jsonString = EntityUtils.toString(responseEntity);\r                 JSONObject json = new JSONObject(jsonString);\r                 System.out.println(\"Text recognition result response: \\n\");\r                 System.out.println(json.toString(2));\r             }\r         }\r         catch (Exception e)\r         {\r             System.out.println(e.getMessage());\r         }\r     }\r }\r ```\r \r ### <a name=\"handwriting-recognition-java-example-response\"></a>手写文本识别 Java 示例响应\r \r 成功响应将以 JSON 格式返回。 手写文本识别结果包括检测到的文本、区域范围框、线条和单词。\r \r 程序应生成如下所示的输出：\r \r ```json\r Handwritten text submitted. Waiting 10 seconds to retrieve the recognized text.\r \r Text recognition result response: \r \r {\r   \"status\": \"Succeeded\",\r   \"recognitionResult\": {\"lines\": [\r     {\r       \"boundingBox\": [\r         2,\r         84,\r         783,\r         96,\r         782,\r         154,\r         1,\r         148\r       ],\r       \"words\": [\r         {\r           \"boundingBox\": [\r             6,\r             86,\r             92,\r             87,\r             71,\r             151,\r             0,\r             150\r           ],\r           \"text\": \"Pack\"\r         },\r         {\r           \"boundingBox\": [\r             86,\r             87,\r             172,\r             88,\r             150,\r             152,\r             64,\r             151\r           ],\r           \"text\": \"my\"\r         },\r         {\r           \"boundingBox\": [\r             165,\r             88,\r             241,\r             89,\r             219,\r             152,\r             144,\r             152\r           ],\r           \"text\": \"box\"\r         },\r         {\r           \"boundingBox\": [\r             234,\r             89,\r             343,\r             90,\r             322,\r             154,\r             213,\r             152\r           ],\r           \"text\": \"with\"\r         },\r         {\r           \"boundingBox\": [\r             347,\r             90,\r             432,\r             91,\r             411,\r             154,\r             325,\r             154\r           ],\r           \"text\": \"five\"\r         },\r         {\r           \"boundingBox\": [\r             432,\r             91,\r             538,\r             92,\r             516,\r             154,\r             411,\r             154\r           ],\r           \"text\": \"dozen\"\r         },\r         {\r           \"boundingBox\": [\r             554,\r             92,\r             696,\r             94,\r             675,\r             154,\r             533,\r             154\r           ],\r           \"text\": \"liquor\"\r         },\r         {\r           \"boundingBox\": [\r             710,\r             94,\r             800,\r             96,\r             800,\r             154,\r             688,\r             154\r           ],\r           \"text\": \"jugs\"\r         }\r       ],\r       \"text\": \"Pack my box with five dozen liquor jugs\"\r     },\r     {\r       \"boundingBox\": [\r         2,\r         52,\r         65,\r         46,\r         69,\r         89,\r         7,\r         95\r       ],\r       \"words\": [{\r         \"boundingBox\": [\r           0,\r           62,\r           79,\r           39,\r           94,\r           82,\r           0,\r           105\r         ],\r         \"text\": \"dog\"\r       }],\r       \"text\": \"dog\"\r     },\r     {\r       \"boundingBox\": [\r         6,\r         2,\r         771,\r         13,\r         770,\r         75,\r         5,\r         64\r       ],\r       \"words\": [\r         {\r           \"boundingBox\": [\r             8,\r             4,\r             92,\r             5,\r             77,\r             71,\r             0,\r             71\r           ],\r           \"text\": \"The\"\r         },\r         {\r           \"boundingBox\": [\r             89,\r             5,\r             188,\r             5,\r             173,\r             72,\r             74,\r             71\r           ],\r           \"text\": \"quick\"\r         },\r         {\r           \"boundingBox\": [\r             188,\r             5,\r             323,\r             6,\r             308,\r             73,\r             173,\r             72\r           ],\r           \"text\": \"brown\"\r         },\r         {\r           \"boundingBox\": [\r             316,\r             6,\r             386,\r             6,\r             371,\r             73,\r             302,\r             73\r           ],\r           \"text\": \"fox\"\r         },\r         {\r           \"boundingBox\": [\r             396,\r             7,\r             508,\r             7,\r             493,\r             74,\r             381,\r             73\r           ],\r           \"text\": \"jumps\"\r         },\r         {\r           \"boundingBox\": [\r             501,\r             7,\r             604,\r             8,\r             589,\r             75,\r             487,\r             74\r           ],\r           \"text\": \"over\"\r         },\r         {\r           \"boundingBox\": [\r             600,\r             8,\r             673,\r             8,\r             658,\r             75,\r             586,\r             75\r           ],\r           \"text\": \"the\"\r         },\r         {\r           \"boundingBox\": [\r             670,\r             8,\r             800,\r             9,\r             787,\r             76,\r             655,\r             75\r           ],\r           \"text\": \"lazy\"\r         }\r       ],\r       \"text\": \"The quick brown fox jumps over the lazy\"\r     }\r   ]}\r }\r \r Process finished with exit code 0\r ```\r \r "}