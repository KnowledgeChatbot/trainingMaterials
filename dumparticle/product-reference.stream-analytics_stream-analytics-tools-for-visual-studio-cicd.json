{"Title":"使用流分析 Visual Studio 工具设置持续集成和部署进程","Description":"使用流分析 Visual Studio 工具设置持续集成和部署过程的教程","Content":"# <a name=\"use-stream-analytics-visual-studio-tools-to-set-up-a-continuous-integration-and-deployment-process\"></a>使用流分析 Visual Studio 工具设置持续集成和部署过程\r 在本教程中，了解如何使用 Azure 流分析 Visual Studio 工具设置持续集成和部署过程。\r \r 最新版本（2.3.0000.0 或以上）的[用于 Visual Studio 的流分析工具](/stream-analytics/stream-analytics-tools-for-visual-studio)增加了对 MSBuild 的支持。\r \r 此外，还有新发布的 NuGet 包 [Microsoft.Azure.Stream Analytics.CICD](https://www.nuget.org/packages/Microsoft.Azure.StreamAnalytics.CICD/)。 它提供了 MSBuild、本地运行和部署工具，用于支持流分析 Visual Studio 项目的持续集成和部署进程。 \r > [!NOTE] \r NuGet 包只能与 2.3.0000.0 或以上版本的用于 Visual Studio 的流分析工具配合使用。 如果具有在以前版本的 Visual Studio 工具中创建的项目，只需使用 2.3.0000.0 或以上版本将其打开并保存即可。 然后即可启用新功能。 \r \r 了解如何使用[用于 Visual Studio 的流分析工具](/stream-analytics/stream-analytics-tools-for-visual-studio)。\r \r ## <a name=\"msbuild\"></a>MSBuild\r 同标准 Visual Studio MSBuild 体验一样，可通过两种方式生成项目。 可右键单击该项目，然后选择“生成”。 还可从命令行使用 NuGet 包中的 MSBuild。\r ```\r ./build/msbuild /t:build [Your Project Full Path] /p:CompilerTaskAssemblyFile=Microsoft.WindowsAzure.StreamAnalytics.Common.CompileService.dll  /p:ASATargetsFilePath=\"[NuGet Package Local Path]\\build\\StreamAnalytics.targets\"\r \r ```\r \r 成功生成流分析 Visual Studio 项目后，会在 bin/[Debug/Retail]/Deploy 文件夹下生成以下两个 Azure 资源管理器模板文件： \r \r *  资源管理器模板文件\r \r        [ProjectName].JobTemplate.json \r \r *  资源管理器参数文件\r \r        [ProjectName].JobTemplate.parameters.json   \r \r parameters.json 文件中的默认参数来自 Visual Studio 项目中的设置。 如果要部署到其他环境，请相应地替换参数。\r \r > [!NOTE] \r > 对于所有凭据，默认值均设置为 null。 部署到云之前，必须先设置这些值。\r \r ```json\r \"Input_EntryStream_sharedAccessPolicyKey\": {\r       \"value\": null\r     },\r ```\r 深入了解如何[使用资源管理器模板文件和 Azure PowerShell 进行部署](/azure-resource-manager/resource-group-template-deploy)。 深入了解如何 [use an object as a parameter in a Resource Manager template](https://docs.microsoft.com/azure/architecture/building-blocks/extending-templates/objects-as-parameters)（将对象用作资源管理器模板中的参数）。\r \r ## <a name=\"command-line-tool\"></a>命令行工具\r \r ### <a name=\"build-the-project\"></a>生成项目\r NuGet 包具有一个名为 SA.exe 的命令行工具。 该工具支持在任意计算机上生成项目并进行本地测试，可在持续集成和持续交付进程中使用。 \r \r 默认情况下，部署文件位于当前目录下。 可通过使用以下 -OutputPath 参数指定输出路径：\r \r ```\r ./tools/SA.exe build -Project [Your Project Full Path] [-OutputPath <outputPath>] \r ```\r \r ### <a name=\"test-the-script-locally\"></a>在本地测试脚本\r \r 如果项目已在 Visual Studio 中指定本地输入文件，则可使用 localrun 命令运行自动化脚本测试。 输出结果位于当前目录下。\r \r ```\r localrun -Project [ProjectFullPath]\r ```\r \r ### <a name=\"generate-a-job-definition-file-to-use-with-the-stream-analytics-powershell-api\"></a>生成与流分析 PowerShell API 配合使用的作业定义文件\r \r arm 命令将通过内部版本生成的作业模板和作业模板参数文件视为输入。 然后将其合并为可与流分析 PowerShell API 配合使用的作业定义 JSON 文件。\r \r ```\r arm -JobTemplate <templateFilePath> -JobParameterFile <jobParameterFilePath> [-OutputFile <asaArmFilePath>]\r ```\r 示例：\r ```\r ./tools/SA.exe arm -JobTemplate \"ProjectA.JobTemplate.json\" -JobParameterFile \"ProjectA.JobTemplate.parameters.json\" -OutputFile \"JobDefinition.json\" \r ```\r <!--Update_Description: wording update -->"}