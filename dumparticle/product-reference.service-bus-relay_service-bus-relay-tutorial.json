{"Title":"Azure 服务总线 WCF 中继教程","Description":"使用 WCF 中继构建服务总线客户端应用程序和服务。","Content":"# <a name=\"azure-wcf-relay-tutorial\"></a>Azure WCF 中继教程\r \r 本教程介绍如何使用 Azure 中继功能构建简单的 WCF 中继客户端应用程序和服务。 有关使用[服务总线消息传送](../service-bus-messaging/service-bus-messaging-overview.md#brokered-messaging)的类似教程，请参阅[服务总线队列入门](../service-bus-messaging/service-bus-dotnet-get-started-with-queues.md)。\r \r 通过此教程，可以了解创建 WCF 中继客户端和服务应用程序所需的步骤。 正如原始的 WCF，服务是公开一个或多个终结点的构造，其中每个终结点都公开一个或多个服务操作。 服务的终结点用于指定可在其中找到服务的地址、包含客户端必须与服务进行通信的信息的绑定，以及定义服务向其客户端提供的功能的协定。 WCF 和 WCF 中继之间的主要区别在于：终结点在云中公开，而不是在本地计算机中公开。\r \r 完成本教程中的一系列主题后，你会有一项正在运行的服务和可以调用服务操作的客户端。 第一个主题描述了如何设置帐户。 后续步骤描述了如何定义使用协定的服务、如何实现服务，以及如何使用代码配置该服务。 这些主题还描述了如何托管和运行该服务。 创建的服务是自托管的，并且客户端和服务在同一台计算机上运行。 可以通过使用代码或配置文件配置服务。\r \r 最后三个步骤介绍如何创建客户端应用程序、如何配置客户端应用程序，以及如何创建和使用可以访问主机功能的客户端。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 要完成本教程，需要以下各项：\r \r * [Microsoft Visual Studio 2015 或更高版本](http://visualstudio.com)。 本教程使用 Visual Studio 2017。\r * 有效的 Azure 帐户。 如果没有帐户，只需几分钟的时间就能创建一个帐户。 有关详细信息，请参阅 [Azure 试用](https://www.azure.cn/pricing/1rmb-trial/)。\r \r ## <a name=\"create-a-service-namespace\"></a>创建服务命名空间\r \r 第一步是创建命名空间并获取[共享访问签名 (SAS)](../service-bus-messaging/service-bus-sas.md) 密钥。 命名空间为每个通过中继服务公开的应用程序提供应用程序边界。 创建服务命名空间时，系统自动生成 SAS 密钥。 服务命名空间与 SAS 密钥的组合为 Azure 提供了用于验证应用程序访问权限的凭据。 请按照[此处的说明](./relay-create-namespace-portal.md)创建中继命名空间。\r \r ## <a name=\"define-a-wcf-service-contract\"></a>定义 WCF 服务协定\r 此服务协定指定服务支持的操作（方法或函数的 Web 服务术语）。 约定通过定义 C++、C# 或 Visual Basic 接口来创建。 接口中的每个方法都对应一个特定的服务操作。 必须将 [ServiceContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.servicecontractattribute.aspx) 属性应用于每个接口，并且必须将 [OperationContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx) 属性应用于每个操作。 如果具有 [ServiceContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.servicecontractattribute.aspx) 属性的接口中的方法没有 [OperationContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx) 属性，则该方法是不公开的。 该过程后面的示例中提供了这些任务的代码。 有关协定和服务的更多讨论，请参阅 WCF 文档中的[设计和实现服务](https://msdn.microsoft.com/library/ms729746.aspx)。\r \r ### <a name=\"create-a-relay-contract-with-an-interface\"></a>使用接口创建中继协定\r \r 1. 在“开始”菜单中右键单击 Visual Studio，以便以管理员身份启动该程序，然后选择“以管理员身份运行”。\r 2. 创建新的控制台应用程序项目。 单击“文件”菜单并选择“新建”，然后单击“项目”。 在“新建项目”对话框中，单击“Visual C#”（如果“Visual C#”未出现，则在“其他语言”下方查看）。 单击“控制台应用(.NET Framework)”模板，并将其命名为 **EchoService**。 单击“确定”以创建该项目  。\r \r     ![][2]\r 3. 安装服务总线 NuGet 包。 该包自动添加对服务总线库和 WCF **System.ServiceModel**的引用。 [System.ServiceModel](https://msdn.microsoft.com/library/system.servicemodel.aspx) 是用于以编程方式访问 WCF 基本功能的命名空间。 服务总线使用 WCF 的许多对象和属性来定义服务约定。\r \r     在解决方案资源管理器中右键单击该项目，然后单击“管理 NuGet 包...”。单击“浏览”选项卡，并搜索 `Microsoft Azure Service Bus`。 确保在“版本”  框中选定项目名称。 单击“安装” 并接受使用条款。\r \r     ![][3]\r 4. 在解决方案资源管理器中，双击 Program.cs 文件以在编辑器中将其打开（如果尚未打开）。\r 5. 在文件的顶部添加以下 using 语句：\r \r     ```csharp\r     using System.ServiceModel;\r     using Microsoft.ServiceBus;\r     ```\r 6. 将命名空间的默认名称 **EchoService** 更改为 **Microsoft.ServiceBus.Samples**。\r \r    > [!IMPORTANT]\r    > 本教程使用 C# 命名空间 **Microsoft.ServiceBus.Samples**，它是基于协定的管理类型的命名空间，此类型在[配置 WCF 客户端](#configure-the-wcf-client)步骤中的配置文件内使用。 在构建此示例时，可以指定任何想要的命名空间，在配置文件中修改了协定以及相应服务的命名空间后，本教程才会生效。 在 App.config 文件中指定的命名空间必须与在 C# 文件中指定的命名空间相同。\r    >\r    >\r 7. 直接在 `Microsoft.ServiceBus.Samples` 命名空间声明后面（但在命名空间内）定义一个名为 `IEchoContract` 的新接口，然后将 `ServiceContractAttribute` 属性应用于该接口，命名空间值为 `http://samples.microsoft.com/ServiceModel/Relay/`。 该命名空间值不同于在整个代码范围内使用的命名空间。 相反，该命名空间值将用作此协定的唯一标识符。 显式指定命名空间可防止将默认的命名空间值添加到约定名称中。 在命名空间声明的后面粘贴以下代码：\r \r     ```csharp\r     [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     public interface IEchoContract\r     {\r     }\r     ```\r \r    > [!NOTE]\r    > 通常情况下，服务协定命名空间包含一个包括版本信息的命名方案。 服务协定命名空间中包括的版本信息可以使服务通过将新服务协定定义为新命名空间并将其公开到新的终结点上，来隔离重大更改。 以这种方式，客户端可以继续使用旧的服务协定，而无需进行更新。 版本信息可能包含日期或内部版本号。 有关详细信息，请参阅 [服务版本控制](http://go.microsoft.com/fwlink/?LinkID=180498)。 鉴于此教程的目的，服务协定命名空间的命名方案不包含版本信息。\r    >\r    >\r 8. 在 `IEchoContract` 接口中，为 `IEchoContract` 协定在接口中公开的单个操作声明一个方法，然后将 `OperationContractAttribute` 属性应用到你希望将其作为公共 WCF 中继协定的一部分进行公开的方法中，如下所示：\r \r     ```csharp\r     [OperationContract]\r     string Echo(string text);\r     ```\r 9. 直接在 `IEchoContract` 接口定义之后声明从 `IEchoContract` 中继承并同样继承到 `IClientChannel` 接口的通道，如下所示：\r \r     ```csharp\r     public interface IEchoChannel : IEchoContract, IClientChannel { }\r     ```\r \r     通道是主机和客户端用来互相传递信息的 WCF 对象。 随后，你针对通道编写代码，以在两个应用程序之间回显信息。\r 10. 在“生成”菜单中，单击“生成解决方案”或按 **Ctrl+Shift+B** 以确认到目前为止操作的准确性。\r \r ### <a name=\"example\"></a>示例\r 以下代码显示了定义 WCF 中继协定的基本接口。\r \r ```csharp\r using System;\r using System.ServiceModel;\r \r namespace Microsoft.ServiceBus.Samples\r {\r     [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     public interface IEchoContract\r     {\r         [OperationContract]\r         String Echo(string text);\r     }\r \r     public interface IEchoChannel : IEchoContract, IClientChannel { }\r \r     class Program\r     {\r         static void Main(string[] args)\r         {\r         }\r     }\r }\r ```\r \r 既然已创建接口，可以实现该接口。\r \r ## <a name=\"implement-the-wcf-contract\"></a>实现 WCF 协定\r 创建 Azure 中继首先需要创建使用接口定义的协定。 有关创建接口的详细信息，请参阅上一步。 下一步是实现该接口。 此步骤包括创建名为 `EchoService` 的类，用于实现用户定义的 `IEchoContract` 接口。 实现接口后，即可使用 App.config 配置文件配置接口。 该配置文件包含应用程序所需的信息，如服务的名称、协定的名称，以及用来与中继服务通信的协议类型。 该过程后面的示例中提供了这些任务所用的代码。 有关如何实现服务协定的更多常规讨论，请参阅 WCF 文档中的 [实现服务协定](https://msdn.microsoft.com/library/ms733764.aspx) 。\r \r 1. 紧随 `IEchoContract` 接口定义之后，创建名为 `EchoService` 的新类。 `EchoService` 类实现 `IEchoContract` 接口。\r \r     ```csharp\r     class EchoService : IEchoContract\r     {\r     }\r     ```\r \r     与其他接口实现类似，可以在另一个文件中实现定义。 但是，在本教程中，实现所在的文件与接口定义和 `Main` 方法所在的文件相同。\r 2. 将 [ServiceBehaviorAttribute](https://msdn.microsoft.com/library/system.servicemodel.servicebehaviorattribute.aspx) 属性应用于 `IEchoContract` 接口。 该属性指定服务名称和命名空间。 完成后，`EchoService` 类将如下所示：\r \r     ```csharp\r     [ServiceBehavior(Name = \"EchoService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     class EchoService : IEchoContract\r     {\r     }\r     ```\r 3. 在 `EchoService` 类中，实现 `IEchoContract` 接口中定义的 `Echo` 方法。\r \r     ```csharp\r     public string Echo(string text)\r     {\r         Console.WriteLine(\"Echoing: {0}\", text);\r         return text;\r     }\r     ```\r 4. 单击“生成”，然后单击“生成解决方案”以确认工作的准确性。\r \r ### <a name=\"define-the-configuration-for-the-service-host\"></a>定义服务主机的配置\r 1. 配置文件非常类似于 WCF 配置文件。 该配置文件包括服务名称、终结点（即，Azure 中继公开的、让客户端和主机相互通信的位置）和绑定（用于通信的协议类型）。 此处的主要差别在于，配置的服务终结点是指 [NetTcpRelayBinding](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.nettcprelaybinding) 绑定，它不是 .NET Framework 的一部分。 [NetTcpRelayBinding](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.nettcprelaybinding) 是由服务定义的绑定之一。\r 2. 在 **解决方案资源管理器**中，双击 App.config 文件以在 Visual Studio 编辑器中将其打开。\r 3. 在 `<appSettings>` 元素中，将占位符替换为服务命名空间的名称以及在先前步骤中复制的 SAS 密钥。\r 4. 在 `<system.serviceModel>` 标记中，添加 `<services>` 元素。 可以在单个配置文件中定义多个中继应用程序。 但是，本教程只定义一个。\r \r     ```xml\r     <?xmlversion=\"1.0\"encoding=\"utf-8\"?>\r     <configuration>\r       <system.serviceModel>\r         <services>\r \r         </services>\r       </system.serviceModel>\r     </configuration>\r     ```\r 5. 在 `<services>` 元素中，添加 `<service>` 元素来定义服务名称。\r \r     ```xml\r     <service name=\"Microsoft.ServiceBus.Samples.EchoService\">\r     </service>\r     ```\r 6. 在 `<service>` 元素中，定义终结点协定的位置，以及终结点绑定的类型。\r \r     ```xml\r     <endpoint contract=\"Microsoft.ServiceBus.Samples.IEchoContract\" binding=\"netTcpRelayBinding\"/>\r     ```\r \r     终结点用于定义客户端会在何处查找主机应用程序。 接下来，本教程使用此步骤创建一个通过 Azure 中继完全公开主机的 URI。 绑定声明我们要将 TCP 用作协议，以与中继服务进行通信。\r 7. 在“生成”菜单中，单击“生成解决方案”以确认工作的准确性。\r \r ### <a name=\"example\"></a>示例\r 下面的代码显示服务协定的实现。\r \r ```csharp\r [ServiceBehavior(Name = \"EchoService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r \r     class EchoService : IEchoContract\r     {\r         public string Echo(string text)\r         {\r             Console.WriteLine(\"Echoing: {0}\", text);\r             return text;\r         }\r     }\r ```\r \r 以下代码显示了与该服务主机关联的 App.config 文件的基本格式。\r \r ```xml\r <?xml version=\"1.0\" encoding=\"utf-8\" ?>\r <configuration>\r   <system.serviceModel>\r     <services>\r       <service name=\"Microsoft.ServiceBus.Samples.EchoService\">\r         <endpoint contract=\"Microsoft.ServiceBus.Samples.IEchoContract\" binding=\"netTcpRelayBinding\" />\r       </service>\r     </services>\r     <extensions>\r       <bindingExtensions>\r         <add name=\"netTcpRelayBinding\"\r                     type=\"Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r       </bindingExtensions>\r     </extensions>\r   </system.serviceModel>\r </configuration>\r ```\r \r ## <a name=\"host-and-run-a-basic-web-service-to-register-with-the-relay-service\"></a>托管并运行基本 Web 服务以向中继服务注册\r 此步骤介绍如何运行 Azure 中继服务。\r \r ### <a name=\"create-the-relay-credentials\"></a>创建中继凭据\r 1. 在 `Main()`中，创建两个变量，将命名空间和从控制台窗口中读取的 SAS 密钥存储在其中。\r \r     ```csharp\r     Console.Write(\"Your Service Namespace: \");\r     string serviceNamespace = Console.ReadLine();\r     Console.Write(\"Your SAS key: \");\r     string sasKey = Console.ReadLine();\r     ```\r \r     随后将使用 SAS 密钥来访问你的项目。 命名空间作为参数传递给 `CreateServiceUri` 以创建服务 URI。\r 2. 使用 [TransportClientEndpointBehavior](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.transportclientendpointbehavior) 对象声明使用 SAS 密钥作为凭据类型。 在最后一步中添加的代码后直接添加以下代码。\r \r     ```csharp\r     TransportClientEndpointBehavior sasCredential = new TransportClientEndpointBehavior();\r     sasCredential.TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\", sasKey);\r     ```\r \r ### <a name=\"create-a-base-address-for-the-service\"></a>为服务创建基本地址\r 在上一个步骤中添加的代码后面，为服务的基址创建 `Uri` 实例。 此 URI 指定服务总线方案、命名空间，以及服务接口的路径。\r \r ```csharp\r Uri address = ServiceBusEnvironment.CreateServiceUri(\"sb\", serviceNamespace, \"EchoService\");\r ```\r \r \"sb\" 是服务总线方案的缩写，并指示我们正在使用 TCP 作为协议。 先前当 [NetTcpRelayBinding](https://msdn.microsoft.com/library/microsoft.servicebus.nettcprelaybinding.aspx) 被指定为绑定时，在配置文件中也指示了这一点。\r \r 对于本教程中，URI 是 `sb://putServiceNamespaceHere.chinacloudapi.cn/EchoService`。\r \r ### <a name=\"create-and-configure-the-service-host\"></a>创建并配置服务主机\r 1. 将连接模式设置为 `AutoDetect`\r \r     ```csharp\r     ServiceBusEnvironment.SystemConnectivity.Mode = ConnectivityMode.AutoDetect;\r     ```\r \r     连接模式描述服务用于与中继服务进行通信的协议；连接模式为 HTTP 或 TCP。 使用默认设置 `AutoDetect`，服务将尝试通过 TCP（如果可用）或 HTTP（如果 TCP 不可用）连接到 Azure 中继。 请注意这与服务为客户端通信指定的协议不同。 为客户端通信指定的协议由所使用的绑定所决定。 例如，服务可以使用 [BasicHttpRelayBinding](https://msdn.microsoft.com/library/microsoft.servicebus.basichttprelaybinding.aspx) 绑定，该绑定指定其终结点通过 HTTP 与客户端通信。 同一个服务可以指定 **ConnectivityMode.AutoDetect**，以便服务通过 TCP 与 Azure 中继通信。\r 2. 使用之前在本部分中创建的 URI 创建服务主机。\r \r     ```csharp\r     ServiceHost host = new ServiceHost(typeof(EchoService), address);\r     ```\r \r     该服务主机是可实例化服务的 WCF 对象。 在这里将传递要创建的服务类型（`EchoService` 类型），以及要公开服务的地址。\r 3. 在 Program.cs 文件的顶部，添加对 [System.ServiceModel.Description](https://msdn.microsoft.com/library/system.servicemodel.description.aspx) 和 [Microsoft.ServiceBus.Description](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.description) 的引用。\r \r     ```csharp\r     using System.ServiceModel.Description;\r     using Microsoft.ServiceBus.Description;\r     ```\r 4. 返回到 `Main()`，配置终结点以启用公开访问。\r \r     ```csharp\r     IEndpointBehavior serviceRegistrySettings = new ServiceRegistrySettings(DiscoveryType.Public);\r     ```\r \r     此步骤告知中继服务，可以通过检查项目的 ATOM 源来公开查找你的应用程序。 如果将 **DiscoveryType** 设置为 **private**，客户端将仍将能够访问该服务。 但是，当搜索中继命名空间时不会显示该服务。 相反，客户端必须事先知道终结点路径。\r 5. 将服务凭据应用到 App.config 文件中定义的服务终结点：\r \r     ```csharp\r     foreach (ServiceEndpoint endpoint in host.Description.Endpoints)\r     {\r         endpoint.Behaviors.Add(serviceRegistrySettings);\r         endpoint.Behaviors.Add(sasCredential);\r     }\r     ```\r \r     如在上一步中所述，可能已经在配置文件中声明多个服务和终结点。 如果已配置，此代码将遍历配置文件并且搜索可能应用了凭据的每个终结点。 但是，对于本教程中，配置文件只有一个终结点。\r \r ### <a name=\"open-the-service-host\"></a>打开服务主机\r \r 1. 打开服务。\r \r     ```csharp\r     host.Open();\r     ```\r 2. 通知用户该服务正在运行，并说明如何关闭服务。\r \r     ```csharp\r     Console.WriteLine(\"Service address: \" + address);\r     Console.WriteLine(\"Press [Enter] to exit\");\r     Console.ReadLine();\r     ```\r 3. 完成后，关闭服务主机。\r \r     ```csharp\r     host.Close();\r     ```\r 4. 按 **Ctrl+Shift+B** 生成项目。\r \r ### <a name=\"example\"></a>示例\r \r 完成的服务代码应如下所示。 该代码包括本教程中前面步骤中使用的服务协定和实现，并将服务托管在控制台应用程序中。\r \r ```csharp\r using System;\r using System.ServiceModel;\r using System.ServiceModel.Description;\r using Microsoft.ServiceBus;\r using Microsoft.ServiceBus.Description;\r \r namespace Microsoft.ServiceBus.Samples\r {\r     [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     public interface IEchoContract\r     {\r         [OperationContract]\r         String Echo(string text);\r     }\r \r     public interface IEchoChannel : IEchoContract, IClientChannel { };\r \r     [ServiceBehavior(Name = \"EchoService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     class EchoService : IEchoContract\r     {\r         public string Echo(string text)\r         {\r             Console.WriteLine(\"Echoing: {0}\", text);\r             return text;\r         }\r     }\r \r     class Program\r     {\r         static void Main(string[] args)\r         {\r \r             ServiceBusEnvironment.SystemConnectivity.Mode = ConnectivityMode.AutoDetect;         \r \r             Console.Write(\"Your Service Namespace: \");\r             string serviceNamespace = Console.ReadLine();\r             Console.Write(\"Your SAS key: \");\r             string sasKey = Console.ReadLine();\r \r            // Create the credentials object for the endpoint.\r             TransportClientEndpointBehavior sasCredential = new TransportClientEndpointBehavior();\r             sasCredential.TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\", sasKey);\r \r             // Create the service URI based on the service namespace.\r             Uri address = ServiceBusEnvironment.CreateServiceUri(\"sb\", serviceNamespace, \"EchoService\");\r \r             // Create the service host reading the configuration.\r             ServiceHost host = new ServiceHost(typeof(EchoService), address);\r \r             // Create the ServiceRegistrySettings behavior for the endpoint.\r             IEndpointBehavior serviceRegistrySettings = new ServiceRegistrySettings(DiscoveryType.Public);\r \r             // Add the Relay credentials to all endpoints specified in configuration.\r             foreach (ServiceEndpoint endpoint in host.Description.Endpoints)\r             {\r                 endpoint.Behaviors.Add(serviceRegistrySettings);\r                 endpoint.Behaviors.Add(sasCredential);\r             }\r \r             // Open the service.\r             host.Open();\r \r             Console.WriteLine(\"Service address: \" + address);\r             Console.WriteLine(\"Press [Enter] to exit\");\r             Console.ReadLine();\r \r             // Close the service.\r             host.Close();\r         }\r     }\r }\r ```\r \r ## <a name=\"create-a-wcf-client-for-the-service-contract\"></a>创建服务协定的 WCF 客户端\r 下一步将创建客户端应用程序，并定义将在后续步骤中实现的服务协定。 请注意，这些步骤中的许多步骤类似于用来创建服务的步骤：定义协定、编辑 App.config 文件、使用凭据连接到中继服务等。 该过程后面的示例中提供了这些任务所用的代码。\r \r 1. 通过执行以下操作为客户端通在当前 Visual Studio 解决方案中创建一个新的项目：\r \r    1. 在解决方案资源管理器中，在包含该服务的同一解决方案中，右键单击当前解决方案（不是项目），然后单击“添加”。 然后单击“新建项目”。\r    2. 在“添加新项目”对话框中，单击“Visual C#”（如果未显示“Visual C#”，则在“其他语言”下方查看），然后选择“控制台应用(.NET Framework)”模板，并将其命名为“EchoClient”。\r    3. 单击 **“确定”**。\r       <br />\r 2. 在解决方案资源管理器中，双击 **EchoClient** 项目中的 Program.cs 文件以在编辑器中将其打开（如果尚未打开）。\r 3. 将命名空间名称从其默认名称 `EchoClient` 更改为 `Microsoft.ServiceBus.Samples`。\r 4. 安装[服务总线 NuGet 包](https://www.nuget.org/packages/WindowsAzure.ServiceBus)：在解决方案资源管理器中，右键单击“EchoClient”项目，然后单击“管理 NuGet 包”。 单击“浏览”选项卡，并搜索 `Microsoft Azure Service Bus`。 单击“安装” 并接受使用条款。\r \r     ![][3]\r 5. 为 Program.cs 文件中的 [System.ServiceModel](https://msdn.microsoft.com/library/system.servicemodel.aspx) 命名空间添加 `using` 语句。\r \r     ```csharp\r     using System.ServiceModel;\r     ```\r 6. 如下面的示例中所示，将服务协定定义添加到命名空间。 请注意，此定义等同于“服务”项目中所使用的定义。 `Microsoft.ServiceBus.Samples` 命名空间的顶部。\r \r     ```csharp\r     [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     public interface IEchoContract\r     {\r         [OperationContract]\r         string Echo(string text);\r     }\r \r     public interface IEchoChannel : IEchoContract, IClientChannel { }\r     ```\r 7. 按 **Ctrl+Shift+B** 生成客户端。\r \r ### <a name=\"example\"></a>示例\r 下面的代码显示了 **EchoClient** 项目中的 Program.cs 文件的当前状态。\r \r ```csharp\r using System;\r using Microsoft.ServiceBus;\r using System.ServiceModel;\r \r namespace Microsoft.ServiceBus.Samples\r {\r \r     [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     public interface IEchoContract\r     {\r         [OperationContract]\r         string Echo(string text);\r     }\r \r     public interface IEchoChannel : IEchoContract, IClientChannel { }\r \r \r     class Program\r     {\r         static void Main(string[] args)\r         {\r         }\r     }\r }\r ```\r \r ## <a name=\"configure-the-wcf-client\"></a>配置 WCF 客户端\r \r 在此步骤中，可以为之前在本教程中创建的访问服务的基本客户端应用程序创建 App.config 文件。 此 App.config 文件用于定义终结点的协定、绑定和名称。 该过程后面的示例中提供了这些任务所用的代码。\r \r 1. 在解决方案资源管理器的 **EchoClient** 项目中，双击“App.config”以在 Visual Studio 编辑器中打开该文件。\r 2. 在 `<appSettings>` 元素中，将占位符替换为服务命名空间的名称以及在先前步骤中复制的 SAS 密钥。\r 3. 在 system.serviceModel 元素中，添加 `<client>` 元素。\r \r     ```xml\r     <?xmlversion=\"1.0\"encoding=\"utf-8\"?>\r     <configuration>\r       <system.serviceModel>\r         <client>\r         </client>\r       </system.serviceModel>\r     </configuration>\r     ```\r \r     此步骤声明你正在定义一个 WCF 样式的客户端应用程序。\r 4. 在 `client` 元素中，定义终结点的名称、协定和绑定类型。\r \r     ```xml\r     <endpoint name=\"RelayEndpoint\"\r                     contract=\"Microsoft.ServiceBus.Samples.IEchoContract\"\r                     binding=\"netTcpRelayBinding\"/>\r     ```\r \r     此步骤定义终结点的名称、服务中定义的协定，以及客户端应用程序使用 TCP 与 Azure 中继进行通信的事实。 终结点名称在下一步中用于将此终结点配置与服务 URI 链接。\r 5. 单击“文件”，然后单击“全部保存”。\r \r ## <a name=\"example\"></a>示例\r 下面的代码显示了 Echo 客户端的 App.config 文件。\r \r ```xml\r <?xml version=\"1.0\" encoding=\"utf-8\" ?>\r <configuration>\r   <system.serviceModel>\r     <client>\r       <endpoint name=\"RelayEndpoint\"\r                       contract=\"Microsoft.ServiceBus.Samples.IEchoContract\"\r                       binding=\"netTcpRelayBinding\"/>\r     </client>\r     <extensions>\r       <bindingExtensions>\r         <add name=\"netTcpRelayBinding\"\r                     type=\"Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r       </bindingExtensions>\r     </extensions>\r   </system.serviceModel>\r </configuration>\r ```\r \r ## <a name=\"implement-the-wcf-client\"></a>实现 WCF 客户端\r 在此步骤中，实现了可访问之前在本教程中创建的服务的基本客户端应用程序。 与服务相似，该客户端执行许多相同的操作访问 Azure 中继：\r \r 1. 设置连接模式。\r 2. 创建用于定位主机服务的 URI。\r 3. 定义安全凭据。\r 4. 将凭据应用到连接。\r 5. 打开连接。\r 6. 执行应用程序特定的任务。\r 7. 关闭连接。\r \r 但是，主要的区别之一在于，客户端应用程序使用通道连接到中继服务，而服务则使用对 **ServiceHost** 的调用。 该过程后面的示例中提供了这些任务所用的代码。\r \r ### <a name=\"implement-a-client-application\"></a>实现客户端应用程序\r 1. 将连接模式设置为 **AutoDetect**。 在 **EchoClient** 应用程序的 `Main()` 方法中添加以下代码。\r \r     ```csharp\r     ServiceBusEnvironment.SystemConnectivity.Mode = ConnectivityMode.AutoDetect;\r     ```\r 2. 定义变量以保存用于服务命名空间的值，以及从控制台读取的 SAS 密钥。\r \r     ```csharp\r     Console.Write(\"Your Service Namespace: \");\r     string serviceNamespace = Console.ReadLine();\r     Console.Write(\"Your SAS Key: \");\r     string sasKey = Console.ReadLine();\r     ```\r 3. 创建用于定义中继项目中主机位置的 URI。\r \r     ```csharp\r     Uri serviceUri = ServiceBusEnvironment.CreateServiceUri(\"sb\", serviceNamespace, \"EchoService\");\r     ```\r 4. 创建服务命名空间终结点的凭据对象。\r \r     ```csharp\r     TransportClientEndpointBehavior sasCredential = new TransportClientEndpointBehavior();\r     sasCredential.TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\", sasKey);\r     ```\r 5. 创建加载在 App.config 文件中所述的配置的通道工厂。\r \r     ```csharp\r     ChannelFactory<IEchoChannel> channelFactory = new ChannelFactory<IEchoChannel>(\"RelayEndpoint\", new EndpointAddress(serviceUri));\r     ```\r \r     通道工厂是创建通道（通过该通道，服务和客户端可以进行通信）的一个 WCF 对象。\r 6. 应用凭据。\r \r     ```csharp\r     channelFactory.Endpoint.Behaviors.Add(sasCredential);\r     ```\r 7. 创建并打开服务通道。\r \r     ```csharp\r     IEchoChannel channel = channelFactory.CreateChannel();\r     channel.Open();\r     ```\r 8. 编写用于回显的基本用户界面和功能。\r \r     ```csharp\r     Console.WriteLine(\"Enter text to echo (or [Enter] to exit):\");\r     string input = Console.ReadLine();\r     while (input != String.Empty)\r     {\r         try\r         {\r             Console.WriteLine(\"Server echoed: {0}\", channel.Echo(input));\r         }\r         catch (Exception e)\r         {\r             Console.WriteLine(\"Error: \" + e.Message);\r         }\r         input = Console.ReadLine();\r     }\r     ```\r \r     请注意，代码使用通道对象的实例作为服务代理。\r 9. 关闭通道，并关闭工厂。\r \r     ```csharp\r     channel.Close();\r     channelFactory.Close();\r     ```\r \r ## <a name=\"example\"></a>示例\r \r 完成的代码应如下所示，演示了如何创建客户端应用程序、如何调用服务操作以及如何在完成操作调用后关闭客户端。\r \r ```csharp\r using System;\r using Microsoft.ServiceBus;\r using System.ServiceModel;\r \r namespace Microsoft.ServiceBus.Samples\r {\r     [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     public interface IEchoContract\r     {\r         [OperationContract]\r         String Echo(string text);\r     }\r \r     public interface IEchoChannel : IEchoContract, IClientChannel { }\r \r     class Program\r     {\r         static void Main(string[] args)\r         {\r             ServiceBusEnvironment.SystemConnectivity.Mode = ConnectivityMode.AutoDetect;\r \r \r             Console.Write(\"Your Service Namespace: \");\r             string serviceNamespace = Console.ReadLine();\r             Console.Write(\"Your SAS Key: \");\r             string sasKey = Console.ReadLine();\r \r \r \r             Uri serviceUri = ServiceBusEnvironment.CreateServiceUri(\"sb\", serviceNamespace, \"EchoService\");\r \r             TransportClientEndpointBehavior sasCredential = new TransportClientEndpointBehavior();\r             sasCredential.TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\", sasKey);\r \r             ChannelFactory<IEchoChannel> channelFactory = new ChannelFactory<IEchoChannel>(\"RelayEndpoint\", new EndpointAddress(serviceUri));\r \r             channelFactory.Endpoint.Behaviors.Add(sasCredential);\r \r             IEchoChannel channel = channelFactory.CreateChannel();\r             channel.Open();\r \r             Console.WriteLine(\"Enter text to echo (or [Enter] to exit):\");\r             string input = Console.ReadLine();\r             while (input != String.Empty)\r             {\r                 try\r                 {\r                     Console.WriteLine(\"Server echoed: {0}\", channel.Echo(input));\r                 }\r                 catch (Exception e)\r                 {\r                     Console.WriteLine(\"Error: \" + e.Message);\r                 }\r                 input = Console.ReadLine();\r             }\r \r             channel.Close();\r             channelFactory.Close();\r \r         }\r     }\r }\r ```\r \r ## <a name=\"run-the-applications\"></a>运行应用程序\r \r 1. 按 **Ctrl+Shift+B** 生成解决方案。 这会生成你在先前步骤中创建的客户端项目和服务项目。\r 2. 在运行客户端应用程序之前，必须确保服务应用程序正在运行。 在 Visual Studio 的解决方案资源管理器中，右键单击“EchoService”解决方案，然后单击“属性”。\r 3. 在“解决方案属性”对话框中，单击“启动项目”，然后单击“多启动项目”按钮。 **EchoService** 显示在列表的最前面。\r 4. 将 **EchoService** 和 **EchoClient** 项目的“操作”框设置为“启动”。\r \r     ![][5]\r 5. 单击“项目依赖项” 。 在“项目”框中，选择“EchoClient”。 在“依赖于”框中，确保选中“EchoService”。\r \r     ![][6]\r 6. 单击“确定”关闭“属性”对话框。\r 7. 按 **F5** 运行这两个项目。\r 8. 此时会打开两个控制台窗口并提示你输入命名空间名称。 必须先运行服务，因此在“EchoService”控制台窗口中输入命名空间，然后按“Enter”。\r 9. 接下来，会提示你提供 SAS 密钥。 输入 SAS 密钥并按“ENTER”。\r \r     以下是来自控制台窗口的示例输出。 请注意，此处提供的值仅限于示例目的。\r \r     `Your Service Namespace: myNamespace` `Your SAS Key: <SAS key value>`\r \r     服务应用程序将其正在侦听的地址打印到控制台窗口中，如下面的示例中所示。\r \r     `Service address: sb://mynamespace.servicebus.chinacloudapi.cn/EchoService/` `Press [Enter] to exit`\r 10. 在 **EchoClient** 控制台窗口中，输入之前为服务应用程序输入的相同信息。 请按照前面的步骤，为客户端应用程序输入相同的服务命名空间和 SAS 密钥值。\r 11. 输入这些值后，客户端将打开服务通道并提示你输入如以下控制台输出示例中所示的某些文本。\r \r     `Enter text to echo (or [Enter] to exit):`\r \r     输入将发送到服务应用程序的某些文本，并按“Enter”。 此文本通过 Echo 服务操作发送到服务并显示在服务控制台窗口中，如下面的示例输出所示。\r \r     `Echoing: My sample text`\r \r     客户端应用程序接收 `Echo` 操作的返回值（此为原始文本），并将其打印到控制台窗口。 以下是来自客户端控制台窗口的示例输出。\r \r     `Server echoed: My sample text`\r 12. 可以继续以这种方式将来自客户端的短信发送至服务。 完成后，在客户端和服务控制台窗口中按 Enter 以结束这两个应用程序。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 本教程介绍如何使用服务总线的 WCF 中继功能，构建 Azure 中继客户端应用程序和服务。 有关使用[服务总线消息传送](../service-bus-messaging/service-bus-messaging-overview.md#brokered-messaging)的类似教程，请参阅[服务总线队列入门](../service-bus-messaging/service-bus-dotnet-get-started-with-queues.md)。\r \r 若要了解有关 Azure 中继的详细信息，请参阅以下主题。\r \r * [Azure 服务总线体系结构概述](../service-bus-messaging/service-bus-fundamentals-hybrid-solutions.md#relays)\r * [Azure 中继概述](./relay-what-is-it.md)\r * [如何通过 .NET 使用 WCF 中继服务](./relay-wcf-dotnet-get-started.md)\r \r [2]: ./media/service-bus-relay-tutorial/create-console-app.png\r [3]: ./media/service-bus-relay-tutorial/install-nuget.png\r [5]: ./media/service-bus-relay-tutorial/set-projects.png\r [6]: ./media/service-bus-relay-tutorial/set-depend.png\r \r \r <!--Update_Description:update meta properties and wording-->"}