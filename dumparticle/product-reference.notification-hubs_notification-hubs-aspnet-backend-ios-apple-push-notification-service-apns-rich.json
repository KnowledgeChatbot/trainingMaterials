{"Title":"Azure 通知中心富推送","Description":"了解如何从 Azure 将富推送通知发送到 iOS 应用。代码示例是使用 .Objective-C 和 C# 编写的。","Content":"\r #Azure 通知中心富推送\r \r ##概述\r \r 为了吸引用户使用即时丰富内容，除纯文本之外，应用程序可能还需要以其他形式进行推送。这些通知将提升用户交互并显示 URL、声音、图像/优惠券等内容。本教程以[通知用户](./notification-hubs-aspnet-backend-ios-apple-apns-notification.md)主题为基础，演示如何发送包含有效负载（例如图像）的推送通知。\r \r 本教程适用于 iOS 7 和 8。\r \r   ![][IOS1]\r \r 在高级别中：\r \r 1. 应用后端：\r     - 在后端数据库/本地存储中存储富有效负载（在本例中为图像）\r     - 向设备发送此富通知的 ID\r 2. 设备上的应用：\r     - 与使用设备接收到的 ID 请求富有效负载的后端进行联系\r     - 在数据检索完成后，向用户设备发送通知，并在用户点击“了解详细信息”时立即显示有效负载\r \r ## WebAPI 项目\r \r 1. 在 Visual Studio 中，打开您在[通知用户](./notification-hubs-aspnet-backend-ios-apple-apns-notification.md)教程中创建的 **AppBackend** 项目。\r 2. 获取想要用于通知用户的图像，并将其置于项目目录的 **img** 文件夹中。\r 3. 单击“解决方案资源管理器”中的**显示所有文件**，右键单击该文件夹以**包括在项目中**。\r 4. 通过选定的图像，将“属性”窗口中的“生成操作”更改为**嵌入的资源**。\r \r     ![][IOS2]\r \r 5. 在 **Notifications.cs** 中，添加以下 using 语句：\r \r     ```\r     using System.Reflection;\r     ```\r \r 6. 使用以下代码更新整个 **Notifications** 类。请确保将占位符替换为您的通知中心凭据和图像文件名。\r \r     ```\r     public class Notification {\r         public int Id { get; set; }\r         // Initial notification message to display to users\r         public string Message { get; set; }\r         // Type of rich payload (developer-defined)\r         public string RichType { get; set; }\r         public string Payload { get; set; }\r         public bool Read { get; set; }\r     }\r \r     public class Notifications {\r         public static Notifications Instance = new Notifications();\r \r         private List<Notification> notifications = new List<Notification>();\r \r         public NotificationHubClient Hub { get; set; }\r \r         private Notifications() {\r             // Placeholders: replace with the connection string (with full access) for your notification hub and the hub name from the Azure Classics Portal\r             Hub = NotificationHubClient.CreateClientFromConnectionString(\"{conn string with full access}\",  \"{hub name}\");\r         }\r \r         public Notification CreateNotification(string message, string richType, string payload) {\r             var notification = new Notification() {\r                 Id = notifications.Count,\r                 Message = message,\r                 RichType = richType,\r                 Payload = payload,\r                 Read = false\r             };\r \r             notifications.Add(notification);\r \r             return notification;\r         }\r \r         public Stream ReadImage(int id) {\r             var assembly = Assembly.GetExecutingAssembly();\r             // Placeholder: image file name (for example, logo.png).\r             return assembly.GetManifestResourceStream(\"AppBackend.img.{logo.png}\");\r         }\r     }\r     ```\r \r     >[!NOTE]\r     >(optional) 请参阅[如何使用 Visual C# 嵌入和访问资源](http://support.microsoft.com/zh-cn/kb/319292)了解有关如何添加和获取项目资源的详细信息。\r \r 7. 在 **NotificationsController.cs** 中，使用以下代码段重新定义 **NotificationsController**。这会将初始无提示的富通知 ID 发送到设备，并允许客户端对图像进行检索：\r \r     ```\r     // Return http response with image binary\r     public HttpResponseMessage Get(int id) {\r         var stream = Notifications.Instance.ReadImage(id);\r \r         var result = new HttpResponseMessage(HttpStatusCode.OK);\r         result.Content = new StreamContent(stream);\r         // Switch in your image extension for \"png\"\r         result.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"image/{png}\");\r \r         return result;\r     }\r \r     // Create rich notification and send initial silent notification (containing id) to client\r     public async Task<HttpResponseMessage> Post() {\r         // Replace the placeholder with image file name\r         var richNotificationInTheBackend = Notifications.Instance.CreateNotification(\"Check this image out!\", \"img\",  \"{logo.png}\");\r \r         var usernameTag = \"username:\" + HttpContext.Current.User.Identity.Name;\r \r         // Silent notification with content available\r         var aboutUser = \"{\"aps\": {\"content-available\": 1, \"sound\":\"\"}, \"richId\": \"\" + richNotificationInTheBackend.Id.ToString() + \"\",  \"richMessage\": \"\" + richNotificationInTheBackend.Message + \"\", \"richType\": \"\" + richNotificationInTheBackend.RichType + \"\"}\";\r \r         // Send notification to apns\r         await Notifications.Instance.Hub.SendAppleNativeNotificationAsync(aboutUser, usernameTag);\r \r         return Request.CreateResponse(HttpStatusCode.OK);\r     }\r     ```\r \r 8. 现在，我们将此应用重新部署到 Azure 网站，以便可以从所有设备对其进行访问。右键单击 **AppBackend** 项目，然后选择“发布”。\r \r 9. 选择 Azure 网站作为发布目标。使用您的 Azure 帐户登录，选择一个现有的或新的网站，并记下“连接”选项卡中的**目标 URL** 属性。在本教程后面的部分中，我们将此 URL 称为后端终结点。单击“发布”。\r \r ## 修改 iOS 项目\r \r 您已将应用后端修改为只发送通知的 ID，您将更改您的 iOS 应用以处理该 ID，并从后端检索富消息。\r \r 1. 打开您的 iOS 项目，并转到**目标**部分的主应用目标来启用远程通知。\r \r 2. 单击“功能”，开启“背景模式”，并选中“远程通知”复选框。\r \r     ![][IOS3]\r \r 3. 转到 **Main.storyboard**，并确保您具有[通知用户](./notification-hubs-aspnet-backend-ios-apple-apns-notification.md)教程中的视图控制器（本教程中称为“主页视图控制器”）。\r \r 4. 将**导航控制器**添加到您的情节提要，按住 Ctrl 键并拖动到“主页视图控制器”以便使其作为导航的**根视图**。请确保只选中“导航控制器”的“属性检查器”中的“是初始视图控制器”。\r \r 5. 将**视图控制器**添加到情节提要并添加**图像视图**。用户单击此通知选择了解详细信息后，会看到此页面。Storyboard 应类似于：\r \r     ![][IOS4]\r \r 6. 单击情节提要中的“主页视图控制器”，并确保它将 **homeViewController** 作为其“自定义类”和标识检查器下方的“情节提要 ID”。\r \r 7. 为图像视图控制器执行同样的操作，确保 **imageViewController** 充当相应的内容。\r \r 8. 然后，新建标题为 **imageViewController** 的视图控制器类来处理您刚才创建的 UI。\r \r 9. 在 **imageViewController.h** 中，将以下代码添加到控制器的接口声明中。请务必按住 Ctrl 键并从情节提要图像视图拖动到这些属性中，以链接两者：\r \r     ```\r     @property (weak, nonatomic) IBOutlet UIImageView *myImage;\r     @property (strong) UIImage* imagePayload;\r     ```\r \r 10. 在 **imageViewController.m** 中，在 **viewDidload** 末尾添加以下内容:\r \r     ```\r     // Display the UI Image in UI Image View\r     [self.myImage setImage:self.imagePayload];\r     ```\r \r 11. 在 **AppDelegate.m** 中，导入您创建的图像控制器：\r \r     ```\r     #import \"imageViewController.h\"\r     ```\r \r 12. 使用以下声明添加接口部分：\r \r     ```\r     @interface AppDelegate ()\r \r     @property UIImage* imagePayload;\r     @property NSDictionary* userInfo;\r     @property BOOL iOS8;\r \r     // Obtain content from backend with notification id\r     - (void)retrieveRichImageWithId:(int)richId completion: (void(^)(NSError*)) completion;\r \r     // Redirect to Image View Controller after notification interaction\r     - (void)redirectToImageViewWithImage: (UIImage *)img;\r \r     @end\r     ```\r \r 13. 在 **AppDelegate** 中，请确保您的应用在 **application: didFinishLaunchingWithOptions** 中注册了无提示通知：\r \r     ```\r     // Software version\r     self.iOS8 = [[UIApplication sharedApplication] respondsToSelector:@selector(registerUserNotificationSettings:)] && [[UIApplication sharedApplication] respondsToSelector:@selector(registerForRemoteNotifications)];\r \r     // Register for remote notifications for iOS8 and previous versions\r     if (self.iOS8) {\r         NSLog(@\"This device is running with iOS8.\");\r \r         // Action\r         UIMutableUserNotificationAction *richPushAction = [[UIMutableUserNotificationAction alloc] init];\r         richPushAction.identifier = @\"richPushMore\";\r         richPushAction.activationMode = UIUserNotificationActivationModeForeground;\r         richPushAction.authenticationRequired = NO;\r         richPushAction.title = @\"More\";\r \r         // Notification category\r         UIMutableUserNotificationCategory* richPushCategory = [[UIMutableUserNotificationCategory alloc] init];\r         richPushCategory.identifier = @\"richPush\";\r         [richPushCategory setActions:@[richPushAction] forContext:UIUserNotificationActionContextDefault];\r \r         // Notification categories\r         NSSet* richPushCategories = [NSSet setWithObjects:richPushCategory, nil];\r \r         UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound |\r                                                 UIUserNotificationTypeAlert |\r                                                 UIUserNotificationTypeBadge\r                                                                                  categories:richPushCategories];\r \r         [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\r         [[UIApplication sharedApplication] registerForRemoteNotifications];\r \r     }\r     else {\r         // Previous iOS versions\r         NSLog(@\"This device is running with iOS7 or earlier versions.\");\r \r         [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeNewsstandContentAvailability];\r     }\r \r     return YES;\r     ```\r \r 14. 在以下实现中替代 **application:didRegisterForRemoteNotificationsWithDeviceToken** 以考虑情节提要 UI 更改情况：\r \r     ```\r     // Access navigation controller which is at the root of window\r     UINavigationController *nc = (UINavigationController *)self.window.rootViewController;\r     // Get home view controller from stack on navigation controller\r     homeViewController *hvc = (homeViewController *)[nc.viewControllers objectAtIndex:0];\r     hvc.deviceToken = deviceToken;\r     ```\r \r 15. 然后，将以下方法添加到 **AppDelegate.m** 以从您的终结点检索图像，并在检索完成后发送本地通知。请确保将占位符 `{backend endpoint}` 替换为后端终结点：\r \r     ```\r     NSString *const GetNotificationEndpoint = @\"{backend endpoint}/api/notifications\";\r \r     // Helper: retrieve notification content from backend with rich notification id\r     - (void)retrieveRichImageWithId:(int)richId completion: (void(^)(NSError*)) completion {\r         UINavigationController *nc = (UINavigationController *)self.window.rootViewController;\r         homeViewController *hvc = (homeViewController *)[nc.viewControllers objectAtIndex:0];\r         NSString* authenticationHeader = hvc.registerClient.authenticationHeader;\r         // Check if authenticated\r         if (!authenticationHeader) return;\r \r         NSURLSession* session = [NSURLSession\r                                  sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]\r                                  delegate:nil\r                                  delegateQueue:nil];\r \r         NSURL* requestURL = [NSURL URLWithString:[NSString stringWithFormat:@\"%@/%d\", GetNotificationEndpoint, richId]];\r         NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\r         [request setHTTPMethod:@\"GET\"];\r         NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\", authenticationHeader];\r         [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\r \r         NSURLSessionDataTask* dataTask = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\r \r             NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\r             if (!error && httpResponse.statusCode == 200) {\r                 // From NSData to UIImage\r                 self.imagePayload = [UIImage imageWithData:data];\r \r                 completion(nil);\r             }\r             else {\r                 NSLog(@\"Error status: %ld, request: %@\", (long)httpResponse.statusCode, error);\r                 if (error)\r                     completion(error);\r                 else {\r                     completion([NSError errorWithDomain:@\"APICall\" code:httpResponse.statusCode userInfo:nil]);\r                 }\r             }\r         }];\r         [dataTask resume];\r     }\r \r     // Handle silent push notifications when id is sent from backend\r     - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))handler {\r         self.userInfo = userInfo;\r         int richId = [[self.userInfo objectForKey:@\"richId\"] intValue];\r         NSString* richType = [self.userInfo objectForKey:@\"richType\"];\r \r         // Retrieve image data\r         if ([richType isEqualToString:@\"img\"]) {  \r             [self retrieveRichImageWithId:richId completion:^(NSError* error) {\r                 if (!error){\r                     // Send local notification\r                     UILocalNotification* localNotification = [[UILocalNotification alloc] init];\r \r                     // \"5\" is arbitrary here to give you enough time to quit out of the app and receive push notifications\r                     localNotification.fireDate = [NSDate dateWithTimeIntervalSinceNow:5];\r                     localNotification.userInfo = self.userInfo;\r                     localNotification.alertBody = [self.userInfo objectForKey:@\"richMessage\"];\r                     localNotification.timeZone = [NSTimeZone defaultTimeZone];\r \r                     // iOS8 categories\r                     if (self.iOS8) {\r                         localNotification.category = @\"richPush\";\r                     }\r \r                     [[UIApplication sharedApplication] scheduleLocalNotification:localNotification];\r \r                     handler(UIBackgroundFetchResultNewData);\r                 }\r                 else{\r                     handler(UIBackgroundFetchResultFailed);\r                 }\r             }];\r         }\r         // Add \"else if\" here to handle more types of rich content such as url, sound files, etc.\r     }\r     ```\r \r 16. 使用以下方法打开 **AppDelegate.m** 中的图像视图控制器，以处理上述本地通知：\r \r     ```\r     // Helper: redirect users to image view controller\r     - (void)redirectToImageViewWithImage: (UIImage *)img {\r         UINavigationController *navigationController = (UINavigationController*) self.window.rootViewController;\r         UIStoryboard *mainStoryboard = [UIStoryboard storyboardWithName:@\"Main\"\r                                                                  bundle: nil];\r         imageViewController *imgViewController = [mainStoryboard instantiateViewControllerWithIdentifier: @\"imageViewController\"];\r         // Pass data/image to image view controller\r         imgViewController.imagePayload = img;\r \r         // Redirect\r         [navigationController pushViewController:imgViewController animated:YES];\r     }\r \r     // Handle local notification sent above in didReceiveRemoteNotification\r     - (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification {\r         if (application.applicationState == UIApplicationStateActive) {\r             // Show in-app alert with an extra \"more\" button\r             UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Notification\" message:notification.alertBody delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:@\"More\", nil];\r \r             [alert show];\r         }\r         // App becomes active from user's tap on notification\r         else {\r             [self redirectToImageViewWithImage:self.imagePayload];\r         }\r     }\r \r     // Handle buttons in in-app alerts and redirect with data/image\r     - (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {\r         // Handle \"more\" button\r         if (buttonIndex == 1)\r         {\r             [self redirectToImageViewWithImage:self.imagePayload];\r         }\r         // Add \"else if\" here to handle more buttons\r     }\r \r     // Handle notification setting actions in iOS8\r     - (void)application:(UIApplication *)application handleActionWithIdentifier:(NSString *)identifier forLocalNotification:(UILocalNotification *)notification completionHandler:(void (^)())completionHandler {\r         // Handle richPush related buttons\r         if ([identifier isEqualToString:@\"richPushMore\"]) {\r             [self redirectToImageViewWithImage:self.imagePayload];\r         }\r         completionHandler();\r     }\r     ```\r \r ## 运行应用程序\r \r 1. 在 XCode 中，在物理 iOS 设备上运行此应用（推送通知将无法在模拟器中正常工作）。\r \r 2. 在 iOS 应用 UI 中，输入相同值的用户名和密码进行身份验证，然后单击“登录”。\r \r 3. 单击“发送推送”，您应看到应用内警报。如果您单击“详细信息”，将转到您选择要包括在应用后端中的图像。\r \r 4. 您也可以单击“发送推送”并立即按下设备的主页按钮。几分钟后，您将收到推送通知。如果您点击推送通知或单击“详细信息”，将转到您的应用和富图像内容。\r \r [IOS1]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-1.png\r [IOS2]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-2.png\r [IOS3]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-3.png\r [IOS4]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-4.png\r \r <!---HONumber=Mooncake_0725_2016-->"}