{"Title":"Service Fabric 中的服务远程处理","Description":"Service Fabric 远程处理允许客户端和服务使用远程过程调用来与服务进行通信。","Content":"# <a name=\"service-remoting-with-reliable-services\"></a>通过 Reliable Services 进行服务远程处理\r 对于不依赖于特定通信协议或堆栈的服务，如 WebAPI、Windows Communication Foundation (WCF) 或其他服务，Reliable Services 框架提供一种远程处理机制，以便快速而轻松地为这些服务设置远程过程调用。\r \r ## <a name=\"set-up-remoting-on-a-service\"></a>在服务中设置远程处理\r 为服务设置远程处理包括两个简单步骤：\r \r 1. 为服务创建要实现的接口。 此接口定义可供服务的远程过程调用使用的方法。 这些方法必须是返回任务的异步方法。 接口必须实现 `Microsoft.ServiceFabric.Services.Remoting.IService` 以表明此服务具有远程处理接口。\r 2. 在服务中使用远程处理侦听器。 RemotingListener 是可以提供远程处理功能的 `ICommunicationListener` 实现。 `Microsoft.ServiceFabric.Services.Remoting.Runtime` 命名空间包含一个同时适用于无状态服务和有状态服务的扩展方法 `CreateServiceRemotingListener`，可用于创建使用默认远程处理传输协议的远程处理侦听器。\r \r >[!NOTE]\r >`Remoting` 命名空间可用作名为 `Microsoft.ServiceFabric.Services.Remoting` 的单独 NuGet 包\r \r 例如，以下无状态服务公开了一个方法，此方法通过远程过程调用获取“Hello World”。\r \r ```csharp\r using Microsoft.ServiceFabric.Services.Communication.Runtime;\r using Microsoft.ServiceFabric.Services.Remoting;\r using Microsoft.ServiceFabric.Services.Remoting.Runtime;\r using Microsoft.ServiceFabric.Services.Runtime;\r \r public interface IMyService : IService\r {\r     Task<string> HelloWorldAsync();\r }\r \r class MyService : StatelessService, IMyService\r {\r     public MyService(StatelessServiceContext context)\r         : base (context)\r     {\r     }\r \r     public Task HelloWorldAsync()\r     {\r         return Task.FromResult(\"Hello!\");\r     }\r \r     protected override IEnumerable<ServiceInstanceListener> CreateServiceInstanceListeners()\r     {\r         return new[] { new ServiceInstanceListener(context => \r             this.CreateServiceRemotingListener(context)) };\r     }\r }\r ```\r > [!NOTE]\r > 服务接口中的参数和返回类型可以是任何简单、复杂或自定义的类型，但它们必须是 .NET [DataContractSerializer](https://msdn.microsoft.com/library/ms731923.aspx) 可序列化的类型。\r >\r >\r \r ## <a name=\"call-remote-service-methods\"></a>调用远程服务的方法\r 若要使用远程处理堆栈在服务上调用方法，可以通过 `Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy` 类对此服务使用本地代理。 `ServiceProxy` 方法通过使用此服务实现的相同接口来创建本地代理。 使用此代理，可在此接口上远程调用方法。\r \r ```csharp\r \r IMyService helloWorldClient = ServiceProxy.Create<IMyService>(new Uri(\"fabric:/MyApplication/MyHelloWorldService\"));\r \r string message = await helloWorldClient.HelloWorldAsync();\r \r ```\r \r 该远程处理框架将服务引发的异常传播到客户端。 因此，在客户端使用 `ServiceProxy` 的异常处理逻辑可直接处理服务引发的异常。\r \r ## <a name=\"service-proxy-lifetime\"></a>服务代理生存期\r 由于 ServiceProxy 创建是轻量型操作，因此用户可根据需求随意创建，数目不限。 如有需要，用户可重复使用服务代理实例。 如果远程过程调用引发了异常，用户仍可以重复使用相同的代理实例。 每个 ServiceProxy 都包含用于通过线路发送消息的通信客户端。 进行远程调用时，我们会在内部检查通信客户端是否有效。 基于该结果，我们将重新创建通信客户端（如果需要）。 因此在发生异常的情况下，用户无需重新创建 serviceproxy，但以透明方式这样做。\r \r ### <a name=\"serviceproxyfactory-lifetime\"></a>ServiceProxyFactory 生存期\r [ServiceProxyFactory](https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.remoting.client.serviceproxyfactory) 是为不同远程接口创建代理实例的工厂。 如果使用 api `ServiceProxy.Create` 创建代理，则框架将创建 ServiceProxy 的单一实例。\r 在需要替代 [IServiceRemotingClientFactory](https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.remoting.client.iserviceremotingclientfactory) 属性时，手动创建一个 ServiceProxyFactory 是有用的。\r 工厂创建是一项代价高昂的操作。 ServiceProxyFactory 维护通信客户端的内部缓存。\r 最佳做法是尽可能久地缓存 ServiceProxyFactory。\r \r ## <a name=\"remoting-exception-handling\"></a>远程异常处理\r 服务 API 引发的所有远程异常都将作为 AggregateException 发送回客户端。 RemoteExceptions 应该是 DataContract 可序列化的，否则 [ServiceException](https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.communication.serviceexception) 将引发至代理 API，且包含序列化错误。\r \r ServiceProxy 对为其创建的服务分区，处理所有故障转移异常。 如果存在故障转移异常（非暂时异常），它将重新解析终结点，并通过正确的终结点重试调用。 故障转移异常可无限次重试。\r 如果发生暂时性异常，代理会重试调用。\r \r 默认重试参数由 [OperationRetrySettings] 提供。 (https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.communication.client.operationretrysettings) 用户可通过将 OperationRetrySettings 对象传递至 ServiceProxyFactory 构造函数来配置这些值。\r ## <a name=\"how-to-use-remoting-v2-stack\"></a>如何使用 Remoting V2 堆栈\r 借助 2.8 NuGet Remoting 包，可以通过相应的选项来使用 Remoting V2 堆栈。 Remoting V2 堆栈具有更高的性能，提供自定义可序列化对象等功能和更多的可插入 API。\r 默认情况下，如果未进行以下更改，则会继续使用 Remoting V1 堆栈。\r Remoting V2 与 V1（上一个 Remoting 堆栈）不兼容，因此遵循以下文章了解如何在不影响服务可用性的情况下从 V1 升级到 V2。\r \r ### <a name=\"using-assembly-attribute-to-use-v2-stack\"></a>通过程序集属性使用 V2 堆栈。\r \r 遵循以下步骤可更改为 V2 堆栈。\r \r 1. 在服务清单中添加名为“ServiceEndpointV2”的终结点资源。\r \r   ```xml\r   <Resources>\r     <Endpoints>\r       <Endpoint Name=\"ServiceEndpointV2\" />  \r     </Endpoints>\r   </Resources>\r   ```\r \r 2.  使用远程处理扩展方法创建远程处理侦听器。\r \r   ```csharp\r     protected override IEnumerable<ServiceInstanceListener> CreateServiceInstanceListeners()\r     {\r         return this.CreateServiceRemotingInstanceListeners();\r     }\r   ```\r \r 3.  在远程处理接口上添加程序集属性。\r \r   ```csharp\r   [assembly: FabricTransportServiceRemotingProvider(RemotingListener = RemotingListener.V2Listener, RemotingClient = RemotingClient.V2Client)]\r   ```\r 不需要在客户端项目中进行更改。\r 使用接口程序集生成客户端程序集，确保使用上述程序集属性。\r \r ### <a name=\"using-explicit-v2-classes-to-create-listener-clientfactory\"></a>使用显式 V2 类创建侦听器/ClientFactory\r 请遵循以下步骤。\r 1.  在服务清单中添加名为“ServiceEndpointV2”的终结点资源。\r \r   ```xml\r   <Resources>\r     <Endpoints>\r       <Endpoint Name=\"ServiceEndpointV2\" />  \r     </Endpoints>\r   </Resources>\r   ```\r \r 2. 使用 [Remoting V2Listener](https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.remoting.v2.fabrictransport.runtime.fabrictransportserviceremotingistener?view=azure-dotnet)。 使用的默认服务终结点资源名称为“ServiceEndpointV2”，必须在服务清单中定义该名称。\r \r   ```csharp\r   protected override IEnumerable<ServiceInstanceListener> CreateServiceInstanceListeners()\r     {\r         return new[]\r         {\r             new ServiceInstanceListener((c) =>\r             {\r                 return new FabricTransportServiceRemotingListener(c, this);\r \r             })\r         };\r     }\r   ```\r \r 3. 使用 V2 [客户端工厂](https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.remoting.v2.fabrictransport.client.fabrictransportserviceremotingclientfactory?view=azure-dotnet)。\r   ```csharp\r   var proxyFactory = new ServiceProxyFactory((c) =>\r           {\r               return new FabricTransportServiceRemotingClientFactory();\r           });\r   ```\r \r ## <a name=\"how-to-upgrade-from-remoting-v1-to-remoting-v2\"></a>如何从 Remoting V1 升级到 Remoting V2。\r 若要从 V1 升级到 V2，必须执行双步升级。 按列出的顺序执行以下步骤。\r \r 1. 使用 CompactListener 属性将 V1 服务升级到 V2 服务。\r 此项更改可确保服务在 V1 和 V2 侦听器上侦听。\r \r     a)  在服务清单中添加名为“ServiceEndpointV2”的终结点资源。\r       ```xml\r       <Resources>\r         <Endpoints>\r           <Endpoint Name=\"ServiceEndpointV2\" />  \r         </Endpoints>\r       </Resources>\r       ```\r \r     b)  使用以下扩展方法创建远程处理侦听器。\r \r     ```csharp\r     protected override IEnumerable<ServiceInstanceListener> CreateServiceInstanceListeners()\r     {\r         return this.CreateServiceRemotingInstanceListeners();\r     }\r     ```\r \r     c)  在远程处理接口上添加程序集属性，以使用 CompatListener 和 V2 客户端。\r     ```csharp\r     [assembly: FabricTransportServiceRemotingProvider(RemotingListener = RemotingListener.CompatListener, RemotingClient = RemotingClient.V2Client)]\r \r       ```\r 2. 使用 V2 客户端属性将 V1 客户端升级到 V2 客户端。\r 此步骤确保客户端使用 V2 堆栈。\r 不需要在客户端项目/服务中进行更改。 使用更新的接口程序集生成客户端项目便已足够。\r \r 3. 此步骤是可选的。 使用 V2Listener 属性，然后升级 V2 服务。\r 此步骤确保服务仅在 V2 侦听器上侦听。\r \r ```csharp\r [assembly: FabricTransportServiceRemotingProvider(RemotingListener = RemotingListener.V2Listener, RemotingClient = RemotingClient.V2Client)]\r ```\r \r ## <a name=\"how-to-use-custom-serialization-with-remoting-v2\"></a>如何在 Remoting V2 中使用自定义序列化。\r 以下示例在 Remoting V2 中使用 Json 序列化。\r 1. 实现 IServiceRemotingMessageSerializationProvider 接口，以提供自定义序列化的实现。\r     以下代码片段演示了实现的大致情况。\r \r     ```csharp\r     public class ServiceRemotingJsonSerializationProvider : IServiceRemotingMessageSerializationProvider\r     {\r       public IServiceRemotingRequestMessageBodySerializer CreateRequestMessageSerializer(Type serviceInterfaceType,\r           IEnumerable<Type> requestBodyTypes)\r       {\r           return new ServiceRemotingRequestJsonMessageBodySerializer(serviceInterfaceType, requestBodyTypes);\r       }\r \r       public IServiceRemotingResponseMessageBodySerializer CreateResponseMessageSerializer(Type serviceInterfaceType,\r           IEnumerable<Type> responseBodyTypes)\r       {\r           return new ServiceRemotingResponseJsonMessageBodySerializer(serviceInterfaceType, responseBodyTypes);\r       }\r \r       public IServiceRemotingMessageBodyFactory CreateMessageBodyFactory()\r       {\r           return new JsonMessageFactory();\r       }\r      }\r \r   class JsonMessageFactory: IServiceRemotingMessageBodyFactory\r   {\r       public IServiceRemotingRequestMessageBody CreateRequest(string interfaceName, string methodName,\r           int numberOfParameters)\r       {\r           return new JsonRemotingRequestBody(new JObject());\r       }\r \r       public IServiceRemotingResponseMessageBody CreateResponse(string interfaceName, string methodName)\r       {\r           return  new JsonRemotingResponseBody();\r       }\r    }\r \r   class ServiceRemotingRequestJsonMessageBodySerializer: IServiceRemotingRequestMessageBodySerializer\r   {\r       public ServiceRemotingRequestJsonMessageBodySerializer(Type serviceInterfaceType,\r           IEnumerable<Type> parameterInfo)\r       {\r       }\r \r       public OutgoingMessageBody Serialize(IServiceRemotingRequestMessageBody serviceRemotingRequestMessageBody)\r       {\r           if (serviceRemotingRequestMessageBody == null)\r           {\r               return null;\r           }\r \r           var json = serviceRemotingRequestMessageBody.ToString();\r           var bytes = Encoding.UTF8.GetBytes(json);\r           var segment = new ArraySegment<byte>(bytes);\r           var segments = new List<ArraySegment<byte>> {segment};\r           return new OutgoingMessageBody(segments);\r       }\r \r       public IServiceRemotingRequestMessageBody Deserialize(IncomingMessageBody messageBody)\r       {\r           using (var sr = new StreamReader(messageBody.GetReceivedBuffer()))\r \r           using (JsonReader reader = new JsonTextReader(sr))\r           {\r               var serializer = new JsonSerializer();\r               var ob = serializer.Deserialize<JObject>(reader);\r               var ob2 = new JsonRemotingRequestBody(ob);\r               return ob2;\r           }\r       }\r   }\r \r   class ServiceRemotingResponseJsonMessageBodySerializer: IServiceRemotingResponseMessageBodySerializer\r   {\r \r       public ServiceRemotingResponseJsonMessageBodySerializer(Type serviceInterfaceType,\r           IEnumerable<Type> parameterInfo)\r       {\r       }\r \r       public OutgoingMessageBody Serialize(IServiceRemotingResponseMessageBody responseMessageBody)\r       {\r           var json = JsonConvert.SerializeObject(responseMessageBody,new JsonSerializerSettings()\r           {\r               TypeNameHandling = TypeNameHandling.All\r           });\r           var bytes = Encoding.UTF8.GetBytes(json);\r           var segment = new ArraySegment<byte>(bytes);\r           var list = new List<ArraySegment<byte>> {segment};\r           return new OutgoingMessageBody(list);\r       }\r \r       public IServiceRemotingResponseMessageBody Deserialize(IncomingMessageBody messageBody)\r       {\r           using (var sr = new StreamReader(messageBody.GetReceivedBuffer()))\r \r           using (var reader = new JsonTextReader(sr))\r           {\r               var serializer = JsonSerializer.Create(new JsonSerializerSettings()\r               {\r                   TypeNameHandling = TypeNameHandling.All\r               });\r               return serializer.Deserialize<JsonRemotingResponseBody>(reader);\r           }\r       }\r   }\r   internal class JsonRemotingResponseBody: IServiceRemotingResponseMessageBody\r   {\r       public object Value;\r \r       public void Set(object response)\r       {\r           this.Value = response;\r       }\r \r       public object Get(Type paramType)\r       {\r           return this.Value;\r       }\r   }\r \r   class JsonRemotingRequestBody: IServiceRemotingRequestMessageBody\r     {\r       private readonly JObject jobject;\r \r         public JsonRemotingRequestBody(JObject ob)\r         {\r             this.jobject = ob;\r         }\r \r         public void SetParameter(int position, string parameName, object parameter)\r         {\r             this.jobject.Add(parameName, JToken.FromObject(parameter));\r         }\r \r         public object GetParameter(int position, string parameName, Type paramType)\r        {\r            var ob = this.jobject[parameName];\r            return ob.ToObject(paramType);\r        }\r \r        public override string ToString()\r         {\r             return this.jobject.ToString();\r         }\r     }\r     ```\r \r 2.    使用远程处理侦听器的 JsonSerializationProvider 重写默认的序列化提供程序。\r \r   ```csharp\r   protected override IEnumerable<ServiceInstanceListener> CreateServiceInstanceListeners()\r    {\r        return new[]\r        {\r            new ServiceInstanceListener((c) =>\r            {\r                return new FabricTransportServiceRemotingListener(c, this,\r                    new ServiceRemotingJsonSerializationProvider());\r            })\r        };\r    }\r   ```\r \r 3.    使用远程处理客户端工厂的 JsonSerializationProvider 重写默认的序列化提供程序。\r \r ```csharp\r   var proxyFactory = new ServiceProxyFactory((c) =>\r             {\r                 return new FabricTransportServiceRemotingClientFactory(\r                     serializationProvider: new ServiceRemotingJsonSerializationProvider());\r             });\r   ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r * [Reliable Services 中使用 OWIN 的 Web API](service-fabric-reliable-services-communication-webapi.md)\r * [通过 Reliable Services 进行 WCF 通信](service-fabric-reliable-services-communication-wcf.md)\r * [确保 Reliable Services 的通信安全](service-fabric-reliable-services-secure-communication.md)\r \r <!--Update_Description: wording update -->"}