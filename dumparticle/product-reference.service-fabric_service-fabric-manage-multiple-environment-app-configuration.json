{"Title":"在 Service Fabric 中管理多个环境","Description":"Service Fabric 应用程序可以在规模为一台计算机到数千台计算机的群集上运行。 在某些情况下，需要以不同的方式针对各种环境配置应用程序。 本文介绍如何为每个环境定义不同的应用程序参数。","Content":"# <a name=\"manage-application-parameters-for-multiple-environments\"></a>管理多个环境的应用程序参数\r 可以从任何位置，使用任意数量的计算机（从一台到数千台）来创建 Service Fabric 群集。 尽管无需针对各种环境进行修改即可运行应用程序二进制文件，但通常会根据所要部署的计算机数目，以不同的方式配置应用程序。\r \r 举个简单的例子，假设某个无状态服务有 `InstanceCount` 参数。 在 Azure 中运行应用程序时，通常要将此参数设置为特殊值“-1”。 此配置可以确保服务在群集中的每个节点上运行（或者，如果设置了放置约束，则在节点类型中的每个节点上运行）。 但是，此配置并不适用于单计算机群集，因为不能有多个进程在单计算机的同一终结点上侦听。 在这种情况下，通常会将 `InstanceCount` 设置为“1”。\r \r ## <a name=\"specifying-environment-specific-parameters\"></a>指定特定于环境的参数\r 此配置问题的解决方法是使用一组参数化默认服务和应用程序参数文件，其中填充了给定环境的参数值。 默认服务和应用程序参数在应用程序和服务清单中进行配置。 ServiceManifest.xml 和 ApplicationManifest.xml 文件的架构定义随 Service Fabric SDK 和工具一起安装到 *C:\\Program Files\\Microsoft SDKs\\Service Fabric\\schemas\\ServiceFabricServiceModel.xsd*。\r \r ### <a name=\"default-services\"></a>默认服务\r Service Fabric 应用程序由服务实例的集合组成。 尽管你可以先创建一个空应用程序，然后动态创建所有服务实例，但是，大多数应用程序都有一套核心服务，这些服务始终应该在实例化应用程序时创建。 这些服务称为“默认服务”。 它们在应用程序清单中指定。方括号中包含每个环境配置的占位符：\r \r ```xml\r <DefaultServices>\r     <Service Name=\"Stateful1\">\r         <StatefulService\r             ServiceTypeName=\"Stateful1Type\"\r             TargetReplicaSetSize=\"[Stateful1_TargetReplicaSetSize]\"\r             MinReplicaSetSize=\"[Stateful1_MinReplicaSetSize]\">\r \r             <UniformInt64Partition\r                 PartitionCount=\"[Stateful1_PartitionCount]\"\r                 LowKey=\"-9223372036854775808\"\r                 HighKey=\"9223372036854775807\"\r             />\r         </StatefulService>\r     </Service>\r </DefaultServices>\r ```\r \r 必须在应用程序清单的 Parameters 元素中定义每个命名参数：\r \r ```xml\r <Parameters>\r     <Parameter Name=\"Stateful1_MinReplicaSetSize\" DefaultValue=\"3\" />\r     <Parameter Name=\"Stateful1_PartitionCount\" DefaultValue=\"1\" />\r     <Parameter Name=\"Stateful1_TargetReplicaSetSize\" DefaultValue=\"3\" />\r </Parameters>\r ```\r \r DefaultValue 属性指定给定环境缺少更具体的参数时所要使用的值。\r \r > [!NOTE]\r > 并非所有的服务实例参数都适用于每个环境配置。 在上述示例中，已针对服务的所有实例显式定义服务分区方案的 LowKey 和 HighKey 值，因为分区范围是数据域的函数，而不是环境的函数。\r > \r > \r \r ### <a name=\"per-environment-service-configuration-settings\"></a>每个环境的服务配置设置\r 服务可以使用 [Service Fabric 应用程序模型](service-fabric-application-model.md)加入配置包，其中包含可在运行时读取的自定义键值对。 也可以通过在应用程序清单中指定 `ConfigOverride` ，按环境区分这些设置的值。\r \r 假设`Stateful1`服务的 Config\\Settings.xml 文件中存在以下设置：\r \r ```xml\r <Section Name=\"MyConfigSection\">\r   <Parameter Name=\"MaxQueueSize\" Value=\"25\" />\r </Section>\r ```\r 若要重写特定应用程序/环境对的此值，请在应用程序清单中导入服务清单时创建 `ConfigOverride` 。\r \r ```xml\r <ConfigOverrides>\r      <ConfigOverride Name=\"Config\">\r         <Settings>\r            <Section Name=\"MyConfigSection\">\r               <Parameter Name=\"MaxQueueSize\" Value=\"[Stateful1_MaxQueueSize]\" />\r            </Section>\r         </Settings>\r      </ConfigOverride>\r </ConfigOverrides>\r ```\r 然后可根据上面所示，按环境配置此参数。 为此，可以在应用程序清单的 parameters 节中声明该参数，并在应用程序参数文件中指定特定于环境的值。\r \r > [!NOTE]\r > 对于服务配置设置，可在三个位置设置键的值：服务配置包、应用程序清单和应用程序参数文件。 Service Fabric 始终先从应用程序参数文件（如果已指定）进行选择，再从应用程序清单选择，最后从配置包选择。\r > \r > \r \r ### <a name=\"setting-and-using-environment-variables\"></a>设置和使用环境变量 \r 可以先在 ServiceManifest.xml 文件中指定和设置环境变量，并在 ApplicationManifest.xml 文件中逐个实例地将其重写。\r 下面的示例演示了两个环境变量：一个具有值集合，另一个被重写。 可以使用应用程序参数设置环境变量值，其方式与使用这些参数进行配置重写相同。\r \r ```xml\r <?xml version=\"1.0\" encoding=\"utf-8\" ?>\r <ServiceManifest Name=\"MyServiceManifest\" Version=\"SvcManifestVersion1\" xmlns=\"http://schemas.microsoft.com/2011/01/fabric\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r   <Description>An example service manifest</Description>\r   <ServiceTypes>\r     <StatelessServiceType ServiceTypeName=\"MyServiceType\" />\r   </ServiceTypes>\r   <CodePackage Name=\"MyCode\" Version=\"CodeVersion1\">\r     <SetupEntryPoint>\r       <ExeHost>\r         <Program>MySetup.bat</Program>\r       </ExeHost>\r     </SetupEntryPoint>\r     <EntryPoint>\r       <ExeHost>\r         <Program>MyServiceHost.exe</Program>\r       </ExeHost>\r     </EntryPoint>\r     <EnvironmentVariables>\r       <EnvironmentVariable Name=\"MyEnvVariable\" Value=\"\"/>\r       <EnvironmentVariable Name=\"HttpGatewayPort\" Value=\"19080\"/>\r     </EnvironmentVariables>\r   </CodePackage>\r   <ConfigPackage Name=\"MyConfig\" Version=\"ConfigVersion1\" />\r   <DataPackage Name=\"MyData\" Version=\"DataVersion1\" />\r </ServiceManifest>\r ```\r \r 若要在 ApplicationManifest.xml 中重写环境变量，请使用 `EnvironmentOverrides` 元素引用 ServiceManifest 中的代码包。\r \r ```xml\r <ServiceManifestImport>\r     <ServiceManifestRef ServiceManifestName=\"FrontEndServicePkg\" ServiceManifestVersion=\"1.0.0\" />\r     <EnvironmentOverrides CodePackageRef=\"MyCode\">\r         <EnvironmentVariable Name=\"MyEnvVariable\" Value=\"mydata\"/>\r     </EnvironmentOverrides>\r </ServiceManifestImport>\r ```\r \r  创建命名的服务实例以后，即可从代码访问环境变量。 例如，在 C# 中可以执行以下代码：\r \r ```csharp\r string EnvVariable = Environment.GetEnvironmentVariable(\"MyEnvVariable\");\r ```\r \r ### <a name=\"service-fabric-environment-variables\"></a>Service Fabric 环境变量\r Service Fabric 针对每个服务实例设置内置的环境变量。 环境变量的完整列表如下所示，其中以粗体显示的环境变量将用于服务中，其他的则由 Service Fabric 运行时使用。 \r \r * Fabric_ApplicationHostId\r * Fabric_ApplicationHostType\r * Fabric_ApplicationId\r * **Fabric_ApplicationName**\r * Fabric_CodePackageInstanceId\r * **Fabric_CodePackageName**\r * **Fabric_Endpoint_[YourServiceName]TypeEndpoint**\r * **Fabric_Folder_App_Log**\r * **Fabric_Folder_App_Temp**\r * **Fabric_Folder_App_Work**\r * **Fabric_Folder_Application**\r * Fabric_NodeId\r * **Fabric_NodeIPOrFQDN**\r * **Fabric_NodeName**\r * Fabric_RuntimeConnectionAddress\r * Fabric_ServicePackageInstanceId\r * Fabric_ServicePackageName\r * Fabric_ServicePackageVersionInstance\r * FabricPackageFileName\r \r 下列代码说明如何列出 Service Fabric 环境变量\r  ```csharp\r     foreach (DictionaryEntry de in Environment.GetEnvironmentVariables())\r     {\r         if (de.Key.ToString().StartsWith(\"Fabric\"))\r         {\r             Console.WriteLine(\" Environment variable {0} = {1}\", de.Key, de.Value);\r         }\r     }\r ```\r 以下是应用程序类型称为 `GuestExe.Application`、服务类型称为 `FrontEndService` 的应用在本地开发计算机上运行时环境变量的示例。\r \r * **Fabric_ApplicationName = fabric:/GuestExe.Application**\r * **Fabric_CodePackageName = Code**\r * **Fabric_Endpoint_FrontEndServiceTypeEndpoint = 80**\r * **Fabric_NodeIPOrFQDN = localhost**\r * **Fabric_NodeName = _Node_2**\r \r ### <a name=\"application-parameter-files\"></a>应用程序参数文件\r Service Fabric 应用程序项目可以包含一个或多个应用程序参数文件。 每个文件为应用程序清单中定义的参数定义特定值：\r \r ```xml\r <!-- ApplicationParameters\\Local.xml -->\r \r <Application Name=\"fabric:/Application1\" xmlns=\"http://schemas.microsoft.com/2011/01/fabric\">\r     <Parameters>\r         <Parameter Name =\"Stateful1_MinReplicaSetSize\" Value=\"3\" />\r         <Parameter Name=\"Stateful1_PartitionCount\" Value=\"1\" />\r         <Parameter Name=\"Stateful1_TargetReplicaSetSize\" Value=\"3\" />\r     </Parameters>\r </Application>\r ```\r 默认情况下，新应用程序包含三个应用程序参数文件，分别名为 Local.1Node.xml、Local.5Node.xml 和 Cloud.xml：\r \r ![解决方案资源管理器中的应用程序参数文件][app-parameters-solution-explorer]\r \r 若要创建参数文件，只需复制并粘贴现有参数文件并为它指定新名称。\r \r ## <a name=\"identifying-environment-specific-parameters-during-deployment\"></a>在部署期间识别特定于环境的参数\r 部署时，需选择要应用于应用程序的适当参数文件。 可以通过 Visual Studio 中的“发布”对话框或通过 PowerShell 执行此操作。\r \r ### <a name=\"deploy-from-visual-studio\"></a>从 Visual Studio 部署\r 在 Visual Studio 中发布应用程序时，可以从可用参数文件列表中进行选择。\r \r ![在“发布”对话框中选择参数文件][publishdialog]\r \r ### <a name=\"deploy-from-powershell\"></a>从 PowerShell 部署\r 应用程序项目模板中包含的 `Deploy-FabricApplication.ps1` PowerShell 脚本可接受发布配置文件作为参数，而 PublishProfile 包含对应用程序参数文件的引用。\r \r   ```PowerShell\r     ./Deploy-FabricApplication -ApplicationPackagePath <app_package_path> -PublishProfileFile <publishprofile_path>\r   ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 若要深入了解本主题中所述的某些核心概念，请参阅 [Service Fabric 技术概述](service-fabric-technical-overview.md)。 有关 Visual Studio 中其他可用应用管理功能的信息，请参阅[在 Visual Studio 中管理 Service Fabric 应用程序](service-fabric-manage-application-in-visual-studio.md)。\r \r <!-- Image references -->\r \r [publishdialog]: ./media/service-fabric-manage-multiple-environment-app-configuration/publish-dialog-choose-app-config.png\r [app-parameters-solution-explorer]:./media/service-fabric-manage-multiple-environment-app-configuration/app-parameters-in-solution-explorer.png\r \r <!--Update_Description: update meta properties, wording update-->"}