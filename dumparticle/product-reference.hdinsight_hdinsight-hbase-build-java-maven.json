{"Title":"为基于 Windows 的 Azure HDInsight 构建 Java HBase 应用程序","Description":"了解如何使用 Apache Maven 构建基于 Java 的 Apache HBase 应用程序，并将其部署到基于 Windows 的 Azure HDInsight 群集。","Content":"# <a name=\"use-maven-to-build-java-applications-that-use-hbase-with-windows-based-hdinsight-hadoop\"></a>借助 Maven 构建可将 HBase 与基于 Windows 的 HDInsight (Hadoop) 配合使用的 Java 应用程序\r 了解如何通过使用 Apache Maven 在 Java 中创建和构建 [Apache HBase](http://hbase.apache.org/) 应用程序。 然后，将该应用程序用于 Azure HDInsight (Hadoop)。\r \r [Maven](http://maven.apache.org/) 是一种软件项目管理和综合工具，可用于为 Java 项目构建软件、文档和报告。 在本文中，可了解如何使用 Maven 创建一个基本的 Java 应用程序，该应用程序可在 Azure HDInsight 群集中创建、查询和删除 HBase 表。\r \r > [!IMPORTANT]\r > 本文档中的步骤需要使用 Windows 的 HDInsight 群集。 Linux 是在 HDInsight 3.4 版或更高版本上使用的唯一操作系统。 有关详细信息，请参阅 [HDInsight 在 Windows 上停用](hdinsight-component-versioning.md#hdinsight-windows-retirement)。\r \r ## <a name=\"requirements\"></a>要求\r \r [!INCLUDE [hdinsight-linux-acn-version.md](../../includes/hdinsight-linux-acn-version.md)]\r \r * [Java 平台 JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) 7 或更高版本\r * [Maven](http://maven.apache.org/)\r * 装有 HBase 的基于 Windows 的 HDInsight 群集\r \r     > [!NOTE]\r     > 本文档中的步骤已在 HDInsight 群集版本 3.2 和 3.3 中测试。 示例中提供的默认值适用于 HDInsight 3.3 群集。\r \r ## <a name=\"create-the-project\"></a>创建项目\r 1. 在开发环境中，通过命令行将目录更改为要创建项目的位置，例如 `cd code\\hdinsight`。\r 2. 使用随同 Maven 一起安装的 **mvn** 命令，为项目生成基架。\r \r         mvn archetype:generate -DgroupId=com.microsoft.examples -DartifactId=hbaseapp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\r \r     此命令将使用 artifactID 参数（本示例中的 hbaseapp）指定的名称在当前位置创建目录。此目录包含以下项：\r \r    * **pom.xml**：项目对象模型 ([POM](http://maven.apache.org/guides/introduction/introduction-to-the-pom.html))，其中包含用于生成项目的信息和配置详细信息。\r    * src：包含 main\\java\\com\\microsoft\\examples 目录的目录，用户将在其中创作应用程序。\r 3. 删除 src\\test\\java\\com\\microsoft\\examples\\apptest.java 文件，因为本示例中不使用该文件。\r \r ## <a name=\"update-the-project-object-model\"></a>更新项目对象模型\r 1. 编辑 **pom.xml** 文件，并将以下代码添加到 `<dependencies>` 部分：\r \r         <dependency>\r           <groupId>org.apache.hbase</groupId>\r           <artifactId>hbase-client</artifactId>\r           <version>1.1.2</version>\r         </dependency>\r \r     本部分会告知 Maven，项目需要 hbase-client 版本 1.1.2。 在编译时，将从默认的 Maven 存储库下载该依赖项。 可以使用 [Maven 中央存储库](http://search.maven.org/#artifactdetails%7Corg.apache.hbase%7Chbase-client%7C0.98.4-hadoop2%7Cjar) 搜索来了解有关此依赖性的详细信息。\r \r    > [!IMPORTANT]\r    > 版本号必须与 HDInsight 群集随附的 HBase 版本匹配。 可以使用下表来查找正确的版本号。\r    >\r    >\r \r    | HDInsight 群集版本 | 要使用的 HBase 版本 |\r    | --- | --- |\r    | 3.2 |0.98.4-hadoop2 |\r    | 3.3 |1.1.2 |\r \r     有关 HDInsight 版本和组件的详细信息，请参阅 [HDInsight 提供哪些不同的 Hadoop 组件](hdinsight-component-versioning.md)。\r 2. 如果使用 HDInsight 3.3 群集，则还必须将以下代码添加到 `<dependencies>` 节：\r \r         <dependency>\r             <groupId>org.apache.phoenix</groupId>\r             <artifactId>phoenix-core</artifactId>\r             <version>4.4.0-HBase-1.1</version>\r         </dependency>\r \r     此依赖项会加载 Hbase 版本 1.1.x 使用的 phoenix-core 组件。\r 3. 将以下代码添加到 **pom.xml** 文件。 本部分必须位于文件中的 `<project>...</project>` 标记内，例如 `</dependencies>` 和 `</project>` 之间。\r \r         <build>\r           <sourceDirectory>src</sourceDirectory>\r           <resources>\r               <resource>\r                 <directory>${basedir}/conf</directory>\r                 <filtering>false</filtering>\r                 <includes>\r                   <include>hbase-site.xml</include>\r                 </includes>\r               </resource>\r             </resources>\r           <plugins>\r             <plugin>\r                 <groupId>org.apache.maven.plugins</groupId>\r                 <artifactId>maven-compiler-plugin</artifactId>\r                 <version>3.3</version>\r                 <configuration>\r                     <source>1.7</source>\r                     <target>1.7</target>\r                 </configuration>\r               </plugin>\r             <plugin>\r               <groupId>org.apache.maven.plugins</groupId>\r               <artifactId>maven-shade-plugin</artifactId>\r               <version>2.3</version>\r               <configuration>\r                 <transformers>\r                   <transformer implementation=\"org.apache.maven.plugins.shade.resource.ApacheLicenseResourceTransformer\">\r                     </transformer>\r                   </transformers>\r               </configuration>\r               <executions>\r                 <execution>\r                   <phase>package</phase>\r                   <goals>\r                     <goal>shade</goal>\r                   </goals>\r                 </execution>\r               </executions>\r             </plugin>\r           </plugins>\r         </build>\r \r     `<resources>` 部分将配置包含与 HBase 有关的配置信息的资源 (conf\\hbase-site.xml)。\r \r    > [!NOTE]\r    > 也可以通过代码设置配置值。 有关如何完成此操作的说明，请参阅所采用的 **CreateTable** 示例中的注释。\r    >\r    >\r \r     `<plugins>` 部分将配置 [Maven 编译器插件](http://maven.apache.org/plugins/maven-compiler-plugin/)和 [Maven 阴影插件](http://maven.apache.org/plugins/maven-shade-plugin/)。 该编译器插件用于编译拓扑。 该阴影插件用于防止在由 Maven 构建的 JAR 程序包中复制许可证。 使用此插件的原因在于，重复的许可证文件会导致 HDInsight 群集在运行时出错。 将 maven-shade-plugin 用于 `ApacheLicenseResourceTransformer` 实现可防止发生此错误。\r \r     maven-shade-plugin 还会生成 uber jar（或 fat jar），其中包含应用程序所需的所有依赖项。\r 4. 保存 **pom.xml** 文件。\r 5. 在 hbaseapp 目录中创建名为 conf 的新目录。 在 conf 目录中，创建一个名为 hbase-site.xml 的文件。 将以下内容用作该文件的内容：\r \r         <?xml version=\"1.0\"?>\r         <?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\r         <!--\r         /**\r           * Copyright 2010 The Apache Software Foundation\r           *\r           * Licensed to the Apache Software Foundation (ASF) under one\r           * or more contributor license agreements.  See the NOTICE file\r           * distributed with this work for additional information\r           * regarding copyright ownership.  The ASF licenses this file\r           * to you under the Apache License, Version 2.0 (the\r           * \"License\"); you may not use this file except in compliance\r           * with the License.  You may obtain a copy of the License at\r           *\r           *     http://www.apache.org/licenses/LICENSE-2.0\r           *\r           * Unless required by applicable law or agreed to in writing, software\r           * distributed under the License is distributed on an \"AS IS\" BASIS,\r           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r           * See the License for the specific language governing permissions and\r           * limitations under the License.\r           */\r         -->\r         <configuration>\r           <property>\r             <name>hbase.cluster.distributed</name>\r             <value>true</value>\r           </property>\r           <property>\r             <name>hbase.zookeeper.quorum</name>\r             <value>zookeeper0,zookeeper1,zookeeper2</value>\r           </property>\r           <property>\r             <name>hbase.zookeeper.property.clientPort</name>\r             <value>2181</value>\r           </property>\r         </configuration>\r \r     此文件将用于加载 HDInsight 群集的 HBase 配置。\r \r    > [!NOTE]\r    > 这是最小的 hbase-site.xml 文件，其中包含 HDInsight 群集的最低基本设置。\r \r 6. 保存 **hbase-site.xml** 文件。\r \r ## <a name=\"create-the-application\"></a>创建应用程序\r 1. 转到 hbaseapp\\src\\main\\java\\com\\microsoft\\examples 目录，然后将 app.java 文件重命名为 CreateTable.java。\r 2. 打开 **CreateTable.java** 文件，并将现有内容替换为以下代码：\r \r         package com.microsoft.examples;\r         import java.io.IOException;\r \r         import org.apache.hadoop.conf.Configuration;\r         import org.apache.hadoop.hbase.HBaseConfiguration;\r         import org.apache.hadoop.hbase.client.HBaseAdmin;\r         import org.apache.hadoop.hbase.HTableDescriptor;\r         import org.apache.hadoop.hbase.TableName;\r         import org.apache.hadoop.hbase.HColumnDescriptor;\r         import org.apache.hadoop.hbase.client.HTable;\r         import org.apache.hadoop.hbase.client.Put;\r         import org.apache.hadoop.hbase.util.Bytes;\r \r         public class CreateTable {\r           public static void main(String[] args) throws IOException {\r             Configuration config = HBaseConfiguration.create();\r \r             // Example of setting zookeeper values for HDInsight\r             // in code instead of an hbase-site.xml file\r             //\r             // config.set(\"hbase.zookeeper.quorum\",\r             //            \"zookeepernode0,zookeepernode1,zookeepernode2\");\r             //config.set(\"hbase.zookeeper.property.clientPort\", \"2181\");\r             //config.set(\"hbase.cluster.distributed\", \"true\");\r             // The following sets the znode root for Linux-based HDInsight\r             //config.set(\"zookeeper.znode.parent\",\"/hbase-unsecure\");\r \r             // create an admin object using the config\r             HBaseAdmin admin = new HBaseAdmin(config);\r \r             // create the table...\r             HTableDescriptor tableDescriptor = new HTableDescriptor(TableName.valueOf(\"people\"));\r             // ... with two column families\r             tableDescriptor.addFamily(new HColumnDescriptor(\"name\"));\r             tableDescriptor.addFamily(new HColumnDescriptor(\"contactinfo\"));\r             admin.createTable(tableDescriptor);\r \r             // define some people\r             String[][] people = {\r                 { \"1\", \"Marcel\", \"Haddad\", \"marcel@fabrikam.com\"},\r                 { \"2\", \"Franklin\", \"Holtz\", \"franklin@contoso.com\" },\r                 { \"3\", \"Dwayne\", \"McKee\", \"dwayne@fabrikam.com\" },\r                 { \"4\", \"Rae\", \"Schroeder\", \"rae@contoso.com\" },\r                 { \"5\", \"Rosalie\", \"burton\", \"rosalie@fabrikam.com\"},\r                 { \"6\", \"Gabriela\", \"Ingram\", \"gabriela@contoso.com\"} };\r \r             HTable table = new HTable(config, \"people\");\r \r             // Add each person to the table\r             //   Use the `name` column family for the name\r             //   Use the `contactinfo` column family for the email\r             for (int i = 0; i< people.length; i++) {\r               Put person = new Put(Bytes.toBytes(people[i][0]));\r               person.add(Bytes.toBytes(\"name\"), Bytes.toBytes(\"first\"), Bytes.toBytes(people[i][1]));\r               person.add(Bytes.toBytes(\"name\"), Bytes.toBytes(\"last\"), Bytes.toBytes(people[i][2]));\r               person.add(Bytes.toBytes(\"contactinfo\"), Bytes.toBytes(\"email\"), Bytes.toBytes(people[i][3]));\r               table.put(person);\r             }\r             // flush commits and close the table\r             table.flushCommits();\r             table.close();\r           }\r         }\r \r     这是 CreateTable 类，该类将创建名为 people 的表，并使用一些预定义的用户填充它。\r 3. 保存 **CreateTable.java** 文件。\r 4. 在 hbaseapp\\src\\main\\java\\com\\microsoft\\examples 目录中，创建名为 SearchByEmail.java 的新文件。 使用以下代码作为此文件的内容：\r \r         package com.microsoft.examples;\r         import java.io.IOException;\r \r         import org.apache.hadoop.conf.Configuration;\r         import org.apache.hadoop.hbase.HBaseConfiguration;\r         import org.apache.hadoop.hbase.client.HTable;\r         import org.apache.hadoop.hbase.client.Scan;\r         import org.apache.hadoop.hbase.client.ResultScanner;\r         import org.apache.hadoop.hbase.client.Result;\r         import org.apache.hadoop.hbase.filter.RegexStringComparator;\r         import org.apache.hadoop.hbase.filter.SingleColumnValueFilter;\r         import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;\r         import org.apache.hadoop.hbase.util.Bytes;\r         import org.apache.hadoop.util.GenericOptionsParser;\r \r         public class SearchByEmail {\r           public static void main(String[] args) throws IOException {\r             Configuration config = HBaseConfiguration.create();\r \r             // Use GenericOptionsParser to get only the parameters to the class\r             // and not all the parameters passed (when using WebHCat for example)\r             String[] otherArgs = new GenericOptionsParser(config, args).getRemainingArgs();\r             if (otherArgs.length != 1) {\r               System.out.println(\"usage: [regular expression]\");\r               System.exit(-1);\r             }\r \r             // Open the table\r             HTable table = new HTable(config, \"people\");\r \r             // Define the family and qualifiers to be used\r             byte[] contactFamily = Bytes.toBytes(\"contactinfo\");\r             byte[] emailQualifier = Bytes.toBytes(\"email\");\r             byte[] nameFamily = Bytes.toBytes(\"name\");\r             byte[] firstNameQualifier = Bytes.toBytes(\"first\");\r             byte[] lastNameQualifier = Bytes.toBytes(\"last\");\r \r             // Create a new regex filter\r             RegexStringComparator emailFilter = new RegexStringComparator(otherArgs[0]);\r             // Attach the regex filter to a filter\r             //   for the email column\r             SingleColumnValueFilter filter = new SingleColumnValueFilter(\r               contactFamily,\r               emailQualifier,\r               CompareOp.EQUAL,\r               emailFilter\r             );\r \r             // Create a scan and set the filter\r             Scan scan = new Scan();\r             scan.setFilter(filter);\r \r             // Get the results\r             ResultScanner results = table.getScanner(scan);\r             // Iterate over results and print  values\r             for (Result result : results ) {\r               String id = new String(result.getRow());\r               byte[] firstNameObj = result.getValue(nameFamily, firstNameQualifier);\r               String firstName = new String(firstNameObj);\r               byte[] lastNameObj = result.getValue(nameFamily, lastNameQualifier);\r               String lastName = new String(lastNameObj);\r               System.out.println(firstName + \" \" + lastName + \" - ID: \" + id);\r               byte[] emailObj = result.getValue(contactFamily, emailQualifier);\r               String email = new String(emailObj);\r               System.out.println(firstName + \" \" + lastName + \" - \" + email + \" - ID: \" + id);\r             }\r             results.close();\r             table.close();\r           }\r         }\r \r     **SearchByEmail** 类可用于按电子邮件地址查询行。 由于它使用正则表达式筛选器，因此，可以在使用类时提供字符串或正则表达式。\r 5. 保存 **SearchByEmail.java** 文件。\r 6. 在 hbaseapp\\src\\main\\hava\\com\\microsoft\\examples 目录中，创建名为 DeleteTable.java 的新文件。 使用以下代码作为此文件的内容：\r \r         package com.microsoft.examples;\r         import java.io.IOException;\r \r         import org.apache.hadoop.conf.Configuration;\r         import org.apache.hadoop.hbase.HBaseConfiguration;\r         import org.apache.hadoop.hbase.client.HBaseAdmin;\r \r         public class DeleteTable {\r           public static void main(String[] args) throws IOException {\r             Configuration config = HBaseConfiguration.create();\r \r             // Create an admin object using the config\r             HBaseAdmin admin = new HBaseAdmin(config);\r \r             // Disable, and then delete the table\r             admin.disableTable(\"people\");\r             admin.deleteTable(\"people\");\r           }\r         }\r \r     此类用于清除本示例，方法是禁用并删除由 **CreateTable** 类创建的表。\r 7. 保存 **DeleteTable.java** 文件。\r \r ## <a name=\"build-and-package-the-application\"></a>生成并打包应用程序\r 1. 打开命令提示符，并将目录更改为 **hbaseapp** 目录。\r 2. 使用以下命令来构建包含应用程序的 JAR 文件：\r \r         mvn clean package\r \r     这将清除任何以前构建的项目，下载任何尚未安装的依赖项，并构建和打包应用程序。\r 3. 完成该命令后，hbaseapp/target 目录将包含名为 hbaseapp-1.0-SNAPSHOT.jar 的文件。\r \r    > [!NOTE]\r    > hbaseapp-1.0-SNAPSHOT.jar 文件是 uber jar（有时称为 fat jar），其中包含运行应用程序所需的所有依赖项。\r \r ## <a name=\"upload-the-jar-file-and-start-a-job\"></a>上传 JAR 文件并启动作业\r 可使用多种方法将文件上传到 HDInsight 群集，如[在 HDInsight 中为 Hadoop 作业上传数据](hdinsight-upload-data.md)中所述。 以下步骤使用 Azure PowerShell。\r \r [!INCLUDE [upgrade-powershell](../../includes/hdinsight-use-latest-powershell.md)]\r \r 1. 安装并配置 Azure PowerShell 后，请创建名为 **hbase-runner.psm1**的新文件。 使用以下项作为此文件的内容：\r \r         <#\r         .SYNOPSIS\r         Copies a file to the primary storage of an HDInsight cluster.\r         .DESCRIPTION\r         Copies a file from a local directory to the blob container for\r         the HDInsight cluster.\r         .EXAMPLE\r         Start-HBaseExample -className \"com.microsoft.examples.CreateTable\"\r         -clusterName \"MyHDInsightCluster\"\r \r         .EXAMPLE\r         Start-HBaseExample -className \"com.microsoft.examples.SearchByEmail\"\r         -clusterName \"MyHDInsightCluster\"\r         -emailRegex \"contoso.com\"\r \r         .EXAMPLE\r         Start-HBaseExample -className \"com.microsoft.examples.SearchByEmail\"\r         -clusterName \"MyHDInsightCluster\"\r         -emailRegex \"^r\" -showErr\r         #>\r \r         function Start-HBaseExample {\r         [CmdletBinding(SupportsShouldProcess = $true)]\r         param(\r         #The class to run\r         [Parameter(Mandatory = $true)]\r         [String]$className,\r \r         #The name of the HDInsight cluster\r         [Parameter(Mandatory = $true)]\r         [String]$clusterName,\r \r         #Only used when using SearchByEmail\r         [Parameter(Mandatory = $false)]\r         [String]$emailRegex,\r \r         #Use if you want to see stderr output\r         [Parameter(Mandatory = $false)]\r         [Switch]$showErr\r         )\r \r         Set-StrictMode -Version 3\r \r         # Is the Azure module installed?\r         FindAzure\r \r         # Get the login for the HDInsight cluster\r         $creds=Get-Credential -Message \"Enter the login for the cluster\" -UserName \"admin\"\r \r         # The JAR\r         $jarFile = \"wasb:///example/jars/hbaseapp-1.0-SNAPSHOT.jar\"\r \r         # The job definition\r         $jobDefinition = New-AzureRmHDInsightMapReduceJobDefinition `\r             -JarFile $jarFile `\r             -ClassName $className `\r             -Arguments $emailRegex\r \r         # Get the job output\r         $job = Start-AzureRmHDInsightJob `\r             -ClusterName $clusterName `\r             -JobDefinition $jobDefinition `\r             -HttpCredential $creds\r         Write-Host \"Wait for the job to complete ...\" -ForegroundColor Green\r         Wait-AzureRmHDInsightJob `\r             -ClusterName $clusterName `\r             -JobId $job.JobId `\r             -HttpCredential $creds\r         if($showErr)\r         {\r         Write-Host \"STDERR\"\r         Get-AzureRmHDInsightJobOutput `\r                     -Clustername $clusterName `\r                     -JobId $job.JobId `\r                     -HttpCredential $creds `\r                     -DisplayOutputType StandardError\r         }\r         Write-Host \"Display the standard output ...\" -ForegroundColor Green\r         Get-AzureRmHDInsightJobOutput `\r                     -Clustername $clusterName `\r                     -JobId $job.JobId `\r                     -HttpCredential $creds\r         }\r \r         <#\r         .SYNOPSIS\r         Copies a file to the primary storage of an HDInsight cluster.\r         .DESCRIPTION\r         Copies a file from a local directory to the blob container for\r         the HDInsight cluster.\r         .EXAMPLE\r         Add-HDInsightFile -localPath \"C:\\temp\\data.txt\"\r         -destinationPath \"example/data/data.txt\"\r         -ClusterName \"MyHDInsightCluster\"\r         .EXAMPLE\r         Add-HDInsightFile -localPath \"C:\\temp\\data.txt\"\r         -destinationPath \"example/data/data.txt\"\r         -ClusterName \"MyHDInsightCluster\"\r         -Container \"MyContainer\"\r         #>\r \r         function Add-HDInsightFile {\r             [CmdletBinding(SupportsShouldProcess = $true)]\r             param(\r                 #The path to the local file.\r                 [Parameter(Mandatory = $true)]\r                 [String]$localPath,\r \r                 #The destination path and file name, relative to the root of the container.\r                 [Parameter(Mandatory = $true)]\r                 [String]$destinationPath,\r \r                 #The name of the HDInsight cluster\r                 [Parameter(Mandatory = $true)]\r                 [String]$clusterName,\r \r                 #If specified, overwrites existing files without prompting\r                 [Parameter(Mandatory = $false)]\r                 [Switch]$force\r             )\r \r             Set-StrictMode -Version 3\r \r             # Is the Azure module installed?\r             FindAzure\r \r             # Get authentication for the cluster\r             $creds=Get-Credential\r \r             # Does the local path exist?\r             if (-not (Test-Path $localPath))\r             {\r                 throw \"Source path '$localPath' does not exist.\"\r             }\r \r             # Get the primary storage container\r             $storage = GetStorage -clusterName $clusterName\r \r             # Upload file to storage, overwriting existing files if -force was used.\r             Set-AzureStorageBlobContent -File $localPath `\r                 -Blob $destinationPath `\r                 -force:$force `\r                 -Container $storage.container `\r                 -Context $storage.context\r         }\r \r         function FindAzure {\r             # Is there an active Azure subscription?\r             $sub = Get-AzureRmSubscription -ErrorAction SilentlyContinue\r             if(-not($sub))\r             {\r                 throw \"No active Azure subscription found! If you have a subscription, use the Login-AzureRmAccount cmdlet to login to your subscription.\"\r             }\r         }\r \r         function GetStorage {\r             param(\r                 [Parameter(Mandatory = $true)]\r                 [String]$clusterName\r             )\r             $hdi = Get-AzureRmHDInsightCluster -ClusterName $clusterName\r             # Does the cluster exist?\r             if (!$hdi)\r             {\r                 throw \"HDInsight cluster '$clusterName' does not exist.\"\r             }\r             # Create a return object for context & container\r             $return = @{}\r             $storageAccounts = @{}\r \r             # Get storage information\r             $resourceGroup = $hdi.ResourceGroup\r             $storageAccountName=$hdi.DefaultStorageAccount.split('.')[0]\r             $container=$hdi.DefaultStorageContainer\r             $storageAccountKey=(Get-AzureRmStorageAccountKey `\r                 -Name $storageAccountName `\r             -ResourceGroupName $resourceGroup)[0].Value\r             # Get the resource group, in case we need that\r             $return.resourceGroup = $resourceGroup\r             # Get the storage context, as we can't depend\r             # on using the default storage context\r             $return.context = New-AzureStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey\r             # Get the container, so we know where to\r             # find/store blobs\r             $return.container = $container\r             # Return storage accounts to support finding all accounts for\r             # a cluster\r             $return.storageAccount = $storageAccountName\r             $return.storageAccountKey = $storageAccountKey\r \r             return $return\r         }\r         # Only export the verb-phrase things\r         export-modulemember *-*\r \r     此文件包含两个模块：\r \r    * **Add-HDInsightFile** - 用于将文件上传到 HDInsight\r    * **Start-HBaseExample** - 用于运行以前创建的类\r 2. 保存 **hbase-runner.psm1** 文件。\r 3. 打开新的 Azure PowerShell 窗口，将目录切换到 **hbaseapp** 目录，并运行以下命令。\r \r         PS C:\\ Import-Module c:\\path\\to\\hbase-runner.psm1\r \r     将路径切换到前面创建的 **hbase-runner.psm1** 文件所在的位置。 这会为此 Azure PowerShell 会话注册模块。\r 4. 使用以下命令将 **hbaseapp-1.0-SNAPSHOT.jar** 上传到 HDInsight 群集。\r \r         Add-HDInsightFile -localPath target\\hbaseapp-1.0-SNAPSHOT.jar -destinationPath example/jars/hbaseapp-1.0-SNAPSHOT.jar -clusterName hdinsightclustername\r \r     将 **hdinsightclustername** 替换为 HDInsight 群集的名称。 该命令将 **hbaseapp-1.0-SNAPSHOT.jar** 上传到 HDInsight 群集的主存储中的 **example/jars** 位置。\r 5. 上传这些文件后，使用以下代码通过 **hbaseapp** 创建表：\r \r         Start-HBaseExample -className com.microsoft.examples.CreateTable -clusterName hdinsightclustername\r \r     将 **hdinsightclustername** 替换为 HDInsight 群集的名称。\r \r     此命令在 HDInsight 群集中创建名为 **people** 的新表。 此命令在控制台窗口中不显示任何输出。\r 6. 若要在表中搜索条目，请使用以下命令：\r \r         Start-HBaseExample -className com.microsoft.examples.SearchByEmail -clusterName hdinsightclustername -emailRegex contoso.com\r \r     将 **hdinsightclustername** 替换为 HDInsight 群集的名称。\r \r     此命令使用 **SearchByEmail** 类搜索任何 **contactinformation** 列系列和 **email** 列包含字符串 **contoso.com** 的行。应该会收到以下结果：\r \r           Franklin Holtz - ID: 2\r           Franklin Holtz - franklin@contoso.com - ID: 2\r           Rae Schroeder - ID: 4\r           Rae Schroeder - rae@contoso.com - ID: 4\r           Gabriela Ingram - ID: 6\r           Gabriela Ingram - gabriela@contoso.com - ID: 6\r \r     将 **fabrikam.com** 用于 `-emailRegex` 值会返回电子邮件字段中包含 **fabrikam.com** 的用户。 此搜索使用基于正则表达式的筛选器执行，因此，也可以输入正则表达式，例如 **^r**，这样就会返回电子邮件以字母“r”开头的条目。\r \r ## <a name=\"delete-the-table\"></a>删除表\r 在完成该示例后，请在 Azure PowerShell 会话中使用以下命令，以删除本示例中使用的 **people** 表：\r \r     Start-HBaseExample -className com.microsoft.examples.DeleteTable -clusterName hdinsightclustername\r \r 将 **hdinsightclustername** 替换为 HDInsight 群集的名称。\r \r ## <a name=\"troubleshooting\"></a>故障排除\r ### <a name=\"no-results-or-unexpected-results-when-using-start-hbaseexample\"></a>使用 Start-HBaseExample 时无结果或意外结果\r 使用 `-showErr` 参数可查看运行作业时生成的标准错误 (STDERR)。\r \r \r <!--Update_Description: update wording and link references-->"}