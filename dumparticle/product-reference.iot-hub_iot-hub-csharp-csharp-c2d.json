{"Title":"使用 Azure IoT 中心发送云到设备消息 (.NET)","Description":"如何使用用于 .NET 的 Azure IoT SDK 将云到设备消息从 Azure IoT 中心发送到设备。 修改设备应用以接收云到设备消息，并修改后端应用以发送云到设备消息。","Content":"# <a name=\"send-messages-from-the-cloud-to-your-device-with-iot-hub-net\"></a>使用 IoT 中心 (.NET) 将消息从云发送到设备\r [!INCLUDE [iot-hub-selector-c2d](../../includes/iot-hub-selector-c2d.md)]\r \r ## <a name=\"introduction\"></a>介绍\r Azure IoT 中心是一项完全托管的服务，有助于在数百万台设备和单个解决方案后端之间实现安全可靠的双向通信。 [Get started with IoT Hub]教程演示了如何创建 IoT 中心、在其中预配设备标识，以及编写用来发送设备到云消息的设备应用。\r \r 本教程是在 [Get started with IoT Hub]（IoT 中心入门）的基础上编写的。 其中了说明了如何：\r \r * 通过 IoT 中心，将云到设备的消息从解决方案后端发送到单个设备。\r * 在设备上接收云到设备的消息。\r * 通过解决方案后端，请求确认收到从 IoT 中心发送到设备的消息（反馈）。\r \r 可以在 [IoT 中心开发人员指南][IoT Hub developer guide - C2D]中找到有关云到设备消息的详细信息。\r \r 在本教程结束时，会运行 2 个 .NET 控制台应用：\r \r * **SimulatedDevice**，这是在 [Get started with IoT Hub]（IoT 中心入门）中创建的应用的修改版本，可连接到 IoT 中心并接收云到设备的消息。\r * **SendCloudToDevice**，它通过 IoT 中心将云到设备消息发送到设备应用，然后接收其传送确认。\r \r > [!NOTE]\r > IoT 中心通过 [Azure IoT 设备 SDK] 对许多设备平台和语言（包括 C、Java 和 Javascript）提供 SDK 支持。 有关如何将设备连接到本教程的代码以及通常如何连接到 Azure IoT 中心的分步说明，请参阅 [IoT 中心开发人员指南]。\r > \r > \r \r 要完成本教程，需要以下各项：\r \r * Visual Studio 2015 或 Visual Studio 2017\r \r + 有效的 Azure 帐户。 （如果没有帐户，只需花费几分钟就能创建一个[帐户][lnk-free-trial]。）\r \r ## <a name=\"receive-messages-in-the-device-app\"></a>在设备应用中接收消息\r 在本部分中，会修改在 [Get started with IoT Hub]中创建的设备应用，以接收来自 IoT 中心的云到设备消息。\r \r 1. 在 Visual Studio 的 **SimulatedDevice** 项目中，将以下方法添加到 **Program** 类。\r \r     ```\r     private static async void ReceiveC2dAsync()\r     {\r         Console.WriteLine(\"\\nReceiving cloud to device messages from service\");\r         while (true)\r         {\r             Message receivedMessage = await deviceClient.ReceiveAsync();\r             if (receivedMessage == null) continue;\r \r             Console.ForegroundColor = ConsoleColor.Yellow;\r             Console.WriteLine(\"Received message: {0}\", Encoding.ASCII.GetString(receivedMessage.GetBytes()));\r             Console.ResetColor();\r \r             await deviceClient.CompleteAsync(receivedMessage);\r         }\r     }\r     ```\r \r     在设备收到消息时，`ReceiveAsync` 方法以异步方式返回收到的消息。 它在可指定的超时期限过后返回 *null*（在本例中，使用的是默认值一分钟）。 当应用收到 *null* 时，它应继续等待新消息。 此要求是使用 `if (receivedMessage == null) continue` 行的原因。\r \r     对 `CompleteAsync()` 的调用通知 IoT 中心，指出已成功处理消息。 可以安全地从设备队列中删除该消息。 如果因故导致设备应用无法完成消息处理操作，IoT 中心将重新传送该消息。 因此设备应用中的消息处理逻辑必须是幂等的，以便多次接收同一消息会生成相同的结果。 应用程序也可以暂时放弃消息，让 IoT 中心将消息保留在队列中以供将来使用。 或者，应用程序可以拒绝消息，以永久性从队列中删除该消息。 有关云到设备消息生命周期的详细信息，请参阅 [IoT 中心开发人员指南][IoT Hub developer guide - C2D]。\r \r    > [!NOTE]\r    > 使用 HTTPS 而不使用 MQTT 或 AMQP 作为传输时，`ReceiveAsync` 方法将立即返回。 使用 HTTPS 的云到设备消息，其支持模式是间歇连接到设备，且不常检查消息（时间间隔小于 25 分钟）。 发出更多 HTTPS 接收会导致 IoT 中心限制请求。 有关 MQTT、AMQP 和 HTTPS 支持之间的差异，以及 IoT 中心限制的详细信息，请参阅 [IoT 中心开发人员指南][IoT Hub developer guide - C2D]。\r    > \r    > \r 2. 在 **Main** 方法中的 `Console.ReadLine()` 行前面添加以下方法：\r \r     ```\r     ReceiveC2dAsync();\r     ```\r \r > [!NOTE]\r > 为简单起见，本教程不实现任何重试策略。 在生产代码中，应按 MSDN 文章 [Transient Fault Handling]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r > \r > \r \r ## <a name=\"send-a-cloud-to-device-message\"></a>发送云到设备的消息\r 在本部分中，会编写 .NET 控制台应用，以向设备应用发送云到设备消息。\r \r 1. 在当前的 Visual Studio 解决方案中，使用“控制台应用程序”项目模板创建一个 Visual C# 桌面应用项目。 将项目命名为 **SendCloudToDevice**。\r \r     ![Visual Studio 中的新项目][20]\r 2. 在“解决方案资源管理器”中，右键单击该解决方案，并单击“为解决方案管理 NuGet 包...” 。 \r \r     此操作会打开“管理 NuGet 包”  窗口。\r 3. 搜索“Microsoft.Azure.Devices”，并单击“安装”并接受使用条款。 \r \r     此操作会下载、安装 [Azure IoT 服务 SDK NuGet 包]并添加对它的引用。\r \r 4. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r \r     ```\r     using Microsoft.Azure.Devices;\r     ```\r 5. 将以下字段添加到 **Program** 类。 将占位符值替换为在 [Get started with IoT Hub]中获取的 IoT 中心连接字符串：\r \r     ```\r     static ServiceClient serviceClient;\r     static string connectionString = \"{iot hub connection string}\";\r     ```\r 6. 将以下方法添加到 **Program** 类：\r \r     ```\r     private async static Task SendCloudToDeviceMessageAsync()\r     {\r         var commandMessage = new Message(Encoding.ASCII.GetBytes(\"Cloud to device message.\"));\r         await serviceClient.SendAsync(\"myFirstDevice\", commandMessage);\r     }\r     ```\r \r     此方法会将新的云到设备消息发送到 ID 为 `myFirstDevice` 的设备。 仅当修改了 [Get started with IoT Hub]中使用的参数，才更改此参数。\r 7. 最后，在 **Main** 方法中添加以下行：\r \r     ```\r     Console.WriteLine(\"Send Cloud-to-Device message\\n\");\r     serviceClient = ServiceClient.CreateFromConnectionString(connectionString);\r \r     Console.WriteLine(\"Press any key to send a C2D message.\");\r     Console.ReadLine();\r     SendCloudToDeviceMessageAsync().Wait();\r     Console.ReadLine();\r     ```\r 8. 在 Visual Studio 中，右键单击解决方案并选择“**设置启动项目...**”。 选择“多个启动项目”，并同时针对 **ReadDeviceToCloudMessages**、**SimulatedDevice** 和 **SendCloudToDevice** 选择“启动”操作。\r 9. 按 **F5**。 这三个应用程序应该都会启动。 选择“**SendCloudToDevice**”窗口并按 **Enter**。 应会看到设备应用正在接收的消息。\r    \r    ![应用接收消息][21]\r \r ## <a name=\"receive-delivery-feedback\"></a>接收送达反馈\r 可以从 IoT 中心请求每个云到设备消息的送达（或过期）确认。 借助此选项，解决方案后端能够轻松地通知重试或补偿逻辑。 有关云到设备反馈的详细信息，请参阅 [IoT 中心开发人员指南][IoT Hub developer guide - C2D]。\r \r 在本部分中，修改 **SendCloudToDevice** 应用以请求反馈，并接收来自 IoT 中心的反馈。\r \r 1. 在 Visual Studio 中的 **SendCloudToDevice** 项目内，将以下方法添加到 **Program** 类。\r \r     ```\r     private async static void ReceiveFeedbackAsync()\r     {\r         var feedbackReceiver = serviceClient.GetFeedbackReceiver();\r \r         Console.WriteLine(\"\\nReceiving c2d feedback from service\");\r         while (true)\r         {\r             var feedbackBatch = await feedbackReceiver.ReceiveAsync();\r             if (feedbackBatch == null) continue;\r \r             Console.ForegroundColor = ConsoleColor.Yellow;\r             Console.WriteLine(\"Received feedback: {0}\", string.Join(\", \", feedbackBatch.Records.Select(f => f.StatusCode)));\r             Console.ResetColor();\r \r             await feedbackReceiver.CompleteAsync(feedbackBatch);\r         }\r     }\r     ```\r \r     请注意，此接收模式与用于从设备应用接收云到设备消息的模式相同。\r 2. 将以下方法添加到 **Main** 方法中紧接在 `serviceClient = ServiceClient.CreateFromConnectionString(connectionString)` 行的后面：\r \r     ```\r     ReceiveFeedbackAsync();\r     ```\r 3. 若要请求针对传递云到设备消息的反馈，必须在 **SendCloudToDeviceMessageAsync** 方法中指定一个属性。 紧接在 `var commandMessage = new Message(...);` 行的后面添加以下行：\r \r     ```\r     commandMessage.Ack = DeliveryAcknowledgement.Full;\r     ```\r 4. 按 **F5**运行应用。 应会看到三个应用程序都会启动。 选择“**SendCloudToDevice**”窗口并按 **Enter**。 **SendCloudToDevice** 应用程序会收到反馈消息。\r \r    ![应用接收消息][22]\r \r > [!NOTE]\r > 为简单起见，本教程不实现任何重试策略。 在生产代码中，应按 MSDN 文章 [Transient Fault Handling]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r > \r > \r \r ## <a name=\"next-steps\"></a>后续步骤\r 在本教程中，已学习如何发送和接收云到设备的消息。 \r \r 若要查看使用 IoT 中心完成端到端解决方案的示例，请参阅 [Azure IoT 套件]。\r \r 若要深入了解如何使用 IoT 中心开发解决方案，请参阅 [IoT 中心开发人员指南]。\r \r <!-- Images -->\r [20]: ./media/iot-hub-csharp-csharp-c2d/create-identity-csharp1.png\r [21]: ./media/iot-hub-csharp-csharp-c2d/sendc2d1.png\r [22]: ./media/iot-hub-csharp-csharp-c2d/sendc2d2.png\r \r <!-- Links -->\r \r [Azure IoT - Service SDK NuGet package]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\r [Transient Fault Handling]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r \r [IoT Hub Developer Guide - C2D]: ./iot-hub-devguide-messaging.md\r \r [IoT 中心开发人员指南]: ./iot-hub-devguide.md\r [Get started with IoT Hub]: ./iot-hub-csharp-csharp-getstarted.md\r [lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r [Azure IoT 套件]: /iot-suite/\r [Azure IoT 设备 SDK]: ./iot-hub-devguide-sdks.md\r \r <!--Update_Description: update wording and some links-->"}