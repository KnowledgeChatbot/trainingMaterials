{"Title":"使用 Azure 中继的服务总线 REST 教程","Description":"生成一个简单的 Azure 服务总线中继主机应用程序，该应用程序公开基于 REST 的接口。","Content":"# <a name=\"azure-wcf-relay-rest-tutorial\"></a>Azure WCF 中继 REST 教程\r 本教程介绍如何生成简单的 Azure 中继主机应用程序，用于公开基于 REST 的接口。 REST 使 Web 客户端（例如 Web 浏览器）可通过 HTTP 请求访问服务总线 API。\r \r 该教程使用 Windows Communication Foundation (WCF) REST 编程模型在 Azure 中继上构建 REST 服务。 有关详细信息，请参阅 WCF 文档中的 [WCF REST 编程模型](https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/wcf-web-http-programming-model)和[设计和实现服务](https://docs.microsoft.com/en-us/dotnet/framework/wcf/designing-and-implementing-services)。\r \r ## <a name=\"step-1-create-a-namespace\"></a>第 1 步：创建命名空间\r \r 若要开始在 Azure 中使用中继功能，必须先创建一个服务命名空间。 命名空间提供了用于对应用程序中的 Azure 资源进行寻址的范围容器。 请按照[此处的说明](./relay-create-namespace-portal.md)创建中继命名空间。\r \r ## <a name=\"step-2-define-a-rest-based-wcf-service-contract-to-use-with-azure-relay\"></a>步骤 2：定义基于 REST 的 WCF 服务协定用于 Azure 中继\r 创建创建 WCF REST 样式的服务时，必须定义协定。 约定指定主机支持的操作。 服务操作可以看作是 Web 服务方法。 协定通过定义 C++、C# 或 Visual Basic 接口来创建。 接口中的每个方法都对应一个特定的服务操作。 必须将 [ServiceContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.servicecontractattribute.aspx) 属性应用到每个接口，且必须将 [OperationContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx) 属性应用到每个操作。 如果具有 [ServiceContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.servicecontractattribute.aspx) 的接口中的方法没有 [OperationContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx)，则该方法是不公开的。 该过程后面的示例中显示了这些任务所用的代码。\r \r WCF 协定和 REST 样式的协定的主要区别在于是否向 [OperationContractAttribute](https://msdn.microsoft.com/library/system.servicemodel.operationcontractattribute.aspx) 添加一个属性：[WebGetAttribute](https://msdn.microsoft.com/library/system.servicemodel.web.webgetattribute.aspx)。 此属性允许将接口中的方法映射到该接口另一侧的方法。 此示例使用 [WebGetAttribute](https://msdn.microsoft.com/library/system.servicemodel.web.webgetattribute.aspx) 将一个方法链接到 HTTP GET。 这会使服务总线可以准确地检索并解释发送到接口的命令。\r \r ### <a name=\"to-create-a-contract-with-an-interface\"></a>使用接口创建协定\r 1. 以管理员身份打开 Visual Studio：在“开始”菜单中右键单击该程序，然后选择“以管理员身份运行”。\r 2. 创建新的控制台应用程序项目。 单击“文件”菜单并选择“新建”，然后单击“项目”。 在“新建项目”对话框中，单击“Visual C#”，选择“控制台应用程序”模板，并将其命名为“ImageListener”。 使用默认“位置”。 单击“确定”以创建该项目  。\r 3. 对于 C# 项目，Visual Studio 会创建 `Program.cs` 文件。 此类包含一个空的 `Main()` 方法，需要此方法才能正确生成控制台应用程序项目。\r 4. 通过安装服务总线 NuGet 包，向项目添加对服务总线和 **System.ServiceModel.dll** 的引用。 该包自动添加对服务总线库和 WCF **System.ServiceModel**的引用。 在“解决方案资源管理器”中，右键单击“ImageListener”项目，然后单击“管理 NuGet 包”。 单击“浏览”选项卡，并搜索 `Microsoft Azure Service Bus`。 单击“安装” 并接受使用条款。\r 5. 必须在项目中显式添加对 **System.ServiceModel.dll** 的引用：\r    \r     a. 在“解决方案资源管理器”中，右键单击项目文件夹下的“引用”文件夹，然后单击“添加引用”。\r    \r     b. 在“添加引用”对话框中，单击左侧的“框架”选项卡，并在“搜索”框中键入“System.ServiceModel.Web”。 选择“System.ServiceModel.Web”复选框，然后单击“确定”。\r 6. 在 Program.cs 文件顶部添加以下 `using` 语句。\r    \r     ```csharp\r     using System.ServiceModel;\r     using System.ServiceModel.Channels;\r     using System.ServiceModel.Web;\r     using System.IO;\r     ```\r    \r     使用 [System.ServiceModel](https://msdn.microsoft.com/library/system.servicemodel.aspx) 命名空间，可以编程方式访问 WCF 的基本功能。 WCF 中继使用 WCF 的许多对象和属性来定义服务协定。 将在大多数中继应用程序中使用此命名空间。 同样[System.ServiceModel.Channels](https://msdn.microsoft.com/library/system.servicemodel.channels.aspx) 可帮助定义通道，通道是用来与 Azure 中继和客户端 Web 浏览器通信的对象。 最后，[System.ServiceModel.Web](https://msdn.microsoft.com/library/system.servicemodel.web.aspx) 包含的类型可用于创建基于 Web 的应用程序。\r 7. 将 `ImageListener` 命名空间重命名为 **Microsoft.ServiceBus.Samples**。\r    \r     ```csharp\r     namespace Microsoft.ServiceBus.Samples\r     {\r         ...\r     ```\r 8. 在命名空间声明的左大括号后面，紧接着定义一个名为 **IImageContract** 的新接口，然后将 **ServiceContractAttribute** 属性应用于该接口，其值为 `http://samples.microsoft.com/ServiceModel/Relay/`。 该命名空间值不同于在整个代码范围内使用的命名空间。 该命名空间值将用作此约定的唯一标识符，并应有版本控制信息。 有关详细信息，请参阅 [服务版本控制](http://go.microsoft.com/fwlink/?LinkID=180498)。 显式指定命名空间可防止将默认的命名空间值添加到约定名称中。\r    \r     ```csharp\r     [ServiceContract(Name = \"ImageContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/RESTTutorial1\")]\r     public interface IImageContract\r     {\r     }\r     ```\r 9. 在 `IImageContract` 接口中，为 `IImageContract` 协定在接口中公开的单个操作声明一个方法，然后将 `OperationContractAttribute` 属性应用到你希望将其作为公共服务总线协定的一部分进行公开的方法中。\r    \r     ```csharp\r     public interface IImageContract\r     {\r         [OperationContract]\r         Stream GetImage();\r     }\r     ```\r 10. 在 **OperationContract** 属性中，添加 **WebGet** 值。\r     \r     ```csharp\r     public interface IImageContract\r     {\r         [OperationContract, WebGet]\r         Stream GetImage();\r     }\r     ```\r     \r     这样做可以让中继服务将 HTTP GET 请求路由到 `GetImage`，并将 `GetImage` 的返回值转换为 HTTP GETRESPONSE 答复。 稍后在本教程中，你会使用 Web 浏览器访问此方法，并在浏览器中显示图像。\r 11. 直接在 `IImageContract` 定义的后面，声明从 `IImageContract` 和 `IClientChannel` 接口继承的通道。\r     \r     ```csharp\r     public interface IImageChannel : IImageContract, IClientChannel { }\r     ```\r     \r     通道是服务和客户端用来互相传递信息的 WCF 对象。 稍后会在主机应用程序中创建通道。 然后 Azure 中继将使用该通道将浏览器的 HTTP GET 请求传递到 **GetImage** 实现。 中继还使用该通道获取 **GetImage** 返回值并将其转换为客户端浏览器的 HTTP GETRESPONSE。\r 12. 在“生成”菜单中，单击“生成解决方案”以确认工作的准确性。\r \r ### <a name=\"example\"></a>示例\r 以下代码显示了定义 WCF 中继协定的基本接口。\r \r ```csharp\r using System;\r using System.Collections.Generic;\r using System.Linq;\r using System.Text;\r using System.ServiceModel;\r using System.ServiceModel.Channels;\r using System.ServiceModel.Web;\r using System.IO;\r \r namespace Microsoft.ServiceBus.Samples\r {\r \r     [ServiceContract(Name = \"IImageContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     public interface IImageContract\r     {\r         [OperationContract, WebGet]\r         Stream GetImage();\r     }\r \r     public interface IImageChannel : IImageContract, IClientChannel { }\r \r     class Program\r     {\r         static void Main(string[] args)\r         {\r         }\r     }\r }\r ```\r \r ## <a name=\"step-3-implement-a-rest-based-wcf-service-contract-to-use-service-bus\"></a>步骤 3：实现基于 REST 的 WCF 服务约定以使用服务总线\r 创建 REST 样式的 WCF 中继服务首先需要创建使用接口定义的协定。 下一步是实现该接口。 此步骤包括创建名为 **ImageService** 的类，该类用于实现用户定义的 **IImageContract** 接口。 实现约定后，即可使用 App.config 文件配置接口。 该配置文件包含应用程序所需的信息，如服务的名称、协定的名称，以及用来与中继服务通信的协议类型。 该过程后面的示例中提供了这些任务所用的代码。\r \r 与前面的步骤一样，实现 REST 样式的协定与实现 WCF 中继协定之间的差别很小。\r \r ### <a name=\"to-implement-a-rest-style-service-bus-contract\"></a>实现 REST 样式的服务总线约定\r 1. 在 **IImageContract** 接口定义的正下方创建名为 **ImageService** 的新类。 **ImageService** 类实现 **IImageContract** 接口。\r    \r     ```csharp\r     class ImageService : IImageContract\r     {\r     }\r     ```\r     与其他接口实现类似，可以在另一个文件中实现定义。 但是，在本教程中，实现所在的文件与接口定义和 `Main()` 方法所在的文件相同。\r 2. 将 [ServiceBehaviorAttribute](https://msdn.microsoft.com/library/system.servicemodel.servicebehaviorattribute.aspx) 属性应用到 **IImageService** 类，以指示该类是 WCF 协定的实现。\r    \r     ```csharp\r     [ServiceBehavior(Name = \"ImageService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     class ImageService : IImageContract\r     {\r     }\r     ```\r    \r     如前所述，此命名空间不是传统的命名空间， 而是用于标识协定的 WCF 体系结构的一部分。 有关详细信息，请参阅 WCF 文档中的[数据协定名称](https://msdn.microsoft.com/library/ms731045.aspx)一文。\r 3. 将一幅 .jpg 图像添加到项目中。  \r    \r     这是服务在接收浏览器中显示的图片。 右键单击项目，然后单击“添加”。 然后单击“现有项”。 使用“添加现有项”对话框浏览到相应的 .jpg，然后单击“添加”。\r    \r     添加文件时，请确保在“文件名:”字段旁的下拉列表中选择“所有文件”。 本教程的余下部分假定图像的名称为“image.jpg”。 如果 .jpg 文件名不是这样，则必须重命名图像，或更改代码进行弥补。\r 4. 为确保正在运行的服务可以找到该图像文件，请在“解决方案资源管理器”中右键单击该图像文件，然后单击“属性”。 在“属性”窗格中，将“复制到输出目录”设置为“如果较新则复制”。\r 5. 在项目中添加对 **System.Drawing.dll** 程序集的引用，以及以下关联的 `using` 语句。  \r    \r     ```csharp\r     using System.Drawing;\r     using System.Drawing.Imaging;\r     using Microsoft.ServiceBus;\r     using Microsoft.ServiceBus.Web;\r     ```\r 6. 在 **ImageService** 类中定义以下构造函数，以便加载位图并准备将该位图发送到客户端浏览器。\r    \r     ```csharp\r     class ImageService : IImageContract\r     {\r         const string imageFileName = \"image.jpg\";\r    \r         Image bitmap;\r    \r         public ImageService()\r         {\r             this.bitmap = Image.FromFile(imageFileName);\r         }\r     }\r     ```\r 7. 直接在上一代码后面，在 **ImageService** 类中添加以下 **GetImage** 方法，以返回包含该映像的 HTTP 消息。\r    \r     ```csharp\r     public Stream GetImage()\r     {\r         MemoryStream stream = new MemoryStream();\r         this.bitmap.Save(stream, ImageFormat.Jpeg);\r    \r         stream.Position = 0;\r         WebOperationContext.Current.OutgoingResponse.ContentType = \"image/jpeg\";\r    \r         return stream;\r     }\r     ```\r    \r     此实现使用 **MemoryStream** 检索映像并准备将其流式传输到浏览器。 它将流位置设置为从零开始，将流内容声明为 jpeg，并流式传输信息。\r 8. 在“生成”菜单中，单击“生成解决方案”。\r \r ### <a name=\"to-define-the-configuration-for-running-the-web-service-on-service-bus\"></a>定义配置以便在服务总线上运行 Web 服务\r 1. 在“解决方案资源管理器”中，双击“App.config”文件以在 Visual Studio 编辑器中将其打开。\r    \r     **App.config** 文件包括服务名称、终结点（即，Azure 中继公开的、让客户端和主机相互通信的位置）和绑定（用于通信的协议类型）。 此处的主要差别在于，配置的服务终结点是指 [WebHttpRelayBinding](https://docs.microsoft.com/en-us/dotnet/api/microsoft.servicebus.webhttprelaybinding) 绑定。\r 2. `<system.serviceModel>` XML 元素是一个 WCF 元素，用于定义一个或多个服务。 在这里，它用于定义服务名称和终结点。 在 `<system.serviceModel>` 元素的下面（仍在 `<system.serviceModel>` 中）添加具有以下内容的 `<bindings>` 元素。 这样就定义了应用程序中使用的绑定。 可以定义多个绑定，但在本教程中，只要定义一个绑定。\r    \r     ```xml\r     <bindings>\r         <!-- Application Binding -->\r         <webHttpRelayBinding>\r             <binding name=\"default\">\r                 <security relayClientAuthenticationType=\"None\" />\r             </binding>\r         </webHttpRelayBinding>\r     </bindings>\r     ```\r    \r     前面的代码定义了一个 WCF 中继 [WebHttpRelayBinding](https://docs.microsoft.com/en-us/dotnet/api/microsoft.servicebus.webhttprelaybinding) 绑定，其中“relayClientAuthenticationType” 设置为“None”。 此设置表明使用此绑定的终结点将不需要客户端凭据。\r 3. 在 `<bindings>` 元素后面添加 `<services>` 元素。 与绑定类似，可以在单个配置文件中定义多个服务。 但是，在本教程中，只要定义一个服务。\r    \r     ```xml\r     <services>\r         <!-- Application Service -->\r         <service name=\"Microsoft.ServiceBus.Samples.ImageService\"\r              behaviorConfiguration=\"default\">\r             <endpoint name=\"RelayEndpoint\"\r                     contract=\"Microsoft.ServiceBus.Samples.IImageContract\"\r                     binding=\"webHttpRelayBinding\"\r                     bindingConfiguration=\"default\"\r                     behaviorConfiguration=\"sbTokenProvider\"\r                     address=\"\" />\r         </service>\r     </services>\r     ```\r    \r     此步骤配置一个服务，该服务使用前面定义的默认 **webHttpRelayBinding**。 此外，它还使用下一步骤中定义的默认 **sbTokenProvider**。\r 4. 在 `<services>` 元素的后面，使用以下内容创建 `<behaviors>` 元素，并将 “SAS_KEY” 替换为先前从 [Azure 门户][Azure portal]获得的共享访问签名 (SAS) 密钥。\r    \r     ```xml\r     <behaviors>\r         <endpointBehaviors>\r             <behavior name=\"sbTokenProvider\">\r                 <transportClientEndpointBehavior>\r                     <tokenProvider>\r                         <sharedAccessSignature keyName=\"RootManageSharedAccessKey\" key=\"YOUR_SAS_KEY\" />\r                     </tokenProvider>\r                 </transportClientEndpointBehavior>\r             </behavior>\r             </endpointBehaviors>\r             <serviceBehaviors>\r                 <behavior name=\"default\">\r                     <serviceDebug httpHelpPageEnabled=\"false\" httpsHelpPageEnabled=\"false\" />\r                 </behavior>\r             </serviceBehaviors>\r     </behaviors>\r     ```\r 5. 仍在 App.config 文件中，在 `<appSettings>` 元素中，将整个连接字符串替换为以前从门户获取的连接字符串。 \r    \r     ```xml\r     <appSettings>\r        <!-- Service Bus specific app settings for messaging connections -->\r        <add key=\"Microsoft.ServiceBus.ConnectionString\"\r            value=\"Endpoint=sb://yourNamespace.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=YOUR_SAS_KEY\"/>\r     </appSettings>\r     ```\r 6. 在“生成”菜单中，单击“生成解决方案”以生成整个解决方案。\r \r ### <a name=\"example\"></a>示例\r 以下代码演示了一个在服务总线上运行并使用 **WebHttpRelayBinding** 绑定的、基于 REST 的服务的协定和服务实现。\r \r ```csharp\r using System;\r using System.Collections.Generic;\r using System.Linq;\r using System.Text;\r using System.ServiceModel;\r using System.ServiceModel.Channels;\r using System.ServiceModel.Web;\r using System.IO;\r using System.Drawing;\r using System.Drawing.Imaging;\r using Microsoft.ServiceBus;\r using Microsoft.ServiceBus.Web;\r \r namespace Microsoft.ServiceBus.Samples\r {\r \r \r     [ServiceContract(Name = \"ImageContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     public interface IImageContract\r     {\r         [OperationContract, WebGet]\r         Stream GetImage();\r     }\r \r     public interface IImageChannel : IImageContract, IClientChannel { }\r \r     [ServiceBehavior(Name = \"ImageService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     class ImageService : IImageContract\r     {\r         const string imageFileName = \"image.jpg\";\r \r         Image bitmap;\r \r         public ImageService()\r         {\r             this.bitmap = Image.FromFile(imageFileName);\r         }\r \r         public Stream GetImage()\r         {\r             MemoryStream stream = new MemoryStream();\r             this.bitmap.Save(stream, ImageFormat.Jpeg);\r \r             stream.Position = 0;\r             WebOperationContext.Current.OutgoingResponse.ContentType = \"image/jpeg\";\r \r             return stream;\r         }\r     }\r \r     class Program\r     {\r         static void Main(string[] args)\r         {\r         }\r     }\r }\r ```\r \r 以下示例显示了与该服务关联的 App.config 文件。\r \r ```xml\r <?xml version=\"1.0\" encoding=\"utf-8\"?>\r <configuration>\r     <startup> \r         <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5.2\"/>\r     </startup>\r     <system.serviceModel>\r         <extensions>\r             <!-- In this extension section we are introducing all known service bus extensions. User can remove the ones they don't need. -->\r             <behaviorExtensions>\r                 <add name=\"connectionStatusBehavior\"\r                     type=\"Microsoft.ServiceBus.Configuration.ConnectionStatusElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"transportClientEndpointBehavior\"\r                     type=\"Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"serviceRegistrySettings\"\r                     type=\"Microsoft.ServiceBus.Configuration.ServiceRegistrySettingsElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r             </behaviorExtensions>\r             <bindingElementExtensions>\r                 <add name=\"netMessagingTransport\"\r                     type=\"Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement, Microsoft.ServiceBus,  Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"tcpRelayTransport\"\r                     type=\"Microsoft.ServiceBus.Configuration.TcpRelayTransportElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"httpRelayTransport\"\r                     type=\"Microsoft.ServiceBus.Configuration.HttpRelayTransportElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"httpsRelayTransport\"\r                     type=\"Microsoft.ServiceBus.Configuration.HttpsRelayTransportElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"onewayRelayTransport\"\r                     type=\"Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r             </bindingElementExtensions>\r             <bindingExtensions>\r                 <add name=\"basicHttpRelayBinding\"\r                     type=\"Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"webHttpRelayBinding\"\r                     type=\"Microsoft.ServiceBus.Configuration.WebHttpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"ws2007HttpRelayBinding\"\r                     type=\"Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"netTcpRelayBinding\"\r                     type=\"Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"netOnewayRelayBinding\"\r                     type=\"Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"netEventRelayBinding\"\r                     type=\"Microsoft.ServiceBus.Configuration.NetEventRelayBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r                 <add name=\"netMessagingBinding\"\r                     type=\"Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingCollectionElement, Microsoft.ServiceBus, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\r             </bindingExtensions>\r         </extensions>\r       <bindings>\r         <!-- Application Binding -->\r         <webHttpRelayBinding>\r           <binding name=\"default\">\r             <security relayClientAuthenticationType=\"None\" />\r           </binding>\r         </webHttpRelayBinding>\r       </bindings>\r       <services>\r         <!-- Application Service -->\r         <service name=\"Microsoft.ServiceBus.Samples.ImageService\"\r              behaviorConfiguration=\"default\">\r           <endpoint name=\"RelayEndpoint\"\r                   contract=\"Microsoft.ServiceBus.Samples.IImageContract\"\r                   binding=\"webHttpRelayBinding\"\r                   bindingConfiguration=\"default\"\r                   behaviorConfiguration=\"sbTokenProvider\"\r                   address=\"\" />\r         </service>\r       </services>\r       <behaviors>\r         <endpointBehaviors>\r           <behavior name=\"sbTokenProvider\">\r             <transportClientEndpointBehavior>\r               <tokenProvider>\r                 <sharedAccessSignature keyName=\"RootManageSharedAccessKey\" key=\"YOUR_SAS_KEY\" />\r               </tokenProvider>\r             </transportClientEndpointBehavior>\r           </behavior>\r         </endpointBehaviors>\r         <serviceBehaviors>\r           <behavior name=\"default\">\r             <serviceDebug httpHelpPageEnabled=\"false\" httpsHelpPageEnabled=\"false\" />\r           </behavior>\r         </serviceBehaviors>\r       </behaviors>\r     </system.serviceModel>\r     <appSettings>\r         <!-- Service Bus specific app setings for messaging connections -->\r         <add key=\"Microsoft.ServiceBus.ConnectionString\"\r             value=\"Endpoint=sb://yourNamespace.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=\"YOUR_SAS_KEY\"/>\r     </appSettings>\r </configuration>\r ```\r \r ## <a name=\"step-4-host-the-rest-based-wcf-service-to-use-azure-relay\"></a>步骤 4：托管基于 REST 的 WCF 服务以使用 Azure 中继\r 此步骤描述如何使用控制台应用程序通过 WCF 中继运行 Web 服务。 此步骤中编写的代码的完整列表会在过程后面的示例中提供。\r \r ### <a name=\"to-create-a-base-address-for-the-service\"></a>为服务创建基本地址\r 1. 在 `Main()` 函数声明中，创建一个变量，用于存储项目的命名空间。 请确保将 `yourNamespace` 替换为之前创建的中继命名空间的名称。\r    \r     ```csharp\r     string serviceNamespace = \"yourNamespace\";\r     ```\r     服务总线使用服务命名空间的名称来创建唯一 URI。\r 2. 为基于服务命名空间的服务的基本地址创建 `Uri` 实例。\r    \r     ```csharp\r     Uri address = ServiceBusEnvironment.CreateServiceUri(\"https\", serviceNamespace, \"Image\");\r     ```\r \r ### <a name=\"to-create-and-configure-the-web-service-host\"></a>创建并配置 Web 服务主机\r * 使用之前在本部分中创建的 URI 地址创建 Web 服务主机。\r   \r     ```csharp\r     WebServiceHost host = new WebServiceHost(typeof(ImageService), address);\r     ```\r     该服务主机是可实例化主机应用程序的 WCF 对象。 本示例会将要创建的主机类型 ( **ImageService**)，以及要公开主机应用程序的地址传递给它。\r \r ### <a name=\"to-run-the-web-service-host\"></a>运行 Web 服务主机\r 1. 打开服务。\r    \r     ```csharp\r     host.Open();\r     ```\r     服务现在正在运行。\r 2. 显示表明服务正在运行以及如何停止服务的消息。\r    \r     ```csharp\r     Console.WriteLine(\"Copy the following address into a browser to see the image: \");\r     Console.WriteLine(address + \"GetImage\");\r     Console.WriteLine();\r     Console.WriteLine(\"Press [Enter] to exit\");\r     Console.ReadLine();\r     ```\r 3. 完成后，关闭服务主机。\r    \r     ```csharp\r     host.Close();\r     ```\r \r ## <a name=\"example\"></a>示例\r 以下示例包括本教程中前面步骤中使用的服务约定和实现，并将服务托管在控制台应用程序中。 将以下代码编译到名为 ImageListener.exe 的可执行文件中。\r \r ```csharp\r using System;\r using System.Collections.Generic;\r using System.Linq;\r using System.Text;\r using System.ServiceModel;\r using System.ServiceModel.Channels;\r using System.ServiceModel.Web;\r using System.IO;\r using System.Drawing;\r using System.Drawing.Imaging;\r using Microsoft.ServiceBus;\r using Microsoft.ServiceBus.Web;\r \r namespace Microsoft.ServiceBus.Samples\r {\r \r     [ServiceContract(Name = \"ImageContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     public interface IImageContract\r     {\r         [OperationContract, WebGet]\r         Stream GetImage();\r     }\r \r     public interface IImageChannel : IImageContract, IClientChannel { }\r \r     [ServiceBehavior(Name = \"ImageService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\r     class ImageService : IImageContract\r     {\r         const string imageFileName = \"image.jpg\";\r \r         Image bitmap;\r \r         public ImageService()\r         {\r             this.bitmap = Image.FromFile(imageFileName);\r         }\r \r         public Stream GetImage()\r         {\r             MemoryStream stream = new MemoryStream();\r             this.bitmap.Save(stream, ImageFormat.Jpeg);\r \r             stream.Position = 0;\r             WebOperationContext.Current.OutgoingResponse.ContentType = \"image/jpeg\";\r \r             return stream;\r         }\r     }\r \r     class Program\r     {\r         static void Main(string[] args)\r         {\r             string serviceNamespace = \"InsertServiceNamespaceHere\";\r             Uri address = ServiceBusEnvironment.CreateServiceUri(\"https\", serviceNamespace, \"Image\");\r \r             WebServiceHost host = new WebServiceHost(typeof(ImageService), address);\r             host.Open();\r \r             Console.WriteLine(\"Copy the following address into a browser to see the image: \");\r             Console.WriteLine(address + \"GetImage\");\r             Console.WriteLine();\r             Console.WriteLine(\"Press [Enter] to exit\");\r             Console.ReadLine();\r \r             host.Close();\r         }\r     }\r }\r ```\r \r ### <a name=\"compiling-the-code\"></a>编译代码\r 生成解决方案之后，请执行以下代码来运行应用程序：\r \r 1. 按 **F5**，或浏览找到可执行文件的位置 (ImageListener\\bin\\Debug\\ImageListener.exe) 来运行此服务。 保持应用程序运行，因为这是执行下一步所需要的。\r 2. 将命令提示符中的地址复制并粘贴到浏览器中以查看图像。\r 3. 完成后，在命令提示符窗口中按 **Enter** 关闭应用程序。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 至此，你已使用 Azure 中继服务构建一个应用程序，接下来请参阅以下文章了解详细信息：\r \r * [Azure 服务总线体系结构概述](../service-bus-messaging/service-bus-fundamentals-hybrid-solutions.md)\r * [Azure 中继概述](./relay-what-is-it.md)\r * [如何通过 .NET 使用 WCF 中继服务](./relay-wcf-dotnet-get-started.md)\r \r [Azure portal]: https://portal.azure.cn\r \r \r \r <!--Update_Description:update meta properties and wording-->"}