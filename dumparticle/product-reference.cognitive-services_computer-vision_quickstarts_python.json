{"Title":"计算机视觉 API Python 快速入门","Description":"获取信息和代码示例，帮助自己快速开始使用 Python 和 Microsoft 认知服务中的计算机视觉 API。","Content":"# <a name=\"computer-vision-python-quick-starts\"></a>计算机视觉 Python 快速入门\r \r 本文提供信息和代码示例来帮助读者快速开始使用计算机视觉 API 和 Python 来完成以下任务：\r - [分析图像](#AnalyzeImage)\r - [使用特定于域的模型](#DomainSpecificModel)\r - [以智能方式生成缩略图](#GetThumbnail)\r - [从图像中检测并提取打印的文本](#OCR)\r - [从图像中检测并提取手写的文本](#RecognizeText)\r \r 若要使用计算机视觉 API，需要一个订阅密钥。 可在[此处](/cognitive-services/Computer-vision/Vision-API-How-to-Topics/HowToSubscribe)获取免费订阅密钥。\r \r ## 使用计算机视觉 API 通过 Python 分析图像 <a name=\"AnalyzeImage\"> </a>\r \r 使用[“分析图像”方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fa)，可以基于图像内容提取视觉特征。 可以上传图像或指定图像 URL 并选择要返回的特征，包括：\r - 与图像内容相关的标记的详细列表。\r - 完整句子中图像内容的说明。\r - 图像包含的任何人脸的坐标、性别和年龄。\r - ImageType（剪贴画或线条绘图）。\r - 主色、强调色，或者图像是否为黑白色。\r - 在此[分类](../Category-Taxonomy.md)中定义的类别。\r - 图像是否包含成人或性暗示内容？\r \r ### <a name=\"analyze-an-image-python-example-request\"></a>分析图像 Python 示例请求\r \r 复制 Python 版本的相应部分，并将其保存到某个文件，例如 `analyze.py`。 将 `subscription_key` 值替换为有效的订阅密钥，并更改 `uri_base` 以使用订阅密钥的获取位置。 然后执行脚本。\r \r ```python\r ########### Python 2.7 #############\r import httplib, urllib, base64, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'api.cognitive.azure.cn'\r \r headers = {\r     # Request headers.\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r params = urllib.urlencode({\r     # Request parameters. All of them are optional.\r     'visualFeatures': 'Categories,Description,Color',\r     'language': 'en',\r })\r \r # The URL of a JPEG image to analyze.\r body = \"{'url':'https://upload.wikimedia.org/wikipedia/commons/1/12/Broadway_and_Times_Square_by_night.jpg'}\"\r \r try:\r     # Execute the REST API call and get the response.\r     conn = httplib.HTTPSConnection('api.cognitive.azure.cn')\r     conn.request(\"POST\", \"/vision/v1.0/analyze?%s\" % params, body, headers)\r     response = conn.getresponse()\r     data = response.read()\r \r     # 'data' contains the JSON data. The following formats the JSON data for display.\r     parsed = json.loads(data)\r     print (\"Response:\")\r     print (json.dumps(parsed, sort_keys=True, indent=2))\r     conn.close()\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r \r ########### Python 3.6 #############\r import http.client, urllib.request, urllib.parse, urllib.error, base64, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'api.cognitive.azure.cn'\r \r headers = {\r     # Request headers.\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r params = urllib.parse.urlencode({\r     # Request parameters. All of them are optional.\r     'visualFeatures': 'Categories,Description,Color',\r     'language': 'en',\r })\r \r # Replace the three dots below with the URL of a JPEG image of a celebrity.\r body = \"{'url':'https://upload.wikimedia.org/wikipedia/commons/1/12/Broadway_and_Times_Square_by_night.jpg'}\"\r \r try:\r     # Execute the REST API call and get the response.\r     conn = http.client.HTTPSConnection('api.cognitive.azure.cn')\r     conn.request(\"POST\", \"/vision/v1.0/analyze?%s\" % params, body, headers)\r     response = conn.getresponse()\r     data = response.read()\r \r     # 'data' contains the JSON data. The following formats the JSON data for display.\r     parsed = json.loads(data)\r     print (\"Response:\")\r     print (json.dumps(parsed, sort_keys=True, indent=2))\r     conn.close()\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r ```\r \r ### <a name=\"analyze-an-image-response\"></a>分析图像响应\r \r 成功响应将以 JSON 格式返回。 下面是成功响应的示例：\r \r ```json\r Response:\r {\r   \"categories\": [\r     {\r       \"name\": \"outdoor_street\",\r       \"score\": 0.625\r     }\r   ],\r   \"color\": {\r     \"accentColor\": \"B74314\",\r     \"dominantColorBackground\": \"Brown\",\r     \"dominantColorForeground\": \"Brown\",\r     \"dominantColors\": [\r       \"Brown\"\r     ],\r     \"isBWImg\": false\r   },\r   \"description\": {\r     \"captions\": [\r       {\r         \"confidence\": 0.8241403656347864,\r         \"text\": \"a group of people on a city street filled with traffic at night\"\r       }\r     ],\r     \"tags\": [\r       \"outdoor\",\r       \"building\",\r       \"street\",\r       \"city\",\r       \"busy\",\r       \"people\",\r       \"filled\",\r       \"traffic\",\r       \"many\",\r       \"table\",\r       \"car\",\r       \"group\",\r       \"walking\",\r       \"bunch\",\r       \"crowded\",\r       \"large\",\r       \"night\",\r       \"light\",\r       \"standing\",\r       \"man\",\r       \"tall\",\r       \"umbrella\",\r       \"riding\",\r       \"sign\",\r       \"crowd\"\r     ]\r   },\r   \"metadata\": {\r     \"format\": \"Jpeg\",\r     \"height\": 2436,\r     \"width\": 1826\r   },\r   \"requestId\": \"92525ac4-fda0-47c3-876c-6457851fdb08\"\r }\r ```\r \r ## 使用特定于域的模型 <a name=\"DomainSpecificModel\"> </a>\r \r 特定于域的模型是经过训练，可在图像中识别一组特定对象的模型。 当前可用的两个特定于域的模型为 celebrities 和 landmarks。 以下示例识别图像中的地标。\r \r ### <a name=\"landmark-python-example-request\"></a>地标 Python 示例请求\r \r 复制 Python 版本的相应部分，并将其保存到某个文件，例如 `landmark.py`。 将 `subscription_key` 值替换为有效的订阅密钥，并更改 `uri_base` 以使用订阅密钥的获取位置。 然后执行脚本。\r \r ```python\r ########### Python 2.7 #############\r import httplib, urllib, base64, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'api.cognitive.azure.cn'\r \r headers = {\r     # Request headers.\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r params = urllib.urlencode({\r     # Request parameters. Use 'model': 'celebrities' to use the Celebrities model.\r     'model': 'landmarks',\r })\r \r # The URL of a JPEG image containing a landmark.\r body = \"{'url':'https://upload.wikimedia.org/wikipedia/commons/2/23/Space_Needle_2011-07-04.jpg'}\"\r \r try:\r     # Execute the REST API call and get the response.\r     conn = httplib.HTTPSConnection(uri_base)\r \r     # Change \"landmarks\" to \"celebrities\" in the url to use the Celebrities model.\r     conn.request(\"POST\", \"/vision/v1.0/models/landmarks/analyze?%s\" % params, body, headers)\r     response = conn.getresponse()\r     data = response.read()\r \r     # 'data' contains the JSON data. The following formats the JSON data for display.\r     parsed = json.loads(data)\r     print (\"Response:\")\r     print (json.dumps(parsed, sort_keys=True, indent=2))\r     conn.close()\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r \r ########### Python 3.6 #############\r import http.client, urllib.request, urllib.parse, urllib.error, base64, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'api.cognitive.azure.cn'\r \r headers = {\r     # Request headers.\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r params = urllib.parse.urlencode({\r     # Request parameters. Use \"model\": \"celebrities\" to use the Celebrity model.\r     'model': 'landmarks',\r })\r \r # The URL of a JEPG image containing text.\r body = \"{'url':'https://upload.wikimedia.org/wikipedia/commons/2/23/Space_Needle_2011-07-04.jpg'}\"\r \r try:\r     # Execute the REST API call and get the response.\r     conn = http.client.HTTPSConnection(uri_base)\r     conn.request(\"POST\", \"/vision/v1.0/models/landmarks/analyze?%s\" % params, body, headers)\r     response = conn.getresponse()\r     data = response.read()\r \r     # 'data' contains the JSON data. The following formats the JSON data for display.\r     parsed = json.loads(data)\r     print (\"Response:\")\r     print (json.dumps(parsed, sort_keys=True, indent=2))\r     conn.close()\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r ```\r \r ### <a name=\"landmark-example-response\"></a>地标示例响应\r \r 成功响应将以 JSON 格式返回。 下面是成功响应的示例：  \r \r ```json\r {\r   \"metadata\": {\r     \"format\": \"Jpeg\",\r     \"height\": 4132,\r     \"width\": 2096\r   },\r   \"requestId\": \"d08a914a-0fbb-4695-9a2e-c93791865436\",\r   \"result\": {\r     \"landmarks\": [\r       {\r         \"confidence\": 0.9998178,\r         \"name\": \"Space Needle\"\r       }\r     ]\r   }\r }\r ```\r \r ## 使用计算机视觉 API 通过 Python 获取缩略图 <a name=\"GetThumbnail\"> </a>\r \r 使用[“获取缩略图”方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fb)可以根据图像的兴趣区域 (ROI) 将该图像裁剪为所需的高度和宽度。 为缩略图设置的纵横比可以不同于输入图像的纵横比。\r \r ### <a name=\"get-a-thumbnail-python-example-request\"></a>获取缩略图 Python 示例请求\r \r 复制 Python 版本的相应部分，并将其保存到某个文件，例如 `thumbnail.py`。 将 `subscription_key` 值替换为有效的订阅密钥，并更改 `uri_base` 以使用订阅密钥的获取位置。 然后执行脚本。\r \r ```python\r ########### Python 2.7 #############\r import httplib, urllib, base64, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'api.cognitive.azure.cn'\r \r headers = {\r     # Request headers.\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r params = urllib.urlencode({\r     # Request parameters. The smartCropping flag is optional.\r     'width': '150',\r     'height': '100',\r     'smartCropping': 'true',\r })\r \r # The URL of a JPEG image to use to create a thumbnail image.\r body = \"{'url':'https://upload.wikimedia.org/wikipedia/commons/9/94/Bloodhound_Puppy.jpg'}\"\r \r try:\r     # Execute the REST API call and get the response.\r     conn = httplib.HTTPSConnection('api.cognitive.azure.cn')\r     conn.request(\"POST\", \"/vision/v1.0/generateThumbnail?%s\" % params, body, headers)\r     response = conn.getresponse()\r     \r     # Check for success.\r     if response.status == 200:\r         # Success. Use 'response.read()' to return the image data. \r         # Display the response headers.\r         print ('Success.')\r         print ('Response headers:')\r         headers = response.getheaders()\r         for field, value in headers:\r             print ('  ' + field + ': ' + value)\r     else:\r         # Error. 'data' contains the JSON error data. Display the error data.\r         data = response.read()\r         parsed = json.loads(data)\r         print ('Error:')\r         print (json.dumps(parsed, sort_keys=True, indent=2))\r     \r     conn.close()\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r \r ########### Python 3.6 #############\r import http.client, urllib.request, urllib.parse, urllib.error, base64, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'api.cognitive.azure.cn'\r \r headers = {\r     # Request headers.\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r params = urllib.parse.urlencode({\r     # Request parameters. The smartCropping flag is optional.\r     'width': '150',\r     'height': '100',\r     'smartCropping': 'true',\r })\r \r # Replace the three dots below with the URL of the JPEG image for which you want a thumbnail.\r body = \"{'url':'https://upload.wikimedia.org/wikipedia/commons/9/94/Bloodhound_Puppy.jpg'}\"\r \r try:\r     # Execute the REST API call and get the response.\r     conn = http.client.HTTPSConnection('api.cognitive.azure.cn')\r     conn.request(\"POST\", \"/vision/v1.0/generateThumbnail?%s\" % params, body, headers)\r     response = conn.getresponse()\r     \r     # Check for success.\r     if response.status == 200:\r         # Success. Use 'response.read()' to return the image data. \r         # Display the response headers.\r         print ('Success.')\r         print ('Response headers:')\r         headers = response.getheaders()\r         for field, value in headers:\r             print ('  ' + field + ': ' + value)\r     else:\r         # Error. 'data' contains the JSON error data. Display the error data.\r         data = response.read()\r         parsed = json.loads(data)\r         print ('Error:')\r         print (json.dumps(parsed, sort_keys=True, indent=2))\r     \r     conn.close()\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r ```\r \r ### <a name=\"get-a-thumbnail-response\"></a>获取缩略图响应\r \r 成功响应包含缩略图二进制文件。 如果请求失败，则响应包含错误代码和消息，以帮助确定问题所在。 下面是成功响应的示例：\r \r ```text\r Success.\r Response headers:\r   Cache-Control: no-cache\r   Pragma: no-cache\r   Content-Length: 4025\r   Content-Type: image/jpeg\r   Expires: -1\r   X-AspNet-Version: 4.0.30319\r   X-Powered-By: ASP.NET\r   apim-request-id: e2533391-44a9-4265-a681-91b07aaab6dd\r   Strict-Transport-Security: max-age=31536000; includeSubDomains; preload\r   x-content-type-options: nosniff\r   Date: Thu, 08 Jun 2017 22:51:16 GMT\r ```\r \r ## 使用计算机视觉 API 通过 Python 执行光学字符识别 (OCR) <a name=\"OCR\"> </a>\r \r 使用[光学字符识别 (OCR) 方法](https://dev.cognitive.azure.cn/docs/services/56f91f2d778daf23d8ec6739/operations/56f91f2e778daf14a499e1fc)可以检测图像中的文本，并将识别到的字符提取到机器可用的字符流中。\r \r ### <a name=\"ocr-python-example-request\"></a>OCR Python 示例请求\r \r 复制 Python 版本的相应部分，并将其保存到某个文件，例如 `ocr.py`。 将 `subscription_key` 值替换为有效的订阅密钥，并更改 `uri_base` 以使用订阅密钥的获取位置。 然后执行脚本。\r \r ```python\r ########### Python 2.7 #############\r import httplib, urllib, base64, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'api.cognitive.azure.cn'\r \r headers = {\r     # Request headers.\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r params = urllib.urlencode({\r     # Request parameters. The language setting \"unk\" means automatically detect the language.\r     'language': 'unk',\r     'detectOrientation ': 'true',\r })\r \r # The URL of a JPEG image containing text.\r body = \"{'url':'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Atomist_quote_from_Democritus.png/338px-Atomist_quote_from_Democritus.png'}\"\r \r try:\r     # Execute the REST API call and get the response.\r     conn = httplib.HTTPSConnection('api.cognitive.azure.cn')\r     conn.request(\"POST\", \"/vision/v1.0/ocr?%s\" % params, body, headers)\r     response = conn.getresponse()\r     data = response.read()\r \r     # 'data' contains the JSON data. The following formats the JSON data for display.\r     parsed = json.loads(data)\r     print (\"Response:\")\r     print (json.dumps(parsed, sort_keys=True, indent=2))\r     conn.close()\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r \r ########### Python 3.6 #############\r import http.client, urllib.request, urllib.parse, urllib.error, base64, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'api.cognitive.azure.cn'\r \r headers = {\r     # Request headers.\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r params = urllib.parse.urlencode({\r     # Request parameters. The language setting \"unk\" means automatically detect the language.\r     'language': 'unk',\r     'detectOrientation ': 'true',\r })\r \r # The URL of a JPEG image containing text.\r body = \"{'url':'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Atomist_quote_from_Democritus.png/338px-Atomist_quote_from_Democritus.png'}\"\r \r try:\r     # Execute the REST API call and get the response.\r     conn = http.client.HTTPSConnection('api.cognitive.azure.cn')\r     conn.request(\"POST\", \"/vision/v1.0/ocr?%s\" % params, body, headers)\r     response = conn.getresponse()\r     data = response.read()\r \r     # 'data' contains the JSON data. The following formats the JSON data for display.\r     parsed = json.loads(data)\r     print (\"Response:\")\r     print (json.dumps(parsed, sort_keys=True, indent=2))\r     conn.close()\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r ```\r \r ### <a name=\"ocr-example-response\"></a>OCR 示例响应\r \r 如果成功，OCR 结果包括图像中的文本。 此外，还包括区域范围框、线条和单词。 下面是成功响应的示例：\r \r ```json\r Response:\r {\r   \"language\": \"en\",\r   \"orientation\": \"Up\",\r   \"regions\": [\r     {\r       \"boundingBox\": \"21,16,304,451\",\r       \"lines\": [\r         {\r           \"boundingBox\": \"28,16,288,41\",\r           \"words\": [\r             {\r               \"boundingBox\": \"28,16,288,41\",\r               \"text\": \"NOTHING\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"27,66,283,52\",\r           \"words\": [\r             {\r               \"boundingBox\": \"27,66,283,52\",\r               \"text\": \"EXISTS\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"27,128,292,49\",\r           \"words\": [\r             {\r               \"boundingBox\": \"27,128,292,49\",\r               \"text\": \"EXCEPT\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"24,188,292,54\",\r           \"words\": [\r             {\r               \"boundingBox\": \"24,188,292,54\",\r               \"text\": \"ATOMS\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"22,253,297,32\",\r           \"words\": [\r             {\r               \"boundingBox\": \"22,253,105,32\",\r               \"text\": \"AND\"\r             },\r             {\r               \"boundingBox\": \"144,253,175,32\",\r               \"text\": \"EMPTY\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"21,298,304,60\",\r           \"words\": [\r             {\r               \"boundingBox\": \"21,298,304,60\",\r               \"text\": \"SPACE.\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"26,387,294,37\",\r           \"words\": [\r             {\r               \"boundingBox\": \"26,387,210,37\",\r               \"text\": \"Everything\"\r             },\r             {\r               \"boundingBox\": \"249,389,71,27\",\r               \"text\": \"else\"\r             }\r           ]\r         },\r         {\r           \"boundingBox\": \"127,431,198,36\",\r           \"words\": [\r             {\r               \"boundingBox\": \"127,431,31,29\",\r               \"text\": \"is\"\r             },\r             {\r               \"boundingBox\": \"172,431,153,36\",\r               \"text\": \"opinion.\"\r             }\r           ]\r         }\r       ]\r     }\r   ],\r   \"textAngle\": 0.0\r }\r ```\r \r ## 使用计算机视觉 API 通过 Python 执行文本识别 <a name=\"RecognizeText\"> </a>\r \r ### <a name=\"handwriting-recognition-python-example\"></a>手写文本识别 Python 示例\r \r 复制 Python 版本的相应部分，并将其保存到某个文件，例如 `handwriting.py`。 将 `subscription_key` 值替换为有效的订阅密钥，并更改 `uri_base` 以使用订阅密钥的获取位置。 然后执行脚本。\r \r ```python\r ########### Python 2.7 #############\r import httplib, urllib, base64, time, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'api.cognitive.azure.cn'\r \r headers = {\r     # Request headers.\r     # Another valid content type is \"application/octet-stream\".\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r # The URL of a JPEG image containing handwritten text.\r body = \"{'url':'https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Cursive_Writing_on_Notebook_paper.jpg/800px-Cursive_Writing_on_Notebook_paper.jpg'}\"\r \r # For printed text, set \"handwriting\" to false.\r params = urllib.urlencode({'handwriting' : 'true'})\r \r try:\r     # This operation requrires two REST API calls. One to submit the image for processing,\r     # the other to retrieve the text found in the image. \r     #\r     # This executes the first REST API call and gets the response.\r     conn = httplib.HTTPSConnection(uri_base)\r     conn.request(\"POST\", \"/vision/v1.0/RecognizeText?%s\" % params, body, headers)\r     response = conn.getresponse()\r     \r     # Success is indicated by a status of 202.\r     if response.status != 202:\r         # Display JSON data and exit if the first REST API call was not successful.\r         parsed = json.loads(response.read())\r         print (\"Error:\")\r         print (json.dumps(parsed, sort_keys=True, indent=2))\r         conn.close()\r         exit()\r \r     # The 'Operation-Location' in the response contains the URI to retrieve the recognized text.\r     operationLocation = response.getheader('Operation-Location')\r     parsedLocation = operationLocation.split(uri_base)\r     answerURL = parsedLocation[1]\r \r     # NOTE: The response may not be immediately available. Handwriting recognition is an\r     # async operation that can take a variable amount of time depending on the length\r     # of the text you want to recognize. You may need to wait or retry this GET operation.\r \r     print('\\nHandwritten text submitted. Waiting 10 seconds to retrieve the recognized text.\\n')\r     time.sleep(10)\r     \r     # Execute the second REST API call and get the response.\r     conn = httplib.HTTPSConnection(uri_base)\r     conn.request(\"GET\", answerURL, '', headers)\r     response = conn.getresponse()\r     data = response.read()\r \r     # 'data' contains the JSON data. The following formats the JSON data for display.\r     parsed = json.loads(data)\r     print (\"Response:\")\r     print (json.dumps(parsed, sort_keys=True, indent=2))\r     conn.close()\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r \r ########### Python 3.6 #############\r import http.client, urllib.request, urllib.parse, urllib.error, base64, requests, time, json\r \r ###############################################\r #### Update or verify the following values. ###\r ###############################################\r \r # Replace the subscription_key string value with your valid subscription key.\r subscription_key = '13hc77781f7e4b19b5fcdd72a8df7156'\r \r uri_base = 'https://api.cognitive.azure.cn'\r \r requestHeaders = {\r     # Request headers.\r     # Another valid content type is \"application/octet-stream\".\r     'Content-Type': 'application/json',\r     'Ocp-Apim-Subscription-Key': subscription_key,\r }\r \r # The URL of a JPEG image containing handwritten text.\r body = {'url' : 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Cursive_Writing_on_Notebook_paper.jpg/800px-Cursive_Writing_on_Notebook_paper.jpg'}\r \r # For printed text, set \"handwriting\" to false.\r params = {'handwriting' : 'true'}\r \r try:\r     # This operation requrires two REST API calls. One to submit the image for processing,\r     # the other to retrieve the text found in the image. \r     #\r     # This executes the first REST API call and gets the response.\r     response = requests.request('POST', uri_base + '/vision/v1.0/RecognizeText', json=body, data=None, headers=requestHeaders, params=params)\r     \r     # Success is indicated by a status of 202.\r     if response.status_code != 202:\r         # if the first REST API call was not successful, display JSON data and exit.\r         parsed = json.loads(response.text)\r         print (\"Error:\")\r         print (json.dumps(parsed, sort_keys=True, indent=2))\r         exit()\r \r     # The 'Operation-Location' in the response contains the URI to retrieve the recognized text.\r     operationLocation = response.headers['Operation-Location']\r \r     # Note: The response may not be immediately available. Handwriting recognition is an\r     # async operation that can take a variable amount of time depending on the length\r     # of the text you want to recognize. You may need to wait or retry this GET operation.\r \r     print('\\nHandwritten text submitted. Waiting 10 seconds to retrieve the recognized text.\\n')\r     time.sleep(10)\r     \r     # Execute the second REST API call and get the response.\r     response = requests.request('GET', operationLocation, json=None, data=None, headers=requestHeaders, params=None)\r \r     # 'data' contains the JSON data. The following formats the JSON data for display.\r     parsed = json.loads(response.text)\r     print (\"Response:\")\r     print (json.dumps(parsed, sort_keys=True, indent=2))\r \r except Exception as e:\r     print('Error:')\r     print(e)\r \r ####################################\r ```\r \r 成功响应将以 JSON 格式返回。 下面是成功响应的示例：\r \r ```json\r Response:\r {\r   \"recognitionResult\": {\r     \"lines\": [\r       {\r         \"boundingBox\": [\r           2,\r           84,\r           783,\r           96,\r           782,\r           154,\r           1,\r           148\r         ],\r         \"text\": \"Pack my box with five dozen liquor jugs\",\r         \"words\": [\r           {\r             \"boundingBox\": [\r               6,\r               86,\r               92,\r               87,\r               71,\r               151,\r               0,\r               150\r             ],\r             \"text\": \"Pack\"\r           },\r           {\r             \"boundingBox\": [\r               86,\r               87,\r               172,\r               88,\r               150,\r               152,\r               64,\r               151\r             ],\r             \"text\": \"my\"\r           },\r           {\r             \"boundingBox\": [\r               165,\r               88,\r               241,\r               89,\r               219,\r               152,\r               144,\r               152\r             ],\r             \"text\": \"box\"\r           },\r           {\r             \"boundingBox\": [\r               234,\r               89,\r               343,\r               90,\r               322,\r               154,\r               213,\r               152\r             ],\r             \"text\": \"with\"\r           },\r           {\r             \"boundingBox\": [\r               347,\r               90,\r               432,\r               91,\r               411,\r               154,\r               325,\r               154\r             ],\r             \"text\": \"five\"\r           },\r           {\r             \"boundingBox\": [\r               432,\r               91,\r               538,\r               92,\r               516,\r               154,\r               411,\r               154\r             ],\r             \"text\": \"dozen\"\r           },\r           {\r             \"boundingBox\": [\r               554,\r               92,\r               696,\r               94,\r               675,\r               154,\r               533,\r               154\r             ],\r             \"text\": \"liquor\"\r           },\r           {\r             \"boundingBox\": [\r               710,\r               94,\r               800,\r               96,\r               800,\r               154,\r               688,\r               154\r             ],\r             \"text\": \"jugs\"\r           }\r         ]\r       },\r       {\r         \"boundingBox\": [\r           2,\r           52,\r           65,\r           46,\r           69,\r           89,\r           7,\r           95\r         ],\r         \"text\": \"dog\",\r         \"words\": [\r           {\r             \"boundingBox\": [\r               0,\r               62,\r               79,\r               39,\r               94,\r               82,\r               0,\r               105\r             ],\r             \"text\": \"dog\"\r           }\r         ]\r       },\r       {\r         \"boundingBox\": [\r           6,\r           2,\r           771,\r           13,\r           770,\r           75,\r           5,\r           64\r         ],\r         \"text\": \"The quick brown fox jumps over the lazy\",\r         \"words\": [\r           {\r             \"boundingBox\": [\r               8,\r               4,\r               92,\r               5,\r               77,\r               71,\r               0,\r               71\r             ],\r             \"text\": \"The\"\r           },\r           {\r             \"boundingBox\": [\r               89,\r               5,\r               188,\r               5,\r               173,\r               72,\r               74,\r               71\r             ],\r             \"text\": \"quick\"\r           },\r           {\r             \"boundingBox\": [\r               188,\r               5,\r               323,\r               6,\r               308,\r               73,\r               173,\r               72\r             ],\r             \"text\": \"brown\"\r           },\r           {\r             \"boundingBox\": [\r               316,\r               6,\r               386,\r               6,\r               371,\r               73,\r               302,\r               73\r             ],\r             \"text\": \"fox\"\r           },\r           {\r             \"boundingBox\": [\r               396,\r               7,\r               508,\r               7,\r               493,\r               74,\r               381,\r               73\r             ],\r             \"text\": \"jumps\"\r           },\r           {\r             \"boundingBox\": [\r               501,\r               7,\r               604,\r               8,\r               589,\r               75,\r               487,\r               74\r             ],\r             \"text\": \"over\"\r           },\r           {\r             \"boundingBox\": [\r               600,\r               8,\r               673,\r               8,\r               658,\r               75,\r               586,\r               75\r             ],\r             \"text\": \"the\"\r           },\r           {\r             \"boundingBox\": [\r               670,\r               8,\r               800,\r               9,\r               787,\r               76,\r               655,\r               75\r             ],\r             \"text\": \"lazy\"\r           }\r         ]\r       }\r     ]\r   },\r   \"status\": \"Succeeded\"\r }\r ```\r \r "}