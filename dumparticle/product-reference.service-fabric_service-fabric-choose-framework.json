{"Title":"Service Fabric 编程模型概述","Description":"Service Fabric 提供了两个框架用于生成服务：执行组件框架和服务框架。 它们在简单性和控制力方面具有截然不同的取舍。","Content":"# <a name=\"service-fabric-programming-model-overview\"></a>Service Fabric 编程模型概述\r Service Fabric 提供了多种方法来编写和管理服务。 服务可以选择使用 Service Fabric API 来充分利用平台的功能和应用程序框架。 服务还可以是采用任何语言编写的任何已编译可执行程序，也可以是在 Service Fabric 群集上直接托管的容器中运行的代码。\r \r ## <a name=\"guest-executables\"></a>来宾可执行文件\r [来宾可执行文件](service-fabric-deploy-existing-app.md)是（采用任何语言编写的）任意现有可执行文件，可在应用程序中作为服务运行。 来宾可执行文件不直接调用 Service Fabric SDK API。 但是，它们仍受益于平台提供的功能，如服务可发现性、自定义运行状况和负载报告（通过调用 Service Fabric 公开的 REST API）。 它们还具有完整的应用程序生命周期支持。\r \r 从部署第一个[来宾可执行文件应用程序](service-fabric-deploy-existing-app.md)开始使用来宾可执行文件。\r \r ## <a name=\"containers\"></a>容器\r 默认情况下，Service Fabric 以进程形式部署和激活服务。 Service Fabric 还可以在[容器](service-fabric-containers-overview.md)中部署服务。 Service Fabric 支持在 Windows Server 2016 上部署 Linux 容器 和 Windows 容器。 可以从任何容器存储库中拉取容器映像，并将其部署到计算机上。 可以在容器中将现有应用程序部署为来宾可执行文件、Service Fabric 无状态/有状态可靠服务或 Reliable Actors，并可以将进程中的服务和容器中的服务混用于同一应用程序。\r \r [了解有关在 Windows 或 Linux 中容器化服务的详细信息](service-fabric-deploy-container.md)\r \r ## <a name=\"reliable-services\"></a>Reliable Services\r Reliable Services 是一个用于编写与 Service Fabric 平台集成的服务的轻型框架，并且受益于完整的平台功能集。 Reliable Services 提供最小 API 集合，该集合允许 Service Fabric 运行时管理服务的生命周期，以及允许服务与运行时进行交互。 此应用程序框架虽然很小，但是通过它可以完全控制设计和实现选择，并且可以用来托管其他任何应用程序框架，例如 ASP.NET Core。\r \r Reliable Services 可以无状态，类似于大多数服务平台，如 Web 服务器。在其中，创建的每个服务实例都是平等的，并且状态保存在外部解决方案中，如 Azure DB 或 Azure 表存储。\r \r Reliable Services 也可以是有状态的，专门用于 Service Fabric，其状态使用 Reliable Collections 直接保存在服务中。 通过复制使状态具有高可用性，以及通过分区来分布状态，所有状态由 Service Fabric 自动管理。\r \r [了解有关 Reliable Services 的详细信息](service-fabric-reliable-services-introduction.md)或通过[编写第一个 Reliable Service](service-fabric-reliable-services-quick-start.md) 帮助你入门。\r \r ## <a name=\"aspnet-core\"></a>ASP.NET Core\r ASP.NET Core 是新的开源跨平台框架，用于构建现代基于云的连接 Internet 的应用程序，如 Web 应用、IoT 应用和移动后端。 Service Fabric 与 ASP.NET Core 集成，因此你可以编写无状态和有状态的 ASP.NET Core 应用程序，充分利用 Reliable Collections 和 Service Fabric 的高级编排功能。\r \r [了解有关 Service Fabric 中 ASP.NET Core 的详细信息](service-fabric-reliable-services-communication-aspnetcore.md)，或通过[编写第一个 ASP.NET Core Service Fabric 应用程序](service-fabric-add-a-web-frontend.md)开始使用。\r \r ## <a name=\"reliable-actors\"></a>Reliable Actors\r Reliable Actor 框架在 Reliable Services 的基础上生成，是根据执行组件设计模式实现虚拟执行组件模式的应用程序框架。 Reliable Actor 框架使用称为执行组件的单线程执行的独立的计算单元和状态。 Reliable Actor 框架为执行组件提供内置通信，以及提供预设的状态暂留和扩展配置。\r \r 由于 Reliable Actors 自身是在 Reliable Services 基础上生成的应用程序框架，所以它可与 Service Fabric 平台完全集成，并且获益于平台所提供的完整功能集。\r \r [了解有关 Reliable Actors 的详细信息](service-fabric-reliable-actors-introduction.md)或通过[编写第一个 Reliable Actor 服务](service-fabric-reliable-actors-get-started.md)帮助你入门\r \r [使用 ASP.NET Core 构建前端服务](service-fabric-add-a-web-frontend.md)\r \r ## <a name=\"next-steps\"></a>后续步骤\r [Service Fabric 和容器概述](service-fabric-containers-overview.md)\r \r [Reliable Services 概述](service-fabric-reliable-services-introduction.md)\r \r [Reliable Actors 概述](service-fabric-reliable-actors-introduction.md)\r \r [Service Fabric 和 ASP.NET Core](service-fabric-reliable-services-communication-aspnetcore.md)\r \r <!--Update_Description: update meta properties, wording update -->"}