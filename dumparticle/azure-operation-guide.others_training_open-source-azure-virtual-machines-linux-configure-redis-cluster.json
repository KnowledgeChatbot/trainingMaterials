{"Title":"在 Azure Linux 虚拟机上配置 Redis 集群","Description":"本文档介绍如何在 Azure Linux 虚拟机上安装配置免费的 Redis 集群。","Content":"\r # 在 Azure Linux 虚拟机上配置 Redis 集群\r \r ## 目录\r \r - [介绍](#introduction)\r - [安装Redis](#install)\r - [复制](#copy)\r - [配置复制](#config-copy)\r - [Redis 集群](#redis-cluster)\r - [配置 Redis 集群](#config-redis-cluster)\r \r ## <a name=\"introduction\"></a>介绍\r \r Redis 是开源的(BSD 许可)，内存数据结构化存储(in-memory data structure store)，可用作数据库，缓存和消息中间件。它支持多种类型的数据结构，比如字符串，散列，列表，集合，有序集合与范围查询(sorted sets with range queries)，bitmaps, hyperloglogs 以及 geospatial indexes with radius queries。\r \r Redis 内置了复制，LUA 脚本，LRU 驱动时间，事务和不同级别的磁盘持久化，并通过 Sentinel 和自动分区提供高可用性。\r \r 本文档介绍如何在 Azure Linux 虚拟机上安装配置免费的 Redis 集群。\r \r Azure 有提供收费的 Redis 服务，请参考 [Azure Redis tutorial](/redis-cache/) 获取详细信息。\r \r ## <a name=\"install\"></a>安装 Redis\r \r 如果您还没有 Azure 下的 LINUX 虚拟机，请参考 [Azure Linux VM tutorial](/virtual-machines/virtual-machines-linux-quick-create-portal) 创建 LINUX 虚拟机。\r \r 连接到您的 LINUX 虚拟机。如果这是您第一次使用 Azure 的 LINUX 虚拟机，请参考\r  [Azure Linux VM tutorial](/virtual-machines/virtual-machines-linux-quick-create-portal) 连接到虚拟机。\r \r 不同的 LINUX 发行版在安装 Redis 时有少许的不同。请根据您的 LINUX 版本选择对应的步骤。\r \r 1. 准备\r \r     Redhat base Linux: ( 以 CentOS 7.0, 64-bit system, Redis 3.0.7 为例)  \r     安装 wget 和 gcc\r \r     ```\r     $sudo yum install wget -y\r     $sudo yum install gcc -y\r     ```\r \r     Ubuntu Linux: (以 Ubuntu 14.04, 64-bit system, Redis 3.0.7 为例)  \r     安装 gcc 和 make\r \r     ```\r     $sudo apt-get update \r     $sudo apt-get install gcc -y\r     $sudo apt-get install make -y\r     ```\r \r     SUSE Linux: (以 SLES 12, 64-bit system, Redis 3.0.7 为例)  \r     安装 gcc\r \r     ```\r     $sudo zypper install gcc -y\r     ```\r \r 2. 安装和启动 Redis. (下面2-5 步骤对于 RHEL, Ubuntu 和 SUSE 来讲都是一样的. 以 CentOS 7.0, 64-bit system, Redis 3.0.7 为例)\r \r     ```\r     $cd /usr/local\r     $sudo wget http://download.redis.io/releases/redis-3.0.7.tar.gz\r     $sudo tar xzvf redis-3.0.7.tar.gz\r     $sudo ln -s redis-3.0.7 redis\r     $cd redis\r     $sudo make\r \r     $sudo cp redis.conf /etc/\r     $sudo sed -i 's/daemonize no/daemonize yes/' /etc/redis.conf\r     $cd src\r     $sudo ./redis-server /etc/redis.conf                    #start redis daemon\r     ```\r \r 3. 查看 redis daemon (如果能看到类似下列信息，表明 Redis 正常工作)\r \r     ```\r     $sudo ./redis-cli \r     127.0.0.1:6379> set foo bar\r     OK\r     127.0.0.1:6379> get foo\r     \"bar\"\r     127.0.0.1:6379>\r     ```\r \r 4. 打开6379端口。6379端口是 Redis 的默认端口。请参考[创建终结点](/virtual-machines/virtual-machines-linux-classic-setup-endpoints)打开端口 \r 5. 停掉 Redis 的命令\r \r     ```\r     $sudo ./redis-cli shutdown\r     ```\r \r ## <a name=\"copy\"></a>复制\r \r Redis 复制很简单易用，它通过配置允许 slave Redis Servers 是 Master Servers 的完完全全的复制品。接下来有几个关于 redis 复制的非常重要的特性：\r \r  1. 一个 Master 可以有多个 Slaves 。\r  2. Slaves 能接受来自其他 slave 的链接: 除了可以接受同一个 master 下面 slaves 的链接以外，还可以接受同一个结构图中的其他 slaves 的链接。\r  3. redis 复制在 master 段是非阻塞的，这就意味着 master 在同一个或多个 slave 端执行同步的时候还可以接受查询。\r  4. 复制在 slave 端也是非阻塞的，假设你在 redis.conf 中配置 redis 这个功能，当 slave 在执行新的同步时，它仍可以用旧的数据信息来提供查询，否则，你可以配置当 redis slaves 与 master 失去联系时，slave 会返回一个客户端错误。\r  5. 为了有多个 slaves 可以做只读查询，复制可以重复2次，甚至多次，具有可扩展性（例如：slaves 对话与重复的排序操作，有多份数据冗余就相对简单了）。\r  6. 通过复制可以避免 master 全量写硬盘的消耗：只要配置 master 的配置文件 redis.conf 来‘避免保存’（注释掉所有 ‘save’ 命令），然后连接一个用来持久化数据的 slave 即可。但是这样要确保 master 不会自动重启。\r \r ## <a name=\"config-copy\"></a>配置复制\r \r 配置步骤对于 Redhat, Ubuntu 和 SUSE 来讲都一样. 以下面这几台虚拟机作为示例\r \r <table border=\"1\">\r <tr>\r <th>Name</th><th>IP</th><th>Role</th>\r </tr>\r <tr>\r <td>CENTOS</td>\t<td>192.168.1.1</td>\t<td>Master of UBUNTU</td>\r </tr>\r <tr>\r <td>UBUNTU</td>\t<td>192.168.1.2</td>\t<td>Slave of CENTOS, master of SLES</td>\r </tr>\r <tr>\r <td>SLES</td>\t<td>192.168.1.3</td>\t<td>Slave of UBUNTU</td>\r </tr>\r </table>\r \r 1. 在每台虚拟机安装 Redis 3.0.7 以及打开6379端口. 建议这几台虚拟机都位于同一个数据中心下，比如区域都是中国东部或者中国北部，以降低网络延迟。\r 2. 去到 UBUNTU 虚拟机, 执行下面命令\r \r     ```\r     $ sudo sed -i 's/# slaveof <masterip> <masterport>/slaveof 192.168.1.1 6379/' /etc/redis.conf\r     $ sudo /usr/local/redis/src/redis-cli shutdown\r     $ sudo /usr/local/redis/src/redis-server /etc/redis.conf\r     ```\r \r 3. 去到 SLES 虚拟机, 执行下面命令\r \r     ```\r     $ sudo sed -i 's/# slaveof <masterip> <masterport>/slaveof 192.168.1.2 6379/' /etc/redis.conf\r     $ sudo /usr/local/redis/src/redis-cli shutdown\r     $ sudo /usr/local/redis/src/redis-server /etc/redis.conf\r     ```\r \r 4. 验证。去到 CentOS 虚拟机，执行下面命令\r \r     ```\r     $sudo /usr/local/redis/src/redis-cli \r     127.0.0.1:6379> set hello world\r     OK\r     127.0.0.1:6379> get hello\r     \"world\"\r     127.0.0.1:6379>\r     ```\r \r 5. 去到 Ubuntu 和 SLES虚拟机，进行验证。执行下面命令\r \r     ```\r     $sudo /usr/local/redis/src/redis-cli \r     127.0.0.1:6379> get hello\r     \"world\"\r     127.0.0.1:6379>\r     ```\r \r 如果结果类似上面输出，表明复制配置成功。\r \r ## <a name=\"redis-cluster\"></a>Redis 集群\r \r 本节是 Redis 集群的一般介绍，没有涉及复杂难懂的分布式概念的赘述，只是提供了从用户角度来如何搭建测试以及使用的方法，如果您打算使用并深入了解 Redis 集群，推荐阅读完本节后,仔细阅读[官网文档](http://redis.io/topics/cluster-spec)\r \r Redis 集群是一个提供在多个 Redis 节点间共享数据的程序集\r Redis 集群通过分区来提供一定程度的可用性,在实际环境中当某个节点宕机或者不可达的情况下继续处理命令.\r Redis 集群的优势\r \r 1. 自动分割数据到不同的节点上。\r 2. 整个集群的部分节点失败或者不可达的情况下能够继续处理命令。\r \r ## <a name=\"config-redis-cluster\"></a>配置 Redis 集群\r \r 1. 基本信息如下(至少需要六个节点，所以在两台虚拟机上，开启不同的端口实例.)\r \r     <table border=\"1\">\r         <tr>\r             <th>Name</th>\t<th>IP</th>\t<th>Port Cluster Bus</th> <th>Port</th> <th>Role</th>\r         </tr>\r         <tr>\r             <td>CentOS</td>\t<td>104.40.91.31</td>\t<td>7000</td>\t<td>17000</td>\t<td>master</td>\r         </tr>\r         <tr>\r             <td>CentOS</td>\t<td>104.40.91.31</td>\t<td>7001</td>\t<td>17001</td>\t<td>master</td>\r         </tr>\r         <tr>\r             <td>CentOS</td>\t<td>104.40.91.31</td>\t<td>7002</td>\t<td>17002</td>\t<td>slave</td>\r         </tr>\r         <tr>\r             <td>Ubuntu</td>\t<td>104.40.94.121</td>\t<td>7003</td>\t<td>17003</td>\t<td>master</td>\r         </tr>\r         <tr>\r             <td>Ubuntu</td>\t<td>104.40.94.121</td>\t<td>7004</td>\t<td>17004</td>\t<td>slave</td>\r         </tr>\r         <tr>\r             <td>Ubuntu</td>\t<td>104.40.94.121</td>\t<td>7005</td>\t<td>17005</td>\t<td>slave</td>\r         </tr>\r     </table>\r \r 2. Redis version 3.0 及以上支持集群。在各个虚拟机上安装 Redis 3.0.7并且打开上表中相应的端口.\r 3. 安装 ruby, rubygems, redis gem\r \r     Redhat base Linux: ( 以 CentOS 7.0, 64-bit system 为例)\r \r     ```\r     $sudo yum install ruby -y\r     $sudo yum install rubygems\r     $sudo gem install redis\r     ```\r \r     Ubuntu Linux: (以Ubuntu 14.04, 64-bit system 为例)\r \r     ```\r     $sudo apt-get install ruby -y\r     $sudo gem install redis\r     ```\r \r     SUSE Linux: (以 SLES 12, 64-bit system 为例)\r \r     ```\r     $sudo gem install redis\r     ```\r \r 4. 在 CentOS 虚拟上执行4-7步骤\r \r     ```\r     $sudo mkdir /usr/local/redis-cluster\r     $sudo mkdir /usr/local/redis-cluster/7000\r     $ sudo mkdir /usr/local/redis-cluster/7001\r     $ sudo mkdir /usr/local/redis-cluster/7002\r     $sudo cp /usr/local/redis/src/redis-server /usr/local/redis-cluster/7000/\r     $sudo cp /usr/local/redis/src/redis-server /usr/local/redis-cluster/7001/\r     $sudo cp /usr/local/redis/src/redis-server /usr/local/redis-cluster/7002/\r     $sudo cp /etc/redis.conf /usr/local/redis-cluster/7000/\r     ```\r \r 5. 编辑 /usr/local/redis-cluster/7000/redis.conf, 使得各参数的值和下面一致\r \r     ```\r     $sudo vi /usr/local/redis-cluster/7000/redis.conf\r     port 7000\r     daemonize yes\r     cluster-enabled yes\r     cluster-config-file nodes.conf\r     cluster-node-timeout 5000\r     appendonly yes\r     ```\r \r 6. 复制 /usr/local/redis-cluster/7000/redis.conf 到 7001 和7002 目录, 修改端口信息。 \r \r     ```\r     $sudo cp /usr/local/redis-cluster/7000/redis.conf /usr/local/redis-cluster/7001/\r     $sudo cp /usr/local/redis-cluster/7000/redis.conf /usr/local/redis-cluster/7002/\r     $sudo sed -i 's/port 7000/port 7001/' /usr/local/redis-cluster/7001/redis.conf \r     $sudo sed -i 's/port 7000/port 7002/' /usr/local/redis-cluster/7002/redis.conf\r     ```\r \r 7. 启动各节点\r \r     ```\r     $cd /usr/local/redis-cluster/7000\r     $sudo ./redis-server ./redis.conf\r     $cd ../7001\r     $sudo ./redis-server ./redis.conf\r     $cd ../7002\r     $sudo ./redis-server ./redis.conf\r     ```\r \r 8. 在 Ubuntu 虚拟机执行8-11步骤\r \r     ```\r     $sudo mkdir /usr/local/redis-cluster\r     $sudo mkdir /usr/local/redis-cluster/7003\r     $ sudo mkdir /usr/local/redis-cluster/7004\r     $ sudo mkdir /usr/local/redis-cluster/7005\r     $sudo cp /usr/local/redis/src/redis-server /usr/local/redis-cluster/7003/\r     $sudo cp /usr/local/redis/src/redis-server /usr/local/redis-cluster/7004/\r     $sudo cp /usr/local/redis/src/redis-server /usr/local/redis-cluster/7005/\r     $sudo cp /etc/redis.conf /usr/local/redis-cluster/7003/\r     ```\r \r 9. 编辑 /usr/local/redis-cluster/7003/redis.conf, 使得各参数的值和下面的一致\r \r     ```\r     $sudo vi /usr/local/redis-cluster/7003/redis.conf\r     port 7003\r     daemonize yes\r     cluster-enabled yes\r     cluster-config-file nodes.conf\r     cluster-node-timeout 5000\r     appendonly yes\r     ```\r \r 10. 复制 /usr/local/redis-cluster/7003/redis.conf 到7004 和7005 目录, 修改端口信息\r \r     ```\r     $sudo cp /usr/local/redis-cluster/7003/redis.conf /usr/local/redis-cluster/7004/\r     $sudo cp /usr/local/redis-cluster/7003/redis.conf /usr/local/redis-cluster/7005/\r     $sudo sed -i 's/port 7003/port 7004/' /usr/local/redis-cluster/7004/redis.conf \r     $sudo sed -i 's/port 7003/port 7005/' /usr/local/redis-cluster/7005/redis.conf\r     ```\r \r 11. 启动各节点\r \r     ```\r     $cd /usr/local/redis-cluster/7003\r     $sudo ./redis-server ./redis.conf\r     $cd ../7004\r     $sudo ./redis-server ./redis.conf\r     $cd ../7005\r     $sudo ./redis-server ./redis.conf\r     ```\r \r 12. 创建集群。在 CentOS 虚拟机上执行\r \r     ```\r     $ sudo /usr/local/redis/src/redis-trib.rb create --replicas 1 104.40.91.31:7000 104.40.91.31:7001         104.40.91.31:7002 104.40.94.121:7003 104.40.94.121:7004 104.40.94.121:7005\r     ```\r \r     如果看到下面的信息，输入‘yes’即可\r \r     ![创建集群成功](./media/open-source-azure-virtual-machines-linux-configure-redis-cluster/1.png)\r \r     之后如果看到下面的信息，表明集群设置成功。\r \r     ![创建集群成功](./media/open-source-azure-virtual-machines-linux-configure-redis-cluster/2.png)\r \r 13. 验证。去到 CentOS 虚拟机, 执行下面命令\r \r     ```\r     $cd /usr/local/redis/src\r     $sudo ./redis-cli -c -p 7000\r     127.0.0.1:7000> set foo bar\r     -> Redirected to slot [12182] located at 104.40.91.31:7001\r     OK\r     104.40.91.31:7001> get foo\r     \"bar\"\r     104.40.91.31:7001> set hello world\r     -> Redirected to slot [866] located at 104.40.91.31:7000\r     OK\r     104.40.91.31:7000> get hello\r     \"world\"\r     104.40.91.31:7000> set name alex\r     -> Redirected to slot [5798] located at 104.40.94.121:7003\r     OK\r     104.40.94.121:7003> get name\r     \"alex\"\r     104.40.94.121:7003> set id 9\r     OK\r     104.40.94.121:7003> get id\r     \"9\"\r     104.40.94.121:7003>\r     ```\r \r     去到 Ubuntu 虚拟机，执行下面命令\r \r     ```\r     $cd /usr/local/redis/src\r     $sudo ./redis-cli -p 7003\r     127.0.0.1:7003> get name\r     \"alex\"\r     127.0.0.1:7003> get id\r     \"9\"\r     127.0.0.1:7003> get foo\r     (error) MOVED 12182 104.40.91.31:7001\r     127.0.0.1:7003> get hello\r     (error) MOVED 866 104.40.91.31:7000\r     127.0.0.1:7003>\r     ```\r \r     我们获取不到键 ‘foo’ 和 ‘hello’的值， 因为它们不在 Ubuntu:7003 节点上。我们要到 CentOS:7001 节点上查看键 ‘foo’ 的值。\r \r     ```\r     $cd /usr/local/redis/src \r     $sudo ./redis-cli -p 7001\r     127.0.0.1:7001> get foo\r     \"bar\"\r     ```\r \r     或者我们可以在 Ubuntu 虚拟机执行下面命令检查各个键的值。\r \r     ```\r     $cd /usr/local/redis/src\r     $sudo ./redis-cli -c -p 7003\r     127.0.0.1:7003> get foo\r     -> Redirected to slot [12182] located at 104.40.91.31:7001\r     \"bar\"\r     104.40.91.31:7001> get hello\r     -> Redirected to slot [866] located at 104.40.91.31:7000\r     \"world\"\r     104.40.91.31:7000>\r     ```\r \r 14. 查看集群信息. 在 CentOS 虚拟机上执行\r \r     ```\r     $cd /usr/local/redis/src\r     $sudo ./redis-cli -p 7000 cluster nodes\r     $sudo ./redis-cli -p 7000 cluster info\r     ```\r \r 你可以添加，移除，关闭，重启节点等各种操作。更多详细信息请参考[官网文档](http://redis.io/topics/cluster-tutorial)"}