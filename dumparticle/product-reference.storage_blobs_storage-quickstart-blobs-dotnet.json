{"Title":"Azure 快速入门 - 使用 .NET 将对象转移到 Azure Blob 存储或从 Azure Blob 存储转移对象","Description":"快速了解如何使用 .NET 将对象转移到 Azure Blob 存储或从 Azure Blob 存储转移对象","Content":"# <a name=\"transfer-objects-tofrom-azure-blob-storage-using-net\"></a>使用 .NET 将对象转移到 Azure Blob 存储或从 Azure Blob 存储转移对象\r \r 本快速入门介绍 Azure 存储的 .NET 客户端库如何在容器中上传、下载和列出块 Blob。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r \r 若要完成本快速入门，请使用以下工作负荷安装 [Visual Studio 2017](https://www.visualstudio.com/visual-studio-homepage-vs.aspx)：\r     - **Azure 开发**\r \r 如果没有 Azure 订阅，可以在开始前创建一个 [1 元帐户](https://www.azure.cn/pricing/1rmb-trial/?WT.mc_id=A261C142F)。\r \r [!INCLUDE [storage-quickstart-tutorial-create-account-portal](../../../includes/storage-quickstart-tutorial-create-account-portal.md)]\r \r ## <a name=\"download-the-sample-application\"></a>下载示例应用程序\r \r 本快速入门中使用的示例应用程序是基本的控制台应用程序。 \r \r 使用 [git](https://git-scm.com/) 可将应用程序的副本下载到开发环境。 \r \r ```bash\r git clone https://github.com/Azure-Samples/storage-blobs-dotnet-quickstart.git\r ```\r \r 此命令会将存储库克隆到本地 git 文件夹。 若要打开 Visual Studio 解决方案，请找到 storage-blobs-dotnet-quickstart 文件夹并打开，然后双击 storage-blobs-dotnet-quickstart.sln。 \r \r ## <a name=\"configure-your-storage-connection-string\"></a>配置存储连接字符串\r \r 在应用程序中，必须为存储帐户提供连接字符串。 从 Visual Studio 中的解决方案资源管理器打开 `app.config` 文件。 查找 `StorageConnectionString` 条目。 对于“值”，请将整个连接字符串值替换为从 Azure 门户保存的值。 `storageConnectionString` 应如下图所示：\r \r ```xml\r <?xml version=\"1.0\" encoding=\"utf-8\" ?>\r <configuration>\r     <startup> \r         <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5.2\" />\r     </startup>\r   <appSettings>\r     <add key=\"StorageConnectionString\" value=\"DefaultEndpointsProtocol=https;\r     AccountName=<NameHere>;\r     AccountKey=<KeyHere>;EndpointSuffix=core.chinacloudapi.cn\" />\r   </appSettings>\r </configuration>\r ```\r \r ## <a name=\"run-the-sample\"></a>运行示例\r \r 此示例在“我的文档”中创建一个测试文件，将其上传到 Blob 存储，列出容器中的 blob，然后下载具有新名称的文件，以便比较旧文件和新文件。 \r \r 按 F5 运行示例。 控制台窗口中显示的输出与下面的内容类似： \r \r ```\r Temp file = C:\\Users\\azureuser\\Documents\\QuickStart_cbd5f95c-6ab8-4cbf-b8d2-a58e85d7a8e8.txt\r Uploading to Blob storage as blob 'QuickStart_cbd5f95c-6ab8-4cbf-b8d2-a58e85d7a8e8.txt'\r List blobs in container.\r https://mystorage.blob.core.chinacloudapi.cn/quickstartblobs/QuickStart_cbd5f95c-6ab8-4cbf-b8d2-a58e85d7a8e8.txt\r Downloading blob to C:\\Users\\azureuser\\Documents\\QuickStart_cbd5f95c-6ab8-4cbf-b8d2-a58e85d7a8e8_DOWNLOADED.txt\r ```\r \r 按任意键继续时，会删除存储容器和文件。 继续前，请在“我的文档”中查看这两个文件。 可以打开它们，并看到它们完全相同。 从控制台窗口复制 blob 的 URL，将其粘贴到浏览器，查看 Blob 存储中的文件的内容。\r \r 还可以使用工具（如 [Azure 存储资源管理器](http://storageexplorer.com/?toc=%2fazure%2fstorage%2fblobs%2ftoc.json)）查看 Blob 存储中的文件。 Azure 存储资源管理器是免费的跨平台工具，可用于访问存储帐户信息。 \r \r 验证文件后，按任意键可完成演示并删除测试文件。 既然现在已了解此示例的用途，打开 Program.cs 文件可查看代码。 \r \r ## <a name=\"understand-the-sample-code\"></a>了解示例代码\r \r 接下来逐步介绍示例代码，以便展示其工作方式。\r \r ### <a name=\"get-references-to-the-storage-objects\"></a>获取对存储对象的引用\r \r 首先创建对用于访问和管理 Blob 存储的对象的引用。 这些对象相互关联 - 每个对象被列表中的下一个对象使用。\r \r * 创建指向存储帐户的 **CloudStorageAccount** 对象的实例。 \r \r * 创建 **CloudBlobClient** 对象的实例，该对象指向存储帐户中的 Blob 服务。 \r \r * 创建 **CloudBlobContainer** 对象的实例，该对象代表所访问的容器。 容器用于组织 blob，就像使用计算机上的文件夹组织文件一样。\r \r 有了 CloudBlobContainer 后，就可以创建 CloudBlockBlob 对象（该对象指向你感兴趣的特定 blob）的实例，然后执行上传、下载、复制等操作。\r \r > [!IMPORTANT]\r > 容器名称必须为小写。 有关容器名称和 blob 名称的详细信息，请参阅[命名和引用容器、Blob 和元数据](https://docs.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata)。\r \r 在本部分中，将创建对象的实例、创建新容器，并对容器设置权限，使 blob 公开，只需 URL 即可对其进行访问。 容器名称为 quickstartblobs。 \r \r 此示例使用 CreateIfNotExists，因为我们想要每次运行示例时都创建新容器。 在整个应用程序中使用相同容器的生产环境中，建议仅调用 **CreateIfNotExists** 一次， 或提前创建容器，这样就无需在代码中创建它。\r \r ```csharp\r // Create a CloudStorageAccount instance pointing to your storage account.\r CloudStorageAccount storageAccount =\r     CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the CloudBlobClient that is used to call the Blob Service for that storage account.\r CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient();\r \r // Create a container called 'quickstartblobs'. \r CloudBlobContainer cloudBlobContainer = \r     cloudBlobClient.GetContainerReference(\"quickstartblobs\");\r await cloudBlobContainer.CreateIfNotExistsAsync();\r \r // Set the permissions so the blobs are public. \r BlobContainerPermissions permissions = new BlobContainerPermissions();\r permissions.PublicAccess = BlobContainerPublicAccessType.Blob;\r await cloudBlobContainer.SetPermissionsAsync(permissions);\r ```\r \r ### <a name=\"upload-blobs-to-the-container\"></a>将 blob 上传到容器\r \r Blob 存储支持块 blob、追加 blob 和页 blob。 块 blob 最常用，此快速入门中也使用块 blob。 \r \r 为了将文件上传到 blob，需获取对目标容器中 blob 的引用。 有了 blob 引用后，可以通过使用 [CloudBlockBlob.UploadFromFileAsync](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblockblob.uploadfromfileasync) 将数据上传其中。 此操作会创建 blob（若尚不存在），或者覆盖它（若已存在）。\r \r 示例代码创建一个用于上传和下载的本地文件，存储作为 fileAndPath 上传的文件和 localFileName 中的 blob 名称。 以下示例将文件上传到名为“quickstartblobs”的容器。\r \r ```csharp\r // Create a file in MyDocuments to test the upload and download.\r string localPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\r string localFileName = \"QuickStart_\" + Guid.NewGuid().ToString() + \".txt\";\r string fileAndPath = Path.Combine(localPath, localFileName);\r File.WriteAllText(fileAndPath, \"Hello, World!\");\r \r //Upload the file.\r CloudBlockBlob blockBlob = container.GetBlockBlobReference(localFileName);\r await blockBlob.UploadFromFileAsync(fileAndPath);\r ```\r \r Blob 存储支持多种上传方法。 例如，如果有内存流，可以使用 UploadFromStreamAsync 方法，无需使用 UploadFromFileAsync。 \r \r 块 blob 可以是任何类型的文本或二进制文件。 页 blob 主要用于用于备份 IaaS VM 的 VHD 文件。 追加 blob 用于日志记录，例如有时需要写入到文件，再继续添加更多信息。 存储在 Blob 存储中的大多数对象都是块 blob。\r \r ### <a name=\"list-the-blobs-in-a-container\"></a>列出容器中的 Blob\r \r 可以使用 [CloudBlobContainer.ListBlobsSegmentedAsync](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblobcontainer.listblobssegmentedasync) 获取容器中的文件列表。 下面的代码检索 blob 列表，然后循环访问它们，显示找到的 blob 的 URI。 可以从命令窗口中复制 URI，然后将其粘贴到浏览器以查看文件。\r \r 如果容器中有 5000 个以下的 blob，调用一次 ListBlobsSegmentedAsync 可检索出所有 blob 名称。 如果容器中的 blob 超过 5000 个，服务会分批检索列表，每组 5000 个 blob，直到检索出所有 blob 名称。 因此，第一次调用此 API 时，它将返回第一组 5,000 个blob 名称和一个继续令牌。 第二次调用时，提供令牌，服务会检索下一组 blob 名称，以此类推，直到继续令牌为 null（表示已检索出所有 blob 名称）。 \r \r ```csharp\r // List the blobs in the container.\r Console.WriteLine(\"List blobs in container.\");\r BlobContinuationToken blobContinuationToken = null;\r do\r {\r     var results = await cloudBlobContainer.ListBlobsSegmentedAsync(null, blobContinuationToken);\r     foreach(IListBlobItem item in results.Results)\r     {\r         Console.WriteLine(item.Uri);\r     }\r } while (blobContinuationToken != null);\r ```\r \r ### <a name=\"download-blobs\"></a>下载 Blob\r \r 使用 [CloudBlob.DownloadToFileAsync](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblob.downloadtofileasync) 将 blob 下载到本地磁盘。\r \r 以下代码下载上一部分上传的 blob，对 blob 名称添加“_DOWNLOADED”后缀，以便可以在本地磁盘上看到两个文件。 \r \r ```csharp\r // Download blob. In most cases, you would have to retrieve the reference\r //   to cloudBlockBlob here. However, we created that reference earlier, and \r //   haven't changed the blob we're interested in, so we can reuse it. \r // First, add a _DOWNLOADED before the .txt so you can see both files in MyDocuments.\r string fileAndPath2 = fileAndPath.Replace(\".txt\", \"_DOWNLOADED.txt\");\r Console.WriteLine(\"Downloading blob to {0}\", fileAndPath2);\r await cloudBlockBlob.DownloadToFileAsync(fileAndPath2, FileMode.Create);\r ```\r \r ### <a name=\"clean-up-resources\"></a>清理资源\r \r 如果不再需要此本快速入门中上传的 blob，可使用 [CloudBlobContainer.DeleteAsync](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblobcontainer.deleteasync) 删除整个容器。 还可以删除创建的文件（如果不需要）。\r \r ```csharp\r await cloudBlobContainer.DeleteAsync();\r File.Delete(fileAndPath);\r File.Delete(fileAndPath2);    \r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 在此快速入门教程中，介绍了如何使用 .NET 在本地磁盘和 Azure Blob 存储之间传输文件。 要深入了解如何使用 Blob 存储，请继续学习 Blob 存储操作说明。\r \r > [!div class=\"nextstepaction\"]\r > [Blob 存储操作说明](storage-dotnet-how-to-use-blobs.md)\r \r 有关其他可以下载和运行的 Azure 存储代码示例，请参阅[使用 .NET 的 Azure 存储示例](../common/storage-samples-dotnet.md)列表。\r \r 若要详细了解存储资源管理器和 Blob，请参阅[使用存储资源管理器管理 Azure Blob 存储资源](../../vs-azure-tools-storage-explorer-blobs.md?toc=%2fazure%2fstorage%2fblobs%2ftoc.json)。\r "}