{"Title":"使用 Java 创建 Azure IoT Edge 模块","Description":"本教程演示如何使用最新的 Azure IoT Edge Maven 包编写 BLE 数据转换器模块。","Content":"# <a name=\"create-an-azure-iot-edge-module-with-java\"></a>使用 Java 创建 Azure IoT Edge 模块\r \r 本教程演示如何为 Java 中的 Azure IoT Edge 构建模块。\r \r 本教程将演练环境设置，以及如何使用最新的 Azure IoT Edge Maven 包编写 [BLE](https://en.wikipedia.org/wiki/Bluetooth_Low_Energy) 数据转换器模块。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 本部分将设置 IoT Edge 模块开发环境。 内容适用于 64 位 Windows 和 64 位 Linux (Ubuntu/Debian 8) 操作系统。\r \r 需要以下软件：\r \r * [Git 客户端](https://git-scm.com/downloads)。\r * [**x64** JDK](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)。\r * [Maven](https://maven.apache.org/install.html)。\r \r 打开命令行终端窗口并克隆以下存储库：\r \r 1. `git clone https://github.com/Azure-Samples/iot-edge-samples.git`。\r 2. `cd iot-edge-samples/java/simulated_ble`\r \r ## <a name=\"overall-architecture\"></a>整体体系结构\r \r Azure IoT Edge 平台在很大程度上采用 [Von Neumann 体系结构](https://en.wikipedia.org/wiki/Von_Neumann_architecture)。 这意味着，整个 Azure IoT Edge 体系结构就是一个处理输入并生成输出的系统；每个模块也是一个微小的输入-输出子系统。 本教程将介绍以下两个模块：\r \r 1. 一个接收 [BLE](https://en.wikipedia.org/wiki/Bluetooth_Low_Energy) 模拟信号并将其转换为 [JSON](https://en.wikipedia.org/wiki/JSON) 格式消息的模块。\r 2. 一个列显收到的 [JSON](https://en.wikipedia.org/wiki/JSON) 消息的模块。\r \r 下图显示了此项目的典型端到端数据流：\r \r ![三个模块之间的数据流](./media/iot-hub-iot-edge-create-module/dataflow.png \"输入：模拟的 BLE 模块；处理器：转换器模块；输出：列显程序模块\")\r \r ## <a name=\"understanding-the-code\"></a>了解代码\r \r ### <a name=\"maven-project-structure\"></a>Maven 项目结构\r \r 由于 Azure IoT Edge 包基于 Maven，因此我们需要创建一个包含 `pom.xml` 文件的典型 Maven 项目结构。\r \r POM 继承自 `com.microsoft.azure.gateway.gateway-module-base` 包，该包声明包含运行时二进制文件、网关配置文件路径和执行行为的模块项目所需的所有依赖项。 这样就可以节省大量的时间，并且无需反复编写和重写数百个代码行。\r \r 我们需要根据以下代码片段中所示，通过声明所需的依赖项/插件以及模块要使用的配置文件的名称，来更新 pom.xml 文件。\r \r ```xml\r <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r          xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r   <modelVersion>4.0.0</modelVersion>\r \r   <!-- Inherit from parent -->\r   <parent>\r     <groupId>com.microsoft.azure.gateway</groupId>\r     <artifactId>gateway-module-base</artifactId>\r     <version>1.0.1</version>\r   </parent>\r   \r   <groupId>com.microsoft.azure.gateway</groupId>\r   <artifactId>ble-converter</artifactId>\r   <version>1.0</version>\r   <packaging>jar</packaging>\r \r   <!-- Set the filename of the Azure IoT Edge configuration located\r        under ./src/main/resources/gateway/ which is used in parent -->\r   <properties>\r     <gw.config.fileName>gw-config.json</gw.config.fileName>\r   </properties>\r \r   <!-- Re-declare dependencies used in parent -->\r   <dependencies>\r     <dependency>\r       <groupId>com.microsoft.azure.gateway</groupId>\r       <artifactId>gateway-java-binding</artifactId>\r     </dependency>\r     <dependency>\r       <groupId>${dependency.runtime.group}</groupId>\r       <artifactId>${dependency.runtime.name}</artifactId>\r     </dependency>\r   </dependencies>\r \r   <!-- Re-declare plugins used in parent -->\r   <build>\r     <plugins>\r       <plugin>\r         <groupId>org.apache.maven.plugins</groupId>\r         <artifactId>maven-dependency-plugin</artifactId>\r       </plugin>\r       <plugin>\r         <groupId>org.apache.maven.plugins</groupId>\r         <artifactId>maven-resources-plugin</artifactId>\r       </plugin>\r       <plugin>\r         <groupId>org.apache.maven.plugins</groupId>\r         <artifactId>maven-shade-plugin</artifactId>\r       </plugin>\r       <plugin>\r         <groupId>org.codehaus.mojo</groupId>\r         <artifactId>exec-maven-plugin</artifactId>\r       </plugin>\r     </plugins>\r   </build>\r </project>\r ```\r \r ### <a name=\"basic-understanding-of-an-azure-iot-edge-module\"></a>基本了解 Azure IoT Edge 模块\r \r 可将 Azure IoT Edge 模块视为数据处理器，其作用是：接收输入、处理输入并生成输出。\r \r 输入可能是来自硬件（例如运动探测器）的数据、来自其他模块的消息，或其他任何信息（例如，计时器定期生成的随机数）。\r \r 输出类似于输入，它可能会触发硬件行为（例如，使 LED 闪烁）、向其他模块发送消息，或其他任何动作（例如，在控制台上列显信息）。\r \r 模块使用 `com.microsoft.azure.gateway.messaging.Message` 类互相通信。 `Message` 的**内容**是一个字节数组，可以代表所需的任何类型的数据。 **属性**也会出现在 `Message` 中，它们只是字符串到字符串的映射。 可将属性视为 HTTPS 请求中的标头，或文件的元数据。\r \r 若要在 Java 中开发 Azure IoT Edge 模块，需要创建一个继承自 `com.microsoft.azure.gateway.core.GatewayModule` 的新模块类，并实现所需的抽象方法 `receive()` 和 `destroy()`。 此时，还可以选择实现可选的 `start()` 或 `create()` 方法。 以下代码片段演示如何开始创作 Azure IoT Edge 模块。\r \r ```java\r import com.microsoft.azure.gateway.core.Broker;\r import com.microsoft.azure.gateway.core.GatewayModule;\r import com.microsoft.azure.gateway.messaging.Message;\r \r public class MyEdgeModule extends GatewayModule {\r   public MyEdgeModule(long address, Broker broker, String configuration) {\r     /* Let the GatewayModule do the dirty work of initialization. It's also\r        a good time to parse your own configuration defined in Azure IoT Edge\r        configuration file (typically ./src/main/resources/gateway/gw-config.json) */\r     super(address, broker, configuration);\r   }\r \r   @Override\r   public void start() {\r     /* Acquire the resources you need. If you don't\r        need any resources, you may omit this method. */\r   }\r \r   @Override\r   public void destroy() {\r     /* It's time to release all resources. This method is required. */\r   }\r \r   @Override\r   public void receive(Message message) {\r     /* Logic to process the input message. This method is required. */\r     // ...\r     /* Use publish() method to do the output. You are\r        allowed to publish your new Message instance. */\r     this.publish(message);\r   }\r }\r ```\r \r ### <a name=\"converter-module\"></a>转换器模块\r \r | 输入                    | 处理器                              | 输出                 | 源文件            |\r | ------------------------ | -------------------------------------- | ---------------------- | ---------------------- |\r | 温度数据消息 | 分析和构造新的 JSON 消息 | 结构化 JSON 消息 | `ConverterModule.java` |\r \r 此模块是一个典型的 Azure IoT Edge 模块。 它从其他模块（硬件模块，或本例中所示的 BLE 模拟模块）接受温度消息；然后将温度消息规范化为结构化的 JSON 消息（包括追加消息 ID、设置属性来指定是否需要触发温度警报，等等）。\r \r ```java\r @Override\r public void receive(Message message) {\r   try {\r     JSONObject messageFromBle = new JSONObject(new String(message.getContent()));\r     double temperature = messageFromBle.getDouble(\"temperature\");\r     Map<String, String> inputProperties = message.getProperties();\r \r     HashMap<String, String> properties = new HashMap<>();\r     properties.put(\"source\", inputProperties.get(\"source\"));\r     properties.put(\"macAddress\", inputProperties.get(\"macAddress\"));\r     properties.put(\"temperatureAlert\", temperature > 30 ? \"true\" : \"false\");\r \r     String content = String.format(\r         \"{ \\\"deviceId\\\": \\\"Intel NUC Gateway\\\", \\\"messageId\\\": %d, \\\"temperature\\\": %f }\",\r         ++this.messageCount, temperature);\r \r     this.publish(new Message(content.getBytes(), properties));\r   } catch (Exception ex) {\r     ex.printStackTrace();\r   }\r }\r ```\r \r ### <a name=\"printer-module\"></a>列显程序模块\r \r | 输入                          | 处理器 | 输出                     | 源文件          |\r | ------------------------------ | --------- | -------------------------- | -------------------- |\r | 来自其他模块的任何消息 | 不适用       | 将消息记录到控制台 | `PrinterModule.java` |\r \r 这是一个简单的自释性模块，可在终端窗口中输出收到的消息。\r \r ```java\r @Override\r public void receive(Message message) {\r   System.out.println(message.toString());\r }\r ```\r \r ### <a name=\"azure-iot-edge-configuration\"></a>Azure IoT Edge 配置\r \r 运行模块之前的最后一步是配置 Azure IoT Edge 并在模块之间建立连接。\r \r 首先，需要声明 Java 加载程序（由于 Azure IoT Edge 支持不同语言的加载程序），后续部分中该加载程序的 `name` 可能会引用它。\r \r ```json\r \"loaders\": [{\r   \"type\": \"java\",\r   \"name\": \"java\",\r   \"configuration\": {\r     \"jvm.options\": {\r       \"library.path\": \"./\"\r     }\r   }\r }]\r ```\r \r 声明加载程序后，还需要声明模块。 与声明加载程序一样，其 `name` 属性也可能会引用它们。 声明模块时，需要指定每个模块应使用的加载程序（应是前面定义的加载程序）和入口点（应是模块的规范化类名）。 `simulated_device` 模块是包含在 Azure IoT Edge 核心运行时包中的本机模块。 始终应在 JSON 文件中包含 `args`，即使其值为 `null`。\r \r ```json\r \"modules\": [\r   {\r     \"name\": \"simulated_device\",\r     \"loader\": {\r       \"name\": \"native\",\r       \"entrypoint\": {\r         \"module.path\": \"simulated_device\"\r       }\r     },\r     \"args\": {\r       \"macAddress\": \"01:02:03:03:02:01\",\r       \"messagePeriod\": 500\r     }\r   },\r   {\r     \"name\": \"converter\",\r     \"loader\": {\r       \"name\": \"java\",\r       \"entrypoint\": {\r         \"class.name\": \"com/microsoft/azure/gateway/ConverterModule\",\r         \"class.path\": \"./ble-converter-1.0-with-deps.jar\"\r       }\r     },\r     \"args\": null\r   },\r   {\r     \"name\": \"print\",\r     \"loader\": {\r       \"name\": \"java\",\r       \"entrypoint\": {\r         \"class.name\": \"com/microsoft/azure/gateway/PrinterModule\",\r         \"class.path\": \"./ble-converter-1.0-with-deps.jar\"\r       }\r     },\r     \"args\": null\r   }\r ]\r ```\r \r 配置结束时，让我们建立连接。 每个连接由 `source` 和 `sink` 表示。 它们都应该引用预定义的模块。 `source` 模块的输出消息将转发到 `sink` 模块的输入。\r \r ```json\r \"links\": [\r   {\r     \"source\": \"simulated_device\",\r     \"sink\": \"converter\"\r   },\r   {\r     \"source\": \"converter\",\r     \"sink\": \"print\"\r   }\r ]\r ```\r \r ## <a name=\"running-the-modules\"></a>运行模块\r \r 使用 `mvn package` 在 `target/` 文件夹中生成所有内容。 此外，建议使用 `mvn clean package`，以生成纯净的版本。\r \r 使用 `mvn exec:exec` 运行 Azure IoT Edge，此时，应会发现，温度数据和所有属性将以固定的频率列显在控制台上。\r \r 若要终止应用程序，请按 `<Enter>` 键。\r \r > [!IMPORTANT]\r > 不建议使用 Ctrl + C 来终止 IoT Edge 网关应用程序， 因为这样做可能会导致该进程异常终止。\r \r "}