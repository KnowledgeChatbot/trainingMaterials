{"Title":"如何结合使用通知中心与 Python","Description":"了解如何从 Python 后端使用 Azure 通知中心。","Content":"\r # 如何通过 Python 使用通知中心\r [!INCLUDE [notification-hubs-backend-how-to-selector](../../includes/notification-hubs-backend-how-to-selector.md)]\r \r 如 MSDN 主题[通知中心 REST API](http://msdn.microsoft.com/zh-cn/library/dn223264.aspx) 中所述，你可以使用通知中心 REST 接口从 Java/PHP/Python/Ruby 后端访问所有通知中心功能。\r \r > [!NOTE]\r > 这是在 Python 中实现通知发送的示例引用实现，不是官方支持的通知中心 Python SDK。\r \r > [!NOTE]\r > 此示例使用 Python 3.4 编写。\r \r 本主题中，我们将向你介绍如何：\r \r * 以 Python 构建 REST 客户端以获取通知中心功能。\r * 使用 Python 接口发送通知到通知中心 REST API。 \r * 获取 HTTP REST 请求/响应的转储以进行调试/培训。 \r \r 你可以按照你选定的移动平台的[入门教程](./notification-hubs-windows-store-dotnet-get-started-wns-push-notification.md)以 Python 实现后端部分。\r \r > [!NOTE]\r > 该示例仅限于发送通知，并不执行任何注册管理操作。\r \r ## 客户端接口\r 主要的客户端接口可提供 [.NET 通知中心 SDK](http://msdn.microsoft.com/zh-cn/library/jj933431.aspx) 中提供的相同方法。这将允许你直接翻译当前该网站上提供的所有教程和示例，这些内容均来自 Internet 上的社区。\r \r 你可以在 [Python REST 包装器示例]中找到提供的所有代码。\r \r 例如，创建客户端：\r \r ```\r isDebug = True\r hub = NotificationHub(\"myConnectionString\", \"myNotificationHubName\", isDebug)\r ```\r \r 发送 Windows toast 通知：\r \r ```\r wns_payload = \"\"\"<toast><visual><binding template=\\\"ToastText01\\\"><text id=\\\"1\\\">Hello world!</text></binding></visual></toast>\"\"\"\r hub.send_windows_notification(wns_payload)\r ```\r \r ## 实现\r 如果你尚未实现，请按照我们的[入门教程]学至最后一节，其中你必须实现后端。\r \r 有关实现完整 REST 包装器的所有详细信息，请访问 [MSDN](http://msdn.microsoft.com/zh-cn/library/dn530746.aspx)。在本部分中，我们将向你介绍访问通知中心 REST 终结点所需的主要步骤的 Python 实现：\r \r 1. 解析连接字符串\r 2. 生成授权令牌\r 3. 使用 HTTP REST API 发送通知\r \r ### 解析连接字符串\r \r 下面是实现客户端的主类，其构造函数将解析连接字符串：\r \r ```\r class NotificationHub:\r     API_VERSION = \"?api-version=2013-10\"\r     DEBUG_SEND = \"&test\"\r \r     def __init__(self, connection_string=None, hub_name=None, debug=0):\r         self.HubName = hub_name\r         self.Debug = debug\r \r         # Parse connection string\r         parts = connection_string.split(';')\r         if len(parts) != 3:\r             raise Exception(\"Invalid ConnectionString.\")\r \r         for part in parts:\r             if part.startswith('Endpoint'):\r                 self.Endpoint = 'https' + part[11:]\r             if part.startswith('SharedAccessKeyName'):\r                 self.SasKeyName = part[20:]\r             if part.startswith('SharedAccessKey'):\r                 self.SasKeyValue = part[16:]\r ```\r \r ### 创建安全令牌\r 有关安全令牌创建的详细信息，请访问[此处](http://msdn.microsoft.com/zh-cn/library/dn495627.aspx)。\r 以下方法必须添加到 **NotificationHub** 类，以便根据当前请求的 URI 和提取自连接字符串的凭据创建令牌。\r \r ```\r @staticmethod\r def get_expiry():\r     # By default returns an expiration of 5 minutes (=300 seconds) from now\r     return int(round(time.time() + 300))\r \r @staticmethod\r def encode_base64(data):\r     return base64.b64encode(data)\r \r def sign_string(self, to_sign):\r     key = self.SasKeyValue.encode('utf-8')\r     to_sign = to_sign.encode('utf-8')\r     signed_hmac_sha256 = hmac.HMAC(key, to_sign, hashlib.sha256)\r     digest = signed_hmac_sha256.digest()\r     encoded_digest = self.encode_base64(digest)\r     return encoded_digest\r \r def generate_sas_token(self):\r     target_uri = self.Endpoint + self.HubName\r     my_uri = urllib.parse.quote(target_uri, '').lower()\r     expiry = str(self.get_expiry())\r     to_sign = my_uri + '\\n' + expiry\r     signature = urllib.parse.quote(self.sign_string(to_sign))\r     auth_format = 'SharedAccessSignature sig={0}&se={1}&skn={2}&sr={3}'\r     sas_token = auth_format.format(signature, expiry, self.SasKeyName, my_uri)\r     return sas_token\r ```\r \r ### 使用 HTTP REST API 发送通知\r 首先，定义表示通知的类。\r \r ```\r class Notification:\r     def __init__(self, notification_format=None, payload=None, debug=0):\r         valid_formats = ['template', 'apple', 'gcm', 'windows', 'windowsphone', \"adm\", \"baidu\"]\r         if not any(x in notification_format for x in valid_formats):\r             raise Exception(\r                 \"Invalid Notification format. \" +\r                 \"Must be one of the following - 'template', 'apple', 'gcm', 'windows', 'windowsphone', 'adm', 'baidu'\")\r \r         self.format = notification_format\r         self.payload = payload\r \r         # array with keynames for headers\r         # Note: Some headers are mandatory: Windows: X-WNS-Type, WindowsPhone: X-NotificationType\r         # Note: For Apple you can set Expiry with header: ServiceBusNotification-ApnsExpiry\r         # in W3C DTF, YYYY-MM-DDThh:mmTZD (for example, 1997-07-16T19:20+01:00).\r         self.headers = None\r ```\r \r 此类是一个容器，其中包含本机通知正文或一组模板通知上的属性，以及一组包含格式（本机平台或模板）和平台特定属性（如 Apple 过期属性和 WNS 标头）的标头。\r \r 请参阅[通知中心 REST API 文档](http://msdn.microsoft.com/zh-cn/library/dn495827.aspx)和具体的通知平台格式以了解所有可用选项。\r \r 现在有了此类后，我们便可在 **NotificationHub** 类中编写发送通知方法了。\r \r ```\r def make_http_request(self, url, payload, headers):\r     parsed_url = urllib.parse.urlparse(url)\r     connection = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\r \r     if self.Debug > 0:\r         connection.set_debuglevel(self.Debug)\r         # adding this querystring parameter gets detailed information about the PNS send notification outcome\r         url += self.DEBUG_SEND\r         print(\"--- REQUEST ---\")\r         print(\"URI: \" + url)\r         print(\"Headers: \" + json.dumps(headers, sort_keys=True, indent=4, separators=(' ', ': ')))\r         print(\"--- END REQUEST ---\\n\")\r \r     connection.request('POST', url, payload, headers)\r     response = connection.getresponse()\r \r     if self.Debug > 0:\r         # print out detailed response information for debugging purpose\r         print(\"\\n\\n--- RESPONSE ---\")\r         print(str(response.status) + \" \" + response.reason)\r         print(response.msg)\r         print(response.read())\r         print(\"--- END RESPONSE ---\")\r \r     elif response.status != 201:\r         # Successful outcome of send message is HTTP 201 - Created\r         raise Exception(\r             \"Error sending notification. Received HTTP code \" + str(response.status) + \" \" + response.reason)\r \r     connection.close()\r \r def send_notification(self, notification, tag_or_tag_expression=None):\r     url = self.Endpoint + self.HubName + '/messages' + self.API_VERSION\r \r     json_platforms = ['template', 'apple', 'gcm', 'adm', 'baidu']\r \r     if any(x in notification.format for x in json_platforms):\r         content_type = \"application/json\"\r         payload_to_send = json.dumps(notification.payload)\r     else:\r         content_type = \"application/xml\"\r         payload_to_send = notification.payload\r \r     headers = {\r         'Content-type': content_type,\r         'Authorization': self.generate_sas_token(),\r         'ServiceBusNotification-Format': notification.format\r     }\r \r     if isinstance(tag_or_tag_expression, set):\r         tag_list = ' || '.join(tag_or_tag_expression)\r     else:\r         tag_list = tag_or_tag_expression\r \r     # add the tags/tag expressions to the headers collection\r     if tag_list != \"\":\r         headers.update({'ServiceBusNotification-Tags': tag_list})\r \r     # add any custom headers to the headers collection that the user may have added\r     if notification.headers is not None:\r         headers.update(notification.headers)\r \r     self.make_http_request(url, payload_to_send, headers)\r \r def send_apple_notification(self, payload, tags=\"\"):\r     nh = Notification(\"apple\", payload)\r     self.send_notification(nh, tags)\r \r def send_gcm_notification(self, payload, tags=\"\"):\r     nh = Notification(\"gcm\", payload)\r     self.send_notification(nh, tags)\r \r def send_adm_notification(self, payload, tags=\"\"):\r     nh = Notification(\"adm\", payload)\r     self.send_notification(nh, tags)\r \r def send_baidu_notification(self, payload, tags=\"\"):\r     nh = Notification(\"baidu\", payload)\r     self.send_notification(nh, tags)\r \r def send_mpns_notification(self, payload, tags=\"\"):\r     nh = Notification(\"windowsphone\", payload)\r \r     if \"<wp:Toast>\" in payload:\r         nh.headers = {'X-WindowsPhone-Target': 'toast', 'X-NotificationClass': '2'}\r     elif \"<wp:Tile>\" in payload:\r         nh.headers = {'X-WindowsPhone-Target': 'tile', 'X-NotificationClass': '1'}\r \r     self.send_notification(nh, tags)\r \r def send_windows_notification(self, payload, tags=\"\"):\r     nh = Notification(\"windows\", payload)\r \r     if \"<toast>\" in payload:\r         nh.headers = {'X-WNS-Type': 'wns/toast'}\r     elif \"<tile>\" in payload:\r         nh.headers = {'X-WNS-Type': 'wns/tile'}\r     elif \"<badge>\" in payload:\r         nh.headers = {'X-WNS-Type': 'wns/badge'}\r \r     self.send_notification(nh, tags)\r \r def send_template_notification(self, properties, tags=\"\"):\r     nh = Notification(\"template\", properties)\r     self.send_notification(nh, tags)\r ```\r \r 以上方法将 HTTP POST 请求发送到你通知中心的 /messages 终结点，该请求具有发送通知的正确正文和标头。\r \r ### 使用调试属性启用详细的日志记录\r 在初始化通知中心时启用调试属性将写出关于 HTTP 请求和响应转储的详细日志记录信息，以及详细的通知消息发送结果。\r 我们最近添加了这个称为[通知中心 TestSend 属性](http://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.notifications.notificationhubclient.enabletestsend.aspx)的属性，它将返回有关通知发送结果的详细信息。\r 若要使用它 - 请使用以下方法进行初始化：\r \r ```\r hub = NotificationHub(\"myConnectionString\", \"myNotificationHubName\", isDebug)\r ```\r \r 通知中心 Send 请求 HTTP URL 获取附加 \"test\" 查询字符串作为结果。\r \r ##<a name=\"complete-tutorial\"></a>完成教程\r 现在，你可以通过从 Python 后端发送通知来完成该入门教程。\r \r 初始化你的通知中心客户端（按[入门教程]中所述替换连接字符串和中心名称）：\r \r ```\r hub = NotificationHub(\"myConnectionString\", \"myNotificationHubName\")\r ```\r \r 然后，根据你的目标移动平台添加发送代码。此示例还添加了更高级别的方法以支持基于平台发送通知，例如 send\\_windows\\_notification for windows; send\\_apple\\_notification (for apple) 等。\r \r ### Windows 应用商店和 Windows Phone 8.1（非 Silverlight）\r \r ```\r wns_payload = \"\"\"<toast><visual><binding template=\\\"ToastText01\\\"><text id=\\\"1\\\">Test</text></binding></visual></toast>\"\"\"\r hub.send_windows_notification(wns_payload)\r ```\r \r ### Windows Phone 8.0 和 8.1 Silverlight\r \r ```\r hub.send_mpns_notification(toast)\r ```\r \r ### iOS\r \r ```\r alert_payload = {\r     'data':\r         {\r             'msg': 'Hello!'\r         }\r }\r hub.send_apple_notification(alert_payload)\r ```\r \r ### Android\r \r ```\r gcm_payload = {\r     'data':\r         {\r             'msg': 'Hello!'\r         }\r }\r hub.send_gcm_notification(gcm_payload)\r ```\r \r ### Kindle Fire\r \r ```\r adm_payload = {\r     'data':\r         {\r             'msg': 'Hello!'\r         }\r }\r hub.send_adm_notification(adm_payload)\r ```\r \r ### 百度\r \r ```\r baidu_payload = {\r     'data':\r         {\r             'msg': 'Hello!'\r         }\r }\r hub.send_baidu_notification(baidu_payload)\r ```\r \r 运行 Python 代码，现在应该生成显示在目标设备上的通知。\r \r ## 示例:\r \r ### 启用调试属性\r 如果在初始化 NotificationHub 时启用调试标志，你将会看到详细的 HTTP 请求和响应转储以及 NotificationOutcome，如下所示，你可以从中了解哪些 HTTP 标头传入请求以及从通知中心收到哪些 HTTP 响应：\r        ![][1]\r \r 你将看到如详细的通知中心结果，例如\r \r - 当消息成功发送到推送通知服务时。 \r \r     ```\r     <Outcome>The Notification was successfully sent to the Push Notification System</Outcome>\r     ```\r \r - 如果没有为任何推送通知找到目标，你可能会看到以下响应（这表明可能没有找到传递通知的注册，因为这些注册具有一些不匹配的标记）\r \r     ```\r     '<NotificationOutcome xmlns=\"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><Success>0</Success><Failure>0</Failure><Results i:nil=\"true\"/></NotificationOutcome>'\r     ```\r \r ### 将 toast 通知广播到 Windows \r \r 请注意你在向 Windows 客户端发送广播 toast 通知时发送出去的标头。\r \r ```\r hub.send_windows_notification(wns_payload)\r ```\r \r ![][2]\r \r ### 发送通知指定标记（或标记表达式）\r \r 请注意添加到 HTTP 请求的 Tags HTTP 标头（在以下示例中，我们只将通知发送给了具有 'sports'负载的注册）\r \r ```\r hub.send_windows_notification(wns_payload, \"sports\")\r ```\r \r ![][3]\r \r ### 发送通知指定多个标记\r \r 请注意发送多个标记时 Tags HTTP 标头的变化方式。\r \r ```\r tags = {'sports', 'politics'}\r hub.send_windows_notification(wns_payload, tags)\r ```\r \r ![][4]\r \r ### 模板通知\r \r 请注意 Format HTTP 标头的变化和负载正文作为 HTTP 请求正文的一部分发送：\r \r **客户端 - 已注册的模板**\r \r ```\r     var template =\r                     @\"<toast><visual><binding template=\"\"ToastText01\"\"><text id=\"\"1\"\">$(greeting_en)</text></binding></visual></toast>\";\r ```\r \r **服务器端 - 正在发送的负载**\r \r ```\r     template_payload = {'greeting_en': 'Hello', 'greeting_fr': 'Salut'}\r     hub.send_template_notification(template_payload)\r ```\r \r ![][5]\r \r ## 后续步骤\r 在本主题中，我们介绍了如何为通知中心创建简单的 Python REST 客户端。从这里你可以：\r \r * 下载完整的 [Python REST 包装器示例]，其中包含上述所有代码。\r * 在[突发新闻教程]中继续学习通知中心标记功能\r * 在[本地化新闻教程]中继续学习通知中心模板功能\r \r <!-- URLs -->\r [Python REST 包装器示例]: https://github.com/Azure/azure-notificationhubs-samples/tree/master/notificationhubs-rest-python\r [入门教程]: ./notification-hubs-windows-store-dotnet-get-started-wns-push-notification.md\r [突发新闻教程]: ./notification-hubs-windows-notification-dotnet-push-xplat-segmented-wns.md\r [本地化新闻教程]: ./notification-hubs-windows-store-dotnet-xplat-localized-wns-push-notification.md\r \r <!-- Images. -->\r [1]: ./media/notification-hubs-python-backend-how-to/DetailedLoggingInfo.png\r [2]: ./media/notification-hubs-python-backend-how-to/BroadcastScenario.png\r [3]: ./media/notification-hubs-python-backend-how-to/SendWithOneTag.png\r [4]: ./media/notification-hubs-python-backend-how-to/SendWithMultipleTags.png\r [5]: ./media/notification-hubs-python-backend-how-to/TemplatedNotification.png\r \r <!---HONumber=Mooncake_0808_2016-->"}