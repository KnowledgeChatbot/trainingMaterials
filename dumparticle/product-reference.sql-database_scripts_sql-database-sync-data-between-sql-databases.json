{"Title":"PowerShell 示例 - 在多个 Azure SQL 数据库之间进行同步","Description":"用于在多个 Azure SQL 数据库之间进行同步的 Azure PowerShell 示例脚本","Content":"# <a name=\"use-powershell-to-sync-between-multiple-sql-databases\"></a>使用 PowerShell 在多个 SQL 数据库之间进行同步\r  \r 此 PowerShell 示例将数据同步配置为在多个 Azure SQL 数据库之间进行同步。\r \r 本示例需要 Azure PowerShell 模块 4.2 或更高版本。 运行 `Get-Module -ListAvailable AzureRM` 查找已安装的版本。 如果需要进行安装或升级，请参阅[安装 Azure PowerShell 模块](https://docs.microsoft.com/powershell/azure/install-azurerm-ps)。\r  \r 运行 `Login-AzureRmAccount`，创建与 Azure 的连接。\r \r 有关 SQL 数据同步的概述，请参阅[使用 Azure SQL 数据同步（预览版）跨多个云和本地数据库同步数据](../sql-database-sync-data.md)。\r \r ## <a name=\"sample-script\"></a>示例脚本\r \r ```powershell\r # prerequisites: \r # 1. Create an Azure Database from AdventureWorksLT sample database as hub database\r # 2. Create an Azure Database in the same region as sync database\r # 3. Create an Azure Database as member database\r # 4. Update the parameters below before running the sample\r #\r using namespace Microsoft.Azure.Commands.Sql.DataSync.Model\r using namespace System.Collections.Generic\r \r # Hub database info\r # Subscription id for hub database\r $SubscriptionId = \"subscription_guid\"\r # Resource group name for hub database\r $ResourceGroupName = \"ResourceGroup\"\r # Server name for hub database\r $ServerName = \"Server\"\r # Database name for hub database\r $DatabaseName = \"AdventureWorks\"\r \r # Sync database info\r # Resource group name for sync database\r $SyncDatabaseResourceGroupName = \"ResourceGroup\"\r # Server name for sync database\r $SyncDatabaseServerName = \"Server\"\r # Sync database name\r $SyncDatabaseName = \"SyncDatabase\"\r \r # Sync group info\r # Sync group name\r $SyncGroupName = \"SampleSyncGroup1\"\r # Conflict resolution Policy. Value can be HubWin or MemberWin\r $ConflictResolutionPolicy = \"HubWin\"\r # Sync interval in seconds. Value must be no less than 300\r $IntervalInSeconds = 300\r \r # Member database info\r # Member name\r $SyncMemberName = \"member\"\r # Member server name\r $MemberServerName = \"MemberServer\"\r # Member database name\r $MemberDatabaseName = \"SyncDatabase1\"\r # Member database type. Value can be AzureSqlDatabase or SqlServerDatabase\r $MemberDatabaseType = \"AzureSqlDatabase\"\r # Sync direction. Value can be Bidirectional, Onewaymembertohub, Onewayhubtomember\r $SyncDirection = \"Bidirectional\"\r \r # Other info\r # Temp file to save the sync schema\r $TempFile = $env:TEMP+\"\\syncSchema.json\"\r \r # List of included columns and tables in quoted name\r $IncludedColumnsAndTables =  \"[SalesLT].[Address].[AddressID]\",\r                              \"[SalesLT].[Address].[AddressLine2]\",\r                              \"[SalesLT].[Address].[rowguid]\",\r                              \"[SalesLT].[Address].[PostalCode]\",\r                              \"[SalesLT].[ProductDescription]\"\r $MetadataList = [System.Collections.ArrayList]::new($IncludedColumnsAndTables)\r \r \r add-azurermaccount \r select-azurermsubscription -SubscriptionId $SubscriptionId\r \r # Use this section if it is safe to show password in the script.\r # Otherwise, use the PromptForCredential\r # $User = \"username\"\r # $PWord = ConvertTo-SecureString -String \"Password\" -AsPlainText -Force\r # $Credential = New-Object -TypeName \"System.Management.Automation.PSCredential\" -ArgumentList $User, $PWord\r \r $Credential = $Host.ui.PromptForCredential(\"Need credential\", \r               \"Please enter your user name and password for server \"+$ServerName+\".database.chinacloudapi.cn\", \r               \"\", \r               \"\")\r \r # Create a new sync group\r Write-Host \"Creating Sync Group\"$SyncGroupName\r New-AzureRmSqlSyncGroup   -ResourceGroupName $ResourceGroupName `\r                             -ServerName $ServerName `\r                             -DatabaseName $DatabaseName `\r                             -Name $SyncGroupName `\r                             -SyncDatabaseName $SyncDatabaseName `\r                             -SyncDatabaseServerName $SyncDatabaseServerName `\r                             -SyncDatabaseResourceGroupName $SyncDatabaseResourceGroupName `\r                             -ConflictResolutionPolicy $ConflictResolutionPolicy `\r                             -DatabaseCredential $Credential\r \r # Use this section if it is safe to show password in the script.\r #$User = \"username\"\r #$Password = ConvertTo-SecureString -String \"password\" -AsPlainText -Force\r #$Credential = New-Object -TypeName \"System.Management.Automation.PSCredential\" -ArgumentList $User, $Password\r \r $Credential = $Host.ui.PromptForCredential(\"Need credential\", \r               \"Please enter your user name and password for server \"+$MemberServerName, \r               \"\", \r               \"\")\r \r # Add a new sync member\r Write-Host \"Adding member\"$SyncMemberName\" to the sync group\"\r New-AzureRmSqlSyncMember   -ResourceGroupName $ResourceGroupName `\r                             -ServerName $ServerName `\r                             -DatabaseName $DatabaseName `\r                             -SyncGroupName $SyncGroupName `\r                             -Name $SyncMemberName `\r                             -MemberDatabaseCredential $Credential `\r                             -MemberDatabaseName $MemberDatabaseName `\r                             -MemberServerName ($MemberServerName + \".database.chinacloudapi.cn\") `\r                             -MemberDatabaseType $MemberDatabaseType `\r                             -SyncDirection $SyncDirection\r \r # Refresh database schema from hub database\r # Specify the -SyncMemberName parameter if you want to refresh schema from the member database\r Write-Host \"Refreshing database schema from hub database\"\r $StartTime= Get-Date\r Update-AzureRmSqlSyncSchema   -ResourceGroupName $ResourceGroupName `\r                               -ServerName $ServerName `\r                               -DatabaseName $DatabaseName `\r                               -SyncGroupName $SyncGroupName\r \r \r #Waiting for successful refresh\r \r $StartTime=$StartTime.ToUniversalTime()\r $timer=0\r $timeout=90\r # Check the log and see if refresh has gone through\r Write-Host \"Check for successful refresh\"\r $IsSucceeded = $false\r While ($IsSucceeded -eq $false)\r {\r     Start-Sleep -s 10\r     $timer=$timer+10\r     $Details = Get-AzureRmSqlSyncSchema -SyncGroupName $SyncGroupName -ServerName $ServerName -DatabaseName $DatabaseName -ResourceGroupName $ResourceGroupName\r     if ($Details.LastUpdateTime -gt $StartTime)\r       {\r         Write-Host \"Refresh was successful\"\r         $IsSucceeded = $true\r       }\r     if ($timer -eq $timeout) \r       {\r               Write-Host \"Refresh timed out\"\r         break;\r       }\r }\r \r \r \r # Get the database schema \r Write-Host \"Adding tables and columns to the sync schema\"\r $databaseSchema = Get-AzureRmSqlSyncSchema   -ResourceGroupName $ResourceGroupName `\r                                              -ServerName $ServerName `\r                                              -DatabaseName $DatabaseName `\r                                              -SyncGroupName $SyncGroupName `\r \r $databaseSchema | ConvertTo-Json -depth 5 -Compress | Out-File \"c:\\tmp\\databaseSchema\"     \r $newSchema = [AzureSqlSyncGroupSchemaModel]::new()\r $newSchema.Tables = [List[AzureSqlSyncGroupSchemaTableModel]]::new();\r \r # Add columns and tables to the sync schema\r foreach ($tableSchema in $databaseSchema.Tables)\r {\r     $newTableSchema = [AzureSqlSyncGroupSchemaTableModel]::new()\r     $newTableSchema.QuotedName = $tableSchema.QuotedName\r     $newTableSchema.Columns = [List[AzureSqlSyncGroupSchemaColumnModel]]::new();\r     $addAllColumns = $false\r     if ($MetadataList.Contains($tableSchema.QuotedName))\r     {\r         if ($tableSchema.HasError)\r         {\r             $fullTableName = $tableSchema.QuotedName\r             Write-Host \"Can't add table $fullTableName to the sync schema\" -foregroundcolor \"Red\"\r             Write-Host $tableSchema.ErrorId -foregroundcolor \"Red\"\r             continue;\r         }\r         else\r         {\r             $addAllColumns = $true\r         }\r     }\r     foreach($columnSchema in $tableSchema.Columns)\r     {\r         $fullColumnName = $tableSchema.QuotedName + \".\" + $columnSchema.QuotedName\r         if ($addAllColumns -or $MetadataList.Contains($fullColumnName))\r         {\r             if ((-not $addAllColumns) -and $tableSchema.HasError)\r             {\r                 Write-Host \"Can't add column $fullColumnName to the sync schema\" -foregroundcolor \"Red\"\r                 Write-Host $tableSchema.ErrorId -foregroundcolor \"Red\"c            }\r             elseif ((-not $addAllColumns) -and $columnSchema.HasError)\r             {\r                 Write-Host \"Can't add column $fullColumnName to the sync schema\" -foregroundcolor \"Red\"\r                 Write-Host $columnSchema.ErrorId -foregroundcolor \"Red\"\r             }\r             else\r             {\r                 Write-Host \"Adding\"$fullColumnName\" to the sync schema\"\r                 $newColumnSchema = [AzureSqlSyncGroupSchemaColumnModel]::new()\r                 $newColumnSchema.QuotedName = $columnSchema.QuotedName\r                 $newColumnSchema.DataSize = $columnSchema.DataSize\r                 $newColumnSchema.DataType = $columnSchema.DataType\r                 $newTableSchema.Columns.Add($newColumnSchema)\r             }\r         }\r     }\r     if ($newTableSchema.Columns.Count -gt 0)\r     {\r         $newSchema.Tables.Add($newTableSchema)\r     }\r }\r \r # Convert sync schema to Json format\r $schemaString = $newSchema | ConvertTo-Json -depth 5 -Compress\r \r # workaround a powershell bug\r $schemaString = $schemaString.Replace('\"Tables\"', '\"tables\"').Replace('\"Columns\"', '\"columns\"').Replace('\"QuotedName\"', '\"quotedName\"').Replace('\"MasterSyncMemberName\"','\"masterSyncMemberName\"')\r \r # Save the sync schema to a temp file\r $schemaString | Out-File $TempFile\r \r # Update sync schema\r Write-Host \"Updating the sync schema\"\r Update-AzureRmSqlSyncGroup  -ResourceGroupName $ResourceGroupName `\r                             -ServerName $ServerName `\r                             -DatabaseName $DatabaseName `\r                             -Name $SyncGroupName `\r                             -Schema $TempFile\r \r $SyncStartTime = Get-Date\r \r # Trigger sync manually\r Write-Host \"Trigger sync manually\"\r Start-AzureRmSqlSyncGroupSync  -ResourceGroupName $ResourceGroupName `\r                                -ServerName $ServerName `\r                                -DatabaseName $DatabaseName `\r                                -SyncGroupName $SyncGroupName\r \r # Check the sync log and wait until the first sync succeeded\r Write-Host \"Check the sync log\"\r $IsSucceeded = $false\r For ($i = 0; ($i -lt 300) -and (-not $IsSucceeded); $i = $i + 10)\r {\r     Start-Sleep -s 10\r     $SyncLogEndTime = Get-Date\r     $SyncLogList = Get-AzureRmSqlSyncGroupLog  -ResourceGroupName $ResourceGroupName `\r                                            -ServerName $ServerName `\r                                            -DatabaseName $DatabaseName `\r                                            -SyncGroupName $SyncGroupName `\r                                            -StartTime $SyncLogStartTime.ToUniversalTime() `\r                                            -EndTime $SyncLogEndTime.ToUniversalTime()\r     if ($SynclogList.Length -gt 0)\r     {\r         foreach ($SyncLog in $SyncLogList)\r         {\r             if ($SyncLog.Details.Contains(\"Sync completed successfully\"))\r             {\r                 Write-Host $SyncLog.TimeStamp : $SyncLog.Details\r                 $IsSucceeded = $true\r             }\r         }\r     }\r }\r \r if ($IsSucceeded)\r {\r     # Enable scheduled sync\r     Write-Host \"Enable the scheduled sync with 300 seconds interval\"\r     Update-AzureRmSqlSyncGroup  -ResourceGroupName $ResourceGroupName `\r                                 -ServerName $ServerName `\r                                 -DatabaseName $DatabaseName `\r                                 -Name $SyncGroupName `\r                                 -IntervalInSeconds $IntervalInSeconds\r }\r else\r {\r     # Output all log if sync doesn't succeed in 300 seconds\r     $SyncLogEndTime = Get-Date\r     $SyncLogList = Get-AzureRmSqlSyncGroupLog  -ResourceGroupName $ResourceGroupName `\r                                            -ServerName $ServerName `\r                                            -DatabaseName $DatabaseName `\r                                            -SyncGroupName $SyncGroupName `\r                                            -StartTime $SyncLogStartTime.ToUniversalTime() `\r                                            -EndTime $SyncLogEndTime.ToUniversalTime()\r     if ($SynclogList.Length -gt 0)\r     {\r         foreach ($SyncLog in $SyncLogList)\r         {\r             Write-Host $SyncLog.TimeStamp : $SyncLog.Details\r         }\r     }\r }\r \r # Clean up deployment \r # Remove-AzureRmResourceGroup -ResourceGroupName $resourcegroupname\r # Remove-AzureRmResourceGroup -ResourceGroupName $SyncDatabaseResourceGroupName\r \r ```\r \r ## <a name=\"clean-up-deployment\"></a>清理部署\r \r 运行示例脚本后，可以运行以下命令，删除资源组以及与其关联的所有资源。\r \r ```powershell\r Remove-AzureRmResourceGroup -ResourceGroupName $ResourceGroupName\r Remove-AzureRmResourceGroup -ResourceGroupName $SyncDatabaseResourceGroupName\r ```\r \r ## <a name=\"script-explanation\"></a>脚本说明\r \r 此脚本使用以下命令。 表中的每条命令链接到特定于命令的文档。\r \r | 命令 | 说明 |\r |---|---|\r | [New-AzureRmSqlSyncAgent](https://docs.microsoft.com/powershell/module/azurerm.sql/New-AzureRmSqlSyncAgent) |  新建同步代理 |\r | [New-AzureRmSqlSyncAgentKey](https://docs.microsoft.com/powershell/module/azurerm.sql/New-AzureRmSqlSyncAgentKey) |  生成与同步代理关联的代理密钥 |\r | [Get-AzureRmSqlSyncAgentLinkedDatabase](https://docs.microsoft.com/powershell/module/azurerm.sql/Get-AzureRmSqlSyncAgentLinkedDatabase) |  获取有关同步代理的所有信息 |\r | [New-AzureRmSqlSyncMember](https://docs.microsoft.com/powershell/module/azurerm.sql/New-AzureRmSqlSyncMember) |  向同步组中添加新成员 |\r | [Update-AzureRmSqlSyncSchema](https://docs.microsoft.com/powershell/module/azurerm.sql/Update-AzureRmSqlSyncSchema) |  刷新数据库架构信息 |\r | [Get-AzureRmSqlSyncSchema](https://docs.microsoft.com/powershell/module/azurerm.sql/get-azurermsqlsyncschema) |  获取数据库架构信息 |\r | [Update-AzureRmSqlSyncGroup](https://docs.microsoft.com/powershell/module/azurerm.sql/Update-AzureRmSqlSyncGroup) |  更新同步组 |\r | [Start-AzureRmSqlSyncGroupSync](https://docs.microsoft.com/powershell/module/azurerm.sql/Start-AzureRmSqlSyncGroupSync) | 触发同步 |\r | [Get-AzureRmSqlSyncGroupLog](https://docs.microsoft.com/powershell/module/azurerm.sql/Get-AzureRmSqlSyncGroupLog) |  查看同步日志 |\r |||\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 有关 Azure PowerShell 的详细信息，请参阅 [Azure PowerShell 文档](https://docs.microsoft.com/powershell/azure/overview)。\r \r 可以在 [Azure SQL 数据库 PowerShell 脚本](../sql-database-powershell-samples.md)中找到更多 SQL 数据库 PowerShell 脚本示例。\r \r 有关 SQL 数据同步的详细信息，请参阅：\r \r -   [使用 Azure SQL 数据同步跨多个云和本地数据库同步数据](../sql-database-sync-data.md)\r -   [设置 Azure SQL 数据同步](../sql-database-get-started-sql-data-sync.md)\r -   [Azure SQL 数据同步最佳实践](../sql-database-best-practices-data-sync.md)\r -   [Azure SQL 数据同步问题疑难解答](../sql-database-troubleshoot-data-sync.md)\r \r -   演示如何配置 SQL 数据同步的完整 PowerShell 示例：\r     -   [使用 PowerShell 在 Azure SQL 数据库和 SQL Server 本地数据库之间进行同步](sql-database-sync-data-between-azure-onprem.md)\r \r -   [下载 SQL 数据同步 REST API 文档](https://github.com/Microsoft/sql-server-samples/raw/master/samples/features/sql-data-sync/Data_Sync_Preview_REST_API.pdf?raw=true)\r \r 有关 SQL 数据库的详细信息，请参阅：\r \r -   [SQL 数据库概述](../sql-database-technical-overview.md)\r -   [数据库生命周期管理](https://msdn.microsoft.com/library/jj907294.aspx)\r "}