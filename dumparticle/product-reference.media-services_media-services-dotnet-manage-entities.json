{"Title":"使用媒体服务 .NET SDK 管理资产和相关的实体","Description":"了解如何使用适用于 .NET 的媒体服务 SDK 管理资产和相关的实体。","Content":"# <a name=\"managing-assets-and-related-entities-with-media-services-net-sdk\"></a>使用媒体服务 .NET SDK 管理资产和相关的实体\r > [!div class=\"op_single_selector\"]\r > * [.NET](media-services-dotnet-manage-entities.md)\r > * [REST](media-services-rest-manage-entities.md)\r > \r > \r \r 本主题介绍如何使用 .NET 管理 Azure 媒体服务实体。 \r \r >[!NOTE]\r > 从 2017 年 4 月 1 日开始，用户帐户中任何超过 90 天的作业记录及其关联的任务记录都会被系统自动删除，即使记录总数低于最大配额。 例如，在 2017 年 4 月 1 日，用户帐户中 2016 年 12 月 31 日以前的任何作业记录都会被系统自动删除。 若需存档作业/任务信息，可使用本主题所述代码。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r \r ## <a name=\"get-an-asset-reference\"></a>获取资产引用\r 一个常见的任务是获取对媒体服务中某个现有资产的引用。 以下代码示例演示了如何根据资产 ID，从服务器上下文对象上的资产集合中获取资产引用。以下代码示例使用 Linq 查询来获取对现有 IAsset 对象的引用。\r \r     static IAsset GetAsset(string assetId)\r     {\r         // Use a LINQ Select query to get an asset.\r         var assetInstance =\r             from a in _context.Assets\r             where a.Id == assetId\r             select a;\r         // Reference the asset as an IAsset.\r         IAsset asset = assetInstance.FirstOrDefault();\r \r         return asset;\r     }\r \r ## <a name=\"list-all-assets\"></a>列出所有资产\r 随着存储空间中的资产数量的增长，这对列出资产很有用。 以下代码示例演示了如何循环访问服务器上下文对象上的资产集合。 对于每个资产，该代码示例还会将其一些属性值写入控制台。 例如，每个资产可以包含多个媒体文件。 代码示例会写出与每个资产关联的所有文件。\r \r     static void ListAssets()\r     {\r         string waitMessage = \"Building the list. This may take a few \"\r             + \"seconds to a few minutes depending on how many assets \"\r             + \"you have.\"\r             + Environment.NewLine + Environment.NewLine\r             + \"Please wait...\"\r             + Environment.NewLine;\r         Console.Write(waitMessage);\r \r         // Create a Stringbuilder to store the list that we build. \r         StringBuilder builder = new StringBuilder();\r \r         foreach (IAsset asset in _context.Assets)\r         {\r             // Display the collection of assets.\r             builder.AppendLine(\"\");\r             builder.AppendLine(\"******ASSET******\");\r             builder.AppendLine(\"Asset ID: \" + asset.Id);\r             builder.AppendLine(\"Name: \" + asset.Name);\r             builder.AppendLine(\"==============\");\r             builder.AppendLine(\"******ASSET FILES******\");\r \r             // Display the files associated with each asset. \r             foreach (IAssetFile fileItem in asset.AssetFiles)\r             {\r                 builder.AppendLine(\"Name: \" + fileItem.Name);\r                 builder.AppendLine(\"Size: \" + fileItem.ContentFileSize);\r                 builder.AppendLine(\"==============\");\r             }\r         }\r \r         // Display output in console.\r         Console.Write(builder.ToString());\r     }\r \r ## <a name=\"get-a-job-reference\"></a>获取作业引用\r \r 处理媒体服务代码中的任务时，通常需要根据 ID 获取对现有作业的引用。以下代码示例演示了如何获取对作业集合中某个 IJob 对象的引用。\r \r 开始长时运行的编码作业时，可能需要获取作业引用，并且需要检查线程上的作业状态。 在这种情况下，当方法从某个线程返回时，需要检索对作业的刷新引用。\r \r     static IJob GetJob(string jobId)\r     {\r         // Use a Linq select query to get an updated \r         // reference by Id. \r         var jobInstance =\r             from j in _context.Jobs\r             where j.Id == jobId\r             select j;\r         // Return the job reference as an Ijob. \r         IJob job = jobInstance.FirstOrDefault();\r \r         return job;\r     }\r \r ## <a name=\"list-jobs-and-assets\"></a>列出作业和资产\r 在媒体服务中列出资产及其关联作业是一项重要的相关任务。 以下代码示例演示了如何列出每个 IJob 对象，它会针对每个作业显示作业的相关属性、所有相关的任务、所有输入资产和所有输出资产。 本示例中的代码对各种其他任务也有所帮助。 例如，如果想要列出你先前运行的一个或多个编码作业的输出资产，本代码演示如何访问输出资产。 如果拥有对某个输出资产的引用，可以通过下载或提供 URL 的方式，将内容传递给其他用户或应用程序。 \r \r 有关传递资产选项的详细信息，请参阅[使用适用于 .NET 的媒体服务 SDK 传递资产](media-services-deliver-streaming-content.md)。\r \r     // List all jobs on the server, and for each job, also list \r     // all tasks, all input assets, all output assets.\r \r     static void ListJobsAndAssets()\r     {\r         string waitMessage = \"Building the list. This may take a few \"\r             + \"seconds to a few minutes depending on how many assets \"\r             + \"you have.\"\r             + Environment.NewLine + Environment.NewLine\r             + \"Please wait...\"\r             + Environment.NewLine;\r         Console.Write(waitMessage);\r \r         // Create a Stringbuilder to store the list that we build. \r         StringBuilder builder = new StringBuilder();\r \r         foreach (IJob job in _context.Jobs)\r         {\r             // Display the collection of jobs on the server.\r             builder.AppendLine(\"\");\r             builder.AppendLine(\"******JOB*******\");\r             builder.AppendLine(\"Job ID: \" + job.Id);\r             builder.AppendLine(\"Name: \" + job.Name);\r             builder.AppendLine(\"State: \" + job.State);\r             builder.AppendLine(\"Order: \" + job.Priority);\r             builder.AppendLine(\"==============\");\r \r             // For each job, display the associated tasks (a job  \r             // has one or more tasks). \r             builder.AppendLine(\"******TASKS*******\");\r             foreach (ITask task in job.Tasks)\r             {\r                 builder.AppendLine(\"Task Id: \" + task.Id);\r                 builder.AppendLine(\"Name: \" + task.Name);\r                 builder.AppendLine(\"Progress: \" + task.Progress);\r                 builder.AppendLine(\"Configuration: \" + task.Configuration);\r                 if (task.ErrorDetails != null)\r                 {\r                     builder.AppendLine(\"Error: \" + task.ErrorDetails);\r                 }\r                 builder.AppendLine(\"==============\");\r             }\r \r             // For each job, display the list of input media assets.\r             builder.AppendLine(\"******JOB INPUT MEDIA ASSETS*******\");\r             foreach (IAsset inputAsset in job.InputMediaAssets)\r             {\r \r                 if (inputAsset != null)\r                 {\r                     builder.AppendLine(\"Input Asset Id: \" + inputAsset.Id);\r                     builder.AppendLine(\"Name: \" + inputAsset.Name);\r                     builder.AppendLine(\"==============\");\r                 }\r             }\r \r             // For each job, display the list of output media assets.\r             builder.AppendLine(\"******JOB OUTPUT MEDIA ASSETS*******\");\r             foreach (IAsset theAsset in job.OutputMediaAssets)\r             {\r                 if (theAsset != null)\r                 {\r                     builder.AppendLine(\"Output Asset Id: \" + theAsset.Id);\r                     builder.AppendLine(\"Name: \" + theAsset.Name);\r                     builder.AppendLine(\"==============\");\r                 }\r             }\r \r         }\r \r         // Display output in console.\r         Console.Write(builder.ToString());\r     }\r \r ## <a name=\"list-all-access-policies\"></a>列出所有访问策略\r 在媒体服务中，可以对资产或其文件定义访问策略。 访问策略定义文件或资产的权限（访问类型以及持续时间）。 在媒体服务代码中，通常通过创建 IAccessPolicy 对象来定义访问策略对象，并将其与现有资产相关联。 然后创建一个 ILocator 对象，它允许用户提供对媒体服务中的资产的直接访问。 本文档系列随附的 Visual Studio 项目包含几个代码示例，这些代码示例演示如何创建和分配访问策略和定位符到资产。\r \r 以下代码示例演示如何列出服务器上所有的访问策略，并显示与每个策略关联的权限类型。 查看访问策略的另一个有用方法是列出服务器上的所有 ILocator 对象，并针对每个定位符，可以使用其 AccessPolicy 属性列出其关联的访问策略。\r \r     static void ListAllPolicies()\r     {\r         foreach (IAccessPolicy policy in _context.AccessPolicies)\r         {\r             Console.WriteLine(\"\");\r             Console.WriteLine(\"Name:  \" + policy.Name);\r             Console.WriteLine(\"ID:  \" + policy.Id);\r             Console.WriteLine(\"Permissions: \" + policy.Permissions);\r             Console.WriteLine(\"==============\");\r \r         }\r     }\r     \r ## <a name=\"limit-access-policies\"></a>限制访问策略数 \r \r >[!NOTE]\r > 不同 AMS 策略的策略限制为 1,000,000 个（例如，对于定位器策略或 ContentKeyAuthorizationPolicy）。 如果始终使用相同的日期/访问权限，则应使用相同的策略 ID，例如，用于要长期就地保留的定位符的策略（非上传策略）。 \r \r 例如，可以使用以下代码创建通用的策略组，该代码在应用程序中只运行一次。 可以将 ID 记录到日志文件中供以后使用：\r \r     double year = 365.25;\r     double week = 7;\r     IAccessPolicy policyYear = _context.AccessPolicies.Create(\"One Year\", TimeSpan.FromDays(year), AccessPermissions.Read);\r     IAccessPolicy policy100Year = _context.AccessPolicies.Create(\"Hundred Years\", TimeSpan.FromDays(year * 100), AccessPermissions.Read);\r     IAccessPolicy policyWeek = _context.AccessPolicies.Create(\"One Week\", TimeSpan.FromDays(week), AccessPermissions.Read);\r \r     Console.WriteLine(\"One year policy ID is: \" + policyYear.Id);\r     Console.WriteLine(\"100 year policy ID is: \" + policy100Year.Id);\r     Console.WriteLine(\"One week policy ID is: \" + policyWeek.Id);\r \r 然后即可在代码中使用现有的 ID，如下所示：\r \r     const string policy1YearId = \"nb:pid:UUID:2a4f0104-51a9-4078-ae26-c730f88d35cf\";\r \r     // Get the standard policy for 1 year read only\r     var tempPolicyId = from b in _context.AccessPolicies\r                        where b.Id == policy1YearId\r                        select b;\r     IAccessPolicy policy1Year = tempPolicyId.FirstOrDefault();\r \r     // Get the existing asset\r     var tempAsset = from a in _context.Assets\r                 where a.Id == assetID\r                 select a;\r     IAsset asset = tempAsset.SingleOrDefault();\r \r     ILocator originLocator = _context.Locators.CreateLocator(LocatorType.OnDemandOrigin, asset,\r         policy1Year,\r         DateTime.UtcNow.AddMinutes(-5));\r     Console.WriteLine(\"The locator base path is \" + originLocator.BaseUri.ToString());\r \r ## <a name=\"list-all-locators\"></a>列出所有定位符\r 定位符是一个 URL，提供访问资产的直接路径，以及定位符的关联访问策略所定义的对该资产的权限。 每个资产都有一个在其定位符属性上与其关联的 ILocator 对象集合。 服务器上下文还具有一个包含所有定位符的定位符集合。\r \r 以下代码示例列出了服务器上的所有定位符。 对于每个定位符，它会显示相关资产和访问策略的 ID。 它也显示权限的类型、到期日期和访问资产的完整路径。\r \r 请注意，访问资产的定位符路径仅仅是访问资产的基本 URL。 要创建用户或应用程序可以浏览到的单个文件的直接路径，你的代码必须将特定文件路径添加到定位符路径。 有关如何进行操作的详细信息，请参阅主题[使用适用于 .NET 的媒体服务 SDK 传递资产](media-services-deliver-streaming-content.md)。\r \r     static void ListAllLocators()\r     {\r         foreach (ILocator locator in _context.Locators)\r         {\r             Console.WriteLine(\"***********\");\r             Console.WriteLine(\"Locator Id: \" + locator.Id);\r             Console.WriteLine(\"Locator asset Id: \" + locator.AssetId);\r             Console.WriteLine(\"Locator access policy Id: \" + locator.AccessPolicyId);\r             Console.WriteLine(\"Access policy permissions: \" + locator.AccessPolicy.Permissions);\r             Console.WriteLine(\"Locator expiration: \" + locator.ExpirationDateTime);\r             // The locator path is the base or parent path (with included permissions) to access  \r             // the media content of an asset. To create a full URL to a specific media file, take \r             // the locator path and then append a file name and info as needed.  \r             Console.WriteLine(\"Locator base path: \" + locator.Path);\r             Console.WriteLine(\"\");\r         }\r     }\r \r ## <a name=\"enumerating-through-large-collections-of-entities\"></a>枚举大型实体集合\r 查询实体时，一次返回的实体数限制为 1000 个，因为公共 REST v2 将查询结果数限制为 1000 个。 枚举大型实体集合时，需要使用 Skip 和 Take。 \r \r 以下函数将循环访问所提供的媒体服务帐户中的所有作业。 媒体服务在作业集合中返回 1000 个作业。 该函数使用 Skip 和 Take 来确保枚举所有作业（如果你帐户中的作业超过 1000 个）。\r \r     static void ProcessJobs()\r     {\r         try\r         {\r \r             int skipSize = 0;\r             int batchSize = 1000;\r             int currentBatch = 0;\r \r             while (true)\r             {\r                 // Loop through all Jobs (1000 at a time) in the Media Services account\r                 IQueryable _jobsCollectionQuery = _context.Jobs.Skip(skipSize).Take(batchSize);\r                 foreach (IJob job in _jobsCollectionQuery)\r                 {\r                     currentBatch++;\r                     Console.WriteLine(\"Processing Job Id:\" + job.Id);\r                 }\r \r                 if (currentBatch == batchSize)\r                 {\r                     skipSize += batchSize;\r                     currentBatch = 0;\r                 }\r                 else\r                 {\r                     break;\r                 }\r             }\r         }\r         catch (Exception ex)\r         {\r             Console.WriteLine(ex.Message);\r         }\r     }\r \r ## <a name=\"delete-an-asset\"></a>删除资产\r 以下示例删除了一个资产。\r \r     static void DeleteAsset( IAsset asset)\r     {\r         // delete the asset\r         asset.Delete();\r \r         // Verify asset deletion\r         if (GetAsset(asset.Id) == null)\r             Console.WriteLine(\"Deleted the Asset\");\r \r     }\r \r ## <a name=\"delete-a-job\"></a>删除作业\r 若要删除某一作业，必须检查该作业的状态是否如“状态”属性中所示。 可以删除已完成或已取消的作业，但是必须先取消处于其他状态（如已排队、已计划、或处理中）的作业，才可以删除这些作业。\r \r 以下代码示例演示了一种删除作业的方法，通过检查作业状态，当作业状态为已完成或取消时，删除作业。 此代码取决于本主题的上一节，用于获取对作业的引用：获取作业引用。\r \r     static void DeleteJob(string jobId)\r     {\r         bool jobDeleted = false;\r \r         while (!jobDeleted)\r         {\r             // Get an updated job reference.  \r             IJob job = GetJob(jobId);\r \r             // Check and handle various possible job states. You can \r             // only delete a job whose state is Finished, Error, or Canceled.   \r             // You can cancel jobs that are Queued, Scheduled, or Processing,  \r             // and then delete after they are canceled.\r             switch (job.State)\r             {\r                 case JobState.Finished:\r                 case JobState.Canceled:\r                 case JobState.Error:\r                     // Job errors should already be logged by polling or event \r                     // handling methods such as CheckJobProgress or StateChanged.\r                     // You can also call job.DeleteAsync to do async deletes.\r                     job.Delete();\r                     Console.WriteLine(\"Job has been deleted.\");\r                     jobDeleted = true;\r                     break;\r                 case JobState.Canceling:\r                     Console.WriteLine(\"Job is cancelling and will be deleted \"\r                         + \"when finished.\");\r                     Console.WriteLine(\"Wait while job finishes canceling...\");\r                     Thread.Sleep(5000);\r                     break;\r                 case JobState.Queued:\r                 case JobState.Scheduled:\r                 case JobState.Processing:\r                     job.Cancel();\r                     Console.WriteLine(\"Job is scheduled or processing and will \"\r                         + \"be deleted.\");\r                     break;\r                 default:\r                     break;\r             }\r \r         }\r     }\r \r \r ## <a name=\"delete-an-access-policy\"></a>删除访问策略\r 以下代码示例演示如何基于策略 ID，获取对访问策略的引用，并删除该策略。\r \r     static void DeleteAccessPolicy(string existingPolicyId)\r     {\r         // To delete a specific access policy, get a reference to the policy.  \r         // based on the policy Id passed to the method.\r         var policyInstance =\r                 from p in _context.AccessPolicies\r                 where p.Id == existingPolicyId\r                 select p;\r         IAccessPolicy policy = policyInstance.FirstOrDefault();\r \r         policy.Delete();\r \r     }\r \r \r \r "}