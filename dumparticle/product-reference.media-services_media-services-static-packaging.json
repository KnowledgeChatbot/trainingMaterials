{"Title":"使用 Azure 媒体包装器完成静态打包任务","Description":"本主题说明了通过 Azure 媒体包装器完成的各种任务。","Content":"# <a name=\"using-azure-media-packager-to-accomplish-static-packaging-tasks\"></a>使用 Azure 媒体包装器完成静态打包任务\r \r >[!NOTE]\r >Microsoft Azure 媒体包装器和 Microsoft Azure 媒体加密器的使用期限已延长到 2017 年 3 月 1 日。 在此日期之前，这些处理器的功能将添加到 Media Encoder Standard (MES) 中。 客户将收到有关如何迁移工作流以将作业发送到 MES 的指示。 格式转换和加密功能也可通过动态打包和动态加密提供。\r \r ## <a name=\"overview\"></a>概述\r \r 要通过 Internet 传送数字视频，必须对媒体进行压缩。 数字视频文件相当大，可能因过大而无法通过 Internet 传送或者无法在客户的设备上正常显示。 编码是压缩视频和音频以便客户能够查看媒体的过程。 视频经过编码后即可放入不同的文件容器中。 将编码后的媒体放入容器这一过程称为打包。 以 MP4 文件为例，可以使用 Azure 媒体包装器将其转换为平滑流式处理或 HLS 内容。 \r \r 媒体服务支持动态和静态打包。 使用静态打包时，需要以客户要求的各种格式创建内容副本。 使用动态打包，只需要创建一个包含一组自适应比特率 MP4 或平滑流文件的资产。 然后，按需流式处理服务器会确保用户的用户以选定的协议按清单或分段请求中的指定格式接收流。 因此，用户只需以单一存储格式存储文件并为其付费，媒体服务服务就会基于客户端的请求构建并提供相应响应。\r \r > [!NOTE]\r > 建议使用[动态打包](media-services-dynamic-packaging-overview.md)。\r > \r > \r \r 但是，有的方案需要静态打包： \r \r * 验证使用外部编码器编码的自适应比特率 MP4（例如，使用第三方编码器）。\r \r 还可以使用静态打包执行下列任务。 但是，仍建议使用动态加密。\r \r * 通过静态加密使用 PlayReady 来保护平滑流和 MPEG DASH\r * 通过静态加密使用 AES-128 来保护 HLSv3\r * 通过静态加密使用 PlayReady 来保护 HLSv3\r \r ## <a name=\"validating-adaptive-bitrate-mp4s-encoded-with-external-encoders\"></a>验证使用外部编码器编码的自适应比特率 MP4\r 若要使用一组未使用媒体服务的编码器编码的自适应比特率（多比特率）MP4 文件，则应在进一步处理前验证这些文件。 媒体服务包装程序可以验证包含一组 MP4 文件的资产，并可检查该资产是否可以打包成平滑流或 HLS。 如果验证任务失败，则处理该任务的作业完成并显示错误。 用于定义验证任务的预设的 XML 可以在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/library/azure/hh973635.aspx) 主题中找到。\r \r > [!NOTE]\r > 请使用 Media Encoder Standard 来生成内容，或使用媒体服务包装程序来验证内容，以避免运行时问题。 如果按需流式处理服务器在运行时无法解析源文件，则你会收到 HTTP 1.1 错误“415 不支持的媒体类型”。 服务器多次未能解析源文件会影响按需流式处理服务器的性能，并且可能会减少服务于其他请求的可用带宽。 Azure 媒体服务在其按需流式处理服务上提供一个服务级别协议 (SLA)；但是，如果以上述方式滥用服务器，则无法遵循此 SLA。\r > \r > \r \r 本部分演示如何处理验证任务。 本部分还演示如何查看完成时出现 JobStatus.Error 的作业的状态和错误消息。\r \r 若要使用媒体服务包装程序验证 MP4 文件，必须创建自己的清单 (.ism) 文件，并将其与源文件一起上传到媒体服务帐户。 下面是 Media Encoder Standard 生成的 .ism 文件的一个示例。 文件名区分大小写。 另请确保 .ism 文件中的文本采用 UTF-8 编码。\r \r ```\r <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r <smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\">\r   <head>\r <!-- Tells the server that these input files are MP4s – specific to Dynamic Packaging -->\r     <meta name=\"formats\" content=\"mp4\" /> \r   </head>\r   <body>\r     <switch>\r       <video src=\"BigBuckBunny_1000.mp4\" />\r       <video src=\"BigBuckBunny_1500.mp4\" />\r       <video src=\"BigBuckBunny_2250.mp4\" />\r       <video src=\"BigBuckBunny_3400.mp4\" />\r       <video src=\"BigBuckBunny_400.mp4\" />\r       <video src=\"BigBuckBunny_650.mp4\" />\r       <audio src=\"BigBuckBunny_400.mp4\" />\r     </switch>\r   </body>\r </smil>\r ```\r \r 创建自适应比特率 MP4 集后，便可以利用动态打包功能。 动态打包允许通过指定的协议传送流，而不需要进一步地打包。 有关详细信息，请参阅[动态打包](media-services-dynamic-packaging-overview.md)。\r \r 以下代码示例使用 Azure 媒体服务 .NET SDK 扩展。  请确保更新代码，以指向输入 MP4 文件和 .ism 文件所在的文件夹。 并指向 MediaPackager_ValidateTask.xml 文件所在的位置。 此 XML 文件在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/library/azure/hh973635.aspx) 主题中定义。\r \r ```\r using Microsoft.WindowsAzure.MediaServices.Client;\r using System;\r using System.Collections.Generic;\r using System.Configuration;\r using System.IO;\r using System.Linq;\r using System.Text;\r using System.Threading;\r using System.Threading.Tasks;\r using System.Xml.Linq;\r \r namespace MediaServicesStaticPackaging\r {\r     class Program\r     {\r         private static readonly string _mediaFiles =\r             Path.GetFullPath(@\"../..\\Media\");\r \r         // The MultibitrateMP4Files folder should also\r         // contain the .ism manifest file.\r         private static readonly string _multibitrateMP4s =\r             Path.Combine(_mediaFiles, @\"MultibitrateMP4Files\");\r \r         // XML Configruation files path.\r         private static readonly string _configurationXMLFiles = @\"../..\\Configurations\";\r \r         private static MediaServicesCredentials _cachedCredentials = null;\r         private static CloudMediaContext _context = null;\r \r         // Media Services account information.\r         private static readonly string _mediaServicesAccountName =\r             ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\r         private static readonly string _mediaServicesAccountKey =\r             ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\r \r         static void Main(string[] args)\r         {\r             // Create and cache the Media Services credentials in a static class variable.\r             _cachedCredentials = new MediaServicesCredentials(\r                             _mediaServicesAccountName,\r                             _mediaServicesAccountKey);\r             // Use the cached credentials to create CloudMediaContext.\r             _context = new CloudMediaContext(_cachedCredentials);\r \r             // Ingest a set of multibitrate MP4s.\r             //\r             // Use the SDK extension method to create a new asset by \r             // uploading files from a local directory.\r             IAsset multibitrateMP4sAsset = _context.Assets.CreateFromFolder(\r                 _multibitrateMP4s,\r                 AssetCreationOptions.None,\r                 (af, p) =>\r                 {\r                     Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\r                 });\r \r             // Use Azure Media Packager to validate the files.\r             IAsset validatedMP4s =\r                 ValidateMultibitrateMP4s(multibitrateMP4sAsset);\r \r             // Publish the asset.\r             _context.Locators.Create(\r                 LocatorType.OnDemandOrigin,\r                 validatedMP4s,\r                 AccessPermissions.Read,\r                 TimeSpan.FromDays(30));\r \r                                  // Get the streaming URLs.\r             Console.WriteLine(\"Smooth Streaming URL:\");\r             Console.WriteLine(validatedMP4s.GetSmoothStreamingUri().ToString());\r             Console.WriteLine(\"MPEG DASH URL:\");\r             Console.WriteLine(validatedMP4s.GetMpegDashUri().ToString());\r             Console.WriteLine(\"HLS URL:\");\r             Console.WriteLine(validatedMP4s.GetHlsUri().ToString());\r         }\r \r         public static IAsset ValidateMultibitrateMP4s(IAsset multibitrateMP4sAsset)\r         {\r             // Set .ism as a primary file \r             // in a multibitrate MP4 set.\r             SetISMFileAsPrimary(multibitrateMP4sAsset);\r \r             // Create a new job.\r             IJob job = _context.Jobs.Create(\"MP4 validation and converstion to Smooth Stream job.\");\r \r             // Read the task configuration data into a string. \r             string configMp4Validation = File.ReadAllText(Path.Combine(\r                     _configurationXMLFiles,\r                     \"MediaPackager_ValidateTask.xml\"));\r \r             // Get the SDK extension method to  get a reference to the Azure Media Packager.\r             IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.WindowsAzureMediaPackager);\r \r             // Create a task with the conversion details, using the configuration data. \r             ITask task = job.Tasks.AddNew(\"Mp4 Validation Task\",\r                 processor,\r                 configMp4Validation,\r                 TaskOptions.None);\r \r             // Specify the input asset to be validated.\r             task.InputAssets.Add(multibitrateMP4sAsset);\r \r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is in the clear (unencrypted). \r             task.OutputAssets.AddNew(\"Validated output asset\",\r                     AssetCreationOptions.None);\r \r             // Submit the job and wait until it is completed.\r             job.Submit();\r             job = job.StartExecutionProgressTask(\r                 j =>\r                 {\r                     Console.WriteLine(\"Job state: {0}\", j.State);\r                     Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\r                 },\r                 CancellationToken.None).Result;\r \r             // If the validation task fails and job completes with JobState.Error,\r             // display the error message and throw an exception.\r             if (job.State == JobState.Error)\r             {\r                 Console.WriteLine(\"  Job ID: \" + job.Id);\r                 Console.WriteLine(\"  Name: \" + job.Name);\r                 Console.WriteLine(\"  State: \" + job.State);\r \r                 foreach (var jobTask in job.Tasks)\r                 {\r                     Console.WriteLine(\"  Task Id: \" + jobTask.Id);\r                     Console.WriteLine(\"  Name: \" + jobTask.Name);\r                     Console.WriteLine(\"  Progress: \" + jobTask.Progress);\r                     Console.WriteLine(\"  Configuration: \" + jobTask.Configuration);\r                     Console.WriteLine(\"  Running time: \" + jobTask.RunningDuration);\r                     if (jobTask.ErrorDetails != null)\r                     {\r                         foreach (var errordetail in jobTask.ErrorDetails)\r                         {\r \r                             Console.WriteLine(\"  Error Message:\" + errordetail.Message);\r                             Console.WriteLine(\"  Error Code:\" + errordetail.Code);\r                         }\r                     }\r                 }\r                 throw new Exception(\"The specified multi-bitrate MP4 set is not valid.\");\r             }\r \r             return job.OutputMediaAssets[0];\r         }\r \r         static void SetISMFileAsPrimary(IAsset asset)\r         {\r             var ismAssetFiles = asset.AssetFiles.ToList().\r                 Where(f => f.Name.EndsWith(\".ism\", StringComparison.OrdinalIgnoreCase)).ToArray();\r \r             // The following code assigns the first .ism file as the primary file in the asset.\r             // An asset should have one .ism file.  \r             ismAssetFiles.First().IsPrimary = true;\r             ismAssetFiles.First().Update();\r         }\r     }\r }\r ```\r \r ## <a name=\"using-static-encryption-to-protect-your-smooth-and-mpeg-dash-with-playready\"></a>通过静态加密使用 PlayReady 来保护平滑流和 MPEG DASH\r 若想要通过 PlayReady 来保护内容，则可选择使用[动态加密](media-services-protect-with-drm.md)（推荐选项）或静态加密（如本部分所述）。\r \r 本部分的示例将夹层文件（在本例中为 MP4）编码为自适应比特率 MP4 文件。 然后，它将 MP4 打包为平滑流，并使用 PlayReady 对平滑流进行加密。 因此，能对平滑流或 MPEG DASH 进行流式处理。\r \r 媒体服务现在提供有用于传送 Microsoft PlayReady 许可证的服务。 本文中的示例显示如何配置媒体服务 PlayReady 许可证传送服务（请参阅以下代码中定义的 ConfigureLicenseDeliveryService 方法）。 有关媒体服务 PlayReady 许可证传送服务的详细信息，请参阅[使用 PlayReady 动态加密和许可证传送服务](media-services-protect-with-drm.md)。\r \r > [!NOTE]\r > 若要传送使用 PlayReady 加密的 MPEG DASH，请确保通过将 useSencBox 和 adjustSubSamples 属性（在 [Azure 媒体加密器的任务预设](http://msdn.microsoft.com/library/azure/hh973610.aspx)主题中说明）设为 true 来使用 CENC 选项。  \r > \r > \r \r 确保更新以下代码，以便指向输入 MP4 文件所在的文件夹，\r \r 并指向 MediaPackager_MP4ToSmooth.xml 和 MediaEncryptor_PlayReadyProtection.xml 文件所在的位置。 MediaPackager_MP4ToSmooth.xml 在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/library/azure/hh973635.aspx)中定义，MediaEncryptor_PlayReadyProtection.xml 在 [Azure 媒体加密器的任务预设](http://msdn.microsoft.com/library/azure/hh973610.aspx)主题中定义。 \r \r 该示例定义的 UpdatePlayReadyConfigurationXMLFile 方法可用于动态更新 MediaEncryptor_PlayReadyProtection.xml 文件。 如果有可用的密钥种子，则可以使用 CommonEncryption.GeneratePlayReadyContentKey 方法基于 keySeedValue 和 keyId 值生成内容密钥。\r \r ```\r using System;\r using System.Collections.Generic;\r using System.Configuration;\r using System.IO;\r using System.Linq;\r using System.Text;\r using System.Threading;\r using System.Threading.Tasks;\r using Microsoft.WindowsAzure.MediaServices.Client;\r using System.Xml.Linq;\r using Microsoft.WindowsAzure.MediaServices.Client.ContentKeyAuthorization;\r using Microsoft.WindowsAzure.MediaServices.Client.DynamicEncryption;\r \r namespace PlayReadyStaticEncryptAndKeyDeliverySvc\r {\r     class Program\r     {\r \r         private static readonly string _mediaFiles =\r             Path.GetFullPath(@\"../..\\Media\");\r \r         private static readonly string _singleMP4File =\r             Path.Combine(_mediaFiles, @\"BigBuckBunny.mp4\");\r \r         // XML Configruation files path.\r         private static readonly string _configurationXMLFiles = @\"../..\\Configurations\\\";\r \r         private static MediaServicesCredentials _cachedCredentials = null;\r         private static CloudMediaContext _context = null;\r \r         // Media Services account information.\r         private static readonly string _mediaServicesAccountName =\r             ConfigurationManager.AppSettings[\"MediaServiceAccountName\"];\r         private static readonly string _mediaServicesAccountKey =\r             ConfigurationManager.AppSettings[\"MediaServiceAccountKey\"];\r \r         static void Main(string[] args)\r         {\r             // Create and cache the Media Services credentials in a static class variable.\r             _cachedCredentials = new MediaServicesCredentials(\r                             _mediaServicesAccountName,\r                             _mediaServicesAccountKey);\r             // Use the cached credentials to create CloudMediaContext.\r             _context = new CloudMediaContext(_cachedCredentials);\r \r             // Encoding and encrypting assets //////////////////////\r             // Load a single MP4 file.\r             IAsset asset = IngestSingleMP4File(_singleMP4File, AssetCreationOptions.None);\r \r             // Encode an MP4 file to a set of multibitrate MP4s.\r             // Then, package a set of MP4s to clear Smooth Streaming.\r             IAsset clearSmoothStreamAsset =\r                 ConvertMP4ToMultibitrateMP4sToSmoothStreaming(asset);\r \r             // Create a common encryption content key that is used \r             // a) to set the key values in the MediaEncryptor_PlayReadyProtection.xml file\r             //    that is used for encryption.\r             // b) to configure the license delivery service and \r             //\r             Guid keyId;\r             byte[] contentKey;\r \r             IContentKey key = CreateCommonEncryptionKey(out keyId, out contentKey);\r \r             // The content key authorization policy must be configured by you \r             // and met by the client in order for the PlayReady license\r             // to be delivered to the client. \r             // In this example the Media Services PlayReady license delivery service is used.\r             ConfigureLicenseDeliveryService(key);\r \r             // Get the Media Services PlayReady license delivery URL.\r             // This URL will be assigned to the licenseAcquisitionUrl property \r             // of the MediaEncryptor_PlayReadyProtection.xml file.\r             Uri acquisitionUrl = key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense);\r \r             // Update the MediaEncryptor_PlayReadyProtection.xml file with the key and URL info.\r             UpdatePlayReadyConfigurationXMLFile(keyId, contentKey, acquisitionUrl);\r \r             // Encrypt your clear Smooth Streaming to Smooth Streaming with PlayReady.\r             IAsset outputAsset = CreateSmoothStreamEncryptedWithPlayReady(clearSmoothStreamAsset);\r \r             // You can use the http://smf.cloudapp.net/healthmonitor player \r             // to test the smoothStreamURL URL.\r             string smoothStreamURL = outputAsset.GetSmoothStreamingUri().ToString();\r             Console.WriteLine(\"Smooth Streaming URL:\");\r             Console.WriteLine(smoothStreamURL);\r \r             // You can use the http://dashif.org/reference/players/javascript/ player \r             // to test the dashURL URL.\r             string dashURL = outputAsset.GetMpegDashUri().ToString();\r             Console.WriteLine(\"MPEG DASH URL:\");\r             Console.WriteLine(dashURL);\r         }\r \r         /// <summary>\r         /// Creates a job with 2 tasks: \r         /// 1 task - encodes a single MP4 to multibitrate MP4s,\r         /// 2 task - packages MP4s to Smooth Streaming.\r         /// </summary>\r         /// <returns>The output asset.</returns>\r         public static IAsset ConvertMP4ToMultibitrateMP4sToSmoothStreaming(IAsset asset)\r         {\r             // Create a new job.\r             IJob job = _context.Jobs.Create(\"Convert MP4 to Smooth Streaming.\");\r \r             // Add task 1 - Encode single MP4 into multibitrate MP4s.\r             IAsset MP4sAsset = EncodeMP4IntoMultibitrateMP4sTask(job, asset);\r             // Add task 2 - Package a multibitrate MP4 set to Clear Smooth Stream.\r             IAsset packagedAsset = PackageMP4ToSmoothStreamingTask(job, MP4sAsset);\r \r             // Submit the job and wait until it is completed.\r             job.Submit();\r             job = job.StartExecutionProgressTask(\r                 j =>\r                 {\r                     Console.WriteLine(\"Job state: {0}\", j.State);\r                     Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\r                 },\r                 CancellationToken.None).Result;\r \r             // Get the output asset that contains the Smooth Streaming asset.\r             return job.OutputMediaAssets[1];\r         }\r \r         /// <summary>\r         /// Encrypts Smooth Stream with PlayReady.\r         /// Then creates a Smooth Streaming Url.\r         /// </summary>\r         /// <param name=\"clearSmoothAsset\">Asset that contains clear Smooth Streaming.</param>\r         /// <returns>The output asset.</returns>\r         public static IAsset CreateSmoothStreamEncryptedWithPlayReady(IAsset clearSmoothStreamAsset)\r         {\r             // Create a job.\r             IJob job = _context.Jobs.Create(\"Encrypt to PlayReady Smooth Streaming.\");\r \r             // Add task 1 - Encrypt Smooth Streaming with PlayReady \r             IAsset encryptedSmoothAsset =\r                 EncryptSmoothStreamWithPlayReadyTask(job, clearSmoothStreamAsset);\r \r             // Submit the job and wait until it is completed.\r             job.Submit();\r             job = job.StartExecutionProgressTask(\r                 j =>\r                 {\r                     Console.WriteLine(\"Job state: {0}\", j.State);\r                     Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\r                 },\r                 CancellationToken.None).Result;\r \r             // The OutputMediaAssets[0] contains the desired asset.\r             _context.Locators.Create(\r                 LocatorType.OnDemandOrigin,\r                 job.OutputMediaAssets[0],\r                 AccessPermissions.Read,\r                 TimeSpan.FromDays(30));\r \r             return job.OutputMediaAssets[0];\r         }\r \r         /// <summary>\r         /// Create a common encryption content key that is used \r         /// to set the key values in the MediaEncryptor_PlayReadyProtection.xml file\r         /// that is used for encryption.\r         /// </summary>\r         /// <param name=\"keyId\"></param>\r         /// <param name=\"contentKey\"></param>\r         /// <returns></returns>\r         public static IContentKey CreateCommonEncryptionKey(out Guid keyId, out byte[] contentKey)\r         {\r             keyId = Guid.NewGuid();\r             contentKey = GetRandomBuffer(16);\r \r             IContentKey key = _context.ContentKeys.Create(\r                                     keyId,\r                                     contentKey,\r                                     \"ContentKey\",\r                                     ContentKeyType.CommonEncryption);\r \r             return key;\r         }\r \r         /// <summary>\r         /// Update your configuration .xml file dynamically.\r         /// </summary>\r         public static void UpdatePlayReadyConfigurationXMLFile(Guid keyId, byte[] keyValue, Uri licenseAcquisitionUrl)\r         {\r             string xmlFileName = Path.Combine(_configurationXMLFiles,\r                                         @\"MediaEncryptor_PlayReadyProtection.xml\");\r \r             XNamespace xmlns = \"http://schemas.microsoft.com/iis/media/v4/TM/TaskDefinition#\";\r \r             // Prepare the encryption task template\r             XDocument doc = XDocument.Load(xmlFileName);\r \r             var licenseAcquisitionUrlEl = doc\r                     .Descendants(xmlns + \"property\")\r                     .Where(p => p.Attribute(\"name\").Value == \"licenseAcquisitionUrl\")\r                     .FirstOrDefault();\r             var contentKeyEl = doc\r                     .Descendants(xmlns + \"property\")\r                     .Where(p => p.Attribute(\"name\").Value == \"contentKey\")\r                     .FirstOrDefault();\r             var keyIdEl = doc\r                     .Descendants(xmlns + \"property\")\r                     .Where(p => p.Attribute(\"name\").Value == \"keyId\")\r                     .FirstOrDefault();\r \r             // Update the \"value\" property.\r             if (licenseAcquisitionUrlEl != null)\r                 licenseAcquisitionUrlEl.Attribute(\"value\").SetValue(licenseAcquisitionUrl.ToString());\r \r             if (contentKeyEl != null)\r                 contentKeyEl.Attribute(\"value\").SetValue(Convert.ToBase64String(keyValue));\r \r             if (keyIdEl != null)\r                 keyIdEl.Attribute(\"value\").SetValue(keyId);\r \r             doc.Save(xmlFileName);\r         }\r \r         /// <summary>\r         /// Uploads a single file.\r         /// </summary>\r         /// <param name=\"fileDir\">The location of the files.</param>\r         /// <param name=\"assetCreationOptions\">\r         ///  You can specify the following encryption options for the AssetCreationOptions.\r         ///      None:  no encryption.  \r         ///      StorageEncrypted: storage encryption. Encrypts a clear input file \r         ///        before it is uploaded to Azure storage. \r         ///      CommonEncryptionProtected: for Common Encryption Protected (CENC) files. \r         ///        For example, a set of files that are already PlayReady encrypted. \r         ///      EnvelopeEncryptionProtected: for HLS with AES encryption files.\r         ///        NOTE: The files must have been encoded and encrypted by Transform Manager. \r         ///     </param>\r         /// <returns>Returns an asset that contains a single file.</returns>\r         /// </summary>\r         /// <returns></returns>\r         private static IAsset IngestSingleMP4File(string fileDir, AssetCreationOptions assetCreationOptions)\r         {\r             // Use the SDK extension method to create a new asset by \r             // uploading a mezzanine file from a local path.\r             IAsset asset = _context.Assets.CreateFromFile(\r                 fileDir,\r                 assetCreationOptions,\r                 (af, p) =>\r                 {\r                     Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\r                 });\r \r             return asset;\r         }\r \r         /// <summary>\r         /// Creates a task to encode to Adaptive Bitrate. \r         /// Adds the new task to a job.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The input asset.</param>\r         /// <returns>The output asset.</returns>\r         private static IAsset EncodeMP4IntoMultibitrateMP4sTask(IJob job, IAsset asset)\r         {\r             // Get the SDK extension method to  get a reference to the Media Encoder Standard.\r             IMediaProcessor encoder = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.MediaEncoderStandard);\r \r             ITask adpativeBitrateTask = job.Tasks.AddNew(\"MP4 to Adaptive Bitrate Task\",\r                encoder,\r                \"H264 Multiple Bitrate 720p\",\r                TaskOptions.None);\r \r             // Specify the input Asset\r             adpativeBitrateTask.InputAssets.Add(asset);\r \r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is in the clear (unencrypted).\r             IAsset abrAsset = adpativeBitrateTask.OutputAssets.AddNew(\"Multibitrate MP4s\",\r                                     AssetCreationOptions.None);\r \r             return abrAsset;\r         }\r \r         /// <summary>\r         /// Creates a task to convert the MP4 file(s) to a Smooth Streaming asset.\r         /// Adds the new task to a job.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The input asset.</param>\r         /// <returns>The output asset.</returns>\r         private static IAsset PackageMP4ToSmoothStreamingTask(IJob job, IAsset asset)\r         {\r             // Get the SDK extension method to  get a reference to the Azure Media Packager.\r             IMediaProcessor packager = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.WindowsAzureMediaPackager);\r \r             // Azure Media Packager does not accept string presets, so load xml configuration\r             string smoothConfig = File.ReadAllText(Path.Combine(\r                         _configurationXMLFiles,\r                         \"MediaPackager_MP4toSmooth.xml\"));\r \r             // Create a new Task to convert adaptive bitrate to Smooth Streaming.\r             ITask smoothStreamingTask = job.Tasks.AddNew(\"MP4 to Smooth Task\",\r                packager,\r                smoothConfig,\r                TaskOptions.None);\r \r             // Specify the input Asset, which is the output Asset from the first task\r             smoothStreamingTask.InputAssets.Add(asset);\r \r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is in the clear (unencrypted).\r             IAsset smoothOutputAsset =\r                 smoothStreamingTask.OutputAssets.AddNew(\"Clear Smooth Stream\",\r                     AssetCreationOptions.None);\r \r             return smoothOutputAsset;\r         }\r \r         /// <summary>\r         /// Creates a task to encrypt Smooth Streaming with PlayReady.\r         /// Note: To deliver DASH, make sure to set the useSencBox and adjustSubSamples \r         /// configuration properties to true. \r         /// In this example, MediaEncryptor_PlayReadyProtection.xml contains configuration.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The input asset.</param>\r         /// <returns>The output asset.</returns>\r         private static IAsset EncryptSmoothStreamWithPlayReadyTask(IJob job, IAsset asset)\r         {\r             // Get the SDK extension method to  get a reference to the Azure Media Encryptor.\r             IMediaProcessor playreadyProcessor = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.WindowsAzureMediaEncryptor);\r \r             // Read the configuration XML.\r             //\r             // Note that the configuration defined in MediaEncryptor_PlayReadyProtection.xml\r             // is using keySeedValue. It is recommended that you do this only for testing \r             // and not in production. For more information, see \r             // https://www.azure.cn/documentation/articles/media-services-static-packaging/.\r             //\r             string configPlayReady = File.ReadAllText(Path.Combine(_configurationXMLFiles,\r                                         @\"MediaEncryptor_PlayReadyProtection.xml\"));\r \r             ITask playreadyTask = job.Tasks.AddNew(\"My PlayReady Task\",\r                playreadyProcessor,\r                configPlayReady,\r                TaskOptions.ProtectedConfiguration);\r \r             playreadyTask.InputAssets.Add(asset);\r \r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.CommonEncryptionProtected.\r             IAsset playreadyAsset = playreadyTask.OutputAssets.AddNew(\r                                             \"PlayReady Smooth Streaming\",\r                                             AssetCreationOptions.CommonEncryptionProtected);\r \r             return playreadyAsset;\r         }\r \r         /// <summary>\r         /// Configures authorization policy for the content key. \r         /// </summary>\r         /// <param name=\"contentKey\">The content key.</param>\r         static public void ConfigureLicenseDeliveryService(IContentKey contentKey)\r         {\r             // Create ContentKeyAuthorizationPolicy with Open restrictions \r             // and create authorization policy          \r \r             List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\r             {\r                 new ContentKeyAuthorizationPolicyRestriction \r                 { \r                     Name = \"Open\", \r                     KeyRestrictionType = (int)ContentKeyRestrictionType.Open, \r                     Requirements = null\r                 }\r             };\r \r             // Configure PlayReady license template.\r             string newLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r \r             IContentKeyAuthorizationPolicyOption policyOption =\r                 _context.ContentKeyAuthorizationPolicyOptions.Create(\"\",\r                     ContentKeyDeliveryType.PlayReadyLicense,\r                         restrictions, newLicenseTemplate);\r \r             IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r                         ContentKeyAuthorizationPolicies.\r                         CreateAsync(\"Deliver Common Content Key with no restrictions\").\r                         Result;\r \r             contentKeyAuthorizationPolicy.Options.Add(policyOption);\r \r             // Associate the content key authorization policy with the content key.\r             contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r             contentKey = contentKey.UpdateAsync().Result;\r         }\r \r         static private string ConfigurePlayReadyLicenseTemplate()\r         {\r             // The following code configures PlayReady License Template using .NET classes\r             // and returns the XML string.\r \r             PlayReadyLicenseResponseTemplate responseTemplate = new PlayReadyLicenseResponseTemplate();\r             PlayReadyLicenseTemplate licenseTemplate = new PlayReadyLicenseTemplate();\r \r             responseTemplate.LicenseTemplates.Add(licenseTemplate);\r \r             return MediaServicesLicenseTemplateSerializer.Serialize(responseTemplate);\r         }\r \r         static private byte[] GetRandomBuffer(int length)\r         {\r             var returnValue = new byte[length];\r \r             using (var rng =\r                 new System.Security.Cryptography.RNGCryptoServiceProvider())\r             {\r                 rng.GetBytes(returnValue);\r             }\r \r             return returnValue;\r         }\r     }\r }\r ```\r \r ## <a name=\"using-static-encryption-to-protect-hlsv3-with-aes-128\"></a>通过静态加密使用 AES-128 来保护 HLSv3\r 如果你要使用 AES-128 加密 HLS，可以选择使用动态加密（推荐选项）或静态加密（如本部分所述）。 如果决定使用动态加密，请参阅[使用 AES-128 动态加密和密钥传送服务](media-services-protect-with-aes128.md)。\r \r > [!NOTE]\r > 要将内容转换为 HLS，必须先将内容转换/编码为平滑流。\r > 此外，对于使用 AES 加密的 HLS，请确保在 MediaPackager_SmoothToHLS.xml 文件中设置以下属性：将加密属性设置为 true，将密钥值和 keyuri 值设置为指向身份验证\\授权服务器。\r > 媒体服务将创建密钥文件，并将其放置在资产容器中。 应该将 /asset-containerguid/*.key 文件复制到服务器（或创建自己的密钥文件），然后从资产容器中删除 *.key 文件。\r > \r > \r \r 本部分的示例将夹层文件（在本例中为 MP4）编码为多比特率 MP4 文件，然后将 MP4 打包为平滑流式处理。 然后，它将平滑流式处理打包成使用高级加密标准 (AES) 128 位流加密法加密的 HTTP Live Streamin (HLS)。 确保更新以下代码，以便指向输入 MP4 文件所在的文件夹， 并指向 MediaPackager_MP4ToSmooth.xml 和 MediaPackager_SmoothToHLS.xml 配置文件所在的位置。 可以在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/library/azure/hh973635.aspx) 主题中找到这些文件的定义。\r \r ```\r using System;\r using System.Collections.Generic;\r using System.Configuration;\r using System.IO;\r using System.Linq;\r using System.Text;\r using System.Threading;\r using System.Threading.Tasks;\r using Microsoft.WindowsAzure.MediaServices.Client;\r using System.Xml.Linq;\r \r namespace MediaServicesContentProtection\r {\r     class Program\r     {\r         // Paths to support files (within the above base path). You can use \r         // the provided sample media files from the \"SupportFiles\" folder, or \r         // provide paths to your own media files below to run these samples.\r \r         private static readonly string _mediaFiles =\r             Path.GetFullPath(@\"../..\\Media\");\r \r         private static readonly string _singleMP4File =\r             Path.Combine(_mediaFiles, @\"SingleMP4\\BigBuckBunny.mp4\");\r \r         // XML Configruation files path.\r         private static readonly string _configurationXMLFiles = @\"../..\\Configurations\\\";\r \r         private static MediaServicesCredentials _cachedCredentials = null;\r         private static CloudMediaContext _context = null;\r \r         // Media Services account information.\r         private static readonly string _mediaServicesAccountName = \r             ConfigurationManager.AppSettings[\"MediaServiceAccountName\"];\r         private static readonly string _mediaServicesAccountKey = \r             ConfigurationManager.AppSettings[\"MediaServiceAccountKey\"];\r \r         static void Main(string[] args)\r         {\r             // Create and cache the Media Services credentials in a static class variable.\r             _cachedCredentials = new MediaServicesCredentials(\r                             _mediaServicesAccountName, \r                             _mediaServicesAccountKey);\r             // Use the cached credentials to create CloudMediaContext.\r             _context = new CloudMediaContext(_cachedCredentials);\r \r             // Encoding and encrypting assets //////////////////////\r \r             // Load an MP4 file.\r             IAsset asset = IngestSingleMP4File(_singleMP4File, AssetCreationOptions.None);\r \r             // Encode an MP4 file to a set of multibitrate MP4s.\r             // Then, package a set of MP4s to clear Smooth Streaming.\r             IAsset clearSmoothStreamAsset = ConvertMP4ToMultibitrateMP4sToSmoothStreaming(asset);\r \r             // Create HLS encrypted with AES.\r             IAsset HLSEncryptedWithAESAsset = CreateHLSEncryptedWithAES(clearSmoothStreamAsset);\r \r             // You can use the following player to test the HLS with AES stream.\r             // http://apps.microsoft.com/windows/app/3ivx-hls-player/f79ce7d0-2993-4658-bc4e-83dc182a0614 \r             string hlsWithAESURL = HLSEncryptedWithAESAsset.GetHlsUri().ToString();\r             Console.WriteLine(\"HLS with AES URL:\");\r             Console.WriteLine(hlsWithAESURL);\r         }\r \r         /// <summary>\r         /// Creates a job with 2 tasks: \r         /// 1 task - encodes a single MP4 to multibitrate MP4s,\r         /// 2 task - packages MP4s to Smooth Streaming.\r         /// </summary>\r         /// <returns>The output asset.</returns>\r         public static IAsset ConvertMP4ToMultibitrateMP4sToSmoothStreaming(IAsset asset)\r         {\r             // Create a new job.\r             IJob job = _context.Jobs.Create(\"Convert MP4 to Smooth Streaming.\");\r \r             // Add task 1 - Encode single MP4 into multibitrate MP4s.\r             IAsset MP4sAsset = EncodeSingleMP4IntoMultibitrateMP4sTask(job, asset);\r             // Add task 2 - Package a multibitrate MP4 set to Clear Smooth Streaming.\r             IAsset packagedAsset = PackageMP4ToSmoothStreamingTask(job, MP4sAsset);\r \r             // Submit the job and wait until it is completed.\r             job.Submit();\r             job = job.StartExecutionProgressTask(\r                 j =>\r                 {\r                     Console.WriteLine(\"Job state: {0}\", j.State);\r                     Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\r                 },\r                 CancellationToken.None).Result;\r \r             // Get the output asset that contains Smooth Streaming.\r             return job.OutputMediaAssets[1];\r         }\r \r         /// <summary>\r         /// Encrypts an HLS with AES-128.\r         /// </summary>\r         /// <param name=\"clearSmoothAsset\">Asset that contains clear Smooth Streaming.</param>\r         /// <returns>The output asset.</returns>\r         public static IAsset CreateHLSEncryptedWithAES(IAsset clearSmoothStreamAsset)\r         {\r             IJob job = _context.Jobs.Create(\"Encrypt to HLS with AES.\");\r \r             // Add task 1 - Package clear Smooth Streaming to HLS with AES.\r             PackageSmoothStreamToHLS(job, clearSmoothStreamAsset);\r \r             // Submit the job and wait until it is completed.\r             job.Submit();\r             job = job.StartExecutionProgressTask(\r                 j =>\r                 {\r                     Console.WriteLine(\"Job state: {0}\", j.State);\r                     Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\r                 },\r                 CancellationToken.None).Result;\r \r             // The OutputMediaAssets[0] contains the desired asset.\r             _context.Locators.Create(\r                 LocatorType.OnDemandOrigin,\r                 job.OutputMediaAssets[0],\r                 AccessPermissions.Read,\r                 TimeSpan.FromDays(30));\r \r             return job.OutputMediaAssets[0];\r         }\r \r         /// <summary>\r         /// Uploads a single file.\r         /// </summary>\r         /// <param name=\"fileDir\">The location of the files.</param>\r         /// <param name=\"assetCreationOptions\">\r         ///  You can specify the following encryption options for the AssetCreationOptions.\r         ///      None:  no encryption.  \r         ///      StorageEncrypted: storage encryption. Encrypts a clear input file \r         ///        before it is uploaded to Azure storage. \r         ///      CommonEncryptionProtected: for Common Encryption Protected (CENC) files. \r         ///        For example, a set of files that are already PlayReady encrypted. \r         ///      EnvelopeEncryptionProtected: for HLS with AES encryption files.\r         ///        NOTE: The files must have been encoded and encrypted by Transform Manager. \r         ///     </param>\r         /// <returns>Returns an asset that contains a single file.</returns>\r         /// </summary>\r         /// <returns></returns>\r         private static IAsset IngestSingleMP4File(string fileDir, AssetCreationOptions assetCreationOptions)\r         {\r             // Use the SDK extension method to create a new asset by \r             // uploading a mezzanine file from a local path.\r             IAsset asset = _context.Assets.CreateFromFile(\r                 fileDir,\r                 assetCreationOptions,\r                 (af, p) =>\r                 {\r                     Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\r                 });\r \r             return asset;\r         }\r \r         /// <summary>\r         /// Creates a task to encode to Adaptive Bitrate. \r         /// Adds the new task to a job.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The input asset.</param>\r         /// <returns>The output asset.</returns>\r         private static IAsset EncodeSingleMP4IntoMultibitrateMP4sTask(IJob job, IAsset asset)\r         {\r             // Get the SDK extension method to  get a reference to the Media Encoder Standard.\r             IMediaProcessor encoder = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.MediaEncoderStandard);\r \r             ITask adpativeBitrateTask = job.Tasks.AddNew(\"MP4 to Adaptive Bitrate Task\",\r                encoder,\r                \"H264 Multiple Bitrate 720p\",\r                TaskOptions.None);\r \r             // Specify the input Asset\r             adpativeBitrateTask.InputAssets.Add(asset);\r \r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is in the clear (unencrypted).\r             IAsset abrAsset = adpativeBitrateTask.OutputAssets.AddNew(\"Multibitrate MP4s\", \r                                     AssetCreationOptions.None);\r \r             return abrAsset;\r         }\r \r         /// <summary>\r         /// Creates a task to convert the MP4 file(s) to a Smooth Streaming asset.\r         /// Adds the new task to a job.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The input asset.</param>\r         /// <returns>The output asset.</returns>\r         private static IAsset PackageMP4ToSmoothStreamingTask(IJob job, IAsset asset)\r         {\r             // Get the SDK extension method to  get a reference to the Azure Media Packager.\r             IMediaProcessor packager = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.WindowsAzureMediaPackager);\r \r             // Azure Media Packager does not accept string presets, so load xml configuration\r             string smoothConfig = File.ReadAllText(Path.Combine(\r                         _configurationXMLFiles, \r                         \"MediaPackager_MP4toSmooth.xml\"));\r \r             // Create a new Task to convert adaptive bitrate to Smooth Streaming.\r             ITask smoothStreamingTask = job.Tasks.AddNew(\"MP4 to Smooth Task\",\r                packager,\r                smoothConfig,\r                TaskOptions.None);\r \r             // Specify the input Asset, which is the output Asset from the first task\r             smoothStreamingTask.InputAssets.Add(asset);\r \r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is in the clear (unencrypted).\r             IAsset smoothOutputAsset = \r                 smoothStreamingTask.OutputAssets.AddNew(\"Clear Smooth Streaming\", \r                     AssetCreationOptions.None);\r \r             return smoothOutputAsset;\r         }\r \r         /// <summary>\r         /// Converts Smooth Streaming to HLS.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The Smooth Streaming asset.</param>\r         /// <returns>The asset that was packaged to HLS.</returns>\r         private static IAsset PackageSmoothStreamToHLS(IJob job, IAsset smoothStreamAsset)\r         {\r             // Get the SDK extension method to  get a reference to the Azure Media Packager.\r             IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.WindowsAzureMediaPackager);\r \r             // Read the configuration data into a string. \r             // For the HLS to get encrypted with AES make sure to set the\r             // encrypt configuration property to true.\r             //\r             // In production, it is recommended to do the following:\r             //    Set a Key url for your authn/authz server.\r             //    Copy the /asset-containerguid/*.key file to your server (or craft a key file for yourself).\r             //    Delete *.key from the asset container.\r             //\r             string configuration = File.ReadAllText(Path.Combine(_configurationXMLFiles, @\"MediaPackager_SmoothToHLS.xml\"));\r \r             // Create a task with the encoding details, using a configuration file.\r             ITask task = job.Tasks.AddNew(\"My Smooth Streaming to HLS Task\",\r                processor,\r                configuration,\r                TaskOptions.ProtectedConfiguration);\r \r             // Specify the input asset to be encoded.\r             task.InputAssets.Add(smoothStreamAsset);\r \r             // Add an output asset to contain the results of the job. \r             IAsset outputAsset = \r                 task.OutputAssets.AddNew(\"HLS asset\", AssetCreationOptions.None);\r \r             return outputAsset;\r         }\r     }\r }\r ```\r \r ## <a name=\"using-static-encryption-to-protect-hlsv3-with-playready\"></a>通过静态加密使用 PlayReady 来保护 HLSv3\r 若想要通过 PlayReady 来保护内容，则可选择使用[动态加密](media-services-protect-with-drm.md)（推荐选项）或静态加密（如本部分所述）。\r \r >[!NOTE]\r > 要使用 PlayReady 保护你的内容，必须先将内容转换/编码为平滑流格式。\r \r 本部分的示例将夹层文件（在本例中为 MP4）编码为多比特率 MP4 文件。 然后，它将 MP4 打包为平滑流，并使用 PlayReady 对平滑流进行加密。 若要生成使用 PlayReady 加密的 HTTP Live Streaming (HLS)，需要将 PlayReady 平滑流式处理资产打包成 HLS。 本主题演示如何执行所有这些步骤。\r \r 媒体服务现在提供有用于传送 Microsoft PlayReady 许可证的服务。 本文中的示例显示如何配置媒体服务 PlayReady 许可证传送服务（请参阅以下代码中定义的 **ConfigureLicenseDeliveryService** 方法）。 \r \r 确保更新以下代码，以便指向输入 MP4 文件所在的文件夹， 并指向 MediaPackager_MP4ToSmooth.xml、MediaPackager_SmoothToHLS.xml 和 MediaEncryptor_PlayReadyProtection.xml 文件所在的位置。 MediaPackager_MP4ToSmooth.xml 和 MediaPackager_SmoothToHLS.xml 在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/library/azure/hh973635.aspx)中定义，MediaEncryptor_PlayReadyProtection.xml 在 [Azure 媒体加密器的任务预设](http://msdn.microsoft.com/library/azure/hh973610.aspx)主题中定义。\r \r ```\r using System;\r using System.Collections.Generic;\r using System.Configuration;\r using System.IO;\r using System.Linq;\r using System.Text;\r using System.Threading;\r using System.Threading.Tasks;\r using Microsoft.WindowsAzure.MediaServices.Client;\r using System.Xml.Linq;\r using Microsoft.WindowsAzure.MediaServices.Client.ContentKeyAuthorization;\r using Microsoft.WindowsAzure.MediaServices.Client.DynamicEncryption;\r \r namespace MediaServicesContentProtection\r {\r     class Program\r     {\r         // Paths to support files (within the above base path). You can use \r         // the provided sample media files from the \"SupportFiles\" folder, or \r         // provide paths to your own media files below to run these samples.\r \r         private static readonly string _mediaFiles =\r             Path.GetFullPath(@\"../..\\Media\");\r \r         private static readonly string _singleMP4File =\r             Path.Combine(_mediaFiles, @\"SingleMP4\\BigBuckBunny.mp4\");\r \r         // XML Configruation files path.\r         private static readonly string _configurationXMLFiles = @\"../..\\Configurations\\\";\r \r         private static MediaServicesCredentials _cachedCredentials = null;\r         private static CloudMediaContext _context = null;\r \r         // Media Services account information.\r         private static readonly string _mediaServicesAccountName =\r             ConfigurationManager.AppSettings[\"MediaServiceAccountName\"];\r         private static readonly string _mediaServicesAccountKey =\r             ConfigurationManager.AppSettings[\"MediaServiceAccountKey\"];\r \r         static void Main(string[] args)\r         {\r             // Create and cache the Media Services credentials in a static class variable.\r             _cachedCredentials = new MediaServicesCredentials(\r                             _mediaServicesAccountName,\r                             _mediaServicesAccountKey);\r             // Used the chached credentials to create CloudMediaContext.\r             _context = new CloudMediaContext(_cachedCredentials);\r \r             // Load an MP4 file.\r             IAsset asset = IngestSingleMP4File(_singleMP4File, AssetCreationOptions.None);\r \r             // Encode an MP4 file to a set of multibitrate MP4s.\r             // Then, package a set of MP4s to clear Smooth Streaming.\r             IAsset clearSmoothStreamAsset = ConvertMP4ToMultibitrateMP4sToSmoothStreaming(asset);\r \r             // Create a common encryption content key that is used \r             // a) to set the key values in the MediaEncryptor_PlayReadyProtection.xml file\r             //    that is used for encryption.\r             // b) to configure the license delivery service and \r             //\r             Guid keyId;\r             byte[] contentKey;\r \r             IContentKey key = CreateCommonEncryptionKey(out keyId, out contentKey);\r \r             // The content key authorization policy must be configured by you \r             // and met by the client in order for the PlayReady license\r             // to be delivered to the client. \r             // In this example the Media Services PlayReady license delivery service is used.\r             ConfigureLicenseDeliveryService(key);\r \r             // Get the Media Services PlayReady license delivery URL.\r             // This URL will be assigned to the licenseAcquisitionUrl property \r             // of the MediaEncryptor_PlayReadyProtection.xml file.\r             Uri acquisitionUrl = key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense);\r \r             // Update the MediaEncryptor_PlayReadyProtection.xml file with the key and URL info.\r             UpdatePlayReadyConfigurationXMLFile(keyId, contentKey, acquisitionUrl);\r \r             // Create HLS encrypted with PlayReady.\r             IAsset playReadyHLSAsset = CreateHLSEncryptedWithPlayReady(clearSmoothStreamAsset);\r             //\r             string hlsWithPlayReadyURL = playReadyHLSAsset.GetHlsUri().ToString();\r             Console.WriteLine(\"HLS with PlayReady URL:\");\r             Console.WriteLine(hlsWithPlayReadyURL);\r         }\r \r         /// <summary>\r         /// Creates a job with 2 tasks: \r         /// 1 task - encodes a single MP4 to multibitrate MP4s,\r         /// 2 task - packages MP4s to Smooth Streaming.\r         /// </summary>\r         /// <returns>The output asset.</returns>\r         public static IAsset ConvertMP4ToMultibitrateMP4sToSmoothStreaming(IAsset asset)\r         {\r             // Create a new job.\r             IJob job = _context.Jobs.Create(\"Convert MP4 to Smooth Streaming.\");\r \r             // Add task 1 - Encode single MP4 into multibitrate MP4s.\r             IAsset MP4sAsset = EncodeSingleMP4IntoMultibitrateMP4sTask(job, asset);\r             // Add task 2 - Package a multibitrate MP4 set to Clear Smooth Streaming.\r             IAsset packagedAsset = PackageMP4ToSmoothStreamingTask(job, MP4sAsset);\r \r             // Submit the job and wait until it is completed.\r             job.Submit();\r             job = job.StartExecutionProgressTask(\r                 j =>\r                 {\r                     Console.WriteLine(\"Job state: {0}\", j.State);\r                     Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\r                 },\r                 CancellationToken.None).Result;\r \r             // Get the output asset that contains Smooth Streaming.\r             return job.OutputMediaAssets[1];\r         }\r \r         /// <summary>\r         /// Create a common encryption content key that is used \r         /// to set the key values in the MediaEncryptor_PlayReadyProtection.xml file\r         /// that is used for encryption.\r         /// </summary>\r         /// <param name=\"keyId\"></param>\r         /// <param name=\"contentKey\"></param>\r         /// <returns></returns>\r         public static IContentKey CreateCommonEncryptionKey(out Guid keyId, out byte[] contentKey)\r         {\r             keyId = Guid.NewGuid();\r             contentKey = GetRandomBuffer(16);\r \r             IContentKey key = _context.ContentKeys.Create(\r                                     keyId,\r                                     contentKey,\r                                     \"ContentKey\",\r                                     ContentKeyType.CommonEncryption);\r \r             return key;\r         }\r \r         /// <summary>\r         /// Update your configuration .xml file dynamically.\r         /// </summary>\r         public static void UpdatePlayReadyConfigurationXMLFile(Guid keyId, byte[] keyValue, Uri licenseAcquisitionUrl)\r         {\r             string xmlFileName = Path.Combine(_configurationXMLFiles,\r                                         @\"MediaEncryptor_PlayReadyProtection.xml\");\r \r             XNamespace xmlns = \"http://schemas.microsoft.com/iis/media/v4/TM/TaskDefinition#\";\r \r             // Prepare the encryption task template\r             XDocument doc = XDocument.Load(xmlFileName);\r \r             var licenseAcquisitionUrlEl = doc\r                     .Descendants(xmlns + \"property\")\r                     .Where(p => p.Attribute(\"name\").Value == \"licenseAcquisitionUrl\")\r                     .FirstOrDefault();\r             var contentKeyEl = doc\r                     .Descendants(xmlns + \"property\")\r                     .Where(p => p.Attribute(\"name\").Value == \"contentKey\")\r                     .FirstOrDefault();\r             var keyIdEl = doc\r                     .Descendants(xmlns + \"property\")\r                     .Where(p => p.Attribute(\"name\").Value == \"keyId\")\r                     .FirstOrDefault();\r \r             // Update the \"value\" property.\r             if (licenseAcquisitionUrlEl != null)\r                 licenseAcquisitionUrlEl.Attribute(\"value\").SetValue(licenseAcquisitionUrl.ToString());\r \r             if (contentKeyEl != null)\r                 contentKeyEl.Attribute(\"value\").SetValue(Convert.ToBase64String(keyValue));\r \r             if (keyIdEl != null)\r                 keyIdEl.Attribute(\"value\").SetValue(keyId);\r \r             doc.Save(xmlFileName);\r         }\r \r         /// <summary>\r         // Encrypts clear Smooth Streaming to Smooth Streaming with PlayReady.\r         // Then, packages the PlayReady Smooth Streaming to HLS with PlayReady.\r         /// </summary>\r         /// <param name=\"clearSmoothAsset\">Asset that contains clear Smooth Streaming.</param>\r         /// <returns>The output asset.</returns>\r         public static IAsset CreateHLSEncryptedWithPlayReady(IAsset clearSmoothStreamAsset)\r         {\r             IJob job = _context.Jobs.Create(\"Encrypt to HLS with PlayReady.\");\r \r             // Add task 1 - Encrypt Smooth Streaming with PlayReady \r             IAsset encryptedSmoothAsset =\r                 EncryptSmoothStreamWithPlayReadyTask(job, clearSmoothStreamAsset);\r \r             // Add task 2 - Package to HLS with PlayReady.\r             PackageSmoothStreamToHLS(job, encryptedSmoothAsset);\r \r             // Submit the job and wait until it is completed.\r             job.Submit();\r             job = job.StartExecutionProgressTask(\r                 j =>\r                 {\r                     Console.WriteLine(\"Job state: {0}\", j.State);\r                     Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\r                 },\r                 CancellationToken.None).Result;\r \r             // Since we had two tasks, the OutputMediaAssets[1]\r             // contains the desired asset.\r             _context.Locators.Create(\r                 LocatorType.OnDemandOrigin,\r                 job.OutputMediaAssets[1],\r                 AccessPermissions.Read,\r                 TimeSpan.FromDays(30));\r \r             return job.OutputMediaAssets[1];\r         }\r \r         /// <summary>\r         /// Uploads a single file.\r         /// </summary>\r         /// <param name=\"fileDir\">The location of the files.</param>\r         /// <param name=\"assetCreationOptions\">\r         ///  You can specify the following encryption options for the AssetCreationOptions.\r         ///      None:  no encryption.  \r         ///      StorageEncrypted: storage encryption. Encrypts a clear input file \r         ///        before it is uploaded to Azure storage. \r         ///      CommonEncryptionProtected: for Common Encryption Protected (CENC) files. \r         ///        For example, a set of files that are already PlayReady encrypted. \r         ///      EnvelopeEncryptionProtected: for HLS with AES encryption files.\r         ///        NOTE: The files must have been encoded and encrypted by Transform Manager. \r         ///     </param>\r         /// <returns>Returns an asset that contains a single file.</returns>\r         /// </summary>\r         /// <returns></returns>\r         private static IAsset IngestSingleMP4File(string fileDir, AssetCreationOptions assetCreationOptions)\r         {\r             // Use the SDK extension method to create a new asset by \r             // uploading a mezzanine file from a local path.\r             IAsset asset = _context.Assets.CreateFromFile(\r                 fileDir,\r                 assetCreationOptions,\r                 (af, p) =>\r                 {\r                     Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\r                 });\r \r             return asset;\r \r         }\r         /// <summary>\r         /// Creates a task to encode to Adaptive Bitrate. \r         /// Adds the new task to a job.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The input asset.</param>\r         /// <returns>The output asset.</returns>\r         private static IAsset EncodeSingleMP4IntoMultibitrateMP4sTask(IJob job, IAsset asset)\r         {\r             // Get the SDK extension method to  get a reference to the Media Encoder Standard.\r             IMediaProcessor encoder = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.MediaEncoderStandard);\r \r             ITask adpativeBitrateTask = job.Tasks.AddNew(\"MP4 to Adaptive Bitrate Task\",\r                encoder,\r                \"H264 Multiple Bitrate 720p\",\r                TaskOptions.None);\r \r             // Specify the input Asset\r             adpativeBitrateTask.InputAssets.Add(asset);\r \r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is in the clear (unencrypted).\r             IAsset abrAsset = adpativeBitrateTask.OutputAssets.AddNew(\"Multibitrate MP4s\",\r                                     AssetCreationOptions.None);\r \r             return abrAsset;\r         }\r \r         /// <summary>\r         /// Creates a task to convert the MP4 file(s) to a Smooth Streaming asset.\r         /// Adds the new task to a job.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The input asset.</param>\r         /// <returns>The output asset.</returns>\r         private static IAsset PackageMP4ToSmoothStreamingTask(IJob job, IAsset asset)\r         {\r             // Get the SDK extension method to  get a reference to the Azure Media Packager.\r             IMediaProcessor packager = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.WindowsAzureMediaPackager);\r \r             // Azure Media Packager does not accept string presets, so load xml configuration\r             string smoothConfig = File.ReadAllText(Path.Combine(\r                         _configurationXMLFiles,\r                         \"MediaPackager_MP4toSmooth.xml\"));\r \r             // Create a new Task to convert adaptive bitrate to Smooth Streaming.\r             ITask smoothStreamingTask = job.Tasks.AddNew(\"MP4 to Smooth Task\",\r                packager,\r                smoothConfig,\r                TaskOptions.None);\r \r             // Specify the input Asset, which is the output Asset from the first task\r             smoothStreamingTask.InputAssets.Add(asset);\r \r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is in the clear (unencrypted).\r             IAsset smoothOutputAsset =\r                 smoothStreamingTask.OutputAssets.AddNew(\"Clear Smooth Streaming\",\r                     AssetCreationOptions.None);\r \r             return smoothOutputAsset;\r         }\r \r         /// <summary>\r         /// Converts Smooth Stream to HLS.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The Smooth Stream asset.</param>\r         /// <returns>The asset that was packaged to HLS.</returns>\r         private static IAsset PackageSmoothStreamToHLS(IJob job, IAsset smoothStreamAsset)\r         {\r             // Get the SDK extension method to  get a reference to the Azure Media Packager.\r             IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.WindowsAzureMediaPackager);\r \r             // Read the configuration data into a string. \r             //\r             string configuration = File.ReadAllText(\r                         Path.Combine(_configurationXMLFiles,\r                                     @\"MediaPackager_SmoothToHLS.xml\"));\r \r             // Create a task with the encoding details, using a configuration file.\r             ITask task = job.Tasks.AddNew(\"My Smooth to HLS Task\",\r                processor,\r                configuration,\r                TaskOptions.ProtectedConfiguration);\r \r             // Specify the input asset to be encoded.\r             task.InputAssets.Add(smoothStreamAsset);\r \r             // Add an output asset to contain the results of the job. \r             IAsset outputAsset =\r                 task.OutputAssets.AddNew(\"HLS asset\", AssetCreationOptions.None);\r \r             return outputAsset;\r         }\r \r         /// <summary>\r         /// Creates a task to encrypt Smooth Streaming with PlayReady.\r         /// Note: Do deliver DASH, make sure to set the useSencBox and adjustSubSamples \r         /// configuration properties to true.\r         /// </summary>\r         /// <param name=\"job\">The job to which to add the new task.</param>\r         /// <param name=\"asset\">The input asset.</param>\r         /// <returns>The output asset.</returns>\r         private static IAsset EncryptSmoothStreamWithPlayReadyTask(IJob job, IAsset asset)\r         {\r             // Get the SDK extension method to  get a reference to the Azure Media Encryptor.\r             IMediaProcessor playreadyProcessor = _context.MediaProcessors.GetLatestMediaProcessorByName(\r                 MediaProcessorNames.WindowsAzureMediaEncryptor);\r \r             // Read the configuration XML.\r             //\r             // Note that the configuration defined in MediaEncryptor_PlayReadyProtection.xml\r             // is using keySeedValue. It is recommended that you do this only for testing \r             // and not in production. For more information, see \r             // https://www.sazure.cn/documentation/articles/media-services-static-packaging.\r             //\r             string configPlayReady = File.ReadAllText(Path.Combine(_configurationXMLFiles,\r                                         @\"MediaEncryptor_PlayReadyProtection.xml\"));\r \r             ITask playreadyTask = job.Tasks.AddNew(\"My PlayReady Task\",\r                playreadyProcessor,\r                configPlayReady,\r                TaskOptions.ProtectedConfiguration);\r \r             playreadyTask.InputAssets.Add(asset);\r \r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.CommonEncryptionProtected.\r             IAsset playreadyAsset = playreadyTask.OutputAssets.AddNew(\r                                             \"PlayReady Smooth Streaming\",\r                                             AssetCreationOptions.CommonEncryptionProtected);\r \r             return playreadyAsset;\r         }\r \r         /// <summary>\r         /// Configures authorization policy for the content key. \r         /// </summary>\r         /// <param name=\"contentKey\">The content key.</param>\r         static public void ConfigureLicenseDeliveryService(IContentKey contentKey)\r         {\r             // Create ContentKeyAuthorizationPolicy with Open restrictions \r             // and create authorization policy          \r \r             List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\r             {\r                 new ContentKeyAuthorizationPolicyRestriction \r                 { \r                     Name = \"Open\", \r                     KeyRestrictionType = (int)ContentKeyRestrictionType.Open, \r                     Requirements = null\r                 }\r             };\r \r             // Configure PlayReady license template.\r             string newLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r \r             IContentKeyAuthorizationPolicyOption policyOption =\r                 _context.ContentKeyAuthorizationPolicyOptions.Create(\"\",\r                     ContentKeyDeliveryType.PlayReadyLicense,\r                         restrictions, newLicenseTemplate);\r \r             IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r                         ContentKeyAuthorizationPolicies.\r                         CreateAsync(\"Deliver Common Content Key with no restrictions\").\r                         Result;\r \r             contentKeyAuthorizationPolicy.Options.Add(policyOption);\r \r             // Associate the content key authorization policy with the content key.\r             contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r             contentKey = contentKey.UpdateAsync().Result;\r         }\r \r         static private string ConfigurePlayReadyLicenseTemplate()\r         {\r             // The following code configures PlayReady License Template using .NET classes\r             // and returns the XML string.\r \r             PlayReadyLicenseResponseTemplate responseTemplate = new PlayReadyLicenseResponseTemplate();\r             PlayReadyLicenseTemplate licenseTemplate = new PlayReadyLicenseTemplate();\r \r             responseTemplate.LicenseTemplates.Add(licenseTemplate);\r \r             return MediaServicesLicenseTemplateSerializer.Serialize(responseTemplate);\r         }\r         static private byte[] GetRandomBuffer(int length)\r         {\r             var returnValue = new byte[length];\r \r             using (var rng =\r                 new System.Security.Cryptography.RNGCryptoServiceProvider())\r             {\r                 rng.GetBytes(returnValue);\r             }\r \r             return returnValue;\r         }\r \r     }\r }\r ```"}