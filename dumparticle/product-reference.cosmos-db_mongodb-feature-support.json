{"Title":"Azure Cosmos DB 对 MongoDB 的功能支持","Description":"了解 Azure Cosmos DB MongoDB API 为 MongoDB 3.4 提供的功能支持。","Content":"# <a name=\"mongodb-api-support-for-mongodb-features-and-syntax\"></a>MongoDB API 对 MongoDB 功能和语法的支持\r \r Azure Cosmos DB 由 世纪互联 提供，是多个区域分布的多模型数据库服务。 可通过任何开源 MongoDB 客户端[驱动程序](https://docs.mongodb.org/ecosystem/drivers)与数据库的 MongoDB API 通信。 MongoDB API 允许按照 MongoDB [线路协议](https://docs.mongodb.org/manual/reference/mongodb-wire-protocol)使用现有的客户端驱动程序。\r <!-- Notice: 全球 to 多个区域 -->\r \r 可以通过 Azure Cosmos DB MongoDB API 享受你所习惯的 MongoDB API 优势，并使用 Azure Cosmos DB 的所有企业功能：[全局分发](distribute-data-globally.md)、[自动分片](partition-data.md)、可用性和延迟保证、自动为每个字段建立索引、静态加密、备份等。\r \r ## <a name=\"mongodb-query-language-support\"></a>MongoDB 查询语言支持\r \r Azure Cosmos DB MongoDB API 为 MongoDB 查询语言构造提供全面的支持。 可以在下面查找当前支持的操作、运算符、阶段、命令和选项的详细列表。\r \r ## <a name=\"database-commands\"></a>数据库命令\r \r 在所有 MongoDB API 帐户上，Azure Cosmos DB 都支持以下数据库命令。 \r \r ### <a name=\"query-and-write-operation-commands\"></a>查询和写入操作命令\r - 删除\r - 查找项\r - findAndModify\r - getLastError\r - getMore\r - insert\r - update\r \r ### <a name=\"authentication-commands\"></a>身份验证命令\r - logout\r - authenticate\r - getnonce\r \r ### <a name=\"administration-commands\"></a>管理命令\r - dropDatabase\r - listCollections\r - drop\r - create\r - filemd5\r - createIndexes\r - listIndexes\r - dropIndexes\r - connectionStatus\r - reIndex\r \r ### <a name=\"diagnostics-commands\"></a>诊断命令\r - buildInfo\r - collStats\r - dbStats\r - hostInfo\r - listDatabases\r - whatsmyuri\r \r <a name=\"aggregation-pipeline\"/>\r \r ## <a name=\"aggregation-pipelinea\"></a>聚合管道</a>\r \r Azure Cosmos DB 在公共预览版中支持聚合管道。 请参阅 [Azure 博客](https://aka.ms/mongodb-aggregation)，了解如何载入到公共预览版。\r \r ### <a name=\"aggregation-commands\"></a>聚合命令\r - aggregate\r - 计数\r - distinct\r \r ### <a name=\"aggregation-stages\"></a>聚合阶段\r - $project\r - $match\r - $limit\r - $skip\r - $unwind\r - $group\r - $sample\r - $sort\r - $lookup\r - $out\r - $count\r \r ### <a name=\"aggregation-expressions\"></a>聚合表达式\r \r #### <a name=\"boolean-expressions\"></a>布尔表达式\r - $and\r - $or\r - $not\r \r #### <a name=\"set-expressions\"></a>设置表达式\r - $setEquals\r - $setIntersection\r - $setUnion\r - $setDifference\r - $setIsSubset\r - $anyElementTrue\r - $allElementsTrue\r \r #### <a name=\"comparison-expressions\"></a>比较表达式\r - $cmp\r - $eq\r - $gt\r - $gte\r - $lt\r - $lte\r - $ne\r \r #### <a name=\"arithmetic-expressions\"></a>算术表达式\r - $abs\r - $add\r - $ceil\r - $divide\r - $exp\r - $floor\r - $ln\r - $log\r - $log10\r - $mod\r - $multiply\r - $pow\r - $sqrt\r - $subtract\r - $trunc\r \r #### <a name=\"string-expressions\"></a>字符串表达式\r - $concat\r - $indexOfBytes\r - $indexOfCP\r - $split\r - $strLenBytes\r - $strLenCP\r - $strcasecmp\r - $substr\r - $substrBytes\r - $substrCP\r - $toLower\r - $toUpper\r \r #### <a name=\"array-expressions\"></a>数组表达式\r - $arrayElemAt\r - $concatArrays\r - $filter\r - $indexOfArray\r - $isArray\r - $range\r - $reverseArray\r - $size\r - $slice\r - $in\r \r #### <a name=\"date-expressions\"></a>日期表达式\r - $dayOfYear\r - $dayOfMonth\r - $dayOfWeek\r - $year\r - $month\r - $week\r - $hour\r - $minute\r - $second\r - $millisecond\r - $isoDayOfWeek\r - $isoWeek\r \r #### <a name=\"conditional-expressions\"></a>条件表达式\r - $cond\r - $ifNull\r \r ## <a name=\"aggregation-accumulators\"></a>聚合累加器\r - $sum\r - $avg\r - $first\r - $last\r - $max\r - $min\r - $push\r - $addToSet\r \r ## <a name=\"operators\"></a>运算符\r \r 以下运算符可以在相应的示例中使用。 考虑一下在下面的查询中使用的此示例文档：\r \r ```json\r {\r   \"Volcano Name\": \"Rainier\",\r   \"Country\": \"United States\",\r   \"Region\": \"US-Washington\",\r   \"Location\": {\r     \"type\": \"Point\",\r     \"coordinates\": [\r       -121.758,\r       46.87\r     ]\r   },\r   \"Elevation\": 4392,\r   \"Type\": \"Stratovolcano\",\r   \"Status\": \"Dendrochronology\",\r   \"Last Known Eruption\": \"Last known eruption from 1800-1899, inclusive\"\r }\r ```\r \r 运算符 | 示例 |\r --- | --- |\r $eq | ``` { \"Volcano Name\": { $eq: \"Rainier\" } } ``` |  | -\r $gt | ``` { \"Elevation\": { $gt: 4000 } } ``` |  | -\r $gte | ``` { \"Elevation\": { $gte: 4392 } } ``` |  | -\r $lt | ``` { \"Elevation\": { $lt: 5000 } } ``` |  | -\r $lte | ``` { \"Elevation\": { $lte: 5000 } } ``` | | -\r $ne | ``` { \"Elevation\": { $ne: 1 } } ``` |  | -\r $in | ``` { \"Volcano Name\": { $in: [\"St. Helens\", \"Rainier\", \"Glacier Peak\"] } } ``` |  | -\r $nin | ``` { \"Volcano Name\": { $nin: [\"Lassen Peak\", \"Hood\", \"Baker\"] } } ``` | | -\r $or | ``` { $or: [ { Elevation: { $lt: 4000 } }, { \"Volcano Name\": \"Rainier\" } ] } ``` |  | -\r $and | ``` { $and: [ { Elevation: { $gt: 4000 } }, { \"Volcano Name\": \"Rainier\" } ] } ``` |  | -\r $not | ``` { \"Elevation\": { $not: { $gt: 5000 } } } ```|  | -\r $nor | ``` { $nor: [ { \"Elevation\": { $lt: 4000 } }, { \"Volcano Name\": \"Baker\" } ] } ``` |  | -\r $exists | ``` { \"Status\": { $exists: true } } ```|  | -\r $type | ``` { \"Status\": { $type: \"string\" } } ```|  | -\r $mod | ``` { \"Elevation\": { $mod: [ 4, 0 ] } } ``` |  | -\r $regex | ``` { \"Volcano Name\": { $regex: \"^Rain\"} } ```|  | -\r \r ### <a name=\"notes\"></a>说明\r \r 在 $regex 查询中，左定位表达式允许索引搜索。 但是，使用“i”修饰符（不区分大小写）和“m”修饰符（多行）会导致在所有表达式中进行集合扫描。\r 需要包括“$”或“|”时，最好是创建两个（或两个以上）正则表达式查询。 例如，如果原始查询为 ```find({x:{$regex: /^abc$/})```，则必须将其修改为 ```find({x:{$regex: /^abc/, x:{$regex:/^abc$/}})```。\r 第一部分会使用索引将搜索限制为以 ^abc 开头的那些文档，第二部分会匹配确切的条目。 条运算符“|”充当“or”函数 - 查询 ```find({x:{$regex: /^abc|^def/})``` 会匹配其字段“x”的值以“abc”或“def”开头的文档。 若要利用该索引，建议将该查询拆分成两个不同的查询，再通过 $or 运算符联接到一起：```find( {$or : [{x: $regex: /^abc/}, {$regex: /^def/}] })```。\r \r ### <a name=\"geospatial-operators\"></a>地理空间运算符\r \r 运算符 | 示例 \r --- | --- |\r $geoWithin | ```{ \"Location.coordinates\": { $geoWithin: { $centerSphere: [ [ -121, 46 ], 5 ] } } }``` | 是\r $geoIntersects |  ```{ \"Location.coordinates\": { $geoIntersects: { $geometry: { type: \"Polygon\", coordinates: [ [ [ -121.9, 46.7 ], [ -121.5, 46.7 ], [ -121.5, 46.9 ], [ -121.9, 46.9 ], [ -121.9, 46.7 ] ] ] } } } }``` | 是\r $near | ```{ \"Location.coordinates\": { $near: { $geometry: { type: \"Polygon\", coordinates: [ [ [ -121.9, 46.7 ], [ -121.5, 46.7 ], [ -121.5, 46.9 ], [ -121.9, 46.9 ], [ -121.9, 46.7 ] ] ] } } } }``` | 是\r $nearSphere | ```{ \"Location.coordinates\": { $nearSphere : [ -121, 46  ], $maxDistance: 0.50 } }``` | 是\r $geometry | ```{ \"Location.coordinates\": { $geoWithin: { $geometry: { type: \"Polygon\", coordinates: [ [ [ -121.9, 46.7 ], [ -121.5, 46.7 ], [ -121.5, 46.9 ], [ -121.9, 46.9 ], [ -121.9, 46.7 ] ] ] } } } }``` | 是\r $minDistance | ```{ \"Location.coordinates\": { $nearSphere : { $geometry: {type: \"Point\", coordinates: [ -121, 46 ]}, $minDistance: 1000, $maxDistance: 1000000 } } }``` | 是\r $maxDistance | ```{ \"Location.coordinates\": { $nearSphere : [ -121, 46  ], $maxDistance: 0.50 } }``` | 是\r $center | ```{ \"Location.coordinates\": { $geoWithin: { $center: [ [-121, 46], 1 ] } } }``` | 是\r $centerSphere | ```{ \"Location.coordinates\": { $geoWithin: { $centerSphere: [ [ -121, 46 ], 5 ] } } }``` | 是\r $box | ```{ \"Location.coordinates\": { $geoWithin: { $box:  [ [ 0, 0 ], [ -122, 47 ] ] } } }``` | 是\r $polygon | ```{ \"Location.coordinates\": { $near: { $geometry: { type: \"Polygon\", coordinates: [ [ [ -121.9, 46.7 ], [ -121.5, 46.7 ], [ -121.5, 46.9 ], [ -121.9, 46.9 ], [ -121.9, 46.7 ] ] ] } } } }``` | 是\r \r ## <a name=\"additional-operators\"></a>其他运算符\r \r 运算符 | 示例 | 说明 \r --- | --- | --- |\r $all | ```{ \"Location.coordinates\": { $all: [-121.758, 46.87] } }``` | \r $elemMatch | ```{ \"Location.coordinates\": { $elemMatch: {  $lt: 0 } } }``` |  \r $size | ```{ \"Location.coordinates\": { $size: 2 } }``` | \r $comment |  ```{ \"Location.coordinates\": { $elemMatch: {  $lt: 0 } }, $comment: \"Negative values\"}``` | \r $text |  | 不支持。 请改用 $regex \r \r ### <a name=\"methods\"></a>方法\r \r 支持以下方法：\r \r #### <a name=\"cursor-methods\"></a>游标方法\r \r 方法 | 示例 | 说明 \r --- | --- | --- |\r cursor.sort() | ```cursor.sort({ \"Elevation\": -1 })``` | 不返回没有排序关键字的文档\r \r ## <a name=\"unique-indexes\"></a>唯一索引\r \r Azure Cosmos DB 为默认情况下写入到数据库的文档中的每个字段设置索引。 唯一索引确保一个集合中所有文档的特定字段没有重复值，类似于在默认的“_id”键上保持唯一性的方式。 现在可以在 Azure Cosmos DB 中创建自定义索引，方法是使用 createIndex 命令（包括“unique”约束）。\r \r 唯一索引适用于所有 MongoDB API 帐户。\r \r ## <a name=\"time-to-live-ttl\"></a>生存时间 (TTL)\r \r Azure Cosmos DB 支持基于文档时间戳的相对生存时间 (TTL)。 可以通过 [Azure 门户](https://portal.azure.cn)为 MongoDB API 集合启用 TTL。\r \r ## <a name=\"user-and-role-management\"></a>用户和角色管理\r \r Azure Cosmos 数据库尚不支持用户和角色。 Azure Cosmos DB 支持基于角色的访问控制 (RBAC) 以及读写型和只读型密码/密钥，后者可以通过 [Azure 门户](https://portal.azure.cn)（“连接字符串”页）获取。\r \r ## <a name=\"replication\"></a>复制\r \r Azure Cosmos DB 支持在最低层进行自动的本机复制。 此逻辑还可以扩展，实现低延迟的全局复制。 Azure Cosmos DB 不支持手动复制命令。\r \r ## <a name=\"sharding\"></a>分片\r \r Azure Cosmos DB 支持服务器端自动分片。 Azure Cosmos DB 不支持手动分片命令。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r - 了解如何配合 MongoDB 数据库 API 来[使用 Studio 3T](mongodb-mongochef.md)。\r - 了解如何配合 MongoDB 数据库 API 来[使用 Robo 3T](mongodb-robomongo.md)。\r - 浏览具有 MongoDB 协议支持的 Azure Cosmos DB [示例](mongodb-samples.md)。\r \r <!-- Update_Description: update meta properties -->\r "}