{"Title":"使用 Blob 存储的本地应用程序 (Java)","Description":"了解如何创建将图像上传到 Azure 并在浏览器中显示图像的控制台应用程序。 使用 Java 的代码示例。","Content":"# <a name=\"on-premises-application-with-blob-storage\"></a>使用 Blob 存储的本地应用程序\r ## <a name=\"overview\"></a>概述\r 以下示例演示如何使用 Azure 存储在 Azure 中存储图像。 本文中的代码是一个控制台应用程序的代码，该应用程序将一个图像上传到 Azure，并创建用于在浏览器中显示该图像的 HTML 文件。\r \r ## <a name=\"prerequisites\"></a>先决条件\r * 已安装 Java 开发人员工具包 (JDK) 版本 1.6 或更高版本。\r * 已安装 Azure SDK。\r * 适用于 Azure Libraries for Java 的 JAR 以及任何适用的依赖项 JAR 已安装并且位于 Java 编译器使用的生成路径中。 若要了解如何安装 Azure Libraries for Java，请参阅[下载用于 Java 的 Azure SDK](https://docs.azure.cn/zh-cn/develop/java)。\r * 已设置了一个 Azure 存储帐户。 本文中的代码使用存储帐户的帐户名称和帐户密钥。 有关创建存储帐户的信息，请参阅[如何创建存储帐户](../common/storage-create-storage-account.md#create-a-storage-account)；有关检索帐户密钥的信息，请参阅[查看并复制存储访问密钥](../common/storage-create-storage-account.md#view-and-copy-storage-access-keys)。\r * 创建了已命名的本地映像文件，存储路径为 c:\\\\myimages\\\\image1.jpg。 或者，在示例中修改 FileInputStream 构造函数，以使用其他映像路径和文件名。\r \r [!INCLUDE [create-account-note](../../../includes/create-account-note.md)]\r \r ## <a name=\"to-use-azure-blob-storage-to-upload-a-file\"></a>使用 Azure Blob 存储上传文件\r 此处提供分步过程。 如果要跳过这些过程，则可在本文后面找到完整的代码。\r \r 在代码的开头请包括对 Azure 核心存储类、Azure Blob 客户端类、Java IO 类和 **URISyntaxException** 类的导入：\r \r ```java\r import com.microsoft.azure.storage.*;\r import com.microsoft.azure.storage.blob.*;\r import java.io.*;\r import java.net.URISyntaxException;\r ```\r \r 声明一个名为 StorageSample 的类，包含左大括号 {。\r \r ```java\r public class StorageSample {\r ```\r \r 在 **StorageSample** 类中，声明一个包含默认终结点协议、存储帐户名称和存储访问密钥（在 Azure 存储帐户中指定）的字符串变量。 将占位符值 **your_account_name** 和 **your_account_key** 分别替换为自己的帐户名和帐户密钥。\r \r ```java\r public static final String storageConnectionString =\r        \"DefaultEndpointsProtocol=http;\" +\r        \"AccountName=your_account_name;\" +\r        \"AccountKey=your_account_name;\" +\r        \"EndpointSuffix=core.chinacloudapi.cn\";\r ```\r \r 添加对 main 的声明，包括 try 块并包括必需的左大括号 {。\r \r ```java\r public static void main(String[] args)\r {\r     try\r     {\r ```\r \r 声明以下类型的变量（说明针对的是如何在此示例中使用这些变量）：\r \r * CloudStorageAccount：用于通过 Azure 存储帐户名和密钥初始化帐户对象，以及用于创建 Blob 客户端对象。\r * **CloudBlobClient**：用于访问 Blob 服务。\r * CloudBlobContainer：用于创建 Blob 容器、列出容器中的 Blob 以及删除容器。\r * CloudBlockBlob：用于将本地映像文件上传到容器。\r \r <!-- -->\r \r ```java\r CloudStorageAccount account;\r CloudBlobClient serviceClient;\r CloudBlobContainer container;\r CloudBlockBlob blob;\r ```\r \r 为 **account** 变量赋值。\r \r ```java\r account = CloudStorageAccount.parse(storageConnectionString);\r ```\r \r 为 **serviceClient** 变量赋值。\r \r ```java\r serviceClient = account.createCloudBlobClient();\r ```\r \r 为 **container** 变量赋值。 我们将获取对名为 **gettingstarted** 的容器的引用。\r \r ```java\r // Container name must be lower case.\r container = serviceClient.getContainerReference(\"gettingstarted\");\r ```\r \r 创建该容器。 如果该容器不存在，此方法将创建该容器，并返回 true。 如果该容器存在，则此方法返回 **false**。 createIfNotExists 的一个替代方法是 create 方法（如果该容器已存在，该方法将返回错误）。\r \r ```java\r container.createIfNotExists();\r ```\r \r 为容器设置匿名访问。\r \r ```java\r // Set anonymous access on the container.\r BlobContainerPermissions containerPermissions;\r containerPermissions = new BlobContainerPermissions();\r containerPermissions.setPublicAccess(BlobContainerPublicAccessType.CONTAINER);\r container.uploadPermissions(containerPermissions);\r ```\r \r 获取对块 Blob 的引用，它表示 Azure 存储中的 Blob。\r \r ```java\r blob = container.getBlockBlobReference(\"image1.jpg\");\r ```\r \r 使用 **File** 构造函数获取对将上传的在本地创建的文件的引用。 确保在运行代码之前已创建此文件。\r \r ```java\r File fileReference = new File (\"c:\\\\myimages\\\\image1.jpg\");\r ```\r \r 通过调用 **CloudBlockBlob.upload** 方法上传该本地文件。 CloudBlockBlob.upload 方法的第一个参数是 FileInputStream 对象，表示将上传到 Azure 存储的本地文件。 第二个参数是此文件的大小（以字节为单位）。\r \r ```java\r blob.upload(new FileInputStream(fileReference), fileReference.length());\r ```\r \r 调用一个名为 MakeHTMLPage 的 Helper 函数来生成一个包含 &lt;image&gt; 元素的基本 HTML 页面，并将元素中的源设置为现在位于你的 Azure 存储帐户中的 Blob。 本文后面讨论 **MakeHTMLPage** 的代码。\r \r ```java\r MakeHTMLPage(container);\r ```\r \r 打印输出有关创建的 HTML 页的状态消息和信息。\r \r ```java\r System.out.println(\"Processing complete.\");\r System.out.println(\"Open index.html to see the images stored in your storage account.\");\r ```\r \r 结束 try 块的方法是插入右大括号 }\r \r 处理下列异常：\r \r * FileNotFoundException：可由 FileInputStream 或 FileOutputStream 构造函数引发。\r * **StorageException**：可由 Azure 客户端存储库引发。\r * URISyntaxException：可由 ListBlobItem.getUri 方法引发。\r * **Exception**：一般异常处理。\r \r <!-- -->\r \r ```java\r catch (FileNotFoundException fileNotFoundException)\r {\r     System.out.print(\"FileNotFoundException encountered: \");\r     System.out.println(fileNotFoundException.getMessage());\r     System.exit(-1);\r }\r catch (StorageException storageException)\r {\r     System.out.print(\"StorageException encountered: \");\r     System.out.println(storageException.getMessage());\r     System.exit(-1);\r }\r catch (URISyntaxException uriSyntaxException)\r {\r     System.out.print(\"URISyntaxException encountered: \");\r     System.out.println(uriSyntaxException.getMessage());\r     System.exit(-1);\r }\r catch (Exception e)\r {\r     System.out.print(\"Exception encountered: \");\r     System.out.println(e.getMessage());\r     System.exit(-1);\r }\r ```\r \r 结束 main 的方法是插入右大括号 }\r \r 创建一个名为 **MakeHTMLPage** 的方法来创建一个基本的 HTML 页面。 此方法具有一个 **CloudBlobContainer** 类型的参数，该参数将用于循环访问已上传 Blob 的列表。 此方法将引发 FileNotFoundException 类型的异常（可由 FileOutputStream 构造函数引发）以及 URISyntaxException（可由 ListBlobItem.getUri 方法引发）。 包括左大括号 **{**。\r \r ```java\r public static void MakeHTMLPage(CloudBlobContainer container) throws FileNotFoundException, URISyntaxException\r {\r ```\r \r 创建一个名为 **index.html**的本地文件。\r \r ```java\r PrintStream stream;\r stream = new PrintStream(new FileOutputStream(\"index.html\"));\r ```\r \r 写入本地文件，加入 &lt;html&gt;、&lt;header&gt; 和 &lt;body&gt; 元素。\r \r ```java\r stream.println(\"<html>\");\r stream.println(\"<header/>\");\r stream.println(\"<body>\");\r ```\r \r 循环访问已上传 Blob 的列表。 对于 HTML 页中的每个 Blob，可创建一个 &lt;img&gt; 元素，并将该元素的 src 属性发送到 Blob 的 URI（如同它存在于你的 Azure 存储帐户中一样）。\r 虽然仅在此示例中添加了一个图像，但如果添加更多图像，此代码循环访问所有这些图像。\r \r 为简单起见，此示例假定上传的每个 Blob 都是一个图像。 如果更新了图像之外的 Blob，或者更新了页面 Blob 而不是块 Blob，则请根据需要调整代码。\r \r ```java\r // Enumerate the uploaded blobs.\r for (ListBlobItem blobItem : container.listBlobs()) {\r // List each blob as an <img> element in the HTML body.\r stream.println(\"<img src='\" + blobItem.getUri() + \"'/><br/>\");\r }\r ```\r \r 结束 &lt;body&gt; 元素和 &lt;html&gt; 元素。\r \r ```java\r stream.println(\"</body>\");\r stream.println(\"</html>\");\r ```\r \r 结束本地文件。\r \r ```java\r stream.close();\r ```\r \r 结束 MakeHTMLPage 的方法是插入右大括号 }\r \r 结束 StorageSample 的方法是插入右大括号 }\r \r 以下是此示例的完整代码。 请记住将占位符值 your\\_account\\_name 和 your\\_account\\_key 分别修改为你的帐户名和帐户密钥。\r \r ```java\r import com.microsoft.azure.storage.*;\r import com.microsoft.azure.storage.blob.*;\r import java.io.*;\r import java.net.URISyntaxException;\r \r // Create an image, c:\\myimages\\image1.jpg, prior to running this sample.\r // Alternatively, change the value used by the FileInputStream constructor\r // to use a different image path and file that you have already created.\r public class StorageSample {\r \r     public static final String storageConnectionString =\r             \"DefaultEndpointsProtocol=http;\" +\r             \"AccountName=your_account_name;\" +\r             \"AccountKey=your_account_name;\" +\r             \"EndpointSuffix=core.chinacloudapi.cn\";\r \r     public static void main(String[] args) {\r         try {\r             CloudStorageAccount account;\r             CloudBlobClient serviceClient;\r             CloudBlobContainer container;\r             CloudBlockBlob blob;\r \r             account = CloudStorageAccount.parse(storageConnectionString);\r             serviceClient = account.createCloudBlobClient();\r             // Container name must be lower case.\r             container = serviceClient.getContainerReference(\"gettingstarted\");\r             container.createIfNotExists();\r \r             // Set anonymous access on the container.\r             BlobContainerPermissions containerPermissions;\r             containerPermissions = new BlobContainerPermissions();\r             containerPermissions.setPublicAccess(BlobContainerPublicAccessType.CONTAINER);\r             container.uploadPermissions(containerPermissions);\r \r             // Upload an image file.\r             blob = container.getBlockBlobReference(\"image1.jpg\");\r \r             File fileReference = new File(\"c:\\\\myimages\\\\image1.jpg\");\r             blob.upload(new FileInputStream(fileReference), fileReference.length());\r \r             // At this point the image is uploaded.\r             // Next, create an HTML page that lists all of the uploaded images.\r             MakeHTMLPage(container);\r \r             System.out.println(\"Processing complete.\");\r             System.out.println(\"Open index.html to see the images stored in your storage account.\");\r \r         } catch (FileNotFoundException fileNotFoundException) {\r             System.out.print(\"FileNotFoundException encountered: \");\r             System.out.println(fileNotFoundException.getMessage());\r             System.exit(-1);\r         } catch (StorageException storageException) {\r             System.out.print(\"StorageException encountered: \");\r             System.out.println(storageException.getMessage());\r             System.exit(-1);\r         } catch (URISyntaxException uriSyntaxException) {\r             System.out.print(\"URISyntaxException encountered: \");\r             System.out.println(uriSyntaxException.getMessage());\r             System.exit(-1);\r         } catch (Exception e) {\r             System.out.print(\"Exception encountered: \");\r             System.out.println(e.getMessage());\r             System.exit(-1);\r         }\r     }\r \r     // Create an HTML page that can be used to display the uploaded images.\r     // This example assumes all of the blobs are for images.\r     public static void MakeHTMLPage(CloudBlobContainer container) throws FileNotFoundException, URISyntaxException\r     {\r         PrintStream stream;\r         stream = new PrintStream(new FileOutputStream(\"index.html\"));\r \r         // Create the opening <html>, <header>, and <body> elements.\r         stream.println(\"<html>\");\r         stream.println(\"<header/>\");\r         stream.println(\"<body>\");\r \r         // Enumerate the uploaded blobs.\r         for (ListBlobItem blobItem : container.listBlobs()) {\r             // List each blob as an <img> element in the HTML body.\r             stream.println(\"<img src='\" + blobItem.getUri() + \"'/><br/>\");\r         }\r \r         stream.println(\"</body>\");\r \r         // Complete the <html> element and close the file.\r         stream.println(\"</html>\");\r         stream.close();\r     }\r }\r ```\r \r 除了将本地图像文件上传到 Azure 存储之外，此示例代码还将创建本地文件 namedindex.html，可在浏览器中打开该文件以查看上传的图像。\r \r 由于代码包含帐户名称和帐户密钥，因此请确保源代码是安全的。\r \r ## <a name=\"to-delete-a-container\"></a>删除容器\r 由于存储是收费的，因此可能希望在完成对此示例的试验后删除 **gettingstarted** 容器。 若要删除容器，请使用 **CloudBlobContainer.delete** 方法：\r \r ```java\r container = serviceClient.getContainerReference(\"gettingstarted\");\r container.delete();\r ```\r \r 若要调用 CloudBlobContainer.delete 方法，请使用与为 createIfNotExist 方法演示的相同过程初始化 CloudStorageAccount、ClodBlobClient、CloudBlobContainer 对象。 以下是删除名为 **gettingstarted**的容器的完整示例。\r \r ```java\r import com.microsoft.azure.storage.*;\r import com.microsoft.azure.storage.blob.*;\r \r public class DeleteContainer {\r \r     public static final String storageConnectionString =\r             \"DefaultEndpointsProtocol=http;\" +\r             \"AccountName=your_account_name;\" +\r             \"AccountKey=your_account_key;\" +\r             \"EndpointSuffix=core.chinacloudapi.cn\";\r \r     public static void main(String[] args)\r     {\r         try\r         {\r             CloudStorageAccount account;\r             CloudBlobClient serviceClient;\r             CloudBlobContainer container;\r \r             account = CloudStorageAccount.parse(storageConnectionString);\r             serviceClient = account.createCloudBlobClient();\r             // Container name must be lower case.\r             container = serviceClient.getContainerReference(\"gettingstarted\");\r             container.delete();\r \r             System.out.println(\"Container deleted.\");\r \r         }\r         catch (StorageException storageException)\r         {\r             System.out.print(\"StorageException encountered: \");\r             System.out.println(storageException.getMessage());\r             System.exit(-1);\r         }\r         catch (Exception e)\r         {\r             System.out.print(\"Exception encountered: \");\r             System.out.println(e.getMessage());\r             System.exit(-1);\r         }\r     }\r }\r ```\r \r 有关其他 Blob 存储类和方法的概述，请参阅[如何通过 Java 使用 Blob 存储](storage-java-how-to-use-blob-storage.md)。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 请访问下面的链接了解有关更复杂的存储任务的详细信息。\r \r * [用于 Java 的 Azure 存储 SDK](https://github.com/azure/azure-storage-java)\r * [Azure 存储客户端 SDK 参考](http://azure.github.io/azure-storage-java/)\r * [Azure 存储服务 REST API](https://msdn.microsoft.com/library/azure/dd179355.aspx)\r * [Azure 存储团队博客](http://blogs.msdn.com/b/windowsazurestorage/)\r <!--Update_Description: update link-->"}