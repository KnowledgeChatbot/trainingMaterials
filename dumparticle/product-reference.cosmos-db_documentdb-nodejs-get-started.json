{"Title":"适用于 Azure Cosmos DB 的 DocumentDB API 的 Node.js 教程","Description":"本 Node.js 教程会创建采用 DocumentDB API 的 Cosmos DB。","Content":"# <a name=\"nodejs-tutorial-use-the-documentdb-api-in-azure-cosmos-db-to-create-a-nodejs-console-application\"></a>Node.js 教程：在 Azure Cosmos DB 中使用 DocumentDB API 创建 Node.js 控制台应用程序\r > [!div class=\"op_single_selector\"]\r > * [.NET](documentdb-get-started.md)\r > * [.NET Core](documentdb-dotnetcore-get-started.md)\r > * [用于 MongoDB 的 Node.js](mongodb-samples.md)\r > * [Node.js](documentdb-nodejs-get-started.md)\r > * [Java](documentdb-java-get-started.md)\r > * [C++](documentdb-cpp-get-started.md)\r >  \r > \r \r 欢迎使用 Azure Cosmos DB Node.js SDK 的 Node.js 教程！ 学习本教程后，将拥有一个可创建并查询 Azure Cosmos DB 资源的控制台应用程序。\r \r 我们介绍：\r \r * 创建并连接到 Azure Cosmos DB 帐户\r * 设置应用程序\r * 创建节点数据库\r * 创建集合\r * 创建 JSON 文档\r * 查询集合\r * 替换文档\r * 删除文档\r * 删除节点数据库\r \r 没有时间？ 不必担心！ 可在 [GitHub](https://github.com/Azure-Samples/documentdb-node-getting-started)上获取完整的解决方案。 有关快速说明，请参阅 [获取完整解决方案](#GetSolution) 。\r \r 完成 Node.js 教程后，请使用位于本页顶部和底部的投票按钮向我们提供反馈。 如果希望我们直接与你联系，欢迎将电子邮件地址附在评论中。\r \r 现在，让我们开始吧！\r \r ## <a name=\"prerequisites-for-the-nodejs-tutorial\"></a>Node.js 教程的先决条件\r 请确保具有以下内容：\r \r * 有效的 Azure 帐户。 如果没有，可以注册 [Azure 免费试用版](https://www.azure.cn/pricing/1rmb-trial/)。 \r \r   [!INCLUDE [cosmos-db-emulator-docdb-api](../../includes/cosmos-db-emulator-docdb-api.md)]\r \r * [Node.js](https://nodejs.org/) 版本 v0.10.29 或更高版本。\r \r ## <a name=\"step-1-create-an-azure-cosmos-db-account\"></a>步骤 1：创建 Azure Cosmos DB 帐户\r 创建一个 Azure Cosmos DB 帐户。 如果已经有想要使用的帐户，可以跳到 [安装 Node.js 应用程序](#SetupNode)。 如果使用 Azure Cosmos DB 模拟器，请遵循 [Azure Cosmos DB 模拟器](local-emulator.md)中的步骤设置该模拟器，并直接跳到[安装 Node.js 应用程序](#SetupNode)。\r \r [!INCLUDE [cosmos-db-create-dbaccount](../../includes/cosmos-db-create-dbaccount.md)]\r \r ## <a name=\"SetupNode\"></a>步骤 2：安装 Node.js 应用程序\r 1. 打开偏好的终端。\r 2. 找到想要在其中保存 Node.js 应用程序的文件夹或目录。\r 3. 使用以下命令创建两个空的 JavaScript 文件：\r    * Windows:\r      * ```fsutil file createnew app.js 0```\r      * ```fsutil file createnew config.js 0```\r    * Linux/OS X：\r      * ```touch app.js```\r      * ```touch config.js```\r 4. 通过 npm 安装 documentdb 模块。 请使用以下命令：\r    * ```npm install documentdb --save```\r \r 很好！ 既然已完成安装设置，让我们开始编写一些代码。\r \r ## <a name=\"Config\"></a>步骤 3：设置应用的配置\r 在喜爱的文本编辑器中打开 ```config.js``` 。\r \r 然后，复制并粘贴以下代码片段，并将属性 ```config.endpoint``` 和 ```config.primaryKey``` 设置为 Azure Cosmos DB 终结点 URI 和主密钥。 这两项配置都可以在 [Azure 门户](https://portal.azure.cn)中找到。\r \r ![Node.js 教程 - Azure 门户的屏幕截图，显示了一个 Azure Cosmos DB 帐户，在“Azure Cosmos DB 帐户”边栏选项卡上突出显示了“ACTIVE”中心、“密钥”按钮，在“密钥”边栏选项卡上突出显示了 URI、主密钥、辅助密钥的值 - Node 数据库][keys]\r \r     // ADD THIS PART TO YOUR CODE\r     var config = {}\r \r     config.endpoint = \"~your Azure Cosmos DB endpoint uri here~\";\r     config.primaryKey = \"~your primary key here~\";\r \r 复制 ```database id```、```collection id``` 和 ```JSON documents``` 并将其粘贴到在其中设置了 ```config.endpoint``` 和 ```config.primaryKey``` 属性的 ```config``` 对象下面。 如果已有要在数据库中存储的数据，则可以使用 Azure Cosmos DB 的[数据迁移工具](import-data.md)而不是添加文档定义。\r \r     config.endpoint = \"~your Azure Cosmos DB endpoint uri here~\";\r     config.primaryKey = \"~your primary key here~\";\r \r     // ADD THIS PART TO YOUR CODE\r     config.database = {\r         \"id\": \"FamilyDB\"\r     };\r \r     config.collection = {\r         \"id\": \"FamilyColl\"\r     };\r \r     config.documents = {\r         \"Andersen\": {\r             \"id\": \"Anderson.1\",\r             \"lastName\": \"Andersen\",\r             \"parents\": [{\r                 \"firstName\": \"Thomas\"\r             }, {\r                     \"firstName\": \"Mary Kay\"\r                 }],\r             \"children\": [{\r                 \"firstName\": \"Henriette Thaulow\",\r                 \"gender\": \"female\",\r                 \"grade\": 5,\r                 \"pets\": [{\r                     \"givenName\": \"Fluffy\"\r                 }]\r             }],\r             \"address\": {\r                 \"state\": \"WA\",\r                 \"county\": \"King\",\r                 \"city\": \"Seattle\"\r             }\r         },\r         \"Wakefield\": {\r             \"id\": \"Wakefield.7\",\r             \"parents\": [{\r                 \"familyName\": \"Wakefield\",\r                 \"firstName\": \"Robin\"\r             }, {\r                     \"familyName\": \"Miller\",\r                     \"firstName\": \"Ben\"\r                 }],\r             \"children\": [{\r                 \"familyName\": \"Merriam\",\r                 \"firstName\": \"Jesse\",\r                 \"gender\": \"female\",\r                 \"grade\": 8,\r                 \"pets\": [{\r                     \"givenName\": \"Goofy\"\r                 }, {\r                         \"givenName\": \"Shadow\"\r                     }]\r             }, {\r                     \"familyName\": \"Miller\",\r                     \"firstName\": \"Lisa\",\r                     \"gender\": \"female\",\r                     \"grade\": 1\r                 }],\r             \"address\": {\r                 \"state\": \"NY\",\r                 \"county\": \"Manhattan\",\r                 \"city\": \"NY\"\r             },\r             \"isRegistered\": false\r         }\r     };\r \r 数据库、集合和文档定义将充当 Azure Cosmos DB ```database id```、```collection id``` 和文档的数据。\r \r 最后，导出 ```config``` 对象，以便可以在 ```app.js``` 文件中引用。\r \r             },\r             \"isRegistered\": false\r         }\r     };\r \r     // ADD THIS PART TO YOUR CODE\r     module.exports = config;\r \r ## <a name=\"Connect\"></a> 步骤 4：连接到 Azure Cosmos DB 帐户\r 在文本编辑器中打开空的 ```app.js``` 文件。 复制并粘贴以下代码，以导入 ```documentdb``` 模块和新建的 ```config``` 模块。\r \r     // ADD THIS PART TO YOUR CODE\r     \"use strict\";\r \r     var documentClient = require(\"documentdb\").DocumentClient;\r     var config = require(\"./config\");\r     var url = require('url');\r \r 复制并粘贴以下代码，以使用前面保存的 ```config.endpoint``` 和 ```config.primaryKey``` 来创建新的 DocumentClient。\r \r     var config = require(\"./config\");\r     var url = require('url');\r \r     // ADD THIS PART TO YOUR CODE\r     var client = new documentClient(config.endpoint, { \"masterKey\": config.primaryKey });\r \r 现已获得用于初始化 Azure Cosmos DB 客户端的代码，接下来请看如何使用 Azure Cosmos DB 资源。\r \r ## <a name=\"step-5-create-a-node-database\"></a>步骤 5：创建节点数据库\r 复制并粘贴以下代码，以设置“找不到”消息的 HTTP 状态、数据库 URL 和集合 URL。 通过这些 URL，可了解 Azure Cosmos DB 客户端如何查找正确的数据库和集合。\r \r     var client = new documentClient(config.endpoint, { \"masterKey\": config.primaryKey });\r \r     // ADD THIS PART TO YOUR CODE\r     var HttpStatusCodes = { NOTFOUND: 404 };\r     var databaseUrl = `dbs/${config.database.id}`;\r     var collectionUrl = `${databaseUrl}/colls/${config.collection.id}`;\r \r 可以使用 **DocumentClient** 类的 [createDatabase](https://azure.github.io/azure-documentdb-node/DocumentClient.html) 函数创建[数据库](documentdb-resources.md#databases)。 数据库是跨集合分区的文档存储的逻辑容器。\r \r 复制并粘贴 **getDatabase** 函数，以便使用 ```config``` 对象中指定的 ```id``` 在 app.js 文件中创建新数据库。 该函数将检查是否不存在具有相同 ```FamilyRegistry``` ID 的数据库。 如果确实存在，我们返回该数据库而不是创建新的。\r \r     var collectionUrl = `${databaseUrl}/colls/${config.collection.id}`;\r \r     // ADD THIS PART TO YOUR CODE\r     function getDatabase() {\r         console.log(`Getting database:\\n${config.database.id}\\n`);\r \r         return new Promise((resolve, reject) => {\r             client.readDatabase(databaseUrl, (err, result) => {\r                 if (err) {\r                     if (err.code == HttpStatusCodes.NOTFOUND) {\r                         client.createDatabase(config.database, (err, created) => {\r                             if (err) reject(err)\r                             else resolve(created);\r                         });\r                     } else {\r                         reject(err);\r                     }\r                 } else {\r                     resolve(result);\r                 }\r             });\r         });\r     }\r \r 在设置 **getDatabase** 函数的位置下面复制并粘贴以下代码以添加帮助器函数 **exit**，该函数将列显退出消息并调用 **getDatabase** 函数。\r \r                 } else {\r                     resolve(result);\r                 }\r             });\r         });\r     }\r \r     // ADD THIS PART TO YOUR CODE\r     function exit(message) {\r         console.log(message);\r         console.log('Press any key to exit');\r         process.stdin.setRawMode(true);\r         process.stdin.resume();\r         process.stdin.on('data', process.exit.bind(process, 0));\r     }\r \r     getDatabase()\r     .then(() => { exit(`Completed successfully`); })\r     .catch((error) => { exit(`Completed with error ${JSON.stringify(error)}`) });\r \r 在终端中，找到 ```app.js``` 文件并运行命令：```node app.js```\r \r 祝贺！ 已成功创建了 Azure Cosmos DB 数据库。\r \r ## <a name=\"CreateColl\"></a>步骤 6：创建集合\r > [!WARNING]\r > createCollection 将创建新的集合，它牵涉定价。 有关详细信息，请访问 [定价页](https://www.azure.cn/pricing/details/cosmos-db/)。\r > \r > \r \r 可以使用 **DocumentClient** 类的 [createCollection](https://azure.github.io/azure-documentdb-node/DocumentClient.html) 函数创建[集合](documentdb-resources.md#collections)。 集合是 JSON 文档和相关联的 JavaScript 应用程序逻辑的容器。\r \r 将 **getCollection** 函数复制并粘贴到 app.js 文件中 **getDatabase** 函数下面，以便使用 ```config``` 对象中指定的 ```id``` 创建新集合。 同样，我们首先检查以确保不存在具有相同 ```FamilyCollection``` ID 的集合。 如果确实存在，我们返回该集合而不是创建新的。\r \r                 } else {\r                     resolve(result);\r                 }\r             });\r         });\r     }\r \r     // ADD THIS PART TO YOUR CODE\r     function getCollection() {\r         console.log(`Getting collection:\\n${config.collection.id}\\n`);\r \r         return new Promise((resolve, reject) => {\r             client.readCollection(collectionUrl, (err, result) => {\r                 if (err) {\r                     if (err.code == HttpStatusCodes.NOTFOUND) {\r                         client.createCollection(databaseUrl, config.collection, { offerThroughput: 400 }, (err, created) => {\r                             if (err) reject(err)\r                             else resolve(created);\r                         });\r                     } else {\r                         reject(err);\r                     }\r                 } else {\r                     resolve(result);\r                 }\r             });\r         });\r     }\r \r 将以下代码复制并粘贴到对 **getDatabase** 的调用下面，以执行 **getCollection** 函数。\r \r     getDatabase()\r \r     // ADD THIS PART TO YOUR CODE\r     .then(() => getCollection())\r     // ENDS HERE\r \r     .then(() => { exit(`Completed successfully`); })\r     .catch((error) => { exit(`Completed with error ${JSON.stringify(error)}`) });\r \r 在终端中，找到 ```app.js``` 文件并运行命令：```node app.js```\r \r 祝贺！ 已成功创建 Azure Cosmos DB 集合。\r \r ## <a name=\"CreateDoc\"></a>步骤 7：创建文档\r 可以使用 **DocumentClient** 类的 [createDocument](https://azure.github.io/azure-documentdb-node/DocumentClient.html) 函数创建[文档](documentdb-resources.md#documents)。 文档为用户定义的（任意）JSON 内容。 现在，可以将文档插入 Azure Cosmos DB 中。\r \r 将 **getFamilyDocument** 函数复制并粘贴到 **getCollection** 函数下面，创建包含 ```config``` 对象中保存的 JSON 数据的文档。 同样，我们首先检查以确保不存在具有相同 ID 的文档。\r \r                 } else {\r                     resolve(result);\r                 }\r             });\r         });\r     }\r \r     // ADD THIS PART TO YOUR CODE\r     function getFamilyDocument(document) {\r         let documentUrl = `${collectionUrl}/docs/${document.id}`;\r         console.log(`Getting document:\\n${document.id}\\n`);\r \r         return new Promise((resolve, reject) => {\r             client.readDocument(documentUrl, { partitionKey: document.district }, (err, result) => {\r                 if (err) {\r                     if (err.code == HttpStatusCodes.NOTFOUND) {\r                         client.createDocument(collectionUrl, document, (err, created) => {\r                             if (err) reject(err)\r                             else resolve(created);\r                         });\r                     } else {\r                         reject(err);\r                     }\r                 } else {\r                     resolve(result);\r                 }\r             });\r         });\r     };\r \r 将以下代码复制并粘贴到对 **getCollection** 的调用下面，以执行 **getFamilyDocument** 函数。\r \r     getDatabase()\r     .then(() => getCollection())\r \r     // ADD THIS PART TO YOUR CODE\r     .then(() => getFamilyDocument(config.documents.Andersen))\r     .then(() => getFamilyDocument(config.documents.Wakefield))\r     // ENDS HERE\r \r     .then(() => { exit(`Completed successfully`); })\r     .catch((error) => { exit(`Completed with error ${JSON.stringify(error)}`) });\r \r 在终端中，找到 ```app.js``` 文件并运行命令：```node app.js```\r \r 祝贺！ 已成功创建 Azure Cosmos DB 文档。\r \r ![Node.js 教程 - 说明帐户、数据库、集合和文档间层次关系的关系图 - 节点数据库](./media/documentdb-nodejs-get-started/node-js-tutorial-cosmos-db-account.png)\r \r ## <a name=\"Query\"></a>步骤 8：查询 Azure Cosmos DB 资源\r Azure Cosmos DB 支持对存储在每个集合中的 JSON 文档进行[各种查询](documentdb-sql-query.md)。 下面的示例代码演示可针对集合中文档运行的查询。\r \r 将 **queryCollection** 函数复制并粘贴到 app.js 文件中的 **getFamilyDocument** 函数下面。 Azure Cosmos DB 支持类似 SQL 的查询，如下所示。 有关构建复杂查询的详细信息，请参阅[查询演练](https://www.documentdb.com/sql/demo)和[查询文档](documentdb-sql-query.md)。\r \r                 } else {\r                     resolve(result);\r                 }\r             });\r         });\r     }\r \r     // ADD THIS PART TO YOUR CODE\r     function queryCollection() {\r         console.log(`Querying collection through index:\\n${config.collection.id}`);\r \r         return new Promise((resolve, reject) => {\r             client.queryDocuments(\r                 collectionUrl,\r                 'SELECT VALUE r.children FROM root r WHERE r.lastName = \"Andersen\"'\r             ).toArray((err, results) => {\r                 if (err) reject(err)\r                 else {\r                     for (var queryResult of results) {\r                         let resultString = JSON.stringify(queryResult);\r                         console.log(`\\tQuery returned ${resultString}`);\r                     }\r                     console.log();\r                     resolve(results);\r                 }\r             });\r         });\r     };\r \r 下图说明了如何针对所创建的集合调用 Azure Cosmos DB SQL 查询语法。\r \r ![Node.js 教程 - 说明查询的范围和含义的关系图 - 节点数据库](./media/documentdb-nodejs-get-started/node-js-tutorial-collection-documents.png)\r \r 查询中的关键字 [FROM](documentdb-sql-query.md#FromClause) 是可选项，因为 Azure Cosmos DB 查询已限制为单个集合。 因此，“FROM Families f”可与“FROM root r”或者任何其他所选变量名进行交换。 Azure Cosmos DB 将推断所选 Families、root 或变量名，并默认引用当前集合。\r \r 将以下代码复制并粘贴到对 **getFamilyDocument** 的调用下面，以执行 **queryCollection** 函数。\r \r     .then(() => getFamilyDocument(config.documents.Andersen))\r     .then(() => getFamilyDocument(config.documents.Wakefield))\r \r     // ADD THIS PART TO YOUR CODE\r     .then(() => queryCollection())\r     // ENDS HERE\r \r     .then(() => { exit(`Completed successfully`); })\r     .catch((error) => { exit(`Completed with error ${JSON.stringify(error)}`) });\r \r 在终端中，找到 ```app.js``` 文件并运行命令：```node app.js```\r \r 祝贺！ 已成功查询了 Azure Cosmos DB 文档。\r \r ## <a name=\"ReplaceDocument\"></a>步骤 9：替换文档\r Azure Cosmos DB 支持替换 JSON 文档。\r \r 将 **replaceFamilyDocument** 函数复制并粘贴到 app.js 文件中的 **queryCollection** 函数下面。\r \r                     }\r                     console.log();\r                     resolve(result);\r                 }\r             });\r         });\r     }\r \r     // ADD THIS PART TO YOUR CODE\r     function replaceFamilyDocument(document) {\r         let documentUrl = `${collectionUrl}/docs/${document.id}`;\r         console.log(`Replacing document:\\n${document.id}\\n`);\r         document.children[0].grade = 6;\r \r         return new Promise((resolve, reject) => {\r             client.replaceDocument(documentUrl, document, (err, result) => {\r                 if (err) reject(err);\r                 else {\r                     resolve(result);\r                 }\r             });\r         });\r     };\r \r 将以下代码复制并粘贴到对 **queryCollection** 的调用下面，以执行 **replaceDocument** 函数。 此外，再次将此代码添加到对 **queryCollection** 的调用，以验证是否已成功更改文档。\r \r     .then(() => getFamilyDocument(config.documents.Andersen))\r     .then(() => getFamilyDocument(config.documents.Wakefield))\r     .then(() => queryCollection())\r \r     // ADD THIS PART TO YOUR CODE\r     .then(() => replaceFamilyDocument(config.documents.Andersen))\r     .then(() => queryCollection())\r     // ENDS HERE\r \r     .then(() => { exit(`Completed successfully`); })\r     .catch((error) => { exit(`Completed with error ${JSON.stringify(error)}`) });\r \r 在终端中，找到 ```app.js``` 文件并运行命令：```node app.js```\r \r 祝贺！ 已成功替换了 Azure Cosmos DB 文档。\r \r ## <a name=\"DeleteDocument\"></a>步骤 10：删除文档\r Azure Cosmos DB 支持删除 JSON 文档。\r \r 将 **deleteFamilyDocument** 函数复制并粘贴到 **replaceFamilyDocument** 函数下面。\r \r                 else {\r                     resolve(result);\r                 }\r             });\r         });\r     };\r \r     // ADD THIS PART TO YOUR CODE\r     function deleteFamilyDocument(document) {\r         let documentUrl = `${collectionUrl}/docs/${document.id}`;\r         console.log(`Deleting document:\\n${document.id}\\n`);\r \r         return new Promise((resolve, reject) => {\r             client.deleteDocument(documentUrl, (err, result) => {\r                 if (err) reject(err);\r                 else {\r                     resolve(result);\r                 }\r             });\r         });\r     };\r \r 将以下代码复制并粘贴到对第二个 **queryCollection** 的调用下面，以执行 **deleteDocument** 函数。\r \r     .then(() => queryCollection())\r     .then(() => replaceFamilyDocument(config.documents.Andersen))\r     .then(() => queryCollection())\r \r     // ADD THIS PART TO YOUR CODE\r     .then(() => deleteFamilyDocument(config.documents.Andersen))\r     // ENDS HERE\r \r     .then(() => { exit(`Completed successfully`); })\r     .catch((error) => { exit(`Completed with error ${JSON.stringify(error)}`) });\r \r 在终端中，找到 ```app.js``` 文件并运行命令：```node app.js```\r \r 祝贺！ 已成功删除了 Azure Cosmos DB 文档。\r \r ## <a name=\"DeleteDatabase\"></a>步骤 11：删除 Node 数据库\r 删除已创建的数据库会删除该数据库及其所有子资源（集合、文档等）。\r \r 将 **cleanup** 函数复制并粘贴到 **deleteFamilyDocument** 函数下面，删除数据库和所有子资源。\r \r                 else {\r                     resolve(result);\r                 }\r             });\r         });\r     };\r \r     // ADD THIS PART TO YOUR CODE\r     function cleanup() {\r         console.log(`Cleaning up by deleting database ${config.database.id}`);\r \r         return new Promise((resolve, reject) => {\r             client.deleteDatabase(databaseUrl, (err) => {\r                 if (err) reject(err)\r                 else resolve(null);\r             });\r         });\r     }\r \r 将以下代码复制并粘贴到对 **deleteFamilyDocument** 的调用下面，以执行 **cleanup** 函数。\r \r     .then(() => deleteFamilyDocument(config.documents.Andersen))\r \r     // ADD THIS PART TO YOUR CODE\r     .then(() => cleanup())\r     // ENDS HERE\r \r     .then(() => { exit(`Completed successfully`); })\r     .catch((error) => { exit(`Completed with error ${JSON.stringify(error)}`) });\r \r ## <a name=\"Run\"></a>步骤 12：运行整个 Node.js 应用程序！\r 总体而言，调用函数的顺序应如下所示：\r \r     getDatabase()\r     .then(() => getCollection())\r     .then(() => getFamilyDocument(config.documents.Andersen))\r     .then(() => getFamilyDocument(config.documents.Wakefield))\r     .then(() => queryCollection())\r     .then(() => replaceFamilyDocument(config.documents.Andersen))\r     .then(() => queryCollection())\r     .then(() => deleteFamilyDocument(config.documents.Andersen))\r     .then(() => cleanup())\r     .then(() => { exit(`Completed successfully`); })\r     .catch((error) => { exit(`Completed with error ${JSON.stringify(error)}`) });\r \r 在终端中，找到 ```app.js``` 文件并运行命令：```node app.js```\r \r 应该看到已启动应用的输出。 输出应该匹配下面的示例文本。\r \r     Getting database:\r     FamilyDB\r \r     Getting collection:\r     FamilyColl\r \r     Getting document:\r     Anderson.1\r \r     Getting document:\r     Wakefield.7\r \r     Querying collection through index:\r     FamilyColl\r         Query returned [{\"firstName\":\"Henriette Thaulow\",\"gender\":\"female\",\"grade\":5,\"pets\":[{\"givenName\":\"Fluffy\"}]}]\r \r     Replacing document:\r     Anderson.1\r \r     Querying collection through index:\r     FamilyColl\r         Query returned [{\"firstName\":\"Henriette Thaulow\",\"gender\":\"female\",\"grade\":6,\"pets\":[{\"givenName\":\"Fluffy\"}]}]\r \r     Deleting document:\r     Anderson.1\r \r     Cleaning up by deleting database FamilyDB\r     Completed successfully\r     Press any key to exit\r \r 祝贺！ 已完成 Node.js 教程，并成功创建了第一个 Azure Cosmos DB 控制台应用程序！\r \r ## <a name=\"GetSolution\"></a>获取完整的 Node.js 教程解决方案\r 如果没有时间完成本教程中的步骤，或者只需下载代码，则可从 [GitHub](https://github.com/Azure-Samples/documentdb-node-getting-started) 获取。\r \r 若要生成包含本文所有示例的 GetStarted 解决方案，需要以下内容：\r \r * [Azure Cosmos DB 帐户][create-account]。\r * GitHub 上提供的 [GetStarted](https://github.com/Azure-Samples/documentdb-node-getting-started) 解决方案。\r \r 通过 npm 安装 **documentdb** 模块。 请使用以下命令：\r \r * ```npm install documentdb --save```\r \r 接下来如[步骤 3：设置应用的配置](#Config)中所述，在 ```config.js``` 文件中更新 config.endpoint 和 config.primaryKey 的值。 \r \r 然后在终端中找到 ```app.js``` 文件并运行命令：```node app.js```。\r \r 就这么简单，生成以后即可开始操作！ \r \r ## <a name=\"next-steps\"></a>后续步骤\r * 想要更复杂的 Node.js 示例？ 请参阅[使用 Azure Cosmos DB 生成 Node.js Web 应用程序](documentdb-nodejs-application.md)。\r * 了解如何[监视 Azure Cosmos DB 帐户](monitor-accounts.md)。\r * 在 [Query Playground](https://www.documentdb.com/sql/demo)中对示例数据集运行查询。\r * 在 [Azure Cosmos DB 文档页](/documentdb/)的“开发”部分了解有关编程模型的详细信息。\r \r [create-account]: create-documentdb-dotnet.md#create-account\r [keys]: media/documentdb-nodejs-get-started/node-js-tutorial-keys.png\r \r <!--Update_Description: wording update-->"}