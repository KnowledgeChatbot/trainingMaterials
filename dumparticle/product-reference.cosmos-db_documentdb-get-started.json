{"Title":"Azure Cosmos DB：DocumentDB API 入门教程","Description":"有关使用 DocumentDB API 创建联机数据库和 C# 控制台应用程序的教程。","Content":"# <a name=\"azure-cosmos-db-documentdb-api-getting-started-tutorial\"></a>Azure Cosmos DB：DocumentDB API 入门教程\r > [!div class=\"op_single_selector\"]\r > * [.NET](documentdb-get-started.md)\r > * [.NET Core](documentdb-dotnetcore-get-started.md)\r > * [用于 MongoDB 的 Node.js](mongodb-samples.md)\r > * [Node.js](documentdb-nodejs-get-started.md)\r > * [Java](documentdb-java-get-started.md)\r > * [C++](documentdb-cpp-get-started.md)\r >  \r > \r \r 欢迎使用 Azure Cosmos DB DocumentDB API 入门教程！ 学习本教程后，将拥有一个可创建并查询 Azure Cosmos DB 资源的控制台应用程序。\r \r 我们介绍：\r \r * 创建并连接到 Azure Cosmos DB 帐户\r * 配置 Visual Studio 解决方案\r * 创建联机数据库\r * 创建集合\r * 创建 JSON 文档\r * 查询集合\r * 替换文档\r * 删除文档\r * 删除数据库\r \r 没有时间？ 不必担心！ 可在 [GitHub](https://github.com/Azure-Samples/documentdb-dotnet-getting-started)上获取完整的解决方案。 有关快速说明，请转到 [获取完整 NoSQL 教程解决方案部分](#GetSolution) 。\r \r 然后，请使用位于本页顶部或底部的投票按钮向我们提供反馈。 如果希望我们直接与你联系，欢迎将电子邮件地址附在评论中。\r \r 现在，让我们开始吧！\r \r ## <a name=\"prerequisites\"></a>先决条件\r 请确保具有以下内容：\r \r * 有效的 Azure 帐户。 如果没有，可以注册[免费帐户](https://www.azure.cn/pricing/1rmb-trial/)。 \r \r   [!INCLUDE [cosmos-db-emulator-docdb-api](../../includes/cosmos-db-emulator-docdb-api.md)]\r \r * [!INCLUDE [cosmos-db-emulator-vs](../../includes/cosmos-db-emulator-vs.md)]。\r \r ## <a name=\"step-1-create-an-azure-cosmos-db-account\"></a>步骤 1：创建 Azure Cosmos DB 帐户\r 创建 Azure Cosmos DB 帐户。 如果已经有一个想要使用的帐户，可以跳到 [设置 Visual Studio 解决方案](#SetupVS)。 如果使用 Azure Cosmos DB 模拟器，请遵循 [Azure Cosmos DB 模拟器](local-emulator.md)中的步骤设置该模拟器，并直接跳到[设置 Visual Studio 解决方案](#SetupVS)。\r \r [!INCLUDE [create-dbaccount](../../includes/cosmos-db-create-dbaccount.md)]\r \r ## <a name=\"SetupVS\"></a>第 2 步：设置 Visual Studio 解决方案\r 1. 在计算机上打开 **Visual Studio 2017**。\r 2. 在“文件”菜单中，依次选择“新建”、“项目”。\r 3. 在“新建项目”对话框中，选择“模板” / “Visual C#” / “控制台应用程序”，为项目命名，并单击“确定”。\r    ![“新建项目”窗口屏幕截图](./media/documentdb-get-started/nosql-tutorial-new-project-2.png)\r 4. 在“解决方案资源管理器”中，右键单击 Visual Studio 解决方案下方的新控制台应用程序，并单击“管理 NuGet 包...”\r \r     ![“项目”右键菜单屏幕截图](./media/documentdb-get-started/nosql-tutorial-manage-nuget-pacakges.png)\r 5. 在“Nuget”选项卡上，单击“浏览”，并在搜索框中输入 **azure documentdb**。\r 6. 在结果中找到 **Microsoft.Azure.DocumentDB**，并单击“安装”。\r    Azure Cosmos DB DocumentDB API 客户端库的包 ID 是 [Azure DocumentDB 客户端库](https://www.nuget.org/packages/Microsoft.Azure.DocumentDB/)。\r    ![用于查找 Azure Cosmos DB 客户端 SDK 的 Nuget 菜单的屏幕截图](./media/documentdb-get-started/nosql-tutorial-manage-nuget-pacakges-2.png)\r \r     如果收到有关查看解决方案更改的消息，请单击“确定” 。 如果收到有关接受许可证的消息，请单击“我接受” 。\r \r 很好！ 现在，我们已完成安装，让我们开始编写一些代码。 可以在 [GitHub](https://github.com/Azure-Samples/documentdb-dotnet-getting-started/blob/master/src/Program.cs)上找到本教程的完整代码项目。\r \r ## <a name=\"Connect\"></a>步骤 3：连接到 Azure Cosmos DB 帐户\r 首先，在 Program.cs 文件中 C# 应用程序的开始位置添加这些引用：\r \r     using System;\r     using System.Linq;\r     using System.Threading.Tasks;\r \r     // ADD THIS PART TO YOUR CODE\r     using System.Net;\r     using Microsoft.Azure.Documents;\r     using Microsoft.Azure.Documents.Client;\r     using Newtonsoft.Json;\r \r > [!IMPORTANT]\r > 为了完成本教程，请确保添加以上依赖关系。\r > \r > \r \r 现在，在公共类 *Program* 下面添加这两个常量和*客户端*变量。\r \r     public class Program\r     {\r         // ADD THIS PART TO YOUR CODE\r         private const string EndpointUrl = \"<your endpoint URL>\";\r         private const string PrimaryKey = \"<your primary key>\";\r         private DocumentClient client;\r \r 接下来，返回到 [Azure 门户](https://portal.azure.cn)检索终结点 URL 和主密钥。 终结点 URL 和主密钥是必需的，可让应用程序知道要连接的对象，使 Azure Cosmos DB 信任应用程序的连接。\r \r 在 Azure 门户中，导航到 Azure Cosmos DB 帐户，然后单击“密钥”。\r \r 从门户中复制该 URI 并将它粘贴到 program.cs 文件中的 `<your endpoint URL>`。 然后从门户中复制“主密钥”并将它粘贴到 `<your primary key>`。\r \r ![NoSQL 教程用于创建 C# 控制台应用程序的 Azure 门户的屏幕截图。 显示了一个 Azure Cosmos DB 帐户，在“Azure Cosmos DB 帐户”边栏选项卡上突出显示了“ACTIVE”中心、“密钥”按钮，在“密钥”边栏选项卡上突出显示了 URI、主密钥、辅助密钥的值][keys]\r \r 接下来，我们开始使用应用程序时，请首先创建一个新的 **DocumentClient** 实例。\r \r 在 **Main** 方法下面，添加这个名为 **GetStartedDemo** 的新异步任务，将新的 **DocumentClient** 实例化。\r \r     static void Main(string[] args)\r     {\r     }\r \r     // ADD THIS PART TO YOUR CODE\r     private async Task GetStartedDemo()\r     {\r         this.client = new DocumentClient(new Uri(EndpointUrl), PrimaryKey);\r     }\r \r 添加以下代码，从 **Main** 方法中运行异步任务。 \r             **Main** 方法会捕获异常并将它们写到控制台上。\r \r     static void Main(string[] args)\r     {\r             // ADD THIS PART TO YOUR CODE\r             try\r             {\r                     Program p = new Program();\r                     p.GetStartedDemo().Wait();\r             }\r             catch (DocumentClientException de)\r             {\r                     Exception baseException = de.GetBaseException();\r                     Console.WriteLine(\"{0} error occurred: {1}, Message: {2}\", de.StatusCode, de.Message, baseException.Message);\r             }\r             catch (Exception e)\r             {\r                     Exception baseException = e.GetBaseException();\r                     Console.WriteLine(\"Error: {0}, Message: {1}\", e.Message, baseException.Message);\r             }\r             finally\r             {\r                     Console.WriteLine(\"End of demo, press any key to exit.\");\r                     Console.ReadKey();\r             }\r \r 按 **F5** 运行应用程序。 控制台窗口输出会显示消息 `End of demo, press any key to exit.` ，确认已建立连接。  然后，可以关闭控制台窗口。 \r \r 祝贺！ 成功连接到 Azure Cosmos DB 帐户后，接下来应了解如何使用 Azure Cosmos DB 资源。  \r \r ## <a name=\"step-4-create-a-database\"></a>第 4 步：创建数据库\r 在添加创建数据库的代码之前，添加一个用于向控制台写入的帮助器方法。\r \r 将 **WriteToConsoleAndPromptToContinue** 方法复制并粘贴到 **GetStartedDemo** 方法后面。\r \r     // ADD THIS PART TO YOUR CODE\r     private void WriteToConsoleAndPromptToContinue(string format, params object[] args)\r     {\r             Console.WriteLine(format, args);\r             Console.WriteLine(\"Press any key to continue ...\");\r             Console.ReadKey();\r     }\r \r 可以通过使用 DocumentClient 类的 [CreateDatabaseIfNotExistsAsync](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdatabaseifnotexistsasync.aspx) 方法来创建 Azure Cosmos DB [数据库](documentdb-resources.md#databases)。 数据库是跨集合分区的 JSON 文档存储的逻辑容器。\r \r 将以下代码复制并粘贴到客户端创建后面的 **GetStartedDemo** 方法。 这会创建一个名为 *FamilyDB* 的数据库。\r \r     private async Task GetStartedDemo()\r     {\r         this.client = new DocumentClient(new Uri(EndpointUrl), PrimaryKey);\r \r         // ADD THIS PART TO YOUR CODE\r         await this.client.CreateDatabaseIfNotExistsAsync(new Database { Id = \"FamilyDB\" });\r \r 按 **F5** 运行应用程序。\r \r 祝贺！ 已成功创建了 Azure Cosmos DB 数据库。  \r \r ## <a name=\"CreateColl\"></a>步骤 5：创建集合\r > [!WARNING]\r > **CreateDocumentCollectionIfNotExistsAsync** 将创建一个具有保留吞吐量的新集合，它牵涉定价。 有关详细信息，请访问 [定价页](https://www.azure.cn/pricing/details/cosmos-db/)。\r > \r > \r \r 可以通过使用 **DocumentClient** 类的 [CreateDocumentCollectionIfNotExistsAsync](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdocumentcollectionifnotexistsasync.aspx) 方法来创建[集合](documentdb-resources.md#collections)。 集合是 JSON 文档和相关联的 JavaScript 应用程序逻辑的容器。\r \r 将以下代码复制并粘贴到数据库创建后的 **GetStartedDemo** 方法。 这将创建一个名为 *FamilyCollection* 的文档集合。\r \r         this.client = new DocumentClient(new Uri(EndpointUrl), PrimaryKey);\r \r         await this.client.CreateDatabaseIfNotExistsAsync(new Database { Id = \"FamilyDB\" });\r \r         // ADD THIS PART TO YOUR CODE\r          await this.client.CreateDocumentCollectionIfNotExistsAsync(UriFactory.CreateDatabaseUri(\"FamilyDB\"), new DocumentCollection { Id = \"FamilyCollection\" });\r \r 按 **F5** 运行应用程序。\r \r 祝贺！ 已成功创建了 Azure Cosmos DB 文档集合。  \r \r ## <a name=\"CreateDoc\"></a>步骤 6：创建 JSON 文档\r 可以通过使用 **DocumentClient** 类的 [CreateDocumentAsync](https://msdn.microsoft.com/library/microsoft.azure.documents.client.documentclient.createdocumentasync.aspx) 方法创建[文档](documentdb-resources.md#documents)。 文档为用户定义的（任意）JSON 内容。 现在，我们可以插入一个或多个文档。 如果已有要在数据库中存储的数据，则可以使用 Azure Cosmos DB 的[数据迁移工具](import-data.md)将数据导入数据库。\r \r 在本例中，首先需要创建 **Family** 类来表示存储在 Azure Cosmos DB 中的对象。 此外还将创建 **Family** 中使用的 **Parent**、**Child**、**Pet** 和 **Address** 子类。 请注意，文档必须将 **ID** 属性序列化为 JSON 格式的 **ID**。 通过在 **GetStartedDemo** 方法后添加以下内部子类来创建这些类。\r \r 将 **Family**、**Parent**、**Child**、**Pet** 和 **Address** 类复制并粘贴到 **WriteToConsoleAndPromptToContinue** 方法后面。\r \r     private void WriteToConsoleAndPromptToContinue(string format, params object[] args)\r     {\r         Console.WriteLine(format, args);\r         Console.WriteLine(\"Press any key to continue ...\");\r         Console.ReadKey();\r     }\r \r     // ADD THIS PART TO YOUR CODE\r     public class Family\r     {\r         [JsonProperty(PropertyName = \"id\")]\r         public string Id { get; set; }\r         public string LastName { get; set; }\r         public Parent[] Parents { get; set; }\r         public Child[] Children { get; set; }\r         public Address Address { get; set; }\r         public bool IsRegistered { get; set; }\r         public override string ToString()\r         {\r             return JsonConvert.SerializeObject(this);\r         }\r     }\r \r     public class Parent\r     {\r         public string FamilyName { get; set; }\r         public string FirstName { get; set; }\r     }\r \r     public class Child\r     {\r         public string FamilyName { get; set; }\r         public string FirstName { get; set; }\r         public string Gender { get; set; }\r         public int Grade { get; set; }\r         public Pet[] Pets { get; set; }\r     }\r \r     public class Pet\r     {\r         public string GivenName { get; set; }\r     }\r \r     public class Address\r     {\r         public string State { get; set; }\r         public string County { get; set; }\r         public string City { get; set; }\r     }\r \r 将 **CreateFamilyDocumentIfNotExists** 方法复制并粘贴到 **Address** 类下面。\r \r     // ADD THIS PART TO YOUR CODE\r     private async Task CreateFamilyDocumentIfNotExists(string databaseName, string collectionName, Family family)\r     {\r         try\r         {\r             await this.client.ReadDocumentAsync(UriFactory.CreateDocumentUri(databaseName, collectionName, family.Id));\r             this.WriteToConsoleAndPromptToContinue(\"Found {0}\", family.Id);\r         }\r         catch (DocumentClientException de)\r         {\r             if (de.StatusCode == HttpStatusCode.NotFound)\r             {\r                 await this.client.CreateDocumentAsync(UriFactory.CreateDocumentCollectionUri(databaseName, collectionName), family);\r                 this.WriteToConsoleAndPromptToContinue(\"Created Family {0}\", family.Id);\r             }\r             else\r             {\r                 throw;\r             }\r         }\r     }\r \r 然后插入两个文档，Andersen Family 和 Wakefield Family 各一个。\r \r 将以下代码复制并粘贴到文档集合创建后面的 **GetStartedDemo** 方法。\r \r     await this.client.CreateDatabaseIfNotExistsAsync(new Database { Id = \"FamilyDB\" });\r \r     await this.client.CreateDocumentCollectionIfNotExistsAsync(UriFactory.CreateDatabaseUri(\"FamilyDB\"), new DocumentCollection { Id = \"FamilyCollection\" });\r \r     // ADD THIS PART TO YOUR CODE\r     Family andersenFamily = new Family\r     {\r             Id = \"Andersen.1\",\r             LastName = \"Andersen\",\r             Parents = new Parent[]\r             {\r                     new Parent { FirstName = \"Thomas\" },\r                     new Parent { FirstName = \"Mary Kay\" }\r             },\r             Children = new Child[]\r             {\r                     new Child\r                     {\r                             FirstName = \"Henriette Thaulow\",\r                             Gender = \"female\",\r                             Grade = 5,\r                             Pets = new Pet[]\r                             {\r                                     new Pet { GivenName = \"Fluffy\" }\r                             }\r                     }\r             },\r             Address = new Address { State = \"WA\", County = \"King\", City = \"Seattle\" },\r             IsRegistered = true\r     };\r \r     await this.CreateFamilyDocumentIfNotExists(\"FamilyDB\", \"FamilyCollection\", andersenFamily);\r \r     Family wakefieldFamily = new Family\r     {\r             Id = \"Wakefield.7\",\r             LastName = \"Wakefield\",\r             Parents = new Parent[]\r             {\r                     new Parent { FamilyName = \"Wakefield\", FirstName = \"Robin\" },\r                     new Parent { FamilyName = \"Miller\", FirstName = \"Ben\" }\r             },\r             Children = new Child[]\r             {\r                     new Child\r                     {\r                             FamilyName = \"Merriam\",\r                             FirstName = \"Jesse\",\r                             Gender = \"female\",\r                             Grade = 8,\r                             Pets = new Pet[]\r                             {\r                                     new Pet { GivenName = \"Goofy\" },\r                                     new Pet { GivenName = \"Shadow\" }\r                             }\r                     },\r                     new Child\r                     {\r                             FamilyName = \"Miller\",\r                             FirstName = \"Lisa\",\r                             Gender = \"female\",\r                             Grade = 1\r                     }\r             },\r             Address = new Address { State = \"NY\", County = \"Manhattan\", City = \"NY\" },\r             IsRegistered = false\r     };\r \r     await this.CreateFamilyDocumentIfNotExists(\"FamilyDB\", \"FamilyCollection\", wakefieldFamily);\r \r 按 **F5** 运行应用程序。\r \r 祝贺！ 已成功创建了两个 Azure Cosmos DB 文档。  \r \r ![说明 NoSQL 教程创建 C# 控制台应用程序所用帐户、联机数据库、集合和文档的层次关系的图表](./media/documentdb-get-started/nosql-tutorial-account-database.png)\r \r ## <a name=\"Query\"></a>步骤 7：查询 Azure Cosmos DB 资源\r Azure Cosmos DB 支持对存储在每个集合中的 JSON 文档进行各种[查询](documentdb-sql-query.md)。  下面的示例代码演示了各种查询（使用 Azure Cosmos DB SQL 语法以及 LINQ），可以针对上一步中插入的文档执行查询。\r \r 将 **ExecuteSimpleQuery** 方法复制并粘贴到 **CreateFamilyDocumentIfNotExists** 方法后面。\r \r     // ADD THIS PART TO YOUR CODE\r     private void ExecuteSimpleQuery(string databaseName, string collectionName)\r     {\r         // Set some common query options\r         FeedOptions queryOptions = new FeedOptions { MaxItemCount = -1 };\r \r             // Here we find the Andersen family via its LastName\r             IQueryable<Family> familyQuery = this.client.CreateDocumentQuery<Family>(\r                     UriFactory.CreateDocumentCollectionUri(databaseName, collectionName), queryOptions)\r                     .Where(f => f.LastName == \"Andersen\");\r \r             // The query is executed synchronously here, but can also be executed asynchronously via the IDocumentQuery<T> interface\r             Console.WriteLine(\"Running LINQ query...\");\r             foreach (Family family in familyQuery)\r             {\r                     Console.WriteLine(\"\\tRead {0}\", family);\r             }\r \r             // Now execute the same query via direct SQL\r             IQueryable<Family> familyQueryInSql = this.client.CreateDocumentQuery<Family>(\r                     UriFactory.CreateDocumentCollectionUri(databaseName, collectionName),\r                     \"SELECT * FROM Family WHERE Family.LastName = 'Andersen'\",\r                     queryOptions);\r \r             Console.WriteLine(\"Running direct SQL query...\");\r             foreach (Family family in familyQueryInSql)\r             {\r                     Console.WriteLine(\"\\tRead {0}\", family);\r             }\r \r             Console.WriteLine(\"Press any key to continue ...\");\r             Console.ReadKey();\r     }\r \r 将以下代码复制并粘贴到第二个文档创建后的 **GetStartedDemo** 方法。\r \r     await this.CreateFamilyDocumentIfNotExists(\"FamilyDB\", \"FamilyCollection\", wakefieldFamily);\r \r     // ADD THIS PART TO YOUR CODE\r     this.ExecuteSimpleQuery(\"FamilyDB\", \"FamilyCollection\");\r \r 按 **F5** 运行应用程序。\r \r 祝贺！ 已成功完成了对 Azure Cosmos DB 集合的查询。\r \r 下图说明了如何对已创建的集合调用 Azure Cosmos DB SQL 查询语法，相同的逻辑也适用于 LINQ 查询。\r \r ![说明 NoSQL 教程创建 C# 控制台应用程序所用查询的范围和意义的图表](./media/documentdb-get-started/nosql-tutorial-collection-documents.png)\r \r 查询中的关键字 [FROM](documentdb-sql-query.md#FromClause) 是可选项，因为 Azure Cosmos DB 查询已限制为单个集合。 因此，“FROM Families f”可与“FROM root r”或者任何其他所选变量名进行交换。 Azure Cosmos DB 将推断所选 Families、root 或变量名，并默认引用当前集合。\r \r ## <a name=\"ReplaceDocument\"></a>步骤 8：替换 JSON 文档\r Azure Cosmos DB 支持替换 JSON 文档。  \r \r 将 **ReplaceFamilyDocument** 方法复制并粘贴到 **ExecuteSimpleQuery** 方法后面。\r \r     // ADD THIS PART TO YOUR CODE\r     private async Task ReplaceFamilyDocument(string databaseName, string collectionName, string familyName, Family updatedFamily)\r     {\r          await this.client.ReplaceDocumentAsync(UriFactory.CreateDocumentUri(databaseName, collectionName, familyName), updatedFamily);\r          this.WriteToConsoleAndPromptToContinue(\"Replaced Family {0}\", familyName);\r     }\r \r 将以下代码复制并粘贴到查询执行后的 **GetStartedDemo** 方法结尾。 替换文档之后，会再次运行相同查询以查看更改后的文档。\r \r     await this.CreateFamilyDocumentIfNotExists(\"FamilyDB\", \"FamilyCollection\", wakefieldFamily);\r \r     this.ExecuteSimpleQuery(\"FamilyDB\", \"FamilyCollection\");\r \r     // ADD THIS PART TO YOUR CODE\r     // Update the Grade of the Andersen Family child\r     andersenFamily.Children[0].Grade = 6;\r \r     await this.ReplaceFamilyDocument(\"FamilyDB\", \"FamilyCollection\", \"Andersen.1\", andersenFamily);\r \r     this.ExecuteSimpleQuery(\"FamilyDB\", \"FamilyCollection\");\r \r 按 **F5** 运行应用程序。\r \r 祝贺！ 已成功替换了 Azure Cosmos DB 文档。\r \r ## <a name=\"DeleteDocument\"></a>步骤 9：删除 JSON 文档\r Azure Cosmos DB 支持删除 JSON 文档。  \r \r 将 **DeleteFamilyDocument** 方法复制并粘贴到 **ReplaceFamilyDocument** 方法后面。\r \r     // ADD THIS PART TO YOUR CODE\r     private async Task DeleteFamilyDocument(string databaseName, string collectionName, string documentName)\r     {\r          await this.client.DeleteDocumentAsync(UriFactory.CreateDocumentUri(databaseName, collectionName, documentName));\r          Console.WriteLine(\"Deleted Family {0}\", documentName);\r     }\r \r 将以下代码复制并粘贴到第二个查询执行后的 **GetStartedDemo** 方法结尾。\r \r     await this.ReplaceFamilyDocument(\"FamilyDB\", \"FamilyCollection\", \"Andersen.1\", andersenFamily);\r \r     this.ExecuteSimpleQuery(\"FamilyDB\", \"FamilyCollection\");\r \r     // ADD THIS PART TO CODE\r     await this.DeleteFamilyDocument(\"FamilyDB\", \"FamilyCollection\", \"Andersen.1\");\r \r 按 **F5** 运行应用程序。\r \r 祝贺！ 已成功删除了 Azure Cosmos DB 文档。\r \r ## <a name=\"DeleteDatabase\"></a>步骤 10：删除数据库\r 删除已创建的数据库会删除该数据库及其所有子资源（集合、文档等）。\r \r 将以下代码复制并粘贴到文档删除后的 **GetStartedDemo** 方法，删除整个数据库和所有子资源。\r \r     this.ExecuteSimpleQuery(\"FamilyDB\", \"FamilyCollection\");\r \r     await this.DeleteFamilyDocument(\"FamilyDB\", \"FamilyCollection\", \"Andersen.1\");\r \r     // ADD THIS PART TO CODE\r     // Clean up/delete the database\r     await this.client.DeleteDatabaseAsync(UriFactory.CreateDatabaseUri(\"FamilyDB\"));\r \r 按 **F5** 运行应用程序。\r \r 祝贺！ 已成功删除了 Azure Cosmos DB 数据库。\r \r ## <a name=\"Run\"></a>步骤 11：一起运行 C# 控制台应用程序！\r 在 Visual Studio 中按 F5，即可在调试模式下构建应用程序。\r \r 应会在控制台窗口中看到已启动应用的输出。 输出会显示我们所添加的查询的结果，并且应与下面的示例文本相匹配。\r \r     Created FamilyDB\r     Press any key to continue ...\r     Created FamilyCollection\r     Press any key to continue ...\r     Created Family Andersen.1\r     Press any key to continue ...\r     Created Family Wakefield.7\r     Press any key to continue ...\r     Running LINQ query...\r         Read {\"id\":\"Andersen.1\",\"LastName\":\"Andersen\",\"District\":\"WA5\",\"Parents\":[{\"FamilyName\":null,\"FirstName\":\"Thomas\"},{\"FamilyName\":null,\"FirstName\":\"Mary Kay\"}],\"Children\":[{\"FamilyName\":null,\"FirstName\":\"Henriette Thaulow\",\"Gender\":\"female\",\"Grade\":5,\"Pets\":[{\"GivenName\":\"Fluffy\"}]}],\"Address\":{\"State\":\"WA\",\"County\":\"King\",\"City\":\"Seattle\"},\"IsRegistered\":true}\r     Running direct SQL query...\r         Read {\"id\":\"Andersen.1\",\"LastName\":\"Andersen\",\"District\":\"WA5\",\"Parents\":[{\"FamilyName\":null,\"FirstName\":\"Thomas\"},{\"FamilyName\":null,\"FirstName\":\"Mary Kay\"}],\"Children\":[{\"FamilyName\":null,\"FirstName\":\"Henriette Thaulow\",\"Gender\":\"female\",\"Grade\":5,\"Pets\":[{\"GivenName\":\"Fluffy\"}]}],\"Address\":{\"State\":\"WA\",\"County\":\"King\",\"City\":\"Seattle\"},\"IsRegistered\":true}\r     Replaced Family Andersen.1\r     Press any key to continue ...\r     Running LINQ query...\r         Read {\"id\":\"Andersen.1\",\"LastName\":\"Andersen\",\"District\":\"WA5\",\"Parents\":[{\"FamilyName\":null,\"FirstName\":\"Thomas\"},{\"FamilyName\":null,\"FirstName\":\"Mary Kay\"}],\"Children\":[{\"FamilyName\":null,\"FirstName\":\"Henriette Thaulow\",\"Gender\":\"female\",\"Grade\":6,\"Pets\":[{\"GivenName\":\"Fluffy\"}]}],\"Address\":{\"State\":\"WA\",\"County\":\"King\",\"City\":\"Seattle\"},\"IsRegistered\":true}\r     Running direct SQL query...\r         Read {\"id\":\"Andersen.1\",\"LastName\":\"Andersen\",\"District\":\"WA5\",\"Parents\":[{\"FamilyName\":null,\"FirstName\":\"Thomas\"},{\"FamilyName\":null,\"FirstName\":\"Mary Kay\"}],\"Children\":[{\"FamilyName\":null,\"FirstName\":\"Henriette Thaulow\",\"Gender\":\"female\",\"Grade\":6,\"Pets\":[{\"GivenName\":\"Fluffy\"}]}],\"Address\":{\"State\":\"WA\",\"County\":\"King\",\"City\":\"Seattle\"},\"IsRegistered\":true}\r     Deleted Family Andersen.1\r     End of demo, press any key to exit.\r \r 祝贺！ 已经完成了本教程，并且获得了一个正常工作的 C# 控制台应用程序！\r \r ## <a name=\"GetSolution\"></a> 获取完整的教程解决方案\r 如果没有时间完成本教程中的步骤，或者只需下载代码示例，则可从 [GitHub](https://github.com/Azure-Samples/documentdb-dotnet-getting-started) 获取。 \r \r 若要生成 GetStarted 解决方案，需要以下各项：\r \r * 有效的 Azure 帐户。 如果没有，可以注册[免费帐户](https://www.azure.cn/pricing/1rmb-trial/)。\r * 一个 [Azure Cosmos DB 帐户][cosmos-db-create-account]。\r * GitHub 上提供的 [GetStarted](https://github.com/Azure-Samples/documentdb-dotnet-getting-started) 解决方案。\r \r 若要在 Visual Studio 中还原 Azure Cosmos DB .NET SDK 的引用，请在解决方案资源管理器中右键单击“GetStarted”解决方案，并单击“启用 NuGet 程序包还原”。 接下来，按照[连接到 Azure Cosmos DB 帐户](#Connect)中所述的方法在 App.config 文件中更新 EndpointUrl 和 AuthorizationKey 值。\r \r 就这么简单，生成以后即可开始操作！\r \r ## <a name=\"next-steps\"></a>后续步骤\r * 需要更复杂的 ASP.NET MVC 教程？ 请参阅 [ASP.NET MVC 教程：使用 Azure Cosmos DB 开发 Web 应用程序](documentdb-dotnet-application.md)。\r * 希望使用 Azure Cosmos DB 执行规模和性能测试？ 请参阅[使用 Azure Cosmos DB 执行性能和扩展测试](performance-testing.md)\r * 了解如何[监视 Azure Cosmos DB 请求、使用情况和存储](monitor-accounts.md)。\r * 在 [Query Playground](https://www.documentdb.com/sql/demo)中对示例数据集运行查询。\r * 若要了解有关 Azure Cosmos DB 的详细信息，请参阅[欢迎使用 Azure Cosmos DB](/cosmos-db/introduction)。\r \r [keys]: media/documentdb-get-started/nosql-tutorial-keys.png\r [cosmos-db-create-account]: create-documentdb-dotnet.md#create-account\r \r <!--Update_Description: update link, wording update-->"}