{"Title":"计算机视觉 API JavaScript 教程","Description":"探讨一个使用 Microsoft 认知服务中的计算机视觉 API 的基本 JavaScript 应用。 执行 OCR，创建缩略图，并处理图像中的视觉特征。","Content":"# <a name=\"computer-vision-api-javascript-tutorial\"></a>计算机视觉 API JavaScript 教程\r \r 本教程介绍 Microsoft 认知服务计算机视觉 REST API 的功能。\r \r 探讨一个使用计算机视觉 REST API 执行光学字符识别 (OCR)、创建智能裁剪的缩略图，以及在图像中检测、标记和描述视觉特征（包括人脸）并对其分类的 JavaScript 应用程序。 此示例允许提交图像 URL 来分析或处理图像。 可以使用此开源示例作为模板在 JavaScript 中生成自己的应用，以便使用计算机视觉 REST API。\r \r JavaScript 形式的应用程序已编写好，但尚无计算机视觉功能。 在本教程中，请添加特定于计算机视觉 REST API 的代码，以便完成应用程序的功能。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r ### <a name=\"platform-requirements\"></a>平台要求\r \r 本教程的内容已使用简单的文本编辑器开发。\r \r ### <a name=\"subscribe-to-computer-vision-api-and-get-a-subscription-key\"></a>订阅计算机视觉 API 并获取订阅密钥 \r \r 创建示例之前，必须在 [Azure 门户](https://portal.azure.cn)中创建带计算机视觉 API 的认知服务， 然后即可获取订阅密钥。\r \r ## <a name=\"download-the-tutorial-project\"></a>下载教程项目\r \r 克隆 [Cognitive Services JavaScript Computer Vision Tutorial](https://github.com/Azure-Samples/cognitive-services-javascript-computer-vision-tutorial)（认知服务 JavaScript 计算机视觉教程），或下载 .zip 文件并将其解压缩到空目录。\r \r 若要使用已完成的的教程（添加了所有教程代码），可以使用 Completed 文件夹中的文件。\r \r ## <a name=\"add-the-tutorial-code\"></a>添加教程代码\r \r JavaScript 应用程序使用六个 .html 文件进行设置，每个文件对应于一个功能。 每个文件演示的计算机视觉功能（分析、OCR 等）各不相同。 教程的六个部分并不互相依赖，因此可以将教程代码添加到一个文件、所有六个文件或者部分文件。 可以按任意顺序将教程代码添加到文件中。\r \r 让我们开始吧。\r \r ## <a name=\"analyze-an-image\"></a>分析图像\r \r 计算机视觉的分析功能可以针对 2,000 多个可识别对象、生物、场景和动作对图像进行分析。 分析完成以后，分析功能会返回一个 JSON 对象，用描述性标记、颜色分析、标题等对图像进行描述。\r \r 若要完成教程应用程序的分析功能，请执行以下步骤：\r \r ### <a name=\"analyze-step-1-add-the-event-handler-code-for-the-form-button\"></a>分析步骤 1：为窗体按钮添加事件处理程序代码\r \r 在文本编辑器中打开 analyze.html 文件，找到文件底部的 analyzeButtonClick 函数。\r \r analyzeButtonClick 事件处理程序函数会清除窗体，显示在 URL 中指定的图像，然后调用 AnalyzeImage 函数进行图像分析。\r \r 将以下代码复制并粘贴到 analyzeButtonClick 函数中。\r \r ```javascript\r function analyzeButtonClick() {\r \r     // Clear the display fields.\r     $(\"#sourceImage\").attr(\"src\", \"#\");\r     $(\"#responseTextArea\").val(\"\");\r     $(\"#captionSpan\").text(\"\");\r     \r     // Display the image.\r     var sourceImageUrl = $(\"#inputImage\").val();\r     $(\"#sourceImage\").attr(\"src\", sourceImageUrl);\r     \r     AnalyzeImage(sourceImageUrl, $(\"#responseTextArea\"), $(\"#captionSpan\"));\r }\r ```\r \r ### <a name=\"analyze-step-2-add-the-wrapper-for-the-rest-api-call\"></a>分析步骤 2：为 REST API 调用添加包装器\r \r AnalyzeImage 函数包装进行图像分析的 REST API 调用。 成功返回以后，会在指定的文本区域显示格式化的 JSON 分析，并会按指定的时间间隔显示标题。\r \r 复制 AnalyzeImage 函数代码并将其粘贴到 analyzeButtonClick 函数下方。\r \r ```javascript\r /* Analyze the image at the specified URL by using Microsoft Cognitive Services Analyze Image API.\r  - @param {string} sourceImageUrl - The URL to the image to analyze.\r  - @param {<textarea> element} responseTextArea - The text area to display the JSON string returned\r  -                             from the REST API call, or to display the error message if there was \r  -                             an error.\r  - @param {<span> element} captionSpan - The span to display the image caption.\r  */\r function AnalyzeImage(sourceImageUrl, responseTextArea, captionSpan) {\r     // Request parameters.\r     var params = {\r         \"visualFeatures\": \"Categories,Description,Color\",\r         \"details\": \"\",\r         \"language\": \"en\",\r     };\r     \r     // Perform the REST API call.\r     $.ajax({\r         url: common.uriBasePreRegion + \r              $(\"#subscriptionRegionSelect\").val() + \r              common.uriBasePostRegion + \r              common.uriBaseAnalyze +\r              \"?\" + \r              $.param(params),\r                     \r         // Request headers.\r         beforeSend: function(jqXHR){\r             jqXHR.setRequestHeader(\"Content-Type\",\"application/json\");\r             jqXHR.setRequestHeader(\"Ocp-Apim-Subscription-Key\", \r                 encodeURIComponent($(\"#subscriptionKeyInput\").val()));\r         },\r         \r         type: \"POST\",\r         \r         // Request body.\r         data: '{\"url\": ' + '\"' + sourceImageUrl + '\"}',\r     })\r     \r     .done(function(data) {\r         // Show formatted JSON on webpage.\r         responseTextArea.val(JSON.stringify(data, null, 2));\r         \r         // Extract and display the caption and confidence from the first caption in the description object.\r         if (data.description && data.description.captions) {\r             var caption = data.description.captions[0];\r             \r             if (caption.text && caption.confidence) {\r                 captionSpan.text(\"Caption: \" + caption.text +\r                     \" (confidence: \" + caption.confidence + \").\");\r             }\r         }\r     })\r     \r     .fail(function(jqXHR, textStatus, errorThrown) {\r         // Prepare the error string.\r         var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r         errorString += (jqXHR.responseText === \"\") ? \"\" : (jQuery.parseJSON(jqXHR.responseText).message) ? \r             jQuery.parseJSON(jqXHR.responseText).message : jQuery.parseJSON(jqXHR.responseText).error.message;\r         \r         // Put the error JSON in the response textarea.\r         responseTextArea.val(JSON.stringify(jqXHR, null, 2));\r         \r         // Show the error message.\r         alert(errorString);\r     });\r }\r ```\r \r ### <a name=\"analyze-step-3-run-the-application\"></a>分析步骤 3：运行应用程序\r \r 保存 analyze.html 文件，然后在 Web 浏览器中将其打开。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 输入要分析的图像的 URL，然后单击“分析图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"recognize-a-landmark\"></a>识别地标\r \r 计算机视觉的地标功能可以分析图像中是否存在自然的和人工的地标，例如山脉或著名建筑。 分析完以后，地标功能会返回一个 JSON 对象，其中标识了图像中发现的地标。\r \r 若要完成教程应用程序的地标功能，请执行以下步骤：\r \r ### <a name=\"landmark-step-1-add-the-event-handler-code-for-the-form-button\"></a>地标步骤 1：为窗体按钮添加事件处理程序代码\r \r 在文本编辑器中打开 landmark.html 文件，找到文件底部的 landmarkButtonClick 函数。\r \r landmarkButtonClick 事件处理程序函数会清除窗体，显示在 URL 中指定的图像，然后调用 IdentifyLandmarks 函数进行图像分析。\r \r 将以下代码复制并粘贴到 landmarkButtonClick 函数中。\r \r ```javascript\r function landmarkButtonClick() {\r \r     // Clear the display fields.\r     $(\"#sourceImage\").attr(\"src\", \"#\");\r     $(\"#responseTextArea\").val(\"\");\r     $(\"#captionSpan\").text(\"\");\r     \r     // Display the image.\r     var sourceImageUrl = $(\"#inputImage\").val();\r     $(\"#sourceImage\").attr(\"src\", sourceImageUrl);\r     \r     IdentifyLandmarks(sourceImageUrl, $(\"#responseTextArea\"), $(\"#captionSpan\"));\r }\r ```\r \r ### <a name=\"landmark-step-2-add-the-wrapper-for-the-rest-api-call\"></a>地标步骤 2：为 REST API 调用添加包装器\r \r IdentifyLandmarks 函数包装进行图像分析的 REST API 调用。 成功返回以后，会在指定的文本区域显示格式化的 JSON 分析，并会按指定的时间间隔显示标题。\r \r 复制 IdentifyLandmarks 函数代码并将其粘贴到 landmarkButtonClick 函数下方。\r \r ```javascript\r /* Identify landmarks in the image at the specified URL by using Microsoft Cognitive Services \r  - Landmarks API.\r  - @param {string} sourceImageUrl - The URL to the image to analyze for landmarks.\r  - @param {<textarea> element} responseTextArea - The text area to display the JSON string returned\r  -                             from the REST API call, or to display the error message if there was \r  -                             an error.\r  - @param {<span> element} captionSpan - The span to display the image caption.\r  */\r function IdentifyLandmarks(sourceImageUrl, responseTextArea, captionSpan) {\r     // Request parameters.\r     var params = {\r         \"model\": \"landmarks\"\r     };\r     \r     // Perform the REST API call.\r     $.ajax({\r         url: common.uriBasePreRegion + \r              $(\"#subscriptionRegionSelect\").val() + \r              common.uriBasePostRegion + \r              common.uriBaseLandmark +\r              \"?\" + \r              $.param(params),\r                     \r         // Request headers.\r         beforeSend: function(jqXHR){\r             jqXHR.setRequestHeader(\"Content-Type\",\"application/json\");\r             jqXHR.setRequestHeader(\"Ocp-Apim-Subscription-Key\", \r                 encodeURIComponent($(\"#subscriptionKeyInput\").val()));\r         },\r         \r         type: \"POST\",\r         \r         // Request body.\r         data: '{\"url\": ' + '\"' + sourceImageUrl + '\"}',\r     })\r     \r     .done(function(data) {\r         // Show formatted JSON on webpage.\r         responseTextArea.val(JSON.stringify(data, null, 2));\r         \r         // Extract and display the caption and confidence from the first caption in the description object.\r         if (data.result && data.result.landmarks) {\r             var landmark = data.result.landmarks[0];\r             \r             if (landmark.name && landmark.confidence) {\r                 captionSpan.text(\"Landmark: \" + landmark.name +\r                     \" (confidence: \" + landmark.confidence + \").\");\r             }\r         }\r     })\r     \r     .fail(function(jqXHR, textStatus, errorThrown) {\r         // Prepare the error string.\r         var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r         errorString += (jqXHR.responseText === \"\") ? \"\" : (jQuery.parseJSON(jqXHR.responseText).message) ? \r             jQuery.parseJSON(jqXHR.responseText).message : jQuery.parseJSON(jqXHR.responseText).error.message;\r         \r         // Put the error JSON in the response textarea.\r         responseTextArea.val(JSON.stringify(jqXHR, null, 2));\r         \r         // Show the error message.\r         alert(errorString);\r     });\r }\r ```\r \r ### <a name=\"landmark-step-3-run-the-application\"></a>地标步骤 3：运行应用程序\r \r 保存 landmark.html 文件，然后在 Web 浏览器中将其打开。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 输入要分析的图像的 URL，然后单击“分析图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"recognize-celebrities\"></a>识别名人\r \r 计算机视觉的名人功能分析图像中是否存在名人。 分析完以后，名人功能会返回一个 JSON 对象，其中标识了图像中发现的名人。\r \r 若要完成教程应用程序的名人功能，请执行以下步骤：\r \r ### <a name=\"celebrities-step-1-add-the-event-handler-code-for-the-form-button\"></a>名人步骤 1：为窗体按钮添加事件处理程序代码\r \r 在文本编辑器中打开 celebrities.html 文件，找到文件底部的 celebritiesButtonClick 函数。\r \r celebritiesButtonClick 事件处理程序函数会清除窗体，显示在 URL 中指定的图像，然后调用 IdentifyCelebrities 函数进行图像分析。\r \r 将以下代码复制并粘贴到 celebritiesButtonClick 函数中。\r \r ```javascript\r function celebritiesButtonClick() {\r \r     // Clear the display fields.\r     $(\"#sourceImage\").attr(\"src\", \"#\");\r     $(\"#responseTextArea\").val(\"\");\r     $(\"#captionSpan\").text(\"\");\r     \r     // Display the image.\r     var sourceImageUrl = $(\"#inputImage\").val();\r     $(\"#sourceImage\").attr(\"src\", sourceImageUrl);\r     \r     IdentifyCelebrities(sourceImageUrl, $(\"#responseTextArea\"), $(\"#captionSpan\"));\r }\r ```\r \r ### <a name=\"celebrities-step-2-add-the-wrapper-for-the-rest-api-call\"></a>名人步骤 2：为 REST API 调用添加包装器\r \r ```javascript\r /* Identify celebrities in the image at the specified URL by using Microsoft Cognitive Services \r  - Celebrities API.\r  - @param {string} sourceImageUrl - The URL to the image to analyze for celebrities.\r  - @param {<textarea> element} responseTextArea - The text area to display the JSON string returned\r  -                             from the REST API call, or to display the error message if there was \r  -                             an error.\r  - @param {<span> element} captionSpan - The span to display the image caption.\r  */\r function IdentifyCelebrities(sourceImageUrl, responseTextArea, captionSpan) {\r     // Request parameters.\r     var params = {\r         \"model\": \"celebrities\"\r     };\r     \r     // Perform the REST API call.\r     $.ajax({\r         url: common.uriBasePreRegion + \r              $(\"#subscriptionRegionSelect\").val() + \r              common.uriBasePostRegion + \r              common.uriBaseCelebrities +\r              \"?\" + \r              $.param(params),\r                     \r         // Request headers.\r         beforeSend: function(jqXHR){\r             jqXHR.setRequestHeader(\"Content-Type\",\"application/json\");\r             jqXHR.setRequestHeader(\"Ocp-Apim-Subscription-Key\", \r                 encodeURIComponent($(\"#subscriptionKeyInput\").val()));\r         },\r         \r         type: \"POST\",\r         \r         // Request body.\r         data: '{\"url\": ' + '\"' + sourceImageUrl + '\"}',\r     })\r     \r     .done(function(data) {\r         // Show formatted JSON on webpage.\r         responseTextArea.val(JSON.stringify(data, null, 2));\r         \r         // Extract and display the caption and confidence from the first caption in the description object.\r         if (data.result && data.result.celebrities) {\r             var celebrity = data.result.celebrities[0];\r             \r             if (celebrity.name && celebrity.confidence) {\r                 captionSpan.text(\"Celebrity name: \" + celebrity.name +\r                     \" (confidence: \" + celebrity.confidence + \").\");\r             }\r         }\r     })\r     \r     .fail(function(jqXHR, textStatus, errorThrown) {\r         // Prepare the error string.\r         var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r         errorString += (jqXHR.responseText === \"\") ? \"\" : (jQuery.parseJSON(jqXHR.responseText).message) ? \r             jQuery.parseJSON(jqXHR.responseText).message : jQuery.parseJSON(jqXHR.responseText).error.message;\r         \r         // Put the error JSON in the response textarea.\r         responseTextArea.val(JSON.stringify(jqXHR, null, 2));\r         \r         // Show the error message.\r         alert(errorString);\r     });\r }\r ```\r \r ### <a name=\"celebrities-step-3-run-the-application\"></a>名人步骤 3：运行应用程序\r \r 保存 celebrities.html 文件，然后在 Web 浏览器中将其打开。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 输入要分析的图像的 URL，然后单击“分析图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"intelligently-generate-a-thumbnail\"></a>以智能方式生成缩略图\r \r 计算机视觉的缩略图功能根据图像生成缩略图。 缩略图功能可以使用智能裁剪功能来标识图像中的感兴趣区域，使缩略图聚焦在该区域，目的是生成更美的缩略图。\r \r 若要完成教程应用程序的缩略图功能，请执行以下步骤：\r \r ### <a name=\"thumbnail-step-1-add-the-event-handler-code-for-the-form-button\"></a>缩略图步骤 1：为窗体按钮添加事件处理程序代码\r \r 在文本编辑器中打开 thumbnail.html 文件，找到文件底部的 thumbnailButtonClick 函数。\r \r thumbnailButtonClick 事件处理程序函数会清除窗体，显示在 URL 中指定的图像，然后通过调用 getThumbnail 函数两次来创建两个缩略图，一个经过智能裁剪，另一个没有智能裁剪。\r \r 将以下代码复制并粘贴到 thumbnailButtonClick 函数中。\r \r ```javascript\r function thumbnailButtonClick() {\r \r     // Clear the display fields.\r     document.getElementById(\"sourceImage\").src = \"#\";\r     document.getElementById(\"thumbnailImageSmartCrop\").src = \"#\";\r     document.getElementById(\"thumbnailImageNonSmartCrop\").src = \"#\";\r     document.getElementById(\"responseTextArea\").value = \"\";\r     document.getElementById(\"captionSpan\").text = \"\";\r     \r     // Display the image.\r     var sourceImageUrl = document.getElementById(\"inputImage\").value;\r     document.getElementById(\"sourceImage\").src = sourceImageUrl;\r     \r     // Get a smart cropped thumbnail.\r     getThumbnail (sourceImageUrl, true, document.getElementById(\"thumbnailImageSmartCrop\"), \r         document.getElementById(\"responseTextArea\"));\r     \r     // Get a non-smart-cropped thumbnail.\r     getThumbnail (sourceImageUrl, false, document.getElementById(\"thumbnailImageNonSmartCrop\"),\r         document.getElementById(\"responseTextArea\"));\r }\r ```\r \r ### <a name=\"thumbnail-step-2-add-the-wrapper-for-the-rest-api-call\"></a>缩略图步骤 2：为 REST API 调用添加包装器\r \r getThumbnail 函数包装进行图像分析的 REST API 调用。 成功返回后，缩略图会显示在指定的 img 元素中。\r \r 复制以下 getThumbnail 函数并将其粘贴到 thumbnailButtonClick 函数下方。\r \r ```javascript\r /* Get a thumbnail of the image at the specified URL by using Microsoft Cognitive Services\r  - Thumbnail API.\r  - @param {string} sourceImageUrl URL to image.\r  - @param {boolean} smartCropping Set to true to use the smart cropping feature which crops to the\r  -                                more interesting area of an image; false to crop for the center\r  -                                of the image.\r  - @param {<img> element} imageElement The img element in the DOM which will display the thumnail image.\r  - @param {<textarea> element} responseTextArea - The text area to display the Response Headers returned\r  -                             from the REST API call, or to display the error message if there was \r  -                             an error.\r  */\r function getThumbnail (sourceImageUrl, smartCropping, imageElement, responseTextArea) {\r     // Create the HTTP Request object.\r     var xhr = new XMLHttpRequest();\r     \r     // Request parameters.\r     var params = \"width=100&height=150&smartCropping=\" + smartCropping.toString();\r \r     // Build the full URI.\r     var fullUri = common.uriBasePreRegion + \r                   document.getElementById(\"subscriptionRegionSelect\").value + \r                   common.uriBasePostRegion + \r                   common.uriBaseThumbnail +\r                   \"?\" + \r                   params;\r     \r     // Identify the request as a POST, with the URI and parameters.\r     xhr.open(\"POST\", fullUri);\r     \r     // Add the request headers.\r     xhr.setRequestHeader(\"Content-Type\",\"application/json\");\r     xhr.setRequestHeader(\"Ocp-Apim-Subscription-Key\", \r         encodeURIComponent(document.getElementById(\"subscriptionKeyInput\").value));\r     \r     // Set the response type to \"blob\" for the thumbnail image data.\r     xhr.responseType = \"blob\";\r     \r     // Process the result of the REST API call.\r     xhr.onreadystatechange = function(e) {\r         if(xhr.readyState === XMLHttpRequest.DONE) {\r             \r             // Thumbnail successfully created.\r             if (xhr.status === 200) {\r                 // Show response headers.\r                 var s = JSON.stringify(xhr.getAllResponseHeaders(), null, 2);\r                 responseTextArea.value = JSON.stringify(xhr.getAllResponseHeaders(), null, 2);\r                 \r                 // Show thumbnail image.\r                 var urlCreator = window.URL || window.webkitURL;\r                 var imageUrl = urlCreator.createObjectURL(this.response);\r                 imageElement.src = imageUrl;\r             } else {\r                 // Display the error message. The error message is the response body as a JSON string. \r                 // The code in this code block extracts the JSON string from the blob response.\r                 var reader = new FileReader();\r                 \r                 // This event fires after the blob has been read.\r                 reader.addEventListener('loadend', (e) => {\r                     responseTextArea.value = JSON.stringify(JSON.parse(e.srcElement.result), null, 2);\r                 });\r                 \r                 // Start reading the blob as text.\r                 reader.readAsText(xhr.response);\r             }\r         }\r     }\r     \r     // Execute the REST API call.\r     xhr.send('{\"url\": ' + '\"' + sourceImageUrl + '\"}');\r }\r ```\r \r ### <a name=\"thumbnail-step-3-run-the-application\"></a>缩略图步骤 3：运行应用程序\r \r 保存 thumbnail.html 文件，然后在 Web 浏览器中将其打开。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 输入要分析的图像的 URL，然后单击“生成缩略图”按钮对图像进行分析并查看结果。\r \r ## <a name=\"read-printed-text-ocr\"></a>读取印刷体文本 (OCR)\r \r 计算机视觉的光学字符识别 (OCR) 功能分析图像中是否有印刷体文本。 分析完以后，OCR 会返回一个 JSON 对象，其中包含图像中的文本和文本位置。\r \r 若要完成教程应用程序的 OCR 功能，请执行以下步骤：\r \r ### <a name=\"ocr-step-1-add-the-event-handler-code-for-the-form-button\"></a>OCR 步骤 1：为窗体按钮添加事件处理程序代码\r \r 在文本编辑器中打开 ocr.html 文件，找到文件底部的 ocrButtonClick 函数。\r \r ocrButtonClick 事件处理程序函数会清除窗体，显示在 URL 中指定的图像，然后调用 ReadOcrImage 函数进行图像分析。\r \r 将以下代码复制并粘贴到 ocrButtonClick 函数中。\r \r ```javascript\r function ocrButtonClick() {\r \r     // Clear the display fields.\r     $(\"#sourceImage\").attr(\"src\", \"#\");\r     $(\"#responseTextArea\").val(\"\");\r     $(\"#captionSpan\").text(\"\");\r     \r     // Display the image.\r     var sourceImageUrl = $(\"#inputImage\").val();\r     $(\"#sourceImage\").attr(\"src\", sourceImageUrl);\r     \r     ReadOcrImage(sourceImageUrl, $(\"#responseTextArea\"));\r }\r ```\r \r ### <a name=\"ocr-step-2-add-the-wrapper-for-the-rest-api-call\"></a>OCR 步骤 2：为 REST API 调用添加包装器\r \r ReadOcrImage 函数包装进行图像分析的 REST API 调用。 成功返回以后，会在指定的文本区域显示格式化的 JSON，用于描述文本和文本位置。\r \r 复制以下 ReadOcrImage 函数并将其粘贴到 ocrButtonClick 函数下方。\r \r ```javascript\r /* Recognize and read printed text in an image at the specified URL by using Microsoft Cognitive \r  - Services OCR API.\r  - @param {string} sourceImageUrl - The URL to the image to analyze for printed text.\r  - @param {<textarea> element} responseTextArea - The text area to display the JSON string returned\r  -                             from the REST API call, or to display the error message if there was \r  -                             an error.\r  */\r function ReadOcrImage(sourceImageUrl, responseTextArea) {\r     // Request parameters.\r     var params = {\r         \"language\": \"unk\",\r         \"detectOrientation \": \"true\",\r     };\r \r     // Perform the REST API call.\r     $.ajax({\r         url: common.uriBasePreRegion + \r              $(\"#subscriptionRegionSelect\").val() + \r              common.uriBasePostRegion + \r              common.uriBaseOcr +\r              \"?\" + \r              $.param(params),\r         \r         // Request headers.\r         beforeSend: function(jqXHR){\r             jqXHR.setRequestHeader(\"Content-Type\",\"application/json\");\r             jqXHR.setRequestHeader(\"Ocp-Apim-Subscription-Key\", \r                 encodeURIComponent($(\"#subscriptionKeyInput\").val()));\r         },\r         \r         type: \"POST\",\r         \r         // Request body.\r         data: '{\"url\": ' + '\"' + sourceImageUrl + '\"}',\r     })\r     \r     .done(function(data) {\r         // Show formatted JSON on webpage.\r         responseTextArea.val(JSON.stringify(data, null, 2));\r     })\r     \r     .fail(function(jqXHR, textStatus, errorThrown) {\r         // Put the JSON description into the text area.\r         responseTextArea.val(JSON.stringify(jqXHR, null, 2));\r         \r         // Display error message.\r         var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r         errorString += (jqXHR.responseText === \"\") ? \"\" : (jQuery.parseJSON(jqXHR.responseText).message) ? \r             jQuery.parseJSON(jqXHR.responseText).message : jQuery.parseJSON(jqXHR.responseText).error.message;\r         alert(errorString);\r     });\r }\r ```\r \r ### <a name=\"ocr-step-3-run-the-application\"></a>OCR 步骤 3：运行应用程序\r \r 保存 ocr.html 文件，然后在 Web 浏览器中将其打开。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 输入要读取其文本的图像的 URL，然后单击“读取图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"read-handwritten-text-handwriting-recognition\"></a>读取手写文本（手写识别）\r \r 计算机视觉的手写识别功能分析图像中是否有手写文本。 分析完以后，手写识别功能会返回一个 JSON 对象，其中包含图像中的文本和文本位置。\r \r 若要完成教程应用程序的手写识别功能，请执行以下步骤：\r \r ### <a name=\"handwriting-recognition-step-1-add-the-event-handler-code-for-the-form-button\"></a>手写识别步骤 1：为窗体按钮添加事件处理程序代码\r \r 在文本编辑器中打开 handwriting.html 文件，找到文件底部的 handwritingButtonClick 函数。\r \r handwritingButtonClick 事件处理程序函数会清除窗体，显示在 URL 中指定的图像，然后调用 HandwritingImage 函数进行图像分析。\r \r 将以下代码复制并粘贴到 handwritingButtonClick 函数中。\r \r ```javascript\r function handwritingButtonClick() {\r \r     // Clear the display fields.\r     $(\"#sourceImage\").attr(\"src\", \"#\");\r     $(\"#responseTextArea\").val(\"\");\r     \r     // Display the image.\r     var sourceImageUrl = $(\"#inputImage\").val();\r     $(\"#sourceImage\").attr(\"src\", sourceImageUrl);\r     \r     ReadHandwrittenImage(sourceImageUrl, $(\"#responseTextArea\"));\r }\r ```\r \r ### <a name=\"handwriting-recognition-step-2-add-the-wrapper-for-the-rest-api-call\"></a>手写识别步骤 2：为 REST API 调用添加包装器\r \r ReadHandwrittenImage 函数包装两个进行图像分析所需的 REST API 调用。 由于手写识别很耗时，因此使用一个两步过程。 第一个调用提交需处理的图像；第二个调用检索处理完成时检测到的文本。\r \r 检索文本以后，会在指定的文本区域显示格式化的 JSON，用于描述文本和文本位置。\r \r 复制以下 ReadHandwrittenImage 函数并将其粘贴到 handwritingButtonClick 函数下方。\r \r ```javascript\r /* Recognize and read text from an image of handwriting at the specified URL by using Microsoft \r  - Cognitive Services Recognize Handwritten Text API.\r  - @param {string} sourceImageUrl - The URL to the image to analyze for handwriting.\r  - @param {<textarea> element} responseTextArea - The text area to display the JSON string returned\r  -                             from the REST API call, or to display the error message if there was \r  -                             an error.\r  */\r function ReadHandwrittenImage(sourceImageUrl, responseTextArea) {\r     // Request parameters.\r     var params = {\r         \"handwriting\": \"true\",\r     };\r \r     // This operation requrires two REST API calls. One to submit the image for processing,\r     // the other to retrieve the text found in the image. \r     //\r     // Perform the first REST API call to submit the image for processing.\r     $.ajax({\r         url: common.uriBasePreRegion + \r              $(\"#subscriptionRegionSelect\").val() + \r              common.uriBasePostRegion + \r              common.uriBaseHandwriting +\r              \"?\" + \r              $.param(params),\r         \r         // Request headers.\r         beforeSend: function(jqXHR){\r             jqXHR.setRequestHeader(\"Content-Type\",\"application/json\");\r             jqXHR.setRequestHeader(\"Ocp-Apim-Subscription-Key\", \r                 encodeURIComponent($(\"#subscriptionKeyInput\").val()));\r         },\r         \r         type: \"POST\",\r         \r         // Request body.\r         data: '{\"url\": ' + '\"' + sourceImageUrl + '\"}',\r     })\r     \r     .done(function(data, textStatus, jqXHR) {\r         // Show progress.\r         responseTextArea.val(\"Handwritten image submitted.\");\r         \r         // Note: The response may not be immediately available. Handwriting Recognition is an\r         // async operation that can take a variable amount of time depending on the length\r         // of the text you want to recognize. You may need to wait or retry this GET operation.\r         //\r         // Try once per second for up to ten seconds to receive the result.\r         var tries = 10;\r         var waitTime = 100;\r         var taskCompleted = false;\r         \r         var timeoutID = setInterval(function () { \r             // Limit the number of calls.\r             if (--tries <= 0) {\r                 window.clearTimeout(timeoutID);\r                 responseTextArea.val(\"The response was not available in the time allowed.\");\r                 return;\r             }\r \r             // The \"Operation-Location\" in the response contains the URI to retrieve the recognized text.\r             var operationLocation = jqXHR.getResponseHeader(\"Operation-Location\");\r             \r             // Perform the second REST API call and get the response.\r             $.ajax({\r                 url: operationLocation,\r                 \r                 // Request headers.\r                 beforeSend: function(jqXHR){\r                     jqXHR.setRequestHeader(\"Content-Type\",\"application/json\");\r                     jqXHR.setRequestHeader(\"Ocp-Apim-Subscription-Key\",\r                         encodeURIComponent($(\"#subscriptionKeyInput\").val()));\r                 },\r                 \r                 type: \"GET\",\r             })\r             \r             .done(function(data) {\r                 // If the result is not yet available, return.\r                 if (data.status && (data.status === \"NotStarted\" || data.status === \"Running\")) {\r                     return;\r                 }\r                 \r                 // Show formatted JSON on webpage.\r                 responseTextArea.val(JSON.stringify(data, null, 2));\r                 \r                 // Indicate the task is complete and clear the timer.\r                 taskCompleted = true;\r                 window.clearTimeout(timeoutID);\r             })\r             \r             .fail(function(jqXHR, textStatus, errorThrown) {\r                 // Indicate the task is complete and clear the timer.\r                 taskCompleted = true;\r                 window.clearTimeout(timeoutID);\r                 \r                 // Display error message.\r                 var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r                 errorString += (jqXHR.responseText === \"\") ? \"\" : (jQuery.parseJSON(jqXHR.responseText).message) ? \r                     jQuery.parseJSON(jqXHR.responseText).message : jQuery.parseJSON(jqXHR.responseText).error.message;\r                 alert(errorString);\r             });\r         }, waitTime);\r     })\r     \r     .fail(function(jqXHR, textStatus, errorThrown) {\r         // Put the JSON description into the text area.\r         responseTextArea.val(JSON.stringify(jqXHR, null, 2));\r         \r         // Display error message.\r         var errorString = (errorThrown === \"\") ? \"Error. \" : errorThrown + \" (\" + jqXHR.status + \"): \";\r         errorString += (jqXHR.responseText === \"\") ? \"\" : (jQuery.parseJSON(jqXHR.responseText).message) ? \r             jQuery.parseJSON(jqXHR.responseText).message : jQuery.parseJSON(jqXHR.responseText).error.message;\r         alert(errorString);\r     });\r }\r ```\r \r ### <a name=\"handwriting-recognition-step-3-run-the-application\"></a>手写识别步骤 3：运行应用程序\r \r 保存 handwriting.html 文件，然后在 Web 浏览器中将其打开。 将订阅密钥置于“订阅密钥”字段中，然后在“订阅区域”中验证是否使用了正确的区域。 输入要读取其文本的图像的 URL，然后单击“读取图像”按钮对图像进行分析并查看结果。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r - [计算机视觉 API C&#35; 教程](CSharpTutorial.md)\r - [计算机视觉 API Python 教程](PythonTutorial.md)\r \r "}