{"Title":"Azure 通知中心安全推送","Description":"了解如何在 Azure 中发送安全推送通知。代码示例是使用 .NET API 通过 C# 编写的。","Content":"\r #Azure 通知中心安全推送\r \r > [!div class=\"op_single_selector\"]\r >- [Windows Universal](./notification-hubs-aspnet-backend-windows-dotnet-wns-secure-push-notification.md)\r >- [iOS](./notification-hubs-aspnet-backend-ios-push-apple-apns-secure-notification.md)\r \r ##概述\r \r 利用 Azure 中的推送通知支持，你可以访问易于使用且横向扩展的多平台推送基础结构，这大大简化了为移动平台的使用者应用程序和企业应用程序实现推送通知的过程。\r \r 由于法规或安全约束，有时应用程序可能想要在通知中包含某些无法通过标准推送通知基础结构传输的内容。本教程介绍如何通过客户端设备和应用后端之间安全且经过验证的连接发送敏感信息，以便获得相同的体验。\r \r 在高级别中，此流程如下所示：\r \r 1. 应用后端：\r     - 在后端数据库中存储安全有效负载。\r     - 将此通知的 ID 发送到此设备（不发送任何安全信息）。\r 2. 此设备上的应用在接收通知时：\r     - 此设备将联系请求安全有效负载的后端。\r     - 此应用可以将有效负载显示为设备上的通知。\r \r 请务必注意，在之前的流程（以及本教程中）中，我们假设此设备会在用户登录后在本地存储中存储身份验证令牌。这可以保证完全无缝的体验，因为该设备可以使用此令牌检索通知的安全有效负载。如果您的应用程序未在设备上存储身份验证令牌，或者如果这些令牌可能已过期，此设备应用在收到通知时应显示提示用户启动应用的通用通知。然后，应用对用户进行身份验证并显示通知有效负载。\r \r 本安全推送教程演示如何安全地发送推送通知。本教程以[通知用户](./notification-hubs-aspnet-backend-windows-dotnet-wns-notification.md)教程为基础，因此您应该先完成该教程中的步骤。\r \r > [!NOTE]\r > 本教程假设您已根据[通知中心入门（Windows 应用商店）](./notification-hubs-windows-store-dotnet-get-started-wns-push-notification.md)中所述创建并配置了通知中心。\r 此外，请注意 Windows Phone 8.1 需要 Windows（而不是 Windows Phone）凭据，且后台任务无法在 Windows Phone 8.0 或 Silverlight 8.1 上正常运行。对于 Windows 应用商店应用程序，您只能在应用锁屏界面启用（单击 Appmanifest 中的复选框）的情况下，通过运行后台任务来接收通知。\r \r [!INCLUDE [notification-hubs-aspnet-backend-securepush](../../includes/notification-hubs-aspnet-backend-securepush.md)]\r \r ## 修改 Windows Phone 项目\r \r 1. 在 **NotifyUserWindowsPhone** 项目中，将以下代码添加到 App.xaml.cs 注册推送后台任务。在 `OnLaunched()` 方法的末尾添加以下代码行：\r \r     ```\r     RegisterBackgroundTask();\r     ```\r \r 2. 仍在 App.xaml.cs 中，紧跟 `OnLaunched()` 方法添加以下代码：\r \r     ```\r     private async void RegisterBackgroundTask()\r     {\r         if (!Windows.ApplicationModel.Background.BackgroundTaskRegistration.AllTasks.Any(i => i.Value.Name == \"PushBackgroundTask\"))\r         {\r             var result = await BackgroundExecutionManager.RequestAccessAsync();\r             var builder = new BackgroundTaskBuilder();\r \r             builder.Name = \"PushBackgroundTask\";\r             builder.TaskEntryPoint = typeof(PushBackgroundComponent.PushBackgroundTask).FullName;\r             builder.SetTrigger(new Windows.ApplicationModel.Background.PushNotificationTrigger());\r             BackgroundTaskRegistration task = builder.Register();\r         }\r     }\r     ```\r \r 3. 在 App.xaml.cs 文件的顶部添加以下 `using` 语句：\r \r     ```\r     using Windows.Networking.PushNotifications;\r     using Windows.ApplicationModel.Background;\r     ```\r \r 4. 从 Visual Studio 的“文件”菜单中，单击“全部保存”。\r \r ## 创建推送背景组件\r \r 下一步是创建推送背景组件。\r \r 1. 在“解决方案资源管理器”中，右键单击解决方案的顶层节点（在本例中为 **Solution SecurePush**），然后依次单击“添加”和“新建项目”。\r \r 2. 展开“应用商店应用”，然后依次单击“Windows Phone 应用”和“Windows 运行时组件 (Windows Phone)”。将该项目命名为 **PushBackgroundComponent**，然后单击“确定”创建项目。\r \r     ![][12]\r \r 3. 在“解决方案资源管理器”中，右键单击 “PushBackgroundComponent (Windows Phone 8.1)” 项目，然后依次单击“添加”和“类”。将新类命名为 **PushBackgroundTask.cs**。单击“添加”生成类。\r \r 4. 将 **PushBackgroundComponent** 命名空间定义的整个内容替换为以下代码，将占位符 `{back-end endpoint}` 替换为部署后端时获取的后端终结点：\r \r     ```\r     public sealed class Notification\r         {\r             public int Id { get; set; }\r             public string Payload { get; set; }\r             public bool Read { get; set; }\r         }\r \r         public sealed class PushBackgroundTask : IBackgroundTask\r         {\r             private string GET_URL = \"{back-end endpoint}/api/notifications/\";\r \r             async void IBackgroundTask.Run(IBackgroundTaskInstance taskInstance)\r             {\r                 // Store the content received from the notification so it can be retrieved from the UI.\r                 RawNotification raw = (RawNotification)taskInstance.TriggerDetails;\r                 var notificationId = raw.Content;\r \r                 // retrieve content\r                 BackgroundTaskDeferral deferral = taskInstance.GetDeferral();\r                 var httpClient = new HttpClient();\r                 var settings = ApplicationData.Current.LocalSettings.Values;\r                 httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Basic\", (string)settings[\"AuthenticationToken\"]);\r \r                 var notificationString = await httpClient.GetStringAsync(GET_URL + notificationId);\r \r                 var notification = JsonConvert.DeserializeObject<Notification>(notificationString);\r \r                 ShowToast(notification);\r \r                 deferral.Complete();\r             }\r \r             private void ShowToast(Notification notification)\r             {\r                 ToastTemplateType toastTemplate = ToastTemplateType.ToastText01;\r                 XmlDocument toastXml = ToastNotificationManager.GetTemplateContent(toastTemplate);\r                 XmlNodeList toastTextElements = toastXml.GetElementsByTagName(\"text\");\r                 toastTextElements[0].AppendChild(toastXml.CreateTextNode(notification.Payload));\r                 ToastNotification toast = new ToastNotification(toastXml);\r                 ToastNotificationManager.CreateToastNotifier().Show(toast);\r             }\r         }\r     ```\r \r 5. 在“解决方案资源管理器”中，右键单击 “PushBackgroundComponent (Windows Phone 8.1)” 项目，然后单击“管理 NuGet 包”。\r \r 6. 在左侧单击“联机”。\r \r 7. 在“搜索”框中键入 **Http 客户端**。\r \r 8. 在结果列表中，单击“Microsoft HTTP 客户端库”，然后单击“安装”。完成安装。\r \r 9. 返回到 NuGet“搜索”框，键入 **Json.net**。安装 **Json.NET** 包，然后关闭“NuGet 包管理器”窗口。\r \r 10. 在 **PushBackgroundTask.cs** 文件的顶部添加以下 `using` 语句：\r \r     ```\r     using Windows.ApplicationModel.Background;\r     using Windows.Networking.PushNotifications;\r     using System.Net.Http;\r     using Windows.Storage;\r     using System.Net.Http.Headers;\r     using Newtonsoft.Json;\r     using Windows.UI.Notifications;\r     using Windows.Data.Xml.Dom;\r     ```\r \r 11. 在“解决方案资源管理器”的 **NotifyUserWindowsPhone (Windows Phone 8.1)** 项目中，右键单击“引用”，然后单击“添加引用...”。在“引用管理器”对话框中，选中 **PushBackgroundComponent** 旁边的复选框，然后单击“确定”。\r \r 12. 在“解决方案资源管理器”中，双击 **NotifyUserWindowsPhone (Windows Phone 8.1)** 项目中的“Package.appxmanifest”。在“通知”下，将“支持 Toast 通知”设置为“是”。\r \r     ![][3]\r \r 13. 仍在 **Package.appxmanifest** 中，单击顶部附近的“声明”菜单。在“可用声明”下拉列表中，单击“后台任务”，然后单击“添加”。\r \r 14. 在“属性”下的 **Package.appxmanifest** 中选中“推送通知”。\r \r 15. 在“应用设置”下的 **Package.appxmanifest** 中，在“入口点”字段中键入 **PushBackgroundComponent.PushBackgroundTask**。\r \r     ![][13]\r \r 16. 在“文件”菜单中，单击“全部保存”。\r \r ## 运行应用程序\r \r 若要运行应用程序，请执行以下操作：\r \r 1. 在 Visual Studio 中运行此 **AppBackend** Web API 应用程序。将显示 ASP.NET 网页。\r \r 2. 在 Visual Studio 中运行此 **NotifyUserWindowsPhone (Windows Phone 8.1)** Windows Phone 应用。Windows Phone 模拟器将自动运行并加载应用程序。\r \r 3. 在 **NotifyUserWindowsPhone** 应用 UI 中，输入用户名和密码。这些信息可以是任意字符串，但必须是相同的值。\r \r 4. 在 **NotifyUserWindowsPhone** 应用 UI 中，单击“登录并注册”。然后单击“发送推送”。\r \r [3]: ./media/notification-hubs-aspnet-backend-windows-dotnet-secure-push/notification-hubs-secure-push3.png\r [12]: ./media/notification-hubs-aspnet-backend-windows-dotnet-secure-push/notification-hubs-secure-push12.png\r [13]: ./media/notification-hubs-aspnet-backend-windows-dotnet-secure-push/notification-hubs-secure-push13.png\r \r <!---HONumber=Mooncake_Quality_Review_0104_2017-->"}