{"Title":"管理 Service Fabric 应用程序中的机密","Description":"本文介绍如何保护 Service Fabric 应用程序中的机密值。","Content":"# <a name=\"managing-secrets-in-service-fabric-applications\"></a>管理 Service Fabric 应用程序中的机密\r 本指南逐步讲解管理 Service Fabric 应用程序中的机密的步骤。 机密可以是任何敏感信息，例如存储连接字符串、密码或其他不应以明文形式处理的值。\r \r 本指南使用 Azure 密钥保管库来管理密钥和机密。 但是，在应用程序中 *使用* 机密的方式不区分云平台，因此可让应用程序部署到托管在任何位置的群集。 \r \r ## <a name=\"overview\"></a>概述\r 建议通过 [服务配置包][config-package]来管理服务配置设置。 可以通过包含运行状况验证和自动回滚的托管滚动升级机制来控制配置包版本以及对其进行更新。 这比全局配置更有优势，因为可以减少全局服务中断的可能性。 加密的机密也不例外。 通过 Service Fabric 的内置功能，可以使用证书加密来加密和解密配置包 Settings.xml 文件中的值。\r \r 下图演示了 Service Fabric 应用程序中机密管理的基本流程：\r \r ![机密管理概述][overview]\r \r 此流程包括四个主要步骤：\r \r 1. 获取数据加密证书。\r 2. 在群集中安装证书。\r 3. 在部署应用程序时使用证书加密机密值，并将其注入服务的 Settings.xml 配置文件。\r 4. 通过使用相同的加密证书进行解密，从 Settings.xml 中读取加密值。 \r \r [Azure 密钥保管库][key-vault-get-started]在此处用作证书的安全存储位置，可用于将证书安装在 Azure 中的 Service Fabric 群集上。如果不部署到 Azure，则不需要使用密钥保管库来管理 Service Fabric 应用程序中的机密。\r \r ## <a name=\"data-encipherment-certificate\"></a>数据加密证书\r 数据加密证书只用于加密和解密服务 Settings.xml 中的配置值，而不用于身份验证或密码文本签名。 该证书必须满足以下要求：\r \r * 证书必须包含私钥。\r * 必须为密钥交换创建证书，并且该证书可导出到个人信息交换 (.pfx) 文件。\r * 证书密钥用法必须包括数据加密 (10)，不应包括服务器身份验证或客户端身份验证。 \r \r   例如，使用 PowerShell 创建自签名证书时，`KeyUsage` 标志必须设置为 `DataEncipherment`：\r \r   ```powershell\r   New-SelfSignedCertificate -Type DocumentEncryptionCert -KeyUsage DataEncipherment -Subject mydataenciphermentcert -Provider 'Microsoft Enhanced Cryptographic Provider v1.0'\r   ```\r \r ## <a name=\"install-the-certificate-in-your-cluster\"></a>在群集中安装证书\r 必须在群集中的每个节点上安装此证书。 在运行时，使用此证书解密服务的 Settings.xml 中存储的值。 有关设置说明，请参阅 [how to create a cluster using Azure Resource Manager][service-fabric-cluster-creation-via-arm] （如何使用 Azure Resource Manager 创建群集）。 \r \r ## <a name=\"encrypt-application-secrets\"></a>加密应用程序机密\r Service Fabric SDK 提供内置的机密加密和解密函数。 可以在生成时加密机密值，在服务代码中以编程方式解密和读取机密值。 \r \r 以下 PowerShell 命令用于加密机密。 此命令仅加密值；它并 **不** 对密码文本进行签名。 若要生成机密值的密文，必须使用群集中安装的同一个加密证书：\r \r ```powershell\r Invoke-ServiceFabricEncryptText -CertStore -CertThumbprint \"<thumbprint>\" -Text \"mysecret\" -StoreLocation CurrentUser -StoreName My\r ```\r \r 生成的 base-64 字符串包含机密密文，以及用来将其加密的证书相关信息。  当 `IsEncrypted` 属性设置为 `true` 时，可将 base-64 编码字符串插入服务的 Settings.xml 配置文件中的参数内：\r \r ```xml\r <?xml version=\"1.0\" encoding=\"utf-8\" ?>\r <Settings xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.microsoft.com/2011/01/fabric\">\r   <Section Name=\"MySettings\">\r     <Parameter Name=\"MySecret\" IsEncrypted=\"true\" Value=\"I6jCCAeYCAxgFhBXABFxzAt ... gNBRyeWFXl2VydmjZNwJIM=\" />\r   </Section>\r </Settings>\r ```\r \r ### <a name=\"inject-application-secrets-into-application-instances\"></a>将应用程序机密注入应用程序实例\r 理想情况下，部署到不同环境的过程应尽可能自动化。 这可以通过在生成环境中执行机密加密，并在创建应用程序实例时提供加密机密作为参数来实现。\r \r #### <a name=\"use-overridable-parameters-in-settingsxml\"></a>在 Settings.xml 中使用可重写参数\r Settings.xml 配置文件允许使用可在创建应用程序时提供的可重写参数。 使用 `MustOverride` 属性而不要提供参数值：\r \r ```xml\r <?xml version=\"1.0\" encoding=\"utf-8\" ?>\r <Settings xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.microsoft.com/2011/01/fabric\">\r   <Section Name=\"MySettings\">\r     <Parameter Name=\"MySecret\" IsEncrypted=\"true\" Value=\"\" MustOverride=\"true\" />\r   </Section>\r </Settings>\r ```\r \r 若要重写 Settings.xml 中的值，可在 ApplicationManifest.xml 中声明服务的 override 参数：\r \r ```xml\r <ApplicationManifest ... >\r   <Parameters>\r     <Parameter Name=\"MySecret\" DefaultValue=\"\" />\r   </Parameters>\r   <ServiceManifestImport>\r     <ServiceManifestRef ServiceManifestName=\"Stateful1Pkg\" ServiceManifestVersion=\"1.0.0\" />\r     <ConfigOverrides>\r       <ConfigOverride Name=\"Config\">\r         <Settings>\r           <Section Name=\"MySettings\">\r             <Parameter Name=\"MySecret\" Value=\"[MySecret]\" IsEncrypted=\"true\" />\r           </Section>\r         </Settings>\r       </ConfigOverride>\r     </ConfigOverrides>\r   </ServiceManifestImport>\r ```\r \r 现在，可以在创建应用程序实例时将值指定为*应用程序参数* 。 可以使用 PowerShell 或 C# 编写用于创建应用程序实例的脚本，方便在生成过程中轻松集成。\r \r 使用 PowerShell 时，参数将以[哈希表](https://technet.microsoft.com/library/ee692803.aspx)的形式提供给 `New-ServiceFabricApplication`：\r \r ```powershell\r PS C:\\Users\\vturecek> New-ServiceFabricApplication -ApplicationName fabric:/MyApp -ApplicationTypeName MyAppType -ApplicationTypeVersion 1.0.0 -ApplicationParameter @{\"MySecret\" = \"I6jCCAeYCAxgFhBXABFxzAt ... gNBRyeWFXl2VydmjZNwJIM=\"}\r ```\r \r 使用 C# 时，应用程序参数将以 `NameValueCollection` 的形式在 `ApplicationDescription` 中指定：\r \r ```csharp\r FabricClient fabricClient = new FabricClient();\r \r NameValueCollection applicationParameters = new NameValueCollection();\r applicationParameters[\"MySecret\"] = \"I6jCCAeYCAxgFhBXABFxzAt ... gNBRyeWFXl2VydmjZNwJIM=\";\r \r ApplicationDescription applicationDescription = new ApplicationDescription(\r     applicationName: new Uri(\"fabric:/MyApp\"),\r     applicationTypeName: \"MyAppType\",\r     applicationTypeVersion: \"1.0.0\",\r     applicationParameters: applicationParameters)\r );\r \r await fabricClient.ApplicationManager.CreateApplicationAsync(applicationDescription);\r ```\r \r ## <a name=\"decrypt-secrets-from-service-code\"></a>解密服务代码中的机密\r 在 Windows 上，Service Fabric 中的服务默认在“网络服务”下运行，如果未提供额外的设置，它们无权访问节点上安装的证书。\r \r 使用数据加密证书时，需确保“网络服务”或运行服务的任何用户帐户可以访问该证书的私钥。 如果提供了相应的配置，Service Fabric 可自动处理服务授权。 可以通过在 ApplicationManifest.xml 中定义用户和证书安全策略来完成此配置。 在以下示例中，已授予“网络服务”帐户对某个按指纹定义的证书的读取访问权限：\r \r ```xml\r <ApplicationManifest … >\r     <Principals>\r         <Users>\r             <User Name=\"Service1\" AccountType=\"NetworkService\" />\r         </Users>\r     </Principals>\r     <Policies>\r     <SecurityAccessPolicies>\r         <SecurityAccessPolicy GrantRights=\"Read\" PrincipalRef=\"Service1\" ResourceRef=\"MyCert\" ResourceType=\"Certificate\"/>\r     </SecurityAccessPolicies>\r     </Policies>\r     <Certificates>\r         <SecretsCertificate Name=\"MyCert\" X509FindType=\"FindByThumbprint\" X509FindValue=\"[YourCertThumbrint]\"/>\r     </Certificates>\r </ApplicationManifest>\r ```\r \r > [!NOTE]\r > 在 Windows 上从证书存储管理单元中复制证书指纹时，会在证书指纹字符串的开头添加一个不可见的字符。 尝试按指纹查找证书时，此不可见字符可能导致出错，因此请务必删除这个附加字符。\r > \r > \r \r ### <a name=\"use-application-secrets-in-service-code\"></a>在服务代码中使用应用程序机密\r 借助用于访问配置包中 Settings.xml 内的配置值的 API，可以轻松解密 `IsEncrypted` 属性设置为 `true` 的值。 由于加密的文本包含用于加密的证书相关信息，因此不需要手动查找证书。 只需在运行服务的节点上安装该证书。 调用 `DecryptValue()` 方法即可检索原始机密值：\r \r ```csharp\r ConfigurationPackage configPackage = this.Context.CodePackageActivationContext.GetConfigurationPackageObject(\"Config\");\r SecureString mySecretValue = configPackage.Settings.Sections[\"MySettings\"].Parameters[\"MySecret\"].DecryptValue()\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 详细了解如何[使用不同的安全权限运行应用程序](service-fabric-application-runas-security.md)\r \r <!-- Links -->\r [key-vault-get-started]: ../key-vault/key-vault-get-started.md\r [config-package]: service-fabric-application-model.md\r [service-fabric-cluster-creation-via-arm]: service-fabric-cluster-creation-via-arm.md\r \r <!-- Images -->\r [overview]:./media/service-fabric-application-secret-management/overview.png\r \r <!--Update_Description: update meta properties， wording update-->"}