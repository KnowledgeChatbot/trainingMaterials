{"Title":"使用 C 将 Windows 设备预配到远程监控 - Azure","Description":"介绍如何使用在 Windows 上运行的以 C 编写的应用程序将设备连接到 Azure IoT 套件预配置远程监控解决方案。","Content":"# <a name=\"connect-your-device-to-the-remote-monitoring-preconfigured-solution-windows\"></a>将设备连接到远程监控预配置解决方案 (Windows)\r \r [!INCLUDE [iot-suite-selector-connecting](../../includes/iot-suite-selector-connecting.md)]\r \r 本教程介绍如何将物理设备连接到远程监控预配置解决方案。\r ## <a name=\"create-a-c-client-solution-on-windows\"></a>在 Windows 上创建 C 客户端解决方案\r \r 与受约束设备上运行的大多数嵌入式应用程序一样，设备应用程序的客户端代码是用 C 语言编写的。在本教程中，将在运行 Windows 的计算机上生成应用程序。\r \r ### <a name=\"create-the-starter-project\"></a>创建初学者项目\r \r 在 Visual Studio 2017 中创建初学者项目并添加 IoT 中心设备客户端 NuGet 包：\r \r 1. 在 Visual Studio 中，使用 Visual C++ **Windows 控制台应用程序**模板创建一个 C 控制台应用程序。 将该项目命名为 **RMDevice**。\r \r     ![创建 Visual C++ Windows 控制台应用程序](./media/iot-suite-connecting-devices/visualstudio01.png)\r \r 1. 在“解决方案资源管理器”中，删除文件 `stdafx.h`、`targetver.h` 和 `stdafx.cpp`。\r \r 1. 在“解决方案资源管理器”中，将文件 `RMDevice.cpp` 重命名为 `RMDevice.c`。\r \r     ![显示已重命名的 RMDevice.c 文件的解决方案资源管理器](./media/iot-suite-connecting-devices/visualstudio02.png)\r \r 1. 在“解决方案资源管理器”中，右键单击“RMDevice”项目，并单击“管理 NuGet 包”。 选择“浏览”，搜索并安装以下 NuGet 包：\r \r     * Microsoft.Azure.IoTHub.Serializer\r     * Microsoft.Azure.IoTHub.IoTHubClient\r     * Microsoft.Azure.IoTHub.MqttTransport\r \r     ![NuGet 包管理器显示已安装的 Microsoft.Azure.IoTHub 包](./media/iot-suite-connecting-devices/visualstudio03.png)\r \r 1. 在“解决方案资源管理器”中，右键单击“RMDevice”项目，并选择“属性”打开该项目的“属性页”对话框。 有关详细信息，请参阅[设置 Visual C++ 项目属性](https://docs.microsoft.com/cpp/ide/working-with-project-properties)。\r \r 1. 选择“C/C++”文件夹，再选择“预编译标头”属性页。\r \r 1. 将“预编译标头”设置为“不使用预编译标头”。 然后选择“应用”。\r \r     ![项目属性显示项目不使用预编译标头](./media/iot-suite-connecting-devices/visualstudio04.png)\r \r 1. 选择“Linker”文件夹，再选择单击“输入”属性页。\r \r 1. 将 `crypt32.lib` 添加到“其他依赖项”属性。 若要保存项目属性值，请选择“确定”，然后再次选择“确定”。\r \r     ![项目属性显示包括 crypt32.lib 的链接器](./media/iot-suite-connecting-devices/visualstudio05.png)\r \r ### <a name=\"add-the-parson-json-library\"></a>添加 Parson JSON 库\r \r 将 Parson JSON 库添加到 RMDevice 项目，并添加所需的 `#include` 语句：\r \r 1. 在计算机上的适当文件夹中，使用以下命令克隆 Parson GitHub 存储库：\r \r     ```cmd\r     git clone https://github.com/kgabis/parson.git\r     ```\r \r 1. 将 `parson.h` 和 `parson.c` 文件从 Parson 存储库的本地副本复制到 **RMDevice** 项目文件夹。\r \r 1. 在 Visual Studio 中，右键单击“RMDevice”项目，选择“添加”，再选择“现有项”。\r \r 1. 在“添加现有项”对话框中，选择“RMDevice”项目文件夹中的 `parson.h` 和 `parson.c` 文件。 若要将这两个文件添加到项目，请选择“添加”。\r \r     ![解决方案资源管理器显示 parson.h 和 parson.c 文件](./media/iot-suite-connecting-devices/visualstudio06.png)\r \r 1. 在 Visual Studio 中打开 `RMDevice.c` 文件。 将现有 `#include` 语句替换为以下代码：\r    \r     ```c\r     #include \"iothubtransportmqtt.h\"\r     #include \"schemalib.h\"\r     #include \"iothub_client.h\"\r     #include \"serializer_devicetwin.h\"\r     #include \"schemaserializer.h\"\r     #include \"azure_c_shared_utility/threadapi.h\"\r     #include \"azure_c_shared_utility/platform.h\"\r     #include \"parson.h\"\r     ```\r \r     > [!NOTE]\r     > 现在可以通过生成解决方案来验证该项目是否已设置正确的依赖项。\r \r [!INCLUDE [iot-suite-connecting-code](../../includes/iot-suite-connecting-code.md)]\r \r ## <a name=\"build-and-run-the-sample\"></a>生成并运行示例\r \r 添加调用 **remote\\_monitoring\\_run** 函数的代码，然后生成并运行设备应用程序。\r \r 1. 若要调用 **remote\\_monitoring\\_run** 函数，请将 **main** 函数替换为以下代码：\r \r     ```c\r     int main()\r     {\r       remote_monitoring_run();\r       return 0;\r     }\r     ```\r \r 1. 选择“生成”，并单击“生成解决方案”以生成设备应用程序。 忽略有关 **gmtime** 函数的警告。\r \r 1. 在“解决方案资源管理器”中，右键单击“RMDevice”项目，选择“调试”，再选择“启动新实例”以运行示例。 控制台中的消息显示为：\r \r     * 应用程序将示例遥测数据发送到预配置解决方案。\r     * 接收在解决方案仪表板中设置的所需属性值。\r     * 响应从解决方案仪表板调用的方法。\r \r [!INCLUDE [iot-suite-visualize-connecting](../../includes/iot-suite-visualize-connecting.md)]\r \r <!--Update_Description: update wording -->"}