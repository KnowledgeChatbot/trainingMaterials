{"Title":"Azure Cosmos DB 常见问题解答","Description":"获取有关 Azure Cosmos DB（全局分布式多模型数据库服务）的常见问题的解答。 了解容量、性能级别和缩放。","Content":"# <a name=\"azure-cosmos-db-faq\"></a>Azure Cosmos DB 常见问题解答\r ## <a name=\"azure-cosmos-db-fundamentals\"></a>Azure Cosmos DB 基础知识\r ### <a name=\"what-is-azure-cosmos-db\"></a>什么是 Azure Cosmos DB？\r Azure Cosmos DB 是全局复制的多模型数据库服务，可针对无架构数据提供丰富的查询，帮助提供可靠的可配置性能，并支持快速开发。 这一切都通过一个托管平台来实现，而该平台有 Azure 强大的功能与影响力作为后盾。 \r \r 如果 Web、移动、游戏和 IoT 应用程序的关键要求是可预测的吞吐量、高可用性、低延迟和无架构数据模型，那么，Azure Cosmos DB 无疑是最合适的解决方案。 它提供了架构灵活性和丰富的索引，并且对集成的 JavaScript 提供了多文档事务性支持。 \r \r 有关部署和使用此服务的更多数据库问题、解答及说明，请参阅 [Azure Cosmos DB 文档页面]((https://docs.azure.cn/cosmos-db/)。\r \r ### <a name=\"what-happened-to-documentdb\"></a>DocumentDB 有哪些变化？\r DocumentDB API 是适用于 Azure Cosmos DB 的受支持 API 和数据模型之一。 此外，Azure Cosmos DB 还支持表 API 和 MongoDB API。 有关详细信息，请参阅[来自 DocumentDB 客户的问题](#moving-to-cosmos-db)。\r <!-- Not Available Graph API (Preview) -->\r \r ### <a name=\"how-do-i-get-to-my-documentdb-account-in-the-azure-portal\"></a>如何在 Azure 门户中访问 DocumentDB 帐户？\r 在 Azure 门户的左侧窗格中，单击 Azure Cosmos DB 图标。 如果以前已创建了一个 DocumentDB 帐户，则现在也有了一个 Azure Cosmos DB 帐户，费用不会有任何变化。\r \r ### <a name=\"what-are-the-typical-use-cases-for-azure-cosmos-db\"></a>Azure Cosmos DB 的典型用例有哪些？\r 对于侧重于以下要求的新 Web、移动、游戏和 IoT 应用程序而言，Azure Cosmos DB 是一个不错的选择：自动缩放、可预测的性能、毫秒响应时间的快速排序，以及查询无架构数据的能力。 Azure Cosmos DB 有助于快速开发，且支持应用程序数据模型的连续迭代。 用于管理用户生成的内容和数据的应用程序就是 [Azure Cosmos DB 的常见用例](use-cases.md)。 \r \r ### <a name=\"how-does-azure-cosmos-db-offer-predictable-performance\"></a>Azure Cosmos DB 如何提供可预测的性能？\r [请求单位](request-units.md) (RU) 是 Azure Cosmos DB 中吞吐量的衡量单位。 1 RU 吞吐量相当于通过 GET 操作获取 1 KB 文档的吞吐量。 在 Azure Cosmos DB 中进行的每个操作（包括读、写、SQL 查询和执行存储过程）都具有一个确定的 RU 值，该值基于完成该操作所需的吞吐量。 无需考虑 CPU、IO 和内存，以及它们会怎样影响应用程序吞吐量，只需从单个 RU 度量值的角度进行考虑即可。\r \r 可以按照每秒吞吐量的 RU 数来保留每个 Azure Cosmos DB 容器的预配吞吐量。 对于任何规模的应用程序，都可以通过将单个请求设为基准来测量其 RU 值，并通过预配容器来处理所有请求的请求单位总和。 也可以随着应用程序的发展需求，扩展或缩减容器的吞吐量。 如需请求单位的详细信息以及确定容器需求方面的帮助，请参阅[估计吞吐量需求](request-units.md#estimating-throughput-needs)并尝试使用[吞吐量计算器](https://www.documentdb.com/capacityplanner)。 在这里，术语“容器”是指 DocumentDB API 集合、MongoDB API 集合以及表 API 表。 \r \r ### <a name=\"how-does-azure-cosmos-db-support-various-data-models-such-as-keyvalue-columnar-and-document\"></a>Azure Cosmos DB 如何支持各种数据模型（例如键/值、纵栏表和文档）？\r \r 键/值（表）、纵栏表和文档数据模型都是原本就支持的，因为 Azure Cosmos DB 是基于 ARS（原子、记录和序列）设计构建的。 原子、记录和序列可以轻松映射和投影到各种数据模型。 现在提供了适用于一部分模型（Cosmos DB、MongoDB 和表 API）的 API，将来会提供特定于其他数据模型的其他 API。\r \r Azure Cosmos DB 有一个不受架构影响的索引编制引擎，能够自动为它引入的所有数据编制索引，不会要求开发者提供任何架构或辅助索引。 该引擎依赖于一组逻辑索引布局（倒置、纵栏表、树形），这些布局将存储布局从索引和查询处理子系统中分离出来。 Cosmos DB 还能够以可扩展方式支持一组连网协议和 API 并将它们高效地转换为核心数据模型 (1) 和逻辑索引布局 (2)，这使得它具有原本就支持多个数据模型的独特功能。\r \r ### <a name=\"is-azure-cosmos-db-hipaa-compliant\"></a>Azure Cosmos DB 是否符合 HIPAA？\r 是的，Azure Cosmos DB 符合 HIPAA。 HIPAA 针对可识别个人身份的健康信息的使用、泄露与保护制定了要求。 有关详细信息，请参阅 [信任中心](https://www.microsoft.com/TrustCenter/Compliance/HIPAA)。\r \r ### <a name=\"what-are-the-storage-limits-of-azure-cosmos-db\"></a>Azure Cosmos DB 的存储限制是什么？\r 对于容器可以存储在 Azure Cosmos DB 中的数据总量并没有任何限制。\r \r ### <a name=\"what-are-the-throughput-limits-of-azure-cosmos-db\"></a>Azure Cosmos DB 的吞吐量限制是什么？\r 在 Azure Cosmos DB 中，对于容器能够支持的总吞吐量并没有任何限制。 关键是要让工作负荷大致均匀地分布到足够多的分区键中。\r \r ### <a name=\"how-much-does-azure-cosmos-db-cost\"></a>Azure Cosmos DB 的费用如何？\r 有关详细信息，请参阅 [Azure Cosmos DB 定价详细信息](https://www.azure.cn/pricing/details/cosmos-db/)页。 Azure Cosmos DB 使用费取决于预配的容器数、容器的联机小时数，以及每个容器的预配吞吐量。 在这里，术语“容器”是指 DocumentDB API 集合、MongoDB API 集合以及表 API 表。 \r <!-- Not Avaialbe  Graph API graph -->\r \r ### <a name=\"is-a-free-account-available\"></a>有免费帐户吗？\r <!-- Not Available [Try Azure Cosmos DB for free](https://www.azure.cn/try/cosmosdb/) -->\r 如果不熟悉 Azure，可以注册 [Azure 试用帐户](https://www.azure.cn/pricing/1rmb-trial/)，这样可以得到 30 天试用期和信用额度，以便试用所有 Azure 服务。 如果你有 Visual Studio 订阅，则还有资格[免费获取 Azure 信用额度](https://www.azure.cn/support/legal/offer-rate-plans/)，可用于任何 Azure 服务。 \r \r 也可以使用 [Azure Cosmos DB 模拟器](local-emulator.md)在本地免费开发和测试应用程序，而无需创建 Azure 订阅。 如果对应用程序在 Azure Cosmos DB 模拟器中的工作情况感到满意，则可以切换到在云中使用 Azure Cosmos DB 帐户。\r \r ### <a name=\"how-can-i-get-additional-help-with-azure-cosmos-db\"></a>如何获取 Azure Cosmos DB 的更多帮助？\r 如需任何帮助，请在 [MSDN and CSDN](https://www.azure.cn/support/contact/)上联系我们，或者通过向 [Azure Support](https://www.azure.cn/support/contact/) 发送邮件安排与 Azure Cosmos DB 工程团队进行一对一交谈。 \r \r <!-- Not Avaialble ## Try Azure Cosmos DB subscriptions-->\r ## <a name=\"set-up-azure-cosmos-db\"></a>设置 Azure Cosmos DB\r ### <a name=\"how-do-i-sign-up-for-azure-cosmos-db\"></a>如何注册 Azure Cosmos DB？\r 可以在 Azure 门户中注册 Azure Cosmos DB。 首先，注册 Azure 订阅。 注册后即可将 Cosmos DB API、表 API 或 MongoDB API 帐户添加到 Azure 订阅。\r <!-- Not Available Graph API (Preview) -->\r \r ### <a name=\"what-is-a-master-key\"></a>什么是主密钥？\r 主密钥是用于访问帐户的所有资源的安全令牌。 拥有此密钥的人对数据库帐户中的所有资源具有读取和写入访问权。 分发主密钥时需谨慎。 [Azure 门户][azure-portal]的“密钥”边栏选项卡中提供主要主密钥和辅助主密钥。 有关密钥的详细信息，请参阅[查看、复制和重新生成访问密钥](manage-account.md#keys)。\r \r ### <a name=\"what-are-the-regions-that-preferredlocations-can-be-set-to\"></a>可以将 PreferredLocations 设置为哪些区域？ \r 可以将 PreferredLocations 值设置为提供 Cosmos DB 的任何 Azure 区域。 有关可用区域的列表，请参阅 [Azure 区域](https://www.azure.cn/support/service-dashboard/)。\r \r ### <a name=\"is-there-anything-i-should-be-aware-of-when-distributing-data-across-the-world-via-the-azure-datacenters\"></a>通过 Azure 数据中心在多个区域分配数据时需要注意什么？ \r Azure Cosmos DB 存在于所有 Azure 区域，详见 [Azure 区域](https://www.azure.cn/support/service-dashboard/)页。 由于 Azure Cosmos DB 是核心服务，每个新数据中心都部署了它。 \r <!-- Notice: 全球分配 to 多个区域分配 -->\r \r 设置区域时，请记住，Azure Cosmos DB 遵从主权和政府云的要求。 也就是说，如果你在某个主权区域创建了一个帐户，则不能将数据从该主权区域复制到外部区域。 同样，你不能将数据从外部帐户复制到其他主权位置。 \r \r ## <a name=\"develop-against-the-documentdb-api\"></a>针对 DocumentDB API 进行开发\r \r ### <a name=\"how-do-i-start-developing-against-the-documentdb-api\"></a>如何开始针对 DocumentDB API 进行开发？\r [Azure 门户][azure-portal]提供 DocumentDB API。 首先必须注册 Azure 订阅。 注册 Azure 订阅后，即可将 DocumentDB API 容器添加到 Azure 订阅。 有关添加 Azure Cosmos DB 帐户的说明，请参阅[创建 Azure Cosmos DB 数据库帐户](create-documentdb-dotnet.md#create-account)。 如果以前已创建了一个 DocumentDB 帐户，则现在也有了一个 Azure Cosmos DB 帐户。 \r \r [SDK](documentdb-sdk-dotnet.md) 适用于 .NET、Python、Node.js、JavaScript 和 Java。 开发人员也可以利用 [RESTful HTTP API](https://docs.microsoft.com/rest/api/documentdb/)，从各种平台使用各种语言与 Azure Cosmos DB 资源进行交互。\r \r ### <a name=\"can-i-access-some-ready-made-samples-to-get-a-head-start\"></a>是否可以访问一些现成的示例来帮助自己入门？\r GitHub 上提供 DocumentDB API [.NET](documentdb-dotnet-samples.md)、[Java](https://github.com/Azure/azure-documentdb-java)、[Node.js](documentdb-nodejs-samples.md) 和 [Python](documentdb-python-samples.md) SDK 的示例。\r \r ### <a name=\"does-the-documentdb-api-database-support-schema-free-data\"></a>DocumentDB API 数据库是否支持无架构数据？\r 是的，DocumentDB API 允许应用程序存储任意 JSON 文档，不需要架构定义或提示。 通过 Azure Cosmos DB SQL 查询接口可立即查询数据。  \r \r ### <a name=\"does-the-documentdb-api-support-acid-transactions\"></a>DocumentDB API 是否支持 ACID 事务？\r 是的，DocumentDB API 支持以 JavaScript 存储过程和触发器形式表示的跨文档事务。 事务以每个集合内的单个分区为范围，且以 ACID 语义执行，也就是“全或无”，与其他并发执行代码和用户请求隔离。 如果在服务器端执行 JavaScript 应用程序代码的过程中引发了异常，则会回滚整个事务。 有关事务的详细信息，请参阅[数据库程序事务](programming.md#database-program-transactions)。\r \r ### <a name=\"what-is-a-collection\"></a>什么是集合？\r 集合是一组文档及其关联的 JavaScript 应用程序逻辑。 集合是一个计费实体，其[成本](performance-levels.md)取决于吞吐量和所用存储。 集合可以跨一个或多个分区或服务器，并且可以通过伸缩处理几乎无限制增长的存储或吞吐量。\r \r 集合也是 Azure Cosmos DB 的计费实体。 每个集合根据预配的吞吐量和已用的存储空间按小时计费。 有关详细信息，请参阅 [Azure Cosmos DB 定价](https://www.azure.cn/pricing/details/cosmos-db/)。 \r \r ### <a name=\"how-do-i-create-a-database\"></a>我如何创建数据库？\r 可以使用 [Azure 门户](https://portal.azure.cn)（详见[添加集合](create-documentdb-dotnet.md#create-collection)中所述）、某个 [Azure Cosmos DB SDK](documentdb-sdk-dotnet.md) 或 [REST API](https://docs.microsoft.com/rest/api/documentdb/) 来创建数据库。 \r \r ### <a name=\"how-do-i-set-up-users-and-permissions\"></a>我如何设置用户和权限？\r 可以使用某个 [Cosmos DB API SDK](documentdb-sdk-dotnet.md) 或 [REST API](https://docs.microsoft.com/rest/api/documentdb/) 来创建用户和权限。  \r \r ### <a name=\"does-the-documentdb-api-support-sql\"></a>DocumentDB API 是否支持 SQL？\r SQL 查询语言是 SQL 支持的查询功能增强子集。 Azure Cosmos DB SQL 查询语言通过基于 JavaScript 的用户定义函数 (UDF)，提供丰富的分层和关系运算符以及可扩展性。 JSON 语法允许将 JSON 文档模型化为带标签节点的树状，由 Azure Cosmos DB 的自动索引技术及 Azure Cosmos DB 的 SQL 查询方言使用。 若要了解如何使用 SQL 语法，请参阅 [QueryDocumentDB][query] 一文。\r \r ### <a name=\"does-the-documentdb-api-support-sql-aggregation-functions\"></a>DocumentDB API 是否支持 SQL 聚合函数？\r DocumentDB API 支持使用 SQL 语法通过聚合函数 `COUNT`、`MIN`、`MAX`、`AVG` 和 `SUM` 实现的任何规模的低延迟聚合。 有关详细信息，请参阅[聚合函数](documentdb-sql-query.md#Aggregates)。\r \r ### <a name=\"how-does-the-documentdb-api-provide-concurrency\"></a>DocumentDB API 如何提供并发性？\r DocumentDB API 支持通过 HTTP 实体标记（也称 ETag）来实现乐观并发控制 (OCC)。 每个 DocumentDB API 资源都有一个 ETag。每次更新文档时，都会在服务器上设置此 ETag。 ETag 标头和当前值包含在所有响应消息中。 ETag 可与 If-Match 标头配合使用，让服务器决定是否应更新资源。 If-Match 值是用作检查依据的 ETag 值。 如果 ETag 值与服务器的 ETag 值匹配，就会更新资源。 如果 ETag 不再是最新状态，则服务器会拒绝该操作，并提供“HTTP 412 不满足前提条件”响应代码。 客户端接着会重新提取资源，以获取该资源当前的 ETag 值。 此外，ETag 可以与 If-None-Match 标头配合使用，以确定是否需重新提取资源。\r \r 若要在 .NET 中使用乐观并发，可以使用 [AccessCondition](https://msdn.microsoft.com/library/azure/microsoft.azure.documents.client.accesscondition.aspx) 类。 如需 .NET 示例，请参阅 GitHub 上 DocumentManagement 示例中的 [Program.cs](https://github.com/Azure/azure-documentdb-dotnet/blob/master/samples/code-samples/DocumentManagement/Program.cs)。\r \r ### <a name=\"how-do-i-perform-transactions-in-the-documentdb-api\"></a>如何在 DocumentDB API 中执行事务？\r DocumentDB API 支持通过 JavaScript 存储过程和触发器进行的语言集成式事务。 脚本中的所有数据库操作都是在进行快照隔离的情况下执行的。 如果是单分区集合，则执行范围为集合。 如果集合已分区，则执行范围为该集合中具有相同分区键值的文档。 文档版本 (ETag) 的快照是在事务开始时获取的，且只有当脚本成功运行时才会提交。 如果 JavaScript 引发错误，则会回滚事务。 有关详细信息，请参阅 [Azure Cosmos DB 的服务器端 JavaScript 编程](programming.md)。\r \r ### <a name=\"how-can-i-bulk-insert-documents-into-cosmos-db\"></a>如何将文档批量插入到 Document DB 中？\r 可以通过以下两种方法之一，将文档批量插入到 Azure Cosmos DB 中：\r \r * 数据集成工具，如 [Azure Cosmos DB 的数据迁移工具](import-data.md)中所述。\r * 存储过程，如 [Azure Cosmos DB 的服务器端 JavaScript 编程](programming.md)中所述。\r \r ### <a name=\"does-the-documentdb-api-support-resource-link-caching\"></a>DocumentDB API 是否支持资源链接缓存？\r 是的，因为 Azure Cosmos DB 是 RESTful 服务，而资源链接固定不变，所以可以缓存。 DocumentDB API 客户端可以通过指定“If-None-Match”标头来读取任何资源（例如文档或集合），然后在服务器版本更改后更新本地副本。\r \r ### <a name=\"is-a-local-instance-of-documentdb-api-available\"></a>DocumentDB API 的本地实例是否可用？\r 是的。 [Azure Cosmos DB 模拟器](local-emulator.md)提供对 Cosmos DB 服务的高保真模拟。 它支持与 Azure Cosmos DB 相同的功能，包括对创建和查询 JSON 文档、预配和缩放集合，以及执行存储过程和触发器的支持。 可以使用 Azure Cosmos DB 模拟器开发和测试应用程序，并通过对 Azure Cosmos DB 的连接终结点进行单一配置更改将其部署到多个区域范围的 Azure。\r <!-- Notice: 全球范围 to 多个区域范围 -->\r \r ## <a name=\"develop-against-the-api-for-mongodb\"></a>针对 API for MongoDB 进行开发\r ### <a name=\"what-is-the-azure-cosmos-db-api-for-mongodb\"></a>Azure Cosmos DB API for MongoDB 是什么？\r Azure Cosmos DB API for MongoDB 是一个兼容层，允许应用程序使用现有的、社区支持的 Apache MongoDB API 和驱动程序轻松、透明地与本机 Azure Cosmos DB 数据库引擎通信。 开发人员现在可以使用现有的 MongoDB 工具链和技术，生成能够充分利用 Azure Cosmos DB 的应用程序。 开发人员可以使用 Azure Cosmos DB 的独特功能，其中包括自动索引、备份维护、获得财务支持的服务级别协议 (SLA) 等。\r \r ### <a name=\"how-do-i-connect-to-my-api-for-mongodb-database\"></a>如何连接到 API for MongoDB 数据库？\r 若要连接到 Azure Cosmos DB API for MongoDB，最快捷的方式是使用 [Azure 门户](https://portal.azure.cn)。 转到帐户，然后在左侧导航菜单上单击“快速启动”。 “快速启动”是获取连接到数据库的代码片段的最佳方式。 \r \r Azure Cosmos DB 实施严格的安全要求和标准。 Azure Cosmos DB 帐户需要通过 SSL 进行身份验证和安全通信，因此务必使用 TLSv1.2。\r \r 有关详细信息，请参阅[连接到 API for MongoDB 数据库](connect-mongodb-account.md)。\r \r ### <a name=\"are-there-additional-error-codes-for-an-api-for-mongodb-database\"></a>MongoDB 的 API 数据库是否有其他错误代码？\r 除了常见的 MongoDB 错误代码，MongoDB API 还有其独特的错误代码：\r \r | 错误               | 代码  | 说明  | 解决方案  |\r |---------------------|-------|--------------|-----------|\r | TooManyRequests     | 16500 | 使用的请求单位总数超过了集合的预配请求单位比率，已达到限制。 | 请考虑从 Azure 门户缩放集合的吞吐量，或者重试。 |\r | ExceededMemoryLimit | 16501 | 作为一种多租户服务，操作已超出客户端的内存配额。 | 通过限制性更强的查询条件缩小操作的作用域，或者通过 [Azure 门户](https://www.azure.cn/support/support-azure/)联系技术支持。 <br><br>示例：*&nbsp;&nbsp;&nbsp;&nbsp;db.getCollection('users').aggregate([<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{$match: {name: \"Andy\"}}, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{$sort: {age: -1}}<br>&nbsp;&nbsp;&nbsp;&nbsp;])*) |\r \r ## <a name=\"develop-with-the-table-api\"></a>使用表 API 进行开发\r \r ### <a name=\"how-can-i-use-the-table-api-offering\"></a>如何使用表 API 产品/服务？ \r [Azure 门户][azure-portal]提供 Azure Cosmos DB 表 API。 首先必须注册 Azure 订阅。 注册以后，即可向 Azure 订阅添加 Azure Cosmos DB 表 API 帐户，然后向帐户添加表。 \r \r 可以在 [Azure Cosmos DB 表 API 简介](table-introduction.md)中找到支持的语言和相关的快速入门。\r \r ### <a name=\"do-i-need-a-new-sdk-to-use-the-table-api\"></a>是否需要新的 SDK 才能使用表 API？ \r 不是，现有的存储 SDK 仍然适用。 但是，我们建议始终使用最新的 SDK，以获得最佳支持，并在许多场合下获得优异的性能。 请参阅 [Azure Cosmos DB 表 API 简介](table-introduction.md)中的可用语言列表。\r \r ### <a name=\"where-is-table-api-not-identical-with-azure-table-storage-behavior\"></a>表 API 与 Azure 表存储的行为有哪些不同之处？\r 想要使用 Azure Cosmos DB 表 API 创建表的 Azure 表存储用户应注意以下这些行为差异：\r \r * Azure Cosmos DB 表 API 使用保留容量模型来保障性能，但这意味着，一旦创建了表，就必须立即支付容量费用，即使容量未被使用。 使用 Azure 表存储时，只需为实际使用的容量付费。 这也说明了，表 API 在 99% 的时间里为何能够提供 10 毫秒的读取延迟和 15 毫秒的写入延迟 SLA，而 Azure 表存储提供 10 秒延迟 SLA。 因此，使用表 API 表（即使是不带任何请求的空表）时，要达到 Azure Cosmos DB 所提供的 SLA，必须支付费用来确保提供所需的容量来处理对这些表发出的所有请求。\r * 表 API 返回的查询结果未按分区键/行键顺序排序，因为它们在 Azure 表存储中。\r * 行键最多只能包含 255 个字节\r * CreateIfNotExists 调用受管理限制的约束，该限制是固定的，不同于 RU 涵盖的其他表操作。 这意味着，发出大量 CreateIfNotExists 调用的对象会受到限制，无法执行相关的任何操作，因为限制不是来自其 RU。\r * 目前不支持 CORS\r * Azure 表存储中的表名不区分大小写，但出现在 Azure Cosmos DB 表 API 中\r \r 对于 REST API，有大量的终结点/查询选项不受 Azure Cosmos DB 表 API 的支持：\r | REST 方法 | REST 终结点/查询选项 | 文档 URL | 说明 |\r | ------------| ------------- | ---------- | ----------- |\r | GET、PUT | /?restype=service@comp=properties| [设置表服务属性](https://docs.microsoft.com/rest/api/storageservices/set-table-service-properties)和[获取表服务属性](https://docs.microsoft.com/rest/api/storageservices/get-table-service-properties) | 此终结点用于设置 CORS 规则、存储分析配置和日志记录设置。 CORS 目前不受支持，Azure Cosmos DB 与 Azure 存储表中以不同的方式处理分析和日志记录 |\r | OPTIONS | /<table-resource-name> | [预检 CORS 表请求](https://docs.microsoft.com/rest/api/storageservices/preflight-table-request) | 这是 Azure Cosmos DB 目前不支持的 CORS 部分。 |\r | GET | /?restype=service@comp=stats | [获取表服务统计信息](https://docs.microsoft.com/rest/api/storageservices/get-table-service-stats) | 提供有关主节点与辅助节点之间的数据复制速度的信息。 由于复制是写入的一部分，因此在 Cosmos DB 中不需要此选项。 |\r | GET、PUT | /mytable?comp=acl | [获取表 ACL](https://docs.microsoft.com/rest/api/storageservices/get-table-acl) 和[设置表 ACL](https://docs.microsoft.com/rest/api/storageservices/set-table-acl) | 获取和设置用于管理共享访问签名 (SAS) 的存储访问策略。 尽管支持 SAS，但其设置和管理方式不同。 |\r \r 此外，Azure Cosmos DB 表 API 仅支持 JSON 格式，而不支持 ATOM。\r \r 尽管 Azure Cosmos DB 支持共享访问签名 (SAS)，但它不支持某些策略，具体而言，是与管理操作相关的策略，例如创建新表的权限。\r \r 对于特定的 .NET SDK，Azure Cosmos DB 目前不支持某些类和方法。\r \r | 类 | 不支持的方法 |\r |-------|-------- |\r | CloudTableClient | \\*ServiceProperties* |\r |                  | \\*ServiceStats* |\r | CloudTable | SetPermissions* |\r |            | GetPermissions* |\r | TableServiceContext | *（实际上此类已弃用） |\r | TableServiceEntity | \" \" |\r | TableServiceExtensions | \" \" |\r | TableServiceQuery | \" \" |\r ### <a name=\"how-do-i-provide-feedback-about-the-sdk-or-bugs\"></a>如何提供有关 SDK 或 Bug 的反馈？\r 可通过以下途径提供反馈：\r \r * [Azure 支持](https://www.azure.cn/support/contact/)\r \r ### <a name=\"what-is-the-connection-string-that-i-need-to-use-to-connect-to-the-table-api\"></a>连接到表 API 需要使用哪个连接字符串？\r 连接字符串为：\r ```\r DefaultEndpointsProtocol=https;AccountName=<AccountNamefromCosmos DB>;AccountKey=<FromKeysPaneofCosmosDB>;TableEndpoint=https://<AccountNameFromDocumentDB>.documents.azure.cn\r ```\r 可以通过 Azure 门户中的“连接字符串”页获取连接字符串。 \r \r ### <a name=\"how-do-i-override-the-config-settings-for-the-request-options-in-the-net-sdk-for-the-table-api\"></a>如何在表 API 的 .NET SDK 中替代请求选项的配置设置？\r 有关配置设置的信息，请参阅 [Azure Cosmos DB 功能](../cosmos-db/tutorial-develop-table-dotnet.md#azure-cosmos-db-capabilities)。 有些设置是通过 CreateCloudTableClient 方法处理的，还有一些设置是通过客户端应用程序中 appSettings 节的 app.config 处理的。\r \r ### <a name=\"are-there-any-changes-for-customers-who-are-using-the-existing-azure-table-storage-sdks\"></a>使用现有 Azure 表存储 SDK 的客户是否需要进行任何更改？\r 无。 使用现有 Azure 表存储 SDK 的现有客户或新客户无需进行任何更改。 \r \r ### <a name=\"how-do-i-view-table-data-that-is-stored-in-azure-cosmos-db-for-use-with-the-table-api\"></a>如何查看 Azure Cosmos DB 中存储的用于表 API 的表数据？ \r 可以使用 Azure 门户浏览数据。 也可以使用表 API 代码或下一个问题答案中提到的工具。 \r \r ### <a name=\"which-tools-work-with-the-table-api\"></a>哪些工具适用于表 API？ \r 可以使用 [Azure 存储资源管理器](/vs-azure-tools-storage-manage-with-storage-explorer)。\r \r 灵活地采用之前指定格式的连接字符串的工具可以支持新的表 API。 [Azure 存储客户端工具](../storage/common/storage-explorers.md)页中提供了表工具列表。 \r \r ### <a name=\"do-powershell-or-azure-cli-work-with-the-table-api\"></a>PowerShell 或 Azure CLI 是否适用于表 API？\r 支持 [PowerShell](table-powershell.md)。 目前不支持 Azure CLI。\r \r ### <a name=\"is-the-concurrency-on-operations-controlled\"></a>操作并发性是否受控制？\r 是的，通过使用 ETag 机制提供乐观并发。 \r \r ### <a name=\"is-the-odata-query-model-supported-for-entities\"></a>是否支持针对实体的 OData 查询模型？ \r 是，表 API 支持 OData 查询和 LINQ 查询。 \r \r ### <a name=\"can-i-connect-to-azure-table-storage-and-azure-cosmos-db-table-api-side-by-side-in-the-same-application\"></a>是否可以在同一应用程序中同时连接到 Azure 表存储和 Azure Cosmos DB 表 API？ \r 是的，可以通过创建两个不同的 CloudTableClient 实例进行连接，每个实例都通过连接字符串指向各自的 URI。\r \r ### <a name=\"how-do-i-migrate-an-existing-azure-table-storage-application-to-this-offering\"></a>如何将现有 Azure 表存储应用程序迁移到此服务？\r 支持使用 [AzCopy](/storage/common/storage-use-azcopy) 和 [Azure Cosmos DB 数据迁移工具](import-data.md)。\r \r ### <a name=\"how-is-expansion-of-the-storage-size-done-for-this-service-if-for-example-i-start-with-n-gb-of-data-and-my-data-will-grow-to-1-tb-over-time\"></a>如何在特定情况下为此服务扩展存储大小？比如，最初我有 *n* GB 的数据，但一段时间后我的数据会增长到 1 TB。 \r 根据设计，可以通过横向缩放让 Azure Cosmos DB 提供无限的存储。 可以通过服务来监视并有效地增大存储。 \r \r ### <a name=\"how-do-i-monitor-the-table-api-offering\"></a>如何监视表 API 服务？\r 可以使用表 API 的“指标”窗格来监视请求和存储使用情况。 \r \r ### <a name=\"how-do-i-calculate-the-throughput-i-require\"></a>如何计算所需的吞吐量？\r 可以使用容量估算器来计算操作所需的 TableThroughput。 有关详细信息，请参阅 [Estimate Request Units and Data Storage](https://www.documentdb.com/capacityplanner)（估算请求单位和数据存储）。 通常，可以将实体表示为 JSON，并为操作提供所需数量。 \r \r ### <a name=\"can-i-use-the-table-api-sdk-locally-with-the-emulator\"></a>是否可以在本地将表 API SDK 用于模拟器？\r 目前没有。\r \r ### <a name=\"can-my-existing-application-work-with-the-table-api\"></a>现有的应用程序是否适用于表 API？ \r 是的，支持相同的 API。\r \r ### <a name=\"do-i-need-to-migrate-my-existing-azure-table-storage-applications-to-the-sdk-if-i-do-not-want-to-use-the-table-api-features\"></a>如果我不想使用表 API 功能，是否需要将现有 Azure 表存储应用程序迁移到该 SDK？\r 否，可以在没有任何干扰的情况下创建和使用现有 Azure 表存储资产。 但是，如果不使用表 API，则无法从自动索引、其他一致性选项或全局分发中受益。 \r \r ### <a name=\"how-do-i-add-replication-of-the-data-in-the-table-api-across-multiple-regions-of-azure\"></a>如何在跨多个 Azure 区域的表 API 中添加数据复制？\r 可以使用 Azure Cosmos DB 门户的[全局复制设置](tutorial-global-distribution-documentdb.md#portal)来添加适合应用程序的区域。 若要开发全局分布式应用程序，还应添加其 PreferredLocation 信息已设置为本地区域的应用程序，以减轻读取延迟。 \r \r ### <a name=\"how-do-i-change-the-primary-write-region-for-the-account-in-the-table-api\"></a>如何在表 API 中更改帐户的主要写入区域？\r 可以使用 Azure Cosmos DB 的全局复制门户窗格来添加区域，然后故障转移到所需的区域。 有关说明，请参阅[使用多区域 Azure Cosmos DB 帐户进行开发](regional-failover.md)。 \r \r ### <a name=\"how-do-i-configure-my-preferred-read-regions-for-low-latency-when-i-distribute-my-data\"></a>如何配置首选的读取区域以降低分配数据时的延迟？ \r 请使用 app.config 文件中的 PreferredLocation 键，方便从本地位置读取。 对于现有应用程序，如果设置 LocationMode，表 API 会引发错误。 请删除该代码，因为表 API 会从 app.config 文件中选取此信息。 有关详细信息，请参阅 [Azure Cosmos DB 功能](../cosmos-db/tutorial-develop-table-dotnet.md#azure-cosmos-db-capabilities)。\r \r ### <a name=\"how-should-i-think-about-consistency-levels-in-the-table-api\"></a>如何理解表 API 中的一致性级别？ \r Azure Cosmos DB 在一致性、可用性和延迟之间提供合理的平衡。 Azure Cosmos DB 为表 API 开发人员提供五个一致性级别，因此可以在表级别选择合适的一致性模型，并在查询数据时发出相应的请求。 客户端可以在连接时指定一致性级别。 可以通过 CreateCloudTableClient 的 consistencyLevel 参数更改级别。 \r \r 如果将“有限过时”一致性设置为默认值，表 API 可通过“读取自己写入的数据”提供低延迟的读取。 有关详细信息，请参阅[一致性级别](consistency-levels.md)。 \r \r Azure 表存储默认在区域中提供“强”一致性，在辅助位置提供“最终”一致性。 \r \r ### <a name=\"does-azure-cosmos-db-table-api-offer-more-consistency-levels-than-azure-table-storage\"></a>Azure Cosmos DB 表 API 是否比 Azure 表存储提供更多的一致性级别？\r 是的。若要了解如何利用 Azure Cosmos DB 的分布式特性，请参阅[一致性级别](consistency-levels.md)。 由于一致性级别有充分的保证，因此可以放心使用。 有关详细信息，请参阅 [Azure Cosmos DB 功能](../cosmos-db/tutorial-develop-table-dotnet.md#azure-cosmos-db-capabilities)。\r \r ### <a name=\"when-global-distribution-is-enabled-how-long-does-it-take-to-replicate-the-data\"></a>启用全局分发后，需要花费多长时间复制数据？\r Azure Cosmos DB 会在本地区域持续提交数据，然后在几毫秒内将数据立即推送到其他区域。 这种形式的复制只取决于数据中心的往返时间 (RTT)。 若要详细了解 Azure Cosmos DB 的全局分发功能，请参阅 [Azure Cosmos DB：Azure 上的全局分布式数据库服务](distribute-data-globally.md)。\r \r ### <a name=\"can-the-read-request-consistency-level-be-changed\"></a>是否可以更改读取请求一致性级别？\r 使用 Azure Cosmos DB 时，可以在容器级别（在表上）设置一致性级别。 使用 .NET SDK，可以通过在 app.config 文件中提供 TableConsistencyLevel 键值来更改级别。 可能的值：Strong、Bounded Staleness、Session、ConsistentPrefix、Eventual。 有关详细信息，请参阅 [Azure Cosmos DB 中可以优化的数据一致性级别](consistency-levels.md)。 关键是，在设置请求一致性级别时，不能超出表的设置。 例如，不能将表的一致性级别设置为“Eventual”，将请求一致性级别设置为“Strong”。 \r \r ### <a name=\"how-does-the-table-api-handle-failover-if-a-region-goes-down\"></a>在某个区域出现故障时，表 API 如何处理故障转移？ \r 表 API 利用 Cosmos DB 的多个区域分布式平台。 若要确保应用程序能够容许数据中心停机，请在 Azure Cosmos DB 门户中为帐户额外启用至少一个区域。详见[使用多区域 Azure Cosmos DB 帐户进行开发](regional-failover.md)。 可以使用门户设置区域的优先级。请参阅[使用多区域 Azure Cosmos DB 帐户进行开发](regional-failover.md)。 \r <!-- Notice: 全球 to 多个区域 -->\r \r 可以视需要为帐户添加任意数目的区域，并通过提供故障转移优先级来控制可将该帐户故障转移到哪个位置。 当然，若要使用数据库，还需在其中提供应用程序。 这样操作时，客户不会遇到停机的情况。 [最新的 .NET 客户端 SDK](table-sdk-dotnet.md)可自动寻址，但其他 SDK 则不可以。 换句话说，它能够检测到有故障的区域，并自动故障转移到新区域。\r \r ### <a name=\"is-the-table-api-enabled-for-backups\"></a>是否能够为表 API 启用备份？\r 可以，表 API 利用 Azure Cosmos DB 的平台进行备份。 可自动进行备份。 有关详细信息，请参阅[使用 Azure Cosmos DB 进行联机备份和还原](online-backup-and-restore.md)。\r \r ### <a name=\"does-the-table-api-index-all-attributes-of-an-entity-by-default\"></a>表 API 是否默认对实体的所有属性编制索引？\r 是的，默认情况下会为实体的所有属性编制索引。 有关详细信息，请参阅 [Azure Cosmos DB：索引策略](indexing-policies.md)。 \r \r ### <a name=\"does-this-mean-i-do-not-have-to-create-multiple-indexes-to-satisfy-the-queries\"></a>这是否意味着，无需创建多个索引来满足查询要求？ \r 是，Azure Cosmos DB 表 API 针对所有属性提供自动索引，无需任何架构定义。 这种自动化操作可以让开发人员将工作重点放在应用程序上，不必考虑索引的创建和管理。 有关详细信息，请参阅 [Azure Cosmos DB：索引策略](indexing-policies.md)。\r \r ### <a name=\"can-i-change-the-indexing-policy\"></a>是否可以更改索引策略？\r 是的，可以通过提供索引定义来更改索引策略。 有关详细信息，请参阅 [Azure Cosmos DB 功能](../cosmos-db/tutorial-develop-table-dotnet.md#azure-cosmos-db-capabilities)。 需要在 app.config 文件中使用字符串 json 格式 \r \r 对于非 .NET SDK，只能在门户中设置索引策略，方法是：打开“数据资源管理器”，导航到想要更改的特定表，转到“缩放和设置”->“索引策略”，进行所需的更改，并单击“保存”。\r \r 对于 .NET SDK，可以在 app.config 文件中提交更改：\r ```\r {\r   \"indexingMode\": \"consistent\",\r   \"automatic\": true,\r   \"includedPaths\": [\r     {\r       \"path\": \"/somepath\",\r       \"indexes\": [\r         {\r           \"kind\": \"Range\",\r           \"dataType\": \"Number\",\r           \"precision\": -1\r         },\r         {\r           \"kind\": \"Range\",\r           \"dataType\": \"String\",\r           \"precision\": -1\r         } \r       ]\r     }\r   ],\r   \"excludedPaths\": \r [\r  {\r       \"path\": \"/anotherpath\"\r  }\r ]\r }\r ```\r \r ### <a name=\"azure-cosmos-db-as-a-platform-seems-to-have-lot-of-capabilities-such-as-sorting-aggregates-hierarchy-and-other-functionality-will-you-be-adding-these-capabilities-to-the-table-api\"></a>平台形式的 Azure Cosmos DB 似乎有许多的功能，例如排序、聚合、分层等。 是否要向表 API 添加这些功能？ \r 表 API 提供与 Azure 表存储相同的查询功能。 Azure Cosmos DB 还支持排序、聚合、地理空间查询、层次结构和各种内置函数。 在将来的服务更新中，我们会在表 API 中提供更多的功能。 有关详细信息，请参阅 [Azure Cosmos DB DocumentDB API 的 SQL 查询](../documentdb/documentdb-sql-query.md)。\r \r ### <a name=\"when-should-i-change-tablethroughput-for-the-table-api\"></a>何时应更改表 API 的 TableThroughput？\r 应在符合以下某个条件时，更改 TableThroughput：\r * 要对数据执行提取、转换和加载 (ETL) 操作，或者需在短时间内上传大量数据。 \r * 需要来自后端容器的更多吞吐量。 例如，发现已用吞吐量超过预配吞吐量，且吞吐量已达到限制。 有关详细信息，请参阅[为 Azure Cosmos DB 容器设置吞吐量](set-throughput.md)。\r \r ### <a name=\"can-i-scale-up-or-scale-down-the-throughput-of-my-table-api-table\"></a>是否可以提高或降低表 API 表的吞吐量？ \r 是的，可以使用 Azure Cosmos DB 门户的缩放窗格来缩放吞吐量。 有关详细信息，请参阅[设置吞吐量](set-throughput.md)。\r \r ### <a name=\"is-a-default-tablethroughput-set-for-newly-provisioned-tables\"></a>新预配的表是否设置了默认的 TableThroughput？\r 是的，如果未通过 app.config 替代 TableThroughput，并且未使用 Azure Cosmos DB 中预先创建的容器，则该服务将创建吞吐量为 400 的表。\r \r ### <a name=\"is-there-any-change-of-pricing-for-existing-customers-of-the-azure-table-storage-service\"></a>对于 Azure 表存储服务的现有客户，定价是否有任何变化？\r 无。 对于现有的 Azure 表存储客户，价格上没有任何更改。 \r \r ### <a name=\"how-is-the-price-calculated-for-the-table-api\"></a>表 API 的价格是如何计算的？ \r 价格取决于分配的 TableThroughput。 \r \r ### <a name=\"how-do-i-handle-any-throttling-on-the-tables-in-table-api-offering\"></a>如何在表 API 服务中处理对表设置的任何限制？ \r 如果请求速率超出了为基础容器预配的吞吐量容量，则会出现错误，SDK 会使用重试策略重试调用。\r \r ### <a name=\"why-do-i-need-to-choose-a-throughput-apart-from-partitionkey-and-rowkey-to-take-advantage-of-the-table-api-offering-of-azure-cosmos-db\"></a>为何需要选择吞吐量而不是 PartitionKey 和 RowKey 来利用 Azure Cosmos DB 的表 API 服务？\r 如果未在 app.config 文件中或通过门户提供吞吐量，Azure Cosmos DB 将为容器设置默认的吞吐量。 \r \r Azure Cosmos DB 针对操作设置上限，在性能和延迟方面提供保证。 如果引擎可以针对租户的操作实施调控，则可以提供这样的保证。 设置 TableThroughput 可确保吞吐量和延迟值得到保证，因为平台会保留相应的容量，保证操作成功。 \r \r 考虑到应用程序在使用需求方面存在“季节性”，可以通过吞吐量规范来弹性更改吞吐量，在满足吞吐量需求的同时节省成本。\r \r ### <a name=\"azure-table-storage-has-been-very-inexpensive-for-me-because-i-pay-only-to-store-the-data-and-i-rarely-query-the-azure-cosmos-db-table-api-offering-seems-to-be-charging-me-even-though-i-have-not-performed-a-single-transaction-or-stored-anything-can-you-please-explain\"></a>Azure 表存储对我而言非常便宜，因为我只需支付数据的存储费用，并且我很少进行查询。 但是，即使我未执行任何事务或存储任何数据，Azure Cosmos DB 表 API 服务似乎也要收费。 能否请你解释一下？\r \r 根据设计，Azure Cosmos DB 是一个全局分布式的、基于 SLA 的系统，在可用性、延迟和吞吐量方面提供保证。 如果在 Azure Cosmos DB 中保留吞吐量，吞吐量就会获得保证，这与其他系统的吞吐量有所不同。 Azure Cosmos DB 会根据客户请求提供额外功能，例如辅助索引和全局分发。  \r \r ### <a name=\"i-never-get-a-quota-full-notification-indicating-that-a-partition-is-full-when-i-ingest-data-into-azure-table-storage-with-the-table-api-i-do-get-this-message-is-this-offering-limiting-me-and-forcing-me-to-change-my-existing-application\"></a>在向 Azure 表存储引入数据时，我从未收到过“配额已满”通知（指示分区已满）。 但使用表 API 时会收到此消息。 是此产品有限制，迫使我更改现有的应用程序吗？\r \r Azure Cosmos DB 是基于 SLA 的系统，可提供无限缩放，并在延迟、吞吐量、可用性和一致性方面提供保证。 请确保数据大小和索引可管理且可缩放，这样才能获得有保障的高级性能。 针对每个分区键的实体或项数实施 10 GB 限制是为了确保提供优异的查找和查询性能。 若要确保即使针对 Azure 存储，应用程序也能很好地进行缩放，建议*不要*创建热分区，即，将所有信息存储在一个分区内并查询它。 \r \r ### <a name=\"so-partitionkey-and-rowkey-are-still-required-with-the-table-api\"></a>表 API 是否仍然需要 PartitionKey 和 RowKey？ \r 是的。 由于表 API 的外围应用类似于 Azure 表存储 SDK，因此使用分区键可以高效地分发数据。 行键在该分区中是唯一的。 行键必须存在，且不能为 null（在标准 SDK 中可为 null）。 RowKey 的长度为 255 个字节，PartitionKey 的长度为 1 KB。 \r \r ### <a name=\"what-are-the-error-messages-for-the-table-api\"></a>表 API 的错误消息有哪些？\r Azure 表存储和 Azure Cosmos DB 表 API 使用相同的 SDK，因此，大多数错误是相同的。\r \r ### <a name=\"why-do-i-get-throttled-when-i-try-to-create-lot-of-tables-one-after-another-in-the-table-api\"></a>在表 API 中尝试一个接一个地创建许多表时，为何会受到限制？\r Azure Cosmos DB 是基于 SLA 的系统，在可用性、延迟和吞吐量方面提供保障。 由于它是预配的系统，因此会保留资源来保证满足这些要求。 以极快的频率创建表会被系统检测到，因此会受到限制。 建议你查看表的创建频率，将其降到每分钟 5 个表以下。 请记住，表 API 是预配的系统。 计费从预配那一刻开始。 \r \r <!-- Not Available ## Develop against the Graph API (Preview) -->\r \r \r <a name=\"cassandra\"></a> ## 使用 Apache Cassandra API（预览版）进行开发\r \r ### <a name=\"what-is-the-protocol-version-supported-in-the-private-preview-is-there-a-plan-to-support-other-protocols\"></a>个人预览版支持哪个协议版本？ 是否打算支持其他协议？\r Azure Cosmos DB 的 Apache Cassandra API 目前支持 CQL 版本 4。\r \r ### <a name=\"why-is-choosing-a-throughput-for-a-table-a-requirement\"></a>为何要求选择表的吞吐量？\r Azure Cosmos DB 根据表的创建位置（门户或 CQL）设置容器的默认吞吐量。 Azure Cosmos DB 针对操作设置上限，在性能和延迟方面提供保证。 如果引擎可以针对租户的操作实施调控，则可以提供这样的保证。 设置吞吐量可确保在吞吐量和延迟方面获得保障，因为平台会保留此容量，并保证操作成功。 可以弹性更改吞吐量以便使季节性应用受益并节省成本。\r \r [Azure Cosmos DB 中的请求单位数](request-units.md)一文介绍了吞吐量概念。 表的吞吐量平均分布到各个基础物理分区中。  \r \r ### <a name=\"what-is-the-default-rus-of-table-when-created-through-cql-what-if-i-need-to-change-it\"></a>通过 CQL 创建的表的默认吞吐量是多少 RU/s？ 如何更改该默认值？\r Azure Cosmos DB 使用每秒请求单位数 (RU/s) 作为所提供的吞吐量的单位。 通过 CQL 创建的表具有 400 RU。 可以通过门户更改 RU。 \r \r CQL\r ```\r CREATE TABLE keyspaceName.tablename (user_id int PRIMARY KEY, lastname text) WITH cosmosdb_provisioned_throughput=1200\r ```\r \r .NET\r ```csharp\r int provisionedThroughput = 400;\r var simpleStatement = new SimpleStatement($\"CREATE TABLE {keyspaceName}.{tableName} (user_id int PRIMARY KEY, lastname text)\");\r var outgoingPayload = new Dictionary<string, byte[]>();\r outgoingPayload[\"cosmosdb_provisioned_throughput\"] = Encoding.UTF8.GetBytes(provisionedThroughput.ToString());\r simpleStatement.SetOutgoingPayload(outgoingPayload); \r ``` \r \r ### <a name=\"what-happens-when-throughput-is-exceeded\"></a>超出吞吐量时，会发生什么情况？ \r Azure Cosmos DB 针对操作设置上限，在性能和延迟方面提供保证。 如果引擎可以针对租户的操作实施调控，则可以提供这样的保证。 这可以通过设置吞吐量来实现，并可确保在吞吐量和延迟方面获得保障，因为平台会保留此容量，并保证操作成功。 当超出此容量时，会收到超载错误消息，指出已超出了容量。 0x1001 超载：无法处理此请求，因为“请求速率太大”。 此时，必须查明是哪些操作及其数据量导致了此问题。 可以通过门户中的指标了解超出了预配容量的已消耗容量。 然后，你需要确保容量差不多是在所有基础分区中平均消耗的。 如果你看到大多数吞吐量是由一个分区消耗的，则说明存在工作负载倾斜。 \r \r 相关指标显示了吞吐量在若干小时内、若干天内以及每七天内在各个分区中的使用情况或总体使用情况。 有关详细信息，请参阅[使用 Azure Cosmos DB 中的指标进行监视和调试](use-metrics.md)。\r \r [Azure Cosmos DB 诊断日志记录](logging.md)一文中介绍了诊断日志。\r \r ### <a name=\"does-the-primary-key-map-to-the-partition-key-concept-of-azure-cosmos-db\"></a>主键是否映射到 Azure Cosmos DB 的分区键概念？\r 是，分区键用来将实体放置在正确位置。 在 Azure Cosmos DB 中，它用来查找存储在物理分区中的正确逻辑分区。 [在 Azure Cosmos DB 中分区和缩放](partition-data.md)一文中很好地解释了分区概念。 此处，必须记住的一点是，逻辑分区目前不应当超出 10 GB 限制。 \r \r ### <a name=\"what-happens-when-i-get-a-quota-full-notification-indicating-that-a-partition-is-full\"></a>当收到指示分区已满的“配额已满”通知时，会发生什么情况？\r Azure Cosmos DB 是基于 SLA 的系统，可提供无限缩放，并在延迟、吞吐量、可用性和一致性方面提供保障。 它的 Cassandra API 也允许无限制的数据存储。 此无限制的存储是通过使用分区作为键概念的数据水平横向扩展实现的。 [在 Azure Cosmos DB 中分区和缩放](partition-data.md)一文中很好地解释了分区概念。\r \r 应当遵循每个逻辑分区的实体数或项数不超过 10 GB 的限制。 为确保应用程序能够很好地进行缩放，建议*不要*创建热分区，即，将所有信息存储在一个分区内并查询它。 只有当存在数据倾斜时，也就是说，当一个分区键有大量数据（即超过 10 GB）时，才会发生此错误。 可以使用存储门户查明数据的分布。 若要修复此错误，请重新创建表并选择一个细粒度的主键（分区键），这可以实现更好的数据分布。\r \r ### <a name=\"is-it-possible-to-use-cassandra-api-as-key-value-store-with-millions-or-billions-of-individual-partition-keys\"></a>是否可以将 Cassandra API 作为键值存储用于数百万或数十亿单独的分区键？\r Azure Cosmos DB 可以通过对存储进行横向扩展来存储无限的数据。 这与吞吐量无关。 你始终可以仅使用 Cassandra API 通过指定正确的主键/分区键来存储和检索键/值。 这些单独的键获取其自己的逻辑分区并存在于物理分区之上，且不会出现问题。 \r \r ### <a name=\"is-it-possible-to-create-multiple-tables-with-apache-cassandra-api-of-azure-cosmos-db\"></a>是否可以使用 Azure Cosmos DB 的 Apache Cassandra API 创建多个表？\r 是，可以使用 Apache Cassandra API 创建多个表。 这些表中的每一个都被视为用于吞吐量和存储的单元。 \r \r ### <a name=\"is-it-possible-to-create-multiple-tables-in-succession\"></a>是否可以连续创建多个表？\r Azure Cosmos DB 是资源调控的系统，适用于数据和控制平面活动。 与集合和表一样，容器是针对给定的吞吐量容量预配的运行时实体。 快速连续创建这些容器是非预期的活动，会被限制。 如果存在立即删除/创建表的测试，请尽量将它们隔开。\r \r ### <a name=\"what-is-maximum-number-of-tables-which-can-be-created\"></a>最多可以创建几个表？\r 表数目没有物理限制，如果需要创建数量很多（远远超过平常的数十个或数百个）的表（其中，稳定的总大小超过 10 TB 数据），请向 [Azure Support](https://www.azure.cn/support/contact/) 发送电子邮件。 \r \r ### <a name=\"what-is-the-maximum--of-keyspace-which-we-can-create\"></a>最多可以创建多少个键空间？ \r 键空间数目没有物理限制，因为它们是元数据容器，如果由于某种原因，你有大量的键空间，请向 [Azure Support](https://www.azure.cn/support/contact/) 发送电子邮件。 \r \r ### <a name=\"is-it-possible-to-bring-in-lot-of-data-after-starting-from-normal-table\"></a>从普通的表启动后，是否可以引入大量数据？ \r 存储容量是自动管理的，推入更多的数据时，存储容量将会增大。 因此，您可以放心地导入所需数量的数据，不需要管理和预配节点等等。 \r \r ### <a name=\"is-it-possible-to-supply-yaml-file-settings-to-configure-apache-casssandra-api-of-azure-cosmos-db-behavior\"></a>是否可以提供 yaml 文件设置来配置 Azure Cosmos DB 的 Apache Casssandra API 行为？\r Azure Cosmos DB 的 Apache Cassandra API 是一项平台服务。 它提供协议级的兼容性来执行操作。 它消除了管理、监视和配置的复杂性。 开发人员/用户无需担心可用性、逻辑删除、键缓存、行缓存、布隆筛选器和其他许多设置。 Azure Cosmos DB 的 Apache Cassandra API 注重于提供所需的读取和写入性能，不会产生配置和管理开销。\r \r ### <a name=\"will-apache-cassandra-api-for-azure-cosmos-db-support-node-additioncluster-statusnode-status-commands\"></a>Azure Cosmos DB 的 Apache Cassandra API 是否支持节点添加/群集状态/节点状态命令？\r Apache Cassandra API 是一项平台服务，使用它可以轻松做出容量规划，以及应对吞吐量和存储方面的弹性需求。 借助 Azure Cosmos DB，可以预配所需的吞吐量。 然后，可以在一整天中多次上调和下调吞吐量，而无需担心如何添加/删除或管理节点。 这意味着也不需要使用节点、群集管理工具。 \r \r ### <a name=\"what-happens-with-respect-to-various-config-settings-for-keyspace-creation-like-simplenetwork\"></a>有关创建键空间的各项配置设置（例如简单/网络）会是怎样的？\r 出于可用性和低延迟的原因，Azure Cosmos DB 提供现成的全局分发。 不需要设置副本等等。所有写入均在你进行写入的区域中经过仲裁永久认可，同时提供性能保障。  \r \r ### <a name=\"what-happens-with-respect-to-various-settings-for-table-metadata-like-bloom-filter-caching-read-repair-change-gcgrace-compression-memtableflushperiod-etc\"></a>布隆筛选器、缓存、读取修复更改、gc_grace 和 compression memtable_flush_period 等表元数据的各项设置有什么变化？\r Azure Cosmos DB 为读/写操作提供性能和吞吐量，无需更改任何配置设置，也不会意外处理这些设置。  \r \r ### <a name=\"is-time-to-live-ttl-supported-for-cassandra-tables\"></a>Cassandra 表是否支持生存时间 (TTL)？ \r 是的，支持 TTL。 \r \r ### <a name=\"is-it-possible-to-monitor-node-status-replica-status-gc-and-os-parameters-earlier-with-various-tools-what-needs-to-be-monitored-now\"></a>以前是否可以使用各种工具监视节点状态、副本状态、gc 和 OS 参数？ 现在需要监视什么？\r Azure Cosmos DB 是一个平台服务，可帮助你提高工作效率，而无需担心如何管理和监视基础结构。 你只需要在门户指标中关注可用的吞吐量，以查明你是否受到限制并增大或减小该吞吐量。 监视 [SLA](monitor-accounts.md)。\r 使用[指标](use-metrics.md) 使用[诊断日志](logging.md)。\r \r ### <a name=\"which-client-sdks-can-work-with-apache-cassandra-api-of-azure-cosmos-db\"></a>哪些客户端 SDK 适用于 Azure Cosmos DB 的 Apache Cassandra API？\r 在个人预览版中，Apache Cassandra SDK 的使用 CQLv3 的客户端驱动程序用于客户端程序。 如果你使用其他驱动程序或者遇到问题，请向 [Azure Support](https://www.azure.cn/support/contact/) 发送邮件。 \r \r ### <a name=\"is-composite-primary-key-supported\"></a>是否支持复合主键？\r 是的，可以使用正则语法创建复合分区键。 \r \r ### <a name=\"can-i-use-sstable-loader-for-data-loading\"></a>是否可以使用 sstable 加载程序加载数据？\r 否，预览版不支持 sstable 加载程序。 \r \r ### <a name=\"can-an-on-premises-cassandra-cluster-be-paired-with-azure-cosmos-dbs-apache-cassandra-api\"></a>本地 Cassandra 群集是否可与 Azure Cosmos DB 的 Apache Cassandra API 配对？\r 目前，Azure Cosmos DB 针对云环境提供了优化的体验，且不产生操作开销。 如果需要配对，请向 [Azure Support](https://www.azure.cn/support/contact/) 发送邮件并在其中提供你的方案的说明。\r \r ### <a name=\"does-cassandra-api-provide-full-backups\"></a>Cassandra API 是否提供完整备份？ \r Azure Cosmos DB 的所有 API 目前都提供间隔四小时的两个免费完整备份。 这可确保你不需要设置备份计划等等。如果希望修改保留期和频率，请向 [Azure Support](https://www.azure.cn/support/contact/) 发送邮件或提交支持案例。 [Azure Cosmos DB 的自动联机备份和还原](online-backup-and-restore.md)一文中提供了有关备份功能的信息。 \r \r ### <a name=\"how-does-the-cassandra-api-account-handle-failover-if-a-region-goes-down\"></a>当某个区域出现故障时，Cassandra API 帐户如何处理故障转移？ \r Azure Cosmos DB Cassandra API 借助 Azure Cosmos DB 的多个区域分布式平台。 若要确保应用程序能够容许数据中心停机，请在 Azure Cosmos DB 门户中为帐户额外启用至少一个区域。详见[使用多区域 Azure Cosmos DB 帐户进行开发](regional-failover.md)。 可以使用门户设置区域的优先级。请参阅[使用多区域 Azure Cosmos DB 帐户进行开发](regional-failover.md)。 \r <!-- Notice: 全球 to 多个区域 -->\r \r 可以视需要为帐户添加任意数目的区域，并通过提供故障转移优先级来控制可将该帐户故障转移到哪个位置。 若要使用数据库，还需要在那里提供一个应用程序。 这样操作时，客户不会遇到停机的情况。 \r \r ### <a name=\"does-the-apache-cassandra-api-index-all-attributes-of-an-entity-by-default\"></a>Apache Cassandra API 是否默认对实体的所有属性编制索引？\r 是，默认情况下 Azure Cosmos DB 会对实体的所有属性进行索引。 有关详细信息，请参阅 [Azure Cosmos DB：索引策略](indexing-policies.md)。 这样始终可以获得有保障的性能，以及一致的索引和持久的仲裁提交写入。 \r \r ### <a name=\"does-this-mean-i-do-not-have-to-create-multiple-indexes-to-satisfy-the-queries\"></a>这是否意味着，无需创建多个索引来满足查询要求？ \r 是的，Azure Cosmos DB 针对所有属性提供自动索引，无需任何架构定义。 这种自动化操作可以让开发人员将工作重点放在应用程序上，不必考虑索引的创建和管理。 有关详细信息，请参阅 [Azure Cosmos DB：索引策略](indexing-policies.md)。\r \r ### <a name=\"can-i-use-the-new-cassandra-api-sdk-locally-with-the-emulator\"></a>是否可以在本地将新的 Cassandra API SDK 用于模拟器？\r 我们计划在将来支持此功能。 \r \r ### <a name=\"azure-cosmos-db-as-a-platform-seems-to-have-lot-of-capabilities-such-as-changefeed-and-other-functionality-will-these-capabilities-be-added-to-the-cassandra-api\"></a>平台形式的 Azure Cosmos DB 似乎拥有许多功能，例如，更改源和其他功能。 这些功能是否将添加到 Cassandra API 中？ \r Apache Cassandra API 提供了与 Apache Cassandra 相同的 CQL 功能。 我们确实打算研究在将来支持各种功能的可行性。\r \r ### <a name=\"feature-x-of-regular-cassandra-api-is-not-working-as-today-where-can-the-feedback-be-provided\"></a>常规 Cassandra API 的功能 x 目前不工作，可以在哪里提供反馈？\r 请通过 [uservoice 反馈](https://feedback.azure.com/forums/263030-azure-cosmos-db)提供反馈。\r \r <a name=\"moving-to-cosmos-db\"></a>\r ## <a name=\"questions-from-documentdb-customers\"></a>来自 DocumentDB 客户的问题\r ### <a name=\"why-are-you-moving-to-azure-cosmos-db\"></a>为何要改用 Azure Cosmos DB？ \r \r Azure Cosmos DB 是全局分布式大规模云数据库的重大飞跃。 现在，DocumentDB 客户可以访问 Azure Cosmos DB 提供的突破性系统和功能。\r \r Azure Cosmos DB 在 2010 年以“Project Florence”的名义开始解决我们内部负责构建大型应用程序的开发人员所面临的难题。 构建全局分布式应用并不是只有我们才会遇到的难题，因此我们在 2015 年以 Azure DocumentDB 的形式向 Azure 开发人员提供了与此相关的第一代技术。 \r \r 自此之后，我们添加了新的特性，并引入了重要的新功能。 成果就是 Azure Cosmos DB。 此版本的一项功能是允许 DocumentDB 客户自动且无缝地成为 Azure Cosmos DB 客户，不会丢失其数据。 这些功能涉及的领域包括核心数据库引擎以及全局分发、弹性可伸缩性，并享有行业领先的全面 SLA 保障。 具体而言，我们已改进了 Azure Cosmos DB 数据库引擎，使其能够有效地将所有热门数据模型、类型系统和 API 映射到 Azure Cosmos DB 的基础数据模型。 \r \r 对于开发人员而言，此项工作的最新成果包括对[表存储 API](../cosmos-db/table-introduction.md) 的全新支持。 而这只是开端。 我们计划不断添加其他常用 API 和更新的数据模型，为多个区域规模的性能和存储技术带来更多进步。 \r <!-- Not Available [Gremlin](../cosmos-db/graph-introduction.md)-->\r <!-- Notice: 全球 to 多个区域 -->\r \r 必须指出的是，DocumentDB 的 [SQL 语言](../documentdb/documentdb-sql-query.md)始终是基础 Azure Cosmos DB 能够支持的多种 API 之一。 开发人员使用 Azure Cosmos DB 等完全托管的服务时，该服务的唯一接口就是该服务公开的 API。 现有 DocumentDB 客户在操作时与以往其实并无不同。 Azure Cosmos DB 提供的 SQL API 与 DocumentDB 提供的完全相同。 我们会在现在（以及未来）向你提供以前接触不到的其他功能。 \r \r 我们持续努力的另一个成果是扩建了吞吐量和存储的全局分发与弹性缩放的基础。 我们对全局分发子系统做了几项基础性的增强。 在许多可供开发人员使用的功能中，其中之一就是前缀一致性模型（总共提供五个定义完善的一致性模型）。 我们还有许多其他的有用功能，一旦其成熟就会发布。 \r \r ### <a name=\"what-do-i-need-to-do-to-ensure-that-my-documentdb-resources-continue-to-run-on-azure-cosmos-db\"></a>如何确保 DocumentDB 资源可继续在 Azure Cosmos DB 上运行？\r \r 不需要进行任何更改。 DocumentDB 资源现在称为 Azure Cosmos DB 资源，过渡后，服务不会发生任何中断。\r \r ### <a name=\"what-changes-do-i-need-to-make-for-my-app-to-work-with-azure-cosmos-db\"></a>要进行哪些更改才能让应用配合 Azure Cosmos DB 工作？\r \r 不需要进行任何更改。 类、命名空间和 NuGet 包名称都没有变化。 与往常一样，我们建议你使用最新的 SDK，以利用最新的功能和改进项目。 \r \r ### <a name=\"whats-changed-in-the-azure-portal\"></a>Azure 门户有哪些变化？\r \r DocumentDB 不再以 Azure 服务的形式显示在门户中。 代替它的是新的 Azure Cosmos DB 图标，如下图所示。 可以像以前一样使用所有集合，并且仍可缩放吞吐量、更改一致性级别和监视 SLA。 数据资源管理器（预览）的功能已得到增强。 现在，可以在一个页面中查看和编辑文档、创建和运行查询，以及使用存储过程、触发器和 UDF，如下图所示： \r \r ![“Azure Cosmos DB 集合”页](./media/faq/cosmos-db-data-explorer.png)\r \r ### <a name=\"are-there-changes-to-pricing\"></a>价格是否有变化？\r \r 没有，在 Azure Cosmos DB 上运行应用的费用与以前相同。\r \r ### <a name=\"are-there-changes-to-the-slas\"></a>SLA 是否有变化？\r \r 没有，有关可用性、一致性、延迟和吞吐量的 SLA 都保持不变，并且仍会显示在门户中。 有关详细信息，请参阅 [SLA for Azure Cosmos DB](https://www.azure.cn/support/sla/cosmos-db/)（Azure Cosmos DB 的 SLA）。\r \r ![包含示例数据的待办事项应用](./media/faq/azure-cosmosdb-portal-metrics-slas.png)\r \r [azure-portal]: https://portal.azure.cn\r [query]: documentdb-sql-query.md\r \r <!--Update_Description: update link, wording update, add Cassandra FAQ content -->"}