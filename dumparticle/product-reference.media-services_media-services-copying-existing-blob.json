{"Title":"将 Blob 从存储帐户复制到 Azure 媒体服务资产中","Description":"本主题说明如何将现有 blob 复制到媒体服务资产。 示例使用 Azure 媒体服务 .NET SDK 扩展。","Content":"# <a name=\"copying-existing-blobs-into-a-media-services-asset\"></a>将现有 Blob 复制到媒体服务资产\r 本主题说明如何使用 [Azure 媒体服务 .NET SDK 扩展](https://github.com/Azure/azure-sdk-for-media-services-extensions/)将 Blob 从存储帐户复制到新的 Azure 媒体服务 (AMS) 资产中。\r \r 扩展方法适用于：\r \r - 常规资产。\r - 实时存档资产（FragBlob 格式）。\r - 属于不同媒体服务帐户（甚至跨不同数据中心）的源和目标资产。 但是，这样做可能会产生费用。 有关定价的详细信息，请参阅[数据传输](https://www.azure.cn/pricing/details/data-transfer/)。\r \r > [!NOTE]\r > 在不使用媒体服务 API 的情况下，不应该尝试更改媒体服务生成的 blob 容器内容。\r > \r \r 本主题介绍两个代码示例：\r \r 1. 将 Blob 从一个 AMS 帐户中的资产复制到另一个 AMS 帐户中的新资产。\r 2. 将 Blob 从某个存储帐户复制到一个 AMS 帐户中的新资产。\r \r ## <a name=\"copy-blobs-between-two-ams-accounts\"></a>在两个 AMS 帐户之间复制 Blob  \r \r ### <a name=\"prerequisites\"></a>先决条件\r \r 两个媒体服务帐户。 请参阅主题[如何创建媒体服务帐户](media-services-portal-create-account.md)。\r \r ### <a name=\"download-sample\"></a>下载示例\r 用户可以执行本文中的步骤，也可以单击 [此处](https://azure.microsoft.com/documentation/samples/media-services-dotnet-copy-blob-into-asset/)下载包含本文所述代码的示例。\r \r ### <a name=\"set-up-your-project\"></a>设置项目\r \r 1. 按照[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述来设置开发环境。 \r 2. 添加此项目所需的其他引用：System.Configuration。\r 3. 将 appSettings 节添加到 .config 文件，并根据媒体服务帐户、目标存储帐户和源资产 ID 更新值。  \r \r ```   \r <appSettings>\r     <add key=\"AMSSourceAADTenantDomain\" value=\"AADTenantDomain\"/>\r     <add key=\"AMSSourceRESTAPIEndpoint\" value=\"RESTAPIEndpoint\"/>\r     <add key=\"AMSDestAADTenantDomain\" value=\"AADTenantDomain\"/>\r     <add key=\"AMSDestRESTAPIEndpoint\" value=\"RESTAPIEndpoint\"/>\r     <add key=\"DestStorageAccountName\" value=\"name\"/>\r     <add key=\"DestStorageAccountKey\" value=\"key\"/>\r     <add key=\"SourceAssetID\" value=\"nb:cid:UUID:assetID\"/>\r </appSettings>\r ```\r \r ### <a name=\"copy-blobs-from-an-asset-in-one-ams-account-into-an-asset-in-another-ams-account\"></a>将 Blob 从一个 AMS 帐户中的资产复制到另一个 AMS 帐户中的资产\r \r 以下代码使用单个扩展通过扩展的 **IAsset.Copy** 方法将源资产中的所有文件复制到目标资产。\r \r ```\r using System;\r using Microsoft.WindowsAzure.MediaServices.Client;\r using System.Linq;\r using System.Configuration;\r using Microsoft.WindowsAzure.Storage.Auth;\r \r namespace CopyExistingBlobsIntoAsset\r {\r     class Program\r     {\r         static string _sourceAADTenantDomain = ConfigurationManager.AppSettings[\"AMSSourceAADTenantDomain\"];\r         static string _sourceRESTAPIEndpoint = ConfigurationManager.AppSettings[\"AMSSourceRESTAPIEndpoint\"];\r         static string _destAADTenantDomain = ConfigurationManager.AppSettings[\"AMSDestAADTenantDomain\"];\r         static string _destRESTAPIEndpoint = ConfigurationManager.AppSettings[\"AMSDestRESTAPIEndpoint\"];\r         static string _destStorageAccountName = ConfigurationManager.AppSettings[\"DestStorageAccountName\"];\r         static string _destStorageAccountKey = ConfigurationManager.AppSettings[\"DestStorageAccountKey\"];\r         static string _sourceAssetID = ConfigurationManager.AppSettings[\"SourceAssetID\"];\r \r         private static CloudMediaContext _sourceContext = null;\r         private static CloudMediaContext _destContext = null;\r \r         static void Main(string[] args)\r         {\r             var tokenCredentials1 = new AzureAdTokenCredentials(_sourceAADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r             var tokenProvider1 = new AzureAdTokenProvider(tokenCredentials1);\r             var tokenCredentials2 = new AzureAdTokenCredentials(_destAADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r             var tokenProvider2 = new AzureAdTokenProvider(tokenCredentials2);\r \r             // Create the context for your source Media Services account.\r             _sourceContext = new CloudMediaContext(new Uri(_sourceRESTAPIEndpoint), tokenProvider1);\r \r             // Create the context for your destination Media Services account.\r             _destContext = new CloudMediaContext(new Uri(_destRESTAPIEndpoint), tokenProvider2);\r \r             // Get the credentials of the default Storage account bound to your destination Media Services account.\r             StorageCredentials destinationStorageCredentials =\r                 new StorageCredentials(_destStorageAccountName, _destStorageAccountKey);\r \r             // Get a reference to the source asset in the source context.\r             IAsset sourceAsset = _sourceContext.Assets.Where(a => a.Id == _sourceAssetID).First();\r \r             // Create an empty destination asset in the destination context.\r             IAsset destinationAsset = _destContext.Assets.Create(sourceAsset.Name, AssetCreationOptions.None);\r \r             // Copy the files in the source asset instance into the destination asset instance.\r             sourceAsset.Copy(destinationAsset, destinationStorageCredentials);\r \r             Console.WriteLine(\"Done\");\r         }\r     }\r }\r ```\r \r ## <a name=\"copy-blobs-from-a-storage-account-into-an-ams-account\"></a>将 Blob 从存储帐户复制到 AMS 帐户 \r \r ### <a name=\"prerequisites\"></a>先决条件\r \r - 一个需要从其中复制 Blob 的存储帐户。\r - 一个需要将 Blob 复制到其中的 AMS 帐户。\r \r ### <a name=\"set-up-your-project\"></a>设置项目\r \r 1. 按照[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述来设置开发环境。 \r 2. 添加此项目所需的其他引用：System.Configuration。\r 3. 将 appSettings 节添加到 .config 文件，并根据源存储和目标 AMS 帐户更新值。\r \r ```\r <appSettings>\r   <add key=\"SourceStorageAccountName\" value=\"name\" />\r   <add key=\"SourceStorageAccountKey\" value=\"key\" />\r   <add key=\"AMSAADTenantDomain\" value=\"tenant\"/>\r   <add key=\"AMSESTAPIEndpoint\" value=\"endpoint\"/>\r   <add key=\"AMSStorageAccountName\" value=\"name\" />\r   <add key=\"AMSStorageAccountKey\" value=\"key\" />\r </appSettings>\r ```\r \r ### <a name=\"copy-blobs-from-some-storage-account-into-a-new-asset-in-a-ams-account\"></a>将 Blob 从某个存储帐户复制到一个 AMS 帐户中的新资产\r \r 以下代码将存储帐户中的 Blob 复制到媒体服务资产中。 \r \r >[!NOTE]\r >不同 AMS 策略的策略限制为 1,000,000 个（例如，对于定位器策略或 ContentKeyAuthorizationPolicy）。 如果始终使用相同的日期/访问权限，则应使用相同的策略 ID，例如，用于要长期就地保留的定位符的策略（非上传策略）。 有关详细信息，请参阅[此](media-services-dotnet-manage-entities.md#limit-access-policies)主题。\r \r ```\r using System;\r using System.Configuration;\r using System.Linq;\r using Microsoft.WindowsAzure.MediaServices.Client;\r using Microsoft.WindowsAzure.Storage.Auth;\r using Microsoft.WindowsAzure.Storage;\r using Microsoft.WindowsAzure.Storage.Blob;\r     \r namespace CopyExistingBlobsIntoAsset\r {\r     class Program\r     {\r         // Read values from the App.config file.\r         private static readonly string _AMSAADTenantDomain =\r             ConfigurationManager.AppSettings[\"AMSAADTenantDomain\"];\r         private static readonly string _AMSRESTAPIEndpoint =\r             ConfigurationManager.AppSettings[\"AMSESTAPIEndpoint\"];\r         private static readonly string _AMSStorageAccountName =\r             ConfigurationManager.AppSettings[\"AMSStorageAccountName\"];\r         private static readonly string _AMSStorageAccountKey =\r             ConfigurationManager.AppSettings[\"AMSStorageAccountKey\"];\r         private static readonly string _sourceStorageAccountName =\r             ConfigurationManager.AppSettings[\"SourceStorageAccountName\"];\r         private static readonly string _sourceStorageAccountKey =\r             ConfigurationManager.AppSettings[\"SourceStorageAccountKey\"];\r \r         // Field for service context.\r         private static CloudMediaContext _context = null;\r         private static CloudStorageAccount _sourceStorageAccount = null;\r         private static CloudStorageAccount _destinationStorageAccount = null;\r \r         static void Main(string[] args)\r         {\r             var tokenCredentials = new AzureAdTokenCredentials(_AMSAADTenantDomain, \r                 AzureEnvironments.AzureChinaCloudEnvironment);\r             var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r             // Create the context for your source Media Services account.\r             _context = new CloudMediaContext(new Uri(_AMSRESTAPIEndpoint), tokenProvider);\r             \r             _sourceStorageAccount =\r                 new CloudStorageAccount(new StorageCredentials(_sourceStorageAccountName,\r                     _sourceStorageAccountKey), true);\r \r             _destinationStorageAccount =\r                 new CloudStorageAccount(new StorageCredentials(_AMSStorageAccountName,\r                     _AMSStorageAccountKey), true);\r \r             CloudBlobClient sourceCloudBlobClient =\r                 _sourceStorageAccount.CreateCloudBlobClient();\r             CloudBlobContainer sourceContainer =\r                 sourceCloudBlobClient.GetContainerReference(\"NameOfBlobContainerYouWantToCopy\");\r \r             CreateAssetFromExistingBlobs(sourceContainer);\r \r             Console.WriteLine(\"Done\");\r         }\r \r         static public IAsset CreateAssetFromExistingBlobs(CloudBlobContainer sourceBlobContainer)\r         {\r             CloudBlobClient destBlobStorage = _destinationStorageAccount.CreateCloudBlobClient();\r \r             // Create a new asset. \r             IAsset asset = _context.Assets.Create(\"NewAsset_\" + Guid.NewGuid(), AssetCreationOptions.None);\r \r             IAccessPolicy writePolicy = _context.AccessPolicies.Create(\"writePolicy\",\r                 TimeSpan.FromHours(24), AccessPermissions.Write);\r \r             ILocator destinationLocator =\r                 _context.Locators.CreateLocator(LocatorType.Sas, asset, writePolicy);\r \r             // Get the asset container URI and Blob copy from mediaContainer to assetContainer. \r             CloudBlobContainer destAssetContainer =\r                 destBlobStorage.GetContainerReference((new Uri(destinationLocator.Path)).Segments[1]);\r \r             if (destAssetContainer.CreateIfNotExists())\r             {\r                 destAssetContainer.SetPermissions(new BlobContainerPermissions\r                 {\r                     PublicAccess = BlobContainerPublicAccessType.Blob\r                 });\r             }\r \r             var blobList = sourceBlobContainer.ListBlobs();\r \r             foreach (var sourceBlob in blobList)\r             {\r                 var assetFile = asset.AssetFiles.Create((sourceBlob as ICloudBlob).Name);\r \r                 ICloudBlob destinationBlob = destAssetContainer.GetBlockBlobReference(assetFile.Name);\r \r                 CopyBlob(sourceBlob as ICloudBlob, destAssetContainer);\r \r                 assetFile.ContentFileSize = (sourceBlob as ICloudBlob).Properties.Length;\r                 assetFile.Update();\r                 Console.WriteLine(\"File {0} is of {1} size\", assetFile.Name, assetFile.ContentFileSize);\r             }\r \r             asset.Update();\r \r             destinationLocator.Delete();\r             writePolicy.Delete();\r \r             // Set the primary asset file.\r             // If, for example, we copied a set of Smooth Streaming files, \r             // set the .ism file to be the primary file. \r             // If we, for example, copied an .mp4, then the mp4 would be the primary file. \r             var ismAssetFile = asset.AssetFiles.ToList().\r                 Where(f => f.Name.EndsWith(\".ism\", StringComparison.OrdinalIgnoreCase)).ToArray().FirstOrDefault();\r \r             // The following code assigns the first .ism file as the primary file in the asset.\r             // An asset should have one .ism file.  \r             if (ismAssetFile != null)\r             {\r                 ismAssetFile.IsPrimary = true;\r                 ismAssetFile.Update();\r             }\r \r             return asset;\r         }\r \r         /// <summary>\r         /// Copies the specified blob into the specified container.\r         /// </summary>\r         /// <param name=\"sourceBlob\">The source container.</param>\r         /// <param name=\"destinationContainer\">The destination container.</param>\r         static private void CopyBlob(ICloudBlob sourceBlob, CloudBlobContainer destinationContainer)\r         {\r             var signature = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy\r             {\r                 Permissions = SharedAccessBlobPermissions.Read,\r                 SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24)\r             });\r \r             ICloudBlob destinationBlob = destinationContainer.GetBlockBlobReference(sourceBlob.Name);\r \r             if (destinationBlob.Exists())\r             {\r                 Console.WriteLine(string.Format(\"Destination blob '{0}' already exists. Skipping.\", destinationBlob.Uri));\r             }\r             else\r             {\r \r                 // Display the size of the source blob.\r                 Console.WriteLine(sourceBlob.Properties.Length);\r \r                 Console.WriteLine(string.Format(\"Copy blob '{0}' to '{1}'\", sourceBlob.Uri, destinationBlob.Uri));\r                 destinationBlob.StartCopyFromBlob(new Uri(sourceBlob.Uri.AbsoluteUri + signature));\r \r                 while (true)\r                 {\r                     // The StartCopyFromBlob is an async operation, \r                     // so we want to check if the copy operation is completed before proceeding. \r                     // To do that, we call FetchAttributes on the blob and check the CopyStatus. \r                     destinationBlob.FetchAttributes();\r                     if (destinationBlob.CopyState.Status != CopyStatus.Pending)\r                     {\r                         break;\r                     }\r                     //It's still not completed. So wait for some time.\r                     System.Threading.Thread.Sleep(1000);\r                 }\r \r                 // Display the size of the destination blob.\r                 Console.WriteLine(destinationBlob.Properties.Length);\r \r             }\r         }\r     }\r }\r ```\r ## <a name=\"next-steps\"></a>后续步骤\r \r 现即可编码已上传的资产。 有关详细信息，请参阅[对资产进行编码](media-services-portal-encode.md)。\r <!--Update_Description: update code to use AAD token instead of ACS-->"}