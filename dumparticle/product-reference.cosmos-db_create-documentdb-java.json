{"Title":"使用 Java 创建 Azure Cosmos DB 文档数据库","Description":"演示一个可以用来连接到 Azure Cosmos DB DocumentDB API 并进行查询的 Java 代码示例","Content":"# <a name=\"azure-cosmos-db-create-a-document-database-using-java-and-the-azure-portal\"></a>Azure Cosmos DB：使用 Java 和 Azure 门户创建文档数据库\r \r Azure Cosmos DB 由 世纪互联 提供，是多个区域分布的多模型数据库服务。 使用 Azure Cosmos DB，可以快速创建和查询托管的文档和表数据库。\r <!-- Not Available on Graph -->\r <!-- Notice: 全球分布 to 多个区域分布 -->\r \r 本快速入门通过适用于 Azure Cosmos DB 的 Azure 门户工具创建文档数据库。 本快速入门还介绍了如何使用 [DocumentDB Java API](documentdb-sdk-java.md) 快速创建 Java 控制台应用。 本快速入门中的说明适用于任何能够运行 Java 的操作系统。 通过完成本快速入门，可以熟悉如何通过 UI 或编程方式（以首选方式为准）创建和修改文档数据库资源。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r [!INCLUDE [quickstarts-free-trial-note](../../includes/quickstarts-free-trial-note.md)] \r [!INCLUDE [cosmos-db-emulator-docdb-api](../../includes/cosmos-db-emulator-docdb-api.md)]\r \r 此外： \r * [Java 开发工具包 (JDK) 1.7+](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\r     * 在 Ubuntu 上运行 `apt-get install default-jdk`，以便安装 JDK。\r     * 请确保设置 JAVA_HOME 环境变量，使之指向在其中安装了 JDK 的文件夹。\r * [下载](http://maven.apache.org/download.cgi)和[安装](http://maven.apache.org/install.html) [Maven](http://maven.apache.org/) 二进制存档\r     * 在 Ubuntu 上，可以通过运行 `apt-get install maven` 来安装 Maven。\r * [Git](https://www.git-scm.com/)\r     * 在 Ubuntu 上，可以通过运行 `sudo apt-get install git` 来安装 Git。\r \r ## <a name=\"create-a-database-account\"></a>创建数据库帐户\r \r 在创建文档数据库之前，需通过 Azure Cosmos DB 创建 SQL (Cosmos DB) 数据库帐户。\r \r [!INCLUDE [cosmos-db-create-dbaccount](../../includes/cosmos-db-create-dbaccount.md)]\r \r ## <a name=\"add-a-collection\"></a>添加集合\r \r [!INCLUDE [cosmos-db-create-collection](../../includes/cosmos-db-create-collection.md)]\r \r <a id=\"add-sample-data\"></a>\r ## <a name=\"add-sample-data\"></a>添加示例数据\r \r 现在可以使用数据资源管理器将数据添加到新集合。\r \r 1. 展开“项”集合，依次单击“文档” > “新建文档”。\r \r     ![在 Azure 门户的数据资源管理器中创建新文档](./media/create-documentdb-java/azure-cosmosdb-data-explorer-new-document.png)\r \r 2. 现在，采用以下结构将文档添加到集合中，再单击“保存”。\r \r      ```json\r      {\r          \"id\": \"1\",\r          \"category\": \"personal\",\r          \"name\": \"groceries\",\r          \"description\": \"Pick up apples and strawberries.\",\r          \"isComplete\": false\r      }\r      ```\r \r     ![通过复制添加 json 数据，然后在 Azure 门户的数据资源管理器中单击“保存”](./media/create-documentdb-java/azure-cosmosdb-data-explorer-save-document.png)\r \r 3.  再创建并保存一个文档，将 `id` 更改为 2，并将其他属性更改为自己认为适当的值。 新文档可以具有所需的任何结构，因为 Azure Cosmos DB 不对数据施加任何架构。\r \r ## <a name=\"query-your-data\"></a>查询数据\r \r 现在可以在数据资源管理器中使用查询来检索和筛选数据。\r \r 1. 请注意，查询默认设置为 `SELECT * FROM c`。 此默认查询检索并显示集合中的所有文档。 \r \r     ![数据资源管理器中的默认查询是“SELECT * FROM c”](./media/create-documentdb-java/azure-cosmosdb-data-explorer-query.png)\r \r 2. 单击“编辑筛选器”按钮，将 `ORDER BY c._ts DESC` 添加到查询谓词框中，再单击“应用筛选器”，从而更改查询。\r \r     ![添加“ORDER BY c._ts DESC”并单击“应用筛选器”，更改默认查询](./media/create-documentdb-java/azure-cosmosdb-data-explorer-edit-query.png)\r \r 此修改后的查询根据文档的时间戳按降序列出文档，所以现在最先列出的是第二个文档。 如果熟悉 SQL 语法，可以在此框中输入任何受支持的 [SQL 查询](documentdb-sql-query.md)。 \r \r 数据资源管理器中的工作到此结束。 继续处理代码前，请注意，还可以使用数据资源管理器创建存储过程、UDF 和触发器，实现服务器端业务逻辑和缩放吞吐量。 数据资源管理器公开 API 中提供的所有内置编程数据访问，但你可以使用它轻松访问 Azure 门户中的数据。\r \r ## <a name=\"clone-the-sample-application\"></a>克隆示例应用程序\r \r 现在，让我们转到如何使用代码上来。 从 GitHub 克隆 DocumentDB API 应用，设置连接字符串，并运行该应用。 你会看到以编程方式处理数据是多么容易。 \r \r 1. 打开诸如 git bash 之类的 git 终端窗口，并使用 `cd` 命令更改为相应的示例应用程序安装文件夹。 \r \r     ```bash\r     cd \"C:\\git-samples\"\r     ```\r \r 2. 运行下列命令，克隆示例存储库。 此命令在计算机上创建示例应用程序的副本。\r \r     ```bash\r     git clone https://github.com/Azure-Samples/azure-cosmos-db-documentdb-java-getting-started.git\r     ```\r \r ## <a name=\"review-the-code\"></a>查看代码\r \r 此步骤是可选的。 如果有意了解如何使用代码创建数据库资源，可以查看下面的代码段。 这些代码段全部取自 C:\\git-samples\\azure-cosmos-db-documentdb-java-getting-started\\src\\GetStarted 文件夹中安装的 `Program.java` 文件。 否则，可以直接跳转到[更新连接字符串](#update-your-connection-string)。 \r \r * `DocumentClient` 初始化。 [DocumentClient](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_client) 为 Azure Cosmos DB 数据库服务提供客户端逻辑表示。 此客户端用于对服务配置和执行请求。\r \r     ```java\r     this.client = new DocumentClient(\"https://FILLME.documents.azure.cn\",\r             \"FILLME\", \r             new ConnectionPolicy(),\r             ConsistencyLevel.Session);\r     ```\r \r * [Database](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._database) 创建。\r \r     ```java\r     Database database = new Database();\r     database.setId(databaseName);\r \r     this.client.createDatabase(database, null);\r     ```\r \r * [DocumentCollection](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_collection) 创建。\r \r     ```java\r     DocumentCollection collectionInfo = new DocumentCollection();\r     collectionInfo.setId(collectionName);\r \r     ...\r \r     this.client.createCollection(databaseLink, collectionInfo, requestOptions);\r     ```\r \r * 使用 [createDocument](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_client.createdocument) 方法创建文档。\r \r     ```java\r     // Any Java object within your code can be serialized into JSON and written to Azure Cosmos DB\r     Family andersenFamily = new Family();\r     andersenFamily.setId(\"Andersen.1\");\r     andersenFamily.setLastName(\"Andersen\");\r     // More properties\r \r     String collectionLink = String.format(\"/dbs/%s/colls/%s\", databaseName, collectionName);\r     this.client.createDocument(collectionLink, family, new RequestOptions(), true);\r     ```\r \r * 使用 [queryDocuments](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_client.querydocuments) 方法，对 JSON 执行 SQL 查询。\r \r     ```java\r     FeedOptions queryOptions = new FeedOptions();\r     queryOptions.setPageSize(-1);\r     queryOptions.setEnableCrossPartitionQuery(true);\r \r     String collectionLink = String.format(\"/dbs/%s/colls/%s\", databaseName, collectionName);\r     FeedResponse<Document> queryResults = this.client.queryDocuments(\r         collectionLink,\r         \"SELECT * FROM Family WHERE Family.lastName = 'Andersen'\", queryOptions);\r \r     System.out.println(\"Running SQL query...\");\r     for (Document family : queryResults.getQueryIterable()) {\r         System.out.println(String.format(\"\\tRead %s\", family));\r     }\r     ```    \r \r ## <a name=\"update-your-connection-string\"></a>更新连接字符串\r \r 现在返回到 Azure 门户，获取连接字符串信息，并将其复制到应用。 这样，应用程序就可以与托管的数据库进行通信。\r \r 1. 在 [Azure 门户](http://portal.azure.cn/)中，单击“密钥”。 \r \r     使用屏幕右侧的“复制”按钮，复制最上面的 URI 值。\r \r     ![在 Azure 门户的“密钥”页中，查看并复制访问密钥](./media/create-documentdb-java/keys.png)\r \r 2. 打开 C:\\git-samples\\azure-cosmos-db-documentdb-java-getting-started\\src\\GetStarted 文件夹中的 `Program.java` 文件。 \r \r 3. 将门户中的 URI 值粘贴到第 45 行上的 `https://FILLME.documents.azure.cn`。\r \r 4. 返回到门户，并复制主密钥值，如屏幕截图所示。 将门户中的主密钥值粘贴到第 46 行上的 `FILLME`。\r \r     现在，getStartedDemo 方法应如下所示： \r \r     ```java\r     private void getStartedDemo() throws DocumentClientException, IOException {\r         this.client = new DocumentClient(\"https://youraccountname.documents.azure.cn:443/\",\r                 \"your-primary-key...RJhQrqQ5QQ==\", \r                 new ConnectionPolicy(),\r                 ConsistencyLevel.Session);\r     ```\r \r 5. 保存 Program.java 文件。\r \r ## <a name=\"run-the-app\"></a>运行应用程序\r \r 1. 在 git 终端窗口中，通过 `cd` 命令转到 azure-cosmos-db-documentdb-java-getting-started 文件夹。\r \r     ```git\r     cd \"C:\\git-samples\\azure-cosmos-db-documentdb-java-getting-started\"\r     ```\r \r 2. 在 git 终端窗口键入 `mvn package`，安装所需的 Java 包。\r \r 3. 在 git 终端窗口中，运行 `mvn exec:java -D exec.mainClass=GetStarted.Program`，启动 Java 应用程序。\r \r     此时，终端窗口显示通知，提示 FamilyDB 数据库已创建。 按键创建集合，再切换到数据资源管理器，此时会看到其中包含 FamilyDB 数据库。\r \r     继续按键创建文档，再执行查询。\r \r     在程序结束时，此应用程序的所有资源都会从帐户中删除，这样便不会产生任何费用。 \r \r     ![控制台输出](./media/create-documentdb-java/console-output.png)\r \r ## <a name=\"review-slas-in-the-azure-portal\"></a>在 Azure 门户中查看 SLA\r \r [!INCLUDE [cosmosdb-tutorial-review-slas](../../includes/cosmos-db-tutorial-review-slas.md)]\r \r ## <a name=\"clean-up-resources\"></a>清理资源\r \r [!INCLUDE [cosmosdb-delete-resource-group](../../includes/cosmos-db-delete-resource-group.md)]\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 本快速入门介绍了如何使用数据资源管理器创建 Azure Cosmos DB 帐户、文档数据库和集合，以及如何通过运行应用以编程方式执行同一操作。 现在可以将其他数据导入 Azure Cosmos DB 集合。 \r \r > [!div class=\"nextstepaction\"]\r > [将数据导入 Azure Cosmos DB](import-data.md)\r \r <!--Update_Description: update meta properties, wording update, update link -->"}