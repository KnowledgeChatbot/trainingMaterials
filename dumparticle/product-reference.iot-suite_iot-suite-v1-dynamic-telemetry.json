{"Title":"使用动态遥测","Description":"遵循本教程来了解如何配合使用 Azure IoT 套件动态遥测和远程监控预配置解决方案。","Content":"# <a name=\"use-dynamic-telemetry-with-the-remote-monitoring-preconfigured-solution\"></a>配合使用动态遥测和远程监控预配置解决方案\r \r 动态遥测可让你将发送到远程监控预配置解决方案的任何遥测数据可视化。 部署了预配置解决方案的模拟设备会发送温度和湿度遥测，可在仪表板上直观显示这些数据。 如果自定义现有的模拟设备、创建新的模拟设备或者将物理设备连接到预配置解决方案，则可以发送其他遥测值，例如外部温度、RPM 或风速。 然后，可以在仪表板上可视化这些附加的遥测数据。\r \r 本教程使用一个简单的 Node.js 模拟设备，可以轻松对它进行修改，以体验动态遥测。\r \r 若要完成本教程，需要：\r \r * 一个有效的 Azure 订阅。 如果没有帐户，可以创建一个试用帐户，只需几分钟即可完成。 有关详细信息，请参阅 [Azure 试用][lnk_free_trial]。\r * [Node.js][lnk-node] 0.12.x 或更高版本。\r \r 可以在任何操作系统上完成本教程，例如 Windows 或 Linux，只要能够在其中安装 Node.js 即可。\r \r [!INCLUDE [iot-suite-v1-provision-remote-monitoring](../../includes/iot-suite-v1-provision-remote-monitoring.md)]\r \r [!INCLUDE [iot-suite-v1-send-external-temperature](../../includes/iot-suite-v1-send-external-temperature.md)]\r \r ## <a name=\"add-a-telemetry-type\"></a>添加遥测类型\r \r 下一步是将 Node.js 模拟设备生成的遥测数据替换为一组新值：\r \r 1. 在命令提示符或 shell 中键入 **Ctrl+C** 以停止 Node.js 模拟设备。\r 2. 在 remote_monitoring.js 文件中，可以查看现有温度、湿度和外部温度遥测的基本数据值。 如下添加 **rpm** 的基本数据值：\r \r     ```nodejs\r     // Sensors data\r     var temperature = 50;\r     var humidity = 50;\r     var externalTemperature = 55;\r     var rpm = 200;\r     ```\r \r 3. Node.js 模拟设备使用 remote_monitoring.js 文件中的 **generateRandomIncrement** 函数，向基本数据值添加随机增量。 在现有随机化后面添加一行代码，以将 **rpm** 的值随机化，如下所示：\r \r     ```nodejs\r     temperature += generateRandomIncrement();\r     externalTemperature += generateRandomIncrement();\r     humidity += generateRandomIncrement();\r     rpm += generateRandomIncrement();\r     ```\r \r 4. 将新的 rpm 值添加到设备发送给 IoT 中心的 JSON 有效负载：\r \r     ```nodejs\r     var data = JSON.stringify({\r       'DeviceID': deviceId,\r       'Temperature': temperature,\r       'Humidity': humidity,\r       'ExternalTemperature': externalTemperature,\r       'RPM': rpm\r     });\r     ```\r \r 5. 使用以下命令运行 Node.js 模拟设备：\r \r     `node remote_monitoring.js`\r \r 6. 观察仪表板中图表上显示的新 RPM 遥测类型：\r \r ![将 RPM 添加到仪表板][image3]\r \r > [!NOTE]\r > 可能需要在仪表板中的“设备”页上禁用 Node.js 设备并重新将它启用，才能立即查看更改。\r \r ## <a name=\"customize-the-dashboard-display\"></a>自定义仪表板显示内容\r \r **Device-Info** 消息可以包含设备可发送给 IoT 中心的遥测数据的相关元数据。 此元数据可指定设备发送的遥测类型。 修改 remote_monitoring.js 文件中的 **deviceMetaData** 值，在 **Commands** 定义后附加 **Telemetry** 定义。 以下代码片段显示 **Commands** 定义（务必在 **Commands** 定义后添加 `,`）：\r \r ```nodejs\r 'Commands': [{\r   'Name': 'SetTemperature',\r   'Parameters': [{\r     'Name': 'Temperature',\r     'Type': 'double'\r   }]\r },\r {\r   'Name': 'SetHumidity',\r   'Parameters': [{\r     'Name': 'Humidity',\r     'Type': 'double'\r   }]\r }],\r 'Telemetry': [{\r   'Name': 'Temperature',\r   'Type': 'double'\r },\r {\r   'Name': 'Humidity',\r   'Type': 'double'\r },\r {\r   'Name': 'ExternalTemperature',\r   'Type': 'double'\r }]\r ```\r \r > [!NOTE]\r > 远程监控解决方案会比较元数据定义和遥测流中的数据并区分大小写。\r \r \r 按以上代码片段中所述添加 **Telemetry** 定义不会影响仪表板的行为。 但是，元数据也可以包含 **DisplayName** 属性来自定义仪表板中的显示内容。 如以下片段中所述更新 **Telemetry** 元数据定义：\r \r ```nodejs\r 'Telemetry': [\r {\r   'Name': 'Temperature',\r   'Type': 'double',\r   'DisplayName': 'Temperature (C*)'\r },\r {\r   'Name': 'Humidity',\r   'Type': 'double',\r   'DisplayName': 'Humidity (relative)'\r },\r {\r   'Name': 'ExternalTemperature',\r   'Type': 'double',\r   'DisplayName': 'Outdoor Temperature (C*)'\r }\r ]\r ```\r \r 以下屏幕截图演示了此项更改如何修改仪表板上的图表图例：\r \r ![自定义图表图例][image4]\r \r > [!NOTE]\r > 可能需要在仪表板中的“设备”页上禁用 Node.js 设备并重新将它启用，才能立即查看更改。\r \r ## <a name=\"filter-the-telemetry-types\"></a>筛选遥测类型\r \r 默认情况下，仪表板上的图表显示遥测流中的每个数据系列。 可以使用 **Device-Info** 元数据来隐藏图表中的特定遥测类型。 \r \r 若要使图表只显示温度和湿度遥测数据，请省略 **Device-Info** **Telemetry** 元数据中的 **ExternalTemperature**，如下所示：\r \r ```nodejs\r 'Telemetry': [\r {\r   'Name': 'Temperature',\r   'Type': 'double',\r   'DisplayName': 'Temperature (C*)'\r },\r {\r   'Name': 'Humidity',\r   'Type': 'double',\r   'DisplayName': 'Humidity (relative)'\r },\r //{\r //  'Name': 'ExternalTemperature',\r //  'Type': 'double',\r //  'DisplayName': 'Outdoor Temperature (C*)'\r //}\r ]\r ```\r \r **室外温度** 不再显示在图表上：\r \r ![筛选仪表板上的遥测数据][image5]\r \r 此更改仅影响图表的显示效果。 仍会存储 **ExternalTemperature** 数据值，并可用于任何后端处理。\r \r > [!NOTE]\r > 可能需要在仪表板中的“设备”页上禁用 Node.js 设备并重新将它启用，才能立即查看更改。\r >\r >\r \r ## <a name=\"handle-errors\"></a>处理错误\r \r 要使某个数据流显示在图表上，其在 **Device-Info** 元数据中的 **Type** 必须与遥测值的数据类型匹配。 例如，如果元数据指定湿度数据的 **Type** 必须为 **int**，而在遥测流中找到 **double**，则湿度遥测不会显示在图表上。 但是， **湿度** 值仍会存储，并可供任何后端处理使用。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 熟悉了动态遥测的使用方式，现在可深入了解预配置的解决方案如何使用设备信息： [远程监控预配置解决方案中的设备信息元数据][lnk-devinfo]。\r \r [lnk-devinfo]: iot-suite-v1-remote-monitoring-device-info.md\r \r [image3]: media/iot-suite-v1-dynamic-telemetry/image3.png\r [image4]: media/iot-suite-v1-dynamic-telemetry/image4.png\r [image5]: media/iot-suite-v1-dynamic-telemetry/image5.png\r \r [lnk_free_trial]: http://www.azure.cn/1rmb-trial/\r [lnk-node]: http://nodejs.org\r "}