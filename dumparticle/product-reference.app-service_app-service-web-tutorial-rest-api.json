{"Title":"Azure 应用服务中的 Node.js API 应用","Description":"了解如何创建 Node.js RESTful API 并将其部署到 Azure 应用服务中的 API 应用。","Content":"# <a name=\"build-a-nodejs-restful-api-and-deploy-it-to-an-api-app-in-azure\"></a>构建 Node.js RESTful API 并将它部署到 Azure 中的 API 应用\r \r 本快速入门介绍如何使用 [Swagger](http://swagger.io/) 定义创建以 Node.js [Express](http://expressjs.com/) 编写的 REST API，并在 Azure 上部署它。 使用命令行工具创建应用，使用 [Azure CLI](https://docs.azure.cn/zh-cn/cli/get-started-with-azure-cli?view=azure-cli-lastest) 配置资源，并使用 Git 部署该应用。  完成后，即可拥有一个在 Azure 上运行的有效示例 REST API。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r * [Git](https://git-scm.com/)\r * [Node.js 和 NPM](https://nodejs.org/)\r \r [!INCLUDE [quickstarts-free-trial-note](../../includes/quickstarts-free-trial-note.md)]\r \r \r 如果选择在本地安装并使用 CLI，本主题要求运行 Azure CLI 2.0 版或更高版本。 运行 `az --version` 即可查找版本。 如果需要进行安装或升级，请参阅[安装 Azure CLI 2.0](https://docs.azure.cn/zh-cn/cli/install-azure-cli?view=azure-cli-lastest)。 \r \r ## <a name=\"prepare-your-environment\"></a>准备环境\r \r 1. 在终端窗口中，运行以下命令，将示例克隆到本地计算机。\r \r     ```bash\r     git clone https://github.com/Azure-Samples/app-service-api-node-contact-list\r     ```\r \r 2. 切换到包含示例代码的目录。\r \r     ```bash\r     cd app-service-api-node-contact-list\r     ```\r \r 3. 在本地计算机上安装 [Swaggerize](https://www.npmjs.com/package/swaggerize-express)。 Swaggerize 是一种工具，用于从 Swagger 定义生成用于 REST API 的 Node.js 代码。\r \r     ```bash\r     npm install -g yo\r     npm install -g generator-swaggerize\r     ```\r \r ## <a name=\"generate-nodejs-code\"></a>生成 Node.js 代码 \r \r 本教程部分为 API 开发工作流建模，将在其中先创建 Swagger 元数据，然后以此创建（自动生成）API 服务器代码基架。 \r \r 将目录更改为 *start* 文件夹，然后运行 `yo swaggerize`。 Swaggerize 从 *api.json* 中的 Swagger 定义创建用于 API 的 Node.js 项目。\r \r ```bash\r cd start\r yo swaggerize --apiPath api.json --framework express\r ```\r \r 当 Swaggerize 请求提供项目名称时，请使用 *ContactList*。\r    \r    ```bash\r    Swaggerize Generator\r    Tell us a bit about your application\r    ? What would you like to call this project: ContactList\r    ? Your name: Francis Totten\r    ? Your github user name: fabfrank\r    ? Your email: frank@fabrikam.net\r    ```\r    \r ## <a name=\"customize-the-project-code\"></a>自定义项目代码\r \r 1. 将 *lib* 文件夹复制到 `yo swaggerize` 创建的 *ContactList* 文件夹，然后将目录更改为 *ContactList*。\r \r     ```bash\r     cp -r lib/ ContactList/\r     cd ContactList\r     ```\r \r 2. 安装 `jsonpath` 和 `swaggerize-ui` NPM 模块。 \r \r     ```bash\r     npm install --save jsonpath swaggerize-ui\r     ```\r \r 3. 将 *handlers/contacts.js* 中的代码替换为以下代码： \r     ```javascript\r     'use strict';\r \r     var repository = require('../lib/contactRepository');\r \r     module.exports = {\r         get: function contacts_get(req, res) {\r             res.json(repository.all())\r         }\r     };\r     ```\r     此代码使用 *lib/contactRepository.js* 提供的 *lib/contacts.json* 中存储的 JSON 数据。 新的 *contacts.js* 代码将存储库中的所有联系人返回为 JSON 有效负载形式。 \r \r 4. 将 **handlers/contacts/{id}.js** 文件中的代码替换为以下代码：\r \r     ```javascript\r     'use strict';\r \r     var repository = require('../../lib/contactRepository');\r \r     module.exports = {\r         get: function contacts_get(req, res) {\r             res.json(repository.get(req.params['id']));\r         }    \r     };\r     ```\r \r     此代码允许使用路径变量仅返回具有给定 ID 的联系人。\r \r 5. 将 **server.js** 中的代码替换为以下代码：\r \r     ```javascript\r     'use strict';\r \r     var port = process.env.PORT || 8000; \r \r     var http = require('http');\r     var express = require('express');\r     var bodyParser = require('body-parser');\r     var swaggerize = require('swaggerize-express');\r     var swaggerUi = require('swaggerize-ui'); \r     var path = require('path');\r     var fs = require(\"fs\");\r     \r     fs.existsSync = fs.existsSync || require('path').existsSync;\r \r     var app = express();\r \r     var server = http.createServer(app);\r \r     app.use(bodyParser.json());\r \r     app.use(swaggerize({\r         api: path.resolve('./config/swagger.json'),\r         handlers: path.resolve('./handlers'),\r         docspath: '/swagger' \r     }));\r \r     // change four\r     app.use('/docs', swaggerUi({\r         docs: '/swagger'  \r     }));\r \r     server.listen(port, function () { \r     });\r     ```   \r \r     此代码进行了一些小的更改，可与 Azure 应用服务配合使用，并公开一个用于 API 的交互式 Web 界面。\r \r ### <a name=\"test-the-api-locally\"></a>在本地测试 API\r \r 1. 启动 Node.js 应用\r     ```bash\r     npm start\r     ```\r     \r 2. 浏览到 http://localhost:8000/contacts，查看整个联系人列表的 JSON。\r    \r    ```json\r     {\r         \"id\": 1,\r         \"name\": \"Barney Poland\",\r         \"email\": \"barney@contoso.com\"\r     },\r     {\r         \"id\": 2,\r         \"name\": \"Lacy Barrera\",\r         \"email\": \"lacy@contoso.com\"\r     },\r     {\r         \"id\": 3,\r         \"name\": \"Lora Riggs\",\r         \"email\": \"lora@contoso.com\"\r     }\r    ```\r \r 3. 浏览到 http://localhost:8000/contacts/2，查看具有两个 `id` 中其中一个的联系人。\r    \r     ```json\r     { \r         \"id\": 2,\r         \"name\": \"Lacy Barrera\",\r         \"email\": \"lacy@contoso.com\"\r     }\r     ```\r \r 4. 在 http://localhost:8000/docs 使用 Swagger Web 界面测试 API。\r    \r     ![Swagger Web 界面](./media/app-service-web-tutorial-rest-api/swagger-ui.png)\r \r ## <a id=\"createapiapp\"></a>创建 API 应用\r \r 本部分将使用 Azure CLI 2.0 创建在 Azure 应用服务上托管 API 的资源。 \r \r 1.  使用 [az login](https://docs.azure.cn/zh-cn/cli/index?view=azure-cli-latest#az_login) 命令登录到 Azure 订阅，并按照屏幕上的说明进行操作。\r \r     ```azurecli\r     az login\r     ```\r \r 2. 如果有多个 Azure 订阅，则可将默认订阅更改为所需订阅。\r \r     ````azurecli\r     az account set --subscription <name or id>\r     ````\r \r 3. [!INCLUDE [Create resource group](../../includes/app-service-api-create-resource-group.md)] \r \r 4. [!INCLUDE [Create app service plan](../../includes/app-service-api-create-app-service-plan.md)]\r \r 5. [!INCLUDE [Create API app](../../includes/app-service-api-create-api-app.md)] \r \r \r ## <a name=\"deploy-the-api-with-git\"></a>使用 Git 部署 API\r \r 通过将提交内容从本地 Git 存储库推送到 Azure 应用服务，将代码部署到 API 应用。\r \r 1. [!INCLUDE [Configure your deployment credentials](../../includes/configure-deployment-user-no-h.md)] \r \r 2. 初始化 *ContactList* 目录中的一个新存储库。 \r \r     ```bash\r     git init .\r     ```\r \r 3. 从 Git 中排除在教程前面步骤中由 npm 创建的 *node_modules* 目录。 在当前目录中创建新的 `.gitignore` 文件，并在文件的任何位置添加新的以下文本行。\r \r     ```\r     node_modules/\r     ```\r     确认已通过 `git status` 忽略 `node_modules` 文件夹。\r \r 4. 提交存储库更改。\r     ```bash\r     git add .\r     git commit -m \"initial version\"\r     ```\r \r 5. [!INCLUDE [Push to Azure](../../includes/app-service-api-git-push-to-azure.md)]  \r  \r ## <a name=\"test-the-api--in-azure\"></a>在 Azure 中测试 API\r \r 1. 在浏览器中打开 http://app_name.chinacloudsites.cn/contacts。 返回的 JSON 与本教程之前在本地提发出请求时返回的内容相同。\r \r    ```json\r    {\r        \"id\": 1,\r        \"name\": \"Barney Poland\",\r        \"email\": \"barney@contoso.com\"\r    },\r    {\r        \"id\": 2,\r        \"name\": \"Lacy Barrera\",\r        \"email\": \"lacy@contoso.com\"\r    },\r    {\r        \"id\": 3,\r        \"name\": \"Lora Riggs\",\r        \"email\": \"lora@contoso.com\"\r    }\r    ```\r \r 2. 在浏览器中转到 `http://app_name.chinacloudsites.cn/docs` 终结点，试用在 Azure 中运行的 Swagger UI。\r \r     ![Swagger Ii](./media/app-service-web-tutorial-rest-api/swagger-azure-ui.png)\r \r     现在可通过将提交内容推送到 Azure Git 存储库，将示例 API 的更新部署到 Azure。\r \r ## <a name=\"clean-up\"></a>清理\r \r 若要清除此快速入门中创建的资源，请运行以下 Azure CLI 命令：\r \r ```azurecli\r az group delete --name myResourceGroup\r ```\r \r ## <a name=\"next-step\"></a>后续步骤 \r > [!div class=\"nextstepaction\"]\r > [将现有的自定义 DNS 名称映射到 Azure Web 应用](app-service-web-tutorial-custom-domain.md)\r \r <!--Update_Description: update wording-->"}