{"Title":"使用 PlayReady 动态通用加密","Description":"Azure 媒体服务允许传送受 Microsoft PlayReady DRM 保护的 MPEG-DASH 流、平滑流式处理流和 HTTP 实时流式处理 (HLS) 流。","Content":"# <a name=\"using-playready-dynamic-common-encryption\"></a>使用 PlayReady 动态通用加密\r \r > [!div class=\"op_single_selector\"]\r > * [.NET](media-services-protect-with-drm.md)\r > * [Java](https://github.com/southworkscom/azure-sdk-for-media-services-java-samples)\r > * [PHP](https://github.com/Azure/azure-sdk-for-php/tree/master/examples/MediaServices)\r >\r >\r \r Azure 媒体服务允许传送受 [Microsoft PlayReady DRM](https://www.microsoft.com/playready/overview/) 保护的 MPEG-DASH 流、平滑流式处理流和 HTTP 实时流式处理 (HLS) 流。 PlayReady 是按通用加密 (ISO/IEC 23001-7 CENC) 规范加密的。\r \r 媒体服务提供了用于传送 PlayReady DRM 许可证的服务。 媒体服务还提供用于配置所需权限和限制的 API，这样当用户播放受保护的内容时，PlayReady DRM 运行时便会强制实施这些权限和限制。 当用户请求受 DRM 保护的内容时，播放器应用程序从 AMS 许可证服务请求许可证。 如果播放器已获授权，AMS 许可证服务将向播放器颁发许可证。 PlayReady 许可证包含客户端播放器用来对内容进行解密和流式传输的解密密钥。\r \r 媒体服务支持通过多种方式对发出密钥请求的用户进行授权。 内容密钥授权策略可能受到一种或多种授权限制：开放或令牌限制。 令牌限制策略必须附带由安全令牌服务 (STS) 颁发的令牌。 媒体服务支持采用[简单 Web 令牌](https://msdn.microsoft.com/library/gg185950.aspx#BKMK_2) (SWT) 格式和 [JSON Web 令牌](https://msdn.microsoft.com/library/gg185950.aspx#BKMK_3) (JWT) 格式的令牌。 有关详细信息，请参阅“配置内容密钥授权策略”。\r \r 为了充分利用动态加密，资产必须包含一组多码率 MP4 文件或多码率平滑流源文件。 还需要为资产配置传送策略（在本主题后面部分介绍）。 然后，根据流式处理 URL 中指定的格式，按需流式处理服务器会确保使用选定的协议来传送流。 因此，用户只需以单一存储格式存储文件并为其付费，媒体服务就会基于客户端的每个请求构建并提供相应的 HTTP 响应。\r \r 开发应用程序以传送受多个 DRM（例如 PlayReady）保护的媒体的开发人员可以参考本主题。 本主题介绍如何使用授权策略来配置 PlayReady 许可证传送服务，确保只有经过授权的客户端才能接收 PlayReady。 此外，还介绍如何通过 DASH 使用 PlayReady 进行动态加密。\r \r >[!NOTE]\r >创建 AMS 帐户后，会将一个处于“已停止”状态的**默认**流式处理终结点添加到帐户。 若要开始流式传输内容并利用动态打包和动态加密，要从中流式传输内容的流式处理终结点必须处于“正在运行”状态。 \r \r ## <a name=\"download-sample\"></a>下载示例\r 可以从 [此处](https://github.com/Azure-Samples/media-services-dotnet-dynamic-encryption-with-drm)下载本文所述的示例。\r \r ## <a name=\"configuring-dynamic-common-encryption-and-drm-license-delivery-services\"></a>配置动态通用加密和 DRM 许可证传送服务\r \r 下面是使用 PlayReady 保护资产时需要执行的常规步骤，这些步骤使用媒体服务许可证传送服务，也使用动态加密。\r \r 1. 创建资产并将文件上传到资产。\r 2. 将包含文件的资产编码为自适应比特率 MP4 集。\r 3. 创建内容密钥并将其与编码资产相关联。 在媒体服务中，内容密钥包含资产的加密密钥。\r 4. 配置内容密钥授权策略。 必须配置内容密钥授权策略，客户端必须遵守该策略，才能将内容密钥传送到客户端。\r \r     在创建内容密钥授权策略时，需要指定以下信息：传送方法 (PlayReady)、限制（开放或令牌），以及用于定义如何将密钥传送到客户端的密钥传送类型的具体信息（[PlayReady](media-services-playready-license-template-overview.md) 许可证模板）。\r \r 5. 为资产配置传送策略。 传送策略配置包括：传送协议（例如 MPEG DASH、HLS、平滑流式处理或所有这些协议）、动态加密类型（例如常用加密）、PlayReady 许可证获取 URL。\r \r     可以将不同的策略应用到同一资产上的每个协议。 例如，可以将 PlayReady 加密应用到平滑流/DASH，将 AES 信封应用到 HLS。 将阻止流式处理传送策略中未定义的任何协议（例如，添加仅将 HLS 指定为协议的单个策略）。 如果根本没有定义任何传送策略，则情况不是这样。 此时，所有协议都可以通过。\r \r 6. 创建 OnDemand 定位符以获取流 URL。\r \r 可以在主题末尾找到完整的 .NET 示例。\r \r 下图演示了上述工作流。 在图中，使用令牌进行了身份验证。\r \r ![使用 PlayReady 进行保护](./media/media-services-content-protection-overview/media-services-content-protection-with-drm.png)\r \r 本主题的余下部分提供了详细说明、代码示例和主题链接，向你演示如何完成上述任务。\r \r ## <a name=\"current-limitations\"></a>当前限制\r 如果添加或更新资产的传送策略，则必须删除关联的定位符（如果有）并创建新定位符。\r \r \r ## <a name=\"create-an-asset-and-upload-files-into-the-asset\"></a>创建资产并将文件上传到资产\r 为了对视频进行管理、编码和流式处理，必须首先将内容上传到 Azure 媒体服务中。 上传完成后，相关内容即安全地存储在云中供后续处理和流式处理。\r \r 有关详细信息，请参阅[将文件上传到媒体服务帐户](media-services-dotnet-upload-files.md)。\r \r ## <a name=\"encode-the-asset-containing-the-file-to-the-adaptive-bitrate-mp4-set\"></a>将包含文件的资产编码为自适应比特率 MP4 集。\r 使用动态加密时，只需创建包含一组多码率 MP4 文件或多码率平滑流源文件的资产。 然后，按需流式处理服务器会确保用户以选定的协议按清单和分段请求中的指定格式接收流。 因此，用户只需以单一存储格式存储文件并为其付费，媒体服务服务就会基于客户端的请求构建并提供相应响应。 有关详细信息，请参阅 [动态打包概述](media-services-dynamic-packaging-overview.md) 主题。\r \r 有关如何编码的说明，请参阅 [如何使用 Media Encoder Standard 对资产进行编码](media-services-dotnet-encode-with-media-encoder-standard.md)。\r \r ## <a id=\"create_contentkey\"></a>创建内容密钥并将其与编码资产相关联\r 在媒体服务中，内容密钥包含用于加密资产的密钥。\r \r 有关详细信息，请参阅 [创建内容密钥](media-services-dotnet-create-contentkey.md)。\r \r ## <a id=\"configure_key_auth_policy\"></a>配置内容密钥授权策略\r 媒体服务支持通过多种方式对发出密钥请求的用户进行身份验证。 必须配置内容密钥授权策略，客户端（播放器）必须遵守该策略，才能将密钥传送到客户端。 内容密钥授权策略可能受到一种或多种授权限制：开放或令牌限制。\r \r 有关详细信息，请参阅 [配置内容密钥授权策略](media-services-dotnet-configure-content-key-auth-policy.md#playready-dynamic-encryption)。\r \r ## <a id=\"configure_asset_delivery_policy\"></a>配置资产传送策略\r 为资产配置传送策略。 资产传送策略配置包括：\r \r * DRM 许可证获取 URL。\r * 资产传送协议（例如 MPEG DASH、HLS、平滑流式处理或全部）。\r * 动态加密类型（在本示例中为“常用加密”）。\r \r 有关详细信息，请参阅 [配置资产传送策略 ](media-services-rest-configure-asset-delivery-policy.md)。\r \r ## <a id=\"create_locator\"></a>创建 OnDemand 流定位符以获取流 URL\r 需要为用户提供平滑流、DASH 或 HLS 的流 URL。\r \r > [!NOTE]\r > 如果添加或更新资产的传送策略，则必须删除现有定位符（如果有）并创建新定位符。\r >\r >\r \r 有关如何发布资产和生成流 URL 的说明，请参阅 [生成流 URL](media-services-deliver-streaming-content.md)。\r \r ## <a name=\"get-a-test-token\"></a>获取测试令牌\r 获取用于密钥授权策略的基于令牌限制的测试令牌。\r \r     // Deserializes a string containing an Xml representation of a TokenRestrictionTemplate\r     // back into a TokenRestrictionTemplate class instance.\r     TokenRestrictionTemplate tokenTemplate =\r         TokenRestrictionTemplateSerializer.Deserialize(tokenTemplateString);\r \r     // Generate a test token based on the data in the given TokenRestrictionTemplate.\r     //The GenerateTestToken method returns the token without the word “Bearer” in front\r     //so you have to add it in front of the token string.\r     string testToken = TokenRestrictionTemplateSerializer.GenerateTestToken(tokenTemplate);\r     Console.WriteLine(\"The authorization token is:\\nBearer {0}\", testToken);\r \r \r 可以使用 [AMS Player](http://amsplayer.azurewebsites.net/azuremediaplayer.html) 来测试流。\r \r ## <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r \r 1. 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r 2. 将以下元素添加到 app.config 文件中定义的 **appSettings**：\r \r         <add key=\"Issuer\" value=\"http://testacs.com\"/>\r         <add key=\"Audience\" value=\"urn:test\"/>\r \r ## <a name=\"example\"></a>示例\r \r 以下示例演示的功能已引入用于 .Net 的 Azure 媒体服务 SDK - 版本 3.5.2。\r \r 使用本部分中所示的代码覆盖 Program.cs 文件中的代码。\r \r >[!NOTE]\r >不同 AMS 策略的策略限制为 1,000,000 个（例如，对于定位器策略或 ContentKeyAuthorizationPolicy）。 如果始终使用相同的日期/访问权限，则应使用相同的策略 ID，例如，用于要长期就地保留的定位符的策略（非上传策略）。 有关详细信息，请参阅[此](media-services-dotnet-manage-entities.md#limit-access-policies)主题。\r \r 请务必将变量更新为指向输入文件所在的文件夹。\r \r     using System;\r     using System.Collections.Generic;\r     using System.Configuration;\r     using System.IO;\r     using System.Linq;\r     using System.Threading;\r     using Microsoft.WindowsAzure.MediaServices.Client;\r     using Microsoft.WindowsAzure.MediaServices.Client.ContentKeyAuthorization;\r     using Microsoft.WindowsAzure.MediaServices.Client.DynamicEncryption;\r     using Microsoft.WindowsAzure.MediaServices.Client.Widevine;\r     using Newtonsoft.Json;\r \r     namespace DynamicEncryptionWithDRM\r     {\r         class Program\r         {\r         // Read values from the App.config file.\r         private static readonly string _AADTenantDomain =\r         ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r         private static readonly string _RESTAPIEndpoint =\r         ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r         private static readonly Uri _sampleIssuer =\r             new Uri(ConfigurationManager.AppSettings[\"Issuer\"]);\r         private static readonly Uri _sampleAudience =\r             new Uri(ConfigurationManager.AppSettings[\"Audience\"]);\r \r         // Field for service context.\r         private static CloudMediaContext _context = null;\r \r         private static readonly string _mediaFiles =\r             Path.GetFullPath(@\"../..\\Media\");\r \r         private static readonly string _singleMP4File =\r             Path.Combine(_mediaFiles, @\"BigBuckBunny.mp4\");\r \r         static void Main(string[] args)\r         {\r             var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r             var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r             _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r             bool tokenRestriction = false;\r             string tokenTemplateString = null;\r \r             IAsset asset = UploadFileAndCreateAsset(_singleMP4File);\r             Console.WriteLine(\"Uploaded asset: {0}\", asset.Id);\r \r             IAsset encodedAsset = EncodeToAdaptiveBitrateMP4Set(asset);\r             Console.WriteLine(\"Encoded asset: {0}\", encodedAsset.Id);\r \r             IContentKey key = CreateCommonTypeContentKey(encodedAsset);\r             Console.WriteLine(\"Created key {0} for the asset {1} \", key.Id, encodedAsset.Id);\r             Console.WriteLine(\"PlayReady License Key delivery URL: {0}\", key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense));\r             Console.WriteLine();\r \r             if (tokenRestriction)\r             tokenTemplateString = AddTokenRestrictedAuthorizationPolicy(key);\r             else\r             AddOpenAuthorizationPolicy(key);\r \r             Console.WriteLine(\"Added authorization policy: {0}\", key.AuthorizationPolicyId);\r             Console.WriteLine();\r \r             CreateAssetDeliveryPolicy(encodedAsset, key);\r             Console.WriteLine(\"Created asset delivery policy. \\n\");\r             Console.WriteLine();\r \r             if (tokenRestriction && !String.IsNullOrEmpty(tokenTemplateString))\r             {\r             // Deserializes a string containing an Xml representation of a TokenRestrictionTemplate\r             // back into a TokenRestrictionTemplate class instance.\r             TokenRestrictionTemplate tokenTemplate =\r                 TokenRestrictionTemplateSerializer.Deserialize(tokenTemplateString);\r \r             // Generate a test token based on the the data in the given TokenRestrictionTemplate.\r             // Note, you need to pass the key id Guid because we specified\r             // TokenClaim.ContentKeyIdentifierClaim in during the creation of TokenRestrictionTemplate.\r             Guid rawkey = EncryptionUtils.GetKeyIdAsGuid(key.Id);\r             string testToken = TokenRestrictionTemplateSerializer.GenerateTestToken(tokenTemplate, null, rawkey,\r                                         DateTime.UtcNow.AddDays(365));\r             Console.WriteLine(\"The authorization token is:\\nBearer {0}\", testToken);\r             Console.WriteLine();\r             }\r \r             // You can use the http://amsplayer.azurewebsites.net/azuremediaplayer.html player to test streams.\r             // Note that DASH works on IE 11 (via PlayReady), Edge (via PlayReady).\r \r             string url = GetStreamingOriginLocator(encodedAsset);\r             Console.WriteLine(\"Encrypted DASH URL: {0}/manifest(format=mpd-time-csf)\", url);\r \r             Console.ReadLine();\r         }\r \r         static public IAsset UploadFileAndCreateAsset(string singleFilePath)\r         {\r             if (!File.Exists(singleFilePath))\r             {\r             Console.WriteLine(\"File does not exist.\");\r             return null;\r             }\r \r             var assetName = Path.GetFileNameWithoutExtension(singleFilePath);\r             IAsset inputAsset = _context.Assets.Create(assetName, AssetCreationOptions.None);\r \r             var assetFile = inputAsset.AssetFiles.Create(Path.GetFileName(singleFilePath));\r \r             Console.WriteLine(\"Created assetFile {0}\", assetFile.Name);\r \r             Console.WriteLine(\"Upload {0}\", assetFile.Name);\r \r             assetFile.Upload(singleFilePath);\r             Console.WriteLine(\"Done uploading {0}\", assetFile.Name);\r \r             return inputAsset;\r         }\r \r         static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset inputAsset)\r         {\r             var encodingPreset = \"Adaptive Streaming\";\r \r             IJob job = _context.Jobs.Create(String.Format(\"Encoding into Mp4 {0} to {1}\",\r                         inputAsset.Name,\r                         encodingPreset));\r \r             var mediaProcessors =\r             _context.MediaProcessors.Where(p => p.Name.Contains(\"Media Encoder Standard\")).ToList();\r \r             var latestMediaProcessor =\r             mediaProcessors.OrderBy(mp => new Version(mp.Version)).LastOrDefault();\r \r             ITask encodeTask = job.Tasks.AddNew(\"Encoding\", latestMediaProcessor, encodingPreset, TaskOptions.None);\r             encodeTask.InputAssets.Add(inputAsset);\r             encodeTask.OutputAssets.AddNew(String.Format(\"{0} as {1}\", inputAsset.Name, encodingPreset), AssetCreationOptions.StorageEncrypted);\r \r             job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\r             job.Submit();\r             job.GetExecutionProgressTask(CancellationToken.None).Wait();\r \r             return job.OutputMediaAssets[0];\r         }\r \r         static public IContentKey CreateCommonTypeContentKey(IAsset asset)\r         {\r \r             Guid keyId = Guid.NewGuid();\r             byte[] contentKey = GetRandomBuffer(16);\r \r             IContentKey key = _context.ContentKeys.Create(\r                         keyId,\r                         contentKey,\r                         \"ContentKey\",\r                         ContentKeyType.CommonEncryption);\r \r             // Associate the key with the asset.\r             asset.ContentKeys.Add(key);\r \r             return key;\r         }\r \r         static public void AddOpenAuthorizationPolicy(IContentKey contentKey)\r         {\r \r             // Create ContentKeyAuthorizationPolicy with Open restrictions\r             // and create authorization policy          \r \r             List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\r                 {\r                 new ContentKeyAuthorizationPolicyRestriction\r                 {\r                     Name = \"Open\",\r                     KeyRestrictionType = (int)ContentKeyRestrictionType.Open,\r                     Requirements = null\r                 }\r                 };\r \r             // Configure PlayReady license templates.\r             string PlayReadyLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r \r \r             IContentKeyAuthorizationPolicyOption PlayReadyPolicy =\r             _context.ContentKeyAuthorizationPolicyOptions.Create(\"\",\r                 ContentKeyDeliveryType.PlayReadyLicense,\r                 restrictions, PlayReadyLicenseTemplate);\r \r             IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r                 ContentKeyAuthorizationPolicies.\r                 CreateAsync(\"Deliver Common Content Key with no restrictions\").\r                 Result;\r \r \r             contentKeyAuthorizationPolicy.Options.Add(PlayReadyPolicy);\r             // Associate the content key authorization policy with the content key.\r             contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r             contentKey = contentKey.UpdateAsync().Result;\r         }\r \r         public static string AddTokenRestrictedAuthorizationPolicy(IContentKey contentKey)\r         {\r             string tokenTemplateString = GenerateTokenRequirements();\r \r             List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\r                 {\r                 new ContentKeyAuthorizationPolicyRestriction\r                 {\r                     Name = \"Token Authorization Policy\",\r                     KeyRestrictionType = (int)ContentKeyRestrictionType.TokenRestricted,\r                     Requirements = tokenTemplateString,\r                 }\r                 };\r \r             // Configure PlayReady license templates.\r             string PlayReadyLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r             IContentKeyAuthorizationPolicyOption PlayReadyPolicy =\r             _context.ContentKeyAuthorizationPolicyOptions.Create(\"Token option\",\r                 ContentKeyDeliveryType.PlayReadyLicense,\r                 restrictions, PlayReadyLicenseTemplate);\r \r             IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r                 ContentKeyAuthorizationPolicies.\r                 CreateAsync(\"Deliver Common Content Key with token restrictions\").\r                 Result;\r \r             contentKeyAuthorizationPolicy.Options.Add(PlayReadyPolicy);\r \r             // Associate the content key authorization policy with the content key\r             contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r             contentKey = contentKey.UpdateAsync().Result;\r \r             return tokenTemplateString;\r         }\r \r         static private string GenerateTokenRequirements()\r         {\r             TokenRestrictionTemplate template = new TokenRestrictionTemplate(TokenType.SWT);\r \r             template.PrimaryVerificationKey = new SymmetricVerificationKey();\r             template.AlternateVerificationKeys.Add(new SymmetricVerificationKey());\r             template.Audience = _sampleAudience.ToString();\r             template.Issuer = _sampleIssuer.ToString();\r             template.RequiredClaims.Add(TokenClaim.ContentKeyIdentifierClaim);\r \r             return TokenRestrictionTemplateSerializer.Serialize(template);\r         }\r \r         static private string ConfigurePlayReadyLicenseTemplate()\r         {\r             // The following code configures PlayReady License Template using .NET classes\r             // and returns the XML string.\r \r             //The PlayReadyLicenseResponseTemplate class represents the template for the response sent back to the end user.\r             //It contains a field for a custom data string between the license server and the application\r             //(may be useful for custom app logic) as well as a list of one or more license templates.\r             PlayReadyLicenseResponseTemplate responseTemplate = new PlayReadyLicenseResponseTemplate();\r \r             // The PlayReadyLicenseTemplate class represents a license template for creating PlayReady licenses\r             // to be returned to the end users.\r             //It contains the data on the content key in the license and any rights or restrictions to be\r             //enforced by the PlayReady DRM runtime when using the content key.\r             PlayReadyLicenseTemplate licenseTemplate = new PlayReadyLicenseTemplate();\r             //Configure whether the license is persistent (saved in persistent storage on the client)\r             //or non-persistent (only held in memory while the player is using the license).  \r             licenseTemplate.LicenseType = PlayReadyLicenseType.Nonpersistent;\r \r             // AllowTestDevices controls whether test devices can use the license or not.  \r             // If true, the MinimumSecurityLevel property of the license\r             // is set to 150.  If false (the default), the MinimumSecurityLevel property of the license is set to 2000.\r             licenseTemplate.AllowTestDevices = true;\r \r             // You can also configure the Play Right in the PlayReady license by using the PlayReadyPlayRight class.\r             // It grants the user the ability to playback the content subject to the zero or more restrictions\r             // configured in the license and on the PlayRight itself (for playback specific policy).\r             // Much of the policy on the PlayRight has to do with output restrictions\r             // which control the types of outputs that the content can be played over and\r             // any restrictions that must be put in place when using a given output.\r             // For example, if the DigitalVideoOnlyContentRestriction is enabled,\r             //then the DRM runtime will only allow the video to be displayed over digital outputs\r             //(analog video outputs won’t be allowed to pass the content).\r \r             //IMPORTANT: These types of restrictions can be very powerful but can also affect the consumer experience.\r             // If the output protections are configured too restrictive,\r             // the content might be unplayable on some clients. For more information, see the PlayReady Compliance Rules document.\r \r             // For example:\r             //licenseTemplate.PlayRight.AgcAndColorStripeRestriction = new AgcAndColorStripeRestriction(1);\r \r             responseTemplate.LicenseTemplates.Add(licenseTemplate);\r \r             return MediaServicesLicenseTemplateSerializer.Serialize(responseTemplate);\r         }\r         \r         static public void CreateAssetDeliveryPolicy(IAsset asset, IContentKey key)\r         {\r             // Get the PlayReady license service URL.\r             Uri acquisitionUrl = key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense);\r \r             Dictionary<AssetDeliveryPolicyConfigurationKey, string> assetDeliveryPolicyConfiguration =\r             new Dictionary<AssetDeliveryPolicyConfigurationKey, string>\r             {\r                     {AssetDeliveryPolicyConfigurationKey.PlayReadyLicenseAcquisitionUrl, acquisitionUrl.ToString()},\r \r             };\r \r             // In this case we only specify Dash streaming protocol in the delivery policy,\r             // All other protocols will be blocked from streaming.\r             var assetDeliveryPolicy = _context.AssetDeliveryPolicies.Create(\r                 \"AssetDeliveryPolicy\",\r             AssetDeliveryPolicyType.DynamicCommonEncryption,\r             AssetDeliveryProtocol.Dash,\r             assetDeliveryPolicyConfiguration);\r \r \r             // Add AssetDelivery Policy to the asset\r             asset.DeliveryPolicies.Add(assetDeliveryPolicy);\r \r         }\r \r         /// <summary>\r         /// Gets the streaming origin locator.\r         /// </summary>\r         /// <param name=\"assets\"></param>\r         /// <returns></returns>\r         static public string GetStreamingOriginLocator(IAsset asset)\r         {\r \r             // Get a reference to the streaming manifest file from the  \r             // collection of files in the asset.\r \r             var assetFile = asset.AssetFiles.Where(f => f.Name.ToLower().\r                          EndsWith(\".ism\")).\r                          FirstOrDefault();\r \r             // Create a 30-day readonly access policy.\r             IAccessPolicy policy = _context.AccessPolicies.Create(\"Streaming policy\",\r             TimeSpan.FromDays(30),\r             AccessPermissions.Read);\r \r             // Create a locator to the streaming content on an origin.\r             ILocator originLocator = _context.Locators.CreateLocator(LocatorType.OnDemandOrigin, asset,\r             policy,\r             DateTime.UtcNow.AddMinutes(-5));\r \r             // Create a URL to the manifest file.\r             return originLocator.Path + assetFile.Name;\r         }\r \r         static private void JobStateChanged(object sender, JobStateChangedEventArgs e)\r         {\r             Console.WriteLine(string.Format(\"{0}\\n  State: {1}\\n  Time: {2}\\n\\n\",\r             ((IJob)sender).Name,\r             e.CurrentState,\r             DateTime.UtcNow.ToString(@\"yyyy_M_d__hh_mm_ss\")));\r         }\r \r         static private byte[] GetRandomBuffer(int length)\r         {\r             var returnValue = new byte[length];\r \r             using (var rng =\r             new System.Security.Cryptography.RNGCryptoServiceProvider())\r             {\r             rng.GetBytes(returnValue);\r             }\r \r             return returnValue;\r         }\r         }\r     }\r \r <!--Update_Description: update code to use AAD token instead of ACS-->"}