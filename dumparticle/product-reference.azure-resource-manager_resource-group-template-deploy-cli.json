{"Title":"使用 Azure CLI 和模板部署资源","Description":"使用 Azure Resource Manager 和 Azure CLI 将资源部署到 Azure。 资源在 Resource Manager 模板中定义。","Content":"# <a name=\"deploy-resources-with-resource-manager-templates-and-azure-cli\"></a>使用 Resource Manager 模板和 Azure CLI 部署资源\r \r 本主题介绍了如何将 Azure CLI 2.0 与 Resource Manager 模板配合使用来将资源部署到 Azure。 如果不熟悉部署和管理 Azure 解决方案的概念，请参阅 [Azure Resource Manager 概述](resource-group-overview.md)。  \r \r 所部署的 Resource Manager 模板可以是计算机上的本地文件，也可以是位于 GitHub 等存储库中的外部文件。 本文中部署的模板可在[示例模板](#sample-template)部分中找到，也可在 [GitHub 中的存储帐户模板](https://github.com/Azure/azure-quickstart-templates/blob/master/101-storage-account-create/azuredeploy.json)中找到。\r \r [!INCLUDE [sample-cli-install](../../includes/sample-cli-install.md)]\r \r <!-- Not Available on Cloud Shell -->\r ## <a name=\"deploy-local-template\"></a>部署本地模板\r \r 将资源部署到 Azure 时，执行以下操作：\r \r 1. 登录到 Azure 帐户\r 2. 创建用作已部署资源的容器的资源组。 资源组名称只能包含字母数字字符、句点、下划线、连字符和括号。 它最多可以包含 90 个字符。 它不能以句点结尾。\r 3. 将定义了要创建的资源的模板部署到资源组\r \r 模板可以包括可用于自定义部署的参数。 例如，可以提供为特定环境（如开发环境、测试环境和生产环境）定制的值。 示例模板定义了存储帐户 SKU 的参数。 \r \r 以下示例将创建一个资源组，并从本地计算机部署模板：\r \r ```azurecli\r az login\r \r az group create --name ExampleGroup --location \"China North\"\r az group deployment create \\\r     --name ExampleDeployment \\\r     --resource-group ExampleGroup \\\r     --template-file storage.json \\\r     --parameters storageAccountType=Standard_GRS\r ```\r \r 部署可能需要几分钟才能完成。 完成后，会看到一条包含结果的消息：\r \r ```azurecli\r \"provisioningState\": \"Succeeded\",\r ```\r \r ## <a name=\"deploy-external-template\"></a>部署外部模板\r \r 可能更愿意将 Resource Manager 模板存储在外部位置，而不是将它们存储在本地计算机上。 可以将模板存储在源控件存储库（例如 GitHub）中。 另外，还可以将其存储在 Azure 存储帐户中，以便在组织中共享访问。\r \r 若要部署外部模板，请使用 **template-uri** 参数。 使用示例中的 URI 从 GitHub 部署示例模板。\r \r ```azurecli\r az cloud set -n AzureChinaCloud\r az login\r \r az group create --name ExampleGroup --location \"China North\"\r az group deployment create \\\r     --name ExampleDeployment \\\r     --resource-group ExampleGroup \\\r     --template-uri \"https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/101-storage-account-create/azuredeploy.json\" \\\r     --parameters storageAccountType=Standard_GRS\r ```\r \r 前面的示例要求模板的 URI 可公开访问，它适用于大多数情况，因为模板应该不会包含敏感数据。 如果需要指定敏感数据（如管理员密码），请以安全参数的形式传递该值。 但是，如果不希望模板可公开访问，可以通过将其存储在专用存储容器中来保护它。 若要了解如何部署需要共享访问签名 (SAS) 令牌的模板，请参阅[部署具有 SAS 令牌的专用模板](resource-manager-cli-sas-token.md)。\r \r <!-- Not Available on Cloud Shell -->\r \r ## <a name=\"parameter-files\"></a>参数文件\r \r 你可能会发现，与在脚本中以内联值的形式传递参数相比，使用包含参数值的 JSON 文件更为容易。 参数文件必须采用以下格式：\r \r ```json\r {\r   \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\",\r   \"contentVersion\": \"1.0.0.0\",\r   \"parameters\": {\r      \"storageAccountType\": {\r          \"value\": \"Standard_GRS\"\r      }\r   }\r }\r ```\r \r 请注意，parameters 部分包含与模板中定义的参数匹配的参数名称 (storageAccountType)。 参数文件包含该参数的值。 此值在部署期间自动传递给模板。 可以针对不同部署方案创建多个参数文件，然后传入相应的参数文件。 \r \r 复制上面的示例，并将其保存为名为 `storage.parameters.json` 的文件。\r \r 若要传递本地参数文件，请使用 `@` 指定名为 storage.parameters.json 的本地文件。\r \r ```azurecli\r az group deployment create \\\r     --name ExampleDeployment \\\r     --resource-group ExampleGroup \\\r     --template-file storage.json \\\r     --parameters @storage.parameters.json\r ```\r \r ## <a name=\"test-a-template-deployment\"></a>测试模板部署\r \r 若要测试模板和参数值而不实际部署任何资源，请使用 [az group deployment validate](https://docs.azure.cn/zh-cn/cli/group/deployment?view=azure-cli-latest#validate)。 \r \r ```azurecli\r az group deployment validate \\\r     --resource-group ExampleGroup \\\r     --template-file storage.json \\\r     --parameters @storage.parameters.json\r ```\r \r 如果未检测到错误，则该命令将返回有关测试部署的信息。 需要特别注意的是，**error** 值为 null。\r \r ```azurecli\r {\r   \"error\": null,\r   \"properties\": {\r       ...\r ```\r \r 如果检测到错误，则该命令将返回一条错误消息。 例如，如果尝试为存储帐户 SKU 传递不正确的值，将返回以下错误：\r \r ```azurecli\r {\r   \"error\": {\r     \"code\": \"InvalidTemplate\",\r     \"details\": null,\r     \"message\": \"Deployment template validation failed: 'The provided value 'badSKU' for the template parameter \r       'storageAccountType' at line '13' and column '20' is not valid. The parameter value is not part of the allowed \r       value(s): 'Standard_LRS,Standard_ZRS,Standard_GRS,Standard_RAGRS,Premium_LRS'.'.\",\r     \"target\": null\r   },\r   \"properties\": null\r }\r ```\r \r 如果模板有语法错误，该命令将返回一个错误，指示它无法分析该模板。 该消息会指出分析错误的行号和位置。\r \r ```azurecli\r {\r   \"error\": {\r     \"code\": \"InvalidTemplate\",\r     \"details\": null,\r     \"message\": \"Deployment template parse failed: 'After parsing a value an unexpected character was encountered:\r       \\\". Path 'variables', line 31, position 3.'.\",\r     \"target\": null\r   },\r   \"properties\": null\r }\r ```\r \r [!INCLUDE [resource-manager-deployments](../../includes/resource-manager-deployments.md)]\r \r 若要使用完整模式，请使用 `mode` 参数：\r \r ```azurecli\r az group deployment create \\\r     --name ExampleDeployment \\\r     --mode Complete \\\r     --resource-group ExampleGroup \\\r     --template-file storage.json \\\r     --parameters storageAccountType=Standard_GRS\r ```\r \r ## <a name=\"sample-template\"></a>示例模板\r \r 本主题中的示例使用以下模板。 复制并将其另存为名为 storage.json 的文件。 若要了解如何创建此模板，请参阅[创建第一个 Azure Resource Manager 模板](resource-manager-create-first-template.md)。  \r \r ```json\r {\r   \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r   \"contentVersion\": \"1.0.0.0\",\r   \"parameters\": {\r     \"storageAccountType\": {\r       \"type\": \"string\",\r       \"defaultValue\": \"Standard_LRS\",\r       \"allowedValues\": [\r         \"Standard_LRS\",\r         \"Standard_GRS\",\r         \"Standard_ZRS\",\r         \"Premium_LRS\"\r       ],\r       \"metadata\": {\r         \"description\": \"Storage Account type\"\r       }\r     }\r   },\r   \"variables\": {\r     \"storageAccountName\": \"[concat(uniquestring(resourceGroup().id), 'standardsa')]\"\r   },\r   \"resources\": [\r     {\r       \"type\": \"Microsoft.Storage/storageAccounts\",\r       \"name\": \"[variables('storageAccountName')]\",\r       \"apiVersion\": \"2016-01-01\",\r       \"location\": \"[resourceGroup().location]\",\r       \"sku\": {\r           \"name\": \"[parameters('storageAccountType')]\"\r       },\r       \"kind\": \"Storage\", \r       \"properties\": {\r       }\r     }\r   ],\r   \"outputs\": {\r       \"storageAccountName\": {\r           \"type\": \"string\",\r           \"value\": \"[variables('storageAccountName')]\"\r       }\r   }\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r * 本文中的示例将资源部署到默认订阅中的资源组。 若要使用其他订阅，请参阅[管理多个 Azure 订阅](https://docs.azure.cn/zh-cn/cli/manage-azure-subscriptions-azure-cli?view=azure-cli-latest)。\r * 有关用于部署模板的完整示例脚本，请参阅 [Resource Manager 模板部署脚本](resource-manager-samples-cli-deploy.md)。\r * 若要了解如何在模板中定义参数，请参阅[了解 Azure Resource Manager 模板的结构和语法](resource-group-authoring-templates.md)。\r * 有关解决常见部署错误的提示，请参阅[排查使用 Azure Resource Manager 时的常见 Azure 部署错误](resource-manager-common-deployment-errors.md)。\r * 有关部署需要 SAS 令牌的模板的信息，请参阅[使用 SAS 令牌部署专用模板](resource-manager-cli-sas-token.md)。\r * 有关企业可如何使用 Resource Manager 有效管理订阅的指南，请参阅 [Azure 企业基架 - 出于合规目的监管订阅](resource-manager-subscription-governance.md)。\r \r <!--Update_Description: update meta properties, wording update -->"}