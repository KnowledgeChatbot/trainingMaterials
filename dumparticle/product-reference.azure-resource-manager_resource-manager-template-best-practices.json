{"Title":"有关创建 Resource Manager 模板的最佳做法","Description":"有关简化 Azure Resource Manager 模板的指导。","Content":"# <a name=\"best-practices-for-creating-azure-resource-manager-templates\"></a>有关创建 Resource Manager 模板的最佳做法\r 本文中的指导可帮助你创建可靠且易于使用的 Azure Resource Manager 模板。 这些指导只属于建议， 除非有明确的规定，否则不一定非要遵循。 在具体的场合下，可能需要对以下方法或示例之一做出变通。\r \r ## <a name=\"resource-names\"></a>资源名称\r 通常，会在 Resource Manager 中使用三种类型的资源名称：\r \r * 必须唯一的资源名称。\r * 不一定要唯一的资源名称，不过，提供的名称应可帮助根据上下文识别资源。\r * 通用的资源名称。\r \r <!-- Not Available /guidance/guidance-naming-conventions.md -->\r 有关建立命名约定的帮助，请参阅 [Azure 基础结构命名准则](../virtual-machines/virtual-machines-windows-infrastructure-naming-guidelines.md?toc=%2fvirtual-machines%2fwindows%2ftoc.json)。\r \r ### <a name=\"unique-resource-names\"></a>唯一的资源名称\r 对于具有数据访问终结点的任何资源类型，必须提供唯一的资源名称。 需要唯一名称的一些常见资源类型包括：\r \r * Azure 存储<sup>1</sup> \r * Azure 应用服务的 Web 应用功能\r * SQL Server\r * Azure Key Vault\r * Azure Redis 缓存\r * Azure Batch\r * Azure 流量管理器\r * Azure 搜索\r * Azure HDInsight\r \r <sup>1</sup> 存储帐户名必须使用小写字母，包含 24 个或更少的字符，并且不包含任何连字符。\r \r 如果为某个资源名称提供参数，必须在部署该资源时提供唯一的名称。 或者，可以改为创建使用 [uniqueString()](resource-group-template-functions-string.md#uniquestring) 函数的变量来生成名称。 \r \r 可能还需要在 **uniqueString** 结果中添加一个前缀或后缀。 修改唯一的名称可以更方便地通过名称识别资源类型。 例如，可以使用以下变量生成存储帐户的唯一名称：\r \r ```json\r \"variables\": {\r     \"storageAccountName\": \"[concat(uniqueString(resourceGroup().id),'storage')]\"\r }\r ```\r \r ### <a name=\"resource-names-for-identification\"></a>用于标识的资源名称\r 某些资源类型可能需要命名，但它们的名称不一定非要唯一。 对于这些资源类型，可以提供一个用于标识资源上下文和资源类型的名称。 请提供一个描述性名称，帮助在资源列表中识别该资源。 如果需要为不同的部署使用不同的资源名称，可以对名称使用参数：\r \r ```json\r \"parameters\": {\r     \"vmName\": { \r         \"type\": \"string\",\r         \"defaultValue\": \"demoLinuxVM\",\r         \"metadata\": {\r             \"description\": \"The name of the VM to create.\"\r         }\r     }\r }\r ```\r \r 如果在部署期间不需要传入名称，可以使用变量： \r \r ```json\r \"variables\": {\r     \"vmName\": \"demoLinuxVM\"\r }\r ```\r \r 还可以使用硬编码的值：\r \r ```json\r {\r   \"type\": \"Microsoft.Compute/virtualMachines\",\r   \"name\": \"demoLinuxVM\",\r   ...\r }\r ```\r \r ### <a name=\"generic-resource-names\"></a>通用资源名称\r 对于主要通过其他资源访问的资源类型，可以在模板中使用硬编码的通用名称。 例如，可为 SQL Server 上的防火墙规则设置一个标准的通用名称：\r \r ```json\r {\r     \"type\": \"firewallrules\",\r     \"name\": \"AllowAllWindowsAzureIps\",\r     ...\r }\r ```\r \r ## <a name=\"parameters\"></a>Parameters\r 使用参数时，以下信息可以提供帮助：\r \r * 尽量不要使用参数。 尽可能地使用变量或文本值。 只针对以下场合使用参数：\r \r    * 想要根据环境使用不同变体的设置（SKU、大小、容量）。\r    * 想要方便识别而指定的资源名称。\r    * 经常用来完成其他任务的值（例如管理员用户名）。\r    * 机密（例如密码）。\r    * 创建资源类型的多个实例时要使用的值的数目或数组。\r * 对参数名称使用混合大小写。\r * 对元数据中提供每个参数的说明。\r \r     ```json\r     \"parameters\": {\r        \"storageAccountType\": {\r            \"type\": \"string\",\r            \"metadata\": {\r                \"description\": \"The type of the new storage account created to store the VM disks.\"\r            }\r        }\r     }\r     ```\r \r * 定义参数（密码和 SSH 密钥除外）的默认值：\r    \r     ```json\r     \"parameters\": {\r         \"storageAccountType\": {\r             \"type\": \"string\",\r             \"defaultValue\": \"Standard_GRS\",\r             \"metadata\": {\r                 \"description\": \"The type of the new storage account created to store the VM disks.\"\r             }\r         }\r     }\r     ```\r \r * 对所有密码和机密使用 **SecureString**： \r    \r     ```json\r     \"parameters\": {\r        \"secretValue\": {\r            \"type\": \"securestring\",\r            \"metadata\": {\r                \"description\": \"The value of the secret to store in the vault.\"\r            }\r        }\r     }\r     ```\r \r * 尽量避免使用参数来指定位置。 改用资源组的 **location** 属性。 如果对所有资源使用 **resourceGroup().location** 表达式，请将模板中的资源部署在资源组所在的同一位置：\r    \r     ```json\r     \"resources\": [\r      {\r          \"name\": \"[variables('storageAccountName')]\",\r          \"type\": \"Microsoft.Storage/storageAccounts\",\r          \"apiVersion\": \"2016-01-01\",\r          \"location\": \"[resourceGroup().location]\",\r          ...\r      }\r     ]\r     ```\r    \r     如果只有有限数量的位置支持某种资源类型，可能需要在模板中直接指定有效的位置。 如果必须使用 **location** 参数，请尽量与可能需要位于同一位置的资源共享该参数值。 这样可以最大程度地减少用户必须提供位置信息的次数。\r * 避免对资源类型的 API 版本使用参数或变量。 资源的属性和值可能会因版本号的不同而异。 如果将 API 版本设置为参数或变量，代码编辑器中的 IntelliSense 无法确定正确架构。 并且会在模板中将 API 版本硬编码。\r \r ## <a name=\"variables\"></a>变量\r 使用变量时，以下信息可以提供帮助：\r \r * 针对需要在模板中多次使用的值使用变量。 如果一次只使用一个值，则硬编码值可使模板更易于阅读。\r * 不能在模板的 **variables** 节中使用 [reference](resource-group-template-functions-resource.md#reference) 函数。 **reference** 函数从资源的运行时状态中派生其值。 但是，变量是在初始模板分析期间解析的。 直接在模板的 **resources** 或 **outputs** 节中构造需要 **reference** 函数的值。\r * 根据[资源名称](#resource-names)中所述，针对必须保持唯一的资源名称包含变量。\r * 可以将变量组合成复杂对象。 使用 **variable.subentry** 格式引用复杂对象中的值。 组合变量有助于跟踪相关的变量。 此外，还可以提高模板的可读性。 下面是一个示例：\r \r     ```json\r     \"variables\": {\r        \"storage\": {\r            \"name\": \"[concat(uniqueString(resourceGroup().id),'storage')]\",\r            \"type\": \"Standard_LRS\"\r        }\r     },\r     \"resources\": [\r      {\r          \"type\": \"Microsoft.Storage/storageAccounts\",\r          \"name\": \"[variables('storage').name]\",\r          \"apiVersion\": \"2016-01-01\",\r          \"location\": \"[resourceGroup().location]\",\r          \"sku\": {\r              \"name\": \"[variables('storage').type]\"\r          },\r          ...\r      }\r     ]\r     ```\r    \r     > [!NOTE]\r     > 复杂对象不能包含从复杂对象引用值的表达式。 若要进行这种引用，可以定义一个单独的变量。\r     > \r     > \r    \r     有关使用复杂对象作为变量的高级示例，请参阅[在 Azure Resource Manager 模板中共享状态](best-practices-resource-manager-state.md)。\r \r ## <a name=\"resources\"></a>资源\r 使用资源时，以下信息可以提供帮助：\r \r * 为了帮助其他参与者理解该资源的用途，请为模板中的每个资源指定**注释**：\r    \r     ```json\r     \"resources\": [\r      {\r          \"name\": \"[variables('storageAccountName')]\",\r          \"type\": \"Microsoft.Storage/storageAccounts\",\r          \"apiVersion\": \"2016-01-01\",\r          \"location\": \"[resourceGroup().location]\",\r          \"comments\": \"This storage account is used to store the VM disks.\",\r          ...\r      }\r     ]\r     ```\r \r * 可以使用标记将元数据添加到资源。 使用元数据添加有关资源的信息。 例如，可以添加元数据来记录资源的计费详细信息。 有关详细信息，请参阅[使用标记来组织 Azure 资源](resource-group-using-tags.md)。\r * 如果在模板中使用*公共终结点*（例如 Azure Blob 存储公共终结点），请*不要*将命名空间硬编码。 使用 **reference** 函数可动态检索命名空间。 可以使用此方法将模板部署到不同的公共命名空间环境，而无需在模板中手动更改终结点。 在模板中将 API 版本设置为用于存储帐户的同一版本：\r    \r     ```json\r     \"osDisk\": {\r        \"name\": \"osdisk\",\r        \"vhd\": {\r            \"uri\": \"[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob, variables('vmStorageAccountContainerName'), '/',variables('OSDiskName'),'.vhd')]\"\r        }\r     }\r     ```\r    \r     如果在创建的同一模板中部署存储帐户，则引用资源时不需要指定提供程序命名空间。 下面是简化的语法：\r    \r     ```json\r     \"osDisk\": {\r        \"name\": \"osdisk\",\r        \"vhd\": {\r            \"uri\": \"[concat(reference(variables('storageAccountName'), '2016-01-01').primaryEndpoints.blob, variables('vmStorageAccountContainerName'), '/',variables('OSDiskName'),'.vhd')]\"\r        }\r     }\r     ```\r    \r     如果在模板中包含配置为使用公共命名空间的其他值，请更改这些值以反映相同的 **reference** 函数。 例如，可以设置虚拟机诊断配置文件的 **storageUri** 属性：\r    \r     ```json\r     \"diagnosticsProfile\": {\r        \"bootDiagnostics\": {\r            \"enabled\": \"true\",\r            \"storageUri\": \"[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2016-01-01').primaryEndpoints.blob]\"\r        }\r     }\r     ```\r    \r     还可以引用不同资源组中的现有存储帐户：\r \r     ```json\r     \"osDisk\": {\r        \"name\": \"osdisk\", \r        \"vhd\": {\r            \"uri\":\"[concat(reference(resourceId(parameters('existingResourceGroup'), 'Microsoft.Storage/storageAccounts/', parameters('existingStorageAccountName')), '2016-01-01').primaryEndpoints.blob,  variables('vmStorageAccountContainerName'), '/', variables('OSDiskName'),'.vhd')]\"\r        }\r     }\r     ```\r \r * 仅当应用程序有需要时，才将公共 IP 地址分配到虚拟机。 若要连接到虚拟机 (VM) 进行调试或管理，请使用出站 NAT 规则、虚拟网络网关或 jumpbox。\r    \r     有关连接到虚拟机的详细信息，请参阅：\r    \r     <!-- Not Available guidance/guidance-compute-n-tier-vm.md-->\r     * [在 Azure Resource Manager 中设置对 VM 的 WinRM 访问](../virtual-machines/windows/winrm.md)\r     * [使用 Azure 门户实现对 VM 的外部访问](../virtual-machines/windows/nsg-quickstart-portal.md)\r     * [使用 PowerShell 实现对 VM 的外部访问](../virtual-machines/windows/nsg-quickstart-powershell.md)\r     * [使用 Azure CLI 实现对 Linux VM 的外部访问](../virtual-machines/virtual-machines-linux-nsg-quickstart.md)\r * 公共 IP 地址的 **domainNameLabel** 属性必须唯一。 **domainNameLabel** 值的长度必须为 3 到 63 个字符，并遵循正则表达式 `^[a-z][a-z0-9-]{1,61}[a-z0-9]$` 指定的规则。 由于 **uniqueString** 函数生成长度为 13 个字符的字符串，因此 **dnsPrefixString** 参数限制为不超过 50 个字符：\r \r     ```json\r     \"parameters\": {\r        \"dnsPrefixString\": {\r            \"type\": \"string\",\r            \"maxLength\": 50,\r            \"metadata\": {\r                \"description\": \"The DNS label for the public IP address. It must be lowercase. It should match the following regular expression, or it will raise an error: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$\"\r            }\r        }\r     },\r     \"variables\": {\r        \"dnsPrefix\": \"[concat(parameters('dnsPrefixString'),uniquestring(resourceGroup().id))]\"\r     }\r     ```\r \r * 将密码添加到自定义脚本扩展时，请在 **protectedSettings** 属性中使用 **commandToExecute** 属性：\r    \r     ```json\r     \"properties\": {\r        \"publisher\": \"Microsoft.Azure.Extensions\",\r        \"type\": \"CustomScript\",\r        \"typeHandlerVersion\": \"2.0\",\r        \"autoUpgradeMinorVersion\": true,\r        \"settings\": {\r            \"fileUris\": [\r                \"[concat(variables('template').assets, '/lamp-app/install_lamp.sh')]\"\r            ]\r        },\r        \"protectedSettings\": {\r            \"commandToExecute\": \"[concat('sh install_lamp.sh ', parameters('mySqlPassword'))]\"\r        }\r     }\r     ```\r    \r    > [!NOTE]\r    > 为了确保机密内容作为参数传递给 VM 和扩展时经过加密，请使用相关扩展的 **protectedSettings** 属性。\r    > \r    > \r \r ## <a name=\"outputs\"></a>Outputs\r 如果使用模板创建公共 IP 地址，请包含 **outputs** 节，用于返回 IP 地址和完全限定域名 (FQDN) 的详细信息。 部署后，可以使用输出值轻松检索有关公共 IP 地址和 FQDN 的详细信息。 引用资源时，请使用创建该资源时所用的 API 版本： \r \r ```json\r \"outputs\": {\r     \"fqdn\": {\r         \"value\": \"[reference(resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName')), '2016-07-01').dnsSettings.fqdn]\",\r         \"type\": \"string\"\r     },\r     \"ipaddress\": {\r         \"value\": \"[reference(resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName')), '2016-07-01').ipAddress]\",\r         \"type\": \"string\"\r     }\r }\r ```\r \r ## <a name=\"single-template-vs-nested-templates\"></a>单个模板与嵌套模板\r 若要部署解决方案，可以使用单个模板，或者使用包含多个嵌套模板的主模板。 嵌套模板在较高级方案中很常见。 使用嵌套模板可获得以下优势：\r \r * 可将解决方案分解为目标组件。\r * 可在不同的主模板中重复使用嵌套模板。\r \r 如果选择使用嵌套模板，以下指导可帮助你标准化模板设计。 这些指导基于[用于设计 Azure Resource Manager 模板的模式](best-practices-resource-manager-design-templates.md)。 我们建议在设计中包含以下模板：\r \r * **主模板** (azuredeploy.json)。 用于输入参数。\r * **共享的资源模板**。 用于部署其他所有资源使用的共享资源（例如虚拟网络和可用性集）。 使用 **dependsOn** 表达式可确保在其他模板之前部署此模板。\r * **可选资源模板**。 用于根据某个参数（例如 jumpbox）有条件地部署资源。\r * **成员资源模板**。 应用程序层中的每个实例类型都有其自身的配置。 在一个层中，可以定义不同的实例类型。 （例如，第一个实例创建群集，其他实例会添加到现有群集。）每个实例类型都有其自身的部署模板。\r * **脚本**。 广泛可重用的脚本适用于每个实例类型（例如，初始化和格式化其他磁盘）。 为特定自定义目的创建的自定义脚本根据实例类型的不同而异。\r \r ![嵌套模板](./media/resource-manager-template-best-practices/nestedTemplateDesign.png)\r \r 有关详细信息，请参阅[将链接模板与 Azure 资源管理器配合使用](resource-group-linked-templates.md)。\r \r ## <a name=\"conditionally-link-to-nested-templates\"></a>有条件地链接到嵌套模板\r 可以使用某个参数有条件地链接到嵌套模板。 该参数成为模板 URI 的一部分：\r \r ```json\r \"parameters\": {\r     \"newOrExisting\": {\r         \"type\": \"String\",\r         \"allowedValues\": [\r             \"new\",\r             \"existing\"\r         ]\r     }\r },\r \"variables\": {\r     \"templatelink\": \"[concat('https://raw.githubusercontent.com/Contoso/Templates/master/',parameters('newOrExisting'),'StorageAccount.json')]\"\r },\r \"resources\": [\r     {\r         \"apiVersion\": \"2015-01-01\",\r         \"name\": \"nestedTemplate\",\r         \"type\": \"Microsoft.Resources/deployments\",\r         \"properties\": {\r             \"mode\": \"incremental\",\r             \"templateLink\": {\r                 \"uri\": \"[variables('templatelink')]\",\r                 \"contentVersion\": \"1.0.0.0\"\r             },\r             \"parameters\": {\r             }\r         }\r     }\r ]\r ```\r \r ## <a name=\"template-format\"></a>模板格式\r 一种不错的做法是通过 JSON 验证程序传递模板。 验证程序可帮助删除多余的逗号、圆括号和方括号，避免部署期间出错。 尝试根据偏好的编辑环境（Visual Studio Code、Atom、Sublime Text、Visual Studio）使用 [JSONLint](http://jsonlint.com/) 或 linter 包。\r \r 另外，一个不错的想法是设置 JSON 的格式以以提高可读性。 可以为本地编辑器使用 JSON 格式化程序包。 在 Visual Studio 中，按 **Ctrl+K、Ctrl+D** 设置文档的格式。 在 Visual Studio Code 中，按 **Alt+Shift+F**。 如果本地编辑器无法设置文档格式，可以使用[联机格式化程序](https://www.bing.com/search?q=json+formatter)。\r \r ## <a name=\"next-steps\"></a>后续步骤\r <!-- Not Available on Guidance Directory-->\r * 有关设置存储帐户的指导，请参阅 [Azure 存储性能和可伸缩性清单](../storage/common/storage-performance-checklist.md)。\r * 若要了解企业如何使用 Resource Manager 有效管理订阅，请参阅 [Azure 企业基架：规范性订阅管理](resource-manager-subscription-governance.md)。\r \r <!--Update_Description: update meta properties, update reference link-->"}