{"Title":"NoSQL 教程：适用于 Azure Cosmos DB Java SDK 的 Cosmos DB API","Description":"使用适用于 Azure Cosmos DB 的 DocumentDB API 创建联机数据库和 Java 控制台应用程序的 NoSQL 教程。 Azure DocumentDB 是用于 JSON 的 NoSQL 数据库。","Content":"# <a name=\"nosql-tutorial-build-a-documentdb-api-java-console-application\"></a>NoSQL 教程：构建 DocumentDB API Java 控制台应用程序\r > [!div class=\"op_single_selector\"]\r > * [.NET](documentdb-get-started.md)\r > * [.NET Core](documentdb-dotnetcore-get-started.md)\r > * [用于 MongoDB 的 Node.js](mongodb-samples.md)\r > * [Node.js](documentdb-nodejs-get-started.md)\r > * [Java](documentdb-java-get-started.md)\r > * [C++](documentdb-cpp-get-started.md)\r >  \r > \r \r 欢迎使用适用于 Azure Cosmos DB Java SDK 的 DocumentDB API 的 NoSQL 教程！ 学习本教程后，将拥有一个可创建并查询 Azure Cosmos DB 资源的控制台应用程序。\r \r 本文内容：\r \r * 创建并连接到 Azure Cosmos DB 帐户\r * 配置 Visual Studio 解决方案\r * 创建联机数据库\r * 创建集合\r * 创建 JSON 文档\r * 查询集合\r * 创建 JSON 文档\r * 查询集合\r * 替换文档\r * 删除文档\r * 删除数据库\r \r 现在，让我们开始吧！\r \r ## <a name=\"prerequisites\"></a>先决条件\r 确保具有以下内容：\r \r * 有效的 Azure 帐户。 如果没有，可以注册[免费帐户](https://www.azure.cn/pricing/1rmb-trial/)。 \r \r   [!INCLUDE [cosmos-db-emulator-docdb-api](../../includes/cosmos-db-emulator-docdb-api.md)]\r \r * [Git](https://git-scm.com/downloads)。\r * [Java 开发工具包 (JDK) 7+](http://www.oracle.com/technetwork/java/javase/downloads/index.html)。\r * [Maven](http://maven.apache.org/download.cgi)。\r \r ## <a name=\"step-1-create-an-azure-cosmos-db-account\"></a>步骤 1：创建 Azure Cosmos DB 帐户\r 创建 Azure Cosmos DB 帐户。 如果已有一个可用的帐户，可以直接跳到[克隆 GitHub 项目](#GitClone)。 如果使用 Azure Cosmos DB 模拟器，请遵循 [Azure Cosmos DB 模拟器](local-emulator.md)中的步骤设置该模拟器，并直接跳到[克隆 GitHub 项目](#GitClone)。\r \r [!INCLUDE [cosmos-db-create-dbaccount](../../includes/cosmos-db-create-dbaccount.md)]\r \r ## <a name=\"GitClone\"></a>步骤 2：克隆 GitHub 项目\r 首先，可以根据 [Get Started with Azure Cosmos DB and Java](https://github.com/Azure-Samples/documentdb-java-getting-started)（Azure Cosmos DB 和 Java 入门）中所述克隆 GitHub 存储库。 例如，在本地目录中运行以下命令，在本地检索示例项目。\r \r     git clone git@github.com:Azure-Samples/azure-cosmos-db-documentdb-java-getting-started.git\r \r     cd azure-cosmos-db-documentdb-java-getting-started\r \r 该目录包含项目的 `pom.xml`，以及含有 Java 源代码的 `src` 文件夹，其中包括 `Program.java`，说明如何使用 Azure Cosmos DB 执行简单的操作，例如创建文档以及查询集合中的数据。 `pom.xml` 包括 [Maven 上的 DocumentDB Java SDK](https://mvnrepository.com/artifact/com.microsoft.azure/azure-documentdb) 的依赖项。\r \r     <dependency>\r         <groupId>com.microsoft.azure</groupId>\r         <artifactId>azure-documentdb</artifactId>\r         <version>LATEST</version>\r     </dependency>\r \r ## <a name=\"Connect\"></a>步骤 3：连接到 Azure Cosmos DB 帐户\r 接下来，回到 [Azure 门户](https://portal.azure.cn) ，检索终结点和主要主密钥。 Azure Cosmos DB 终结点和主密钥是必需的，可让应用程序知道要连接的对象，使 Azure Cosmos DB 信任应用程序的连接。\r \r 在 Azure 门户中，导航到 Azure Cosmos DB 帐户，并单击“密钥”。 从门户复制 URI，并将其粘贴到 Program.java 文件的 `https://FILLME.documents.azure.cn` 中。 然后从门户中复制“主密钥”并将它粘贴到 `FILLME`。\r \r     this.client = new DocumentClient(\r         \"https://FILLME.documents.azure.cn\",\r         \"FILLME\"\r         , new ConnectionPolicy(),\r         ConsistencyLevel.Session);\r \r ![NoSQL 教程创建 Java 控制台应用程序时使用的 Azure 门户的屏幕截图。 显示了一个 Azure Cosmos DB 帐户，在“Azure Cosmos DB 帐户”边栏选项卡上突出显示了“ACTIVE”中心、“密钥”按钮，在“密钥”边栏选项卡上突出显示了 URI、主密钥、辅助密钥的值][keys]\r \r ## <a name=\"step-4-create-a-database\"></a>第 4 步：创建数据库\r 可以使用 **DocumentClient** 类的 [createDatabase](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_client.createdatabase) 方法创建 Azure Cosmos DB [数据库](documentdb-resources.md#databases)。 数据库是跨集合分区的 JSON 文档存储的逻辑容器。\r \r     Database database = new Database();\r     database.setId(\"familydb\");\r     this.client.createDatabase(database, null);\r \r ## <a name=\"CreateColl\"></a>步骤 5：创建集合\r > [!WARNING]\r > \r             **createCollection** 创建一个具有保留吞吐量的新集合，它牵涉定价。 有关详细信息，请访问[定价页](https://www.azure.cn/pricing/details/cosmos-db/)。\r > \r > \r \r 可以使用 **DocumentClient** 类的 [createCollection](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_client.createcollection) 方法创建[集合](documentdb-resources.md#collections)。 集合是 JSON 文档和相关联的 JavaScript 应用程序逻辑的容器。\r \r     DocumentCollection collectionInfo = new DocumentCollection();\r     collectionInfo.setId(\"familycoll\");\r \r     // Azure Cosmos DB collections can be reserved with throughput specified in request units/second. \r     // Here we create a collection with 400 RU/s.\r     RequestOptions requestOptions = new RequestOptions();\r     requestOptions.setOfferThroughput(400);\r \r     this.client.createCollection(\"/dbs/familydb\", collectionInfo, requestOptions);\r \r ## <a name=\"CreateDoc\"></a>步骤 6：创建 JSON 文档\r 可以使用 **DocumentClient** 类的 [createDocument](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_client.createdocument) 方法创建[文档](documentdb-resources.md#documents)。 文档是用户定义的（任意）JSON 内容。 现在，我们可以插入一个或多个文档。 如果已有要在数据库中存储的数据，则可以使用 Azure Cosmos DB 的[数据迁移工具](import-data.md)将数据导入数据库。\r \r     // Insert your Java objects as documents \r     Family andersenFamily = new Family();\r     andersenFamily.setId(\"Andersen.1\");\r     andersenFamily.setLastName(\"Andersen\")\r \r     // More initialization skipped for brevity. You can have nested references\r     andersenFamily.setParents(new Parent[] { parent1, parent2 });\r     andersenFamily.setDistrict(\"WA5\");\r     Address address = new Address();\r     address.setCity(\"Seattle\");\r     address.setCounty(\"King\");\r     address.setState(\"WA\");\r \r     andersenFamily.setAddress(address);\r     andersenFamily.setRegistered(true);\r \r     this.client.createDocument(\"/dbs/familydb/colls/familycoll\", family, new RequestOptions(), true);\r \r ![演示在 NoSQL 教程中创建 Java 控制台应用程序所用的帐户、联机数据库、集合和文档的层次关系的示意图。](./media/documentdb-get-started/nosql-tutorial-account-database.png)\r \r ## <a name=\"Query\"></a>步骤 7：查询 Azure Cosmos DB 资源\r Azure Cosmos DB 支持对存储在每个集合中的 JSON 文档进行[各种查询](documentdb-sql-query.md)。  以下示例代码展示了如何将 SQL 语法与 [queryDocuments](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_client.querydocuments) 方法一起使用来查询 Azure Cosmos DB 中的文档。\r \r     FeedResponse<Document> queryResults = this.client.queryDocuments(\r         \"/dbs/familydb/colls/familycoll\",\r         \"SELECT * FROM Family WHERE Family.lastName = 'Andersen'\", \r         null);\r \r     System.out.println(\"Running SQL query...\");\r     for (Document family : queryResults.getQueryIterable()) {\r         System.out.println(String.format(\"\\tRead %s\", family));\r     }\r \r ## <a name=\"ReplaceDocument\"></a>步骤 8：替换 JSON 文档\r Azure Cosmos DB 支持使用 [replaceDocument](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_client.replacedocument) 方法更新 JSON 文档。\r \r     // Update a property\r     andersenFamily.Children[0].Grade = 6;\r \r     this.client.replaceDocument(\r         \"/dbs/familydb/colls/familycoll/docs/Andersen.1\", \r         andersenFamily,\r         null);\r \r ## <a name=\"DeleteDocument\"></a>步骤 9：删除 JSON 文档\r Azure Cosmos DB 支持使用 [deleteDocument](https://docs.azure.cn/java/api/com.microsoft.azure.documentdb._document_client.deletedocument) 方法更新 JSON 文档。  \r \r     this.client.delete(\"/dbs/familydb/colls/familycoll/docs/Andersen.1\", null);\r \r ## <a name=\"DeleteDatabase\"></a>步骤 10：删除数据库\r 删除已创建的数据库将删除该数据库及其所有子资源（集合、文档等）。\r \r     this.client.deleteDatabase(\"/dbs/familydb\", null);\r \r ## <a name=\"Run\"></a>步骤 11：运行整个 Java 控制台应用程序！\r 若要从控制台运行应用程序，请导航到项目文件夹，然后使用 Maven 进行编译：\r \r     mvn package\r \r 运行 `mvn package` 可从 Maven 下载最新的 Azure Cosmos DB 库，并生成 `GetStarted-0.0.1-SNAPSHOT.jar`。 然后，通过运行以下命令来运行该应用：\r \r     mvn exec:java -D exec.mainClass=GetStarted.Program\r \r 祝贺！ 已经完成本 NoSQL 教程，并且获得了一个可正常使用的 Java 控制台应用程序！\r \r ## <a name=\"next-steps\"></a>后续步骤\r * 需要 Java Web 应用教程？ 请参阅[通过 Java 构建使用 Azure Cosmos DB 的 Web 应用程序](documentdb-java-application.md)。\r * 了解如何[监视 Azure Cosmos DB 帐户](monitor-accounts.md)。\r * 在 [Query Playground](https://www.documentdb.com/sql/demo)中对示例数据集运行查询。\r * 在 [Azure Cosmos DB 文档页](/documentdb/)的“开发”部分了解有关编程模型的详细信息。\r \r [keys]: media/documentdb-get-started/nosql-tutorial-keys.png\r \r <!--Update_Description: update meta properties, wording update-->"}