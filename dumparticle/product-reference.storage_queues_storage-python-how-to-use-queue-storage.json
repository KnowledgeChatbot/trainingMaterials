{"Title":"如何通过 Python 使用队列存储","Description":"了解如何通过 Python 使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。","Content":"# <a name=\"how-to-use-queue-storage-from-python\"></a>如何通过 Python 使用队列存储\r [!INCLUDE [storage-selector-queue-include](../../../includes/storage-selector-queue-include.md)]\r \r [!INCLUDE [storage-try-azure-tools-queues](../../../includes/storage-try-azure-tools-queues.md)]\r \r ## <a name=\"overview\"></a>概述\r \r 本指南演示如何使用 Azure 队列存储服务执行常见方案。 这些示例用 Python 编写并使用 [Azure Storage SDK for Python]。 介绍的方案包括**插入**、**扫视**、**获取**和**删除**队列消息以及**创建和删除队列**。 有关队列的详细信息，请参阅[后续步骤]部分。\r \r [!INCLUDE [storage-queue-concepts-include](../../../includes/storage-queue-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../../includes/storage-create-account-include.md)]\r \r ## <a name=\"download-and-install-azure-storage-sdk-for-python\"></a>下载和安装适用于 Python 的 Azure 存储 SDK\r \r 适用于 Python 的 Azure 存储 SDK 需要 Python 2.7、3.3、3.4、3.5 或 3.6，并且包含 4 个不同包：`azure-storage-blob`、`azure-storage-file`、`azure-storage-table` 和 `azure-storage-queue`。 在本教程中，我们要用到 `azure-storage-queue` 包。\r  \r ### <a name=\"install-via-pypi\"></a>通过 PyPi 安装\r \r 要通过 Python 包索引 (PyPI) 安装，请键入：\r \r ```bash\r pip install azure-storage-queue\r ```\r \r \r > [!NOTE]\r > 如果要从用于 Python 的 Azure 存储 SDK 版本 0.36 或更早版本升级，首先需要使用 `pip uninstall azure-storage` 进行卸载，因为我们不再通过单个包的形式发布用于 Python 的存储 SDK 了。\r > \r > \r \r 有关备用安装方法，请访问 [Github 上用于 Python 的 Azure 存储 SDK](https://github.com/Azure/azure-storage-python/)。\r \r ## <a name=\"how-to-create-a-queue\"></a>如何：创建队列\r \r 可以通过 **QueueService** 对象来处理队列。 以下代码创建 **QueueService** 对象。 在希望在其中以编程方式访问 Azure 存储的任何 Python 文件中，将以下代码添加到文件的顶部附近：\r \r ```python\r from azure.storage.queue import QueueService\r ```\r \r 以下代码使用存储帐户名称和帐户密钥创建 **QueueService** 对象。 使用帐户名称和密钥替换“myaccount”和“mykey”。\r \r ```python\r queue_service = QueueService(account_name='myaccount', account_key='mykey', endpoint_suffix='core.chinacloudapi.cn')\r \r queue_service.create_queue('taskqueue')\r ```\r \r ## <a name=\"how-to-insert-a-message-into-a-queue\"></a>如何：在队列中插入消息\r \r 若要在队列中插入消息，可使用 put\\_message 方法创建一条新消息并将其添加到队列中。\r \r ```python\r queue_service.put_message('taskqueue', u'Hello World')\r ```\r \r ## <a name=\"how-to-peek-at-the-next-message\"></a>如何：扫视下一条消息\r \r 可以通过调用 peek\\_messages 方法，查看队列前面的消息，而不必从队列中将其删除。 默认情况下，peek\\_messages 扫视单条消息。\r \r ```python\r messages = queue_service.peek_messages('taskqueue')\r for message in messages:\r     print(message.content)\r ```\r \r ## <a name=\"how-to-dequeue-messages\"></a>如何：取消消息的排队\r \r 代码分两步从队列中删除消息。 在调用 get\\_messages 时，默认情况下会获得队列中的下一条消息。 对于从此队列读取消息的任何其他代码，从 get\\_messages 返回的消息将变得不可见。 默认情况下，此消息持续 30 秒不可见。 若要从队列中删除消息，还必须调用 delete\\_message。 此删除消息的两步过程可确保当代码因硬件或软件故障而无法处理消息时，其他代码实例可以获取同一消息并重试。 处理消息后代码会立即调用 delete\\_message。\r \r ```python\r messages = queue_service.get_messages('taskqueue')\r for message in messages:\r     print(message.content)\r     queue_service.delete_message('taskqueue', message.id, message.pop_receipt)\r ```\r \r 可通过两种方式自定义队列中消息的检索。\r 首先，可获取一批消息（最多 32 条）。 其次，可以设置更长或更短的不可见超时时间，从而允许代码使用更多或更少时间来完全处理每个消息。 以下代码示例使用 get\\_messages 方法在一次调用中获取 16 条消息。 然后，它会使用 for 循环处理每条消息。 它还将每条消息的不可见超时时间设置为 5 分钟。\r \r ```python\r messages = queue_service.get_messages('taskqueue', num_messages=16, visibility_timeout=5*60)\r for message in messages:\r     print(message.content)\r     queue_service.delete_message('taskqueue', message.id, message.pop_receipt)      \r ```\r \r ## <a name=\"how-to-change-the-contents-of-a-queued-message\"></a>如何：更改已排队消息的内容\r \r 可以更改队列中现有消息的内容。 如果消息表示工作任务，可使用此功能来更新该工作任务的状态。 以下代码使用 update\\_message 方法来更新消息。 可见性超时设为 0，这意味着消息会立刻出现且内容将更新。\r \r ```python\r messages = queue_service.get_messages('taskqueue')\r for message in messages:\r     queue_service.update_message('taskqueue', message.id, message.pop_receipt, 0, u'Hello World Again')\r ```\r \r ## <a name=\"how-to-get-the-queue-length\"></a>如何：获取队列长度\r \r 可以获取队列中消息的估计数。 get\\_queue\\_metadata 方法要求队列服务返回有关队列的元数据和 approximate_message_count。 结果仅是近似值，因为在队列服务响应请求之后，可能添加或删除了消息。\r \r ```python\r metadata = queue_service.get_queue_metadata('taskqueue')\r count = metadata.approximate_message_count\r ```\r \r ## <a name=\"how-to-delete-a-queue\"></a>如何：删除队列\r \r 若要删除队列及其中包含的所有消息，请调用 delete\\_queue 方法。\r \r ```python\r queue_service.delete_queue('taskqueue')\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 在了解了队列存储的基础知识后，可单击下面的链接了解详细信息。\r \r * [Python 开发人员中心](/develop/python/)\r * [Azure 存储服务 REST API](http://msdn.microsoft.com/library/azure/dd179355)\r * [Azure 存储团队博客]\r * [Azure Storage SDK for Python]\r \r [Azure 存储团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\r [Azure Storage SDK for Python]: https://github.com/Azure/azure-storage-python\r \r <!--Update_Description: add \"Download and Install Azure Storage SDK for Python\" section-->"}