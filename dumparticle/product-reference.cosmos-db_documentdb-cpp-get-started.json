{"Title":"适用于 Azure Cosmos DB 的 C++ 教程","Description":"本 C++ 教程使用 Azure Cosmos DB 认可的 C++ SDK 创建 C++ 数据库和控制台应用程序。 Azure Cosmos DB 是多个区域规模的数据库服务。","Content":"<!-- Notice in meta : 全球规模 to 多个区域规模 -->\r # <a name=\"azure-cosmos-db-c-console-application-tutorial-for-the-documentdb-api\"></a>Azure Cosmos DB：适用于 DocumentDB API 的 C++ 控制台应用程序教程\r > [!div class=\"op_single_selector\"]\r > * [.NET](documentdb-get-started.md)\r > * [.NET Core](documentdb-dotnetcore-get-started.md)\r > * [用于 MongoDB 的 Node.js](mongodb-samples.md)\r > * [Node.js](documentdb-nodejs-get-started.md)\r > * [Java](documentdb-java-get-started.md)\r > * [C++](documentdb-cpp-get-started.md)\r >  \r > \r \r 欢迎使用 Azure Cosmos DB DocumentDB API 认可的 C++ SDK 的 C++ 教程！ 完成本教程后，会获得一个可以创建并查询 Azure Cosmos DB 资源（包括 C++ 数据库）的控制台应用程序。\r \r 我们介绍：\r \r * 创建并连接到 Azure Cosmos DB 帐户\r * 设置应用程序\r * 创建 C++ Azure Cosmos DB 数据库\r * 创建集合\r * 创建 JSON 文档\r * 查询集合\r * 替换文档\r * 删除文档\r * 删除 C++ Azure Cosmos DB 数据库\r \r 没有时间？ 不必担心！ 可在 [GitHub](https://github.com/stalker314314/DocumentDBCpp)上获取完整的解决方案。 有关快速说明，请参阅 [Get the complete solution](#GetSolution) （获取完整解决方案）。\r \r 完成此 C++ 教程后，请使用位于本页底部的投票按钮向我们提供反馈。 \r \r 如果希望我们直接与你联系，欢迎将电子邮件地址附在评论中，或者[在此处与我们联系](https://www.research.net/r/8BKRJ3Z)。 \r \r 现在，让我们开始吧！\r \r ## <a name=\"prerequisites-for-the-c-tutorial\"></a>C++ 教程的先决条件\r 请确保具有以下内容：\r \r * 有效的 Azure 帐户。 如果没有 Azure 订阅，可以在开始前创建一个[免费帐户](https://www.azure.cn/pricing/1rmb-trial/)。 \r \r   [!INCLUDE [cosmos-db-emulator-docdb-api](../../includes/cosmos-db-emulator-docdb-api.md)]\r \r * [Visual Studio 2017](https://www.visualstudio.com/downloads/)，其中已安装 C++ 语言组件。 如果尚未安装 Visual Studio 2017，可以下载并使用**免费的** [Visual Studio 2017 Community Edition](https://www.visualstudio.com/downloads/)。 在安装 Visual Studio 的过程中，请确保启用“Azure 开发”。\r \r ## <a name=\"step-1-create-an-azure-cosmos-db-account\"></a>步骤 1：创建 Azure Cosmos DB 帐户\r 创建一个 Azure Cosmos DB 帐户。 如果已经有想要使用的帐户，可以跳到 [安装 C++ 应用程序](#SetupC++)。\r \r [!INCLUDE [cosmos-db-create-dbaccount](../../includes/cosmos-db-create-dbaccount.md)]\r \r <a name=\"SetupC++\"></a>\r ## <a name=\"step-2-set-up-your-c-application\"></a>步骤 2：设置 C++ 应用程序\r 1. 打开 Visual Studio，在“文件”菜单中单击“新建”，然后单击“项目”。 \r 2. 在“新建项目”窗口的“已安装”窗格内，展开“Visual C++”，单击“Win32”，然后单击“Win32 控制台应用程序”。 将项目命名为 hellodocumentdb，再单击“确定” 。 \r \r     ![“新建项目”向导的屏幕截图](media/documentdb-cpp-get-started/hello.png)\r 3. Win32 应用程序向导启动后，单击“完成” 。\r 4. 创建项目后，在“解决方案资源管理器”中右键单击“hellodocumentdb”项目，然后单击“管理 NuGet 包”，打开 NuGet 包管理器。 \r \r     ![在项目菜单上显示“管理 NuGet 包”的屏幕截图](media/documentdb-cpp-get-started/nuget.png)\r 5. 在“NuGet: hellodocumentdb”选项卡中，单击“浏览”，然后搜索“documentdbcpp”。 在结果中选择 DocumentDbCPP，如下面的屏幕截图所示。 此程序包安装 C++ REST SDK 的引用，该 SDK 是DocumentDbCPP 的依赖项。  \r \r     ![突出显示 DocumentDbCpp 包的屏幕截图](media/documentdb-cpp-get-started/cpp.png)\r \r     将包添加到项目后，我们已准备好开始编写一些代码。   \r \r <a name=\"Config\"></a>\r ## <a name=\"step-3-copy-connection-details-from-azure-portal-for-your-azure-cosmos-db-database\"></a>步骤 3：从 Azure 门户复制 Azure Cosmos DB 数据库的连接详细信息\r 打开 [Azure 门户](https://portal.azure.cn)，浏览到已创建的 Azure Cosmos DB 数据库帐户。 下一步需要 Azure 门户中的 URI 和主要密钥，以便使用 C++ 代码片段建立连接。 \r \r ![Azure 门户中的 Azure Cosmos DB URI 和密钥](media/documentdb-cpp-get-started/nosql-tutorial-keys.png)\r \r ## <a name=\"Connect\"></a>步骤 4：连接到 Azure Cosmos DB 帐户\r 1. 将以下标头和命名空间添加到源代码的 `#include \"stdafx.h\"` 后面。\r \r         #include <cpprest/json.h>\r         #include <documentdbcpp\\DocumentClient.h>\r         #include <documentdbcpp\\exceptions.h>\r         #include <documentdbcpp\\TriggerOperation.h>\r         #include <documentdbcpp\\TriggerType.h>\r         using namespace documentdb;\r         using namespace std;\r         using namespace web::json;\r 2. 接下来，将以下代码添加到 main 函数，并根据步骤 3 中的 Azure Cosmos DB 设置替换帐户配置和主密钥。 \r \r         DocumentDBConfiguration conf (L\"<account_configuration_uri>\", L\"<primary_key>\");\r         DocumentClient client (conf);\r \r     现已获得用于初始化 documentdb 客户端的代码，接下来看看如何使用 Azure Cosmos DB 资源。\r \r ## <a name=\"CreateDBColl\"></a>步骤 5：创建 C++ 数据库和集合\r 在执行此步骤之前，让我们为 Azure Cosmos DB 的新手回顾一下数据库、集合与文档之间的交互方式。 [数据库](documentdb-resources.md#databases)是跨集合分区的文档存储的逻辑容器。 [集合](documentdb-resources.md#collections)是 JSON 文档和相关联的 JavaScript 应用程序逻辑的容器。 可以在 [Azure Cosmos DB 分层资源模型和概念](documentdb-resources.md)中详细了解 Azure Cosmos DB 分层资源模型和概念。\r \r 要创建数据库和相应的集合，请将下面的代码添加到主函数末尾。 这样可以使用上一步中声明的客户端配置创建名为“FamilyRegistry”的数据库和名为“FamilyCollection”的集合。\r \r     try {\r       shared_ptr<Database> db = client.CreateDatabase(L\"FamilyRegistry\");\r       shared_ptr<Collection> coll = db->CreateCollection(L\"FamilyCollection\");\r     } catch (DocumentDBRuntimeException ex) {\r       wcout << ex.message();\r     }\r \r ## <a name=\"CreateDoc\"></a>步骤 6：创建文档\r [文档](documentdb-resources.md#documents)是用户定义的（任意）JSON 内容。 现在，可以将文档插入 Azure Cosmos DB 中。 可以通过将以下代码复制到主函数的末尾来创建一个文档。 \r \r     try {\r       value document_family;\r       document_family[L\"id\"] = value::string(L\"AndersenFamily\");\r       document_family[L\"FirstName\"] = value::string(L\"Thomas\");\r       document_family[L\"LastName\"] = value::string(L\"Andersen\");\r       shared_ptr<Document> doc = coll->CreateDocumentAsync(document_family).get();\r \r       document_family[L\"id\"] = value::string(L\"WakefieldFamily\");\r       document_family[L\"FirstName\"] = value::string(L\"Lucy\");\r       document_family[L\"LastName\"] = value::string(L\"Wakefield\");\r       doc = coll->CreateDocumentAsync(document_family).get();\r     } catch (ResourceAlreadyExistsException ex) {\r       wcout << ex.message();\r     }\r \r 总而言之，此代码创建可在 Azure 门户中使用文档资源管理器查询的 Azure Cosmos DB 数据库、集合与文档。 \r \r ![C++ 教程 - 说明帐户、数据库、集合和文档间层次关系的关系图](media/documentdb-cpp-get-started/docs.png)\r \r ## <a name=\"QueryDB\"></a>步骤 7：查询 Azure Cosmos DB 资源\r Azure Cosmos DB 支持对存储在每个集合中的 JSON 文档进行[各种查询](documentdb-sql-query.md)。 以下示例代码演示了一个使用 SQL 语法生成的查询，可以针对上一步骤中创建的文档运行该查询。\r \r 此函数包含三个参数：数据库和集合的唯一标识符或资源 id 以及文档客户端。 在主函数前面添加此代码。\r \r     void executesimplequery(const DocumentClient &client,\r                             const wstring dbresourceid,\r                             const wstring collresourceid) {\r       try {\r         client.GetDatabase(dbresourceid).get();\r         shared_ptr<Database> db = client.GetDatabase(dbresourceid);\r         shared_ptr<Collection> coll = db->GetCollection(collresourceid);\r         wstring coll_name = coll->id();\r         shared_ptr<DocumentIterator> iter =\r             coll->QueryDocumentsAsync(wstring(L\"SELECT * FROM \" + coll_name)).get();\r         wcout << \"\\n\\nQuerying collection:\";\r         while (iter->HasMore()) {\r           shared_ptr<Document> doc = iter->Next();\r           wstring doc_name = doc->id();\r           wcout << \"\\n\\t\" << doc_name << \"\\n\";\r           wcout << \"\\t\"\r                 << \"[{\\\"FirstName\\\":\"\r                 << doc->payload().at(U(\"FirstName\")).as_string()\r                 << \",\\\"LastName\\\":\" << doc->payload().at(U(\"LastName\")).as_string()\r                 << \"}]\";\r         }\r       } catch (DocumentDBRuntimeException ex) {\r         wcout << ex.message();\r       }\r     }\r \r ## <a name=\"Replace\"></a>步骤 8：替换文档\r Azure Cosmos DB 支持替换 JSON 文档，如以下代码所示。 在 executesimplequery 函数后面添加此代码。\r \r     void replacedocument(const DocumentClient &client, const wstring dbresourceid,\r                          const wstring collresourceid,\r                          const wstring docresourceid) {\r       try {\r         client.GetDatabase(dbresourceid).get();\r         shared_ptr<Database> db = client.GetDatabase(dbresourceid);\r         shared_ptr<Collection> coll = db->GetCollection(collresourceid);\r         value newdoc;\r         newdoc[L\"id\"] = value::string(L\"WakefieldFamily\");\r         newdoc[L\"FirstName\"] = value::string(L\"Lucy\");\r         newdoc[L\"LastName\"] = value::string(L\"Smith Wakefield\");\r         coll->ReplaceDocument(docresourceid, newdoc);\r       } catch (DocumentDBRuntimeException ex) {\r         throw;\r       }\r     }\r \r ## <a name=\"Delete\"></a>步骤 9：删除文档\r Azure Cosmos DB 支持删除 JSON 文档，为此，可以复制以下代码并将其粘贴到 replacedocument 函数的后面。 \r \r     void deletedocument(const DocumentClient &client, const wstring dbresourceid,\r                         const wstring collresourceid, const wstring docresourceid) {\r       try {\r         client.GetDatabase(dbresourceid).get();\r         shared_ptr<Database> db = client.GetDatabase(dbresourceid);\r         shared_ptr<Collection> coll = db->GetCollection(collresourceid);\r         coll->DeleteDocumentAsync(docresourceid).get();\r       } catch (DocumentDBRuntimeException ex) {\r         wcout << ex.message();\r       }\r     }\r \r ## <a name=\"DeleteDB\"></a>步骤 10：删除数据库\r 删除已创建的数据库将删除该数据库及其所有子资源（集合、文档等）。\r \r 复制以下代码片段（cleanup 函数）并将其粘贴到 deletedocument 函数后面，以删除数据库和所有子资源。\r \r     void deletedb(const DocumentClient &client, const wstring dbresourceid) {\r       try {\r         client.DeleteDatabase(dbresourceid);\r       } catch (DocumentDBRuntimeException ex) {\r         wcout << ex.message();\r       }\r     }\r \r ## <a name=\"Run\"></a>步骤 11：一同运行所有 C++ 应用程序！\r 现在已添加了用于创建、查询、修改和删除不同 Azure Cosmos DB 资源的代码。  现在通过在 hellodocumentdb.cpp 的主函数中添加对这些不同函数的调用和一些诊断消息，将这些代码连接到一起。\r \r 可以通过将应用程序的主函数替换为以下代码来实现。 这样会覆盖步骤 3 中复制到代码的 account_configuration_uri 和 primary_key，因此请再次在门户中保存此代码行或复制这些值。 \r \r     int main() {\r         try {\r             // Start by defining your account's configuration\r             DocumentDBConfiguration conf (L\"<account_configuration_uri>\", L\"<primary_key>\");\r             // Create your client\r             DocumentClient client(conf);\r             // Create a new database\r             try {\r                 shared_ptr<Database> db = client.CreateDatabase(L\"FamilyDB\");\r                 wcout << \"\\nCreating database:\\n\" << db->id();\r                 // Create a collection inside database\r                 shared_ptr<Collection> coll = db->CreateCollection(L\"FamilyColl\");\r                 wcout << \"\\n\\nCreating collection:\\n\" << coll->id();\r                 value document_family;\r                 document_family[L\"id\"] = value::string(L\"AndersenFamily\");\r                 document_family[L\"FirstName\"] = value::string(L\"Thomas\");\r                 document_family[L\"LastName\"] = value::string(L\"Andersen\");\r                 shared_ptr<Document> doc =\r                     coll->CreateDocumentAsync(document_family).get();\r                 wcout << \"\\n\\nCreating document:\\n\" << doc->id();\r                 document_family[L\"id\"] = value::string(L\"WakefieldFamily\");\r                 document_family[L\"FirstName\"] = value::string(L\"Lucy\");\r                 document_family[L\"LastName\"] = value::string(L\"Wakefield\");\r                 doc = coll->CreateDocumentAsync(document_family).get();\r                 wcout << \"\\n\\nCreating document:\\n\" << doc->id();\r                 executesimplequery(client, db->resource_id(), coll->resource_id());\r                 replacedocument(client, db->resource_id(), coll->resource_id(),\r                     doc->resource_id());\r                 wcout << \"\\n\\nReplaced document:\\n\" << doc->id();\r                 executesimplequery(client, db->resource_id(), coll->resource_id());\r                 deletedocument(client, db->resource_id(), coll->resource_id(),\r                     doc->resource_id());\r                 wcout << \"\\n\\nDeleted document:\\n\" << doc->id();\r                 deletedb(client, db->resource_id());\r                 wcout << \"\\n\\nDeleted db:\\n\" << db->id();\r                 cin.get();\r             }\r             catch (ResourceAlreadyExistsException ex) {\r                 wcout << ex.message();\r             }\r         }\r         catch (DocumentDBRuntimeException ex) {\r             wcout << ex.message();\r         }\r         cin.get();\r     }\r \r 现在可以按 F5 在 Visual Studio 中生成并运行代码，或者通过查找应用程序并运行可执行文件在终端窗口中生成并运行代码。 \r \r 应该看到已启动应用的输出。 该输出应和以下屏幕截图一致。\r \r ![Azure Cosmos DB C++ 应用程序输出](media/documentdb-cpp-get-started/console.png)\r \r 祝贺！ 已完成了 C++ 教程并创建了第一个 Azure Cosmos DB 控制台应用程序！\r \r ## <a name=\"GetSolution\"></a>获取完整的 C++ 教程解决方案\r 若要生成包含本文所有示例的 GetStarted 解决方案，需要以下项：\r \r * [Azure Cosmos DB 帐户][create-account]。\r * GitHub 上提供的 [GetStarted](https://github.com/stalker314314/DocumentDBCpp) 解决方案。\r \r ## <a name=\"next-steps\"></a>后续步骤\r * 了解如何[监视 Azure Cosmos DB 帐户](monitor-accounts.md)。\r * 在 [Query Playground](https://www.documentdb.com/sql/demo)中对示例数据集运行查询。\r * 在 [Azure Cosmos DB 文档页](/documentdb/)的“开发”部分了解有关编程模型的详细信息。\r \r [create-account]: create-documentdb-dotnet.md#create-account\r \r <!--Update_Description: wording update-->"}