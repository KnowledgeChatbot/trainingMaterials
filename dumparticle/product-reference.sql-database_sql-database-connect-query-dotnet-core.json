{"Title":"使用 .NET Core 查询 Azure SQL 数据库","Description":"本主题介绍如何使用 .NET Core 创建连接到 Azure SQL 数据库的程序并使用 Transact-SQL 语句对其进行查询。","Content":"# <a name=\"use-net-core-c-to-query-an-azure-sql-database\"></a>使用 .NET Core (C#) 查询 Azure SQL 数据库\r \r 本快速入门教程演示了如何在 Windows/Linux/macOS 中使用 [.NET Core](https://www.microsoft.com/net/) 来创建连接到 Azure SQL 数据库的 C# 程序，并使用 Transact-SQL 语句来查询数据。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 若要完成本快速入门教程，请确保具备以下条件：\r \r - Azure SQL 数据库。 此快速入门使用以下某个快速入门中创建的资源： \r \r    - [创建 DB - 门户](sql-database-get-started-portal.md)\r    - [创建 DB - CLI](sql-database-get-started-cli.md)\r    - [创建 DB - PowerShell](sql-database-get-started-powershell.md)\r \r - 针对用于本快速入门教程的计算机的公共 IP 地址制定[服务器级防火墙规则](sql-database-get-started-portal.md#create-a-server-level-firewall-rule)。\r - 已安装[适用于操作系统的 .NET Core](https://www.microsoft.com/net/core)。 \r \r ## <a name=\"sql-server-connection-information\"></a>SQL Server 连接信息\r \r 获取连接到 Azure SQL 数据库所需的连接信息。 在后续过程中，将需要完全限定的服务器名称、数据库名称和登录信息。\r \r 1. 登录到 [Azure 门户](https://portal.azure.cn/)。\r 2. 从左侧菜单中选择“SQL 数据库”，并单击“SQL 数据库”页上的数据库。 \r 3. 在数据库的“概览”页上，查看如下图所示的完全限定的服务器名称。 将鼠标悬停在服务器名称上即可打开“通过单击进行复制”选项。 \r \r    ![server-name](./media/sql-database-connect-query-dotnet/server-name.png) \r \r 4. 如果忘了 Azure SQL 数据库服务器的登录信息，请导航到 SQL 数据库服务器页，以查看服务器管理员名称。 必要时可重置密码。\r \r 5. 单击“显示数据库连接字符串”。\r \r 6. 查看完整的 ADO.NET 连接字符串。\r \r     ![ADO.NET 连接字符串](./media/sql-database-connect-query-dotnet/adonet-connection-string.png)\r \r > [!IMPORTANT]\r > 对于在其上执行本教程操作的计算机，必须为其公共 IP 地址制定防火墙规则。 如果使用其他计算机或其他公共 IP 地址，则[使用 Azure 门户创建服务器级防火墙规则](sql-database-get-started-portal.md#create-a-server-level-firewall-rule)。 \r >\r \r ## <a name=\"create-a-new-net-project\"></a>新建 .NET 项目\r \r 1. 打开命令提示符，并创建一个名为 *sqltest* 的文件夹。 导航到已创建的文件夹，并运行以下命令：\r \r     ```\r     dotnet new console\r     ```\r \r 2. 使用常用的文本编辑器打开 sqltest.csproj，然后使用以下代码将 System.Data.SqlClient 添加为依赖项：\r \r     ```xml\r     <ItemGroup>\r         <PackageReference Include=\"System.Data.SqlClient\" Version=\"4.4.0\" />\r     </ItemGroup>\r     ```\r \r ## <a name=\"insert-code-to-query-sql-database\"></a>插入用于查询 SQL 数据库的代码\r \r 1. 在开发环境或常用的文本编辑器中，打开 Program.cs\r \r 2. 将内容替换为以下代码，为服务器、数据库、用户和密码添加相应的值。\r \r ```csharp\r using System;\r using System.Data.SqlClient;\r using System.Text;\r \r namespace sqltest\r {\r     class Program\r     {\r         static void Main(string[] args)\r         {\r             try \r             { \r                 SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();\r                 builder.DataSource = \"your_server.database.chinacloudapi.cn\"; \r                 builder.UserID = \"your_user\";            \r                 builder.Password = \"your_password\";     \r                 builder.InitialCatalog = \"your_database\";\r \r                 using (SqlConnection connection = new SqlConnection(builder.ConnectionString))\r                 {\r                     Console.WriteLine(\"\\nQuery data example:\");\r                     Console.WriteLine(\"=========================================\\n\");\r \r                     connection.Open();       \r                     StringBuilder sb = new StringBuilder();\r                     sb.Append(\"SELECT TOP 20 pc.Name as CategoryName, p.name as ProductName \");\r                     sb.Append(\"FROM [SalesLT].[ProductCategory] pc \");\r                     sb.Append(\"JOIN [SalesLT].[Product] p \");\r                     sb.Append(\"ON pc.productcategoryid = p.productcategoryid;\");\r                     String sql = sb.ToString();\r \r                     using (SqlCommand command = new SqlCommand(sql, connection))\r                     {\r                         using (SqlDataReader reader = command.ExecuteReader())\r                         {\r                             while (reader.Read())\r                             {\r                                 Console.WriteLine(\"{0} {1}\", reader.GetString(0), reader.GetString(1));\r                             }\r                         }\r                     }                    \r                 }\r             }\r             catch (SqlException e)\r             {\r                 Console.WriteLine(e.ToString());\r             }\r             Console.ReadLine();\r         }\r     }\r }\r ```\r \r ## <a name=\"run-the-code\"></a>运行代码\r \r 1. 在命令提示符下运行以下命令：\r \r    ```csharp\r    dotnet restore\r    dotnet run\r    ```\r \r 2. 验证是否已返回前 20 行，然后关闭应用程序窗口。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r - [在 Windows/Linux/macOS 中通过命令行使用 .NET Core 入门](https://docs.microsoft.com/dotnet/core/tutorials/using-with-xplat-cli)。\r - 了解如何[使用 .NET Framework 和 Visual Studio 连接和查询 Azure SQL 数据库](sql-database-connect-query-dotnet-visual-studio.md)。  \r - 了解如何[使用 SSMS 设计第一个 Azure SQL 数据库](sql-database-design-first-database.md)，或者如何[使用 .NET 设计第一个 Azure SQL 数据库](sql-database-design-first-database-csharp.md)。\r - 有关 .NET 的详细信息，请参阅 [.NET 文档](https://docs.microsoft.com/dotnet/)。\r <!--Update_Description:update System.Data.SqlClient from 4.3.0 to 4.4.0-->"}