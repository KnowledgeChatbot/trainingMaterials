{"Title":"使用 .NET 针对 Azure 文件进行开发","Description":"了解如何开发使用 Azure 文件来存储文件数据的 .NET 应用程序和服务。","Content":"# <a name=\"develop-for-azure-files-with-net\"></a>使用 .NET 针对 Azure 文件进行开发 \r > [!NOTE]\r > 本文介绍如何使用 .NET 代码管理 Azure 文件。 若要详细了解 Azure 文件，请参阅 [Azure 文件简介](storage-files-introduction.md)。\r >\r \r [!INCLUDE [storage-selector-file-include](../../../includes/storage-selector-file-include.md)]\r \r [!INCLUDE [storage-check-out-samples-dotnet](../../../includes/storage-check-out-samples-dotnet.md)]\r \r ## <a name=\"about-this-tutorial\"></a>关于本教程\r 本教程将演示使用 .NET 开发应用程序或服务的基础知识，这些应用程序或服务可以使用 Azure 文件来存储文件数据。 在本教程中，我们创建一个简单的控制台应用程序，并演示如何通过 .NET 和 Azure 文件执行基本的操作：\r \r * 获取文件内容\r * 设置文件共享的配额（最大大小）。\r * 若一个文件使用在共享中定义的共享访问策略，则为该文件创建一个共享访问签名（SAS 密钥）。\r * 将文件复制到同一存储帐户中的另一个文件。\r * 将文件复制到同一存储帐户中的一个 Blob。\r * 使用 Azure 存储度量值进行故障排除\r \r > [!Note]  \r > 由于 Azure 文件可以通过 SMB 进行访问，因此可以编写简单的应用程序，通过标准的适用于文件 I/O 的 System.IO 类来访问 Azure 文件共享。 本文将介绍如何编写使用 Azure 存储 .NET SDK 的应用程序，该 SDK 使用 [文件 REST API](https://docs.microsoft.com/rest/api/storageservices/fileservices/file-service-rest-api) 与 Azure 文件通信。 \r \r \r ## <a name=\"create-the-console-application-and-obtain-the-assembly\"></a>创建控制台应用程序，并获取程序集\r 在 Visual Studio 中创建新的 Windows 控制台应用程序。 以下步骤演示如何在 Visual Studio 2017 中创建控制台应用程序，但是，其他 Visual Studio 版本中的步骤是类似的。\r \r 1. 选择“文件” > “新建” > “项目”\r 2. 选择“已安装” > “模板” > “Visual C#” > “Windows 经典桌面”\r 3. 选择“控制台应用(.NET Framework)”\r 4. 在“名称:”字段中输入应用程序的名称\r 5. 选择“确定”\r \r 本教程中的所有代码示例都可以添加到控制台应用程序的 `Program.cs` 文件的 `Main()` 方法。\r \r 可以在任意类型的 .NET 应用程序（包括 Azure 云服务或 Web 应用，以及桌面和移动应用程序）中使用 Azure 存储客户端库。 为简单起见，我们在本指南中使用控制台应用程序。\r \r ## <a name=\"use-nuget-to-install-the-required-packages\"></a>使用 NuGet 安装所需包\r 为完成此教程，需要在项目中引用两个包：\r \r * [适用于 .NET 的 Azure 存储客户端库](https://www.nuget.org/packages/WindowsAzure.Storage/)：此包提供以编程方式访问存储帐户中数据资源的权限。\r * [适用于 .NET 的 Azure Configuration Manager 库](https://www.nuget.org/packages/Microsoft.WindowsAzure.ConfigurationManager/)：此包提供用于分析配置文件中连接字符串的类，而不考虑应用程序在何处运行。\r \r 可以使用 NuGet 获取这两个包。 执行以下步骤:\r \r 1. 在“解决方案资源管理器”中，右键单击自己的项目并选择“管理 NuGet 包”。\r 2. 在线搜索“WindowsAzure.Storage”，并单击“安装”  以安装存储客户端库和依赖项。\r 3. 在线搜索“WindowsAzure.ConfigurationManager”，并单击“安装”以安装 Azure Configuration Manager。\r \r ## <a name=\"save-your-storage-account-credentials-to-the-appconfig-file\"></a>将存储帐户凭据保存到 app.config 文件\r 接下来，将凭据保存到项目的 app.config 文件中。 编辑 app.config 文件，使其看起来类似于下面的示例，将 `myaccount` 替换为存储帐户名称，并将 `mykey` 替换为存储帐户密钥。\r \r ```xml\r <?xml version=\"1.0\" encoding=\"utf-8\" ?>\r <configuration>\r     <startup>\r         <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />\r     </startup>\r     <appSettings>\r         <add key=\"StorageConnectionString\" value=\"DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=StorageAccountKeyEndingIn==;EndpointSuffix=core.chinacloudapi.cn\" />\r     </appSettings>\r </configuration>\r ```\r \r > [!NOTE]\r > 最新版本的 Azure 存储模拟器不支持 Azure 文件。 连接字符串必须针对云中要使用 Azure 文件的 Azure 存储帐户。\r \r ## <a name=\"add-using-directives\"></a>添加 using 指令\r 从解决方案资源管理器打开 `Program.cs` 文件，并在该文件顶部添加以下 using 指令。\r \r ```csharp\r using Microsoft.Azure; // Namespace for Azure Configuration Manager\r using Microsoft.WindowsAzure.Storage; // Namespace for Storage Client Library\r using Microsoft.WindowsAzure.Storage.Blob; // Namespace for Azure Blobs\r using Microsoft.WindowsAzure.Storage.File; // Namespace for Azure Files\r ```\r \r [!INCLUDE [storage-cloud-configuration-manager-include](../../../includes/storage-cloud-configuration-manager-include.md)]\r \r ## <a name=\"access-the-file-share-programmatically\"></a>以编程方式访问文件共享\r 接下来，将以下代码添加到 `Main()` 方法（在上面显示的代码后面）以检索连接字符串。 此代码会获取我们先前创建的文件的引用，并将其内容输出到控制台窗口中。\r \r ```csharp\r // Create a CloudFileClient object for credentialed access to Azure Files.\r CloudFileClient fileClient = storageAccount.CreateCloudFileClient();\r \r // Get a reference to the file share we created previously.\r CloudFileShare share = fileClient.GetShareReference(\"logs\");\r \r // Ensure that the share exists.\r if (share.Exists())\r {\r     // Get a reference to the root directory for the share.\r     CloudFileDirectory rootDir = share.GetRootDirectoryReference();\r \r     // Get a reference to the directory we created previously.\r     CloudFileDirectory sampleDir = rootDir.GetDirectoryReference(\"CustomLogs\");\r \r     // Ensure that the directory exists.\r     if (sampleDir.Exists())\r     {\r         // Get a reference to the file we created previously.\r         CloudFile file = sampleDir.GetFileReference(\"Log1.txt\");\r \r         // Ensure that the file exists.\r         if (file.Exists())\r         {\r             // Write the contents of the file to the console window.\r             Console.WriteLine(file.DownloadTextAsync().Result);\r         }\r     }\r }\r ```\r \r 运行控制台应用程序以查看输出。\r \r ## <a name=\"set-the-maximum-size-for-a-file-share\"></a>设置文件共享的最大大小\r 从 Azure 存储客户端库的 5.x 版开始，可以设置文件共享的配额（或最大大小），单位为千兆字节。 还可以查看共享当前存储了多少数据。\r \r 通过设置一个共享的配额，可以限制在该共享上存储的文件的总大小。 如果共享上文件的总大小超过在共享上设定的配额，则客户端不能增加现有文件的大小或创建新文件，除非这些文件是空的。\r \r 下面的示例演示如何检查共享的当前使用情况，以及如何设置共享的配额。\r \r ```csharp\r // Parse the connection string for the storage account.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     Microsoft.Azure.CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create a CloudFileClient object for credentialed access to Azure Files.\r CloudFileClient fileClient = storageAccount.CreateCloudFileClient();\r \r // Get a reference to the file share we created previously.\r CloudFileShare share = fileClient.GetShareReference(\"logs\");\r \r // Ensure that the share exists.\r if (share.Exists())\r {\r     // Check current usage stats for the share.\r     // Note that the ShareStats object is part of the protocol layer for the File service.\r     Microsoft.WindowsAzure.Storage.File.Protocol.ShareStats stats = share.GetStats();\r     Console.WriteLine(\"Current share usage: {0} GB\", stats.Usage.ToString());\r \r     // Specify the maximum size of the share, in GB.\r     // This line sets the quota to be 10 GB greater than the current usage of the share.\r     share.Properties.Quota = 10 + stats.Usage;\r     share.SetProperties();\r \r     // Now check the quota for the share. Call FetchAttributes() to populate the share's properties.\r     share.FetchAttributes();\r     Console.WriteLine(\"Current share quota: {0} GB\", share.Properties.Quota);\r }\r ```\r \r ### <a name=\"generate-a-shared-access-signature-for-a-file-or-file-share\"></a>为文件或文件共享生成共享访问签名\r 从 Azure 存储客户端库的 5.x 版开始，可以为文件共享或单个文件生成共享访问签名 (SAS)。 还可以在文件共享上创建一个共享访问策略以管理共享访问签名。 建议创建共享访问策略，因为它提供了一种在受到威胁时撤消 SAS 的方式。\r \r 以下示例在一个共享上创建共享访问策略，并使用该策略为共享中的一个文件提供 SAS 约束。\r \r ```csharp\r // Parse the connection string for the storage account.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     Microsoft.Azure.CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create a CloudFileClient object for credentialed access to Azure Files.\r CloudFileClient fileClient = storageAccount.CreateCloudFileClient();\r \r // Get a reference to the file share we created previously.\r CloudFileShare share = fileClient.GetShareReference(\"logs\");\r \r // Ensure that the share exists.\r if (share.Exists())\r {\r     string policyName = \"sampleSharePolicy\" + DateTime.UtcNow.Ticks;\r \r     // Create a new shared access policy and define its constraints.\r     SharedAccessFilePolicy sharedPolicy = new SharedAccessFilePolicy()\r         {\r             SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24),\r             Permissions = SharedAccessFilePermissions.Read | SharedAccessFilePermissions.Write\r         };\r \r     // Get existing permissions for the share.\r     FileSharePermissions permissions = share.GetPermissions();\r \r     // Add the shared access policy to the share's policies. Note that each policy must have a unique name.\r     permissions.SharedAccessPolicies.Add(policyName, sharedPolicy);\r     share.SetPermissions(permissions);\r \r     // Generate a SAS for a file in the share and associate this access policy with it.\r     CloudFileDirectory rootDir = share.GetRootDirectoryReference();\r     CloudFileDirectory sampleDir = rootDir.GetDirectoryReference(\"CustomLogs\");\r     CloudFile file = sampleDir.GetFileReference(\"Log1.txt\");\r     string sasToken = file.GetSharedAccessSignature(null, policyName);\r     Uri fileSasUri = new Uri(file.StorageUri.PrimaryUri.ToString() + sasToken);\r \r     // Create a new CloudFile object from the SAS, and write some text to the file.\r     CloudFile fileSas = new CloudFile(fileSasUri);\r     fileSas.UploadText(\"This write operation is authenticated via SAS.\");\r     Console.WriteLine(fileSas.DownloadText());\r }\r ```\r \r 有关创建和使用共享访问签名的更多信息，请参阅[使用共享访问签名 (SAS)](../common/storage-dotnet-shared-access-signature-part-1.md?toc=%2fstorage%2ffiles%2ftoc.json) 和[创建 SAS 并将其与 Azure Blob 结合使用](../blobs/storage-dotnet-shared-access-signature-part-2.md)。\r \r ## <a name=\"copy-files\"></a>复制文件\r 从 Azure 存储客户端库的 5.x 版开始，可以将一个文件复制到另一个文件，将一个文件复制到一个 Blob，或将一个 Blob 复制到一个文件。 在后续部分中，我们演示如何以编程方式执行这些复制操作。\r \r 还可以使用 AzCopy 将一个文件复制到另一个文件或将一个 Blob 复制到一个文件，反之亦然。 请参阅 [使用 AzCopy 命令行实用程序传输数据](../common/storage-use-azcopy.md?toc=%2fstorage%2ffiles%2ftoc.json)。\r \r > [!NOTE]\r > 如果将一个 Blob 复制到一个文件，或将一个文件复制到一个 Blob，必须使用共享访问签名 (SAS) 对源对象进行身份验证，即使在同一存储帐户内进行复制。\r > \r > \r \r **将一个文件复制到另一个文件**以下示例将一个文件复制到同一共享中的另一个文件。 因为此操作在同一存储帐户中的文件之间进行复制，可以使用共享密钥身份验证来进行复制。\r \r ```csharp\r // Parse the connection string for the storage account.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     Microsoft.Azure.CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create a CloudFileClient object for credentialed access to Azure Files.\r CloudFileClient fileClient = storageAccount.CreateCloudFileClient();\r \r // Get a reference to the file share we created previously.\r CloudFileShare share = fileClient.GetShareReference(\"logs\");\r \r // Ensure that the share exists.\r if (share.Exists())\r {\r     // Get a reference to the root directory for the share.\r     CloudFileDirectory rootDir = share.GetRootDirectoryReference();\r \r     // Get a reference to the directory we created previously.\r     CloudFileDirectory sampleDir = rootDir.GetDirectoryReference(\"CustomLogs\");\r \r     // Ensure that the directory exists.\r     if (sampleDir.Exists())\r     {\r         // Get a reference to the file we created previously.\r         CloudFile sourceFile = sampleDir.GetFileReference(\"Log1.txt\");\r \r         // Ensure that the source file exists.\r         if (sourceFile.Exists())\r         {\r             // Get a reference to the destination file.\r             CloudFile destFile = sampleDir.GetFileReference(\"Log1Copy.txt\");\r \r             // Start the copy operation.\r             destFile.StartCopy(sourceFile);\r \r             // Write the contents of the destination file to the console window.\r             Console.WriteLine(destFile.DownloadText());\r         }\r     }\r }\r ```\r \r **将一个文件复制到一个 Blob**以下示例创建一个文件并将其复制到同一存储帐户中的某个 Blob。 该示例为源文件创建一个 SAS，服务在复制操作期间使用该 SAS 验证对源文件的访问。\r \r ```csharp\r // Parse the connection string for the storage account.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     Microsoft.Azure.CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create a CloudFileClient object for credentialed access to Azure Files.\r CloudFileClient fileClient = storageAccount.CreateCloudFileClient();\r \r // Create a new file share, if it does not already exist.\r CloudFileShare share = fileClient.GetShareReference(\"sample-share\");\r share.CreateIfNotExists();\r \r // Create a new file in the root directory.\r CloudFile sourceFile = share.GetRootDirectoryReference().GetFileReference(\"sample-file.txt\");\r sourceFile.UploadText(\"A sample file in the root directory.\");\r \r // Get a reference to the blob to which the file will be copied.\r CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\r CloudBlobContainer container = blobClient.GetContainerReference(\"sample-container\");\r container.CreateIfNotExists();\r CloudBlockBlob destBlob = container.GetBlockBlobReference(\"sample-blob.txt\");\r \r // Create a SAS for the file that's valid for 24 hours.\r // Note that when you are copying a file to a blob, or a blob to a file, you must use a SAS\r // to authenticate access to the source object, even if you are copying within the same\r // storage account.\r string fileSas = sourceFile.GetSharedAccessSignature(new SharedAccessFilePolicy()\r {\r     // Only read permissions are required for the source file.\r     Permissions = SharedAccessFilePermissions.Read,\r     SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24)\r });\r \r // Construct the URI to the source file, including the SAS token.\r Uri fileSasUri = new Uri(sourceFile.StorageUri.PrimaryUri.ToString() + fileSas);\r \r // Copy the file to the blob.\r destBlob.StartCopy(fileSasUri);\r \r // Write the contents of the file to the console window.\r Console.WriteLine(\"Source file contents: {0}\", sourceFile.DownloadText());\r Console.WriteLine(\"Destination blob contents: {0}\", destBlob.DownloadText());\r ```\r \r 可以用相同的方式将一个 Blob 复制到一个文件。 如果源对象是一个 Blob，则创建一个 SAS 以复制操作期间验证对该 Blob 的访问。\r \r ## <a name=\"troubleshooting-azure-files-using-metrics\"></a>使用指标对 Azure 文件进行故障排除\r Azure 存储分析现在支持用于 Azure 文件的指标。 使用指标数据，可以跟踪请求和诊断问题。\r \r 可以通过 [Azure 门户](https://portal.azure.cn)为 Azure 文件存储启用指标。 还可以通过 REST API 或存储客户端库中的类似物之一调用“设置文件服务属性”操作，以编程方式启用指标。\r \r 以下代码示例演示如何使用适用于 .NET 的存储客户端库启用 Azure 文件的指标。\r \r 首先，在添加以上指令后，将以下 `using` 指令添加到 `Program.cs` 文件中：\r \r ```csharp\r using Microsoft.WindowsAzure.Storage.File.Protocol;\r using Microsoft.WindowsAzure.Storage.Shared.Protocol;\r ```\r \r 请注意，Azure Blob、Azure 表和 Azure 队列使用 `Microsoft.WindowsAzure.Storage.Shared.Protocol` 命名空间中的共享 `ServiceProperties` 类型，而 Azure 文件使用其自己的类型，即 `Microsoft.WindowsAzure.Storage.File.Protocol` 命名空间中的 `FileServiceProperties` 类型。 但是，代码中必须同时引用这两个命名空间，才能编译后续代码。\r \r ```csharp\r // Parse your storage connection string from your application's configuration file.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r         Microsoft.Azure.CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r // Create the File service client.\r CloudFileClient fileClient = storageAccount.CreateCloudFileClient();\r \r // Set metrics properties for File service.\r // Note that the File service currently uses its own service properties type,\r // available in the Microsoft.WindowsAzure.Storage.File.Protocol namespace.\r fileClient.SetServiceProperties(new FileServiceProperties()\r {\r     // Set hour metrics\r     HourMetrics = new MetricsProperties()\r     {\r         MetricsLevel = MetricsLevel.ServiceAndApi,\r         RetentionDays = 14,\r         Version = \"1.0\"\r     },\r     // Set minute metrics\r     MinuteMetrics = new MetricsProperties()\r     {\r         MetricsLevel = MetricsLevel.ServiceAndApi,\r         RetentionDays = 7,\r         Version = \"1.0\"\r     }\r });\r \r // Read the metrics properties we just set.\r FileServiceProperties serviceProperties = fileClient.GetServiceProperties();\r Console.WriteLine(\"Hour metrics:\");\r Console.WriteLine(serviceProperties.HourMetrics.MetricsLevel);\r Console.WriteLine(serviceProperties.HourMetrics.RetentionDays);\r Console.WriteLine(serviceProperties.HourMetrics.Version);\r Console.WriteLine();\r Console.WriteLine(\"Minute metrics:\");\r Console.WriteLine(serviceProperties.MinuteMetrics.MetricsLevel);\r Console.WriteLine(serviceProperties.MinuteMetrics.RetentionDays);\r Console.WriteLine(serviceProperties.MinuteMetrics.Version);\r ```\r \r 还可以参考 [Azure 文件故障排除文章](storage-troubleshoot-windows-file-connection-problems.md) 了解有关端到端故障排除指南。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 请参阅以下链接，获取有关 Azure 文件的更多信息。\r \r ### <a name=\"conceptual-articles\"></a>概念性文章\r \r * [如何通过 Linux 使用 Azure 文件](storage-how-to-use-files-linux.md)\r \r ### <a name=\"tooling-support-for-file-storage\"></a>文件存储的工具支持\r * [如何对 Azure 存储使用 AzCopy](../common/storage-use-azcopy.md?toc=%2fstorage%2ffiles%2ftoc.json)\r * [将 Azure CLI 用于 Azure 存储](../common/storage-azure-cli.md?toc=%2fstorage%2ffiles%2ftoc.json#create-and-manage-file-shares)\r * [排查 Azure 文件问题](/storage/storage-troubleshoot-file-connection-problems)\r \r ### <a name=\"reference\"></a>引用\r * [.NET 存储客户端库参考](https://msdn.microsoft.com/library/azure/dn261237.aspx)\r * [文件服务 REST API 参考](http://msdn.microsoft.com/library/azure/dn167006.aspx)\r \r ### <a name=\"blog-posts\"></a>博客文章\r * [Azure 文件现已正式发布](https://azure.microsoft.com/blog/azure-file-storage-now-generally-available/)\r * [Azure 文件内部](https://azure.microsoft.com/blog/inside-azure-file-storage/)\r * [Introducing Azure File Service（Azure 文件服务简介）](http://blogs.msdn.com/b/windowsazurestorage/archive/2014/05/12/introducing-microsoft-azure-file-service.aspx)\r * [Persisting connections to Azure Files（持久连接到 Azure 文件）](http://blogs.msdn.com/b/windowsazurestorage/archive/2014/05/27/persisting-connections-to-microsoft-azure-files.aspx)\r <!--Update_Description:wording update-->"}