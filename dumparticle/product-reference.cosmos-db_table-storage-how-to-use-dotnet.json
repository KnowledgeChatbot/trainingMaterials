{"Title":"通过 .NET 开始使用 Azure 表存储","Description":"使用 Azure 表存储（一种 NoSQL 数据存储）将结构化数据存储在云中。","Content":"# <a name=\"get-started-with-azure-table-storage-using-net\"></a>通过 .NET 开始使用 Azure 表存储\r [!INCLUDE [storage-selector-table-include](../../includes/storage-selector-table-include.md)]\r [!INCLUDE [storage-table-cosmos-db-tip-include](../../includes/storage-table-cosmos-db-tip-include.md)]\r \r Azure 表存储是一项用于在云中存储结构化 NoSQL 数据的服务，通过无架构设计提供键/属性存储。 因为表存储无架构，因此可以很容易地随着应用程序需求的发展使数据适应存储。 对于许多类型的应用程序来说，访问表存储数据速度快且经济高效，在数据量相似的情况下，其成本通常比传统 SQL 要低。\r \r 可以使用表存储来存储灵活的数据集，例如 Web 应用程序的用户数据、通讯簿、设备信息，或者服务需要的其他类型的元数据。 可以在表中存储任意数量的实体，并且一个存储帐户可以包含任意数量的表，直至达到存储帐户的容量极限。\r \r ### <a name=\"about-this-tutorial\"></a>关于本教程\r 本教程介绍如何在某些常见的 Azure 表存储方案中使用[适用于 .NET 的 Azure 存储客户端库](https://www.nuget.org/packages/WindowsAzure.Storage/)。 这些方案通过 C# 示例来呈现，用于创建和删除表，以及插入、更新、删除和查询表数据。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 若要成功完成本教程，需要具备以下先决条件：\r \r * [Microsoft Visual Studio](https://www.visualstudio.com/downloads/)\r * [适用于 .NET 的 Azure 存储客户端库](https://www.nuget.org/packages/WindowsAzure.Storage/)\r * [适用于 .NET 的 Azure Configuration Manager](https://www.nuget.org/packages/Microsoft.WindowsAzure.ConfigurationManager/)\r * [Azure 存储帐户](../storage/common/storage-create-storage-account.md#create-a-storage-account)\r \r [!INCLUDE [storage-dotnet-client-library-version-include](../../includes/storage-dotnet-client-library-version-include.md)]\r \r ### <a name=\"more-samples\"></a>更多示例\r 有关使用表存储的其他示例，请参阅[在 .NET 中使用 Azure 表存储入门](https://github.com/Azure-Samples/storage-table-dotnet-getting-started/)。 可以下载示例应用程序并运行，或在 GitHub 上浏览代码。\r \r [!INCLUDE [storage-table-concepts-include](../../includes/storage-table-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\r \r [!INCLUDE [storage-development-environment-include](../../includes/storage-development-environment-include.md)]\r \r ### <a name=\"add-using-directives\"></a>添加 using 指令\r 将以下 **using** 指令添加到 `Program.cs` 文件顶部：\r \r ```csharp\r using Microsoft.Azure; // Namespace for CloudConfigurationManager\r using Microsoft.WindowsAzure.Storage; // Namespace for CloudStorageAccount\r using Microsoft.WindowsAzure.Storage.Table; // Namespace for Table storage types\r ```\r \r ### <a name=\"parse-the-connection-string\"></a>解析连接字符串\r [!INCLUDE [storage-cloud-configuration-manager-include](../../includes/storage-cloud-configuration-manager-include.md)]\r \r ### <a name=\"create-the-table-service-client\"></a>创建表服务客户端\r [CloudTableClient][dotnet_CloudTableClient] 类用于检索存储在表存储中的表和实体。 下面是创建表服务客户端的一种方法：\r \r ```csharp\r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r ```\r \r 现在，已准备好编写从表存储读取数据并将数据写入表存储的代码。\r \r ## <a name=\"create-a-table\"></a>创建表\r 此示例演示如何创建表（如果表已经不存在）：\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Retrieve a reference to the table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Create the table if it doesn't exist.\r table.CreateIfNotExists();\r ```\r \r ## <a name=\"add-an-entity-to-a-table\"></a>将实体添加到表\r 实体使用派生自 [TableEntity][dotnet_TableEntity] 的自定义类映射到 C# 对象。 要将实体添加到表，请创建用于定义实体的属性的类。 以下代码定义将客户的名字和姓氏分别用作行键和分区键的实体类。 实体的分区键和行键共同唯一地标识表中的实体。 查询分区键相同的实体的速度快于查询分区键不同的实体的速度，但使用不同的分区键可实现更高的并行操作可伸缩性。 需要存储在表中的实体必须是受支持的类型，例如，必须派生自 [TableEntity][dotnet_TableEntity] 类。 要存储在表中的实体属性必须是相应类型的公共属性，并且允许获取和设置值。 此外，实体类型*必须*公开不带参数的构造函数。\r \r ```csharp\r public class CustomerEntity : TableEntity\r {\r     public CustomerEntity(string lastName, string firstName)\r     {\r         this.PartitionKey = lastName;\r         this.RowKey = firstName;\r     }\r \r     public CustomerEntity() { }\r \r     public string Email { get; set; }\r \r     public string PhoneNumber { get; set; }\r }\r ```\r \r 涉及实体的表操作通过先前在“创建表”部分中创建的 [CloudTable][dotnet_CloudTable] 对象执行。 用一个 [TableOperation][dotnet_TableOperation] 对象表示要执行的操作。 以下代码示例演示如何创建 [CloudTable][dotnet_CloudTable] 对象以及 **CustomerEntity** 对象。 为准备此操作，会创建一个 [TableOperation][dotnet_TableOperation] 对象以将客户实体插入该表中。 最后，通过调用 [CloudTable][dotnet_CloudTable].[Execute][dotnet_CloudTable_Execute] 执行此操作。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable object that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Create a new customer entity.\r CustomerEntity customer1 = new CustomerEntity(\"Harp\", \"Walter\");\r customer1.Email = \"Walter@contoso.com\";\r customer1.PhoneNumber = \"425-555-0101\";\r \r // Create the TableOperation object that inserts the customer entity.\r TableOperation insertOperation = TableOperation.Insert(customer1);\r \r // Execute the insert operation.\r table.Execute(insertOperation);\r ```\r \r ## <a name=\"insert-a-batch-of-entities\"></a>插入一批实体\r 可以通过一次写入操作将一批实体插入表中。 批处理操作的一些其他注意事项：\r \r * 可以在同一批处理操作中执行更新、删除和插入操作。\r * 单个批处理操作最多可包含 100 个实体。\r * 单次批处理操作中的所有实体都必须具有相同的分区键。\r * 虽然可以将某个查询作为批处理操作执行，但该操作必须是批处理中仅有的操作。\r \r 以下代码示例创建两个实体对象，并使用 [Insert][dotnet_TableBatchOperation_Insert] 方法将其中每个对象都添加到 [TableBatchOperation][dotnet_TableBatchOperation] 中。 然后调用 [CloudTable][dotnet_CloudTable].[ExecuteBatch][dotnet_CloudTable_ExecuteBatch] 以执行此操作。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable object that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Create the batch operation.\r TableBatchOperation batchOperation = new TableBatchOperation();\r \r // Create a customer entity and add it to the table.\r CustomerEntity customer1 = new CustomerEntity(\"Smith\", \"Jeff\");\r customer1.Email = \"Jeff@contoso.com\";\r customer1.PhoneNumber = \"425-555-0104\";\r \r // Create another customer entity and add it to the table.\r CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\r customer2.Email = \"Ben@contoso.com\";\r customer2.PhoneNumber = \"425-555-0102\";\r \r // Add both customer entities to the batch insert operation.\r batchOperation.Insert(customer1);\r batchOperation.Insert(customer2);\r \r // Execute the batch operation.\r table.ExecuteBatch(batchOperation);\r ```\r \r ## <a name=\"retrieve-all-entities-in-a-partition\"></a>检索分区中的所有实体\r 若要查询表以获取分区中的所有实体，请使用 [TableQuery][dotnet_TableQuery] 对象。 以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。 此示例会将查询结果中每个实体的字段输出到控制台。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable object that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Construct the query operation for all customer entities where PartitionKey=\"Smith\".\r TableQuery<CustomerEntity> query = new TableQuery<CustomerEntity>().Where(TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"));\r \r // Print the fields for each customer.\r foreach (CustomerEntity entity in table.ExecuteQuery(query))\r {\r     Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\r         entity.Email, entity.PhoneNumber);\r }\r ```\r \r ## <a name=\"retrieve-a-range-of-entities-in-a-partition\"></a>检索分区中的一部分实体\r 如果不想查询分区中的所有实体，则可以通过结合使用分区键筛选器与行键筛选器来指定一个范围。 以下代码示例使用两个筛选器来获取分区“Smith”中的、行键（名字）以字母“E”前面的字母开头的所有实体，并输出查询结果。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable object that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Create the table query.\r TableQuery<CustomerEntity> rangeQuery = new TableQuery<CustomerEntity>().Where(\r     TableQuery.CombineFilters(\r         TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"),\r         TableOperators.And,\r         TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.LessThan, \"E\")));\r \r // Loop through the results, displaying information about the entity.\r foreach (CustomerEntity entity in table.ExecuteQuery(rangeQuery))\r {\r     Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\r         entity.Email, entity.PhoneNumber);\r }\r ```\r \r ## <a name=\"retrieve-a-single-entity\"></a>检索单个实体\r 可以编写查询以检索单个特定实体。 以下代码使用 [TableOperation][dotnet_TableOperation] 来指定客户“Ben Smith”。 此方法仅返回一个实体，而不是一个集合，并且 [TableResult][dotnet_TableResult].[Result][dotnet_TableResult_Result] 中的返回值是一个 **CustomerEntity** 对象。 在查询中指定分区键和行键是从表服务中检索单个实体的最快方法。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable object that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Create a retrieve operation that takes a customer entity.\r TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\r \r // Execute the retrieve operation.\r TableResult retrievedResult = table.Execute(retrieveOperation);\r \r // Print the phone number of the result.\r if (retrievedResult.Result != null)\r {\r     Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);\r }\r else\r {\r     Console.WriteLine(\"The phone number could not be retrieved.\");\r }\r ```\r \r ## <a name=\"replace-an-entity\"></a>替换实体\r 要更新实体，请从表服务中检索它，修改实体对象，然后将更改保存回表服务。 以下代码将更改现有客户的电话号码。 此代码使用 [Replace][dotnet_TableOperation_Replace]，而不是调用 [Insert][dotnet_TableOperation_Insert]。 [Replace][dotnet_TableOperation_Replace] 会导致在服务器上完全替换该实体，除非服务器上的该实体自检索到它以后发生更改，在此情况下，该操作将失败。 操作失败将防止应用程序无意中覆盖应用程序的其他组件在检索与更新之间所做的更改。 正确处理此失败问题的方法是再次检索实体，进行更改（如果仍有效），然后再次执行 [Replace][dotnet_TableOperation_Replace] 操作。 下一节将演示如何重写此行为。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable object that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Create a retrieve operation that takes a customer entity.\r TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\r \r // Execute the operation.\r TableResult retrievedResult = table.Execute(retrieveOperation);\r \r // Assign the result to a CustomerEntity object.\r CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;\r \r if (updateEntity != null)\r {\r     // Change the phone number.\r     updateEntity.PhoneNumber = \"425-555-0105\";\r \r     // Create the Replace TableOperation.\r     TableOperation updateOperation = TableOperation.Replace(updateEntity);\r \r     // Execute the operation.\r     table.Execute(updateOperation);\r \r     Console.WriteLine(\"Entity updated.\");\r }\r else\r {\r     Console.WriteLine(\"Entity could not be retrieved.\");\r }\r ```\r \r ## <a name=\"insert-or-replace-an-entity\"></a>插入或替换实体\r 如果该实体自从服务器中检索到它以后已发生更改，则 [Replace][dotnet_TableOperation_Replace] 操作将失败。 此外，必须首先从服务器中检索该实体，[Replace][dotnet_TableOperation_Replace] 操作才能成功。 但是，有时你不知道服务器上是否存在该实体以及存储在其中的当前值是否无关。 更新操作会将其全部覆盖。 为此，应使用 [InsertOrReplace][dotnet_TableOperation_InsertOrReplace] 操作。 如果该实体不存在，此操作将插入它，如果存在，则替换它，而不管上次更新是何时进行的。\r \r 在下面的代码示例中，创建了“Fred Jones”的客户实体并将其插入了“people”表中。 接下来，我们使用 [InsertOrReplace][dotnet_TableOperation_InsertOrReplace] 操作通过相同的分区键 (Jones) 和行键 (Fred) 将实体保存到服务器，此次为 PhoneNumber 属性设置了其他值。 我们使用 [InsertOrReplace][dotnet_TableOperation_InsertOrReplace]，因此其所有属性值被替换。 但是，如果表中部不存在“Fred Jones”实体，则会将其插入。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable object that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Create a customer entity.\r CustomerEntity customer3 = new CustomerEntity(\"Jones\", \"Fred\");\r customer3.Email = \"Fred@contoso.com\";\r customer3.PhoneNumber = \"425-555-0106\";\r \r // Create the TableOperation object that inserts the customer entity.\r TableOperation insertOperation = TableOperation.Insert(customer3);\r \r // Execute the operation.\r table.Execute(insertOperation);\r \r // Create another customer entity with the same partition key and row key.\r // We've already created a 'Fred Jones' entity and saved it to the\r // 'people' table, but here we're specifying a different value for the\r // PhoneNumber property.\r CustomerEntity customer4 = new CustomerEntity(\"Jones\", \"Fred\");\r customer4.Email = \"Fred@contoso.com\";\r customer4.PhoneNumber = \"425-555-0107\";\r \r // Create the InsertOrReplace TableOperation.\r TableOperation insertOrReplaceOperation = TableOperation.InsertOrReplace(customer4);\r \r // Execute the operation. Because a 'Fred Jones' entity already exists in the\r // 'people' table, its property values will be overwritten by those in this\r // CustomerEntity. If 'Fred Jones' didn't already exist, the entity would be\r // added to the table.\r table.Execute(insertOrReplaceOperation);\r ```\r \r ## <a name=\"query-a-subset-of-entity-properties\"></a>查询一部分实体属性\r 表查询可以只检索实体中的少数几个属性而不是所有实体属性。 此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。 以下代码中的查询只返回表中实体的电子邮件地址。 这可通过使用 [DynamicTableEntity][dotnet_DynamicTableEntity] 和 [EntityResolver][dotnet_EntityResolver] 的查询来实现。 可以在[“Upsert 和查询投影介绍”博客文章][blog_post_upsert]中更加详细地了解投影。 存储模拟器不支持投影，因此，此代码仅在使用表服务中的帐户时才能运行。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Define the query, and select only the Email property.\r TableQuery<DynamicTableEntity> projectionQuery = new TableQuery<DynamicTableEntity>().Select(new string[] { \"Email\" });\r \r // Define an entity resolver to work with the entity after retrieval.\r EntityResolver<string> resolver = (pk, rk, ts, props, etag) => props.ContainsKey(\"Email\") ? props[\"Email\"].StringValue : null;\r \r foreach (string projectedEmail in table.ExecuteQuery(projectionQuery, resolver, null, null))\r {\r     Console.WriteLine(projectedEmail);\r }\r ```\r \r ## <a name=\"delete-an-entity\"></a>删除实体\r 在检索实体之后，可使用更新实体的相同演示模式轻松删除该实体。 以下代码检索并删除一个客户实体。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Create a retrieve operation that expects a customer entity.\r TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\r \r // Execute the operation.\r TableResult retrievedResult = table.Execute(retrieveOperation);\r \r // Assign the result to a CustomerEntity.\r CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;\r \r // Create the Delete TableOperation.\r if (deleteEntity != null)\r {\r     TableOperation deleteOperation = TableOperation.Delete(deleteEntity);\r \r     // Execute the operation.\r     table.Execute(deleteOperation);\r \r     Console.WriteLine(\"Entity deleted.\");\r }\r else\r {\r     Console.WriteLine(\"Could not retrieve the entity.\");\r }\r ```\r \r ## <a name=\"delete-a-table\"></a>删除表\r 最后，以下代码示例将从存储帐户中删除表。 在删除表之后的一段时间内无法重新创建它。\r \r ```csharp\r // Retrieve the storage account from the connection string.\r CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\r     CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\r \r // Create the table client.\r CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\r \r // Create the CloudTable that represents the \"people\" table.\r CloudTable table = tableClient.GetTableReference(\"people\");\r \r // Delete the table it if exists.\r table.DeleteIfExists();\r ```\r \r ## <a name=\"retrieve-entities-in-pages-asynchronously\"></a>以异步方式检索页中的实体\r 如果正在读取大量实体，并且想要在检索进行时处理/显示实体，而非等待返回全部实体，则可以通过使用分段查询检索实体。 此示例显示如何通过 Async-Await 模式以页面形式返回结果，这样就不会在等待返回大量结果时阻止操作的执行。 有关在 .NET 中使用 Async-Await 模式的详细信息，请参阅 [使用 Async 和 Await 进行异步编程（C# 和 Visual Basic）](https://msdn.microsoft.com/library/hh191443.aspx)。\r \r ```csharp\r // Initialize a default TableQuery to retrieve all the entities in the table.\r TableQuery<CustomerEntity> tableQuery = new TableQuery<CustomerEntity>();\r \r // Initialize the continuation token to null to start from the beginning of the table.\r TableContinuationToken continuationToken = null;\r \r do\r {\r     // Retrieve a segment (up to 1,000 entities).\r     TableQuerySegment<CustomerEntity> tableQueryResult =\r         await table.ExecuteQuerySegmentedAsync(tableQuery, continuationToken);\r \r     // Assign the new continuation token to tell the service where to\r     // continue on the next iteration (or null if it has reached the end).\r     continuationToken = tableQueryResult.ContinuationToken;\r \r     // Print the number of rows retrieved.\r     Console.WriteLine(\"Rows retrieved {0}\", tableQueryResult.Results.Count);\r \r // Loop until a null continuation token is received, indicating the end of the table.\r } while(continuationToken != null);\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 现在，已了解有关表存储的基础知识，请按照下面的链接了解更复杂的存储任务：\r \r * [Azure 存储资源管理器](../vs-azure-tools-storage-manage-with-storage-explorer.md)是我们免费提供的独立应用，适用于在 Windows、macOS 和 Linux 上以可视方式处理 Azure 存储数据。\r * 有关表存储的更多示例，请参阅[在 .NET 中使用 Azure 表存储入门](https://github.com/Azure-Samples/storage-table-dotnet-getting-started/)\r * 查看表服务参考文档，了解有关可用 API 的完整详情：\r * [.NET 存储客户端库参考](http://go.microsoft.com/fwlink/?LinkID=390731&clcid=0x409)\r * [REST API 参考](http://msdn.microsoft.com/library/azure/dd179355)\r * 了解如何使用 [Azure WebJobs SDK](https://github.com/Azure/azure-webjobs-sdk/wiki)\r * 查看更多功能指南，以了解在 Azure 中存储数据的其他方式。\r * [通过 .NET 开始使用 Azure Blob 存储](../storage/blobs/storage-dotnet-how-to-use-blobs.md) 来存储非结构化数据。\r * [使用.NET (C#) 连接到 SQL 数据库](../sql-database/sql-database-develop-dotnet-simple.md)，存储关系数据。\r \r [Download and install the Azure SDK for .NET]: /develop/net/\r [Creating an Azure Project in Visual Studio]: http://msdn.microsoft.com/library/azure/ee405487.aspx\r \r [blog_post_upsert]: http://blogs.msdn.com/b/windowsazurestorage/archive/2011/09/15/windows-azure-tables-introducing-upsert-and-query-projection.aspx\r \r [dotnet_api_ref]: https://msdn.microsoft.com/library/azure/mt347887.aspx\r [dotnet_CloudTableClient]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.cloudtableclient.aspx\r [dotnet_CloudTable]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.cloudtable.aspx\r [dotnet_CloudTable_Execute]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.cloudtable.execute.aspx\r [dotnet_CloudTable_ExecuteBatch]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.cloudtable.executebatch.aspx\r [dotnet_DynamicTableEntity]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.dynamictableentity.aspx\r [dotnet_EntityResolver]: https://msdn.microsoft.com/library/jj733144.aspx\r [dotnet_TableBatchOperation]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tablebatchoperation.aspx\r [dotnet_TableBatchOperation_Insert]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tablebatchoperation.insert.aspx\r [dotnet_TableEntity]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tableentity.aspx\r [dotnet_TableOperation]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tableoperation.aspx\r [dotnet_TableOperation_Insert]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tableoperation.insert.aspx\r [dotnet_TableOperation_InsertOrReplace]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tableoperation.insertorreplace.aspx\r [dotnet_TableOperation_Replace]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tableoperation.replace.aspx\r [dotnet_TableQuery]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tablequery.aspx\r [dotnet_TableResult]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tableresult.aspx\r [dotnet_TableResult_Result]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.table.tableresult.result.aspx\r \r <!-- Update_Description: update meta properties -->"}