{"Title":"在 Linux 上创建 Azure Service Fabric Reliable Actors Java 应用程序","Description":"了解如何在五分钟内创建并部署一个 Java Service Fabric Reliable Actors 应用程序。","Content":"# <a name=\"create-your-first-java-service-fabric-reliable-actors-application-on-linux\"></a>在 Linux 上创建第一个 Java Service Fabric Reliable Actors 应用程序\r > [!div class=\"op_single_selector\"]\r > * [C# - Windows](service-fabric-create-your-first-application-in-visual-studio.md)\r > * [Java-Linux](service-fabric-create-your-first-linux-application-with-java.md)\r > * [C# - Linux](service-fabric-create-your-first-linux-application-with-csharp.md)\r >\r >\r \r 借助本快速入门，只需几分钟即可在 Linux 开发环境中创建第一个 Azure Service Fabric Java 应用程序。  完成后，即拥有一个在本地开发群集上运行的简单 Java 单一服务应用程序。  \r \r ## <a name=\"prerequisites\"></a>先决条件\r 开始之前，请安装 Service Fabric SDK、Service Fabric CLI，并在 [Linux 开发环境](service-fabric-get-started-linux.md)中设置开发群集。 如果使用 Mac OS X，则可[使用 Vagrant 在虚拟机中设置 Linux 开发环境](service-fabric-get-started-mac.md)。\r \r 另请安装 [Service Fabric CLI](service-fabric-cli.md)。\r \r ### <a name=\"install-and-set-up-the-generators-for-java\"></a>为 Java 安装和设置生成器\r Service Fabric 提供基架工具，可以借助此类工具，使用 Yeoman 模板生成器从终端创建 Service Fabric Java 应用程序。 请执行以下步骤，确保已经有可以在计算机上运行的适用于 Java 的 Service Fabric yeoman 模板生成器。\r 1. 在计算机上安装 nodejs 和 NPM\r \r   ```bash\r   sudo apt-get install npm\r   sudo apt install nodejs-legacy\r   ```\r 2. 通过 NPM 在计算机上安装 [Yeoman](http://yeoman.io/) 模板生成器\r \r   ```bash\r   sudo npm install -g yo\r   ```\r 3. 通过 NPM 安装 Service Fabric Yeoman Java 应用程序生成器\r \r   ```bash\r   sudo npm install -g generator-azuresfjava\r   ```\r \r ## <a name=\"basic-concepts\"></a>基本概念\r 若要开始使用 Reliable Actors，只需了解几个基本概念：\r \r * **执行组件服务**。 可以在 Service Fabric 基础结构中部署的 Reliable Services 中打包 Reliable Actors。 执行组件实例在命名的服务实例中激活。\r * **执行组件注册**。 与 Reliable Services 一样，Reliable Actor 服务也需要注册到 Service Fabric 运行时。 此外，需要将执行组件类型注册到执行组件运行时。\r * **执行组件接口**。 执行组件接口用于定义执行组件的强类型公共接口。 在 Reliable Actor 模型术语中，执行组件接口用于定义执行组件可以理解并处理的消息类型。 其他执行组件或客户端应用程序使用此执行组件接口将消息“发送”（异步方式）到此执行组件。 Reliable Actors 可实现多个接口。\r * **ActorProxy 类**。 客户端应用程序使用 ActorProxy 类调用通过执行组件接口公开的方法。 ActorProxy 类提供两个重要功能：\r \r   * 名称解析：能够在群集中找到执行组件（查找托管它的群集节点）。\r   * 故障处理：例如，在需要将执行组件重新定位到群集中另一个节点的故障之后，它可以重试方法调用和重新解析执行组件位置。\r \r 有必要提一下与执行组件接口有关的以下规则：\r \r * 不能重载执行组件接口方法。\r * 执行组件接口方法不能有输出参数、引用参数或可选参数。\r * 不支持泛型接口。\r \r ## <a name=\"create-the-application\"></a>创建应用程序\r Service Fabric 应用程序包含一个或多个服务，每个服务都在提供应用程序功能时具有特定角色。 有了在上一部分安装的生成器，就可以轻松地创建第一个服务，并在以后添加更多服务。  此外，还可使用适用于 Eclipse 的插件创建、生成和部署 Service Fabric Java 应用程序。 请参阅[使用 Eclipse 创建和部署第一个 Java 应用程序](service-fabric-get-started-eclipse.md)。 对于本快速入门，使用 Yeoman 创建具有单项服务的应用程序，该服务用于存储和获取获取计数器值。\r \r 1. 在终端中，键入 ``yo azuresfjava``。\r 2. 为应用程序命名。\r 3. 选择第一个服务的类型并为其命名。 对于本教程，请选择“Reliable Actor 服务”。 有关其他服务类型的详细信息，请参阅 [Service Fabric 编程模型概述](service-fabric-choose-framework.md)。\r    ![适用于 Java 的 Service Fabric Yeoman 生成器][sf-yeoman]\r \r 如果将应用程序命名为“HelloWorldActorApplication”，将执行组件命名为“HelloWorldActor”，则会创建以下基架：\r \r ```bash\r HelloWorldActorApplication/\r ├── build.gradle\r ├── HelloWorldActor\r │   ├── build.gradle\r │   ├── settings.gradle\r │   └── src\r │       └── reliableactor\r │           ├── HelloWorldActorHost.java\r │           └── HelloWorldActorImpl.java\r ├── HelloWorldActorApplication\r │   ├── ApplicationManifest.xml\r │   └── HelloWorldActorPkg\r │       ├── Code\r │       │   ├── entryPoint.sh\r │       │   └── _readme.txt\r │       ├── Config\r │       │   ├── _readme.txt\r │       │   └── Settings.xml\r │       ├── Data\r │       │   └── _readme.txt\r │       └── ServiceManifest.xml\r ├── HelloWorldActorInterface\r │   ├── build.gradle\r │   └── src\r │       └── reliableactor\r │           └── HelloWorldActor.java\r ├── HelloWorldActorTestClient\r │   ├── build.gradle\r │   ├── settings.gradle\r │   ├── src\r │   │   └── reliableactor\r │   │       └── test\r │   │           └── HelloWorldActorTestClient.java\r │   └── testclient.sh\r ├── install.sh\r ├── settings.gradle\r └── uninstall.sh\r ```\r ## <a name=\"reliable-actors-basic-building-blocks\"></a>Reliable Actors 基本构建基块\r 前面所述的基本概念可以转化为 Reliable Actor 服务的基本构建块。\r \r ### <a name=\"actor-interface\"></a>执行组件接口\r 包含执行组件的接口定义。 此接口定义执行组件实现和调用执行组件的客户端所共享的执行组件协定，因此合理的做法是在独立于执行组件实现的某个位置定义接口，并且其他多个服务或客户端应用程序可以共享接口。\r \r `HelloWorldActorInterface/src/reliableactor/HelloWorldActor.java`：\r \r ```java\r public interface HelloWorldActor extends Actor {\r     @Readonly   \r     CompletableFuture<Integer> getCountAsync();\r \r     CompletableFuture<?> setCountAsync(int count);\r }\r ```\r \r ### <a name=\"actor-service\"></a>执行组件服务\r 包含执行组件实现和执行组件注册代码。 执行组件类实现执行组件接口。 这是执行组件的工作位置。\r \r `HelloWorldActor/src/reliableactor/HelloWorldActorImpl`：\r \r ```java\r @ActorServiceAttribute(name = \"HelloWorldActor.HelloWorldActorService\")\r @StatePersistenceAttribute(statePersistence = StatePersistence.Persisted)\r public class HelloWorldActorImpl extends ReliableActor implements HelloWorldActor {\r     Logger logger = Logger.getLogger(this.getClass().getName());\r \r     protected CompletableFuture<?> onActivateAsync() {\r         logger.log(Level.INFO, \"onActivateAsync\");\r \r         return this.stateManager().tryAddStateAsync(\"count\", 0);\r     }\r \r     @Override\r     public CompletableFuture<Integer> getCountAsync() {\r         logger.log(Level.INFO, \"Getting current count value\");\r         return this.stateManager().getStateAsync(\"count\");\r     }\r \r     @Override\r     public CompletableFuture<?> setCountAsync(int count) {\r         logger.log(Level.INFO, \"Setting current count value {0}\", count);\r         return this.stateManager().addOrUpdateStateAsync(\"count\", count, (key, value) -> count > value ? count : value);\r     }\r }\r ```\r \r ### <a name=\"actor-registration\"></a>执行组件注册\r 执行组件服务必须使用 Service Fabric 运行时中的服务类型注册。 为了使执行组件服务能够运行执行组件实例，还必须向执行组件服务注册执行组件类型。 `ActorRuntime` 注册方法为执行组件执行此操作。\r \r `HelloWorldActor/src/reliableactor/HelloWorldActorHost`：\r \r ```java\r public class HelloWorldActorHost {\r \r     public static void main(String[] args) throws Exception {\r \r         try {\r             ActorRuntime.registerActorAsync(HelloWorldActorImpl.class, (context, actorType) -> new ActorServiceImpl(context, actorType, ()-> new HelloWorldActorImpl()), Duration.ofSeconds(10));\r \r             Thread.sleep(Long.MAX_VALUE);\r \r         } catch (Exception e) {\r             e.printStackTrace();\r             throw e;\r         }\r     }\r }\r ```\r \r ## <a name=\"build-the-application\"></a>构建应用程序\r Service Fabric Yeoman 模板包含 [Gradle](https://gradle.org/) 的生成脚本，可用于从终端生成应用程序。\r Service Fabric Java 依赖项从 Maven 提取。 若要生成和使用 Service Fabric Java 应用程序，需确保已安装 JDK 和 Gradle。 如果尚未安装，可运行以下命令来安装 JDK (openjdk-8-jdk) 和 Gradle：\r \r   ```bash\r   sudo apt-get install openjdk-8-jdk-headless\r   sudo apt-get install gradle\r   ```\r \r 若要生成并打包应用程序，请运行以下命令：\r \r   ```bash\r   cd myapp\r   gradle\r   ```\r \r ## <a name=\"deploy-the-application\"></a>部署应用程序\r 生成应用程序后，可以将其部署到本地群集。\r \r 1. 连接到本地 Service Fabric 群集。\r \r     ```bash\r     sfctl cluster select --endpoint http://localhost:19080\r     ```\r \r 2. 运行模板中提供的安装脚本可将应用程序包复制到群集的映像存储区、注册应用程序类型和创建应用程序实例。\r \r     ```bash\r     ./install.sh\r     ```\r \r 部署生成的应用程序时，其方式与部署任何其他 Service Fabric 应用程序相同。 如需详细的说明，请参阅相关文档，了解如何[使用 Service Fabric CLI 管理 Service Fabric 应用程序](service-fabric-application-lifecycle-sfctl.md)。\r \r 这些命令的参数可以在应用程序包内的生成清单中找到。\r \r 应用程序部署完以后，请打开浏览器并导航到 [Service Fabric Explorer](service-fabric-visualizing-your-cluster.md)，其地址为 [http://localhost:19080/Explorer](http://localhost:19080/Explorer)。\r 然后，展开“应用程序”节点，注意现在有一个条目是用于应用程序类型，另一个条目用于该类型的第一个实例。\r \r ## <a name=\"start-the-test-client-and-perform-a-failover\"></a>启动测试客户端并执行故障转移\r 执行组件本身不执行任何操作，它们需要其他服务或客户端向其发送消息。 执行组件模板包含简单的测试脚本，可用于与执行组件服务交互。\r \r 1. 使用监视实用工具运行脚本，查看执行组件服务的输出。  测试脚本对角色调用 `setCountAsync()` 方法来递增计数器，对角色调用 `getCountAsync()` 方法来获取新的计数器值，并向控制台显示该值。\r \r     ```bash\r     cd myactorsvcTestClient\r     watch -n 1 ./testclient.sh\r     ```\r \r 2. 在 Service Fabric Explorer 中，找到托管角色服务的主要副本的节点。 在以下屏幕截图中，该节点是节点 3。 主要服务副本处理读写操作。  然后将服务状态更改向外复制到次要副本，该副本在下方屏幕截图的节点 0 和 1 上运行。\r \r     ![在 Service Fabric Explorer 中查找主副本][sfx-primary]\r \r 3. 在“节点”中，单击上一步找到的节点，然后从“操作”菜单中选择“停用(重启)”。 此操作重启运行主要服务副本的节点，并强制故障转移到在其他节点上运行的其中一个次要副本。  该次要副本将提升为主要副本，并在其他节点上创建另一次要副本，然后主要副本开始执行读/写操作。 节点重启时，请注意来自测试客户端的输出，并注意虽然发生故障转移，但计数器仍继续递增。\r \r ## <a name=\"remove-the-application\"></a>删除应用程序\r 使用模板中提供的卸载脚本可从群集的映像存储区删除应用程序实例、注销应用程序包并删除应用程序包。\r \r ```bash\r ./uninstall.sh\r ```\r \r 在 Service Fabric Explorer 中，可看到应用程序和应用程序类型不再显示在“应用程序”节点中。\r \r ## <a name=\"service-fabric-java-libraries-on-maven\"></a>Maven 上的 Service Fabric Java 库\r Service Fabric Java 库已托管在 Maven 中。 可以在项目的 ``pom.xml`` 或 ``build.gradle`` 中添加依赖项，以便使用 mavenCentral 提供的 Service Fabric Java 库。 \r \r ### <a name=\"actors\"></a>执行组件\r \r 针对应用程序的 Service Fabric Reliable Actor 支持。\r \r   ```XML\r   <dependency>\r       <groupId>com.microsoft.servicefabric</groupId>\r       <artifactId>sf-actors-preview</artifactId>\r       <version>0.12.0</version>\r   </dependency>\r   ```\r \r   ```gradle\r   repositories {\r       mavenCentral()\r   }\r   dependencies {\r       compile 'com.microsoft.servicefabric:sf-actors-preview:0.12.0'\r   }\r   ```\r \r ### <a name=\"services\"></a>服务\r \r 针对应用程序的 Service Fabric Reliable Services 支持。\r \r   ```XML\r   <dependency>\r       <groupId>com.microsoft.servicefabric</groupId>\r       <artifactId>sf-services-preview</artifactId>\r       <version>0.12.0</version>\r   </dependency>\r   ```\r \r   ```gradle\r   repositories {\r       mavenCentral()\r   }\r   dependencies {\r       compile 'com.microsoft.servicefabric:sf-services-preview:0.12.0'\r   }\r   ```\r \r ### <a name=\"others\"></a>其他\r #### <a name=\"transport\"></a>传输\r \r 针对 Service Fabric Java 应用程序的传输层支持。 不需向 Reliable Actor 或 Service 应用程序显式添加此依赖项，除非在传输层编程。\r \r   ```XML\r   <dependency>\r       <groupId>com.microsoft.servicefabric</groupId>\r       <artifactId>sf-transport-preview</artifactId>\r       <version>0.12.0</version>\r   </dependency>\r   ```\r \r   ```gradle\r   repositories {\r       mavenCentral()\r   }\r   dependencies {\r       compile 'com.microsoft.servicefabric:sf-transport-preview:0.12.0'\r   }\r   ```\r \r #### <a name=\"fabric-support\"></a>Fabric 支持\r \r 针对 Service Fabric（与本机 Service Fabric 运行时通信）的系统级支持。 不需向 Reliable Actor 或 Service 应用程序显式添加此依赖项。 当你包括上述其他依赖项时，会自动从 Maven 提取此依赖项。\r \r   ```XML\r   <dependency>\r       <groupId>com.microsoft.servicefabric</groupId>\r       <artifactId>sf-preview</artifactId>\r       <version>0.12.0</version>\r   </dependency>\r   ```\r \r   ```gradle\r   repositories {\r       mavenCentral()\r   }\r   dependencies {\r       compile 'com.microsoft.servicefabric:sf-preview:0.12.0'\r   }\r   ```\r \r ## <a name=\"migrating-old-service-fabric-java-applications-to-be-used-with-maven\"></a>迁移要与 Maven 配合使用的旧式 Service Fabric Java 应用程序\r 我们最近已将 Service Fabric Java 库从 Service Fabric Java SDK 移至 Maven 存储库。 虽然使用 Yeoman 或 Eclipse 生成的新应用程序会生成最近更新的项目（会兼容 Maven），但你可以对现有的 Service Fabric 无状态或执行组件 Java 应用程序（此前使用 Service Fabric Java SDK）进行更新，使之能够使用 Maven 提供的 Service Fabric Java 依赖项。 请按[此处](service-fabric-migrate-old-javaapp-to-use-maven.md)提及的步骤操作，确保旧版应用程序兼容 Maven。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r * [使用 Eclipse 在 Linux 上创建第一个 Service Fabric Java 应用程序](service-fabric-get-started-eclipse.md)\r * [了解有关 Reliable Actors 的详细信息](service-fabric-reliable-actors-introduction.md)\r * [使用 Service Fabric CLI 与 Service Fabric 群集交互](service-fabric-cli.md)\r * 了解 [Service Fabric 支持选项](service-fabric-support.md)\r * [Service Fabric CLI 入门](service-fabric-cli.md)\r \r <!-- Images -->\r [sf-yeoman]: ./media/service-fabric-create-your-first-linux-application-with-java/sf-yeoman.png\r [sfx-primary]: ./media/service-fabric-create-your-first-linux-application-with-java/sfx-primary.png\r [sf-eclipse-templates]: ./media/service-fabric-create-your-first-linux-application-with-java/sf-eclipse-templates.png\r \r <!--Update_Description: update meta properties, add new version and feature on Service Fabric Java libraries on Maven ->"}