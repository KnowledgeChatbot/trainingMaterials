{"Title":"如何通过 PHP 使用队列存储","Description":"了解如何使用 Azure 队列存储服务创建和删除队列，以及插入、获取和删除消息。 示例用 PHP 编写。","Content":"# <a name=\"how-to-use-queue-storage-from-php\"></a>如何通过 PHP 使用队列存储\r [!INCLUDE [storage-selector-queue-include](../../../includes/storage-selector-queue-include.md)]\r \r [!INCLUDE [storage-try-azure-tools-queues](../../../includes/storage-try-azure-tools-queues.md)]\r \r ## <a name=\"overview\"></a>概述\r 本指南演示如何使用 Azure 队列存储服务执行常见方案。 这些示例是通过[适用于 PHP 的 Azure 存储客户端库][download]中的类编写的。 介绍的方案包括插入、扫视、获取和删除队列消息以及创建和删除队列。\r \r [!INCLUDE [storage-queue-concepts-include](../../../includes/storage-queue-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../../includes/storage-create-account-include.md)]\r \r ## <a name=\"create-a-php-application\"></a>创建 PHP 应用程序\r 创建用于访问 Azure 队列存储的 PHP 应用程序的唯一要求是从代码中引用[适用于 PHP 的 Azure 存储客户端库][download]中的类。 可使用任何开发工具（包括“记事本”）创建应用程序。\r \r 在本指南中，将使用队列存储服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。\r \r ## <a name=\"get-the-azure-client-libraries\"></a>获取 Azure 客户端库\r [!INCLUDE [get-client-libraries](../../../includes/get-client-libraries.md)]\r \r ## <a name=\"configure-your-application-to-access-queue-storage\"></a>配置应用程序以访问队列存储\r 若要使用 Azure 队列存储 API，需执行以下操作：\r \r 1. 使用 [require_once] 语句引用 autoloader 文件。\r 2. 引用可使用的所有类。\r \r 下面的示例演示了如何包括 autoloader 文件并引用 **ServicesBuilder** 类。\r \r ```php\r require_once 'vendor/autoload.php';\r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r \r ```\r \r 以下示例中，`require_once` 语句将始终显示，但只会引用执行该示例所需的类。\r \r ## <a name=\"set-up-an-azure-storage-connection\"></a>设置 Azure 存储连接\r \r 若要实例化 Azure 队列存储客户端，首先必须拥有有效的连接字符串。 队列服务连接字符串的格式如下。\r \r 若要访问实时服务：\r \r ```php\r DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey];EndpointSuffix=core.chinacloudapi.cn\r ```\r \r 若要访问模拟器存储：\r \r ```php\r UseDevelopmentStorage=true\r ```\r \r 若要创建任何 Azure 服务客户端，需要使用 **ServicesBuilder** 类。 可使用以下方法之一：\r \r * 将连接字符串直接传递给它。\r * 在 Web 应用中使用环境变量来存储连接字符串。 要配置连接字符串，请参阅 [Azure Web 应用配置设置](../../app-service/web-sites-configure.md)文档。\r 在此处列出的示例中，将直接传递连接字符串。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\r ```\r \r ## <a name=\"create-a-queue\"></a>创建队列\r \r QueueRestProxy 对象允许使用 createQueue 方法创建队列。 创建队列时，可以在该队列上设置选项，但此操作不是必需的。 （下面的示例演示了如何在队列上设置元数据。）\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r use MicrosoftAzure\\Storage\\Queue\\Models\\CreateQueueOptions;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Create queue REST proxy.\r $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\r \r // OPTIONAL: Set queue metadata.\r $createQueueOptions = new CreateQueueOptions();\r $createQueueOptions->addMetaData(\"key1\", \"value1\");\r $createQueueOptions->addMetaData(\"key2\", \"value2\");\r \r try    {\r     // Create queue.\r     $queueRestProxy->createQueue(\"myqueue\", $createQueueOptions);\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179446.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r > [!NOTE]\r > 不应依赖元数据密钥区分大小写的性质。 以小写形式从服务中读取所有密钥。\r \r ## <a name=\"add-a-message-to-a-queue\"></a>向队列添加消息\r \r 若要将消息添加到队列，请使用 QueueRestProxy->createMessage。 此方法接受队列名称、消息文本和消息选项（这些都是可选的）。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r use MicrosoftAzure\\Storage\\Queue\\Models\\CreateMessageOptions;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Create queue REST proxy.\r $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\r \r try    {\r     // Create message.\r     $builder = new ServicesBuilder();\r     $queueRestProxy->createMessage(\"myqueue\", \"Hello World!\");\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179446.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r ## <a name=\"peek-at-the-next-message\"></a>扫视下一条消息\r 通过调用 QueueRestProxy->peekMessages，可以扫视队列前面的消息，而不会从队列中将其删除。 默认情况下，peekMessage 方法返回单条消息，但可以使用 PeekMessagesOptions->setNumberOfMessages 方法更改该值。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r use MicrosoftAzure\\Storage\\Queue\\Models\\PeekMessagesOptions;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Create queue REST proxy.\r $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\r \r // OPTIONAL: Set peek message options.\r $message_options = new PeekMessagesOptions();\r $message_options->setNumberOfMessages(1); // Default value is 1.\r \r try    {\r     $peekMessagesResult = $queueRestProxy->peekMessages(\"myqueue\", $message_options);\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179446.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r \r $messages = $peekMessagesResult->getQueueMessages();\r \r // View messages.\r $messageCount = count($messages);\r if($messageCount <= 0){\r     echo \"There are no messages.<br />\";\r }\r else{\r     foreach($messages as $message)    {\r         echo \"Peeked message:<br />\";\r         echo \"Message Id: \".$message->getMessageId().\"<br />\";\r         echo \"Date: \".date_format($message->getInsertionDate(), 'Y-m-d').\"<br />\";\r         echo \"Message text: \".$message->getMessageText().\"<br /><br />\";\r     }\r }\r ```\r \r ## <a name=\"de-queue-the-next-message\"></a>取消对下一条消息的排队\r 代码分两步从队列中删除消息。 首先，调用 QueueRestProxy->listMessages，这将使消息对从队列中读取的任何其他代码不可见。 默认情况下，此消息持续 30 秒不可见。 （如果在此时段内未删除该消息，它会在队列上再次可见。）若要从队列中删除消息，必须调用 QueueRestProxy->deleteMessage。 此删除消息的两步过程可确保当代码因硬件或软件故障而无法处理消息时，其他代码实例可以获取同一消息并重试。 代码处理消息后会立即调用 **deleteMessage** 。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Create queue REST proxy.\r $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\r \r // Get message.\r $listMessagesResult = $queueRestProxy->listMessages(\"myqueue\");\r $messages = $listMessagesResult->getQueueMessages();\r $message = $messages[0];\r \r /* ---------------------\r     Process message.\r    --------------------- */\r \r // Get message ID and pop receipt.\r $messageId = $message->getMessageId();\r $popReceipt = $message->getPopReceipt();\r \r try    {\r     // Delete message.\r     $queueRestProxy->deleteMessage(\"myqueue\", $messageId, $popReceipt);\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179446.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r ## <a name=\"change-the-contents-of-a-queued-message\"></a>更改已排队消息的内容\r 可以调用 QueueRestProxy->updateMessage 来更改队列中已就位消息的内容。 如果消息表示工作任务，可使用此功能来更新该工作任务的状态。 以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。 这会保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。 可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。 通常也会保留重试计数，当消息重试次数超过 n 时再删除该消息。 这可避免每次处理某条消息时都触发应用程序错误。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r // Create queue REST proxy.\r $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Get message.\r $listMessagesResult = $queueRestProxy->listMessages(\"myqueue\");\r $messages = $listMessagesResult->getQueueMessages();\r $message = $messages[0];\r \r // Define new message properties.\r $new_message_text = \"New message text.\";\r $new_visibility_timeout = 5; // Measured in seconds.\r \r // Get message ID and pop receipt.\r $messageId = $message->getMessageId();\r $popReceipt = $message->getPopReceipt();\r \r try    {\r     // Update message.\r     $queueRestProxy->updateMessage(\"myqueue\",\r                                 $messageId,\r                                 $popReceipt,\r                                 $new_message_text,\r                                 $new_visibility_timeout);\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179446.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r ## <a name=\"additional-options-for-de-queuing-messages\"></a>用于从队列中删除消息的其他选项\r 可通过两种方式自定义队列中的消息检索。 首先，可获取一批消息（最多 32 条）。 其次，可设置更长或更短的可见超时时间，允许代码使用更长或更短的时间来彻底处理每条消息。 以下代码示例使用 **getMessages** 方法在一次调用中获取 16 条消息。 然后，它会使用 **for** 循环处理每条消息。 它还将每条消息的不可见超时时间设置为 5 分钟。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r use MicrosoftAzure\\Storage\\Queue\\Models\\ListMessagesOptions;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Create queue REST proxy.\r $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\r \r // Set list message options.\r $message_options = new ListMessagesOptions();\r $message_options->setVisibilityTimeoutInSeconds(300);\r $message_options->setNumberOfMessages(16);\r \r // Get messages.\r try{\r     $listMessagesResult = $queueRestProxy->listMessages(\"myqueue\",\r                                                      $message_options);\r     $messages = $listMessagesResult->getQueueMessages();\r \r     foreach($messages as $message){\r \r         /* ---------------------\r             Process message.\r         --------------------- */\r \r         // Get message Id and pop receipt.\r         $messageId = $message->getMessageId();\r         $popReceipt = $message->getPopReceipt();\r \r         // Delete message.\r         $queueRestProxy->deleteMessage(\"myqueue\", $messageId, $popReceipt);\r     }\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179446.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r ## <a name=\"get-queue-length\"></a>获取队列长度\r \r 可以获取队列中消息的估计数。 QueueRestProxy->getQueueMetadata 方法要求队列服务返回有关队列的元数据。 对返回的对象调用 **getApproximateMessageCount** 方法将提供队列中消息的计数。 此计数仅为近似值，因为只能在队列服务响应的请求后添加或删除消息。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Create queue REST proxy.\r $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\r \r try    {\r     // Get queue metadata.\r     $queue_metadata = $queueRestProxy->getQueueMetadata(\"myqueue\");\r     $approx_msg_count = $queue_metadata->getApproximateMessageCount();\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179446.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r \r echo $approx_msg_count;\r ```\r \r ## <a name=\"delete-a-queue\"></a>删除队列\r \r 若要删除队列及其包含的所有消息，请调用 QueueRestProxy->deleteQueue 方法。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Create queue REST proxy.\r $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\r \r try    {\r     // Delete queue.\r     $queueRestProxy->deleteQueue(\"myqueue\");\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179446.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 既已了解有关 Azure 队列存储的基础知识，可单击以下链接了解更复杂的存储任务。\r \r * 请访问 [Azure 存储 PHP 客户端库的 API 参考](http://azure.github.io/azure-storage-php/)\r * 请参阅[高级队列示例](https://github.com/Azure/azure-storage-php/blob/master/samples/QueueSamples.php)。\r \r 有关详细信息，另请参阅 [PHP 开发人员中心](/develop/php/)。\r \r [download]: https://github.com/Azure/azure-storage-php\r [require_once]: http://www.php.net/manual/en/function.require-once.php\r [Azure Portal]: https://portal.azure.cn\r \r <!--Update_Description:update code namespace from \"WindowsAzure\" to \"MicrosoftAzure\"-->"}