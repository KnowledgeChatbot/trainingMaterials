{"Title":"如何通过 Xamarin 使用 Blob 存储","Description":"通过用于 Xamarin 的 Azure 存储客户端库，开发人员可以使用其本机用户界面创建 iOS、Android 和 Windows 应用商店应用。 本教程演示了如何通过 Xamarin 来创建使用 Azure Blob 存储的应用程序。","Content":"# <a name=\"how-to-use-blob-storage-from-xamarin\"></a>如何通过 Xamarin 使用 Blob 存储\r [!INCLUDE [storage-selector-blob-include](../../../includes/storage-selector-blob-include.md)]\r \r ## <a name=\"overview\"></a>概述\r Xamarin 使开发人员能够通过共享的 C# 代码库来使用其本机用户界面创建 iOS、Android 和 Windows 应用商店应用。 本教程演示了如何将 Azure Blob 存储用于 Xamarin 应用程序。 如果要先详细了解 Azure 存储再深入分析代码，请参阅 [Azure 存储简介](../common/storage-introduction.md?toc=%2fstorage%2fblobs%2ftoc.json)。\r \r [!INCLUDE [storage-create-account-include](../../../includes/storage-create-account-include.md)]\r \r [!INCLUDE [storage-mobile-authentication-guidance](../../../includes/storage-mobile-authentication-guidance.md)]\r \r ## <a name=\"create-a-new-xamarin-application\"></a>创建新的 Xamarin 应用程序\r 本教程创建面向 Android、iOS 和 Windows 的应用。 此应用将仅创建一个容器，并将 Blob 上传到此容器中。 我们会使用 Windows 上的 Visual Studio，这些知识同样适用于通过 macOS 上的 Xamarin Studio 创建应用的情况。\r \r 请按以下步骤创建应用程序：\r \r 1. 下载并安装 [Xamarin for Visual Studio](https://www.xamarin.com/download)（如果尚未这样做）。\r 2. 打开 Visual Studio，创建空白应用（本机可移植）：“文件”>“新建”>“项目”>“跨平台”>“空白应用(本机可移植)”。\r 3. 右键单击“解决方案资源管理器”窗格中的解决方案，并选择“为解决方案管理 NuGet 包”。 搜索 **WindowsAzure.Storage**，并将最新稳定版本安装到解决方案中的所有项目。\r 4. 生成并运行项目。\r \r 现在，应该有了这样一个应用程序：单击某个按钮即可让计数器递增。\r \r ## <a name=\"create-container-and-upload-blob\"></a>创建容器并上传 Blob\r 接下来，需要在 `(Portable)` 项目中，向 `MyClass.cs` 添加一些代码。 此代码创建一个容器并在其中上传 Blob。 `MyClass.cs` 应如下所示：\r \r ```csharp\r using Microsoft.WindowsAzure.Storage;\r using Microsoft.WindowsAzure.Storage.Blob;\r using System.Threading.Tasks;\r \r namespace XamarinApp\r {\r     public class MyClass\r     {\r         public MyClass ()\r         {\r         }\r \r         public static async Task performBlobOperation()\r         {\r             // Retrieve storage account from connection string.\r             CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\"DefaultEndpointsProtocol=https;AccountName=your_account_name_here;AccountKey=your_account_key_here\");\r \r             // Create the blob client.\r             CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\r \r             // Retrieve reference to a previously created container.\r             CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\r \r             // Create the container if it doesn't already exist.\r             await container.CreateIfNotExistsAsync();\r \r             // Retrieve reference to a blob named \"myblob\".\r             CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob\");\r \r             // Create the \"myblob\" blob with the text \"Hello, world!\"\r             await blockBlob.UploadTextAsync(\"Hello, world!\");\r         }\r     }\r }\r ```\r \r 请确保将“your_account_name_here”和“your_account_key_here”替换为实际帐户名和帐户密钥。 \r \r 用户的 iOS、Android 和 Windows Phone 项目全都引用可移植项目 - 这意味着，用户在一个位置编写所有共享代码即可跨所有项目使用。 现在可以向每个项目添加以下代码行，进行充分利用： `MyClass.performBlobOperation()`\r \r ### <a name=\"xamarinappdroid--mainactivitycs\"></a>XamarinApp.Droid > MainActivity.cs\r \r ```csharp\r using Android.App;\r using Android.Widget;\r using Android.OS;\r \r namespace XamarinApp.Droid\r {\r     [Activity (Label = \"XamarinApp.Droid\", MainLauncher = true, Icon = \"@drawable/icon\")]\r     public class MainActivity : Activity\r     {\r         int count = 1;\r \r         protected override async void OnCreate (Bundle bundle)\r         {\r             base.OnCreate (bundle);\r \r             // Set our view from the \"main\" layout resource\r             SetContentView (Resource.Layout.Main);\r \r             // Get our button from the layout resource,\r             // and attach an event to it\r             Button button = FindViewById<Button> (Resource.Id.myButton);\r \r             button.Click += delegate {\r                 button.Text = string.Format (\"{0} clicks!\", count++);\r             };\r \r             await MyClass.performBlobOperation();\r             }\r         }\r     }\r }\r ```\r \r ### <a name=\"xamarinappios--viewcontrollercs\"></a>XamarinApp.iOS > ViewController.cs\r \r ```csharp\r using System;\r using UIKit;\r \r namespace XamarinApp.iOS\r {\r     public partial class ViewController : UIViewController\r     {\r         int count = 1;\r \r         public ViewController (IntPtr handle) : base (handle)\r         {\r         }\r \r         public override async void ViewDidLoad ()\r         {\r             int count = 1;\r \r             public ViewController (IntPtr handle) : base (handle)\r             {\r             }\r \r             public override async void ViewDidLoad ()\r             {\r                 base.ViewDidLoad ();\r                 // Perform any additional setup after loading the view, typically from a nib.\r                 Button.AccessibilityIdentifier = \"myButton\";\r                 Button.TouchUpInside += delegate {\r                     var title = string.Format (\"{0} clicks!\", count++);\r                     Button.SetTitle (title, UIControlState.Normal);\r                 };\r \r                 await MyClass.performBlobOperation();\r             }\r \r             public override void DidReceiveMemoryWarning ()\r             {\r                 base.DidReceiveMemoryWarning ();\r                 // Release any cached data, images, etc that aren't in use.\r             }\r         }\r     }\r }\r ```\r \r ### <a name=\"xamarinappwinphone--mainpagexaml--mainpagexamlcs\"></a>XamarinApp.WinPhone > MainPage.xaml > MainPage.xaml.cs\r \r ```csharp\r using Windows.UI.Xaml.Controls;\r using Windows.UI.Xaml.Navigation;\r \r // The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=391641\r \r namespace XamarinApp.WinPhone\r {\r     /// <summary>\r     /// An empty page that can be used on its own or navigated to within a Frame.\r     /// </summary>\r     public sealed partial class MainPage : Page\r     {\r         int count = 1;\r \r         public MainPage()\r         {\r             this.InitializeComponent();\r \r             this.NavigationCacheMode = NavigationCacheMode.Required;\r         }\r \r         /// <summary>\r         /// Invoked when this page is about to be displayed in a Frame.\r         /// </summary>\r         /// <param name=\"e\">Event data that describes how this page was reached.\r         /// This parameter is typically used to configure the page.</param>\r         protected override async void OnNavigatedTo(NavigationEventArgs e)\r         {\r             int count = 1;\r \r             public MainPage()\r             {\r                 this.InitializeComponent();\r \r                 this.NavigationCacheMode = NavigationCacheMode.Required;\r             }\r \r             /// <summary>\r             /// Invoked when this page is about to be displayed in a Frame.\r             /// </summary>\r             /// <param name=\"e\">Event data that describes how this page was reached.\r             /// This parameter is typically used to configure the page.</param>\r             protected override async void OnNavigatedTo(NavigationEventArgs e)\r             {\r                 // TODO: Prepare page for display here.\r \r                 // TODO: If your application contains multiple pages, ensure that you are\r                 // handling the hardware Back button by registering for the\r                 // Windows.Phone.UI.Input.HardwareButtons.BackPressed event.\r                 // If you are using the NavigationHelper provided by some templates,\r                 // this event is handled for you.\r                 Button.Click += delegate {\r                     var title = string.Format(\"{0} clicks!\", count++);\r                     Button.Content = title;\r                 };\r \r                 await MyClass.performBlobOperation();\r             }\r         }\r     }\r }\r ```\r \r ## <a name=\"run-the-application\"></a>运行应用程序\r 现在可以在 Android 或 Windows Phone 仿真程序中运行此应用程序。 也可在 iOS 仿真程序中运行此应用程序，但需要使用 Mac。 有关如何执行此操作的具体说明，请阅读 [connecting Visual Studio to a Mac](https://developer.xamarin.com/guides/ios/getting_started/installation/windows/connecting-to-mac/)\r \r 运行应用后，会在存储帐户中创建容器 `mycontainer` 。 它应该包含 Blob `myblob`，Blob 中包含文本 `Hello, world!`。 可以使用 [Azure 存储资源管理器](http://storageexplorer.com/)对此进行验证。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 本教程介绍如何在 Xamarin 中创建使用 Azure 存储的跨平台应用程序，特别介绍了 Blob 存储中的一个方案。 但是，还可以进行更多操作，不光是使用 Blob 存储，还可以使用表、文件和队列存储。 请参阅以下文章以了解更多信息：\r \r * [通过 .NET 开始使用 Azure Blob 存储](storage-dotnet-how-to-use-blobs.md)\r * [Azure 文件简介](../files/storage-files-introduction.md)\r * [使用 .NET 针对 Azure 文件进行开发](../files/storage-dotnet-how-to-use-files.md)\r * [通过 .NET 开始使用 Azure 表存储](../../cosmos-db/table-storage-how-to-use-dotnet.md)\r * [通过 .NET 开始使用 Azure 队列存储](../queues/storage-dotnet-how-to-use-queues.md)\r \r [!INCLUDE [storage-try-azure-tools-blobs](../../../includes/storage-try-azure-tools-blobs.md)]\r \r <!--Update_Description: add link references to File storage-->\r "}