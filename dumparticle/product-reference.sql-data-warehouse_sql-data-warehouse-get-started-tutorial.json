{"Title":"Azure SQL 数据仓库 - 入门教程","Description":"本教程介绍如何向 Azure SQL 数据仓库预配和加载数据。 还可以了解有关缩放、暂停和优化的基础知识。","Content":"# <a name=\"get-started-with-sql-data-warehouse\"></a>SQL 数据仓库入门\r \r 本教程介绍如何向 Azure SQL 数据仓库预配和加载数据。 还可以了解有关缩放、暂停和优化的基础知识。 完成后，便可以查询和浏览数据仓库。\r \r **估计完成时间：** 这是一个包含示例代码的端到端教程，若满足先决条件，大约需要 30 分钟即可完成。 \r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 本教程假定用户熟悉 SQL 数据仓库的基本概念。 如果需要简介，请参阅[什么是 SQL 数据仓库？](sql-data-warehouse-overview-what-is.md) \r \r ### <a name=\"sign-up-for-azure\"></a>注册 Azure\r 如果还没有 Microsoft Azure 帐户，必须注册一个帐户才能使用此服务。 如果已有帐户，则可跳过此步骤。 \r \r 1. 导航到帐户页 [https://www.azure.cn/pricing/1rmb-trial/](https://www.azure.cn/pricing/1rmb-trial/)\r 2. 创建试用 Azure 帐户，或购买一个帐户。\r 3. 遵照说明操作\r \r ### <a name=\"install-appropriate-sql-client-drivers-and-tools\"></a>安装相应的 SQL 客户端驱动程序和工具\r \r 大多数 SQL 客户端工具可以使用 JDBC、ODBC 或 ADO.NET 连接到 SQL 数据仓库。 由于 SQL 数据仓库支持大量的 T-SQL 功能，某些客户端应用程序与 SQL 数据仓库不完全兼容。\r \r 如果运行的是 Windows 操作系统，我们建议使用 [Visual Studio] 或 [SQL Server Management Studio]。\r \r [!INCLUDE [Create a new logical server](../../includes/sql-data-warehouse-create-logical-server.md)] \r \r [!INCLUDE [SQL Database create server](../../includes/sql-database-create-new-server-firewall-portal.md)]\r \r ## <a name=\"create-a-sql-data-warehouse\"></a>创建 SQL 数据仓库\r \r SQL 数据仓库是专为大规模并行处理而设计的特殊类型的数据库。 该数据库分布在多个节点中，且并行处理查询。 SQL 数据仓库具有控制节点，用于协调所有节点的活动。 节点本身使用 SQL 数据库来管理数据。  \r \r > [!NOTE]\r > 创建 SQL 数据仓库可能会导致新的计费服务。  有关详细信息，请参阅 [SQL 数据仓库定价](https://www.azure.cn/pricing/details/sql-data-warehouse/)。\r >\r \r ### <a name=\"create-a-data-warehouse\"></a>创建数据仓库\r \r 1. 登录到 [Azure 门户](https://portal.azure.cn)。\r 2. 单击“新建” > “数据库” > “SQL 数据仓库”。\r \r     ![NewBlade](../../includes/media/sql-data-warehouse-create-dw/blade-click-new.png) ![SelectDW](../../includes/media/sql-data-warehouse-create-dw/blade-select-dw.png)\r \r 3. 填写部署详细信息\r \r     **数据库名称**：填写所需的任何名称。 如果有多个数据仓库，我们建议在该名称中包含区域、环境等详细信息，例如 *mydw-chinanorth-1-test*。\r \r     **订阅**：Azure 订阅\r \r     **资源组**：创建资源组或使用现有的资源组。\r     > [!NOTE]\r     > 资源组可用于资源管理，例如，指定访问控制和模板化部署的范围。 在[此处](/azure-resource-manager/resource-group-overview#resource-groups)阅读有关 Azure 资源组和最佳做法的详细信息\r \r     **源**：空白数据库\r \r     **服务器**：选择在 [先决条件]部分中创建的服务器。\r \r     **排序规则**：保留默认的排序规则 SQL_Latin1_General_CP1_CI_AS。\r \r     **选择性能**：建议从标准 400DWU 开始。\r \r 4. 选择“固定到仪表板” ![固定到仪表板](./media/sql-data-warehouse-get-started-tutorial/pin-to-dashboard.png)\r \r 5. 请休息一下，等待完成数据仓库的部署！ 在正常情况下，完成此过程需要几分钟时间。 门户会在数据仓库可供使用时发出通知。 \r \r ## <a name=\"connect-to-sql-data-warehouse\"></a>连接到 SQL 数据仓库\r \r 本教程使用 SQL Server Management Studio (SSMS) 连接到数据仓库。 可以通过以下受支持的连接器连接到 SQL 数据仓库：ADO.NET、JDBC、ODBC 和 PHP。 请记住，如果使用 Microsoft 不支持的工具，功能可能会受到限制。\r \r ### <a name=\"get-connection-information\"></a>获取连接信息\r \r 若要连接到数据仓库，必须通过在 [先决条件]部分中创建的逻辑 SQL Server 进行连接。\r \r 1. 从仪表板中选择数据仓库，或者在资源中搜索。\r \r     ![SQL 数据仓库仪表板](./media/sql-data-warehouse-get-started-tutorial/sql-dw-dashboard.png)\r \r 2. 查找逻辑 SQL Server 的完整名称。\r \r     ![选择服务器名称](./media/sql-data-warehouse-get-started-tutorial/select-server.png)\r \r 3. 打开 SSMS，使用对象资源管理器通过在 [先决条件]\r \r     ![使用 SSMS 进行连接](./media/sql-data-warehouse-get-started-tutorial/ssms-connect.png)\r \r 如果一切正常，现在应会已连接到逻辑 SQL Server。 由于以服务器管理员的身份进行登录，因此可以连接到由服务器托管的任何数据库，包括 master 数据库。 \r \r 只有一个服务器管理员帐户，它具有对任意用户的最大权限。 请注意，不要让组织中太多人员知道管理员密码。 \r \r 还可以拥有一个 Azure Active Directory 管理员帐户。 此处不提供详细介绍。 如果想要详细了解如何使用 Azure Active Directory 身份验证，请参阅 [Azure AD 身份验证](/sql-database/sql-database-aad-authentication)。\r \r 接下来，我们探讨如何创建其他登录名和用户。\r \r ## <a name=\"create-a-database-user\"></a>创建数据库用户\r \r 本步骤将创建一个用于访问数据仓库的用户帐户。 我们还会展示如何使该用户能够运行占用大量内存和 CPU 资源的查询。\r \r ### <a name=\"notes-about-resource-classes-for-allocating-resources-to-queries\"></a>有关用于向查询分配资源的资源类的说明\r \r - 为了保证数据安全，请勿使用服务器管理员帐户在生产数据库上运行查询。 该帐户拥有任何用户的大部分权限，使用它针对用户数据执行操作会使数据面临风险。 此外，由于服务器管理员旨在执行管理操作，因此它运行仅占用小部分内存和 CPU 资源的操作。 \r \r - SQL 数据仓库使用预定义的数据库角色（称为资源类）向用户分配不同量的内存、CPU 资源和并发槽。 每个用户可以属于小、中、大或特大资源类。 用户的资源类确定用户所拥有的用于运行查询和加载操作的资源。\r \r - 为了优化数据压缩，用户可能需要使用大量或特大量的资源分配来加载数据。 在[此处](./sql-data-warehouse-develop-concurrency.md#resource-classes)阅读有关资源类的详细信息：\r \r ### <a name=\"create-an-account-that-can-control-a-database\"></a>创建可以控制数据库的帐户\r \r 由于当前是以服务器管理员身份进行登录的，因此具有创建登录名和用户的权限。\r \r 1. 使用 SSMS 或另一个查询客户端，为 **master**打开一个新查询。\r \r     ![针对 Master 新建查询](./media/sql-data-warehouse-get-started-tutorial/query-on-server.png)\r \r     ![针对 Master1 新建查询](./media/sql-data-warehouse-get-started-tutorial/query-on-master.png)\r \r 2. 在查询窗口中，运行此 T-SQL 命令以创建名为 MedRCLogin 的登录名和名为 LoadingUser 的用户。 此登录名可连接到逻辑 SQL Server。\r \r     ```sql\r     CREATE LOGIN MedRCLogin WITH PASSWORD = 'a123reallySTRONGpassword!';\r     ```\r \r 3. 现在查询 *SQL 数据仓库数据库*，根据所创建的登录名创建数据库用户，以在数据库中访问和执行操作。\r \r     ```sql\r     CREATE USER LoadingUser FOR LOGIN MedRCLogin;\r     ```\r \r 4. 向名为 NYT 的数据库授予数据库用户控制权限。 \r \r     ```sql\r     GRANT CONTROL ON DATABASE::[NYT] to LoadingUser;\r     ```\r     > [!NOTE]\r     > 如果数据库名称包含连字符，请务必将名称括在方括号中！ \r     >\r \r ### <a name=\"give-the-user-medium-resource-allocations\"></a>授予用户中等资源分配\r \r 1. 运行此 T-SQL 命令，使其成为中等资源类（称为 mediumrc）的成员。 \r \r     ```sql\r     EXEC sp_addrolemember 'mediumrc', 'LoadingUser';\r     ```\r     > [!NOTE]\r     > 单击[此处](sql-data-warehouse-develop-concurrency.md#resource-classes)详细了解并发和资源类！ \r     >\r \r 2. 使用新凭据连接到逻辑服务器\r \r     ![使用新登录名登录](./media/sql-data-warehouse-get-started-tutorial/new-login.png)\r \r ## <a name=\"load-data-from-azure-blob-storage\"></a>从 Azure Blob 存储加载数据\r \r 现在可以将数据加载到数据仓库中。 此步骤显示如何从公共 Azure 存储 blob 加载北京市出租车数据。 \r \r - 将数据加载到 SQL 数据仓库的常见方法是：首先将数据移动到 Azure Blob 存储，然后将其加载到数据仓库。 为了更容易理解如何加载，我们已将北京出租车数据托管到公共 Azure 存储 blob 中。 \r \r - 若要了解如何将数据置于 Azure Blob 存储或如何将其直接从源加载到 SQL 数据仓库以供将来参考，请参阅[加载概述](sql-data-warehouse-overview-load.md)。\r \r ### <a name=\"define-external-data\"></a>定义外部数据\r \r 1. 创建主密钥。 只需要为每个数据库创建一次主密钥。 \r \r     ```sql\r     CREATE MASTER KEY;\r     ```\r \r 2. 定义包含出租车数据的 Azure blob 的位置。  \r \r     ```sql\r     CREATE EXTERNAL DATA SOURCE NYTPublic\r     WITH\r     (\r         TYPE = Hadoop,\r         LOCATION = 'wasbs://2013@nytpublic.blob.core.chinacloudapi.cn/'\r     );\r     ```\r \r 3. 定义外部文件格式\r \r     ```CREATE EXTERNAL FILE FORMAT``` 命令用于指定包含外部数据的文件的格式。 它们包含由一个或多个字符（称为分隔符）分隔的文本。 为便于演示，出租车数据已分别存储为未压缩的数据，以及 gzip 压缩数据。\r \r     运行这些 T-SQL 命令以定义两种不同的格式：未压缩和压缩。\r \r     ```sql\r     CREATE EXTERNAL FILE FORMAT uncompressedcsv\r     WITH (\r         FORMAT_TYPE = DELIMITEDTEXT,\r         FORMAT_OPTIONS ( \r             FIELD_TERMINATOR = ',',\r             STRING_DELIMITER = '',\r             DATE_FORMAT = '',\r             USE_TYPE_DEFAULT = False\r         )\r     );\r \r     CREATE EXTERNAL FILE FORMAT compressedcsv\r     WITH ( \r         FORMAT_TYPE = DELIMITEDTEXT,\r         FORMAT_OPTIONS ( FIELD_TERMINATOR = '|',\r             STRING_DELIMITER = '',\r         DATE_FORMAT = '',\r             USE_TYPE_DEFAULT = False\r         ),\r         DATA_COMPRESSION = 'org.apache.hadoop.io.compress.GzipCodec'\r     );\r     ```\r \r 4.  为外部文件格式创建架构。 \r \r     ```sql\r     CREATE SCHEMA ext;\r     ```\r 5. 创建外部表。 这些表引用 Azure Blob 存储中存储的数据。 运行以下 T-SQL 命令以创建若干外部表，这些表都指向我们之前在外部数据源中定义的 Azure blob。\r \r ```sql\r     CREATE EXTERNAL TABLE [ext].[Date] \r     (\r         [DateID] int NOT NULL,\r         [Date] datetime NULL,\r         [DateBKey] char(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [DayOfMonth] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [DaySuffix] varchar(4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [DayName] varchar(9) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [DayOfWeek] char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [DayOfWeekInMonth] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [DayOfWeekInYear] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [DayOfQuarter] varchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [DayOfYear] varchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [WeekOfMonth] varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [WeekOfQuarter] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [WeekOfYear] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [Month] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [MonthName] varchar(9) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [MonthOfQuarter] varchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [Quarter] char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [QuarterName] varchar(9) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [Year] char(4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [YearName] char(7) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [MonthYear] char(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [MMYYYY] char(6) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [FirstDayOfMonth] date NULL,\r         [LastDayOfMonth] date NULL,\r         [FirstDayOfQuarter] date NULL,\r         [LastDayOfQuarter] date NULL,\r         [FirstDayOfYear] date NULL,\r         [LastDayOfYear] date NULL,\r         [IsHolidayUSA] bit NULL,\r         [IsWeekday] bit NULL,\r         [HolidayUSA] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\r     )\r     WITH\r     (\r         LOCATION = 'Date',\r         DATA_SOURCE = NYTPublic,\r         FILE_FORMAT = uncompressedcsv,\r         REJECT_TYPE = value,\r         REJECT_VALUE = 0\r     );\r \r     CREATE EXTERNAL TABLE [ext].[Geography]\r     (\r         [GeographyID] int NOT NULL,\r         [ZipCodeBKey] varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\r         [County] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [City] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [State] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [Country] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [ZipCode] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\r     )\r     WITH\r     (\r         LOCATION = 'Geography',\r         DATA_SOURCE = NYTPublic,\r         FILE_FORMAT = uncompressedcsv,\r         REJECT_TYPE = value,\r         REJECT_VALUE = 0 \r     );\r \r     CREATE EXTERNAL TABLE [ext].[HackneyLicense]\r     (\r         [HackneyLicenseID] int NOT NULL,\r         [HackneyLicenseBKey] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\r         [HackneyLicenseCode] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\r     )\r     WITH\r     (\r         LOCATION = 'HackneyLicense',\r         DATA_SOURCE = NYTPublic,\r         FILE_FORMAT = uncompressedcsv,\r         REJECT_TYPE = value,\r         REJECT_VALUE = 0\r     )\r     ;\r \r     CREATE EXTERNAL TABLE [ext].[Medallion]\r     (\r         [MedallionID] int NOT NULL,\r         [MedallionBKey] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\r         [MedallionCode] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\r     )\r     WITH\r     (\r         LOCATION = 'Medallion',\r         DATA_SOURCE = NYTPublic,\r         FILE_FORMAT = uncompressedcsv,\r         REJECT_TYPE = value,\r         REJECT_VALUE = 0\r     )\r     ;\r \r     CREATE EXTERNAL TABLE [ext].[Time]\r     (\r         [TimeID] int NOT NULL,\r         [TimeBKey] varchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\r         [HourNumber] tinyint NOT NULL,\r         [MinuteNumber] tinyint NOT NULL,\r         [SecondNumber] tinyint NOT NULL,\r         [TimeInSecond] int NOT NULL,\r         [HourlyBucket] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\r         [DayTimeBucketGroupKey] int NOT NULL,\r         [DayTimeBucket] varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL\r     )\r     WITH\r     (\r         LOCATION = 'Time',\r         DATA_SOURCE = NYTPublic,\r         FILE_FORMAT = uncompressedcsv,\r         REJECT_TYPE = value,\r         REJECT_VALUE = 0\r     )\r     ;\r \r     CREATE EXTERNAL TABLE [ext].[Trip]\r     (\r         [DateID] int NOT NULL,\r         [MedallionID] int NOT NULL,\r         [HackneyLicenseID] int NOT NULL,\r         [PickupTimeID] int NOT NULL,\r         [DropoffTimeID] int NOT NULL,\r         [PickupGeographyID] int NULL,\r         [DropoffGeographyID] int NULL,\r         [PickupLatitude] float NULL,\r         [PickupLongitude] float NULL,\r         [PickupLatLong] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [DropoffLatitude] float NULL,\r         [DropoffLongitude] float NULL,\r         [DropoffLatLong] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [PassengerCount] int NULL,\r         [TripDurationSeconds] int NULL,\r         [TripDistanceMiles] float NULL,\r         [PaymentType] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r         [FareAmount] money NULL,\r         [SurchargeAmount] money NULL,\r         [TaxAmount] money NULL,\r         [TipAmount] money NULL,\r         [TollsAmount] money NULL,\r         [TotalAmount] money NULL\r     )\r     WITH\r     (\r         LOCATION = 'Trip2013',\r         DATA_SOURCE = NYTPublic,\r         FILE_FORMAT = compressedcsv,\r         REJECT_TYPE = value,\r         REJECT_VALUE = 0\r     )\r     ;\r \r     CREATE EXTERNAL TABLE [ext].[Weather]\r     (\r         [DateID] int NOT NULL,\r         [GeographyID] int NOT NULL,\r         [PrecipitationInches] float NOT NULL,\r         [AvgTemperatureFahrenheit] float NOT NULL\r     )\r     WITH\r     (\r         LOCATION = 'Weather2013',\r         DATA_SOURCE = NYTPublic,\r         FILE_FORMAT = uncompressedcsv,\r         REJECT_TYPE = value,\r         REJECT_VALUE = 0\r     )\r     ;\r ```\r \r ### <a name=\"import-the-data-from-azure-blob-storage\"></a>从 Azure Blob 存储导入数据。\r \r SQL 数据仓库支持名为 CREATE TABLE AS SELECT (CTAS) 的关键语句。 此语句基于 select 语句的结果创建新表。 新表包含与 select 语句结果相同的列和数据类型。  这是将数据从 Azure Blob 存储导入到 SQL 数据仓库的简洁方法。\r \r 1. 运行此脚本导入数据。\r \r     ```sql\r     CREATE TABLE [dbo].[Date]\r     WITH\r     ( \r         DISTRIBUTION = ROUND_ROBIN,\r         CLUSTERED COLUMNSTORE INDEX\r     )\r     AS SELECT * FROM [ext].[Date]\r     OPTION (LABEL = 'CTAS : Load [dbo].[Date]')\r     ;\r \r     CREATE TABLE [dbo].[Geography]\r     WITH\r     ( \r         DISTRIBUTION = ROUND_ROBIN,\r         CLUSTERED COLUMNSTORE INDEX\r     )\r     AS\r     SELECT * FROM [ext].[Geography]\r     OPTION (LABEL = 'CTAS : Load [dbo].[Geography]')\r     ;\r \r     CREATE TABLE [dbo].[HackneyLicense]\r     WITH\r     ( \r         DISTRIBUTION = ROUND_ROBIN,\r         CLUSTERED COLUMNSTORE INDEX\r     )\r     AS SELECT * FROM [ext].[HackneyLicense]\r     OPTION (LABEL = 'CTAS : Load [dbo].[HackneyLicense]')\r     ;\r \r     CREATE TABLE [dbo].[Medallion]\r     WITH\r     (\r         DISTRIBUTION = ROUND_ROBIN,\r         CLUSTERED COLUMNSTORE INDEX\r     )\r     AS SELECT * FROM [ext].[Medallion]\r     OPTION (LABEL = 'CTAS : Load [dbo].[Medallion]')\r     ;\r \r     CREATE TABLE [dbo].[Time]\r     WITH\r     (\r         DISTRIBUTION = ROUND_ROBIN,\r         CLUSTERED COLUMNSTORE INDEX\r     )\r     AS SELECT * FROM [ext].[Time]\r     OPTION (LABEL = 'CTAS : Load [dbo].[Time]')\r     ;\r \r     CREATE TABLE [dbo].[Weather]\r     WITH\r     ( \r         DISTRIBUTION = ROUND_ROBIN,\r         CLUSTERED COLUMNSTORE INDEX\r     )\r     AS SELECT * FROM [ext].[Weather]\r     OPTION (LABEL = 'CTAS : Load [dbo].[Weather]')\r     ;\r \r     CREATE TABLE [dbo].[Trip]\r     WITH\r     (\r         DISTRIBUTION = ROUND_ROBIN,\r         CLUSTERED COLUMNSTORE INDEX\r     )\r     AS SELECT * FROM [ext].[Trip]\r     OPTION (LABEL = 'CTAS : Load [dbo].[Trip]')\r     ;\r     ```\r \r 2. 在加载数据的同时查看数据。\r \r    假设要加载几个 GB 的数据，并将其压缩成高性能群集列存储索引。 运行以下使用动态管理视图 (DMV) 的查询以显示负载的状态。 开始查询后，在 SQL 数据仓库执行繁重任务的同时，可享用咖啡和小吃。\r \r     ```sql\r     SELECT\r         r.command,\r         s.request_id,\r         r.status,\r         count(distinct input_name) as nbr_files,\r         sum(s.bytes_processed)/1024/1024/1024 as gb_processed\r     FROM \r         sys.dm_pdw_exec_requests r\r         INNER JOIN sys.dm_pdw_dms_external_work s\r         ON r.request_id = s.request_id\r     WHERE\r         r.[label] = 'CTAS : Load [dbo].[Date]' OR\r         r.[label] = 'CTAS : Load [dbo].[Geography]' OR\r         r.[label] = 'CTAS : Load [dbo].[HackneyLicense]' OR\r         r.[label] = 'CTAS : Load [dbo].[Medallion]' OR\r         r.[label] = 'CTAS : Load [dbo].[Time]' OR\r         r.[label] = 'CTAS : Load [dbo].[Weather]' OR\r         r.[label] = 'CTAS : Load [dbo].[Trip]'\r     GROUP BY\r         r.command,\r         s.request_id,\r         r.status\r     ORDER BY\r         nbr_files desc, \r         gb_processed desc;\r     ```\r \r 3. 查看所有系统查询。\r \r     ```sql\r     SELECT * FROM sys.dm_pdw_exec_requests;\r     ```\r \r 4. 结果让人欣慰，数据已顺利载入 Azure SQL 数据仓库。\r \r     ![数据已加载](./media/sql-data-warehouse-get-started-tutorial/see-data-loaded.png)\r \r ## <a name=\"improve-query-performance\"></a>提高查询性能\r \r 有多种方法可以提高查询性能并实现 SQL 数据仓库旨在提供的高速性能。  \r \r ### <a name=\"see-the-effect-of-scaling-on-query-performance\"></a>了解缩放对查询性能的影响 \r \r 提高查询性能的一种方法是通过更改数据仓库的 DWU 服务级别来缩放资源。 服务级别越高，成本越高，但可以随时往回缩减或暂停资源。 \r \r 在此步骤中，将比较两种不同 DWU 设置的性能。\r \r 首先，让我们缩减到 100 个 DWU，以便可以了解单独一个计算节点的表现如何。\r \r 1. 转到门户，选择 SQL 数据仓库。\r \r 2. 在“SQL 数据仓库”边栏选项卡中选择“缩放”。 \r \r     ![通过门户缩放数据仓库](./media/sql-data-warehouse-get-started-tutorial/scale-dw.png)\r \r 3. 将性能条缩减到 100 个 DWU，并单击“保存”。\r \r     ![缩放和保存](./media/sql-data-warehouse-get-started-tutorial/scale-and-save.png)\r \r 4. 等待缩放操作完成。\r \r     > [!NOTE]\r     > 更改规模时，查询无法运行。 缩放会 **终止** 当前运行的查询。 操作完成后，可重启这些查询。\r     >\r \r 5. 选择所有列中的前 100 万个条目，针对行程数据执行扫描操作。 如果希望很快就能获得结果，请选择更少的行。 记下运行此操作所花费的时间。\r \r     ```sql\r     SELECT TOP(1000000) * FROM dbo.[Trip]\r     ```\r 6. 将数据仓库缩减到 400 个 DWU。 请记住，每增加 100 个 DWU，就会向 Azure SQL 数据仓库添加一个计算节点。\r \r 7. 再次运行查询！ 应会看到明显的差异。 \r \r     > [!NOTE]\r     > 由于查询返回大量数据，运行 SSMS 的计算机带宽可用性可能出现性能瓶颈。 这可能导致你看不到任何性能改进！\r \r > [!NOTE]\r > SQL 数据仓库使用大规模并行处理。 在数百万行上扫描或执行分析功能的查询可体验到 Azure SQL 数据仓库的真正强大之处。\r >\r \r ### <a name=\"see-the-effect-of-statistics-on-query-performance\"></a>了解统计信息对查询性能的影响\r \r 1. 运行可将“日期”表与“行程”表相联接的查询\r \r     ```sql\r     SELECT TOP (1000000) \r         dt.[DayOfWeek],\r         tr.[MedallionID],\r         tr.[HackneyLicenseID],\r         tr.[PickupTimeID],\r         tr.[DropoffTimeID],\r         tr.[PickupGeographyID],\r         tr.[DropoffGeographyID],\r         tr.[PickupLatitude],\r         tr.[PickupLongitude],\r         tr.[PickupLatLong],\r         tr.[DropoffLatitude],\r         tr.[DropoffLongitude],\r         tr.[DropoffLatLong],\r         tr.[PassengerCount],\r         tr.[TripDurationSeconds],\r         tr.[TripDistanceMiles],\r         tr.[PaymentType],\r         tr.[FareAmount],\r         tr.[SurchargeAmount],\r         tr.[TaxAmount],\r         tr.[TipAmount],\r         tr.[TollsAmount],\r         tr.[TotalAmount]\r     FROM [dbo].[Trip] as tr\r         JOIN dbo.[Date] as dt\r         ON  tr.DateID = dt.DateID\r     ```\r \r     此查询需要一段时间，因为 SQL 数据仓库必须先对数据进行随机排列，然后才能执行联接。 如果联接旨在以与分布数据相同的方式联接数据，则它们不必随机排列数据。 这是一个更深入的主题。 \r \r 2. 统计信息会有所帮助。 \r 3. 运行此语句以在联接列上创建统计信息。\r \r     ```sql\r     CREATE STATISTICS [dbo.Date DateID stats] ON dbo.Date (DateID);\r     CREATE STATISTICS [dbo.Trip DateID stats] ON dbo.Trip (DateID);\r     ```\r \r     > [!NOTE]\r     > SQL 数据仓库不会自动管理统计信息。 统计信息对于查询性能非常重要，我们强烈建议创建并更新统计信息。\r     > \r     > **基于涉及联接的列、WHERE 子句中使用的列以及 GROUP BY 中的列创建信息统计可以获得最大的效益。**\r     >\r \r 3. 再次根据“先决条件”中的步骤运行查询，并观察性能是否出现任何差异。 尽管查询性能的差异不像扩展实例那样明显，但仍可注意到速度有所提升。 \r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 现在可以进行查询和浏览。 查看我们的最佳实践或提示。\r \r 如果当日已不想再浏览，请务必暂停实例！ 在生产中，根据业务需要暂停和缩放实例可以大幅节省成本。\r \r ![暂停](./media/sql-data-warehouse-get-started-tutorial/pause.png)\r \r ## <a name=\"useful-readings\"></a>有用的资料\r \r [并发性和工作负荷管理][]\r \r [Azure SQL 数据仓库最佳实践][]\r \r [监视查询][]\r \r [有关构建大规模关系数据仓库的前 10 条最佳实践][]\r \r [将数据迁移到 Azure SQL 数据仓库][]\r \r [并发性和工作负荷管理]: sql-data-warehouse-develop-concurrency.md#changing-user-resource-class-example\r [Azure SQL 数据仓库最佳实践]: sql-data-warehouse-best-practices.md#hash-distribute-large-tables\r [监视查询]: sql-data-warehouse-manage-monitor.md\r [有关构建大规模关系数据仓库的前 10 条最佳实践]: https://blogs.msdn.microsoft.com/sqlcat/2013/09/16/top-10-best-practices-for-building-a-large-scale-relational-data-warehouse/\r [将数据迁移到 Azure SQL 数据仓库]: https://blogs.msdn.microsoft.com/sqlcat/2016/08/18/migrating-data-to-azure-sql-data-warehouse-in-practice/\r \r [!INCLUDE [Additional Resources](../../includes/sql-data-warehouse-article-footer.md)]\r \r <!-- Internal Links -->\r [先决条件]: sql-data-warehouse-get-started-tutorial.md#prerequisites\r \r <!--Other Web references-->\r [Visual Studio]: https://www.visualstudio.com/\r [SQL Server Management Studio]: https://msdn.microsoft.com/library/mt238290.aspx\r \r <!-- Update_Description: wording update -->"}