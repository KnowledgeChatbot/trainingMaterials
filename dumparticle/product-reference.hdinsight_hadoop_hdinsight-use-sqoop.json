{"Title":"通过 Azure HDInsight (Hadoop) 运行 Apache Sqoop 作业","Description":"了解如何从工作站使用 Azure PowerShell 在 Hadoop 群集和 Azure SQL 数据库之间运行 Sqoop 导入和导出。","Content":"# <a name=\"use-sqoop-with-hadoop-in-hdinsight\"></a>将 Sqoop 与 HDInsight 中的 Hadoop 配合使用\r [!INCLUDE [sqoop-selector](../../../includes/hdinsight-selector-use-sqoop.md)]\r \r [!INCLUDE [azure-sdk-developer-differences](../../../includes/azure-sdk-developer-differences.md)]\r \r 了解如何使用 HDInsight 中的 Sqoop 在 HDInsight 群集和 Azure SQL 数据库或 SQL Server 数据库之间进行导入和导出。\r \r 虽然选择 Hadoop 处理日志和文件等非结构化和半结构化的数据是理所当然的事，但可能还需要处理存储在关系数据库中的结构化数据。\r \r [Sqoop][sqoop-user-guide-1.4.4] 是一种用于在 Hadoop 群集和关系数据库之间传输数据的工具。 可以使用此工具将数据从关系数据库管理系统 (RDBMS)（如 SQL Server、MySQL 或 Oracle）导入到 Hadoop 分布式文件系统 (HDFS)，在 Hadoop 中使用 MapReduce 或 Hive 转换数据，然后将数据导回 RDBMS。 在本教程中，SQL Server 数据库将用于关系数据库。\r \r 有关 HDInsight 群集上支持的 Sqoop 版本，请参阅 [HDInsight 提供的群集版本有哪些新功能？][hdinsight-versions]\r \r ## <a name=\"understand-the-scenario\"></a>了解方案\r \r HDInsight 群集附带了某些示例数据。 可使用以下两个示例：\r \r * 位于 */example/data/sample.log*的 log4j 日志文件。 以下日志会从该文件中提取出来：\r \r         2012-02-03 18:35:34 SampleClass6 [INFO] everything normal for id 577725851\r         2012-02-03 18:35:34 SampleClass4 [FATAL] system problem at id 1991281254\r         2012-02-03 18:35:34 SampleClass3 [DEBUG] detail for id 1304807656\r         ...\r * 名为 *hivesampletable* 的 Hive 表，它引用位于 */hive/warehouse/hivesampletable* 中的数据文件。 该表包含一些移动设备数据。 \r \r   | 字段 | 数据类型 |\r   | --- | --- |\r   | clientid |字符串 |\r   | querytime |字符串 |\r   | market |字符串 |\r   | deviceplatform |字符串 |\r   | devicemake |字符串 |\r   | devicemodel |字符串 |\r   | state |字符串 |\r   | country |字符串 |\r   | querydwelltime |double |\r   | sessionid |bigint |\r   | sessionpagevieworder |bigint |\r \r 本教程中使用这两个数据集测试 Sqoop 导入和导出。\r \r ## <a name=\"create-cluster-and-sql-database\"></a>创建群集和 SQL 数据库\r 本部分演示如何使用 Azure 门户和 Azure Resource Manager 模板创建群集、SQL 数据库和 SQL 数据库架构，以便运行教程。 可以在 [Azure 快速入门模板](https://azure.microsoft.com/resources/templates/101-hdinsight-linux-with-sql-database/)中找到模板。 Resource Manager 模板调用 bacpac 包以将表架构部署到 SQL 数据库。  Bacpac 包位于公共 blob 容器 https://hditutorialdata.blob.core.windows.net/usesqoop/SqoopTutorial-2016-2-23-11-2.bacpac 中。 如果想要私有容器用于 bacpac 文件，请使用模板中的以下值：\r    \r ```json\r \"storageKeyType\": \"Primary\",\r \"storageKey\": \"<TheAzureStorageAccountKey>\",\r ```\r \r 若要使用 Azure PowerShell 创建群集和 SQL 数据库，请参阅 [附录 A](#appendix-a---a-powershell-sample)。\r \r > [!NOTE]\r > 使用模板或 Azure 门户进行的导入操作仅支持从 Azure Blob 存储导入 BACPAC 文件。\r \r **使用资源管理模板配置环境**\r 1. 单击以下映像可在 Azure 门户中打开 Resource Manager 模板。         \r \r     <a href=\"https://portal.azure.cn/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2F101-hdinsight-linux-with-sql-database%2Fazuredeploy.json\" target=\"_blank\"><img src=\"./media/hdinsight-use-sqoop/deploy-to-azure.png\" alt=\"Deploy to Azure\"></a>\r \r     >[!NOTE]\r     > 必须修改从 GitHub 存储库“azure-quickstart-templates”下载的模板，以适应 Azure 中国云环境。 例如，将一些终结点 -“blob.core.chinacloudapi.cn”替换为“blob.core.chinacloudapi.cn”，将“cloudapp.azure.com”替换为“chinacloudapp.cn”；将允许的位置更改为“中国北部”和“中国东部”；将 HDInsight Linux 版本更改为 Azure 中国区支持的版本 3.5。\r \r 2. 输入以下属性：\r \r     - **订阅**：输入 Azure 订阅。\r     - **资源组**：创建新的 Azure 资源组或选择现有的资源组。  资源组用于管理。  它是对象的容器。\r     - **位置**：选择区域。\r     - **群集名称**：输入 Hadoop 群集的名称。\r     - **群集登录名和密码**：默认登录名是 admin。\r     - **SSH 用户名和密码**。\r     - **SQL 数据库服务器登录名和密码**。\r     - **_artifacts 位置**：使用默认值（除非想要在其他位置使用自己的 backpac 文件）。\r     - **_artifacts 位置 Sas 令牌**：将其留空。\r     - **Bacpac 文件名**：使用默认值（除非想要使用自己的 backpac 文件）。\r      \r         以下值在变量部分中硬编码：\r         \r         |名称|值|\r         |----|-----|\r         | 默认存储帐户名 | &lt;CluterName>store |\r         | Azure SQL 数据库服务器名称 | &lt;ClusterName>dbserver |\r         | Azure SQL 数据库名称 | &lt;ClusterName>db |\r      \r 3. 选择“我同意上述条款和条件”。\r 4. 单击“购买” 。 此时会出现一个标题为“为模板部署提交部署”的新磁贴。 创建群集和 SQL 数据库大约需要 20 分钟时间。\r \r 如果选择使用现有的 Azure SQL 数据库或 Microsoft SQL Server\r \r * **Azure SQL 数据库**：必须为 Azure SQL 数据库服务器配置防火墙规则，允许从工作站进行访问。 有关创建 Azure SQL 数据库和配置防火墙的说明，请参阅使用 [Azure SQL 数据库入门][sqldatabase-get-started]。 \r \r   > [!NOTE]\r   > 默认情况下，可以从 Azure HDInsight 这样的 Azure 服务连接 Azure SQL 数据库。 如果禁用了此防火墙设置，则必须从 Azure 门户启用它。 \r   > \r   > \r * **SQL Server**：如果 HDInsight 群集与 SQL Server 位于 Azure 中的同一虚拟网络，可以使用本文中的步骤对 SQL Server 数据库执行数据导入和导出操作。\r \r   > [!NOTE]\r   > HDInsight 仅支持基于位置的虚拟网络，并且当前不适用于基于地缘组的虚拟网络。\r   > \r   > \r   \r   * 若要创建和配置虚拟网络，请参阅[使用 Azure 门户创建虚拟网络](../../virtual-network/virtual-networks-create-vnet-arm-pportal.md)。\r     \r     * 在数据中心使用 SQL Server 时，必须将虚拟网络配置为“站点到站点”或“点到站点”。\r \r       > [!NOTE]\r       > 对于“点到站点”虚拟网络，SQL Server 必须运行 Azure 虚拟网络配置的“仪表板”中提供的 VPN 客户端配置应用程序。\r       > \r       > \r     * 在 Azure 虚拟机上使用 SQL Server 时，如果托管 SQL Server 的虚拟机是 HDInsight 所在虚拟网络的成员，则可以使用任何虚拟网络配置。\r   * 若要在虚拟网络上创建 HDInsight 群集，请参阅[使用自定义选项在 HDInsight 中创建 Hadoop 群集](../hdinsight-hadoop-provision-linux-clusters.md)\r \r     > [!NOTE]\r     > SQL Server 还必须允许身份验证。 必须使用 SQL Server 登录名来完成本文中的步骤。\r     > \r     > \r \r **验证配置**\r \r 1. 在 Azure 门户中打开资源组。 应在组中看到四个资源：\r \r     - 群集\r     - 数据库服务器\r     - 数据库\r     - 默认存储帐户\r \r 2. 在 Microsoft SQL Server Management Studio 中打开数据库。  应看到已部署的两个数据库：\r \r     ![Azure HDInsight Sqoop SQL Management Studio](./media/hdinsight-use-sqoop/hdinsight-sqoop-sql-management-studio.png)\r \r \r ## <a name=\"run-sqoop-jobs\"></a>运行 Sqoop 作业\r HDInsight 可以使用各种方法运行 Sqoop 作业。 使用下表来确定哪种方法最适合用户，并访问此链接进行演练。\r \r | **使用此方法** ，如果想要... | ... **交互式** shell | ...**批处理** | ...使用此 **群集操作系统** | ...从此 **客户端操作系统** |\r |:--- |:---:|:---:|:--- |:--- |\r | [SSH](apache-hadoop-use-sqoop-mac-linux.md) |✔ |✔ |Linux |Linux、Unix、Mac OS X 或 Windows |\r | [.NET SDK for Hadoop](apache-hadoop-use-sqoop-dotnet-sdk.md) |&nbsp; |✔ |Linux 或 Windows |Windows（暂时） |\r | [Azure PowerShell](apache-hadoop-use-sqoop-powershell.md) |&nbsp; |✔ |Linux 或 Windows |Windows |\r \r ## <a name=\"limitations\"></a>限制\r * 批量导出 - 在基于 Linux 的 HDInsight 上，用于将数据导出到 Microsoft SQL Server 或 Azure SQL 数据库的 Sqoop 连接器目前不支持批量插入。\r * 批处理 - 在基于 Linux 的 HDInsight 上，如果在执行插入时使用 `-batch` 开关，Sqoop 将执行多次插入而不是批处理插入操作。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 现在你已了解如何使用 Sqoop。 若要了解更多信息，请参阅以下文章：\r \r * [将 Hive 与 HDInsight 配合使用](../hdinsight-use-hive.md)\r * [将 Pig 与 HDInsight 配合使用](../hdinsight-use-pig.md)\r * [将数据上传到 HDInsight][hdinsight-upload-data]：了解将数据上传到 HDInsight/Azure Blob 存储的其他方法。\r \r ## <a name=\"appendix-a---a-powershell-sample\"></a>附录 A - PowerShell 示例\r PowerShell 示例将执行以下步骤：\r \r 1. 连接到 Azure。\r 2. 创建 Azure 资源组。 有关详细信息，请参阅[将 Azure PowerShell 与 Azure 资源管理器配合使用](../../azure-resource-manager/powershell-azure-resource-manager.md)\r 3. 创建一个 Azure SQL 数据库服务器、一个 Azure SQL 数据库和两个表。 \r \r     如果改用 SQL Server，请使用以下语句来创建表：\r \r         CREATE TABLE [dbo].[log4jlogs](\r          [t1] [nvarchar](50),\r          [t2] [nvarchar](50),\r          [t3] [nvarchar](50),\r          [t4] [nvarchar](50),\r          [t5] [nvarchar](50),\r          [t6] [nvarchar](50),\r          [t7] [nvarchar](50))\r \r         CREATE TABLE [dbo].[mobiledata](\r          [clientid] [nvarchar](50),\r          [querytime] [nvarchar](50),\r          [market] [nvarchar](50),\r          [deviceplatform] [nvarchar](50),\r          [devicemake] [nvarchar](50),\r          [devicemodel] [nvarchar](50),\r          [state] [nvarchar](50),\r          [country] [nvarchar](50),\r          [querydwelltime] [float],\r          [sessionid] [bigint],\r          [sessionpagevieworder][bigint])\r \r     检查数据库和表的最简单方法是使用 Visual Studio。 可以使用 Azure 门户检查数据库服务器和数据库。\r 4. 创建 HDInsight 群集。\r \r     若要检查群集，可以使用 Azure 门户或 Azure PowerShell。\r 5. 预处理源数据文件。\r \r     在本教程中，要将一个 log4j 日志文件（带分隔符的文件）和一个 Hive 表导出到 Azure SQL 数据库。 带分隔符的文件名为 */example/data/sample.log*。 在本教程前面介绍了几个 log4j 日志的示例。 在日志文件中，有一些空行和一些类似下面这样的行：\r \r         java.lang.Exception: 2012-02-03 20:11:35 SampleClass2 [FATAL] unrecoverable system problem at id 609774657\r             at com.osa.mocklogger.MockLogger$2.run(MockLogger.java:83)\r    \r     对于使用此数据的其他示例来说，这是没有问题的，但要将数据导入到 Azure SQL 数据库或 SQL Server 中，必须删除这些异常。 如果有空字符串，或者某一行的元素数量少于 Azure SQL 数据库表中定义的字段数量，Sqoop 导出会失败。 log4jlogs 表有 7 个字符串类型的字段。\r    \r     此过程会在群集上创建新文件：tutorials/usesqoop/data/sample.log。 若要检查修改后的数据文件，可以使用 Azure 门户、Azure 存储资源管理器工具或 Azure PowerShell。 [HDInsight 入门][hdinsight-get-started]中有一个关于使用 Azure PowerShell 下载文件并显示文件内容的代码示例。\r 6. 将数据文件导出到 Azure SQL 数据库。\r \r     源文件为 tutorials/usesqoop/data/sample.log。 数据导出到的表的名称为 log4jlogs。\r \r    > [!NOTE]\r    > 除了连接字符串信息，此部分中的步骤还应适用于 Azure SQL 数据库或 SQL Server。 这些步骤已经过以下配置测试：\r    > \r    > * **Azure 虚拟网络点到站点配置**：虚拟网络已将 HDInsight 群集连接到专用数据中心的 SQL Server。 有关详细信息，请参阅[在管理门户中配置点到站点 VPN](../../vpn-gateway/vpn-gateway-point-to-site-create.md)。\r    > * **Azure HDInsight 3.1**：有关在虚拟网络上创建群集的信息，请参阅[使用自定义选项在 HDInsight 中创建 Hadoop 群集](../hdinsight-hadoop-provision-linux-clusters.md)。\r    > * **SQL Server 2014**：已配置为允许身份验证和运行 VPN 客户端配置包，可以安全地连接到虚拟网络。\r    > \r    > \r 7. 将 Hive 表导出到 Azure SQL 数据库。\r 8. 将 mobiledata 表导入 HDInsight 群集。\r \r     若要检查修改后的数据文件，可以使用 Azure 门户、Azure 存储资源管理器工具或 Azure PowerShell。  [HDInsight 入门][hdinsight-get-started]中有一个关于使用 Azure PowerShell 下载文件并显示文件内容的代码示例。\r \r ### <a name=\"the-powershell-sample\"></a>PowerShell 示例\r \r ```powershell\r # Prepare an Azure SQL database to be used by the Sqoop tutorial\r \r #region - provide the following values\r \r $subscriptionID = \"<Enter your Azure Subscription ID>\"\r \r $sqlDatabaseLogin = \"<Enter a SQL Database Login name>\" #SQL Database server login\r $sqlDatabasePassword = \"<Enter a Password>\"\r \r $httpUserName = \"admin\"  #HDInsight cluster username\r $httpPassword = \"<Enter a Password>\"\r \r $sshUserName = \"sshuser\" #HDInsight ssh username\r $sshPassword = $httpPassword \r \r # used for creating Azure service names\r $nameToken = \"<Enter an alias>\" \r $namePrefix = $nameToken.ToLower() + (Get-Date -Format \"MMdd\")\r #endregion\r \r #region - variables\r \r # Resource group variables\r     $resourceGroupName = $namePrefix + \"rg\"\r     $location = \"China East\" # used by all Azure services defined in this tutorial\r \r     # SQL database varialbes\r     $sqlDatabaseServerName = $namePrefix + \"sqldbserver\"\r     $sqlDatabaseName = $namePrefix + \"sqldb\"\r     $sqlDatabaseConnectionString = \"Data Source=$sqlDatabaseServerName.database.chinacloudapi.cn;Initial Catalog=$sqlDatabaseName;User ID=$sqlDatabaseLogin;Password=$sqlDatabasePassword;Encrypt=true;Trusted_Connection=false;\"\r     $sqlDatabaseMaxSizeGB = 10\r \r     # Used for retrieving external IP address and creating firewall rules\r     $ipAddressRestService = \"http://bot.whatismyipaddress.com\"\r     $fireWallRuleName = \"UseSqoop\"\r \r     # Used for creating tables and clustered indexes\r     $cmdCreateLog4jTable = \"CREATE TABLE [dbo].[log4jlogs](\r         [t1] [nvarchar](50),\r         [t2] [nvarchar](50),\r         [t3] [nvarchar](50),\r         [t4] [nvarchar](50),\r         [t5] [nvarchar](50),\r         [t6] [nvarchar](50),\r         [t7] [nvarchar](50))\"\r \r     $cmdCreateLog4jClusteredIndex = \"CREATE CLUSTERED INDEX log4jlogs_clustered_index on log4jlogs(t1)\"\r \r     $cmdCreateMobileTable = \" CREATE TABLE [dbo].[mobiledata](\r     [clientid] [nvarchar](50),\r     [querytime] [nvarchar](50),\r     [market] [nvarchar](50),\r     [deviceplatform] [nvarchar](50),\r     [devicemake] [nvarchar](50),\r     [devicemodel] [nvarchar](50),\r     [state] [nvarchar](50),\r     [country] [nvarchar](50),\r     [querydwelltime] [float],\r     [sessionid] [bigint],\r     [sessionpagevieworder][bigint])\"\r \r     $cmdCreateMobileDataClusteredIndex = \"CREATE CLUSTERED INDEX mobiledata_clustered_index on mobiledata(clientid)\"\r \r     # HDInsight variables\r     $hdinsightClusterName = $namePrefix + \"hdi\"\r     $defaultStorageAccountName = $namePrefix + \"store\"\r     $defaultBlobContainerName = $hdinsightClusterName\r     #endregion\r \r     # Treat all errors as terminating\r     $ErrorActionPreference = \"Stop\"\r \r     #region - Connect to Azure subscription\r     Write-Host \"`nConnecting to your Azure subscription ...\" -ForegroundColor Green\r     try{Get-AzureRmContext}\r     catch{Login-AzureRmAccount -EnvironmentName AzureChinaCloud}\r     #endregion\r \r     #region - Create Azure resouce group\r     Write-Host \"`nCreating an Azure resource group ...\" -ForegroundColor Green\r     try{\r         Get-AzureRmResourceGroup -Name $resourceGroupName\r     }\r     catch{\r         New-AzureRmResourceGroup -Name $resourceGroupName -Location $location\r     }\r     #endregion\r \r     #region - Create Azure SQL database server\r     Write-Host \"`nCreating an Azure SQL Database server ...\" -ForegroundColor Green\r     try{\r         Get-AzureRmSqlServer -ServerName $sqlDatabaseServerName -ResourceGroupName $resourceGroupName}\r     catch{\r         Write-Host \"`nCreating SQL Database server ...\"  -ForegroundColor Green\r \r         $sqlDatabasePW = ConvertTo-SecureString -String $sqlDatabasePassword -AsPlainText -Force\r         $credential = New-Object System.Management.Automation.PSCredential($sqlDatabaseLogin,$sqlDatabasePW)\r \r         $sqlDatabaseServerName = (New-AzureRmSqlServer `\r                                     -ResourceGroupName $resourceGroupName `\r                                     -ServerName $sqlDatabaseServerName `\r                                     -SqlAdministratorCredentials $credential `\r                                     -Location $location).ServerName\r         Write-Host \"`tThe new SQL database server name is $sqlDatabaseServerName.\" -ForegroundColor Cyan\r \r         Write-Host \"`nCreating firewall rule, $fireWallRuleName ...\" -ForegroundColor Green\r         $workstationIPAddress = Invoke-RestMethod $ipAddressRestService\r         New-AzureRmSqlServerFirewallRule `\r             -ResourceGroupName $resourceGroupName `\r             -ServerName $sqlDatabaseServerName `\r             -FirewallRuleName \"$fireWallRuleName-workstation\" `\r             -StartIpAddress $workstationIPAddress `\r             -EndIpAddress $workstationIPAddress\r \r         #To allow other Azure services to access the server add a firewall rule and set both the StartIpAddress and EndIpAddress to 0.0.0.0. \r         #Note that this allows Azure traffic from any Azure subscription to access the server.\r         New-AzureRmSqlServerFirewallRule `\r             -ResourceGroupName $resourceGroupName `\r             -ServerName $sqlDatabaseServerName `\r             -FirewallRuleName \"$fireWallRuleName-Azureservices\" `\r             -StartIpAddress \"0.0.0.0\" `\r             -EndIpAddress \"0.0.0.0\"\r     }\r \r     #endregion\r \r     #region - Create and validate Azure SQL database\r     Write-Host \"`nCreating an Azure SQL database ...\" -ForegroundColor Green\r \r     try {\r         Get-AzureRmSqlDatabase `\r             -ResourceGroupName $resourceGroupName `\r             -ServerName $sqlDatabaseServerName `\r             -DatabaseName $sqlDatabaseName\r     }\r     catch {\r         Write-Host \"`nCreating SQL Database, $sqlDatabaseName ...\"  -ForegroundColor Green\r         New-AzureRMSqlDatabase `\r             -ResourceGroupName $resourceGroupName `\r             -ServerName $sqlDatabaseServerName `\r             -DatabaseName $sqlDatabaseName `\r             -Edition \"Standard\" `\r             -RequestedServiceObjectiveName \"S1\"\r     }\r \r     #endregion\r \r     #region - Create tables\r     Write-Host \"Creating the log4jlogs table and the mobiledata table ...\" -ForegroundColor Green\r \r     $conn = New-Object System.Data.SqlClient.SqlConnection\r     $conn.ConnectionString = $sqlDatabaseConnectionString\r     $conn.Open()\r \r     # Create the log4jlogs table and index\r     $cmd = New-Object System.Data.SqlClient.SqlCommand\r     $cmd.Connection = $conn\r     $cmd.CommandText = $cmdCreateLog4jTable\r     $ret = $cmd.ExecuteNonQuery()\r     $cmd.CommandText = $cmdCreateLog4jClusteredIndex\r     $cmd.ExecuteNonQuery()\r \r     # Create the mobiledata table and index\r     $cmd.CommandText = $cmdCreateMobileTable\r     $cmd.ExecuteNonQuery()\r     $cmd.CommandText = $cmdCreateMobileDataClusteredIndex\r     $cmd.ExecuteNonQuery()\r \r     $conn.close()\r \r     #endregion\r \r     #region - Create HDInsight cluster\r \r     Write-Host \"Creating the HDInsight cluster and the dependent services ...\" -ForegroundColor Green\r \r     # Create the default storage account\r     New-AzureRmStorageAccount `\r         -ResourceGroupName $resourceGroupName `\r         -Name $defaultStorageAccountName `\r         -Location $location `\r         -Type Standard_LRS\r \r     # Create the default Blob container\r     $defaultStorageAccountKey = (Get-AzureRmStorageAccountKey `\r                                     -ResourceGroupName $resourceGroupName `\r                                     -Name $defaultStorageAccountName)[0].Value\r     $defaultStorageAccountContext = New-AzureStorageContext `\r                                         -StorageAccountName $defaultStorageAccountName `\r                                         -StorageAccountKey $defaultStorageAccountKey \r     New-AzureStorageContainer `\r         -Name $defaultBlobContainerName `\r         -Context $defaultStorageAccountContext \r \r     # Create the HDInsight cluster\r     $pw = ConvertTo-SecureString -String $httpPassword -AsPlainText -Force\r     $httpCredential = New-Object System.Management.Automation.PSCredential($httpUserName,$pw)\r \r     New-AzureRmHDInsightCluster `\r         -ResourceGroupName $resourceGroupName `\r         -ClusterName $HDInsightClusterName `\r         -Location $location `\r         -ClusterType Hadoop `\r     -OSType Linux `\r     -Version 3.6 `\r     -ClusterSizeInNodes 2 `\r     -HttpCredential $httpCredential `\r     -SshCredential $sshCredential `\r         -DefaultStorageAccountName \"$defaultStorageAccountName.blob.core.chinacloudapi.cn\" `\r         -DefaultStorageAccountKey $defaultStorageAccountKey `\r         -DefaultStorageContainer $defaultBlobContainerName \r \r     # Validate the cluster\r     Get-AzureRmHDInsightCluster -ClusterName $hdinsightClusterName\r     #endregion\r \r     #region - pre-process the source file\r \r     Write-Host \"Preprocessing the source file ...\" -ForegroundColor Green\r \r     # This procedure creates a new file with $destBlobName\r     $sourceBlobName = \"example/data/sample.log\"\r     $destBlobName = \"tutorials/usesqoop/data/sample.log\"\r \r     # Define the connection string\r     $storageConnectionString = \"DefaultEndpointsProtocol=https;AccountName=$defaultStorageAccountName;AccountKey=$defaultStorageAccountKey;EndpointSuffix=core.chinacloudapi.cn\"\r \r     # Create block blob objects referencing the source and destination blob.\r     $storageAccount = [Microsoft.WindowsAzure.Storage.CloudStorageAccount]::Parse($storageConnectionString)\r     $storageClient = $storageAccount.CreateCloudBlobClient();\r     $storageContainer = $storageClient.GetContainerReference($defaultBlobContainerName)\r     $sourceBlob = $storageContainer.GetBlockBlobReference($sourceBlobName)\r     $destBlob = $storageContainer.GetBlockBlobReference($destBlobName)\r \r     # Define a MemoryStream and a StreamReader for reading from the source file\r     $stream = New-Object System.IO.MemoryStream\r     $stream = $sourceBlob.OpenRead()\r     $sReader = New-Object System.IO.StreamReader($stream)\r \r     # Define a MemoryStream and a StreamWriter for writing into the destination file\r     $memStream = New-Object System.IO.MemoryStream\r     $writeStream = New-Object System.IO.StreamWriter $memStream\r \r     # Pre-process the source blob\r     $exString = \"java.lang.Exception:\"\r     while(-Not $sReader.EndOfStream){\r         $line = $sReader.ReadLine()\r         $split = $line.Split(\" \")\r \r         # remove the \"java.lang.Exception\" from the first element of the array\r         # for example: java.lang.Exception: 2012-02-03 19:11:02 SampleClass8 [WARN] problem finding id 153454612\r         if ($split[0] -eq $exString){\r             #create a new ArrayList to remove $split[0]\r             $newArray = [System.Collections.ArrayList] $split\r             $newArray.Remove($exString)\r \r             # update $split and $line\r             $split = $newArray\r             $line = $newArray -join(\" \")\r         }\r \r         # remove the lines that has less than 7 elements\r         if ($split.count -ge 7){\r             write-host $line\r             $writeStream.WriteLine($line)\r         }\r     }\r \r     # Write to the destination blob\r     $writeStream.Flush()\r     $memStream.Seek(0, \"Begin\")\r     $destBlob.UploadFromStream($memStream)\r \r     #endregion\r \r     #region - export a log file from the cluster to the SQL database\r \r     Write-Host \"Preprocessing the source file ...\" -ForegroundColor Green\r \r     $tableName_log4j = \"log4jlogs\"\r \r     # Connection string for Azure SQL Database.\r     # Comment if using SQL Server\r     $connectionString = \"jdbc:sqlserver://$sqlDatabaseServerName.database.chinacloudapi.cn;user=$sqlDatabaseLogin@$sqlDatabaseServerName;password=$sqlDatabasePassword;database=$sqlDatabaseName\"\r     # Connection string for SQL Server.\r     # Uncomment if using SQL Server.\r     #$connectionString = \"jdbc:sqlserver://$sqlDatabaseServerName;user=$sqlDatabaseLogin;password=$sqlDatabasePassword;database=$sqlDatabaseName\"\r \r     $exportDir_log4j = \"/tutorials/usesqoop/data\"\r \r     # Submit a Sqoop job\r     $sqoopDef = New-AzureRmHDInsightSqoopJobDefinition `\r         -Command \"export --connect $connectionString --table $tableName_log4j --export-dir $exportDir_log4j --input-fields-terminated-by \\0x20 -m 1\"\r     $sqoopJob = Start-AzureRmHDInsightJob `\r                     -ClusterName $hdinsightClusterName `\r                     -HttpCredential $httpCredential `\r                     -JobDefinition $sqoopDef #-Debug -Verbose\r     Wait-AzureRmHDInsightJob `\r         -ResourceGroupName $resourceGroupName `\r         -ClusterName $hdinsightClusterName `\r         -HttpCredential $httpCredential `\r         -JobId $sqoopJob.JobId\r \r     Write-Host \"Standard Error\" -BackgroundColor Green\r     Get-AzureRmHDInsightJobOutput -ResourceGroupName $resourceGroupName -ClusterName $hdinsightClusterName -DefaultStorageAccountName $defaultStorageAccountName -DefaultStorageAccountKey $defaultStorageAccountKey -DefaultContainer $defaultBlobContainerName -HttpCredential $httpCredential -JobId $sqoopJob.JobId -DisplayOutputType StandardError\r     Write-Host \"Standard Output\" -BackgroundColor Green\r     Get-AzureRmHDInsightJobOutput -ResourceGroupName $resourceGroupName -ClusterName $hdinsightClusterName -DefaultStorageAccountName $defaultStorageAccountName -DefaultStorageAccountKey $defaultStorageAccountKey -DefaultContainer $defaultBlobContainerName -HttpCredential $httpCredential -JobId $sqoopJob.JobId -DisplayOutputType StandardOutput\r \r     #endregion\r \r     #region - export a Hive table\r \r     $tableName_mobile = \"mobiledata\"\r     $exportDir_mobile = \"/hive/warehouse/hivesampletable\"\r \r     $sqoopDef = New-AzureRmHDInsightSqoopJobDefinition `\r         -Command \"export --connect $connectionString --table $tableName_mobile --export-dir $exportDir_mobile --fields-terminated-by \\t -m 1\"\r     $sqoopJob = Start-AzureRmHDInsightJob `\r                     -ClusterName $hdinsightClusterName `\r                     -HttpCredential $httpCredential `\r                     -JobDefinition $sqoopDef #-Debug -Verbose\r \r     Wait-AzureRmHDInsightJob `\r         -ResourceGroupName $resourceGroupName `\r         -ClusterName $hdinsightClusterName `\r         -HttpCredential $httpCredential `\r         -JobId $sqoopJob.JobId\r \r     Write-Host \"Standard Error\" -BackgroundColor Green\r     Get-AzureRmHDInsightJobOutput `\r         -ResourceGroupName $resourceGroupName `\r         -ClusterName $hdinsightClusterName `\r         -DefaultStorageAccountName $defaultStorageAccountName `\r         -DefaultStorageAccountKey $defaultStorageAccountKey `\r         -DefaultContainer $defaultBlobContainerName `\r         -HttpCredential $httpCredential `\r         -JobId $sqoopJob.JobId `\r         -DisplayOutputType StandardError\r \r     Write-Host \"Standard Output\" -BackgroundColor Green\r     Get-AzureRmHDInsightJobOutput `\r         -ResourceGroupName $resourceGroupName `\r         -ClusterName $hdinsightClusterName `\r         -DefaultStorageAccountName $defaultStorageAccountName `\r         -DefaultStorageAccountKey $defaultStorageAccountKey `\r         -DefaultContainer $defaultBlobContainerName `\r         -HttpCredential $httpCredential `\r         -JobId $sqoopJob.JobId `\r         -DisplayOutputType StandardOutput\r \r     #endregion\r \r     #region - import a database\r \r     $targetDir_mobile = \"/tutorials/usesqoop/importeddata/\"\r \r     $sqoopDef = New-AzureRmHDInsightSqoopJobDefinition `\r         -Command \"import --connect $connectionString --table $tableName_mobile --target-dir $targetDir_mobile --fields-terminated-by \\t --lines-terminated-by \\n -m 1\"\r \r     $sqoopJob = Start-AzureRmHDInsightJob `\r                     -ClusterName $hdinsightClusterName `\r                     -HttpCredential $httpCredential `\r                     -JobDefinition $sqoopDef #-Debug -Verbose\r \r     Wait-AzureRmHDInsightJob `\r         -ResourceGroupName $resourceGroupName `\r         -ClusterName $hdinsightClusterName `\r         -HttpCredential $httpCredential `\r         -JobId $sqoopJob.JobId\r \r     Write-Host \"Standard Error\" -BackgroundColor Green\r     Get-AzureRmHDInsightJobOutput `\r         -ResourceGroupName $resourceGroupName `\r         -ClusterName $hdinsightClusterName `\r         -DefaultStorageAccountName $defaultStorageAccountName `\r         -DefaultStorageAccountKey $defaultStorageAccountKey `\r         -DefaultContainer $defaultBlobContainerName `\r         -HttpCredential $httpCredential `\r         -JobId $sqoopJob.JobId `\r         -DisplayOutputType StandardError\r \r     Write-Host \"Standard Output\" -BackgroundColor Green\r     Get-AzureRmHDInsightJobOutput `\r         -ResourceGroupName $resourceGroupName `\r         -ClusterName $hdinsightClusterName `\r         -DefaultStorageAccountName $defaultStorageAccountName `\r         -DefaultStorageAccountKey $defaultStorageAccountKey `\r         -DefaultContainer $defaultBlobContainerName `\r         -HttpCredential $httpCredential `\r         -JobId $sqoopJob.JobId `\r         -DisplayOutputType StandardOutput\r \r     #endregion\r ```\r \r [azure-management-portal]: https://portal.azure.cn/\r \r [hdinsight-versions]:  ../hdinsight-component-versioning.md\r [hdinsight-provision]: ../hdinsight-hadoop-provision-linux-clusters.md\r [hdinsight-get-started]:apache-hadoop-linux-tutorial-get-started.md\r [hdinsight-storage]: ../hdinsight-hadoop-use-blob-storage.md\r [hdinsight-analyze-flight-data]: ../hdinsight-analyze-flight-delay-data.md\r [hdinsight-use-oozie]: ../hdinsight-use-oozie.md\r [hdinsight-upload-data]: ../hdinsight-upload-data.md\r [hdinsight-submit-jobs]:submit-apache-hadoop-jobs-programmatically.md\r \r [sqldatabase-get-started]: ../../sql-database/sql-database-get-started.md\r \r \r [powershell-start]: http://technet.microsoft.com/library/hh847889.aspx\r [powershell-install]: https://docs.microsoft.com/powershell/azureps-cmdlets-docs\r [powershell-script]: http://technet.microsoft.com/library/ee176949.aspx\r \r [sqoop-user-guide-1.4.4]: https://sqoop.apache.org/docs/1.4.4/SqoopUserGuide.html\r \r \r <!--Update_Description: update wording and link references-->"}