{"Title":"使用 Load Balancer,Corosync,Pacemaker 搭建 Linux 高可用集群","Description":"使用 LB-corosync-pacemaker 搭建 Linux 高可用集群的详细步骤与测试","Content":"\r # 使用 Load Balancer,Corosync,Pacemaker 搭建 Linux 高可用集群\r \r 由于网络架构的原因，在一般虚拟机或物理环境中常见的用 VIP 来实现双机高可用方案，无法照搬到 Azure 平台。但利用 Azure 平台提供的负载均衡或者内部负载均衡功能，可以达到类似的效果。\r \r 本文介绍如何基于 Azure Load Balancer (LB), 结合 Linux 开源的产品 DRBD，Pacemaker 和 Corosync 实现 MariaDB 的双机高可用，并且搭建了一个 web 环境用户演示 HA 的故障转移。\r \r >[!NOTE]\r >在实际生产中，用户请根据自己的需求在此架构上进行扩展改进。\r \r 基本架构如下：\r \r ![architecture](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/architecture.png)\r \r ## 前提\r \r 此处使用已经存在的一个存储账号存储所有的虚拟机磁盘。\r \r 虚拟网络中至少两个子网，一个用于后端数据库，一个用于前端 web。  \r 如下图，此处使用 lqihavnet 中 subnet-2 作为后端数据库子网；subnet-3 作为前端 web 子网。\r \r ![vnet](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/vnet.png)\r \r ## 创建虚拟机、可用性集和负载均衡\r \r ### ASM 模式\r \r 在 Powershell 中执行如下命令。\r \r ```\r add-azureaccount -e azurechinacloud\r $stor=\"lqihastor\"\r $vnet=\"lqihavnet\"\r $svc=\"lqi1eha02\"\r $vmname1=\"lqi1ecmy01\"\r $vmname2=\"lqi1ecmy02\"\r $av1=\"mysqlav\"\r $av2=\"webav\"\r $vmname3=\"lqi1ecmy03\"\r $vmname4=\"lqi1ecmy04\"\r $sub1=\"Subnet-2\"\r $ip1=\"10.0.1.4\"\r $ip2=\"10.0.1.5\"\r $sub2=\"Subnet-3\"\r $ip3=\"10.0.2.4\"\r $ip4=\"10.0.2.5\"\r $loc=\"china east\"\r $imagename=\"f1179221e23b4dbb89e39d70e5bc9e72__OpenLogic-CentOS-72-20161027\"\r $vmsize=\"Small\"\r $vmuser=\"azureuser\"\r $vmpassword=\"P@ssw0rd01\"\r $datadisksize=\"5\"\r $ilb=\"lqilbmysql\"\r $epname1=\"MySQL\"\r $prot1=\"TCP\"\r $locport1=\"3306\"\r $pubport1=\"3306\"\r $ilbdist=\"SourceIP\"\r $ilbip=\"10.0.1.10\"\r $lb=\"lqilbweb\"\r $epname2=\"HTTP\"\r $prot2=\"TCP\"\r $locport2=\"80\"\r $pubport2=\"80\"\r $probeport=\"80\"\r $lbdist=\"SourceIP\"\r \r Set-AzureSubscription -SubscriptionId 9ef8a15c-15a2-4ef1-a19b-e31876ab177c -CurrentStorageAccountName $stor\r ```\r \r 创建后端数据库虚拟机：设置网络，静态内网 IP，添加数据磁盘。\r \r ```\r New-AzureVMConfig -Name \"$vmname1\" -InstanceSize $vmsize  -ImageName $imagename -AvailabilitySetName $av1 | \r Add-AzureProvisioningConfig -Linux -LinuxUser $vmuser -Password $vmpassword | \r Set-AzureSubnet -SubnetNames $sub1 | \r Set-AzureStaticVNetIP -IPAddress $ip1 | \r Add-AzureDataDisk -CreateNew -DiskSizeInGB $datadisksize -DiskLabel \"DataDisk\" -LUN 0 | \r New-AzureVM -ServiceName $svc -vNetName $vnet  -Location $loc \r \r New-AzureVMConfig -Name \"$vmname2\" -InstanceSize $vmsize  -ImageName $imagename -AvailabilitySetName $av1 | \r Add-AzureProvisioningConfig -Linux -LinuxUser $vmuser -Password $vmpassword | \r Set-AzureSubnet -SubnetNames $sub1 | \r Set-AzureStaticVNetIP -IPAddress $ip2 | \r Add-AzureDataDisk -CreateNew -DiskSizeInGB $datadisksize -DiskLabel \"DataDisk\" -LUN 0 | \r New-AzureVM -ServiceName $svc -vNetName $vnet  -Location $loc \r ```\r \r 创建内部负载均衡，并将虚拟机加入负载均衡。\r \r ```\r Add-AzureInternalLoadBalancer -ServiceName $svc -InternalLoadBalancerName $ilb –SubnetName $sub1 –StaticVNetIPAddress $ilbip\r Get-AzureVM –ServiceName $svc –Name $vmname1 | Add-AzureEndpoint -Name $epname1 -Protocol $prot1 -LocalPort $locport1 -PublicPort $pubport1 -LoadBalancerDistribution $ilbdist –DefaultProbe -InternalLoadBalancerName $ilb | update-AzureVM\r Get-AzureVM –ServiceName $svc –Name $vmname2 | Add-AzureEndpoint -Name $epname1 -Protocol $prot1 -LocalPort $locport1 -PublicPort $pubport1 -LoadBalancerDistribution $ilbdist –DefaultProbe -InternalLoadBalancerName $ilb | update-AzureVM\r ```\r \r 创建前端 web 虚拟机：设置网络，静态内网 IP，加入可用性集，配置负载均衡。\r \r ```\r New-AzureVMConfig -Name \"$vmname3\" -InstanceSize $vmsize  -ImageName $imagename -AvailabilitySetName $av2 | \r Add-AzureProvisioningConfig -Linux -LinuxUser $vmuser -Password $vmpassword | \r Set-AzureSubnet -SubnetNames $sub2 | \r Set-AzureStaticVNetIP -IPAddress $ip3 |  \r Add-AzureEndpoint -Name $epname2 -Protocol $prot2 -PublicPort $pubport2 -LocalPort $locport2 -LBSetName $lb -ProbePort $probeport -ProbeProtocol $prot2 -ProbeIntervalInSeconds 10 |\r New-AzureVM -ServiceName $svc -vNetName $vnet  -Location $loc \r \r New-AzureVMConfig -Name \"$vmname4\" -InstanceSize $vmsize  -ImageName $imagename -AvailabilitySetName $av2 | \r Add-AzureProvisioningConfig -Linux -LinuxUser $vmuser -Password $vmpassword | \r Set-AzureSubnet -SubnetNames $sub2 | \r Set-AzureStaticVNetIP -IPAddress $ip4 |  \r Add-AzureEndpoint -Name $epname2 -Protocol $prot2 -PublicPort $pubport2 -LocalPort $locport2 -LBSetName $lb -ProbePort $probeport -ProbeProtocol $prot2 -ProbeIntervalInSeconds 10 |\r New-AzureVM -ServiceName $svc -vNetName $vnet  -Location $loc\r ```\r \r ### ARM 模式\r \r 从该 GitHub Repo : [Azure-Customized-Resources](https://github.com/Lickkylee/Azure-Customized-Resources/tree/master/4-nodes-vm-loadbalancers-internalloadbalancer) 中部署。 \r \r ## 配置后端数据库 HA\r \r 后端数据库使用 DRBD + Pacemake + Corosync 实现 MariaDB 主备集群。  \r 其中，DRBD 实现数据的复制。管理工具 drbdadm。更多参考点击 [drbd 介绍、工作原理及脑裂故障处理](http://blog.itpub.net/28371090/viewspace-1083567/)。  \r \r Corosync 是集群引擎，管理消息和成员。Pacemaker 是集群资源管理器，管理工具 pcs。  \r CentOS 7 中，将原来的管理工具进行了改进集成，现在仅需要使用 pcs 即可管理引擎和资源，进行配置同步。  \r 如果您使用 CentOS 6，配置流程一样，但配置使用的命令参数需要调整。  \r CentOS 7 开始，由于 license 问题，mysql 数据库改成了开源的 MariaDB。  \r CentOS 7默认开启了 SeLinux 增强安全功能，为方便 demo，这里关闭该功能，生产环境中如果需要开启，在配置 DRDB 等时需要额外配置一些 SeLinux 规则，这里省略介绍。  \r \r ## 配置前准备工作\r \r 在两个节点上分别执行如下命令：\r \r 在两节点上编辑 `/etc/selinux/config`，将 `SELINUX` 改为 `disabled` ，保存文件，重启服务器。\r \r ![selunux-disabled](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/selunux-disabled.png)\r \r 用全盘做一个主分区 `/dev/sdc`, 不需要格式化成任何文件系统，该分区将由 DRBD 接管，文件系统将建立在 DRBD 设备上。\r \r ```\r # fdisk /dev/sdc\r ```\r \r 配置 yum 仓库以及后续需要使用的安装包。\r \r ```\r # wget http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm\r # rpm -ivh elrepo-release-7.0-2.el7.elrepo.noarch.rpm\r # rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-elrepo.org\r # yum repolist\r ```\r \r ## 配置DRBD\r \r 在两个节点上分别执行如下命令。\r \r 安装 DRBD 模块，安装完成后，重启服务器。\r \r ```\r # yum install kmod-drbd84 drbd84-utils\r ```\r \r 加载 DRBD 内核模块，使用 lsmod 查看是否加载成功。\r \r ```\r # modprobe drbd\r # lsmod | grep drbd\r ```\r \r ![lsmod](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/lsmod.png)\r \r 在两个节点上，新建一个DRBD 资源。  \r 命令中的 `mysqlr0`,`lqi1ecmy01`,`10.0.1.4`,`lqilecmy02`,`10.0.1.5` 部分根据自己的环境替换。\r \r ```\r # vi /etc/drbd.d/mysqlr0.res\r resource mysqlr0 {\r protocol C;\r         on lqi1ecmy01 {\r                 device /dev/drbd1;\r                 disk /dev/sdc;\r                 address 10.0.1.4:7788;\r                 meta-disk internal;\r         }\r         on lqi1ecmy02 {\r                 device /dev/drbd1;\r                 disk /dev/sdc;\r                 address 10.0.1.5:7788;\r                 meta-disk internal;\r         }\r }\r ```\r \r 初始化 DRBD 资源，在两个节点上分别执行：\r \r ```\r # drbdadm create-md mysqlr0\r ```\r \r 启动 DRBD 服务，一个节点上执行 start 命令后，立刻在另一个节点同步执行，两条命令执行完毕，DRDB 服务将成功启动。使用 status 命令查看服务状态，使用 enable 命令设置开机自启动。  \r \r ```\r # systemctl start drbd\r # systemctl status drbd\r # systemctl enable drbd\r ```\r \r 选择其中一个节点执行下面命令。命令执行成功，该节点将成为 DRBD 主节点，另一节点成为备用节点，并开始第一次状态和数据同步。\r \r ```\r # drbdadm primary mysqlr0 --force\r ```\r \r 使用下面命令查看同步状态，你可能看到 DRBD 处于 sync 状态。等待 sync 成功，两节点都变成 UptoDate 状态，再进行下一步操作。\r \r ```\r # cat /proc/drbd \r ```\r \r 或者   \r \r ```\r # drbd-overview\r ```\r \r ![drbd-overview](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/drbd-overview.png)\r \r 在创建的 DRBD 资源上创建文件系统并挂载。在主节点上执行：\r \r ```\r # mkfs.ext3 /dev/drbd1\r # mkdir /var/lib/mysql\r # mount /dev/drbd1 /var/lib/mysql/\r ```\r \r DRBD 配置完成，接下来安装 MariaDB 服务器。\r \r ## 安装 MariaDB 数据库\r \r 在主节点上执行如下命令，并初始化 mysql 安装选项。\r \r ```\r # yum -y install mariadb-server mariadb\r # service mariadb start\r # /usr/bin/mysql_secure_installation\r ```\r \r 接着在备用节点上安装数据库。首先停止主节点上相关服务：\r \r ```\r # systemctl stop mariadb.service\r # umount /var/lib/mysql/\r # drbdadm secondary mysqlr0\r ```\r \r 在另一节点上：\r \r ```\r # drbdadm primary mysqlr0\r # mount /dev/drbd1 /var/lib/mysql\r # yum install mariadb-server\r # service mariadb start\r ```\r \r 然后在该节点上登录数据库，创建 web 应用需要的数据库和用户。\r \r ```\r # mysql -u root -p\r MariaDB [(none)]> create database wordpress;\r Query OK, 1 row affected (0.04 sec)\r \r MariaDB [(none)]> create user 'wpuser'@'%' identified by 'wppassword';\r Query OK, 0 rows affected (0.00 sec)\r MariaDB [(none)]> grant all privileges on wordpress.* to 'wpuser'@'%';\r Query OK, 0 rows affected (0.00 sec)\r MariaDB [(none)]> flush privileges;\r Query OK, 0 rows affected (0.00 sec)\r MariaDB [(none)]> exit\r Bye\r ```\r \r ### 配置 Pacemaker + Corosync\r \r 在两个节点上分别执行如下命令。\r \r ```\r # yum install corosync pacemaker pcs\r # systemctl start pcsd.service\r # systemctl enable pcsd.service\r ```\r \r 为集群用户设置密码，该用户将用来在集群节点间通信，进行数据同步。\r \r ```\r # passwd hacluster\r ```\r \r 该步骤仅需要在某一节点上执行。  \r \r ```\r # pcs cluster auth lqi1ecmy01 lqi1ecmy02\r ```\r \r 创建集群，启动集群，查看集群状态。\r \r ```\r # pcs cluster setup --name mysqlcluster lqi1ecmy01 lqi1ecmy02\r # pcs cluster start –all\r # pcs status\r ```\r \r 因为虚拟机没有真正的 fence 设备，所以需要禁用 fence 功能。\r \r ```\r # pcs property set stonith-enabled=false\r ```\r \r 因为两节点集群不需要在 vote 功能，所以禁用 quorum。\r \r ```\r # pcs property set no-quorum-policy=ignore\r ```\r \r 添加集群资源，将 DRBD，文件系统和MariaDB服务纳入集群管理，并设置彼此之间的依赖关系。\r \r ```\r # pcs -f drbd_cfg resource create drbd_ha ocf:linbit:drbd drbd_resource=mysqlr0 op monitor interval=60s\r # pcs -f drbd_cfg resource master  ms_drbd_ha drbd_ha master-max=1 master-node-max=1 clone-max=2 clone-node-max=1 notify=true\r # pcs -f drbd_cfg resource create drbd_fs Filesystem device=\"/dev/drbd1\" directory=\"/var/lib/mysql\" fstype=\"ext3\"\r # pcs -f drbd_cfg resource constraint colocation add drbd_fs with ms_drbd_ha INFINITY with-rsc-role=Master\r # pcs -f drbd_cfg constraint colocation add drbd_fs with ms_drbd_ha INFINITY with-rsc-role=Master\r # pcs -f drbd_cfg constraint order promote ms_drbd_ha then start drbd_fs\r # pcs -f drbd_cfg resource create mysql_svc ocf:heartbeat:mysql binary=\"/usr/bin/mysqld_safe\" config=\"/etc/my.cnf\" datadir=\"/var/lib/mysql\" pid=\"/var/run/mariadb/mariadb.pid\" socket=\"/var/lib/mysql/mysql.sock\"  additional_parameters=\"--bind-address=0.0.0.0\" op start timeout=60s op stop timeout=60s op monitor interval=20s timeout=30s\r # pcs -f drbd_cfg constraint colocation add mysql_svc with drbd_fs INFINITY\r # pcs -f drbd_cfg constraint order drbd_fs then mysql_svc\r # pcs cluster cib-push drbd_cfg\r ```\r \r 配置好之后，查看集群运行状态。正常状态如下，若有异常，请根据错误信息进行故障排除。日志文件在 `/var/log/` 下。\r \r ```\r # pcs status\r ```\r \r ![pcs-status](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/pcs-status.png)\r \r 在两边节点上，执行下面命令设置 Corosync，Pacemaker 开机自启动。MariaDB 不需要设置，集群会根据 DRBD 主备关系自动判断在哪个节点启动该服务。\r \r ```\r # systemctl enable corosync pacemaker\r ```\r \r ## 配置前端 web LB\r \r 同样，我们需要在系统中禁用 Selinux，步骤参考前面配置 MariaDB 部分。在实际生产环境中，建议开启，因为 web 服务器和端口是曝露在公网环境中的。  \r \r 此处通过安装 Nginx + Wordpress 来演示负载均衡。下面步骤需要在两个节点上分别执行。\r \r ### 安装 nginx, PHP, mariaDB 客户端。\r \r 首先配置 yum 仓库。\r \r ```\r # vi /etc/yum.repos.d/nginx.repo\r [nginx]\r name=nginx repo\r baseurl=http://nginx.org/packages/mainline/rhel/7/$basearch/\r gpgcheck=0\r enabled=1\r # yum install mariadb nginx php php-fpm php-mysql\r ```\r \r 配置 nginx，同样根据自己的环境替换 `lqi1eha02`,`wordpress`,`wpuser`,`wppassword`,`10.0.1.10` 部分内容。\r \r ```\r # vi /etc/nginx/conf.d/default.conf\r server {\r     listen 80;\r     server_name lqi1eha02.chinacloudapp.cn;\r     access_log /usr/share/nginx/lqi1eha02.chinacloudapp.cn/logs/access.log;\r     error_log /usr/share/nginx/lqi1eha02.chinacloudapp.cn/logs/error.log;\r     location / {\r         root /usr/share/nginx/lqi1eha02.chinacloudapp.cn;\r         index index.php index.html index.htm;\r         if (-f $request_filename) {\r             expires 30d;\r             break;\r         }\r         if (!-e $request_filename) {\r         rewrite ^(.+)$ /index.php?q=$1 last;\r         }\r     }\r     location ~ .php$ {\r     fastcgi_pass   localhost:9000;  # port where FastCGI processes were spawned\r     fastcgi_index  index.php;\r     fastcgi_param  SCRIPT_FILENAME   /usr/share/nginx/lqi1eha02.chinacloudapp.cn$fastcgi_script_name;  # same path as above\r     fastcgi_param PATH_INFO               $fastcgi_script_name;\r     include /etc/nginx/fastcgi_params;\r     }\r }\r # vi /etc/php.ini\r cgi.fix_pathinfo=0\r # mkdir /usr/share/nginx/lqi1eha02.chinacloudapp.cn/\r # mkdir /usr/share/nginx/lqi1eha02.chinacloudapp.cn/logs\r ```\r \r 安装 wordpress。配置数据库连接信息。两节点上分别执行。\r \r ```\r # wget http://wordpress.org/latest.tar.gz\r # tar zxvf wordpress-4.6.1.tar.gz\r # mv wordpress/* /usr/share/nginx/lqi1eha02.chinacloudapp.cn/\r # cp /usr/share/nginx/lqi1eha02.chinacloudapp.cn/wp-config-sample.php /usr/share/nginx/lqi1eha02.chinacloudapp.cn/wp-config.php\r # vi wp-config.php\r // ** MySQL settings - You can get this info from your web host ** //\r /** The name of the database for WordPress */\r define('DB_NAME', 'wordpress');\r \r /** MySQL database username */\r define('DB_USER', 'wpuser');\r \r /** MySQL database password */\r define('DB_PASSWORD', 'wppassword');\r \r /** MySQL hostname */\r define('DB_HOST', '10.0.1.10');\r # chown +R nginx:nginx /usr/share/nginx/lqi1eha02.chinacloudapp.cn/\r # chmod +R 777 /usr/share/nginx/lqi1eha02.chinacloudapp.cn/\r ```\r \r 重启服务，使配置生效，并设置开机自启动。\r \r ```\r # systemctl restart nginx php-fpm\r # systemctl enable nginx php-fpm\r ```\r \r 通过浏览器访问 web 域名，初始化 wordpress。\r \r ![wordpress](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/wordpress.png)\r \r 这样，一个简单的 web 环境就设置好了。下面进行测试。\r \r ## 故障转移测试\r \r 我们模拟每个节点宕机的情况下，看能否正常使用 wordpress。顺序分别为：\r \r 1. mysql slave 宕机\r 2. master 宕机\r 3. nginx 中任何一个宕机\r \r 在每个节点宕机后，更新一篇帖子，再将服务集群恢复，看是否能正确更新到数据库，并显示出来。\r \r ### 数据库备用节点宕机\r \r 备用节点宕机完全不影响服务正常使用，但重新启用备用节点后，要注意观察集群服务是否恢复正常，如 pcs status, /proc/drbd。\r \r 下图显示备用节点宕机。我们更新一篇帖子：This is my second blog…(详细看最后 wordpress 截图)\r \r ![pcs-status-2](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/pcs-status-2.png)\r \r 启动备用节点后，注意观察节点状态。\r \r ![pcs-status-3](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/pcs-status-3.png)\r \r ### 主节点宕机\r \r 如下图所示，服务自动切换到备用节点。我们更新一篇帖子：this is my third blog…\r \r ![pcs-status-4](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/pcs-status-4.png)\r \r 重新启动故障节点，注意观察集群状态和 DRBD 同步状态。\r \r ![pcs-status-5](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/pcs-status-5.png)\r \r ### 任一前端 web 宕机\r \r 前端 web 采用了负载均衡，因此不论那一台宕机，服务会自动全部转移到另一节点。我们分别在每一条宕机后更新一篇帖子：This is my fourth/fifth blog….\r \r 最后，当所有节点全部启动，我们来看看是否所有帖子都能显示，如下图。\r \r ![web](./media/aog-virtual-machines-howto-lb-corosync-pacemaker-linux-ha/web.png)"}