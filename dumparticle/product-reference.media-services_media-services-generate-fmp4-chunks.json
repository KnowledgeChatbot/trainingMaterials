{"Title":"创建生成 fMP4 区块的 Azure 媒体服务编码任务","Description":"本主题介绍如何创建生成 fMP4 区块的编码任务。 将此任务用于 Media Encoder Standard 编码器时，输出资产会包含 fMP4 区块而非 ISO MP4 文件。","Content":"#  <a name=\"create-an-encoding-task-that-generates-fmp4-chunks\"></a>创建生成 fMP4 区块的编码任务  ## <a name=\"overview\"></a>概述  本主题介绍如何创建一个编码任务，以便生成分片的 MP4 (fMP4) 区块而非 ISO MP4 文件。 若要生成 fMP4 区块，请使用 **Media Encoder Standard** 编码器创建一个编码任务，并请指定 **AssetFormatOption.AdaptiveStreaming** 选项，如以下代码片段所示：            task.OutputAssets.AddNew(@\"Output Asset containing fMP4 chunks\",              options: AssetCreationOptions.None,              formatOption: AssetFormatOption.AdaptiveStreaming);   ## <a id=\"encoding_with_dotnet\"></a>使用媒体服务 .NET SDK 进行编码  以下代码示例使用媒体服务 .NET SDK 执行下列任务：  - 创建编码作业。 - 获取对 **Media Encoder Standard** 编码器的引用。 - 向作业添加一个编码任务，指定使用“自适应流式处理”预设。  - 创建一个输出资产，其中包含 fMP4 区块和 .ism 文件。 - 添加事件处理程序以检查作业进度。 - 提交作业。  #### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目  设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。   #### <a name=\"example\"></a>示例      using System;     using System.Configuration;     using System.Linq;     using Microsoft.WindowsAzure.MediaServices.Client;     using System.Threading;      namespace AdaptiveStreaming     {         class Program         {         // Read values from the App.config file.         private static readonly string _AADTenantDomain =             ConfigurationManager.AppSettings[\"AADTenantDomain\"];         private static readonly string _RESTAPIEndpoint =             ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];          // Field for service context.         private static CloudMediaContext _context = null;          static void Main(string[] args)         {             var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);             var tokenProvider = new AzureAdTokenProvider(tokenCredentials);              _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);              // Get an uploaded asset.             var asset = _context.Assets.FirstOrDefault();              // Encode and generate the output using the \"Adaptive Streaming\" preset.             EncodeToAdaptiveBitrateMP4Set(asset);              Console.ReadLine();         }         static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)         {             // Declare a new job.             IJob job = _context.Jobs.Create(\"Media Encoder Standard Job\");              // Get a media processor reference, and pass to it the name of the              // processor to use for the specific task.             IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");              // Create a task             ITask task = job.Tasks.AddNew(\"Media Encoder Standard encoding task\",             processor,             \"Adaptive Streaming\",             TaskOptions.None);              // Specify the input asset to be encoded.             task.InputAssets.Add(asset);              // Add an output asset to contain the results of the job.               // This output is specified as AssetCreationOptions.None, which              // means the output asset is not encrypted.              // It is also specified to use AssetFormatOption.AdaptiveStreaming,              // which means the output asset will contain fMP4 chunks.              task.OutputAssets.AddNew(@\"Output Asset containing fMP4 chunks\",             options: AssetCreationOptions.None,             formatOption: AssetFormatOption.AdaptiveStreaming);              job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);             job.Submit();             job.GetExecutionProgressTask(CancellationToken.None).Wait();              return job.OutputMediaAssets[0];         }         private static void JobStateChanged(object sender, JobStateChangedEventArgs e)         {             Console.WriteLine(\"Job state changed event:\");             Console.WriteLine(\"  Previous state: \" + e.PreviousState);             Console.WriteLine(\"  Current state: \" + e.CurrentState);             switch (e.CurrentState)             {             case JobState.Finished:                 Console.WriteLine();                 Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");                 break;             case JobState.Canceling:             case JobState.Queued:             case JobState.Scheduled:             case JobState.Processing:                 Console.WriteLine(\"Please wait...\\n\");                 break;             case JobState.Canceled:             case JobState.Error:                  // Cast sender as a job.                 IJob job = (IJob)sender;                  // Display or log error details as needed.                 break;             default:                 break;             }         }         private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)         {             var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).             ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();              if (processor == null)             throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));              return processor;         }         }     }    ## <a name=\"see-also\"></a>另请参阅 [媒体服务编码概述](media-services-encode-asset.md) <!--Update_Description: update code to use AAD token instead of ACS--> "}