{"Title":"使用 Java 从 Azure 事件中心接收事件","Description":"使用 Java 从事件中心接收入门","Content":"# <a name=\"receive-events-from-azure-event-hubs-using-java\"></a>使用 Java 从 Azure 事件中心接收事件\r \r ## <a name=\"introduction\"></a>介绍\r 事件中心是一个高度可缩放的引入系统，每秒可引入数百万事件，从而使应用程序能够处理和分析连接的设备和应用程序所产生的海量数据。 数据采集到事件中心后，可以使用任何实时分析提供程序或存储群集来转换和存储数据。\r \r 有关详细信息，请参阅 [事件中心概述][Event Hubs overview]。\r \r 本教程演示如何使用以 Java 编写的控制台应用程序从事件中心接收事件。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 若要完成本教程，需要具备以下先决条件：\r \r * Java 开发环境。 对于本教程，我们采用 [Eclipse](https://www.eclipse.org/)。\r * 有效的 Azure 帐户。 <br/>如果没有帐户，只需花费几分钟就能创建一个免费帐户。 有关详细信息，请参阅 <a href=\"https://www.azure.cn/pricing/1rmb-trial/\" target=\"_blank\">Azure 试用版</a>。\r \r ## <a name=\"receive-messages-with-eventprocessorhost-in-java\"></a>使用 Java 中的 EventProcessorHost 接收消息\r \r **EventProcessorHost** 是一个 Java 类，通过从事件中心管理持久检查点和并行接收来简化从事件中心接收事件的过程。 使用 EventProcessorHost，可跨多个接收方拆分事件，即使在不同节点中托管也是如此。 此示例演示如何为单一接收方使用 EventProcessorHost。\r \r ### <a name=\"create-a-storage-account\"></a>创建存储帐户\r 若要使用 EventProcessorHost，必须有一个 [Azure 存储帐户][Azure Storage account]：\r \r 1. 登录到 [Azure 门户][Azure portal]，然后单击屏幕左边的“+新建”。\r 2. 单击“存储”，并单击“存储帐户”。 在“创建存储帐户”  边栏选项卡中，键入存储帐户的名称。 填写其余字段，选择所需区域，然后单击“创建”。\r \r     ![](./media/event-hubs-dotnet-framework-getstarted-receive-eph/create-storage2.png)\r \r 3. 单击新创建的存储帐户，并单击“管理访问密钥” ：\r \r     ![](./media/event-hubs-dotnet-framework-getstarted-receive-eph/create-storage3.png)\r \r     将主访问密钥复制到临时区域，以供本教程后面使用。\r \r ### <a name=\"create-a-java-project-using-the-eventprocessor-host\"></a>EventProcessor Host 创建一个 Java 项目\r 事件中心的 Java 客户端库可用于 [Maven 中央存储库][Maven Package]中的 Maven 项目，并且可以使用 Maven 项目文件中的以下依赖项声明进行引用：    \r \r ```xml\r <dependency>\r     <groupId>com.microsoft.azure</groupId>\r     <artifactId>azure-eventhubs</artifactId>\r     <version>{VERSION}</version>\r </dependency>\r <dependency>\r     <groupId>com.microsoft.azure</groupId>\r     <artifactId>azure-eventhubs-eph</artifactId>\r     <version>{VERSION}</version>\r </dependency>\r <dependency>\r   <groupId>com.microsoft.azure</groupId>\r   <artifactId>azure-eventhubs-eph</artifactId>\r   <version>0.14.0</version>\r </dependency>\r ```\r \r 对于不同类型的生成环境，可以从 [Maven 中央存储库][Maven Package]或 [GitHub 上的版本分发点](https://github.com/Azure/azure-event-hubs/releases)显式获取最新发布的 JAR 文件。  \r \r 1. 对于下面的示例，请首先在你最喜欢的 Java 开发环境中为控制台/shell 应用程序创建一个新的 Maven 项目。 此类名为 `ErrorNotificationHandler`。     \r \r     ```java\r     import java.util.function.Consumer;\r     import com.microsoft.azure.eventprocessorhost.ExceptionReceivedEventArgs;\r \r     public class ErrorNotificationHandler implements Consumer<ExceptionReceivedEventArgs>\r     {\r         @Override\r         public void accept(ExceptionReceivedEventArgs t)\r         {\r             System.out.println(\"SAMPLE: Host \" + t.getHostname() + \" received general error notification during \" + t.getAction() + \": \" + t.getException().toString());\r         }\r     }\r     ```\r 2. 使用以下代码创建名为 `EventProcessor`的新类。\r \r     ```java\r     import com.microsoft.azure.eventhubs.EventData;\r     import com.microsoft.azure.eventprocessorhost.CloseReason;\r     import com.microsoft.azure.eventprocessorhost.IEventProcessor;\r     import com.microsoft.azure.eventprocessorhost.PartitionContext;\r \r     public class EventProcessor implements IEventProcessor\r     {\r         private int checkpointBatchingCount = 0;\r \r         @Override\r         public void onOpen(PartitionContext context) throws Exception\r         {\r             System.out.println(\"SAMPLE: Partition \" + context.getPartitionId() + \" is opening\");\r         }\r \r         @Override\r         public void onClose(PartitionContext context, CloseReason reason) throws Exception\r         {\r             System.out.println(\"SAMPLE: Partition \" + context.getPartitionId() + \" is closing for reason \" + reason.toString());\r         }\r \r         @Override\r         public void onError(PartitionContext context, Throwable error)\r         {\r             System.out.println(\"SAMPLE: Partition \" + context.getPartitionId() + \" onError: \" + error.toString());\r         }\r \r         @Override\r         public void onEvents(PartitionContext context, Iterable<EventData> messages) throws Exception\r         {\r             System.out.println(\"SAMPLE: Partition \" + context.getPartitionId() + \" got message batch\");\r             int messageCount = 0;\r             for (EventData data : messages)\r             {\r                 System.out.println(\"SAMPLE (\" + context.getPartitionId() + \",\" + data.getSystemProperties().getOffset() + \",\" +\r                         data.getSystemProperties().getSequenceNumber() + \"): \" + new String(data.getBody(), \"UTF8\"));\r                 messageCount++;\r \r                 this.checkpointBatchingCount++;\r                 if ((checkpointBatchingCount % 5) == 0)\r                 {\r                     System.out.println(\"SAMPLE: Partition \" + context.getPartitionId() + \" checkpointing at \" +\r                         data.getSystemProperties().getOffset() + \",\" + data.getSystemProperties().getSequenceNumber());\r                     context.checkpoint(data);\r                 }\r             }\r             System.out.println(\"SAMPLE: Partition \" + context.getPartitionId() + \" batch size was \" + messageCount + \" for host \" + context.getOwner());\r         }\r     }\r     ```\r 3. 使用以下代码另外创建一个名为 `EventProcessorSample` 的类。\r \r     ```java\r     import com.microsoft.azure.eventprocessorhost.*;\r     import com.microsoft.azure.servicebus.ConnectionStringBuilder;\r     import com.microsoft.azure.eventhubs.EventData;\r \r     public class EventProcessorSample\r     {\r         public static void main(String args[])\r         {\r             final String consumerGroupName = \"$Default\";\r             final String namespaceName = \"----ServiceBusNamespaceName-----\";\r             final String eventHubName = \"----EventHubName-----\";\r             final String sasKeyName = \"-----SharedAccessSignatureKeyName-----\";\r             final String sasKey = \"---SharedAccessSignatureKey----\";\r \r             final String storageAccountName = \"---StorageAccountName----\";\r             final String storageAccountKey = \"---StorageAccountKey----\";\r             final String storageConnectionString = \"DefaultEndpointsProtocol=https;AccountName=\" + storageAccountName + \";AccountKey=\" + storageAccountKey;\r \r             ConnectionStringBuilder eventHubConnectionString = new ConnectionStringBuilder(namespaceName, eventHubName, sasKeyName, sasKey);\r \r             EventProcessorHost host = new EventProcessorHost(eventHubName, consumerGroupName, eventHubConnectionString.toString(), storageConnectionString);\r \r             System.out.println(\"Registering host named \" + host.getHostName());\r             EventProcessorOptions options = new EventProcessorOptions();\r             options.setExceptionNotification(new ErrorNotificationHandler());\r             try\r             {\r                 host.registerEventProcessor(EventProcessor.class, options).get();\r             }\r             catch (Exception e)\r             {\r                 System.out.print(\"Failure while registering: \");\r                 if (e instanceof ExecutionException)\r                 {\r                     Throwable inner = e.getCause();\r                     System.out.println(inner.toString());\r                 }\r                 else\r                 {\r                     System.out.println(e.toString());\r                 }\r             }\r \r             System.out.println(\"Press enter to stop\");\r             try\r             {\r                 System.in.read();\r                 host.unregisterEventProcessor();\r \r                 System.out.println(\"Calling forceExecutorShutdown\");\r                 EventProcessorHost.forceExecutorShutdown(120);\r             }\r             catch(Exception e)\r             {\r                 System.out.println(e.toString());\r                 e.printStackTrace();\r             }\r \r             System.out.println(\"End of sample\");\r         }\r     }\r     ```\r 4. 将以下字段替换为创建事件中心和存储帐户时所使用的值。\r \r     ```java\r     final String namespaceName = \"----ServiceBusNamespaceName-----\";\r     final String eventHubName = \"----EventHubName-----\";\r \r     final String sasKeyName = \"-----SharedAccessSignatureKeyName-----\";\r     final String sasKey = \"---SharedAccessSignatureKey----\";\r \r     final String storageAccountName = \"---StorageAccountName----\"\r     final String storageAccountKey = \"---StorageAccountKey----\";\r     ```\r \r > [!NOTE]\r > 本教程使用了一个 EventProcessorHost 实例。 若要增加吞吐量，建议运行多个 EventProcessorHost 实例，最好是在单独的计算机上运行。  这也会提供冗余。 在那些情况下，为了对接收到的事件进行负载均衡，各个不同实例会自动相互协调。 如果希望多个接收方都各自处理 *全部* 事件，则必须使用 **ConsumerGroup** 概念。 从不同计算机中接收事件时，根据部署 EventProcessorHost 实例的计算机（或角色）来指定这些实例的名称可能会很有用。\r > \r > \r \r ## <a name=\"next-steps\"></a>后续步骤\r 访问以下链接可以了解有关事件中心的详细信息：\r \r * [事件中心概述](event-hubs-what-is-event-hubs.md)\r * [创建事件中心](event-hubs-create.md)\r * [事件中心常见问题](event-hubs-faq.md)\r \r <!-- Links -->\r [Event Hubs overview]: event-hubs-what-is-event-hubs.md\r [Azure Storage account]: ../storage/common/storage-create-storage-account.md\r [Azure portal]: https://portal.azure.cn\r [Maven Package]: https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22azure-eventhubs-eph%22\r \r <!-- Images -->\r [11]: ./media/service-bus-event-hubs-get-started-receive-ephjava/create-eph-csharp2.png\r [12]: ./media/service-bus-event-hubs-get-started-receive-ephjava/create-eph-csharp3.png\r \r <!--Update_Description: update meta properties, wording update, update reference link-->"}