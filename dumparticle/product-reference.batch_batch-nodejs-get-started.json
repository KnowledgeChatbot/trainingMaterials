{"Title":"教程 - 使用用于 Node.js 的 Azure Batch 客户端库","Description":"了解 Azure Batch 的基本概念，并使用 Node.js 构建简单的解决方案。","Content":"# <a name=\"get-started-with-batch-sdk-for-nodejs\"></a>用于 Node.js 的 Batch SDK 入门\r \r > [!div class=\"op_single_selector\"]\r > * [.NET](batch-dotnet-get-started.md)\r > * [Python](batch-python-tutorial.md)\r > * [Node.js](batch-nodejs-get-started.md)\r >\r >\r \r 了解使用 [Azure Batch Node.js SDK](http://azure.github.io/azure-sdk-for-node/azure-batch/latest/) 在 Node.js 中生成 Batch 客户端的基础知识。 我们采用分步方式来了解一个 Batch 应用程序的方案，然后通过 Node.js 客户端设置该方案。  \r \r ## <a name=\"prerequisites\"></a>先决条件\r 本文假设你有 Node.js 的实践知识并熟悉 Linux， 同时还假设你已设置 Azure 帐户并具有创建 Batch 和存储服务所需的访问权限。\r \r 我们建议你在完成本文概述的步骤之前，先阅读 [Azure Batch 技术概述](batch-technical-overview.md)。\r \r ## <a name=\"the-tutorial-scenario\"></a>教程方案\r 让我们了解 Batch 工作流方案。 我们有一个简单的以 Python 编写的脚本，该脚本从 Azure Blob 存储容器下载所有 csv 文件，并将其转换为 JSON。 若要并行处理多个存储帐户容器，可将脚本部署为 Azure Batch 作业。\r \r ## <a name=\"azure-batch-architecture\"></a>Azure Batch 体系结构\r 下图描绘了如何使用 Azure Batch 和 Node.js 客户端来缩放 Python 脚本。\r \r ![Azure Batch 方案](./media/batch-nodejs-get-started/BatchScenario.png)\r \r node.js 客户端通过一个准备任务（稍后详细介绍）和一系列其他任务部署 Batch 作业，具体取决于存储帐户中的容器数。 可以从 github 存储库下载脚本。\r \r - [Node.js 客户端](https://github.com/Azure/azure-batch-samples/blob/master/Node.js/GettingStarted/nodejs_batch_client_sample.js)\r - [准备任务 shell 脚本](https://github.com/Azure/azure-batch-samples/blob/master/Node.js/GettingStarted/startup_prereq.sh)\r - [将 Python csv 转换为 JSON 的处理程序](https://github.com/Azure/azure-batch-samples/blob/master/Node.js/GettingStarted/processcsv.py)\r \r ## <a name=\"build-the-application\"></a>构建应用程序\r \r 现在，让我们一步步按过程来构建 Node.js 客户端：\r \r ### <a name=\"step-1-install-azure-batch-sdk\"></a>步骤 1：安装 Azure Batch SDK\r \r 可以使用 npm install 命令安装用于 Node.js 的 Azure Batch SDK。\r \r `npm install azure-batch`\r \r 该命令安装最新版的 azure-batch Node SDK。\r \r ### <a name=\"step-2-create-an-azure-batch-account\"></a>步骤 2：创建 Azure Batch 帐户\r \r 可以通过 [Azure 门户](batch-account-create-portal.md)或命令行 ([PowerShell](batch-powershell-cmdlets-get-started.md) /[Azure CLI](/cli/overview)) 创建该帐户。\r \r 下面是通过 Azure CLI 创建该帐户的命令。\r \r 创建一个资源组。如果你已经有一个需要在其中创建 Batch 帐户的资源组，则请跳过此步骤：\r \r `az group create -n \"<resource-group-name>\" -l \"<location>\"`\r \r 接下来，创建 Azure Batch 帐户。\r \r `az batch account create -l \"<location>\"  -g \"<resource-group-name>\" -n \"<batch-account-name>\"`\r \r 每个 Batch 帐户都有其相应的访问密钥。 需要使用这些密钥才能在 Azure Batch 帐户中创建更多的资源。 对生产环境有利的做法是使用 Azure Key Vault 来存储这些密钥。 然后即可为应用程序创建服务主体。 应用程序可以使用该服务主体创建一个 OAuth 令牌，以便访问 Key Vault 中的密钥。\r \r `az batch account keys list -g \"<resource-group-name>\" -n \"<batch-account-name>\"`\r \r 复制并存储可在后续步骤中使用的密钥。\r \r ### <a name=\"step-3-create-an-azure-batch-service-client\"></a>步骤 3：创建 Azure Batch 服务客户端\r 以下代码片段首先导入 azure-batch Node.js 模块，然后创建 Batch 服务客户端。 需先使用从前一步骤复制的 Batch 帐户密钥创建 SharedKeyCredentials 对象。\r \r ```nodejs\r // Initializing Azure Batch variables\r \r var batch = require('azure-batch');\r \r var accountName = '<azure-batch-account-name>';\r \r var accountKey = '<account-key-downloaded>';\r \r var accountUrl = '<account-url>'\r \r // Create Batch credentials object using account name and account key\r \r var credentials = new batch.SharedKeyCredentials(accountName,accountKey);\r \r // Create Batch service client\r \r var batch_client = new batch.ServiceClient(credentials,accountUrl);\r \r ```\r \r Azure Batch URI 可以在 Azure 门户的“概览”选项卡中找到。 它的格式为：\r \r `https://accountname.location.batch.azure.com`\r \r 请参阅屏幕截图：\r \r ![Azure Batch URI](./media/batch-nodejs-get-started/azurebatchuri.png)\r \r \r \r ### <a name=\"step-4-create-an-azure-batch-pool\"></a>步骤 4：创建 Azure Batch 池\r Azure Batch 池包含多个 VM（也称 Batch 节点）。 Azure Batch 服务将任务部署在这些节点上并对其进行管理。 可以为池定义以下配置参数。\r \r - 虚拟机映像类型\r - 虚拟机节点大小\r - 虚拟机节点数目\r \r > [!Tip]\r > 虚拟机节点的大小和数目主要取决于需要并行运行的任务数以及任务本身。 建议通过测试来确定理想的数目和大小。\r >\r >\r \r 以下代码片段创建配置参数对象。\r \r ```nodejs\r // Creating Image reference configuration for Ubuntu Linux VM\r var imgRef = {publisher:\"Canonical\",offer:\"UbuntuServer\",sku:\"14.04.2-LTS\",version:\"latest\"}\r \r // Creating the VM configuration object with the SKUID\r var vmconfig = {imageReference:imgRef,nodeAgentSKUId:\"batch.node.ubuntu 14.04\"}\r \r // Setting the VM size to Standard F4\r var vmSize = \"STANDARD_F4\"\r \r //Setting number of VMs in the pool to 4\r var numVMs = 4\r ```\r \r > [!Tip]\r > 如需可供 Azure Batch 使用的 Linux VM 映像及其 SKU ID 的列表，请参阅[虚拟机映像列表](batch-linux-nodes.md#list-of-virtual-machine-images)。\r >\r >\r \r 定义池配置后，可以创建 Azure Batch 池。 Batch 池命令可创建 Azure 虚拟机节点并对其进行准备，使之能够接收要执行的任务。 每个池都应有一个可在后续步骤中引用的唯一 ID。\r \r 以下代码片段可创建 Azure Batch 池。\r \r ```nodejs\r // Create a unique Azure Batch pool ID\r var poolid = \"pool\" + customerDetails.customerid;\r var poolConfig = {id:poolid, displayName:poolid,vmSize:vmSize,virtualMachineConfiguration:vmconfig,targetDedicatedComputeNodes:numVms,enableAutoScale:false };\r // Creating the Pool for the specific customer\r var pool = batch_client.pool.add(poolConfig,function(error,result){\r     if(error!=null){console.log(error.response)};\r });\r ```\r \r 你可以检查所创建池的状态，确保状态为“活动”，然后再继续操作，将作业提交到该池。\r \r ```nodejs\r var cloudPool = batch_client.pool.get(poolid,function(error,result,request,response){\r         if(error == null)\r         {\r \r             if(result.state == \"active\")\r             {\r                 console.log(\"Pool is active\");\r             }\r         }\r         else\r         {\r             if(error.statusCode==404)\r             {\r                 console.log(\"Pool not found yet returned 404...\");    \r \r             }\r             else\r             {\r                 console.log(\"Error occurred while retrieving pool data\");\r             }\r         }\r         });\r ```\r \r 下面是由 pool.get 函数返回的结果对象示例。\r \r ```\r { id: 'processcsv_201721152',\r   displayName: 'processcsv_201721152',\r   url: 'https://<batch-account-name>.centralus.batch.azure.com/pools/processcsv_201721152',\r   eTag: '<eTag>',\r   lastModified: 2017-03-27T10:28:02.398Z,\r   creationTime: 2017-03-27T10:28:02.398Z,\r   state: 'active',\r   stateTransitionTime: 2017-03-27T10:28:02.398Z,\r   allocationState: 'resizing',\r   allocationStateTransitionTime: 2017-03-27T10:28:02.398Z,\r   vmSize: 'standard_a1',\r   virtualMachineConfiguration:\r    { imageReference:\r       { publisher: 'Canonical',\r         offer: 'UbuntuServer',\r         sku: '14.04.2-LTS',\r         version: 'latest' },\r      nodeAgentSKUId: 'batch.node.ubuntu 14.04' },\r   resizeTimeout:\r    { [Number: 900000]\r      _milliseconds: 900000,\r      _days: 0,\r      _months: 0,\r      _data:\r       { milliseconds: 0,\r         seconds: 0,\r         minutes: 15,\r         hours: 0,\r         days: 0,\r         months: 0,\r         years: 0 },\r      _locale:\r       Locale {\r         _calendar: [Object],\r         _longDateFormat: [Object],\r         _invalidDate: 'Invalid date',\r         ordinal: [Function: ordinal],\r         _ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\r         _relativeTime: [Object],\r         _months: [Object],\r         _monthsShort: [Object],\r         _week: [Object],\r         _weekdays: [Object],\r         _weekdaysMin: [Object],\r         _weekdaysShort: [Object],\r         _meridiemParse: /[ap]\\.?m?\\.?/i,\r         _abbr: 'en',\r         _config: [Object],\r         _ordinalParseLenient: /\\d{1,2}(th|st|nd|rd)|\\d{1,2}/ } },\r   currentDedicated: 0,\r   targetDedicated: 4,\r   enableAutoScale: false,\r   enableInterNodeCommunication: false,\r   maxTasksPerNode: 1,\r   taskSchedulingPolicy: { nodeFillType: 'Spread' } }\r ```\r \r \r ### <a name=\"step-4-submit-an-azure-batch-job\"></a>步骤 5：提交 Azure Batch 作业\r Azure Batch 作业是包含相似任务的逻辑组。 在我们的方案中，它是指“将 csv 处理成 JSON”。 这里的每个任务可能都在处理每个 Azure 存储容器中存在的 csv 文件。\r \r 这些任务会并行运行，并且跨多个节点部署，由 Azure Batch 服务进行协调。\r \r > [!Tip]\r > 可以使用 [maxTasksPerNode](http://azure.github.io/azure-sdk-for-node/azure-batch/latest/Pool.html#add) 属性指定能够在单个节点上同时运行的最大任务数。\r >\r >\r \r #### <a name=\"preparation-task\"></a>准备任务\r \r 所创建的 VM 节点是空白 Ubuntu 节点。 通常需安装一组程序作为必备组件。\r 对于 Linux 节点，通常可在实际任务运行之前使用 shell 脚本安装必备组件。 不过，也可通过任何可编程的可执行文件来完成该操作。\r 在此示例中，[shell 脚本](https://github.com/shwetams/azure-batchclient-sample-nodejs/blob/master/startup_prereq.sh)安装 Python-pip 以及用于 Python 的 Azure 存储 SDK。\r \r 可以将脚本上传到 Azure 存储帐户，并生成用于访问脚本的 SAS URI。 还可使用 Azure 存储 Node.js SDK 自动执行此过程。\r \r > [!Tip]\r > 作业的准备任务仅在需要运行特定任务的 VM 节点上运行。 如果需要在所有节点上安装必备组件，而不管在其上运行的任务是什么，则可在添加池时使用 [startTask](http://azure.github.io/azure-sdk-for-node/azure-batch/latest/Pool.html#add) 属性。 可以使用以下准备任务定义作为参考。\r >\r >\r \r 准备任务在提交 Azure Batch 作业时指定。 以下是准备任务配置参数：\r \r - **ID**：准备任务的唯一标识符\r - **commandLine**：用于执行任务可执行文件的命令行\r - **resourceFiles**：对象数组，提供运行此任务时需下载的文件的详细信息。  下面是其选项\r     - blobSource：文件的 SAS URI\r     - filePath：下载并保存文件所需的本地路径\r     - fileMode：仅适用于 Linux 节点。fileMode 采用八进制格式，默认值为 0770\r - **waitForSuccess**：如果设置为 true，该任务不会在准备任务失败的情况下运行\r - **runElevated**：如果需要提升权限才能运行该任务，则设置为 true。\r \r 以下代码片段显示了准备任务脚本配置示例：\r \r ```nodejs\r var job_prep_task_config = {id:\"installprereq\",commandLine:\"sudo sh startup_prereq.sh > startup.log\",resourceFiles:[{'blobSource':'Blob SAS URI','filePath':'startup_prereq.sh'}],waitForSuccess:true,runElevated:true}\r ```\r \r 如果不需安装任何必备组件即可运行任务，则可跳过准备任务。 以下代码创建显示名称为“process csv files”的作业。\r \r  ```nodejs\r  // Setting up Batch pool configuration\r  var pool_config = {poolId:poolid}\r  // Setting up Job configuration along with preparation task\r  var jobId = \"processcsvjob\"\r  var job_config = {id:jobId,displayName:\"process csv files\",jobPreparationTask:job_prep_task_config,poolInfo:pool_config}\r  // Adding Azure batch job to the pool\r  var job = batch_client.job.add(job_config,function(error,result){\r      if(error != null)\r      {\r          console.log(\"Error submitting job : \" + error.response);\r      }});\r ```\r \r \r ### <a name=\"step-5-submit-azure-batch-tasks-for-a-job\"></a>步骤 6：为作业提交 Azure Batch 任务\r \r 创建“process csv”作业以后，让我们创建该作业的任务。 假设我们有四个容器，则必须创建四个任务，一个容器一个任务。\r \r 如果我们查看 [Python 脚本](https://github.com/shwetams/azure-batchclient-sample-nodejs/blob/master/processcsv.py)，可以看到它接受两个参数：\r \r - container name：要从其中下载文件的存储容器\r - pattern：文件名称模式的可选参数\r \r 假设我们有四个容器，分别为“con1”、“con2”、“con3”、“con4”。以下代码显示了如何将任务提交到我们此前创建的 Azure Batch 作业“process csv”。\r \r ```nodejs\r // storing container names in an array\r var container_list = [\"con1\",\"con2\",\"con3\",\"con4\"]\r     container_list.forEach(function(val,index){           \r \r            var container_name = val;\r            var taskID = container_name + \"_process\";\r            var task_config = {id:taskID,displayName:'process csv in ' + container_name,commandLine:'python processcsv.py --container ' + container_name,resourceFiles:[{'blobSource':'<blob SAS URI>','filePath':'processcsv.py'}]}\r            var task = batch_client.task.add(poolid,task_config,function(error,result){\r                 if(error != null)\r                 {\r                     console.log(error.response);     \r                 }\r                 else\r                 {\r                     console.log(\"Task for container : \" + container_name + \"submitted successfully\");\r                 }\r \r \r \r            });\r \r     });\r ```\r \r 该代码将多个任务添加到池。 每个任务在所创建的 VM 池中的一个节点上执行。 如果任务数超出池中的 VM 数或 maxTasksPerNode 属性，则任务会等待节点可用。 此业务流程由 Azure Batch 自动处理。\r \r 门户提供了有关任务和作业状态的详细视图。 也可使用列表，获取 Azure Node SDK 中的函数。 文档[链接](http://azure.github.io/azure-sdk-for-node/azure-batch/latest/Job.html)中提供了详细信息。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r - 如果对 Batch 服务不熟悉，建议查看 [Azure Batch 功能概述](batch-api-basics.md) 一文。\r - 请查看 [Batch Node.js 参考](http://azure.github.io/azure-sdk-for-node/azure-batch/latest/)了解 Batch API。\r \r \r "}