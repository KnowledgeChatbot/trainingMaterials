{"Title":"如何通过 iOS 使用 Azure Blob 存储","Description":"使用 Azure Blob 存储（对象存储）将非结构化数据存储在云中。","Content":"# <a name=\"how-to-use-blob-storage-from-ios\"></a>如何通过 iOS 使用 Blob 存储\r [!INCLUDE [storage-selector-blob-include](../../../includes/storage-selector-blob-include.md)]\r \r [!INCLUDE [storage-try-azure-tools-blobs](../../../includes/storage-try-azure-tools-blobs.md)]\r \r ## <a name=\"overview\"></a>概述\r 本文介绍如何使用 Azure Blob 存储执行常见任务。 示例是用 Objective-C 编写的，并使用了 [用于 iOS 的 Azure 存储客户端库](https://github.com/Azure/azure-storage-ios)。 涉及的任务包括上传、列出、下载和删除 Blob。 有关 Blob 的详细信息，请参阅[后续步骤](#next-steps)部分。 也可下载 [示例应用](https://github.com/Azure/azure-storage-ios/tree/master/BlobSample) ，快速了解如何在 iOS 应用程序中使用 Azure 存储。\r \r [!INCLUDE [storage-blob-concepts-include](../../../includes/storage-blob-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../../includes/storage-create-account-include.md)]\r \r ## <a name=\"import-the-azure-storage-ios-library-into-your-application\"></a>将 Azure 存储 iOS 库导入到应用程序中\r 可使用 [Azure 存储 CocoaPod](https://cocoapods.org/pods/AZSClient) 或导入 **Framework** 文件，将 Azure 存储 iOS 库导入到应用程序。 CocoaPod 是推荐方式，因为它使集成更容易，但是通过框架文件导入对现有项目侵入性更低。\r \r 若要使用此库，需要以下各项：\r - iOS 8+\r - Xcode 7+\r \r ## <a name=\"cocoapod\"></a>CocoaPod\r 1. 如果尚未在计算机上 [安装 CocoaPods](https://guides.cocoapods.org/using/getting-started.html#toc_3) ，请打开终端窗口并运行以下命令，以实现此操作\r \r     ```shell   \r     sudo gem install cocoapods\r     ```\r \r 2. 接下来，在项目目录（包含 .xcodeproj 文件的目录）中创建名为 Podfile 的文件（无扩展名）。 将以下内容添加到 _Podfile_ 并保存。\r \r     ```ruby\r     platform :ios, '8.0'\r \r     target 'TargetName' do\r       pod 'AZSClient'\r     end\r     ```\r \r 3. 在终端窗口中，导航到项目目录并运行以下命令\r \r     ```shell    \r     pod install\r     ```\r \r 4. 如果已在 Xcode 中打开 .xcodeproj，请将其关闭。 在项目目录中打开新建的项目文件（扩展名为 .xcworkspace）。 从现在开始将使用此文件。\r \r ## <a name=\"framework\"></a>Framework\r 使用库的另一种方法是手动生成框架：\r \r 1. 首先，下载或克隆 [azure-storage-ios repo](https://github.com/azure/azure-storage-ios)。\r 2. 转到“azure-storage-ios” -> “Lib” -> “Azure 存储客户端库”，并在 Xcode 中打开 `AZSClient.xcodeproj`。\r 3. 在 Xcode 的左上方，将活动方案从“Azure 存储客户端库”更改为“Framework”。\r 4. 生成项目 (⌘+B)。 这会在桌面上创建 `AZSClient.framework` 文件。\r \r 可以通过执行以操作将框架文件导入到应用程序：\r \r 1. 在 Xcode 中创建一个新项目或打开现有项目。\r 2. 将 `AZSClient.framework` 拖放到 Xcode 项目导航器中。\r 3. 选择“需要时复制项”，并单击“完成”。\r 4. 单击左侧导航栏中的项目，并在项目编辑器顶部，单击“常规”选项卡。\r 5. 在“链接的框架和库”部分下，单击“添加”按钮 (+)。\r 6. 在已提供的库的列表中，搜索 `libxml2.2.tbd` 并将其添加到项目。\r \r ## <a name=\"import-the-library\"></a>导入该库 \r ```objc\r // Include the following import statement to use blob APIs.\r #import <AZSClient/AZSClient.h>\r ```\r \r 如果使用 Swift，则需要创建桥接头并在该位置导入 <AZSClient/AZSClient.h>：\r \r 1. 创建标头文件 `Bridging-Header.h`，并添加上述导入语句。\r 2. 转到“生成设置”选项卡，并搜索“Objective-C 桥接头文件”。\r 3. 双击“Objective-C 桥接头”字段并添加标头文件的路径：`ProjectName/Bridging-Header.h`\r 4. 生成项目 (⌘+B)，确认 Xcode 选取了该桥接头。\r 5. 开始在任何 Swift 文件中直接使用库，无需导入语句。\r \r [!INCLUDE [storage-mobile-authentication-guidance](../../../includes/storage-mobile-authentication-guidance.md)]\r \r ## <a name=\"asynchronous-operations\"></a>异步操作\r > [!NOTE]\r > 执行对服务的请求的所有方法都是异步操作。 在代码示例中，会发现这些方法都有完成处理程序。 请求完成**后**，将运行完成处理程序内的代码。 正在发出请求**时**，将运行完成处理程序后的代码。\r > \r > \r \r ## <a name=\"create-a-container\"></a>创建容器\r Azure 存储中的每个 Blob 都必须驻留在一个容器中。 以下示例演示如何在存储帐户中创建一个名为 *newcontainer*的容器（如果它尚不存在）。 在选择容器的名称时，请注意上面提到的命名规则。\r \r ```objc\r -(void)createContainer{\r     NSError *accountCreationError;\r \r     // Create a storage account object from a connection string.\r     AZSCloudStorageAccount *account = [AZSCloudStorageAccount accountFromConnectionString:@\"DefaultEndpointsProtocol=https;AccountName=your_account_name_here;AccountKey=your_account_key_here\" error:&accountCreationError];\r \r     if(accountCreationError){\r         NSLog(@\"Error in creating account.\");\r     }\r \r     // Create a blob service client object.\r     AZSCloudBlobClient *blobClient = [account getBlobClient];\r \r     // Create a local container object.\r     AZSCloudBlobContainer *blobContainer = [blobClient containerReferenceFromName:@\"newcontainer\"];\r \r     // Create container in your Storage account if the container doesn't already exist\r     [blobContainer createContainerIfNotExistsWithCompletionHandler:^(NSError *error, BOOL exists) {\r         if (error){\r             NSLog(@\"Error in creating container.\");\r         }\r     }];\r }\r ```\r \r 可通过查看 [Azure 存储资源管理器](http://storageexplorer.com) 并验证 *newcontainer* 存在于存储帐户的容器列表中来确认此操作有效。\r \r ## <a name=\"set-container-permissions\"></a>设置容器权限\r 默认情况下，容器的权限配置为 **私有** 访问权限。 但是，容器提供了几个不同的容器访问权限选项：\r \r * **私有**：仅帐户所有者可读取容器和 Blob 数据。\r * **Blob**：可以通过匿名请求读取此容器中的 Blob 数据，但容器数据不可用。 客户端无法通过匿名请求枚举容器中的 Blob。\r * **容器**：可通过匿名请求读取容器和 Blob 数据。 客户端可以通过匿名请求枚举容器中的 Blob，但无法枚举存储帐户中的容器。\r \r 以下示例演示如何创建一个具有**容器**访问权限的容器，这会允许 Internet 上的所有用户对其进行公共只读访问：\r \r ```objc\r -(void)createContainerWithPublicAccess{\r     NSError *accountCreationError;\r \r     // Create a storage account object from a connection string.\r     AZSCloudStorageAccount *account = [AZSCloudStorageAccount accountFromConnectionString:@\"DefaultEndpointsProtocol=https;AccountName=your_account_name_here;AccountKey=your_account_key_here\" error:&accountCreationError];\r \r     if(accountCreationError){\r         NSLog(@\"Error in creating account.\");\r     }\r \r     // Create a blob service client object.\r     AZSCloudBlobClient *blobClient = [account getBlobClient];\r \r     // Create a local container object.\r     AZSCloudBlobContainer *blobContainer = [blobClient containerReferenceFromName:@\"containerpublic\"];\r \r     // Create container in your Storage account if the container doesn't already exist\r     [blobContainer createContainerIfNotExistsWithAccessType:AZSContainerPublicAccessTypeContainer requestOptions:nil operationContext:nil completionHandler:^(NSError *error, BOOL exists){\r         if (error){\r             NSLog(@\"Error in creating container.\");\r         }\r     }];\r }\r ```\r \r ## <a name=\"upload-a-blob-into-a-container\"></a>将 Blob 上传到容器中\r 如 [Blob 服务概念](#blob-service-concepts) 部分中所述，Blob 存储提供了三种不同类型的 blob：块 blob、追加 blob 和页 blob。 Azure 存储 iOS 库支持所有三种 blob。 大多数情况下，推荐使用块 Blob 类型。\r \r 以下示例演示如何从 NSString 上传块 Blob。 如果此容器中已存在同名的 Blob，则覆盖该 Blob 的内容。\r \r ```objc\r -(void)uploadBlobToContainer{\r     NSError *accountCreationError;\r \r     // Create a storage account object from a connection string.\r     AZSCloudStorageAccount *account = [AZSCloudStorageAccount accountFromConnectionString:@\"DefaultEndpointsProtocol=https;AccountName=your_account_name_here;AccountKey=your_account_key_here;EndpointSuffix=core.chinacloudapi.cn\" error:&accountCreationError];\r \r     if(accountCreationError){\r         NSLog(@\"Error in creating account.\");\r     }\r \r     // Create a blob service client object.\r     AZSCloudBlobClient *blobClient = [account getBlobClient];\r \r     // Create a local container object.\r     AZSCloudBlobContainer *blobContainer = [blobClient containerReferenceFromName:@\"containerpublic\"];\r \r     [blobContainer createContainerIfNotExistsWithAccessType:AZSContainerPublicAccessTypeContainer requestOptions:nil operationContext:nil completionHandler:^(NSError *error, BOOL exists)\r         {\r             if (error){\r                 NSLog(@\"Error in creating container.\");\r             }\r             else{\r                 // Create a local blob object\r                 AZSCloudBlockBlob *blockBlob = [blobContainer blockBlobReferenceFromName:@\"sampleblob\"];\r \r                 // Upload blob to Storage\r                 [blockBlob uploadFromText:@\"This text will be uploaded to Blob Storage.\" completionHandler:^(NSError *error) {\r                     if (error){\r                         NSLog(@\"Error in creating blob.\");\r                     }\r                 }];\r             }\r         }];\r }\r ```\r \r 可以通过查看 [Azure 存储资源管理器](http://storageexplorer.com)并验证容器 containerpublic 是否包含该 Blob sampleblob 来确认此操作是否正常工作。 在此示例中，使用了公共容器，因此还可以通过转到 Blob URI 来验证此应用程序是否正常工作：\r \r     https://nameofyourstorageaccount.blob.core.chinacloudapi.cn/containerpublic/sampleblob\r \r 除从 NSString 上传块 Blob 外，NSData、NSInputStream 或本地文件也存在类似的方法。\r \r ## <a name=\"list-the-blobs-in-a-container\"></a>列出容器中的 Blob\r 以下示例演示如何列出容器中的所有 Blob。 执行此操作时，应注意以下参数：     \r \r * **continuationToken** - 继续标记表示列出操作应开始的位置。 如果未提供标记，它将从开头列出 blob。 可以列出任意数目的 Blob，从零到最大集。 即使此方法返回零个结果，如果 `results.continuationToken` 不为空，则服务中也可能存在更多 blob 未列出。\r * **prefix** - 可以指定用于 blob 列出的前缀。 将仅列出以该前缀开头的 Blob。\r * **useFlatBlobListing** - 如 [命名和引用容器和 blob](#naming-and-referencing-containers-and-blobs) 部分中所述，虽然 Blob 服务是平面存储方案，但可以通过命名具有路径信息的 blob 来创建虚拟层次结构。 但是，目前不支持非平面列表。 该功能即将推出。 目前，此值应为 **YES**。\r * **blobListingDetails** - 可以指定在列出 blob 时要包含哪些项\r   * _AZSBlobListingDetailsNone_：仅列出已提交的 Blob，不返回 Blob 元数据。\r   * _AZSBlobListingDetailsSnapshots_：列出已提交的 blob 和 blob 快照。\r   * _AZSBlobListingDetailsMetadata_：检索列表中返回的每个 Blob 的 Blob 元数据。\r   * _AZSBlobListingDetailsUncommittedBlobs_：列出已提交和未提交的 blob。\r   * _AZSBlobListingDetailsCopy_：在列表中包括复制属性。\r   * _AZSBlobListingDetailsAll_：列出所有可用的已提交 Blob、未提交 Blob 和快照，并返回这些 Blob 的所有元数据和复制状态。\r * **maxResults** - 此操作可返回的结果的最大数目。 使用 -1 以不设置限制。\r * **completionHandler** - 要使用列表操作的结果执行的代码块。\r \r 在此示例中，帮助器方法用于在每次返回继续标记时递归调用列出 Blob 方法。\r \r ```objc\r -(void)listBlobsInContainer{\r     NSError *accountCreationError;\r \r     // Create a storage account object from a connection string.\r   AZSCloudStorageAccount *account = [AZSCloudStorageAccount accountFromConnectionString:@\"DefaultEndpointsProtocol=https;AccountName=your_account_name_here;AccountKey=your_account_key_here;EndpointSuffix=core.chinacloudapi.cn\" error:&accountCreationError];\r \r     if(accountCreationError){\r         NSLog(@\"Error in creating account.\");\r     }\r \r     // Create a blob service client object.\r     AZSCloudBlobClient *blobClient = [account getBlobClient];\r \r     // Create a local container object.\r     AZSCloudBlobContainer *blobContainer = [blobClient containerReferenceFromName:@\"containerpublic\"];\r \r     //List all blobs in container\r     [self listBlobsInContainerHelper:blobContainer continuationToken:nil prefix:nil blobListingDetails:AZSBlobListingDetailsAll maxResults:-1 completionHandler:^(NSError *error) {\r         if (error != nil){\r             NSLog(@\"Error in creating container.\");\r         }\r     }];\r }\r \r //List blobs helper method\r -(void)listBlobsInContainerHelper:(AZSCloudBlobContainer *)container continuationToken:(AZSContinuationToken *)continuationToken prefix:(NSString *)prefix blobListingDetails:(AZSBlobListingDetails)blobListingDetails maxResults:(NSUInteger)maxResults completionHandler:(void (^)(NSError *))completionHandler\r {\r     [container listBlobsSegmentedWithContinuationToken:continuationToken prefix:prefix useFlatBlobListing:YES blobListingDetails:blobListingDetails maxResults:maxResults completionHandler:^(NSError *error, AZSBlobResultSegment *results) {\r         if (error)\r         {\r             completionHandler(error);\r         }\r         else\r         {\r             for (int i = 0; i < results.blobs.count; i++) {\r                 NSLog(@\"%@\",[(AZSCloudBlockBlob *)results.blobs[i] blobName]);\r             }\r             if (results.continuationToken)\r             {\r                 [self listBlobsInContainerHelper:container continuationToken:results.continuationToken prefix:prefix blobListingDetails:blobListingDetails maxResults:maxResults completionHandler:completionHandler];\r             }\r             else\r             {\r                 completionHandler(nil);\r             }\r         }\r     }];\r }\r ```\r \r ## <a name=\"download-a-blob\"></a>下载 Blob\r 以下示例演示如何将 blob 下载到 NSString 对象中。\r \r ```objc\r -(void)downloadBlobToString{\r     NSError *accountCreationError;\r \r     // Create a storage account object from a connection string.\r     AZSCloudStorageAccount *account = [AZSCloudStorageAccount accountFromConnectionString:@\"DefaultEndpointsProtocol=https;AccountName=your_account_name_here;AccountKey=your_account_key_here;EndpointSuffix=core.chinacloudapi.cn\" error:&accountCreationError];\r \r     if(accountCreationError){\r         NSLog(@\"Error in creating account.\");\r     }\r \r     // Create a blob service client object.\r     AZSCloudBlobClient *blobClient = [account getBlobClient];\r \r     // Create a local container object.\r     AZSCloudBlobContainer *blobContainer = [blobClient containerReferenceFromName:@\"containerpublic\"];\r \r     // Create a local blob object\r     AZSCloudBlockBlob *blockBlob = [blobContainer blockBlobReferenceFromName:@\"sampleblob\"];\r \r     // Download blob\r     [blockBlob downloadToTextWithCompletionHandler:^(NSError *error, NSString *text) {\r         if (error) {\r             NSLog(@\"Error in downloading blob\");\r         }\r         else{\r             NSLog(@\"%@\",text);\r         }\r     }];\r }\r ```\r \r ## <a name=\"delete-a-blob\"></a>删除 Blob\r 以下示例说明如何删除 Blob。\r \r ```objc\r -(void)deleteBlob{\r     NSError *accountCreationError;\r \r     // Create a storage account object from a connection string.\r     AZSCloudStorageAccount *account = [AZSCloudStorageAccount accountFromConnectionString:@\"DefaultEndpointsProtocol=https;AccountName=your_account_name_here;AccountKey=your_account_key_here;EndpointSuffix=core.chinacloudapi.cn\" error:&accountCreationError];\r \r     if(accountCreationError){\r         NSLog(@\"Error in creating account.\");\r     }\r \r     // Create a blob service client object.\r     AZSCloudBlobClient *blobClient = [account getBlobClient];\r \r     // Create a local container object.\r     AZSCloudBlobContainer *blobContainer = [blobClient containerReferenceFromName:@\"containerpublic\"];\r \r     // Create a local blob object\r     AZSCloudBlockBlob *blockBlob = [blobContainer blockBlobReferenceFromName:@\"sampleblob1\"];\r \r     // Delete blob\r     [blockBlob deleteWithCompletionHandler:^(NSError *error) {\r         if (error) {\r             NSLog(@\"Error in deleting blob.\");\r         }\r     }];\r }\r ```\r \r ## <a name=\"delete-a-blob-container\"></a>删除 Blob 容器\r 以下示例说明如何删除容器。\r \r ```objc\r -(void)deleteContainer{\r     NSError *accountCreationError;\r \r     // Create a storage account object from a connection string.\r     AZSCloudStorageAccount *account = [AZSCloudStorageAccount accountFromConnectionString:@\"DefaultEndpointsProtocol=https;AccountName=your_account_name_here;AccountKey=your_account_key_here;EndpointSuffix=core.chinacloudapi.cn\" error:&accountCreationError];\r \r     if(accountCreationError){\r         NSLog(@\"Error in creating account.\");\r     }\r \r     // Create a blob service client object.\r     AZSCloudBlobClient *blobClient = [account getBlobClient];\r \r     // Create a local container object.\r     AZSCloudBlobContainer *blobContainer = [blobClient containerReferenceFromName:@\"containerpublic\"];\r \r     // Delete container\r     [blobContainer deleteContainerIfExistsWithCompletionHandler:^(NSError *error, BOOL success) {\r         if(error){\r             NSLog(@\"Error in deleting container\");\r         }\r     }];\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 既已了解如何从 iOS 使用 Blob 存储，可单击以下链接详细了解 iOS 库和存储服务。\r \r * [Azure Storage Client Library for iOS（适用于 iOS 的 Azure 存储客户端库）](https://github.com/azure/azure-storage-ios)\r * [Azure 存储 iOS 参考文档](http://azure.github.io/azure-storage-ios/)\r * [Azure 存储服务 REST API](https://msdn.microsoft.com/library/azure/dd179355.aspx)\r * [Azure 存储团队博客](http://blogs.msdn.com/b/windowsazurestorage)\r \r 如果对此库有任何疑问，可随时将问题发布到我们的 [MSDN Azure 论坛](https://social.msdn.microsoft.com/Forums/zh-CN/home?forum=windowsazurezhchs&filter=alltypes&sort=lastpostdesc)或 [Stack Overflow](http://stackoverflow.com/questions/tagged/windows-azure-storage+or+windows-azure-storage+or+azure-storage-blobs+or+azure-storage-tables+or+azure-table-storage+or+windows-azure-queues+or+azure-storage-queues+or+azure-storage-emulator+or+azure-storage-files)。\r \r <!--Update_Description: wording update-->\r "}