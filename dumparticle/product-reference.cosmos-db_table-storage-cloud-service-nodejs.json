{"Title":"Azure 表存储：生成 Web 应用 Node.js","Description":"本教程以“使用 Express 构建 Web 应用程序”教程为基础，演示如何添加 Azure 存储服务和 Azure 模块。","Content":"# <a name=\"azure-table-storage-nodejs-web-application\"></a>Azure 表存储：Node.js Web 应用程序\r [!INCLUDE [storage-table-cosmos-db-tip-include](../../includes/storage-table-cosmos-db-tip-include.md)]\r \r ## <a name=\"overview\"></a>概述\r 本教程通过用于 Node.js 的 Azure 客户端库与数据管理服务配合使用，来扩展在[使用 Express 生成 Node.js Web 应用程序]教程中创建的应用程序。 将扩展应用程序以创建可部署到 Azure 的基于 Web 的任务列表应用程序。 用户可以通过任务列表来检索任务、添加新任务以及将任务标记为已完成。\r \r 任务项存储在 Azure 存储中。 Azure 存储提供了具有容错能力且可用性非常好的非结构化数据存储。 Azure 存储包含一些可用来存储和访问数据的数据结构。 可以通过用于 Node.js 的 Azure SDK 中包含的 API 或通过 REST API 来使用存储服务。 有关详细信息，请参阅 [在 Azure 中存储和访问数据]。\r \r 本教程假定已完成 [Node.js Web 应用程序]和[使用 Express 的 Node.js][使用 Express 生成 Node.js Web 应用程序] 教程。\r \r 其中包含以下信息：\r \r * 如何操作 Jade 模板引擎\r * 如何操作 Azure 数据管理服务\r \r 以下屏幕截图显示已完成的应用程序：\r \r ![Internet Explorer 中已完成的网页](./media/table-storage-cloud-service-nodejs/getting-started-1.png)\r \r ## <a name=\"setting-storage-credentials-in-webconfig\"></a>在 Web.Config 中设置存储凭据\r 必须传入存储凭据才能访问 Azure 存储。 为此，可利用 web.config 应用程序设置。\r web.config 设置作为环境变量传递给 Node，并再由 Azure SDK 进行读取。\r \r > [!NOTE]\r > 仅在将应用程序部署到 Azure 时才使用存储凭据。 应用程序在模拟器中运行时会使用存储模拟器。\r >\r >\r \r 执行下列步骤可检索存储帐户凭据并将这些凭据添加到 web.config 设置中：\r \r 1. 如果尚未打开 Azure PowerShell，请通过“开始”菜单展开“所有程序”、“Azure”，右键单击“Azure PowerShell”，然后选择“以管理员身份运行”启动 Azure PowerShell。\r 2. 将目录更改到包含应用程序的文件夹。 例如，C:\\\\node\\\\tasklist\\\\WebRole1。\r 3. 在 Azure Powershell 窗口中，输入以下 cmdlet 以检索存储帐户信息：\r \r     ```powershell\r     PS C:\\node\\tasklist\\WebRole1> Get-AzureStorageAccounts\r     ```\r \r    上述 cmdlet 可以检索与托管服务关联的存储帐户和帐户密钥的列表。\r \r    > [!NOTE]\r    > 由于在部署服务时 Azure SDK 会创建一个存储帐户，因此在前面的指南中部署应用程序之后应当已存在一个存储帐户。\r    >\r    >\r 4. 打开 **ServiceDefinition.csdef** 文件，该文件包含将应用程序部署到 Azure 时所使用的环境设置：\r \r     ```powershell\r     PS C:\\node\\tasklist> notepad ServiceDefinition.csdef\r     ```\r \r 5. 在 **Environment** 元素下插入以下块，使用用于部署的存储帐户的帐户名称和主密钥替换 {STORAGE ACCOUNT} 和 {STORAGE ACCESS KEY}：\r \r   <Variable name=\"AZURE_STORAGE_ACCOUNT\" value=\"{STORAGE ACCOUNT}\" />\r   <Variable name=\"AZURE_STORAGE_ACCESS_KEY\" value=\"{STORAGE ACCESS KEY}\" />\r \r    ![web.cloud.config 文件内容](./media/table-storage-cloud-service-nodejs/node37.png)\r \r 6. 保存该文件并关闭记事本。\r \r ### <a name=\"install-additional-modules\"></a>安装其他模块\r 1. 使用以下命令在本地安装 [azure]、[node-uuid]、[nconf] 和 [async] 模块，并将它们的一个条目保存到 package.json 文件：\r \r   ```powershell\r   PS C:\\node\\tasklist\\WebRole1> npm install azure-storage node-uuid async nconf --save\r   ```\r \r   此命令的输出看上去应如下所示：\r \r   ```\r   node-uuid@1.4.1 node_modules\\node-uuid\r \r   nconf@0.6.9 node_modules\\nconf\r   ├── ini@1.1.0\r   ├── async@0.2.9\r   └── optimist@0.6.0 (wordwrap@0.0.2, minimist@0.0.8)\r \r   azure-storage@0.1.0 node_modules\\azure-storage\r   ├── extend@1.2.1\r   ├── xmlbuilder@0.4.3\r   ├── mime@1.2.11\r   ├── underscore@1.4.4\r   ├── validator@3.1.0\r   ├── node-uuid@1.4.1\r   ├── xml2js@0.2.7 (sax@0.5.2)\r   └── request@2.27.0 (json-stringify-safe@5.0.0, tunnel-agent@0.3.0, aws-sign@0.3.0, forever-agent@0.5.2, qs@0.6.6, oauth-sign@0.3.0, cookie-jar@0.3.0, hawk@1.0.0, form-data@0.1.3, http-signature@0.10.0)\r   ```\r \r ## <a name=\"using-the-table-service-in-a-node-application\"></a>在 Node 应用程序中使用表服务\r 本部分通过添加一个包含任务模型的 **task.js** 文件来扩展 **express** 命令创建的基本应用程序。 修改现有 **app.js** 并创建使用该模型的新 **tasklist.js** 文件。\r \r ### <a name=\"create-the-model\"></a>创建模型\r 1. 在 WebRole1 目录中，创建一个名为 models 的新目录。\r 2. 在 **models** 目录中，创建一个名为 **task.js** 的新文件。 此文件包含应用程序创建的任务的模型。\r 3. 在 **task.js** 文件的开头，添加以下代码来引用所需的库：\r \r     ```nodejs\r     var azure = require('azure-storage');\r     var uuid = require('node-uuid');\r     var entityGen = azure.TableUtilities.entityGenerator;\r     ```\r \r 4. 接下来，添加代码以定义和导出 Task 对象。 Task 对象负责与表连接。\r \r     ```nodejs\r     module.exports = Task;\r \r     function Task(storageClient, tableName, partitionKey) {\r       this.storageClient = storageClient;\r       this.tableName = tableName;\r       this.partitionKey = partitionKey;\r       this.storageClient.createTableIfNotExists(tableName, function tableCreated(error) {\r         if(error) {\r           throw error;\r         }\r       });\r     };\r     ```\r \r 5. 接下来，添加以下代码来定义 Task 对象的其他方法，这些方法允许与表中存储的数据交互：\r \r     ```nodejs\r     Task.prototype = {\r       find: function(query, callback) {\r         self = this;\r         self.storageClient.queryEntities(query, function entitiesQueried(error, result) {\r           if(error) {\r             callback(error);\r           } else {\r             callback(null, result.entries);\r           }\r         });\r       },\r \r       addItem: function(item, callback) {\r         self = this;\r         // use entityGenerator to set types\r         // NOTE: RowKey must be a string type, even though\r         // it contains a GUID in this example.\r         var itemDescriptor = {\r           PartitionKey: entityGen.String(self.partitionKey),\r           RowKey: entityGen.String(uuid()),\r           name: entityGen.String(item.name),\r           category: entityGen.String(item.category),\r           completed: entityGen.Boolean(false)\r         };\r \r         self.storageClient.insertEntity(self.tableName, itemDescriptor, function entityInserted(error) {\r           if(error){\r             callback(error);\r           }\r           callback(null);\r         });\r       },\r \r       updateItem: function(rKey, callback) {\r         self = this;\r         self.storageClient.retrieveEntity(self.tableName, self.partitionKey, rKey, function entityQueried(error, entity) {\r           if(error) {\r             callback(error);\r           }\r           entity.completed._ = true;\r           self.storageClient.updateEntity(self.tableName, entity, function entityUpdated(error) {\r             if(error) {\r               callback(error);\r             }\r             callback(null);\r           });\r         });\r       }\r     }\r     ```\r \r 6. 保存并关闭 **task.js** 文件。\r \r ### <a name=\"create-the-controller\"></a>创建控制器\r 1. 在 WebRole1/routes 目录中，创建一个名为 **tasklist.js** 的新文件，并在文本编辑器中将其打开。\r 2. 将以下代码添加到 **tasklist.js**。 此代码加载 **tasklist.js** 使用的 azure 和 async 模块，并定义 **TaskList** 函数，会向该函数传递我们之前定义的 **Task** 对象的一个实例：\r \r     ```nodejs\r     var azure = require('azure-storage');\r     var async = require('async');\r \r     module.exports = TaskList;\r \r     function TaskList(task) {\r       this.task = task;\r     }\r     ```\r \r 3. 继续向 tasklist.js 文件添加用于 showTasks、addTask 和 completeTasks 的方法：\r \r     ```nodejs\r     TaskList.prototype = {\r       showTasks: function(req, res) {\r         self = this;\r         var query = azure.TableQuery()\r           .where('completed eq ?', false);\r         self.task.find(query, function itemsFound(error, items) {\r           res.render('index',{title: 'My ToDo List ', tasks: items});\r         });\r       },\r \r       addTask: function(req,res) {\r         var self = this\r         var item = req.body.item;\r         self.task.addItem(item, function itemAdded(error) {\r           if(error) {\r             throw error;\r           }\r           res.redirect('/');\r         });\r       },\r \r       completeTask: function(req,res) {\r         var self = this;\r         var completedTasks = Object.keys(req.body);\r         async.forEach(completedTasks, function taskIterator(completedTask, callback) {\r           self.task.updateItem(completedTask, function itemsUpdated(error) {\r             if(error){\r               callback(error);\r             } else {\r               callback(null);\r             }\r           });\r         }, function goHome(error){\r           if(error) {\r             throw error;\r           } else {\r             res.redirect('/');\r           }\r         });\r       }\r     }\r     ```\r \r 4. 保存 **tasklist.js** 文件。\r \r ### <a name=\"modify-appjs\"></a>修改 app.js\r 1. 在 WebRole1 目录中，用文本编辑器打开 app.js 文件。\r 2. 在该文件的开头，添加以下内容来加载 azure 模块并设置表名称和分区键：\r \r     ```nodejs\r     var azure = require('azure-storage');\r     var tableName = 'tasks';\r     var partitionKey = 'hometasks';\r     ```\r \r 3. 在 app.js 文件中，向下滚动到以下行：\r \r     ```nodejs\r     app.use('/', routes);\r     app.use('/users', users);\r     ```\r \r     将上面的行替换为以下代码。 此代码通过连接到存储帐户来初始化 <strong>Task</strong> 的实例。 <strong>Task</strong> 传递给 <strong>TaskList</strong>，后者使用它来与表服务通信：\r \r     ```nodejs\r     var TaskList = require('./routes/tasklist');\r     var Task = require('./models/task');\r     var task = new Task(azure.createTableService(), tableName, partitionKey);\r     var taskList = new TaskList(task);\r \r     app.get('/', taskList.showTasks.bind(taskList));\r     app.post('/addtask', taskList.addTask.bind(taskList));\r     app.post('/completetask', taskList.completeTask.bind(taskList));\r     ```\r \r 4. 保存 **app.js** 文件。\r \r ### <a name=\"modify-the-index-view\"></a>修改索引视图\r 1. 将目录更改为 views 目录，并在文本编辑器中打开 index.jade 文件。\r 2. 将 **index.jade** 文件的内容替换为以下代码。 此代码会定义用于显示现有任务的视图，以及用于添加新任务和将现有任务标记为已完成的表单。\r \r     ```\r     extends layout\r \r     block content\r       h1= title\r       br\r \r       form(action=\"/completetask\", method=\"post\")\r         table.table.table-striped.table-bordered\r           tr\r             td Name\r             td Category\r             td Date\r             td Complete\r           if tasks != []\r             tr\r               td\r           else\r             each task in tasks\r               tr\r                 td #{task.name._}\r                 td #{task.category._}\r                 - var day   = task.Timestamp._.getDate();\r                 - var month = task.Timestamp._.getMonth() + 1;\r                 - var year  = task.Timestamp._.getFullYear();\r                 td #{month + \"/\" + day + \"/\" + year}\r                 td\r                   input(type=\"checkbox\", name=\"#{task.RowKey._}\", value=\"#{!task.completed._}\", checked=task.completed._)\r         button.btn(type=\"submit\") Update tasks\r       hr\r       form.well(action=\"/addtask\", method=\"post\")\r         label Item Name:\r         input(name=\"item[name]\", type=\"textbox\")\r         label Item Category:\r         input(name=\"item[category]\", type=\"textbox\")\r         br\r         button.btn(type=\"submit\") Add item\r     ```\r \r 3. 保存并关闭 **index.jade** 文件。\r \r ### <a name=\"modify-the-global-layout\"></a>修改全局布局\r **views** 目录中的 **layout.jade** 文件用作其他 **.jade** 文件的全局模板。 在此步骤中，修改 **layout.jade** 文件以使用 [Twitter Bootstrap](https://github.com/twbs/bootstrap)（一个可以轻松设计美观网站的工具包）。\r \r 1. 下载并提取 [Twitter Bootstrap](http://getbootstrap.com/) 的文件。 将 bootstrap.min.css 文件从 bootstrap\\\\dist\\\\css 文件夹复制到 tasklist 应用程序的 public\\\\stylesheets 目录中。\r 2. 在 **views** 文件夹中，用文本编辑器打开 **layout.jade** 文件并将其内容替换为以下代码：\r \r     doctype html  html    head      title= title      link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')      link(rel='stylesheet', href='/stylesheets/style.css')    body.app      nav.navbar.navbar-default        div.navbar-header          a.navbar-brand(href='/') My Tasks      block content\r \r 3. 保存 **layout.jade** 文件。\r \r ### <a name=\"running-the-application-in-the-emulator\"></a>在模拟器中运行应用程序\r 使用以下命令在模拟器中启动应用程序。\r \r ```powershell\r PS C:\\node\\tasklist\\WebRole1> start-azureemulator -launch\r ```\r \r 浏览器会打开并显示以下页面：\r \r ![标题为 My Task List 的网页，其中所含的表包含任务和用于添加新任务的字段。](./media/table-storage-cloud-service-nodejs/node44.png)\r \r 使用窗体添加项，或通过将其标记为完成来删除现有项。\r \r ## <a name=\"publishing-the-application-to-azure\"></a>将应用程序发布到 Azure\r 在 Windows PowerShell 窗口中，调用以下 cmdlet 将托管服务重新部署到 Azure。\r \r ```powershell\r PS C:\\node\\tasklist\\WebRole1> Publish-AzureServiceProject -name myuniquename -location datacentername -launch\r ```\r \r 将 myuniquename 替换为此应用程序的唯一名称。 将 datacentername 替换为 Azure 数据中心的名称，例如“中国北部”。\r \r 部署完成后，会看到如下响应：\r \r ```\r   PS C:\\node\\tasklist> publish-azureserviceproject -servicename tasklist -location \"China North\"\r   WARNING: Publishing tasklist to Azure. This may take several minutes...\r   WARNING: 2:18:42 PM - Preparing runtime deployment for service 'tasklist'\r   WARNING: 2:18:42 PM - Verifying storage account 'tasklist'...\r   WARNING: 2:18:43 PM - Preparing deployment for tasklist with Subscription ID: 65a1016d-0f67-45d2-b838-b8f373d6d52e...\r   WARNING: 2:19:01 PM - Connecting...\r   WARNING: 2:19:02 PM - Uploading Package to storage service larrystore...\r   WARNING: 2:19:40 PM - Upgrading...\r   WARNING: 2:22:48 PM - Created Deployment ID: b7134ab29b1249ff84ada2bd157f296a.\r   WARNING: 2:22:48 PM - Initializing...\r   WARNING: 2:22:49 PM - Instance WebRole1_IN_0 of role WebRole1 is ready.\r   WARNING: 2:22:50 PM - Created Website URL: http://tasklist.chinacloudapp.cn/.\r ```\r \r 由于在前面的 cmdlet 中指定了 **-launch** 选项，因此在发布完成后，浏览器会打开并显示正在 Azure 中运行的应用程序。\r \r ![浏览器窗口中显示 My Task List 页面。 URL 表明该页面现在托管在 Azure 上。](./media/table-storage-cloud-service-nodejs/getting-started-1.png)\r \r ## <a name=\"stopping-and-deleting-your-application\"></a>停止并删除应用程序\r 在部署应用程序后，可能希望禁用它，以避免在试用期内产生费用，或者生成和部署其他应用程序。\r \r Azure 按使用的服务器小时数对 Web 角色实例进行计费。\r 应用程序部署之后就会开始使用服务器时间，即使相关实例并未运行且处于停止状态也是如此。\r \r 以下步骤演示了如何停止和删除应用程序。\r \r 1. 在 Windows PowerShell 窗口中，使用以下 cmdlet 以停止上一节中创建的服务部署：\r \r     ```powershell\r     PS C:\\node\\tasklist\\WebRole1> Stop-AzureService\r     ```\r \r    停止服务可能需要花费几分钟时间。 在服务停止时，会收到一条指示服务已停止的消息。\r \r 2. 若要删除服务，请调用以下 cmdlet：\r \r     ```powershell\r     PS C:\\node\\tasklist\\WebRole1> Remove-AzureService contosotasklist\r     ```\r \r    在出现提示时，输入 **Y** 以删除服务。\r \r    删除服务可能需要花费几分钟时间。 删除服务后，会收到一条指示服务已被删除的消息。\r \r [使用 Express 生成 Node.js Web 应用程序]: /develop/nodejs/tutorials/web-app-with-express/\r [在 Azure 中存储和访问数据]: http://msdn.microsoft.com/library/azure/gg433040.aspx\r [Node.js Web 应用程序]: http://azure.microsoft.com/azure/cloud-services/cloud-services-nodejs-develop-deploy-app\r \r <!--Update_Description: update meta properties, update link-->"}