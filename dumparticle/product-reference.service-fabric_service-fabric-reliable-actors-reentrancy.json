{"Title":"基于执行组件的 Azure 微服务中的重新进入","Description":"Service Fabric Reliable Actors 的可重入性简介","Content":"# <a name=\"reliable-actors-reentrancy\"></a>Reliable Actors 可重入性\r 默认情况下，Reliable Actors 运行时允许基于逻辑调用上下文的可重入性。 这使执行组件在处于相同调用上下文链中时可重入。 例如，如果执行组件 A 将消息发送给执行组件 B，而后者将消息发送给执行组件 C。在处理消息的过程中，如果执行组件 C 调用执行组件 A，则允许消息可重入。 属于不同调用上下文的任何其他消息会在执行组件 A 上受阻，直到它完成处理。\r \r 有两个选项可用于 `ActorReentrancyMode` 枚举中定义的执行组件重新进入：\r \r * `LogicalCallContext`（默认行为）\r * `Disallowed` - 禁用重新进入\r \r ```csharp\r public enum ActorReentrancyMode\r {\r     LogicalCallContext = 1,\r     Disallowed = 2\r }\r ```\r ```Java\r public enum ActorReentrancyMode\r {\r     LogicalCallContext(1),\r     Disallowed(2)\r }\r ```\r 可在注册过程中在 `ActorService`的设置中配置重新进入。 该设置适用于执行组件服务中创建的所有执行组件实例。\r \r 以下示例演示了将重入模式设置为 `ActorReentrancyMode.Disallowed` 的执行组件服务。 在这种情况下，如果执行组件向另一个执行组件发送可重入消息，则会引发类型为 `FabricException` 的异常。\r \r ```csharp\r static class Program\r {\r     static void Main()\r     {\r         try\r         {\r             ActorRuntime.RegisterActorAsync<Actor1>(\r                 (context, actorType) => new ActorService(\r                     context,\r                     actorType, () => new Actor1(),\r                     settings: new ActorServiceSettings()\r                     {\r                         ActorConcurrencySettings = new ActorConcurrencySettings()\r                         {\r                             ReentrancyMode = ActorReentrancyMode.Disallowed\r                         }\r                     }))\r                 .GetAwaiter().GetResult();\r \r             Thread.Sleep(Timeout.Infinite);\r         }\r         catch (Exception e)\r         {\r             ActorEventSource.Current.ActorHostInitializationFailed(e.ToString());\r             throw;\r         }\r     }\r }\r ```\r ```Java\r static class Program\r {\r     static void Main()\r     {\r         try\r         {\r             ActorConcurrencySettings actorConcurrencySettings = new ActorConcurrencySettings();\r             actorConcurrencySettings.setReentrancyMode(ActorReentrancyMode.Disallowed);\r \r             ActorServiceSettings actorServiceSettings = new ActorServiceSettings();\r             actorServiceSettings.setActorConcurrencySettings(actorConcurrencySettings);\r \r             ActorRuntime.registerActorAsync(\r                 Actor1.getClass(),\r                 (context, actorType) -> new FabricActorService(\r                     context,\r                     actorType, () -> new Actor1(),\r                     null,\r                     stateProvider,\r                     actorServiceSettings, timeout);\r \r             Thread.sleep(Long.MAX_VALUE);\r         }\r         catch (Exception e)\r         {\r             throw e;\r         }\r     }\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r * 了解[执行组件 API 参考文档](https://msdn.microsoft.com/library/azure/dn971626.aspx)中有关重新进入的详细信息\r \r <!--Update_Description: update meta properties -->"}