{"Title":"创建 Azure Service Fabric 的容器映像","Description":"了解如何创建多容器 Service Fabric 应用程序的容器映像。","Content":"# <a name=\"create-container-images-for-service-fabric\"></a>创建 Service Fabric 的容器映像\r \r 本教程是演示如何在 Linux Service Fabric 群集中使用容器的教程系列的第 1 部分。 本教程中准备了一个要用于 Service Fabric 的多容器应用程序。 在后续教程中，这些映像用作 Service Fabric 应用程序的一部分。 本教程介绍如何执行下列操作： \r \r > [!div class=\"checklist\"]\r > * 克隆 GitHub 中的应用程序源  \r > * 根据应用程序源创建容器映像\r > * 部署 Azure 容器注册表 (ACR) 实例\r > * 标记 ACR 的容器映像\r > * 向 ACR 上传映像\r \r 此教程系列介绍了如何： \r \r > [!div class=\"checklist\"]\r > * 创建 Service Fabric 的容器映像\r > * [使用容器生成和运行 Service Fabric 应用程序](service-fabric-tutorial-package-containers.md)\r > * [如何在 Service Fabric 中处理故障转移和缩放](service-fabric-tutorial-containers-failover.md)\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r - 设置 Service Fabric 的 Linux 开发环境。 按照[此处](service-fabric-get-started-linux.md)的说明设置 Linux 环境。 \r - 本教程需要运行 Azure CLI 2.0.4 或更高版本。 运行 `az --version` 即可查找版本。 如果需要进行安装或升级，请参阅[安装 Azure CLI 2.0](https://docs.azure.cn/zh-cn/cli/install-azure-cli)。 \r - 此外，还需要拥有可用的 Azure 订阅。 有关试用版的详细信息，请转到[此处](https://www.azure.cn/pricing/1rmb-trial/)。\r \r ## 获取应用程序代码\r \r 本教程使用的示例应用程序是一个投票应用。 该应用程序由前端 Web 组件和后端 Redis 实例组成。 该组件打包到容器映像中。 \r \r 使用 git 可将应用程序的副本下载到开发环境。\r \r ```bash\r git clone https://github.com/Azure-Samples/service-fabric-dotnet-containers.git\r \r cd service-fabric-dotnet-containers/Linux/container-tutorial/\r ```\r \r “container-tutorial”目录包含一个名为“azure-vote”的文件夹。 “azure-vote”文件夹包含前端源代码和 Dockerfile，可用于生成前端。 “container-tutoria”目录还包含“redis”目录，其中包含 Dockerfile，可用于生成 redis 映像。 这些目录包含本组教程所需的资产。 \r \r ## <a name=\"create-container-images\"></a>创建容器映像\r \r 在“azure-vote”目录中，运行以下命令，生成前端 Web 组件的映像。 下面的命令使用此目录中的 Dockerfile 生成映像。 \r \r ```bash\r docker build -t azure-vote-front .\r ```\r \r 在“redis”目录中，运行以下命令，生成 redis 后端的映像。 下面的命令使用目录中的 Dockerfile 生成映像。 \r \r ```bash\r docker build -t azure-vote-back .\r ```\r \r 完成后，使用 [docker images](https://docs.docker.com/engine/reference/commandline/images/) 命令查看创建的映像。\r \r ```bash\r docker images\r ```\r \r 请注意，已下载或创建四个映像。 *azure-vote-front* 映像包含应用程序。 它派生自 Docker 中心的 python 映像。 Redis 映像是从 Docker 中心下载的。\r \r ```bash\r REPOSITORY                   TAG                 IMAGE ID            CREATED              SIZE\r azure-vote-back              latest              bf9a858a9269        3 seconds ago        107MB\r azure-vote-front             latest              052c549a75bf        About a minute ago   708MB\r redis                        latest              9813a7e8fcc0        2 days ago           107MB\r tiangolo/uwsgi-nginx-flask   python3.6           590e17342131        5 days ago           707MB\r \r ```\r \r ## <a name=\"deploy-azure-container-registry\"></a>部署 Azure 容器注册表\r \r 首先，运行 [az login](https://docs.azure.cn/zh-cn/cli/login) 命令，登录 Azure 帐户。 \r \r 接下来，使用 [az account](https://docs.azure.cn/zh-cn/cli/account?view=azure-cli-latest#set) 命令来选择订阅，创建 Azure 容器注册表。 \r \r ```bash\r az account set --subscription <subscription_id>\r ```\r \r 在部署 Azure 容器注册表时，首先需要一个资源组。 Azure 资源组是在其中部署和管理 Azure 资源的逻辑容器。\r \r 使用 [az group create](https://docs.azure.cn/zh-cn/cli/group?view=azure-cli-latest#create) 命令创建资源组。 本示例在 *chinanorth* 区域中创建名为 *myResourceGroup* 的资源组。 请选择附近区域中的资源组。 \r \r ```bash\r az group create --name myResourceGroup --location chinanorth\r ```\r \r 使用 [az acr create](https://docs.azure.cn/zh-cn/cli/acr?view=azure-cli-latest#create) 命令创建 Azure 容器注册表。 容器注册表的名称必须唯一。\r \r ```bash\r az acr create --resource-group myResourceGroup --name <acrName> --sku Basic --admin-enabled true\r ```\r \r 在本教程的其余部分，使用“acrname”作为所选容器注册表名称的占位符。\r \r ## <a name=\"log-in-to-your-container-registry\"></a>登录容器注册表\r \r 先登录 ACR 实例，再向其推送映像。 使用 [az acr login](https://docs.azure.cn/zh-cn/cli/acr?view=azure-cli-latest#az_acr_login) 命令完成此操作。 请提供创建容器注册表时所使用的唯一名称。\r \r ```bash\r az acr login --name <acrName>\r ```\r \r 完成后，该命令会返回“登录成功”消息。\r \r ## <a name=\"tag-container-images\"></a>标记容器映像\r \r 需要使用注册表的 loginServer 名称标记每个容器映像。 在将容器映像推送到映像注册表时，使用此标记进行路由。\r \r 若要查看当前映像的列表，请使用 [docker images](https://docs.docker.com/engine/reference/commandline/images/) 命令。\r \r ```bash\r docker images\r ```\r \r 输出：\r \r ```bash\r REPOSITORY                   TAG                 IMAGE ID            CREATED              SIZE\r azure-vote-back              latest              bf9a858a9269        3 seconds ago        107MB\r azure-vote-front             latest              052c549a75bf        About a minute ago   708MB\r redis                        latest              9813a7e8fcc0        2 days ago           107MB\r tiangolo/uwsgi-nginx-flask   python3.6           590e17342131        5 days ago           707MB\r ```\r \r 要获取 loginServer 名称，请运行以下命令：\r \r ```bash\r az acr show --name <acrName> --query loginServer --output table\r ```\r \r 现在，使用容器注册表的 loginServer 标记 azure-vote-front 映像。 另外，将 `:v1` 添加至映像名称的末端。 此标记代表映像版本。\r \r ```bash\r docker tag azure-vote-front <acrLoginServer>/azure-vote-front:v1\r ```\r \r 接下来，使用容器注册表的 loginServer 标记 azure-vote-back 映像。 另外，将 `:v1` 添加至映像名称的末端。 此标记代表映像版本。\r \r ```bash\r docker tag azure-vote-back <acrLoginServer>/azure-vote-back:v1\r ```\r \r 标记后即可运行“docker images”验证操作。\r \r 输出：\r \r ```bash\r REPOSITORY                             TAG                 IMAGE ID            CREATED             SIZE\r azure-vote-back                        latest              bf9a858a9269        22 minutes ago      107MB\r <acrName>.azurecr.io/azure-vote-back    v1                  bf9a858a9269        22 minutes ago      107MB\r azure-vote-front                       latest              052c549a75bf        23 minutes ago      708MB\r <acrName>.azurecr.io/azure-vote-front   v1                  052c549a75bf        23 minutes ago      708MB\r redis                                  latest              9813a7e8fcc0        2 days ago          107MB\r tiangolo/uwsgi-nginx-flask             python3.6           590e17342131        5 days ago          707MB\r \r ```\r \r ## <a name=\"push-images-to-registry\"></a>将映像推送到注册表\r \r 将 azure-vote-front 映像推送到注册表。 \r \r 使用以下示例，将 ACR loginServer 名称替换为环境中的 loginServer。\r \r ```bash\r docker push <acrLoginServer>/azure-vote-front:v1\r ```\r \r 将 azure-vote-back 映像推送到注册表。 \r \r 使用以下示例，将 ACR loginServer 名称替换为环境中的 loginServer。\r \r ```bash\r docker push <acrLoginServer>/azure-vote-back:v1\r ```\r \r docker push 命令需要几分钟才能完成。\r \r ## <a name=\"list-images-in-registry\"></a>列出注册表中的映像\r \r 若要返回已推送到 Azure 容器注册表的映像列表，请运行 [az acr repository list](https://docs.azure.cn/zh-cn/cli/acr/repository?view=azure-cli-latest#list) 命令。 使用 ACR 实例名称更新命令。\r \r ```bash\r az acr repository list --name <acrName> --output table\r ```\r \r 输出：\r \r ```bash\r Result\r ----------------\r azure-vote-back\r azure-vote-front\r ```\r \r 完成本教程后，容器映像已存储在专用 Azure 容器注册表实例中。 后续教程会将此映像从 ACR 部署到 Service Fabric 群集。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 本教程中从 Github 拉取了一个应用程序、创建了容器映像并将容器映像推送到注册表。 已完成以下步骤：\r \r > [!div class=\"checklist\"]\r > * 克隆 GitHub 中的应用程序源  \r > * 根据应用程序源创建容器映像\r > * 部署 Azure 容器注册表 (ACR) 实例\r > * 标记 ACR 的容器映像\r > * 向 ACR 上传映像\r \r 转到下一教程，了解如何使用 Yeoman 将容器打包到 Service Fabric 应用程序。 \r \r > [!div class=\"nextstepaction\"]\r > [打包容器并将其部署为 Service Fabric 应用程序](service-fabric-tutorial-package-containers.md)\r \r <!--Update_Description: new articles on service fabric container images-->"}