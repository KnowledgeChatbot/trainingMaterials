{"Title":"使用 Azure 移动应用在 iOS 中添加身份验证","Description":"了解如何使用 Azure 移动应用通过各种标识提供者（包括 AAD 和 Microsoft）对 iOS 应用的用户进行身份验证。","Content":"\r # Add authentication to your iOS app（将身份验证添加到 iOS 应用）\r \r [!INCLUDE [app-service-mobile-selector-get-started-users](../../includes/app-service-mobile-selector-get-started-users.md)]\r \r 本教程介绍如何使用支持的标识提供者向 [iOS 快速入门]项目添加身份验证。本教程基于 [iOS quick start]（iOS 快速入门）教程，必须先完成该教程。\r \r ##<a name=\"register\"></a>注册应用以进行身份验证并配置应用服务\r [!INCLUDE [app-service-mobile-register-authentication](../../includes/app-service-mobile-register-authentication.md)]\r \r ## <a name=\"redirecturl\"></a>将应用添加到允许的外部重定向 URL\r \r 安全身份验证要求为应用定义新的 URL 方案。此方案允许在完成身份验证过程后，身份验证系统重定向到应用。在本教程中，我们自始至终使用 URL 方案 _appname_。但是，可以使用任何你所选的 URL 方案。该方案是移动应用的唯一方案。在服务器端启用重定向：\r \r 1. 在 [Azure 门户]中，选择你的应用服务。\r \r 2. 单击“身份验证/授权”菜单选项。\r \r 3. 在“身份验证提供程序”下面，单击“Azure Active Directory”。\r \r 4. 将“管理模式”设为“高级”。\r \r 5. 在“允许的外部重定向 URL”中，输入 `appname://easyauth.callback`。此字符串中的 _appname_ 是移动应用的 URL 方案。此方案应遵循协议的一般 URL 规范（只使用字母和数字，并以字母开头）。你应记下此字符串，因为在一些地方需要使用此 URL 方案调整移动应用代码。\r \r 6. 单击“确定”。\r \r 7. 单击“保存”。\r \r ## <a name=\"permissions\"></a>将权限限制给已经过身份验证的用户\r [!INCLUDE [app-service-mobile-restrict-permissions-dotnet-backend](../../includes/app-service-mobile-restrict-permissions-dotnet-backend.md)]\r \r 在 Xcode 中，按“运行”启动应用。此时出现异常，原因是应用尝试以未经身份验证的用户身份访问后端，但 *TodoItem* 表现在要求进行身份验证。\r \r ## <a name=\"add-authentication\"></a>向应用程序添加身份验证\r **Objective-C**：\r \r 1. 在 Mac 的 Xcode 中打开 *QSTodoListViewController.m* 并添加以下方法：\r \r     ```Objective-C\r     - (void)loginAndGetData\r     {\r         QSAppDelegate *appDelegate = (QSAppDelegate *)[UIApplication sharedApplication].delegate;\r         appDelegate.qsTodoService = self.todoService;\r \r         [self.todoService.client loginWithProvider:@\"microsoftaccount\" urlScheme:@\"appname\" controller:self animated:YES completion:^(MSUser * _Nullable user, NSError * _Nullable error) {\r             if (error) {\r                 NSLog(@\"Login failed with error: %@, %@\", error, [error userInfo]);\r             }\r             else {\r                 self.todoService.client.currentUser = user;\r                 NSLog(@\"User logged in: %@\", user.userId);\r \r                 [self refresh];\r             }\r         }];\r     }\r     ```\r \r     若未使用 microsoftaccount 作为标识提供者，请将 *microsoftaccount* 更改为 *windowsazureactivedirectory*。\r \r     将 **urlScheme** 替换为应用的唯一名称。urlScheme 应与在 Azure 门户中的“允许的外部重定向 URL”字段中指定的 URL 方案协议相同。身份验证回调使用 urlScheme 在完成身份验证请求之后切换回到你的应用。\r \r 2. 使用以下代码替换 *QSTodoListViewController.m* 的 `viewDidLoad` 中的 `[self refresh]`：\r \r     ```Objective-C\r     [self loginAndGetData];\r     ```\r \r 3. 打开 `QSAppDelegate.h` 文件，并添加以下代码：\r \r     ```Objective-C\r     #import \"QSTodoService.h\"\r \r     @property (strong, nonatomic) QSTodoService *qsTodoService;\r     ```\r \r 4. 打开 `QSAppDelegate.m` 文件，并添加以下代码：\r \r     ```Objective-C\r     - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\r     {\r         if ([[url.scheme lowercaseString] isEqualToString:@\"appname\"]) {\r             // Resume login flow\r             return [self.qsTodoService.client resumeWithURL:url];\r         }\r         else {\r             return NO;\r         }\r     }\r     ```\r \r    在行读取 `#pragma mark - Core Data stack` 之前直接添加此代码。将 _appname_ 替换为步骤 1 中使用的 urlScheme 值。\r \r 5. 打开 `AppName-Info.plist` 文件（将 AppName 替换为应用的名称），并添加以下代码：\r \r     ```XML\r     <key>CFBundleURLTypes</key>\r     <array>\r         <dict>\r             <key>CFBundleURLName</key>\r             <string>com.microsoft.azure.zumo</string>\r             <key>CFBundleURLSchemes</key>\r             <array>\r                 <string>appname</string>\r             </array>\r         </dict>\r     </array>\r     ```\r \r     此代码应放置在 `<dict>` 元素内部。将 _appname_ 字符串（位于 **CFBundleURLSchemes** 的数组里面）替换为步骤 1 中选择的应用名称。你还可以在 plist 编辑器中进行这些更改 - 在 XCode 中单击 `AppName-Info.plist` 文件可打开 plist 编辑器。\r \r     将 **CFBundleURLName** 的 `com.microsoft.azure.zumo` 字符串替换为你的 Apple 包标识符。\r \r 6. 若要启动该应用程序，请按“运行”，然后再登录。当你登录时，你应能够查看 Todo 列表并进行更新。\r \r **Swift**：\r \r 1. 在 Mac 的 Xcode 中打开 *ToDoTableViewController.swift* 并添加以下方法：\r \r     ```swift\r     func loginAndGetData() {\r \r         guard let client = self.table?.client, client.currentUser == nil else {\r             return\r         }\r \r         let appDelegate = UIApplication.shared.delegate as! AppDelegate\r         appDelegate.todoTableViewController = self\r \r         let loginBlock: MSClientLoginBlock = {(user, error) -> Void in\r             if (error != nil) {\r                 print(\"Error: (error?.localizedDescription)\")\r             }\r             else {\r                 client.currentUser = user\r                 print(\"User logged in: (user?.userId)\")\r             }\r         }\r \r         client.login(withProvider:\"microsoftaccount\", urlScheme: \"appname\", controller: self, animated: true, completion: loginBlock)\r \r     }\r     ```\r \r     若未使用 microsoftaccount 作为标识提供者，请将 *microsoftaccount* 更改为 *windowsazureactivedirectory*。\r \r     将 **urlScheme** 替换为应用的唯一名称。urlScheme 应与在 Azure 门户中的“允许的外部重定向 URL”字段中指定的 URL 方案协议相同。身份验证回调使用 urlScheme 在完成身份验证请求之后切换回到你的应用。\r \r 2. 删除 *ToDoTableViewController.swift* 中 `viewDidLoad()` 末尾的 `self.refreshControl?.beginRefreshing()` 和 `self.onRefresh(self.refreshControl)` 行。在其位置上添加对 `loginAndGetData()` 的调用：\r \r     ```Objective-C\r     loginAndGetData()\r     ```\r \r 3. 打开 `AppDelegate.swift` 文件，并将以下行添加到 `AppDelegate` 类：\r \r     ```swift\r     var todoTableViewController: ToDoTableViewController?\r \r     func application(_ application: UIApplication, openURL url: NSURL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -> Bool {\r         if url.scheme?.lowercased() == \"appname\" {\r             return (todoTableViewController!.table?.client.resume(with: url as URL))!\r         }\r         else {\r             return false\r         }\r     }\r     ```\r \r     将 _appname_ 替换为步骤 1 中使用的 urlScheme 值。\r \r 4. 打开 `AppName-Info.plist` 文件（将 AppName 替换为应用的名称），并添加以下代码：\r \r     ```XML\r     <key>CFBundleURLTypes</key>\r     <array>\r         <dict>\r             <key>CFBundleURLName</key>\r             <string>com.microsoft.azure.zumo</string>\r             <key>CFBundleURLSchemes</key>\r             <array>\r                 <string>appname</string>\r             </array>\r         </dict>\r     </array>\r     ```\r \r     此代码应放置在 `<dict>` 元素内部。将 _appname_ 字符串（位于 **CFBundleURLSchemes** 的数组里面）替换为步骤 1 中选择的应用名称。你还可以在 plist 编辑器中进行这些更改 - 在 XCode 中单击 `AppName-Info.plist` 文件可打开 plist 编辑器。\r \r     将 **CFBundleURLName** 的 `com.microsoft.azure.zumo` 字符串替换为你的 Apple 包标识符。\r \r 5. 若要启动该应用程序，请按“运行”，然后再登录。当你登录时，你应能够查看 Todo 列表并进行更新。\r \r 应用服务身份验证使用 Apple 应用间通信。有关此主题的更多详细信息，请参阅 [Apple 文档][2]。\r <!-- URLs. -->\r \r [1]: https://developers.facebook.com/docs/ios/ios9#whitelist\r [2]: https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html\r [Azure 门户]: https://portal.azure.cn\r [iOS quick start]: ./app-service-mobile-ios-get-started.md\r [iOS 快速入门]: ./app-service-mobile-ios-get-started.md\r \r <!---HONumber=Mooncake_0313_2017-->"}