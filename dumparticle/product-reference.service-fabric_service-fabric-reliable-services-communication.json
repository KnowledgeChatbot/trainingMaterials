{"Title":"Reliable Services 通信概述","Description":"概述 Reliable Services 通信模型，包括在服务上打开侦听器、解析终结点，以及在服务之间进行通信。","Content":"# <a name=\"how-to-use-the-reliable-services-communication-apis\"></a>如何使用 Reliable Services 通信 API\r “Azure Service Fabric 即平台”完全不受服务间通信的影响。 所有协议和堆栈（从 UDP 到 HTTP）都可接受。 至于服务应以哪种方式通信，完全由服务开发人员选择。 Reliable Services 应用程序框架提供了一些内置的通信堆栈和 API，可用于生成自定义通信组件。\r \r ## <a name=\"set-up-service-communication\"></a>设置服务通信\r Reliable Services API 为服务通信使用一个简单的接口。 若要打开服务的终结点，只需实现此接口即可：\r \r ```csharp\r \r public interface ICommunicationListener\r {\r     Task<string> OpenAsync(CancellationToken cancellationToken);\r \r     Task CloseAsync(CancellationToken cancellationToken);\r \r     void Abort();\r }\r \r ```\r \r ```java\r public interface CommunicationListener {\r     CompletableFuture<String> openAsync(CancellationToken cancellationToken);\r \r     CompletableFuture<?> closeAsync(CancellationToken cancellationToken);\r \r     void abort();\r }\r ```\r \r 然后，可以通过在基于服务的类方法重写中返回通信侦听器实现来添加该实现。\r \r 对于无状态服务：\r \r ```csharp\r class MyStatelessService : StatelessService\r {\r     protected override IEnumerable<ServiceInstanceListener> CreateServiceInstanceListeners()\r     {\r         ...\r     }\r     ...\r }\r ```\r ```java\r public class MyStatelessService extends StatelessService {\r \r     @Override\r     protected List<ServiceInstanceListener> createServiceInstanceListeners() {\r         ...\r     }\r     ...\r }\r ```\r \r 对于有状态服务：\r \r > [!NOTE]\r > Java 目前不支持有状态的 Reliable Services。\r >\r >\r \r ```csharp\r class MyStatefulService : StatefulService\r {\r     protected override IEnumerable<ServiceReplicaListener> CreateServiceReplicaListeners()\r     {\r         ...\r     }\r     ...\r }\r ```\r \r 在这两种情况下，都会返回侦听器的集合。 这可让服务通过多个侦听器，可能使用不同的协议在多个终结点上侦听。 例如，你可能有一个 HTTP 侦听器和一个单独的 WebSocket 侦听器。 当客户端请求服务实例或分区的侦听地址时，每个侦听器将获取一个名称，生成的“名称 : 地址”对集合以 JSON 对象的形式表示。\r \r 在无状态服务中，重写会返回 ServiceInstanceListeners 的集合。 `ServiceInstanceListener` 包含一个函数，用于创建 `ICommunicationListener(C#) / CommunicationListener(Java)` 并为其提供名称。 对于有状态服务，重写会返回 ServiceReplicaListeners 集合。 这与无状态服务稍有不同，因为 `ServiceReplicaListener` 可以选择在辅助副本上打开 `ICommunicationListener`。 不仅可以在服务中使用多个通信侦听器，而且还可以指定哪些侦听器要在辅助副本上接受请求，以及哪些侦听器只能在主副本上进行侦听。\r \r 例如，可以创建一个只在主副本上接受 RPC 调用的 ServiceRemotingListener，并创建另一个可通过 HTTP 在辅助副本上接受读取请求的自定义侦听器：\r \r ```csharp\r protected override IEnumerable<ServiceReplicaListener> CreateServiceReplicaListeners()\r {\r     return new[]\r     {\r         new ServiceReplicaListener(context =>\r             new MyCustomHttpListener(context),\r             \"HTTPReadonlyEndpoint\",\r             true),\r \r         new ServiceReplicaListener(context =>\r             this.CreateServiceRemotingListener(context),\r             \"rpcPrimaryEndpoint\",\r             false)\r     };\r }\r ```\r \r > [!NOTE]\r > 为一个服务创建多个侦听器时， **必须** 为每个侦听器指定一个唯一名称。\r >\r >\r \r 最后，在[服务清单](service-fabric-application-model.md)中有关终结点的节下面描述服务所需的终结点。\r \r ```xml\r <Resources>\r     <Endpoints>\r       <Endpoint Name=\"WebServiceEndpoint\" Protocol=\"http\" Port=\"80\" />\r       <Endpoint Name=\"OtherServiceEndpoint\" Protocol=\"tcp\" Port=\"8505\" />\r     <Endpoints>\r </Resources>\r \r ```\r \r 通信侦听器可以从 `ServiceContext` 中的 `CodePackageActivationContext` 访问分配给它的终结点资源。 然后侦听器在打开时开始侦听请求。\r \r ```csharp\r var codePackageActivationContext = serviceContext.CodePackageActivationContext;\r var port = codePackageActivationContext.GetEndpoint(\"ServiceEndpoint\").Port;\r \r ```\r ```java\r CodePackageActivationContext codePackageActivationContext = serviceContext.getCodePackageActivationContext();\r int port = codePackageActivationContext.getEndpoint(\"ServiceEndpoint\").getPort();\r \r ```\r \r > [!NOTE]\r > 终结点资源通用于整个服务包，由 Service Fabric 在激活服务包时分配。 托管在同一 ServiceHost 中的多个服务副本可能共享同一个端口。 这意味着通信侦听器应支持端口共享。 实现此目标的一种推荐方法是通信侦听器在生成侦听地址时使用分区 ID 和副本/实例 ID。\r >\r >\r \r ### <a name=\"service-address-registration\"></a>服务地址注册\r 名为 *命名服务* 的系统服务在 Service Fabric 群集上运行。 命名服务是服务及其地址（服务的每个实例或副本正在其上侦听）的注册机构。 当 `ICommunicationListener(C#) / CommunicationListener(Java)` 的 `OpenAsync(C#) / openAsync(Java)` 方法完成时，它的返回值会在命名服务中注册。 这个在命名服务中发布的返回值是一个字符串，其值完全可以是任何内容。 此字符串值是客户端向命名服务请求服务的地址时看到的内容。\r \r ```csharp\r public Task<string> OpenAsync(CancellationToken cancellationToken)\r {\r     EndpointResourceDescription serviceEndpoint = serviceContext.CodePackageActivationContext.GetEndpoint(\"ServiceEndpoint\");\r     int port = serviceEndpoint.Port;\r \r     this.listeningAddress = string.Format(\r                 CultureInfo.InvariantCulture,\r                 \"http://+:{0}/\",\r                 port);\r \r     this.publishAddress = this.listeningAddress.Replace(\"+\", FabricRuntime.GetNodeContext().IPAddressOrFQDN);\r \r     this.webApp = WebApp.Start(this.listeningAddress, appBuilder => this.startup.Invoke(appBuilder));\r \r     // the string returned here will be published in the Naming Service.\r     return Task.FromResult(this.publishAddress);\r }\r ```\r ```java\r public CompletableFuture<String> openAsync(CancellationToken cancellationToken)\r {\r     EndpointResourceDescription serviceEndpoint = serviceContext.getCodePackageActivationContext.getEndpoint(\"ServiceEndpoint\");\r     int port = serviceEndpoint.getPort();\r \r     this.publishAddress = String.format(\"http://%s:%d/\", FabricRuntime.getNodeContext().getIpAddressOrFQDN(), port);\r \r     this.webApp = new WebApp(port);\r     this.webApp.start();\r \r     /* the string returned here will be published in the Naming Service.\r      */\r     return CompletableFuture.completedFuture(this.publishAddress);\r }\r ```\r \r Service Fabric 提供许多 API，使客户端和其他服务随后可以通过服务名称请求此地址。 这一点很重要，因为服务地址不是静态的。 服务为了资源平衡和可用性目的在群集中移动。 这是允许客户端为服务解析侦听地址的机制。\r \r > [!NOTE]\r > 有关如何用 C# 编写通信侦听器的完整演练，请参阅 [Service Fabric Web API 服务与 OWIN 自托管](service-fabric-reliable-services-communication-webapi.md)，而在 Java 中，可以编写自己的 HTTP 服务器实现，请参阅 https://github.com/Azure-Samples/service-fabric-java-getting-started 中的 EchoServer 应用程序示例。\r >\r >\r \r ## <a name=\"communicating-with-a-service\"></a>与服务通信\r Reliable Services API 提供以下库，编写与服务通信的客户端。\r \r ### <a name=\"service-endpoint-resolution\"></a>服务终结点解析\r 与服务通信的第一步是解析你想要通信的服务的分区或实例的终结点地址。 `ServicePartitionResolver(C#) / FabricServicePartitionResolver(Java)` 实用工具类是一个基本基元，可帮助客户端在运行时确定服务的终结点。 确定服务终结点的过程在 Service Fabric 术语中称为*服务终结点解析*。\r \r 若要连接到群集内的服务，可使用默认设置创建 ServicePartitionResolver。 这是针对大多数情况的建议用法：\r \r ```csharp\r ServicePartitionResolver resolver = ServicePartitionResolver.GetDefault();\r ```\r ```java\r FabricServicePartitionResolver resolver = FabricServicePartitionResolver.getDefault();\r ```\r \r 若要连接到不同群集中的服务，可利用一组群集网关终结点来创建 ServicePartitionResolver。 请注意，网关终结点只是可用来连接到相同群集的不同终结点。 例如：\r \r ```csharp\r ServicePartitionResolver resolver = new  ServicePartitionResolver(\"mycluster.cloudapp.chinacloudapi.cn:19000\", \"mycluster.cloudapp.chinacloudapi.cn:19001\");\r ```\r ```java\r FabricServicePartitionResolver resolver = new  FabricServicePartitionResolver(\"mycluster.cloudapp.chinacloudapi.cn:19000\", \"mycluster.cloudapp.chinacloudapi.cn:19001\");\r ```\r \r 或者，可为 `ServicePartitionResolver` 指定一个函数来创建 `FabricClient`，以便在内部使用：\r \r ```csharp\r public delegate FabricClient CreateFabricClientDelegate();\r ```\r ```java\r public FabricServicePartitionResolver(CreateFabricClient createFabricClient) {\r ...\r }\r \r public interface CreateFabricClient {\r     public FabricClient getFabricClient();\r }\r ```\r \r `FabricClient` 是用于与 Service Fabric 群集通信以便在群集上实现各种管理操作的对象。 当需要更好地控制服务分区解析程序与群集交互的方式时，这非常有用。 `FabricClient` 会在内部执行缓存，但创建成本通常很高，因此，一定要尽可能重复使用 `FabricClient` 实例。\r \r ```csharp\r ServicePartitionResolver resolver = new  ServicePartitionResolver(() => CreateMyFabricClient());\r ```\r ```java\r FabricServicePartitionResolver resolver = new  FabricServicePartitionResolver(() -> new CreateFabricClientImpl());\r ```\r \r 接下来，使用解析方法来检索服务的地址或已分区服务的服务分区的地址。\r \r ```csharp\r ServicePartitionResolver resolver = ServicePartitionResolver.GetDefault();\r \r ResolvedServicePartition partition =\r     await resolver.ResolveAsync(new Uri(\"fabric:/MyApp/MyService\"), new ServicePartitionKey(), cancellationToken);\r ```\r ```java\r FabricServicePartitionResolver resolver = FabricServicePartitionResolver.getDefault();\r \r CompletableFuture<ResolvedServicePartition> partition =\r     resolver.resolveAsync(new URI(\"fabric:/MyApp/MyService\"), new ServicePartitionKey());\r ```\r \r 服务地址可以使用 ServicePartitionResolver 轻松解析，但需要执行更多操作，才能确保解析的地址可正确使用。 客户端必须检测连接尝试是因暂时性错误而失败且可重试（例如，服务已移动或暂时不可用），还是因永久错误而失败（例如，已删除服务或请求的资源不再存在）。 服务实例或副本可出于多种原因随时在节点之间移动。 通过 ServicePartitionResolver 解析的服务地址可能会在客户端代码尝试连接之前过时。 再回到这种情况，客户端必须重新解析地址。 如果提供先前的 `ResolvedServicePartition`，则表示解析程序需要再试一次，而不只是检索缓存的地址。\r \r 客户端代码通常不需要直接处理 ServicePartitionResolver。 它在创建后即会传递给 Reliable Services API 中的通信客户端工厂。 这些工厂会在内部使用解析程序，生成可用来与服务通信的客户端对象。\r \r ### <a name=\"communication-clients-and-factories\"></a>通信客户端和工厂\r 通信工厂库可实现典型的错误处理重试模式，从而可以更轻松地重试连接已解析服务终结点。 尽管你提供错误处理程序，工厂库还是会提供重试机制。\r \r `ICommunicationClientFactory(C#) / CommunicationClientFactory(Java)` 定义由通信客户端工厂实现的基接口，该通信客户端工厂生成可与 Service Fabric 服务通信的客户端。 CommunicationClientFactory 的实现取决于客户端要与之进行通信的 Service Fabric 服务所使用的通信堆栈。 Reliable Services API 提供 `CommunicationClientFactoryBase<TCommunicationClient>`。 这提供了 CommunicationClientFactory 接口的基实现，并可执行所有通信堆栈共有的任务。 （这些任务包括使用 ServicePartitionResolver 来确定服务终结点）。 客户端通常实现抽象 CommunicationClientFactoryBase 类来处理通信堆栈特定的逻辑。\r \r 通信客户端只接收地址，并使用它连接到服务。 客户端可以使用它想要的任何协议。\r \r ```csharp\r class MyCommunicationClient : ICommunicationClient\r {\r     public ResolvedServiceEndpoint Endpoint { get; set; }\r \r     public string ListenerName { get; set; }\r \r     public ResolvedServicePartition ResolvedServicePartition { get; set; }\r }\r ```\r ```java\r public class MyCommunicationClient implements CommunicationClient {\r \r     private ResolvedServicePartition resolvedServicePartition;\r     private String listenerName;\r     private ResolvedServiceEndpoint endPoint;\r \r     /*\r      * Getters and Setters\r      */\r }\r ```\r \r 客户端工厂主要负责创建通信客户端。 对于不会维持持续连接的客户端（例如 HTTP 客户端），工厂只需创建并返回客户端。 其他会维持持续连接的协议（例如某些二进制协议）也应该由工厂验证，以确定是否需要重新创建连接。  \r \r ```csharp\r public class MyCommunicationClientFactory : CommunicationClientFactoryBase<MyCommunicationClient>\r {\r     protected override void AbortClient(MyCommunicationClient client)\r     {\r     }\r \r     protected override Task<MyCommunicationClient> CreateClientAsync(string endpoint, CancellationToken cancellationToken)\r     {\r     }\r \r     protected override bool ValidateClient(MyCommunicationClient clientChannel)\r     {\r     }\r \r     protected override bool ValidateClient(string endpoint, MyCommunicationClient client)\r     {\r     }\r }\r ```\r ```java\r public class MyCommunicationClientFactory extends CommunicationClientFactoryBase<MyCommunicationClient> {\r \r     @Override\r     protected boolean validateClient(MyCommunicationClient clientChannel) {\r     }\r \r     @Override\r     protected boolean validateClient(String endpoint, MyCommunicationClient client) {\r     }\r \r     @Override\r     protected CompletableFuture<MyCommunicationClient> createClientAsync(String endpoint) {\r     }\r \r     @Override\r     protected void abortClient(MyCommunicationClient client) {\r     }\r }\r ```\r \r 最后，异常处理程序负责确定发生异常时要采取的操作。 异常分为**可重试**和**不可重试**两种类型。\r \r * **不可重试**的异常只会重新引发回调用方。\r * **可重试**的异常进一步分为**暂时性**和**非暂时性**两种类型。\r   * **暂时性**异常是只会重试而不会重新解析服务终结点地址的异常。 这类异常包括暂时性网络问题或服务错误响应，但不包括指出服务终结点地址不存在的异常。\r   * **非暂时性** 异常是需要重新解析服务终结点地址的异常。 这类异常包括指出无法访问服务终结点（表示服务已移至其他节点）的异常。\r \r `TryHandleException` 针对给定异常做出决定。 如果它**不知道**要对异常做出哪些决定，则应返回 **false**。 如果它**知道**如何做决定，则应相应地设置结果并返回 **true**。\r \r ```csharp\r class MyExceptionHandler : IExceptionHandler\r {\r     public bool TryHandleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings, out ExceptionHandlingResult result)\r     {\r         // if exceptionInformation.Exception is known and is transient (can be retried without re-resolving)\r         result = new ExceptionHandlingRetryResult(exceptionInformation.Exception, true, retrySettings, retrySettings.DefaultMaxRetryCount);\r         return true;\r \r         // if exceptionInformation.Exception is known and is not transient (indicates a new service endpoint address must be resolved)\r         result = new ExceptionHandlingRetryResult(exceptionInformation.Exception, false, retrySettings, retrySettings.DefaultMaxRetryCount);\r         return true;\r \r         // if exceptionInformation.Exception is unknown (let the next IExceptionHandler attempt to handle it)\r         result = null;\r         return false;\r     }\r }\r ```\r ```java\r public class MyExceptionHandler implements ExceptionHandler {\r \r     @Override\r     public ExceptionHandlingResult handleException(ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings) {        \r \r         /* if exceptionInformation.getException() is known and is transient (can be retried without re-resolving)\r          */\r         result = new ExceptionHandlingRetryResult(exceptionInformation.getException(), true, retrySettings, retrySettings.getDefaultMaxRetryCount());\r         return true;\r \r         /* if exceptionInformation.getException() is known and is not transient (indicates a new service endpoint address must be resolved)\r          */\r         result = new ExceptionHandlingRetryResult(exceptionInformation.getException(), false, retrySettings, retrySettings.getDefaultMaxRetryCount());\r         return true;\r \r         /* if exceptionInformation.getException() is unknown (let the next ExceptionHandler attempt to handle it)\r          */\r         result = null;\r         return false;\r \r     }\r }\r ```\r ### <a name=\"putting-it-all-together\"></a>汇总\r 使用以通信协议生成的 `ICommunicationClient(C#) / CommunicationClient(Java)`、`ICommunicationClientFactory(C#) / CommunicationClientFactory(Java)` 和 `IExceptionHandler(C#) / ExceptionHandler(Java)`，`ServicePartitionClient(C#) / FabricServicePartitionClient(Java)` 会将它全部包装在一起，并为这些组件提供错误处理和服务分区地址解析循环。\r \r ```csharp\r private MyCommunicationClientFactory myCommunicationClientFactory;\r private Uri myServiceUri;\r \r var myServicePartitionClient = new ServicePartitionClient<MyCommunicationClient>(\r     this.myCommunicationClientFactory,\r     this.myServiceUri,\r     myPartitionKey);\r \r var result = await myServicePartitionClient.InvokeWithRetryAsync(async (client) =>\r    {\r       // Communicate with the service using the client.\r    },\r    CancellationToken.None);\r \r ```\r ```java\r private MyCommunicationClientFactory myCommunicationClientFactory;\r private URI myServiceUri;\r \r FabricServicePartitionClient myServicePartitionClient = new FabricServicePartitionClient<MyCommunicationClient>(\r     this.myCommunicationClientFactory,\r     this.myServiceUri,\r     myPartitionKey);\r \r CompletableFuture<?> result = myServicePartitionClient.invokeWithRetryAsync(client -> {\r       /* Communicate with the service using the client.\r        */\r    });\r \r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r * [ASP.NET Core 和 Reliable Services](service-fabric-reliable-services-communication-aspnetcore.md)\r * [使用 Reliable Services 远程控制执行远程过程调用](service-fabric-reliable-services-communication-remoting.md)\r * [使用 Reliable Services 的 WCF 通信](service-fabric-reliable-services-communication-wcf.md)\r \r <!-- Update_Description: update meta properties -->"}