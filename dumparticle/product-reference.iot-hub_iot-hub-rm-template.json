{"Title":"使用模板创建 Azure IoT 中心 (.NET)","Description":"如何使用 Azure Resource Manager 模板和 C# 程序创建 IoT 中心。","Content":"# <a name=\"create-an-iot-hub-using-azure-resource-manager-template-net\"></a>使用 Azure 资源管理器模板创建 IoT 中心 (.NET)\r [!INCLUDE [iot-hub-resource-manager-selector](../../includes/iot-hub-resource-manager-selector.md)]\r \r 可以使用 Azure 资源管理器以编程方式创建和管理 Azure IoT 中心。 本教程介绍如何使用 Azure Resource Manager 模板通过 C# 程序创建 IoT 中心。\r \r > [!NOTE]\r > Azure 提供了用于创建和使用资源的两个不同部署模型：[Azure Resource Manager 模型和经典模型](../azure-resource-manager/resource-manager-deployment-model.md)。  本文介绍了如何使用 Azure Resource Manager 部署模型。\r > \r > \r \r 要完成本教程，需要以下各项：\r \r * Visual Studio 2015 或 Visual Studio 2017。\r * 有效的 Azure 帐户。 <br/>如果没有帐户，只需花费几分钟就能创建一个 [帐户][lnk-free-trial] 。\r * 可用于存储 Azure Resource Manager 模板文件的 [Azure 存储帐户][lnk-storage-account] 。\r * [Azure PowerShell 1.0][lnk-powershell-install] 或更高版本。\r \r [!INCLUDE [iot-hub-prepare-resource-manager](../../includes/iot-hub-prepare-resource-manager.md)]\r \r ## <a name=\"prepare-your-visual-studio-project\"></a>准备 Visual Studio 项目\r 1. 在 Visual Studio 中，使用“控制台应用(.NET Framework)”项目模板创建 Visual C# Windows 经典桌面项目。 将项目命名为 **CreateIoTHub**。\r 2. 在解决方案资源管理器中右键单击用户的项目，并单击“**管理 NuGet 包**”。\r 3. 在 NuGet 包管理器中，选中“包括预发行版”，并在“浏览”页上搜索 **Microsoft.Azure.Management.ResourceManager**。 选择该包，单击“安装”，在“审阅更改”中单击“确定”，并单击“我接受”以接受许可证。\r 4. 在 NuGet 包管理器中，搜索 **Microsoft.IdentityModel.Clients.ActiveDirectory**。  单击“**安装**”，在“**审阅更改**”中单击“**确定**”，并单击“**我接受**”以接受许可证。\r 5. 在 Program.cs 中，将现有 **using** 语句替换为以下代码：\r \r     ```csharp\r     using System;\r     using Microsoft.Azure.Management.ResourceManager;\r     using Microsoft.Azure.Management.ResourceManager.Models;\r     using Microsoft.IdentityModel.Clients.ActiveDirectory;\r     using Microsoft.Rest;\r     ```\r \r 6. 在 Program.cs 中，将占位符值替换为以下静态变量。 在本教程前面的介绍中，已记下 **ApplicationId**、**SubscriptionId**、**TenantId** 和 **Password**。 **Your Azure Storage account name** 是要在其中存储 Azure 资源管理器模板文件的 Azure 存储帐户的名称。 资源组名称是创建 IoT 中心时要使用的资源组名称。 名称可以是现有的资源组或新资源组。 **部署名称**是部署的名称，例如 **Deployment_01**。\r \r     ```csharp\r     static string applicationId = \"{Your ApplicationId}\";\r     static string subscriptionId = \"{Your SubscriptionId}\";\r     static string tenantId = \"{Your TenantId}\";\r     static string password = \"{Your application Password}\";\r     static string storageAddress = \"https://{Your storage account name}.blob.core.chinacloudapi.cn\";\r     static string rgName = \"{Resource group name}\";\r     static string deploymentName = \"{Deployment name}\";\r     ```\r \r [!INCLUDE [iot-hub-get-access-token](../../includes/iot-hub-get-access-token.md)]\r \r ## <a name=\"submit-a-template-to-create-an-iot-hub\"></a>提交模板以创建 IoT 中心\r \r 使用 JSON 模板和参数文件在资源组中创建 IoT 中心。 还可以使用 Azure Resource Manager 模板更改现有 IoT 中心。\r \r 1. 在解决方案资源管理器中右键单击用户的项目，单击“**添加**”，并单击“**新建项**”。 将名为 **template.json** 的 JSON 文件添加到项目。\r \r 2. 若要在中国东部区域中添加一个标准 IoT 中心，请将“template.json”的内容替换为以下资源定义。 有关支持 IoT 中心的区域的最新列表，请参阅 [Azure 状态][lnk-status]：\r \r     ```json\r     {\r       \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r       \"contentVersion\": \"1.0.0.0\",\r       \"parameters\": {\r         \"hubName\": {\r           \"type\": \"string\"\r         }\r       },\r       \"resources\": [\r       {\r         \"apiVersion\": \"2016-02-03\",\r         \"type\": \"Microsoft.Devices/IotHubs\",\r         \"name\": \"[parameters('hubName')]\",\r         \"location\": \"China East\",\r         \"sku\": {\r           \"name\": \"S1\",\r           \"tier\": \"Standard\",\r           \"capacity\": 1\r         },\r         \"properties\": {\r           \"location\": \"China East\"\r         }\r       }\r       ],\r       \"outputs\": {\r         \"hubKeys\": {\r           \"value\": \"[listKeys(resourceId('Microsoft.Devices/IotHubs', parameters('hubName')), '2016-02-03')]\",\r           \"type\": \"object\"\r         }\r       }\r     }\r     ```\r 3. 在解决方案资源管理器中右键单击项目，单击“**添加**”，然后单击“**新建项**”。 将名为 **parameters.json** 的 JSON 文件添加到项目。\r 4. 将 **parameters.json** 的内容替换为以下参数信息，以便将新 IoT 中心的名称设置为 **{your initials}mynewiothub**。 IoT 中心名称必须全局唯一，因此，应包含姓名或姓名首字母缩写：\r \r     ```json\r     {\r       \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\",\r       \"contentVersion\": \"1.0.0.0\",\r       \"parameters\": {\r         \"hubName\": { \"value\": \"mynewiothub\" }\r       }\r     }\r     ```\r   [!INCLUDE [iot-hub-pii-note-naming-hub](../../includes/iot-hub-pii-note-naming-hub.md)]\r \r 5. 在**服务器资源管理器**中，连接到 Azure 订阅，并在 Azure 存储帐户中创建名为 **templates** 的容器。 在“属性”面板中，将 **templates** 容器的“公共读取访问权限”权限设置为“Blob”。\r 6. 在“**服务器资源管理器**”中，右键单击 **templates** 容器，并单击“**查看 Blob 容器**”。 单击“**上传 Blob**”按钮，选择“**parameters.json**”和“**templates.json**”这两个文件，并单击“**打开**”，将 JSON 文件上传到 **templates** 容器。 包含 JSON 数据的 Blob 的 URL 如下：\r \r     ```csharp\r     https://{Your storage account name}.blob.core.chinacloudapi.cn/templates/parameters.json\r     https://{Your storage account name}.blob.core.chinacloudapi.cn/templates/template.json\r     ```\r \r 7. 将以下方法添加到 Program.cs：\r \r     ```csharp\r     static void CreateIoTHub(ResourceManagementClient client)\r     {\r \r     }\r     ```\r 8. 在 **CreateIoTHub** 方法中添加以下代码，向 Azure Resource Manager 提交模板和参数文件：\r \r     ```csharp\r     var createResponse = client.Deployments.CreateOrUpdate(\r         rgName,\r         deploymentName,\r         new Deployment()\r         {\r           Properties = new DeploymentProperties\r           {\r             Mode = DeploymentMode.Incremental,\r             TemplateLink = new TemplateLink\r             {\r               Uri = storageAddress + \"/templates/template.json\"\r             },\r             ParametersLink = new ParametersLink\r             {\r               Uri = storageAddress + \"/templates/parameters.json\"\r             }\r           }\r         });\r     ```\r 9. 在 **CreateIoTHub** 方法中添加以下代码，显示新 IoT 中心的状态和密钥：\r \r     ```csharp\r     string state = createResponse.Properties.ProvisioningState;\r     Console.WriteLine(\"Deployment state: {0}\", state);\r \r     if (state != \"Succeeded\")\r     {\r       Console.WriteLine(\"Failed to create iothub\");\r     }\r     Console.WriteLine(createResponse.Properties.Outputs);\r     ```\r \r ## <a name=\"complete-and-run-the-application\"></a>完成并运行应用程序\r 现在，可以调用 **CreateIoTHub** 方法来完成应用程序，并生成并运行该应用程序。\r \r 1. 将以下代码添加到 **Main** 方法末尾：\r \r     ```csharp\r     CreateIoTHub(client);\r     Console.ReadLine();\r     ```\r 2. 单击“**生成**”，并单击“**生成解决方案**”。 更正所有错误。\r 3. 单击“**调试**”，并单击“**开始调试**”以运行应用程序。 运行部署可能需要几分钟时间。\r \r 4. 若要验证应用程序是否添加了新的 IoT 中心，请访问 [Azure 门户][lnk-azure-portal]并查看资源列表。 或者，使用 Get-azurermresource PowerShell cmdlet。\r \r > [!NOTE]\r > 本示例应用程序会添加用于对你计费的 S1 标准 IoT 中心。 可以通过 [Azure 门户][lnk-azure-portal] 删除该 IoT 中心，或者在完成后使用 **Remove-AzureRmResource** PowerShell cmdlet。\r > \r > \r \r ## <a name=\"next-steps\"></a>后续步骤\r 现在，已使用 Azure Resource Manager 模板和 C# 程序部署了一个 IoT 中心，接下来可以进一步进行探索：\r \r * 阅读了解 [IoT 中心资源提供程序 REST API][lnk-rest-api] 的相关功能。\r * 有关 Azure Resource Manager 功能的详细信息，请参阅 [Azure Resource Manager 概述][lnk-azure-rm-overview] 。\r \r 若要详细了解如何开发 IoT 中心，请参阅以下文章：\r \r - [C SDK 简介][lnk-c-sdk]\r - [Azure IoT SDK][lnk-sdks]\r \r 若要进一步探索 IoT 中心的功能，请参阅：\r \r * [使用 Azure IoT Edge 将 AI 部署到边缘设备][lnk-iotedge]\r \r <!-- Links -->\r [lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r [lnk-azure-portal]: https://portal.azure.cn/\r [lnk-status]: https://www.azure.cn/support/service-dashboard/\r [lnk-powershell-install]: ../powershell-install-configure.md\r [lnk-rest-api]: https://docs.microsoft.com/rest/api/iothub/iothubresource\r [lnk-azure-rm-overview]: ../azure-resource-manager/resource-group-overview.md\r [lnk-storage-account]: ../storage/common/storage-create-storage-account.md\r [lnk-c-sdk]: ./iot-hub-device-sdk-c-intro.md\r [lnk-sdks]: ./iot-hub-devguide-sdks.md\r \r [lnk-iotedge]: ./iot-hub-linux-iot-edge-simulated-device.md\r \r <!--Update_Description:update wording and link references-->"}