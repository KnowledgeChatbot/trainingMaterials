{"Title":"使用通知中心发送突发新闻 (Windows Phone)","Description":"通过 Azure 通知中心使用注册中的标记将突发新闻发送到 Windows Phone 应用。","Content":"\r # 使用通知中心发送突发新闻\r \r [!INCLUDE [notification-hubs-selector-breaking-news](../../includes/notification-hubs-selector-breaking-news.md)]\r \r ##概述\r \r 本主题演示如何使用 Azure 通知中心将突发新闻通知广播到 Windows Phone 8.0/8.1 Silverlight 应用。如果你要以 Windows 应用商店或 Phone 8.1 应用为目标，请参阅 [Windows Universal](./notification-hubs-windows-notification-dotnet-push-xplat-segmented-wns.md) 版本。完成时，你可以注册感兴趣的突发新闻类别并仅接收这些类别的推送通知。此方案对于很多应用程序来说是常见模式，在其中必须将通知发送到以前声明过对它们感兴趣的一组用户，这样的应用程序有 RSS 阅读器、针对音乐迷的应用程序等。\r \r 在创建通知中心的注册时，通过加入一个或多个标记来启用广播方案。将通知发送到标签时，已注册该标签的所有设备将接收通知。因为标签是简单的字符串，它们不必提前设置。有关标记的详细信息，请参阅[通知中心路由和标记表达式](./notification-hubs-tags-segment-push-message.md)。\r \r ##先决条件\r \r 本主题以你在[通知中心入门]中创建的应用程序为基础。在开始本教程之前，必须先阅读[通知中心入门]。\r \r ##向应用程序中添加类别选择\r \r 第一步是向现有主页添加 UI 元素，这些元素允许用户选择要注册的类别。用户选择的类别存储在设备上。应用程序启动时，使用所选类别作为标签在你的通知中心创建设备注册。\r \r 1. 打开 MainPage.xaml 项目文件，然后使用以下代码替换名为 `TitlePanel` 和 `ContentPanel` 的 **Grid** 元素：\r \r     ```\r     <StackPanel x:Name=\"TitlePanel\" Grid.Row=\"0\" Margin=\"12,17,0,28\">\r         <TextBlock Text=\"Breaking News\" Style=\"{StaticResource PhoneTextNormalStyle}\" Margin=\"12,0\"/>\r         <TextBlock Text=\"Categories\" Margin=\"9,-7,0,0\" Style=\"{StaticResource PhoneTextTitle1Style}\"/>\r     </StackPanel>\r \r     <Grid Name=\"ContentPanel\" Grid.Row=\"1\" Margin=\"12,0,12,0\">\r         <Grid.RowDefinitions>\r             <RowDefinition Height=\"auto\"/>\r             <RowDefinition Height=\"auto\" />\r             <RowDefinition Height=\"auto\" />\r             <RowDefinition Height=\"auto\" />\r         </Grid.RowDefinitions>\r         <Grid.ColumnDefinitions>\r             <ColumnDefinition />\r             <ColumnDefinition />\r         </Grid.ColumnDefinitions>\r         <CheckBox Name=\"WorldCheckBox\" Grid.Row=\"0\" Grid.Column=\"0\">World</CheckBox>\r         <CheckBox Name=\"PoliticsCheckBox\" Grid.Row=\"1\" Grid.Column=\"0\">Politics</CheckBox>\r         <CheckBox Name=\"BusinessCheckBox\" Grid.Row=\"2\" Grid.Column=\"0\">Business</CheckBox>\r         <CheckBox Name=\"TechnologyCheckBox\" Grid.Row=\"0\" Grid.Column=\"1\">Technology</CheckBox>\r         <CheckBox Name=\"ScienceCheckBox\" Grid.Row=\"1\" Grid.Column=\"1\">Science</CheckBox>\r         <CheckBox Name=\"SportsCheckBox\" Grid.Row=\"2\" Grid.Column=\"1\">Sports</CheckBox>\r         <Button Name=\"SubscribeButton\" Content=\"Subscribe\" HorizontalAlignment=\"Center\" Grid.Row=\"3\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\" Click=\"SubscribeButton_Click\" />\r     </Grid>\r     ```\r \r 2. 在该项目中，创建名为 **Notifications** 的新类，向类定义添加 **public** 修饰符，然后将以下 **using** 语句添加到新的代码文件：\r \r     ```\r     using Microsoft.Phone.Notification;\r     using Microsoft.WindowsAzure.Messaging;\r     using System.IO.IsolatedStorage;\r     using System.Windows;\r     ```\r \r 3. 将以下代码添加到新的 **Notifications** 类：\r \r     ```\r     private NotificationHub hub;\r \r     // Registration task to complete registration in the ChannelUriUpdated event handler\r     private TaskCompletionSource<Registration> registrationTask;\r \r     public Notifications(string hubName, string listenConnectionString)\r     {\r         hub = new NotificationHub(hubName, listenConnectionString);\r     }\r \r     public IEnumerable<string> RetrieveCategories()\r     {\r         var categories = (string)IsolatedStorageSettings.ApplicationSettings[\"categories\"];\r         return categories != null ? categories.Split(',') : new string[0];\r     }\r \r     public async Task<Registration> StoreCategoriesAndSubscribe(IEnumerable<string> categories)\r     {\r         var categoriesAsString = string.Join(\",\", categories);\r         var settings = IsolatedStorageSettings.ApplicationSettings;\r         if (!settings.Contains(\"categories\"))\r         {\r             settings.Add(\"categories\", categoriesAsString);\r         }\r         else\r         {\r             settings[\"categories\"] = categoriesAsString;\r         }\r         settings.Save();\r \r         return await SubscribeToCategories();\r     }\r \r     public async Task<Registration> SubscribeToCategories()\r     {\r         registrationTask = new TaskCompletionSource<Registration>();\r \r         var channel = HttpNotificationChannel.Find(\"MyPushChannel\");\r \r         if (channel == null)\r         {\r             channel = new HttpNotificationChannel(\"MyPushChannel\");\r             channel.Open();\r             channel.BindToShellToast();\r             channel.ChannelUriUpdated += channel_ChannelUriUpdated;\r \r             // This is optional, used to receive notifications while the app is running.\r             channel.ShellToastNotificationReceived += channel_ShellToastNotificationReceived;\r         }\r \r         // If channel.ChannelUri is not null, we will complete the registrationTask here.  \r         // If it is null, the registrationTask will be completed in the ChannelUriUpdated event handler.\r         if (channel.ChannelUri != null)\r         {\r             await RegisterTemplate(channel.ChannelUri);\r         }\r \r         return await registrationTask.Task;\r     }\r \r     async void channel_ChannelUriUpdated(object sender, NotificationChannelUriEventArgs e)\r     {\r         await RegisterTemplate(e.ChannelUri);\r     }\r \r     async Task<Registration> RegisterTemplate(Uri channelUri)\r     {\r         // Using a template registration to support notifications across platforms.\r         // Any template notifications that contain messageParam and a corresponding tag expression\r         // will be delivered for this registration.\r \r         const string templateBodyMPNS = \"<wp:Notification xmlns:wp=\"WPNotification\">\" +\r                                             \"<wp:Toast>\" +\r                                                 \"<wp:Text1>$(messageParam)</wp:Text1>\" +\r                                             \"</wp:Toast>\" +\r                                         \"</wp:Notification>\";\r \r         // The stored categories tags are passed with the template registration.\r \r         registrationTask.SetResult(await hub.RegisterTemplateAsync(channelUri.ToString(), \r             templateBodyMPNS, \"simpleMPNSTemplateExample\", this.RetrieveCategories()));\r \r         return await registrationTask.Task;\r     }\r \r     // This is optional. It is used to receive notifications while the app is running.\r     void channel_ShellToastNotificationReceived(object sender, NotificationEventArgs e)\r     {\r         StringBuilder message = new StringBuilder();\r         string relativeUri = string.Empty;\r \r         message.AppendFormat(\"Received Toast {0}:\\n\", DateTime.Now.ToShortTimeString());\r \r         // Parse out the information that was part of the message.\r         foreach (string key in e.Collection.Keys)\r         {\r             message.AppendFormat(\"{0}: {1}\\n\", key, e.Collection[key]);\r \r             if (string.Compare(\r                 key,\r                 \"wp:Param\",\r                 System.Globalization.CultureInfo.InvariantCulture,\r                 System.Globalization.CompareOptions.IgnoreCase) == 0)\r             {\r                 relativeUri = e.Collection[key];\r             }\r         }\r \r         // Display a dialog of all the fields in the toast.\r         System.Windows.Deployment.Current.Dispatcher.BeginInvoke(() => \r         { \r             MessageBox.Show(message.ToString()); \r         });\r     }\r     ```\r \r     此类使用隔离存储区存储此设备要接收的新闻类别。它还包含用于通过[模板](./notification-hubs-templates-cross-platform-push-messages.md)通知注册来注册这些类别的方法。\r \r 4. 在 App.xaml.cs 项目文件中，将以下属性添加到 **App** 类：将 `<hub name>` 和 `<connection string with listen access>` 占位符替换为通知中心名称和前面获取的 *DefaultListenSharedAccessSignature* 的连接字符串。\r \r     ```\r     public Notifications notifications = new Notifications(\"<hub name>\", \"<connection string with listen access>\");\r     ```\r \r     > [!NOTE]\r     > 由于使用客户端应用程序分发的凭据通常是不安全的，你只应使用客户端应用程序分发具有侦听访问权限的密钥。侦听访问权限允许应用程序注册通知，但是无法修改现有注册，也无法发送通知。在受保护的后端服务中使用完全访问权限密钥，以便发送通知和更改现有注册。\r \r 5. 在 MainPage.xaml.cs 中，添加以下行：\r \r     ```\r     using Windows.UI.Popups;\r     ```\r \r 6. 在 MainPage.xaml.cs 项目文件中，添加以下方法：\r \r     ```\r     private async void SubscribeButton_Click(object sender, RoutedEventArgs e)\r     {\r       var categories = new HashSet<string>();\r       if (WorldCheckBox.IsChecked == true) categories.Add(\"World\");\r       if (PoliticsCheckBox.IsChecked == true) categories.Add(\"Politics\");\r       if (BusinessCheckBox.IsChecked == true) categories.Add(\"Business\");\r       if (TechnologyCheckBox.IsChecked == true) categories.Add(\"Technology\");\r       if (ScienceCheckBox.IsChecked == true) categories.Add(\"Science\");\r       if (SportsCheckBox.IsChecked == true) categories.Add(\"Sports\");\r \r       var result = await ((App)Application.Current).notifications.StoreCategoriesAndSubscribe(categories);\r \r       MessageBox.Show(\"Subscribed to: \" + string.Join(\",\", categories) + \" on registration id : \" +\r          result.RegistrationId);\r     }\r     ```\r \r     此方法创建一个类别列表并使用 **Notifications** 类将该列表存储在本地存储区中，将相应的标签注册到你的通知中心。更改类别时，使用新类别重新创建注册。\r \r 你的应用程序现在可以将一组类别存储在设备的本地存储区中了，每当用户更改所选类别时，会将这些类别注册到通知中心。\r \r ## 注册通知\r \r 这些步骤用于在启动时将在本地存储区中存储的类别注册到通知中心。\r \r > [!NOTE]\r > 由于 Microsoft 推送通知服务 (MPNS) 分配的通道 URI 随时可能更改，因此你应该经常注册通知以避免通知失败。此示例在每次应用程序启动时注册通知。对于经常运行（一天一次以上）的应用程序，如果每次注册间隔时间不到一天，你可以跳过注册来节省带宽。\r \r 1. 打开 App.xaml.cs 文件，将 **async** 修饰符添加到 **Application\\_Launching** 方法，并将你在[通知中心入门]中添加的通知中心注册代码替换为以下代码：\r \r     ```\r     private async void Application_Launching(object sender, LaunchingEventArgs e)\r     {\r         var result = await notifications.SubscribeToCategories();\r \r         if (result != null)\r             System.Windows.Deployment.Current.Dispatcher.BeginInvoke(() =>\r             {\r                 MessageBox.Show(\"Registration Id :\" + result.RegistrationId, \"Registered\", MessageBoxButton.OK);\r             });\r     }\r     ```\r \r     这确保每次应用程序启动时，它从本地存储区检索类别并请求注册这些类别。\r \r 2. 在 MainPage.xaml.cs 项目文件中，添加实现 **OnNavigatedTo** 方法的以下代码：\r \r     ```\r     protected override void OnNavigatedTo(NavigationEventArgs e)\r     {\r         var categories = ((App)Application.Current).notifications.RetrieveCategories();\r \r         if (categories.Contains(\"World\")) WorldCheckBox.IsChecked = true;\r         if (categories.Contains(\"Politics\")) PoliticsCheckBox.IsChecked = true;\r         if (categories.Contains(\"Business\")) BusinessCheckBox.IsChecked = true;\r         if (categories.Contains(\"Technology\")) TechnologyCheckBox.IsChecked = true;\r         if (categories.Contains(\"Science\")) ScienceCheckBox.IsChecked = true;\r         if (categories.Contains(\"Sports\")) SportsCheckBox.IsChecked = true;\r     }\r     ```\r \r     这基于以前保存的类别状态更新主页。\r \r 应用程序现在已完成，可以在设备的本地存储区中存储一组类别了，每当用户更改所选类别时将使用这些类别注册到通知中心。接下来，我们将定义一个后端，它可将类别通知发送到此应用程序。\r \r ## 发送带标记的通知\r \r [!INCLUDE [notification-hubs-send-categories-template](../../includes/notification-hubs-send-categories-template.md)]\r \r ## 运行应用并生成通知\r \r 1. 在 Visual Studio 中，按 F5 编译并启动应用程序。\r \r     ![][1]\r \r     请注意，应用程序 UI 提供了一组开关，你可以使用它们选择要订阅的类别。\r \r 2. 启用一个或多个类别开关，然后单击“订阅”。\r \r     应用程序将所选类别转换为标签并针对所选标签从通知中心请求注册新设备。返回注册的类别并显示在对话框中。\r \r     ![][2]\r \r 3. 收到类别订阅已完成的确认消息后，运行控制台应用以发送每个类别的通知。确认你只会收到订阅的类别的通知。\r \r     ![][3]\r \r 你已完成本主题。\r \r <!-- Anchors. -->\r [Add category selection to the app]: #adding-categories\r [Register for notifications]: #register\r [Send notifications from your back-end]: #send\r [Run the app and generate notifications]: #test-app\r [Next Steps]: #next-steps\r \r <!-- Images. -->\r [1]: ./media/notification-hubs-windows-phone-send-breaking-news/notification-hub-breakingnews.png\r [2]: ./media/notification-hubs-windows-phone-send-breaking-news/notification-hub-registration.png\r [3]: ./media/notification-hubs-windows-phone-send-breaking-news/notification-hub-toast.png\r \r <!-- URLs.-->\r [通知中心入门]: ./notification-hubs-windows-mobile-push-notifications-mpns.md\r \r <!---HONumber=Mooncake_0815_2016-->"}