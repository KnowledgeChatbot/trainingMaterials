{"Title":"在运行 Linux 的 Azure 虚拟机上安装和配置 PostgreSQL","Description":"了解如何在 Azure 中的 Linux 虚拟机上安装和配置 PostgreSQL","Content":"\r #在 Azure 上安装和配置 PostgreSQL\r \r PostgreSQL 是一种类似于 Oracle 和 DB2 的高级开放源代码数据库。它包含许多企业级功能，比如完整的 ACID 合规性、可靠的事务处理和多版本并发控制。它还支持 ANSI SQL 和 SQL/MED（包括 Oracle、MySQL、MongoDB 等等的外来数据包装器）等标准。它具有高度的可扩展性，支持超过 12 种程序语言，并支持 GIN 和 GiST 索引、空间数据，以及面向 JSON 或基于键值的应用程序的多款类似于 NoSQL 的功能。\r \r 在本文中，你将了解如何在运行 Linux 的 Azure 虚拟机上安装和配置 PostgreSQL。\r \r [!INCLUDE [了解部署模型](../../../includes/learn-about-deployment-models-both-include.md)]\r \r ## 安装 PostgreSQL\r \r > [!NOTE]\r >你必须已经有一个运行 Linux 的 Azure 虚拟机，才能完成本教程。在继续操作前，若要创建并设置 Linux VM，请参阅 [Azure Linux VM 教程](quick-create-cli.md)。\r \r 在此示例中，使用端口 1999 作为 PostgreSQL 端口。\r \r 通过 PuTTY 连接到你创建的 Linux VM。如果这是你首次使用 Azure Linux VM，请参阅[如何在 Azure 上将 SSH 用于 Linux](mac-create-ssh-keys.md)，以了解如何使用 PuTTY 连接到 Linux VM。\r \r 1. 运行以下命令切换成根用户（管理员）：\r \r     ```\r     # sudo su -\r     ```\r \r 2. 某些分发版具有在安装 PostgreSQL 之前必须安装的依赖项。查看此列表中的分发版并运行相应的命令：\r \r     - 基于 Red Hat 的 Linux：\r \r         ```\r         # yum install readline-devel gcc make zlib-devel openssl openssl-devel libxml2-devel pam-devel pam  libxslt-devel tcl-devel python-devel -y  \r         ```\r \r     - 基于 Debian 的 Linux：\r \r         ```\r          # apt-get install readline-devel gcc make zlib-devel openssl openssl-devel libxml2-devel pam-devel pam libxslt-devel tcl-devel python-devel -y  \r         ```\r \r     - SUSE Linux：\r \r         ```\r         # zypper install readline-devel gcc make zlib-devel openssl openssl-devel libxml2-devel pam-devel pam  libxslt-devel tcl-devel python-devel -y  \r         ```\r \r 3. 将 PostgreSQL 下载到根目录中，然后对包进行解压缩：\r \r     ```\r     # wget https://ftp.postgresql.org/pub/source/v9.3.5/postgresql-9.3.5.tar.bz2 -P /root/\r \r     # tar jxvf  postgresql-9.3.5.tar.bz2\r     ```\r \r     上面是一个示例：你可以在 [/pub/source/ 的索引](https://ftp.postgresql.org/pub/source/)中找到更详细的下载地址。\r \r 4. 若要启动生成，请运行这些命令：\r \r     ```\r     # cd postgresql-9.3.5\r \r     # ./configure --prefix=/opt/postgresql-9.3.5\r     ```\r \r 5. 如果希望生成所有能生成的内容，包括文档（HTML 和手册页）和其他模块 (contrib)，则改为运行以下命令：\r \r     ```\r     # gmake install-world\r     ```\r \r     你应该会收到以下确认消息：\r \r     ```\r     PostgreSQL, contrib, and documentation successfully made. Ready to install.\r     ```\r \r ## 配置 PostgreSQL\r \r 1. （可选）创建一个符号链接以便将 PostgreSQL 引用缩短为不包含版本号：\r \r     ```\r     # ln -s /opt/pgsql9.3.5 /opt/pgsql\r     ```\r \r 2. 为数据库创建一个目录：\r \r     ```\r     # mkdir -p /opt/pgsql_data\r     ```\r \r 3. 创建一个非根用户并修改该用户的配置文件。然后，切换到该新用户（本例中称为 *postgres*）：\r \r     ```\r     # useradd postgres\r \r     # chown -R postgres.postgres /opt/pgsql_data\r \r     # su - postgres\r     ```\r \r    >[!NOTE]\r    >出于安全原因，PostgreSQL 将使用非根用户来初始化、启动或关闭数据库。\r \r 4. 通过输入以下命令编辑 *bash\\_profile* 文件。这些行将添加到 *bash\\_profile* 文件的末尾：\r \r     ```\r     cat >> ~/.bash_profile <<EOF\r     export PGPORT=1999\r     export PGDATA=/opt/pgsql_data\r     export LANG=en_US.utf8\r     export PGHOME=/opt/pgsql\r     export PATH=\\$PATH:\\$PGHOME/bin\r     export MANPATH=\\$MANPATH:\\$PGHOME/share/man\r     export DATA=`date +\"%Y%m%d%H%M\"`\r     export PGUSER=postgres\r     alias rm='rm -i'\r     alias ll='ls -lh'\r     EOF\r     ```\r \r 5. 执行 *bash\\_profile* 文件：\r \r     ```\r     $ source .bash_profile\r     ```\r \r 6. 使用以下命令验证你的安装：\r \r     ```\r     $ which psql\r     ```\r \r     如果安装成功，你将看到以下响应：\r \r     ```\r     /opt/pgsql/bin/psql\r     ```\r \r 7. 你还可以检查 PostgreSQL 版本：\r \r     ```\r     $ psql -V\r     ```\r \r 8. 初始化数据库：\r \r     ```\r     $ initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W\r     ```\r \r     你应该会收到以下输出：\r \r ![图像](./media/postgresql-install/no1.png)\r \r ## 设置 PostgreSQL\r \r <!--\t[postgres@ test ~]$ exit -->\r \r 运行以下命令：\r \r ```\r # cd /root/postgresql-9.3.5/contrib/start-scripts\r \r # cp linux /etc/init.d/postgresql\r ```\r \r 修改 /etc/init.d/postgresql 文件中的两个变量。前缀设置为 PostgreSQL 的安装路径：**/opt/pgsql**。PGDATA 设置为 PostgreSQL 的数据存储路径：**/opt/pgsql\\_data**。\r \r ```\r # sed -i '32s#usr/local#opt#' /etc/init.d/postgresql\r \r # sed -i '35s#usr/local/pgsql/data#opt/pgsql_data#' /etc/init.d/postgresql\r ```\r \r ![图像](./media/postgresql-install/no2.png)\r \r 更改文件以使其成为可执行文件：\r \r ```\r # chmod +x /etc/init.d/postgresql\r ```\r \r 启动 PostgreSQL：\r \r ```\r # /etc/init.d/postgresql start\r ```\r \r 检查 PostgreSQL 的终结点是否已打开：\r \r ```\r # netstat -tunlp|grep 1999\r ```\r \r 你应该会看到以下输出：\r \r ![图像](./media/postgresql-install/no3.png)\r \r ## 连接到 Postgres 数据库\r \r 再次切换成 postgres 用户：\r \r ```\r # su - postgres\r ```\r \r 创建一个 Postgres 数据库：\r \r ```\r $ createdb events\r ```\r \r 连接到刚创建的事件数据库：\r \r ```\r $ psql -d events\r ```\r \r ## 创建和删除 Postgres 表\r \r 既然已经连接到数据库，就可以在其中创建表了。\r \r 例如，使用以下命令创建一个新的示例 Postgres 表：\r \r ```\r CREATE TABLE potluck (name VARCHAR(20),\tfood VARCHAR(30),\tconfirmed CHAR(1), signup_date DATE);\r ```\r \r 现在已经设置一个具有以下列名和限制的 4 列表：\r \r 1. “name”列受 VARCHAR 命令限制，必须少于 20 个字符。\r 2. “food”列指示每个人将携带的食物。VARCHAR 将此文本限制为 30 个字符以下。\r 3. “confirmed”列记录此人是否接受了百乐餐邀请。可接受的值为“Y”和“N”。\r 4. “date”列将在他们报名参加该活动时显示。Postgres 要求日期格式为 yyyy-mm-dd。\r \r 如果成功创建了表，你应该会看到以下内容：\r \r ![图像](./media/postgresql-install/no4.png)\r \r 你还可以使用以下命令检查表结构：\r \r ![图像](./media/postgresql-install/no5.png)\r \r ### 向表中添加数据\r \r 首先，将信息插入某一行：\r \r ```\r INSERT INTO potluck (name, food, confirmed, signup_date) VALUES('John', 'Casserole', 'Y', '2012-04-11');\r ```\r \r 你应该会看到以下输出：\r \r ![图像](./media/postgresql-install/no6.png)\r \r 你也可以向表中多添加几个人。下面是几个选项，你也可以自行创建：\r \r ```\r INSERT INTO potluck (name, food, confirmed, signup_date) VALUES('Sandy', 'Key Lime Tarts', 'N', '2012-04-14');\r \r INSERT INTO potluck (name, food, confirmed, signup_date) VALUES ('Tom', 'BBQ','Y', '2012-04-18');\r \r INSERT INTO potluck (name, food, confirmed, signup_date) VALUES('Tina', 'Salad', 'Y', '2012-04-18');\r ```\r \r ### 显示表\r \r 使用以下命令来显示表：\r \r ```\r select * from potluck;\r ```\r \r 输出为：\r \r ![图像](./media/postgresql-install/no7.png)\r \r ### 删除表中的数据\r \r 使用以下命令来删除表中的数据：\r \r ```\r delete from potluck where name=’John’;\r ```\r \r 这将删除“John”行中的所有信息。输出为：\r \r ![图像](./media/postgresql-install/no8.png)\r \r ### 更新表中的数据\r \r 使用以下命令来更新表中的数据。在此示例中，Sandy 已经确认将出席活动，因此我们将她的回复从“N”更改为“Y”：\r \r ```\r  UPDATE potluck set confirmed = 'Y' WHERE name = 'Sandy';\r ```\r \r ##获取有关 PostgreSQL 的详细信息\r 现在，你已完成在 Azure Linux VM 中安装 PostgreSQL，你可以在 Azure 中享受使用它的过程。若要了解有关 PostgreSQL 的详细信息，请访问 [PostgreSQL 网站](http://www.postgresql.org/)。\r \r <!---HONumber=Mooncake_1221_2015-->"}