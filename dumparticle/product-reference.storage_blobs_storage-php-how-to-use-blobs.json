{"Title":"如何通过 PHP 使用 Blob 存储（对象存储）","Description":"使用 Azure Blob 存储（对象存储）将非结构化数据存储在云中。","Content":"# <a name=\"how-to-use-blob-storage-from-php\"></a>如何通过 PHP 使用 Blob 存储\r [!INCLUDE [storage-selector-blob-include](../../../includes/storage-selector-blob-include.md)]\r \r [!INCLUDE [storage-try-azure-tools-queues](../../../includes/storage-try-azure-tools-blobs.md)]\r \r ## <a name=\"overview\"></a>概述\r Azure Blob 存储是一种将非结构化数据作为对象/Blob 存储在云中的服务。 Blob 存储可以存储任何类型的文本或二进制数据，例如文档、媒体文件或应用程序安装程序。 Blob 存储也称为对象存储。\r \r 本指南演示如何使用 Azure Blob 服务执行常见方案。 示例采用 PHP 编写，并使用了[适用于 PHP 的 Azure 存储客户端库][download]。 涉及的任务包括上传、列出、下载和删除 Blob。 有关 Blob 的详细信息，请参阅 [后续步骤](#next-steps) 部分。\r \r [!INCLUDE [storage-blob-concepts-include](../../../includes/storage-blob-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../../includes/storage-create-account-include.md)]\r \r ## <a name=\"create-a-php-application\"></a>创建 PHP 应用程序\r 创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码中引用[适用于 PHP 的 Azure 存储客户端库][download]中的类。 可使用任何开发工具（包括“记事本”）创建应用程序。\r \r 在本指南中，将使用 Blob 存储服务功能，可在 PHP 应用程序中本地调用这些功能，或在 Azure Web 角色、辅助角色或网站内运行的代码中进行调用。\r \r ## <a name=\"get-the-azure-client-libraries\"></a>获取 Azure 客户端库\r [!INCLUDE [get-client-libraries](../../../includes/get-client-libraries.md)]\r \r ## <a name=\"configure-your-application-to-access-the-blob-service\"></a>配置应用程序以访问 Blob 服务\r 若要使用 Azure Blob 服务 API，需要：\r \r 1. 使用 [require_once] 语句引用 autoloader 文件，并\r 2. 引用所用的任意类。\r \r 下面的示例演示了如何包括 autoloader 文件并引用 **ServicesBuilder** 类。\r \r ```php\r require_once 'vendor/autoload.php';\r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r ```\r \r 在下面的示例中，`require_once` 语句将始终显示，但只会引用执行该示例所需的类。\r \r ## <a name=\"set-up-an-azure-storage-connection\"></a>设置 Azure 存储连接\r 若要实例化 Azure Blob 服务客户端，必须首先具有有效的连接字符串。 Blob 服务连接字符串的格式为：\r \r 对于访问实时服务：\r \r ```php\r DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey];EndpointSuffix=core.chinacloudapi.cn\r ```\r \r 访问存储模拟器：\r \r ```php\r UseDevelopmentStorage=true\r ```\r \r 若要创建任何 Azure 服务客户端，则需要使用 **ServicesBuilder** 类。 方法：\r \r * 将连接字符串直接传递给此类或\r * 在 Web 应用中使用环境变量来存储连接字符串。 要配置连接字符串，请参阅 [Azure Web 应用配置设置](../../app-service/web-sites-configure.md)文档。\r \r 在此处列出的示例中，将直接传递连接字符串。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\r ```\r \r ## <a name=\"create-a-container\"></a>创建容器\r [!INCLUDE [storage-container-naming-rules-include](../../../includes/storage-container-naming-rules-include.md)]\r \r 利用 **BlobRestProxy** 对象，可以使用 **createContainer** 方法创建 Blob 容器。 创建容器时，可以在该容器上设置选项，但此操作不是必需的。 （下面的示例演示了如何设置容器访问控制列表 (ACL) 和容器元数据。）\r \r ```php\r require_once 'vendor\\autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Blob\\Models\\CreateContainerOptions;\r use MicrosoftAzure\\Storage\\Blob\\Models\\PublicAccessType;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Create blob REST proxy.\r $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\r \r // OPTIONAL: Set public access policy and metadata.\r // Create container options object.\r $createContainerOptions = new CreateContainerOptions();\r \r // Set public access policy. Possible values are\r // PublicAccessType::CONTAINER_AND_BLOBS and PublicAccessType::BLOBS_ONLY.\r // CONTAINER_AND_BLOBS:\r // Specifies full public read access for container and blob data.\r // proxys can enumerate blobs within the container via anonymous\r // request, but cannot enumerate containers within the storage account.\r //\r // BLOBS_ONLY:\r // Specifies public read access for blobs. Blob data within this\r // container can be read via anonymous request, but container data is not\r // available. proxys cannot enumerate blobs within the container via\r // anonymous request.\r // If this value is not specified in the request, container data is\r // private to the account owner.\r $createContainerOptions->setPublicAccess(PublicAccessType::CONTAINER_AND_BLOBS);\r \r // Set container metadata.\r $createContainerOptions->addMetaData(\"key1\", \"value1\");\r $createContainerOptions->addMetaData(\"key2\", \"value2\");\r \r try    {\r     // Create container.\r     $blobRestProxy->createContainer(\"mycontainer\", $createContainerOptions);\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179439.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r 调用 **setPublicAccess(PublicAccessType::CONTAINER\\_AND\\_BLOBS)** 将使容器和 Blob 数据可通过匿名请求访问。 通过调用 **setPublicAccess(PublicAccessType::BLOBS_ONLY)** 仅使 Blob 数据可通过匿名请求访问。 有关容器 ACL 的详细信息，请参阅[设置容器 ACL (REST API)][container-acl]。\r \r 有关 Blob 服务错误代码的详细信息，请参阅 [Blob Service Error Codes][error-codes]（Blob 服务错误代码）。\r \r ## <a name=\"upload-a-blob-into-a-container\"></a>将 Blob 上传到容器中\r 若要将文件作为 Blob 上传，请使用 **BlobRestProxy->createBlockBlob** 方法。 此操作会创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。 下面的代码示例假定已创建了容器，并使用 [fopen][fopen] 将文件作为流打开。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r $connectionString = \"DefaultEndpointsProtocol=http;AccountName=<accountNameHere>;AccountKey=<accountKeyHere>;EndpointSuffix=core.chinacloudapi.cn\";\r \r // Create blob REST proxy.\r $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\r \r $content = fopen(\"c:\\myfile.txt\", \"r\");\r $blob_name = \"myblob\";\r \r try    {\r     //Upload blob\r     $blobRestProxy->createBlockBlob(\"mycontainer\", $blob_name, $content);\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179439.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r 请注意，上面的示例将 Blob 作为流上传。 但是，也可使用 [file\\_get\\_contents][file_get_contents] 函数将 Blob 作为字符串上传。 若要使用前面的示例执行此操作，请将 `$content = fopen(\"c:\\myfile.txt\", \"r\");` 更改为 `$content = file_get_contents(\"c:\\myfile.txt\");`。\r \r ## <a name=\"list-the-blobs-in-a-container\"></a>列出容器中的 Blob\r 若要列出容器中的 Blob，请将 **BlobRestProxy->listBlobs** 方法与 **foreach** 循环一起使用来循环访问结果。 以下代码将容器中的每个 Blob 的名称作为容器中的输出并将其 URI 显示到浏览器。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r // Create blob REST proxy.\r $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\r \r try    {\r     // List blobs.\r     $blob_list = $blobRestProxy->listBlobs(\"mycontainer\");\r     $blobs = $blob_list->getBlobs();\r \r     foreach($blobs as $blob)\r     {\r         echo $blob->getName().\": \".$blob->getUrl().\"<br />\";\r     }\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179439.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r ## <a name=\"download-a-blob\"></a>下载 Blob\r 若要下载 Blob，请调用 **BlobRestProxy->getBlob** 方法，然后对生成的 **GetBlobResult** 对象调用 **getContentStream** 方法。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r // Create blob REST proxy.\r $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\r \r try    {\r     // Get blob.\r     $blob = $blobRestProxy->getBlob(\"mycontainer\", \"myblob\");\r     fpassthru($blob->getContentStream());\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179439.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r 请注意，上面的示例将 Blob 作为流资源获取（默认行为）。 但是，可以使用 [stream\\_get\\_contents][stream-get-contents] 函数将返回的流转换为字符串。\r \r ## <a name=\"delete-a-blob\"></a>删除 Blob\r 若要删除 Blob，请将容器名称和 Blob 名称传递到 **BlobRestProxy->deleteBlob**。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r // Create blob REST proxy.\r $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\r \r try    {\r     // Delete blob.\r     $blobRestProxy->deleteBlob(\"mycontainer\", \"myblob\");\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179439.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r ## <a name=\"delete-a-blob-container\"></a>删除 Blob 容器\r 最后，若要删除 Blob 容器，请将容器名称传递到 **BlobRestProxy->deleteContainer**。\r \r ```php\r require_once 'vendor/autoload.php';\r \r use MicrosoftAzure\\Storage\\Common\\ServicesBuilder;\r use MicrosoftAzure\\Storage\\Common\\ServiceException;\r \r // Create blob REST proxy.\r $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\r \r try    {\r     // Delete container.\r     $blobRestProxy->deleteContainer(\"mycontainer\");\r }\r catch(ServiceException $e){\r     // Handle exception based on error codes and messages.\r     // Error codes and messages are here:\r     // http://msdn.microsoft.com/library/azure/dd179439.aspx\r     $code = $e->getCode();\r     $error_message = $e->getMessage();\r     echo $code.\": \".$error_message.\"<br />\";\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 在了解了 Azure Blob 服务的基础知识后，可单击下面的链接以了解有关更复杂的存储任务的详细信息。\r \r * 请访问 [Azure 存储 PHP 客户端库的 API 参考](http://azure.github.io/azure-storage-php/)\r * 请参阅[高级 Blob 示例](https://github.com/Azure/azure-storage-php/blob/master/samples/BlobSamples.php)。\r \r 有关详细信息，另请参阅 [PHP 开发人员中心](/develop/php/)。\r \r [download]: https://github.com/Azure/azure-storage-php\r [container-acl]: http://msdn.microsoft.com/library/azure/dd179391.aspx\r [error-codes]: http://msdn.microsoft.com/library/azure/dd179439.aspx\r [file_get_contents]: http://php.net/file_get_contents\r [require_once]: http://php.net/require_once\r [fopen]: http://www.php.net/fopen\r [stream-get-contents]: http://www.php.net/stream_get_contents\r <!--Update_Description: update WindowAzure namespace to MicrosoftAzure-->"}