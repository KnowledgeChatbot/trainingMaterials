{"Title":"使用 Azure Cosmos DB 的 MongoDB API 构建 Web 应用","Description":"使用 MongoDB 的 API 创建联机数据库 Web 应用的 Azure Cosmos DB 教程。","Content":"# <a name=\"azure-cosmos-db-connect-to-a-mongodb-app-using-net\"></a>Azure Cosmos DB：使用 .NET 连接到 MongoDB 应用\r \r Azure Cosmos DB 由 世纪互联 提供，是多个区域分布的多模型数据库服务。 可快速创建和查询文档、键/值数据库，所有这些都受益于 Azure Cosmos DB 核心的多个区域分布和水平缩放功能。 \r <!-- Notice: 全球 to 多个区域 -->\r \r 本教程演示如何使用 Azure 门户创建 Azure Cosmos DB 帐户，以及如何使用 [MongoDB API](mongodb-introduction.md) 创建用于存储数据的数据库和集合。 \r \r 本教程涵盖以下任务：\r \r > [!div class=\"checklist\"]\r > * 创建 Azure Cosmos DB 帐户 \r > * 更新连接字符串\r > * 在虚拟机上创建 MongoDB 应用 \r \r ## <a name=\"create-a-database-account\"></a>创建数据库帐户\r \r 首先在 Azure 门户中创建 Azure Cosmos DB 帐户。  \r \r 如果没有 Azure 订阅，可在开始前创建一个[试用帐户](https://www.azure.cn/pricing/1rmb-trial/)。 \r [!INCLUDE [cosmos-db-emulator-mongodb](../../includes/cosmos-db-emulator-mongodb.md)]\r \r > [!TIP]\r > * 已有一个 Azure Cosmos DB 帐户？ 如果有，请跳到[设置 Visual Studio 解决方案](#SetupVS)\r > * 如果使用 Azure Cosmos DB 模拟器，请遵循 [Azure Cosmos DB 模拟器](local-emulator.md)中的步骤设置该模拟器，并直接跳到[设置 Visual Studio 解决方案](#SetupVS)。 \r >\r >\r \r [!INCLUDE [cosmos-db-create-dbaccount-mongodb](../../includes/cosmos-db-create-dbaccount-mongodb.md)]\r \r ## <a name=\"update-your-connection-string\"></a>更新连接字符串\r \r 1. 在 Azure 门户的“Azure Cosmos DB”页中，选择用于 MongoDB 帐户的 API。 \r 2. 在“帐户”边栏选项卡的左侧，单击“快速启动”。 \r 3. 选择平台（*.NET 驱动程序*、*Node.js 驱动程序*、*MongoDB Shell*、*Java 驱动程序*、*Python 驱动程序*）。 如果未列出驱动程序或工具，别担心，我们持续记录了更多连接代码片段。 \r 4. 将代码片段复制并粘贴到 MongoDB 应用后，即已准备就绪。\r \r ## <a name=\"set-up-your-mongodb-app\"></a>设置 MongoDB 应用\r \r 可以参考[在 Azure 中创建连接到虚拟机上运行的 MongoDB 的 Web 应用](../app-service/app-service-web-tutorial-nodejs-mongodb-app.md)教程（需进行少量修改），快速设置一个连接到 MongoDB 帐户的 API 的 MongoDB 应用程序（在本地或发布到 Azure Web 应用）。  \r \r 1. 请遵循该教程，不过需要做出一项修改。  将 Dal.cs 代码替换为以下内容：\r \r     ```csharp   \r     using System;\r     using System.Collections.Generic;\r     using System.Linq;\r     using System.Web;\r     using MyTaskListApp.Models;\r     using MongoDB.Driver;\r     using MongoDB.Bson;\r     using System.Configuration;\r     using System.Security.Authentication;\r \r     namespace MyTaskListApp\r     {\r         public class Dal : IDisposable\r         {\r             //private MongoServer mongoServer = null;\r             private bool disposed = false;\r \r             // To do: update the connection string with the DNS name\r             // or IP address of your server. \r             //For example, \"mongodb://testlinux.chinacloudapp.cn\r             private string connectionString = \"mongodb://localhost:27017\";\r             private string userName = \"<your user name>\";\r             private string host = \"<your host>\";\r             private string password = \"<your password>\";\r \r             // This sample uses a database named \"Tasks\" and a \r             //collection named \"TasksList\".  The database and collection \r             //will be automatically created if they don't already exist.\r             private string dbName = \"Tasks\";\r             private string collectionName = \"TasksList\";\r \r             // Default constructor.        \r             public Dal()\r             {\r             }\r \r             // Gets all Task items from the MongoDB server.        \r             public List<MyTask> GetAllTasks()\r             {\r                 try\r                 {\r                     var collection = GetTasksCollection();\r                     return collection.Find(new BsonDocument()).ToList();\r                 }\r                 catch (MongoConnectionException)\r                 {\r                     return new List<MyTask>();\r                 }\r             }\r \r             // Creates a Task and inserts it into the collection in MongoDB.\r             public void CreateTask(MyTask task)\r             {\r                 var collection = GetTasksCollectionForEdit();\r                 try\r                 {\r                     collection.InsertOne(task);\r                 }\r                 catch (MongoCommandException ex)\r                 {\r                     string msg = ex.Message;\r                 }\r             }\r \r             private IMongoCollection<MyTask> GetTasksCollection()\r             {\r                 MongoClientSettings settings = new MongoClientSettings();\r                 settings.Server = new MongoServerAddress(host, 10255);\r                 settings.UseSsl = true;\r                 settings.SslSettings = new SslSettings();\r                 settings.SslSettings.EnabledSslProtocols = SslProtocols.Tls12;\r \r                 MongoIdentity identity = new MongoInternalIdentity(dbName, userName);\r                 MongoIdentityEvidence evidence = new PasswordEvidence(password);\r \r                 settings.Credentials = new List<MongoCredential>()\r                 {\r                     new MongoCredential(\"SCRAM-SHA-1\", identity, evidence)\r                 };\r \r                 MongoClient client = new MongoClient(settings);\r                 var database = client.GetDatabase(dbName);\r                 var todoTaskCollection = database.GetCollection<MyTask>(collectionName);\r                 return todoTaskCollection;\r             }\r \r             private IMongoCollection<MyTask> GetTasksCollectionForEdit()\r             {\r                 MongoClientSettings settings = new MongoClientSettings();\r                 settings.Server = new MongoServerAddress(host, 10255);\r                 settings.UseSsl = true;\r                 settings.SslSettings = new SslSettings();\r                 settings.SslSettings.EnabledSslProtocols = SslProtocols.Tls12;\r \r                 MongoIdentity identity = new MongoInternalIdentity(dbName, userName);\r                 MongoIdentityEvidence evidence = new PasswordEvidence(password);\r \r                 settings.Credentials = new List<MongoCredential>()\r                 {\r                     new MongoCredential(\"SCRAM-SHA-1\", identity, evidence)\r                 };\r                 MongoClient client = new MongoClient(settings);\r                 var database = client.GetDatabase(dbName);\r                 var todoTaskCollection = database.GetCollection<MyTask>(collectionName);\r                 return todoTaskCollection;\r             }\r \r             # region IDisposable\r \r             public void Dispose()\r             {\r                 this.Dispose(true);\r                 GC.SuppressFinalize(this);\r             }\r \r             protected virtual void Dispose(bool disposing)\r             {\r                 if (!this.disposed)\r                 {\r                     if (disposing)\r                     {\r                     }\r                 }\r \r                 this.disposed = true;\r             }\r \r             # endregion\r         }\r     }\r     ```\r \r 2. 从 Azure 门户的“密钥”页中，根据帐户设置在 Dal.cs 文件中修改以下变量：\r \r     ```csharp   \r     private string userName = \"<your user name>\";\r     private string host = \"<your host>\";\r     private string password = \"<your password>\";\r     ```\r \r 3. 应用可供使用！\r \r ## <a name=\"clean-up-resources\"></a>清理资源\r \r 如果不打算继续使用此应用，请使用以下步骤删除本教程在 Azure 门户中创建的所有资源。 \r \r 1. 在 Azure 门户的左侧菜单中，单击“资源组”，然后单击已创建资源的名称。 \r 2. 在资源组页上单击“删除”，在文本框中键入要删除的资源的名称，并单击“删除”。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 在本教程中，已完成以下内容：\r \r > [!div class=\"checklist\"]\r > * 创建 Azure Cosmos DB 帐户 \r > * 更新连接字符串\r > * 在虚拟机上创建 MongoDB 应用\r \r 可以继续学习下一教程，将 MongoDB 数据导入到 Azure Cosmos DB。  \r \r > [!div class=\"nextstepaction\"]\r > [将 MongoDB 数据导入 Azure Cosmos DB](mongodb-migrate.md)\r \r <!--Update_Description: update meta properties, wording update-->"}