{"Title":"使用 .NET 将文件从设备上传到 Azure IoT 中心","Description":"如何使用用于 .NET 的 Azure IoT 设备 SDK 从设备将文件上传到云中。 上传的文件存储在 Azure 存储 Blob 容器中。","Content":"# <a name=\"upload-files-from-your-device-to-the-cloud-with-iot-hub-using-net\"></a>通过 .NET 使用 IoT 中心将文件从设备上传到云\r \r [!INCLUDE [iot-hub-file-upload-language-selector](../../includes/iot-hub-file-upload-language-selector.md)]\r \r 本教程的内容基于 [Send Cloud-to-Device messages with IoT Hub](./iot-hub-csharp-csharp-c2d.md)（使用 IoT 中心发送云到设备的消息）教程中所述的代码，演示如何使用 IoT 中心的文件上传功能。 其中了说明了如何：\r \r - 安全地为设备提供用于上传文件的 Azure Blob URI。\r - 使用 IoT 中心文件上传通知在应用后端中触发对文件的处理。\r \r [IoT 中心入门](./iot-hub-csharp-csharp-getstarted.md)和[使用 IoT 中心发送云到设备的消息](./iot-hub-csharp-csharp-c2d.md)教程介绍了 IoT 中心提供的基本的设备到云和云到设备的消息传送功能。 [处理设备到云的消息](./iot-hub-csharp-csharp-process-d2c.md)教程介绍了一种在 Azure Blob 存储中可靠存储设备到云消息的方法。 但是，在某些情况下，无法轻松地将设备发送的数据映射为 IoT 中心接受的相对较小的设备到云消息。 例如：\r \r * 包含图像的大型文件\r * 视频\r * 以高频率采样的振动数据\r * 某种形式的预处理数据\r \r 通常使用 [Hadoop](/hdinsight/) 堆栈等工具在云中批处理这些文件。 需要从设备上传文件时，仍可以使用 IoT 中心的安全性和可靠性。\r \r 在本教程结束时，会运行 2 个 .NET 控制台应用：\r \r * **SimulatedDevice**， [使用 IoT 中心发送云到设备消息](./iot-hub-csharp-csharp-c2d.md) 教程中创建的应用的修改版本。 此应用使用 IoT 中心提供的 SAS URI 将文件上传到存储。\r * **ReadFileUploadNotification**，它可以接收来自 IoT 中心的文件上传通知。\r \r > [!NOTE]\r > IoT 中心通过 Azure IoT 设备 SDK 来支持许多设备平台和语言（包括 C、Java 和 Javascript）。 有关如何将设备连接到 Azure IoT 中心的分步说明，请参阅 [Azure IoT 开发人员中心]。\r > \r > \r \r 要完成本教程，需要以下各项：\r \r * Visual Studio 2015 或 Visual Studio 2017\r * 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r \r [!INCLUDE [iot-hub-associate-storage](../../includes/iot-hub-associate-storage.md)]\r \r ## <a name=\"upload-a-file-from-a-device-app\"></a>从设备应用上传文件\r \r 在本部分中，会修改在[使用 IoT 中心发送云到设备消息](./iot-hub-csharp-csharp-c2d.md)中创建的设备应用，以接收来自 IoT 中心的云到设备消息。\r \r 1. 在 Visual Studio 中，右键单击 **SimulatedDevice** 项目，单击“**添加**”，并单击“**现有项**”。 导航到某个图像文件并将它包含在项目中。 本教程假设图像名称为 `image.jpg`。\r 2. 右键单击该图像，并单击“**属性**”。 确保“**复制到输出目录**”设置为“**始终复制**”。\r \r     ![][1]\r 3. 在 **Program.cs** 文件的顶部添加以下语句：\r \r     ```csharp\r     using System.IO;\r     ```\r 4. 将以下方法添加到 **Program** 类：\r \r     ```csharp\r     private static async void SendToBlobAsync()\r     {\r         string fileName = \"image.jpg\";\r         Console.WriteLine(\"Uploading file: {0}\", fileName);\r         var watch = System.Diagnostics.Stopwatch.StartNew();\r \r         using (var sourceData = new FileStream(@\"image.jpg\", FileMode.Open))\r         {\r             await deviceClient.UploadToBlobAsync(fileName, sourceData);\r         }\r \r         watch.Stop();\r         Console.WriteLine(\"Time to upload file: {0}ms\\n\", watch.ElapsedMilliseconds);\r     }\r     ```\r \r     `UploadToBlobAsync` 方法获取要上传的文件的文件名与流源，并处理上传到存储的任务。 控制台应用会显示上传文件所需的时间。\r 5. 在 **Main** 方法中的 `Console.ReadLine()` 行前面添加以下方法：\r \r     ```csharp\r     SendToBlobAsync();\r     ```\r \r > [!NOTE]\r > 为简单起见，本教程不实现任何重试策略。 在生产代码中，应按 MSDN 文章 [Transient Fault Handling]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r > \r > \r \r ## <a name=\"receive-a-file-upload-notification\"></a>接收文件上传通知\r 在本部分中，会编写一个 .NET 控制台应用，用于接收来自 IoT 中心的文件上传通知消息。\r \r 1. 在当前的 Visual Studio 解决方案中，通过使用“**控制台应用程序**”项目模板创建 Visual C# Windows 项目。 将项目命名为 **ReadFileUploadNotification**。\r \r     ![Visual Studio 中的新项目][2]\r 2. 在“解决方案资源管理器”中，右键单击 **ReadFileUploadNotification** 项目，并单击“管理 NuGet 包...”。\r \r 3. 在“NuGet 包管理器”窗口中，搜索“Microsoft.Azure.Devices”，并单击“安装”并接受使用条款。 \r \r     此操作会下载、安装 [Azure IoT 服务 SDK NuGet 包]，并在 **ReadFileUploadNotification** 项目中添加对它的引用。\r \r 4. 在 **Program.cs** 文件的顶部添加以下语句：\r \r     ```csharp\r     using Microsoft.Azure.Devices;\r     ```\r 5. 将以下字段添加到 **Program** 类。 将占位符值替换为在 [IoT 中心入门] 中获取的 IoT 中心连接字符串：\r \r     ```csharp\r     static ServiceClient serviceClient;\r     static string connectionString = \"{iot hub connection string}\";\r     ```\r 6. 将以下方法添加到 **Program** 类：\r \r     ```csharp\r     private async static void ReceiveFileUploadNotificationAsync()\r     {\r         var notificationReceiver = serviceClient.GetFileNotificationReceiver();\r \r         Console.WriteLine(\"\\nReceiving file upload notification from service\");\r         while (true)\r         {\r             var fileUploadNotification = await notificationReceiver.ReceiveAsync();\r             if (fileUploadNotification == null) continue;\r \r             Console.ForegroundColor = ConsoleColor.Yellow;\r             Console.WriteLine(\"Received file upload noticiation: {0}\", string.Join(\", \", fileUploadNotification.BlobName));\r             Console.ResetColor();\r \r             await notificationReceiver.CompleteAsync(fileUploadNotification);\r         }\r     }\r     ```\r \r     请注意，此接收模式与用于从设备应用接收云到设备消息的模式相同。\r 7. 最后，在 **Main** 方法中添加以下行：\r \r     ```csharp\r     Console.WriteLine(\"Receive file upload notifications\\n\");\r     serviceClient = ServiceClient.CreateFromConnectionString(connectionString);\r     ReceiveFileUploadNotificationAsync();\r     Console.WriteLine(\"Press Enter to exit\\n\");\r     Console.ReadLine();\r     ```\r \r ## <a name=\"run-the-applications\"></a>运行应用程序\r 现在，已准备就绪，可以运行应用程序了。\r \r 1. 在 Visual Studio 中，右键单击解决方案并选择“**设置启动项目**”。 选择“**多个启动项目**”，并针对 **ReadFileUploadNotification** 和 **SimulatedDevice** 应用选择“**启动**”操作。\r 2. 按 **F5**。 这两个应用程序应该都会启动。 你会在其中一个控制台应用中看到上传已完成，同时还会看到另一个控制台应用收到的上传通知消息。 可使用 [Azure 门户]或 Visual Studio 服务器资源管理器检查 Azure 存储帐户中是否存在上传的文件。\r \r    ![][50]\r \r ## <a name=\"next-steps\"></a>后续步骤\r 在本教程中，已学习了如何使用 IoT 中心的文件上传功能来简化从设备进行的文件上传。 可以使用以下文章继续探索 IoT 中心功能和方案：\r \r * [以编程方式创建 IoT 中心][lnk-create-hub]\r * [C SDK 简介][lnk-c-sdk]\r * [Azure IoT SDK][lnk-sdks]\r \r 若要进一步探索 IoT 中心的功能，请参阅：\r \r * [使用 Azure IoT Edge 将 AI 部署到边缘设备][lnk-iotedge]\r \r <!-- Images. -->\r \r [50]: ./media/iot-hub-csharp-csharp-file-upload/run-apps1.png\r [1]: ./media/iot-hub-csharp-csharp-file-upload/image-properties.png\r [2]: ./media/iot-hub-csharp-csharp-file-upload/file-upload-project-csharp1.png\r \r <!-- Links -->\r \r [Azure 门户]: https://portal.azure.cn/\r \r [Azure IoT 开发人员中心]: https://www.azure.cn/develop/iot\r \r [Transient Fault Handling]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r [Azure IoT 服务 SDK NuGet 包]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\r [lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r \r [lnk-create-hub]: ./iot-hub-rm-template-powershell.md\r [lnk-c-sdk]: ./iot-hub-device-sdk-c-intro.md\r [lnk-sdks]: ./iot-hub-devguide-sdks.md\r \r [lnk-iotedge]: ./iot-hub-windows-iot-edge-simulated-device.md\r \r \r <!--Update_Description: update wording-->"}