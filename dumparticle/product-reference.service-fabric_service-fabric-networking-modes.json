{"Title":"配置 Azure Service Fabric 容器服务的网络模式","Description":"了解如何设置 Azure Service Fabric 所支持的不同网络模式。","Content":"# <a name=\"service-fabric-container-networking-modes\"></a>Service Fabric 容器网络模式\r \r Service Fabric 群集中提供的容器服务的默认网络模式是 `nat` 网络模式。 使用 `nat` 网络模式，让多个容器服务侦听相同端口将导致部署错误。 为运行在相同端口上进行侦听的多个服务，Service Fabric 支持 `Open` 网络模式（版本 5.7 或更高版本）。 使用 `Open` 网络模式，每个容器服务都会在内部获取一个动态分配的 IP 地址，允许多个服务侦听相同端口。   \r \r 因此，通过包含在服务清单中定义的静态终结点的单个服务类型，可使用 `Open` 网络模式创建并删除新服务，而不会出现部署错误。 同样，可使用包含静态端口映射的相同 `docker-compose.yml` 文件来创建多个服务。\r \r 不建议使用动态分配的 IP 来发现服务，因为在服务重新启动或移动到其他节点时，IP 地址会发生更改。 仅使用“Service Fabric 命名服务”或“DNS 服务”来发现服务。 \r \r > [!WARNING]\r > Azure 中每个 vNET 总共仅允许 4096 个 IP。 因此，在一个 vNET 中，节点数和容器服务实例数的总和（使用 `Open` 网络）不能超过 4096。 对于此类高密度方案，建议使用 `nat` 网络模式。\r >\r \r ## <a name=\"setting-up-open-networking-mode\"></a>设置开放网络模式\r \r 1. 通过启用 `fabricSettings` 下的 DNS 服务和 IP 提供程序来设置 Azure 资源管理器模板。 \r \r     ```json\r     \"fabricSettings\": [\r                 {\r                     \"name\": \"DnsService\",\r                     \"parameters\": [\r                        {\r                             \"name\": \"IsEnabled\",\r                             \"value\": \"true\"\r                       }\r                     ]\r                 },\r                 {\r                     \"name\": \"Hosting\",\r                     \"parameters\": [\r                       { \r                             \"name\": \"IPProviderEnabled\",\r                             \"value\": \"true\"\r                       }\r                     ]\r                 },\r                 {\r                     \"name\":  \"Trace/Etw\", \r                     \"parameters\": [\r                     {\r                             \"name\": \"Level\",\r                             \"value\": \"5\"\r                     }\r                     ]\r                 },\r                 {\r                     \"name\": \"Setup\",\r                     \"parameters\": [\r                     {\r                             \"name\": \"ContainerNetworkSetup\",\r                             \"value\": \"true\"\r                     }\r                     ]\r                 }\r             ],\r     ```\r \r 2. 设置网络配置文件部分，以允许在群集的每个节点上配置多个 IP 地址。 以下示例为 Windows/Linux Service Fabric 群集的每个节点设置了五个 IP 地址（因此，可使五个服务实例侦听每个节点上的端口）。\r \r     ```json\r     \"variables\": {\r         \"nicName\": \"NIC\",\r         \"vmName\": \"vm\",\r         \"virtualNetworkName\": \"VNet\",\r         \"vnetID\": \"[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]\",\r         \"vmNodeType0Name\": \"[toLower(concat('NT1', variables('vmName')))]\",\r         \"subnet0Name\": \"Subnet-0\",\r         \"subnet0Prefix\": \"10.0.0.0/24\",\r         \"subnet0Ref\": \"[concat(variables('vnetID'),'/subnets/',variables('subnet0Name'))]\",\r         \"lbID0\": \"[resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name')))]\",\r         \"lbIPConfig0\": \"[concat(variables('lbID0'),'/frontendIPConfigurations/LoadBalancerIPConfig')]\",\r         \"lbPoolID0\": \"[concat(variables('lbID0'),'/backendAddressPools/LoadBalancerBEAddressPool')]\",\r         \"lbProbeID0\": \"[concat(variables('lbID0'),'/probes/FabricGatewayProbe')]\",\r         \"lbHttpProbeID0\": \"[concat(variables('lbID0'),'/probes/FabricHttpGatewayProbe')]\",\r         \"lbNatPoolID0\": \"[concat(variables('lbID0'),'/inboundNatPools/LoadBalancerBEAddressNatPool')]\"\r     }\r     \"networkProfile\": {\r                 \"networkInterfaceConfigurations\": [\r                   {\r                     \"name\": \"[concat(parameters('nicName'), '-0')]\",\r                     \"properties\": {\r                       \"ipConfigurations\": [\r                         {\r                           \"name\": \"[concat(parameters('nicName'),'-',0)]\",\r                           \"properties\": {\r                             \"primary\": \"true\",\r                             \"loadBalancerBackendAddressPools\": [\r                               {\r                                 \"id\": \"[variables('lbPoolID0')]\"\r                               }\r                             ],\r                             \"loadBalancerInboundNatPools\": [\r                               {\r                                 \"id\": \"[variables('lbNatPoolID0')]\"\r                               }\r                             ],\r                             \"subnet\": {\r                               \"id\": \"[variables('subnet0Ref')]\"\r                             }\r                           }\r                         },\r                         {\r                           \"name\": \"[concat(parameters('nicName'),'-', 1)]\",\r                           \"properties\": {\r                             \"primary\": \"false\",\r                             \"subnet\": {\r                               \"id\": \"[variables('subnet0Ref')]\"\r                             }\r                           }\r                         },\r                         {\r                           \"name\": \"[concat(parameters('nicName'),'-', 2)]\",\r                           \"properties\": {\r                             \"primary\": \"false\",\r                             \"subnet\": {\r                               \"id\": \"[variables('subnet0Ref')]\"\r                             }\r                           }\r                         },\r                         {\r                           \"name\": \"[concat(parameters('nicName'),'-', 3)]\",\r                           \"properties\": {\r                             \"primary\": \"false\",\r                             \"subnet\": {\r                               \"id\": \"[variables('subnet0Ref')]\"\r                             }\r                           }\r                         },\r                         {\r                           \"name\": \"[concat(parameters('nicName'),'-', 4)]\",\r                           \"properties\": {\r                             \"primary\": \"false\",\r                             \"subnet\": {\r                               \"id\": \"[variables('subnet0Ref')]\"\r                             }\r                           }\r                         },\r                         {\r                           \"name\": \"[concat(parameters('nicName'),'-', 5)]\",\r                           \"properties\": {\r                             \"primary\": \"false\",\r                             \"subnet\": {\r                               \"id\": \"[variables('subnet0Ref')]\"\r                             }\r                           }\r                         }\r                       ],\r                       \"primary\": true\r                     }\r                   }\r                 ]\r               }\r     ```\r \r 3. 仅对 Windows 群集设置一个 NSG 规则，该规则通过以下值为 vNET 打开端口 UDP/53：\r \r    | Priority |    名称    |    源      |  目标   |   服务    | 操作 |\r    |:--------:|:----------:|:--------------:|:--------------:|:------------:|:------:|\r    |     2000 | Custom_Dns | VirtualNetwork | VirtualNetwork | DNS (UDP/53) | 允许  |\r \r 4. 在应用清单中为每个服务指定网络模式 `<NetworkConfig NetworkType=\"Open\">`。  模式 `Open` 会导致服务获取专用 IP 地址。 如果未指定模式，则默认为基本 `nat` 模式。 因此，在以下清单示例中，`NodeContainerServicePackage1` 和 `NodeContainerServicePackage2` 均可侦听相同端口（这两个服务都在 `Endpoint1` 上进行侦听）。 指定了 `Open` 网络模式时，无法指定 `PortBinding` 配置。\r \r     ```xml\r     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r     <ApplicationManifest ApplicationTypeName=\"NodeJsApp\" ApplicationTypeVersion=\"1.0\" xmlns=\"http://schemas.microsoft.com/2011/01/fabric\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r       <Description>Calculator Application</Description>\r       <Parameters>\r         <Parameter Name=\"ServiceInstanceCount\" DefaultValue=\"3\"></Parameter>\r         <Parameter Name=\"MyCpuShares\" DefaultValue=\"3\"></Parameter>\r       </Parameters>\r       <ServiceManifestImport>\r         <ServiceManifestRef ServiceManifestName=\"NodeContainerServicePackage1\" ServiceManifestVersion=\"1.0\"/>\r         <Policies>\r           <ContainerHostPolicies CodePackageRef=\"NodeContainerService1.Code\" Isolation=\"hyperv\">\r            <NetworkConfig NetworkType=\"Open\"/>\r           </ContainerHostPolicies>\r         </Policies>\r       </ServiceManifestImport>\r       <ServiceManifestImport>\r         <ServiceManifestRef ServiceManifestName=\"NodeContainerServicePackage2\" ServiceManifestVersion=\"1.0\"/>\r         <Policies>\r           <ContainerHostPolicies CodePackageRef=\"NodeContainerService2.Code\" Isolation=\"default\">\r             <NetworkConfig NetworkType=\"Open\"/>\r           </ContainerHostPolicies>\r         </Policies>\r       </ServiceManifestImport>\r     </ApplicationManifest>\r     ```\r 可在一个应用程序中为 Windows 群集跨服务混合与匹配不同网络模式。 因此，可使一些服务处于 `Open` 模式，而一些服务处于 `nat` 网络模式。 使用 `nat` 配置服务时，该服务侦听的端口必须唯一。 Linux 群集上不支持混合不同服务的网络模式。 \r \r ## <a name=\"next-steps\"></a>后续步骤\r 本文介绍了 Service Fabric 提供的网络模式。  \r \r * [Service Fabric 应用程序模型](service-fabric-application-model.md)\r * [Service Fabric 服务清单资源](/service-fabric/service-fabric-service-manifest-resources)\r * [将 Windows 容器部署到 Windows Server 2016 上的 Service Fabric](service-fabric-get-started-containers.md)\r * [将 Docker 容器部署到 Linux 上的 Service Fabric](service-fabric-get-started-containers-linux.md)\r \r <!--Update_Description: wording update -->"}