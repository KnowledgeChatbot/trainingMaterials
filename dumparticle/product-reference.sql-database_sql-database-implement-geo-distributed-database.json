{"Title":"实现地理分散的 Azure SQL 数据库解决方案","Description":"了解如何配置 Azure SQL 数据库和应用程序以便故障转移到复制的数据库，以及如何测试故障转移。","Content":"# <a name=\"implement-a-geo-distributed-database\"></a>实现地理分散的数据库\r \r 在本教程中，将配置 Azure SQL 数据库和应用程序以便故障转移到远程区域中，然后测试故障转移计划。 你将学习如何执行以下操作： \r \r > [!div class=\"checklist\"]\r > * 创建数据库用户并向其授予权限\r > * 设置数据库级防火墙规则\r > * 创建[异地复制故障转移组](sql-database-geo-replication-overview.md)\r > * 创建和编译 Java 应用程序以查询 Azure SQL 数据库\r > * 执行灾难恢复演练\r \r 如果没有 Azure 订阅，可在开始前[创建一个 1 元人民币的试用帐户](https://www.azure.cn/pricing/1rmb-trial/)。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 若要完成本教程，请确保已完成了以下先决条件：\r \r - 已安装最新的 [Azure PowerShell](https://docs.microsoft.com/powershell/azureps-cmdlets-docs)。 \r - 已安装 Azure SQL 数据库。 本教程使用以下任一快速入门中名为“mySampleDatabase”的 AdventureWorksLT 示例数据库：\r \r    - [创建 DB - 门户](sql-database-get-started-portal.md)\r    - [创建 DB - CLI](sql-database-get-started-cli.md)\r    - [创建 DB - PowerShell](sql-database-get-started-powershell.md)\r \r - 已确定了对数据库执行 SQL 脚本的一种方法，可以使用以下查询工具之一：\r    - [Azure 门户](https://portal.azure.cn)中的查询编辑器。 有关使用 Azure 门户中的查询编辑器的详细信息，请参阅[使用查询编辑器进行连接和查询](sql-database-get-started-portal.md#query-the-sql-database)。\r    - 最新版本的 [SQL Server Management Studio](/sql/ssms/download-sql-server-management-studio-ssms)，它是用于管理任何 SQL 基础结构（从适用于 Microsoft Windows 的 SQL Server 到 SQL 数据库，不一而足）的集成环境。\r    - 最新版本的 [Visual Studio Code](https://code.visualstudio.com/docs)，它是一种图形代码编辑器，适用于 Linux、macOS 和 Windows，并且支持各种扩展，其中包括 [mssql 扩展](https://aka.ms/mssql-marketplace)（用于查询 Microsoft SQL Server、Azure SQL 数据库和 SQL 数据仓库）。 有关对 Azure SQL 数据库使用此工具的详细信息，请参阅[使用 VS Code 进行连接和查询](sql-database-connect-query-vscode.md)。 \r \r ## <a name=\"create-database-users-and-grant-permissions\"></a>创建数据库用户并授予权限\r \r 连接到数据库并使用以下查询工具之一创建用户帐户：\r \r - Azure 门户中的查询编辑器\r - SQL Server Management Studio\r - Visual Studio Code\r \r 这些用户帐户将自动复制到辅助服务器（并保持同步）。 若要使用 SQL Server Management Studio 或 Visual Studio Code，如果进行连接的客户端所在的 IP 地址尚未配置防火墙，则需要配置防火墙规则。 有关详细步骤，请参阅[创建服务器级防火墙规则](sql-database-get-started-portal.md#create-a-server-level-firewall-rule)。\r \r - 在查询窗口中执行以下查询，在数据库中创建两个用户帐户。 此脚本授予“app_admin”帐户“db_owner”权限，并授予“app_user”帐户“SELECT”（选择）和“UPDATE”（更新）权限。 \r \r    ```sql\r    CREATE USER app_admin WITH PASSWORD = 'ChangeYourPassword1';\r    --Add SQL user to db_owner role\r    ALTER ROLE db_owner ADD MEMBER app_admin; \r    --Create additional SQL user\r    CREATE USER app_user WITH PASSWORD = 'ChangeYourPassword1';\r    --grant permission to SalesLT schema\r    GRANT SELECT, INSERT, DELETE, UPDATE ON SalesLT.Product TO app_user;\r    ```\r \r ## <a name=\"create-database-level-firewall\"></a>创建数据库级防火墙\r \r 为 SQL 数据库创建[数据库级防火墙规则](/sql/relational-databases/system-stored-procedures/sp-set-database-firewall-rule-azure-sql-database)。 此数据库级防火墙规则将自动复制到在本教程中创建的辅助服务器。 为简单起见（在本教程中），使用执行本教程中步骤的计算机的公共 IP 地址。 若要确定用于服务器级防火墙规则（针对当前计算机）的 IP 地址，请参阅[创建服务器级防火墙](sql-database-get-started-portal.md#create-a-server-level-firewall-rule)。  \r \r - 在打开的查询窗口中，将之前的查询替换为以下查询，将 IP 地址替换为环境中相应的 IP 地址。  \r \r    ```sql\r    -- Create database-level firewall setting for your public IP address\r    EXECUTE sp_set_database_firewall_rule @name = N'myGeoReplicationFirewallRule',@start_ip_address = '0.0.0.0', @end_ip_address = '0.0.0.0';\r    ```\r \r ## <a name=\"create-an-active-geo-replication-auto-failover-group\"></a>创建活动异地复制自动故障转移组 \r \r 使用 Azure PowerShell 在 Azure 区域中的现有 Azure SQL 服务器和新的空 Azure SQL 服务器之间创建[活动异地复制自动故障转移组](sql-database-geo-replication-overview.md)，然后将示例数据库添加到故障转移组。\r \r > [!IMPORTANT]\r > 这些 cmdlet 需要 Azure PowerShell 4.0。 [!INCLUDE [sample-powershell-install](../../includes/sample-powershell-install-no-ssh.md)]\r >\r \r 1. 使用现有服务器和示例数据库的值为 PowerShell 脚本填充变量，并为故障转移组名称提供全局唯一值。\r \r    ```powershell\r    $adminlogin = \"ServerAdmin\"\r    $password = \"ChangeYourAdminPassword1\"\r    $myresourcegroupname = \"<your resource group name>\"\r    $mylocation = \"<your resource group location>\"\r    $myservername = \"<your existing server name>\"\r    $mydatabasename = \"mySampleDatabase\"\r    $mydrlocation = \"<your disaster recovery location>\"\r    $mydrservername = \"<your disaster recovery server name>\"\r    $myfailovergroupname = \"<your unique failover group name>\"\r    ```\r \r 2. 在故障转移区域中创建空的备份服务器。\r \r    ```powershell\r    $mydrserver = New-AzureRmSqlServer -ResourceGroupName $myresourcegroupname `\r       -ServerName $mydrservername `\r       -Location $mydrlocation `\r       -SqlAdministratorCredentials $(New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $adminlogin, $(ConvertTo-SecureString -String $password -AsPlainText -Force))\r    $mydrserver   \r    ```\r \r 3. 在这两个服务器之间创建故障转移组。\r \r    ```powershell\r    $myfailovergroup = New-AzureRMSqlDatabaseFailoverGroup `\r       -ResourceGroupName $myresourcegroupname `\r       -ServerName $myservername `\r       -PartnerServerName $mydrservername  `\r       -FailoverGroupName $myfailovergroupname `\r       -FailoverPolicy Automatic `\r       -GracePeriodWithDataLossHours 2\r    $myfailovergroup   \r    ```\r \r 4. 将数据库添加到故障转移组。\r \r    ```powershell\r    $myfailovergroup = Get-AzureRmSqlDatabase `\r       -ResourceGroupName $myresourcegroupname `\r       -ServerName $myservername `\r       -DatabaseName $mydatabasename | `\r     Add-AzureRmSqlDatabaseToFailoverGroup `\r       -ResourceGroupName $myresourcegroupname ` `\r       -ServerName $myservername `\r       -FailoverGroupName $myfailovergroupname\r    $myfailovergroup   \r    ```\r \r ## <a name=\"install-java-software\"></a>安装 Java 软件\r \r 本部分中的步骤假定你熟悉使用 Java 开发，但不熟悉如何使用 Azure SQL 数据库。 \r \r ### <a name=\"mac-os\"></a>**Mac OS**\r 打开终端并导航到要在其中创建 Java 项目的目录。 输入以下命令安装 **brew** 和 **Maven**： \r \r ```bash\r ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r brew update\r brew install maven\r ```\r \r 有关安装和配置 Java 和 Maven 环境的详细指导，请转到[使用 SQL Server 生成应用](https://www.microsoft.com/sql-server/developer-get-started/)，依次选择“Java”和“MacOS”，然后按照步骤 1.2 和 1.3 中有关配置 Java 和 Maven 的详细说明进行操作。\r \r ### <a name=\"linux-ubuntu\"></a>**Linux (Ubuntu)**\r 打开终端并导航到要在其中创建 Java 项目的目录。 输入以下命令安装 **Maven**：\r \r ```bash\r sudo apt-get install maven\r ```\r \r 有关安装和配置 Java 和 Maven 环境的详细指导，请转到[使用 SQL Server 生成应用](https://www.microsoft.com/sql-server/developer-get-started/)，依次选择“Java”和“Ubuntu”，然后遵循步骤 1.2、1.3 和 1.4 中配置 Java 和 Maven 的详细说明。\r \r ### <a name=\"windows\"></a>**Windows**\r 使用官方安装程序安装 [Maven](https://maven.apache.org/download.cgi)。 使用 Maven 帮助管理依赖项、内部版本、测试和运行 Java 项目。 有关安装和配置 Java 和 Maven 环境的详细指导，请转到[使用 SQL Server 生成应用](https://www.microsoft.com/sql-server/developer-get-started/)，依次选择“Java”和“Windows”，然后遵循步骤 1.2 和 1.3 中配置 Java 和 Maven 的详细说明。\r \r ## <a name=\"create-sqldbsample-project\"></a>创建 SqlDbSample 项目\r \r 1. 在命令控制台（例如 Bash）中，创建一个 Maven 项目。 \r    ```bash\r    mvn archetype:generate \"-DgroupId=com.sqldbsamples\" \"-DartifactId=SqlDbSample\" \"-DarchetypeArtifactId=maven-archetype-quickstart\" \"-Dversion=1.0.0\"\r    ```\r 2. 键入“Y”并单击“Enter”。\r 3. 将目录更改到新创建的项目。\r \r    ```bash\r    cd SqlDbSamples\r    ```\r \r 4. 使用最常用的编辑器，在打开项目文件夹中的 pom.xml 文件。 \r \r 5. 通过打开最常用的文本编辑器并将以下行复制和粘贴到 pom.xml 文件中，将 Microsoft JDBC Driver for SQL Server 依赖项添加到 Maven 项目。 不会覆盖预先填充在文件中的现有值。 JDBC 依赖项必须粘贴在更大的“依赖项”部分 ( ) 内。   \r \r    ```xml\r    <dependency>\r      <groupId>com.microsoft.sqlserver</groupId>\r      <artifactId>mssql-jdbc</artifactId>\r     <version>6.1.0.jre8</version>\r    </dependency>\r    ```\r \r 6. 通过将以下“属性”部分添加到 pom.xml 文件中的“依赖项”部分之后，指定编译项目时面向的 Java 版本。 \r \r    ```xml\r    <properties>\r      <maven.compiler.source>1.8</maven.compiler.source>\r      <maven.compiler.target>1.8</maven.compiler.target>\r    </properties>\r    ```\r 7. 将以下“生成”部分添加到 pom.xml 文件的“属性”部分之后，以支持 jar 中的清单文件。       \r \r    ```xml\r    <build>\r      <plugins>\r        <plugin>\r          <groupId>org.apache.maven.plugins</groupId>\r          <artifactId>maven-jar-plugin</artifactId>\r          <version>3.0.0</version>\r          <configuration>\r            <archive>\r              <manifest>\r                <mainClass>com.sqldbsamples.App</mainClass>\r              </manifest>\r            </archive>\r         </configuration>\r        </plugin>\r      </plugins>\r    </build>\r    ```\r 8. 保存并关闭 pom.xml 文件。\r 9. 打开 App.java 文件 (C:\\apache-maven-3.5.0\\SqlDbSample\\src\\main\\java\\com\\sqldbsamples\\App.java) 并将内容替换为以下内容。 将故障转移组名称替换为自己的故障转移组的名称。 如果已更改数据库名、用户或密码的值，那么也要更改这些值。\r \r    ```java\r    package com.sqldbsamples;\r \r    import java.sql.Connection;\r    import java.sql.Statement;\r    import java.sql.PreparedStatement;\r    import java.sql.ResultSet;\r    import java.sql.Timestamp;\r    import java.sql.DriverManager;\r    import java.util.Date;\r    import java.util.concurrent.TimeUnit;\r \r    public class App {\r \r       private static final String FAILOVER_GROUP_NAME = \"myfailovergroupname\";\r \r       private static final String DB_NAME = \"mySampleDatabase\";\r       private static final String USER = \"app_user\";\r       private static final String PASSWORD = \"ChangeYourPassword1\";\r \r       private static final String READ_WRITE_URL = String.format(\"jdbc:sqlserver://%s.database.chinacloudapi.cn:1433;database=%s;user=%s;password=%s;encrypt=true;hostNameInCertificate=*.database.chinacloudapi.cn;loginTimeout=30;\", FAILOVER_GROUP_NAME, DB_NAME, USER, PASSWORD);\r       private static final String READ_ONLY_URL = String.format(\"jdbc:sqlserver://%s.secondary.database.chinacloudapi.cn:1433;database=%s;user=%s;password=%s;encrypt=true;hostNameInCertificate=*.database.chinacloudapi.cn;loginTimeout=30;\", FAILOVER_GROUP_NAME, DB_NAME, USER, PASSWORD);\r \r       public static void main(String[] args) {\r          System.out.println(\"#######################################\");\r          System.out.println(\"## GEO DISTRIBUTED DATABASE TUTORIAL ##\");\r          System.out.println(\"#######################################\");\r          System.out.println(\"\"); \r \r          int highWaterMark = getHighWaterMarkId();\r \r          try {\r             for(int i = 1; i < 1000; i++) {\r                 //  loop will run for about 1 hour\r                 System.out.print(i + \": insert on primary \" + (insertData((highWaterMark + i))?\"successful\":\"failed\"));\r                 TimeUnit.SECONDS.sleep(1);\r                 System.out.print(\", read from secondary \" + (selectData((highWaterMark + i))?\"successful\":\"failed\") + \"\\n\");\r                 TimeUnit.SECONDS.sleep(3);\r             }\r          } catch(Exception e) {\r             e.printStackTrace();\r       }\r    }\r \r    private static boolean insertData(int id) {\r       // Insert data into the product table with a unique product name that we can use to find the product again later\r       String sql = \"INSERT INTO SalesLT.Product (Name, ProductNumber, Color, StandardCost, ListPrice, SellStartDate) VALUES (?,?,?,?,?,?);\";\r \r       try (Connection connection = DriverManager.getConnection(READ_WRITE_URL); \r               PreparedStatement pstmt = connection.prepareStatement(sql)) {\r          pstmt.setString(1, \"BrandNewProduct\" + id);\r          pstmt.setInt(2, 200989 + id + 10000);\r          pstmt.setString(3, \"Blue\");\r          pstmt.setDouble(4, 75.00);\r          pstmt.setDouble(5, 89.99);\r          pstmt.setTimestamp(6, new Timestamp(new Date().getTime()));\r          return (1 == pstmt.executeUpdate());\r       } catch (Exception e) {\r          return false;\r       }\r    }\r \r    private static boolean selectData(int id) {\r       // Query the data that was previously inserted into the primary database from the geo replicated database\r       String sql = \"SELECT Name, Color, ListPrice FROM SalesLT.Product WHERE Name = ?\";\r \r       try (Connection connection = DriverManager.getConnection(READ_ONLY_URL); \r               PreparedStatement pstmt = connection.prepareStatement(sql)) {\r          pstmt.setString(1, \"BrandNewProduct\" + id);\r          try (ResultSet resultSet = pstmt.executeQuery()) {\r             return resultSet.next();\r          }\r       } catch (Exception e) {\r          return false;\r       }\r    }\r \r    private static int getHighWaterMarkId() {\r       // Query the high water mark id that is stored in the table to be able to make unique inserts \r       String sql = \"SELECT MAX(ProductId) FROM SalesLT.Product\";\r       int result = 1;\r \r       try (Connection connection = DriverManager.getConnection(READ_WRITE_URL); \r               Statement stmt = connection.createStatement();\r               ResultSet resultSet = stmt.executeQuery(sql)) {\r          if (resultSet.next()) {\r              result =  resultSet.getInt(1);\r             }\r          } catch (Exception e) {\r           e.printStackTrace();\r          }\r          return result;\r       }\r    }\r    ```\r 6. 保存并关闭 App.java 文件。\r \r ## <a name=\"compile-and-run-the-sqldbsample-project\"></a>编译并运行 SqlDbSample 项目\r \r 1. 在命令控制台中，执行以下命令。\r \r    ```bash\r    mvn package\r    ```\r 2. 完成后，执行以下命令运行该应用程序（除非手动停止，否则该应用程序将运行大约 1 小时）：\r \r    ```bash\r    mvn -q -e exec:java \"-Dexec.mainClass=com.sqldbsamples.App\"\r \r    #######################################\r    ## GEO DISTRIBUTED DATABASE TUTORIAL ##\r    #######################################\r \r    1. insert on primary successful, read from secondary successful\r    2. insert on primary successful, read from secondary successful\r    3. insert on primary successful, read from secondary successful\r    ```\r \r ## <a name=\"perform-disaster-recovery-drill\"></a>执行灾难恢复演练\r \r 1. 调用故障转移组的手动故障转移。 \r \r    ```powershell\r    Switch-AzureRMSqlDatabaseFailoverGroup `\r    -ResourceGroupName $myresourcegroupname  `\r    -ServerName $mydrservername `\r    -FailoverGroupName $myfailovergroupname\r    ```\r \r 2. 在故障转移期间观察应用程序结果。 DNS 缓存刷新时，某些插入会失败。     \r \r 3. 了解灾难恢复服务器正在执行的角色。\r \r    ```powershell\r    $mydrserver.ReplicationRole\r    ```\r \r 4. 故障回复。\r \r    ```powershell\r    Switch-AzureRMSqlDatabaseFailoverGroup `\r    -ResourceGroupName $myresourcegroupname  `\r    -ServerName $myservername `\r    -FailoverGroupName $myfailovergroupname\r    ```\r \r 5. 在故障回复期间观察应用程序结果。 DNS 缓存刷新时，某些插入会失败。     \r \r 6. 了解灾难恢复服务器正在执行的角色。\r \r    ```powershell\r    $fileovergroup = Get-AzureRMSqlDatabaseFailoverGroup `\r       -FailoverGroupName $myfailovergroupname `\r       -ResourceGroupName $myresourcegroupname `\r       -ServerName $mydrservername\r    $fileovergroup.ReplicationRole\r    ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 有关详细信息，请参阅[活动异地复制和故障转移组](sql-database-geo-replication-overview.md)。\r "}