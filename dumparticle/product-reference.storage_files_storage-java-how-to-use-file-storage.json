{"Title":"使用 Java 针对 Azure 文件进行开发","Description":"了解如何开发使用 Azure 文件来存储文件数据的 Java 应用程序和服务。","Content":"# <a name=\"develop-for-azure-files-with-java\"></a>使用 Java 针对 Azure 文件进行开发\r [!INCLUDE [storage-selector-file-include](../../../includes/storage-selector-file-include.md)]\r \r [!INCLUDE [storage-check-out-samples-java](../../../includes/storage-check-out-samples-java.md)]\r \r ## <a name=\"about-this-tutorial\"></a>关于本教程\r 本教程将演示使用 Java 开发应用程序或服务的基础知识，这些应用程序或服务可以使用 Azure 文件来存储文件数据。 在本教程中，我们将创建一个简单的控制台应用程序，并演示如何通过 Java 和 Azure 文件执行基本操作：\r \r * 创建和删除 Azure 文件共享\r * 创建和删除目录\r * 枚举 Azure 文件共享中的文件和目录\r * 上传、下载和删除文件\r \r > [!Note]  \r > 由于 Azure 文件可以通过 SMB 进行访问，因此可以编写简单的应用程序，通过标准的 Java I/O 类来访问 Azure 文件共享。 本文介绍如何编写使用 Azure 存储 Java SDK 的应用程序，该 SDK 使用 [Azure 文件 REST API](https://docs.microsoft.com/rest/api/storageservices/fileservices/file-service-rest-api) 与 Azure 文件通信。\r \r ## <a name=\"create-a-java-application\"></a>创建 Java 应用程序\r 若要生成示例，需要 Java 开发工具包 (JDK) 和 [Azure Storage SDK for Java][]。 此外，应该已经创建了一个 Azure 存储帐户。\r \r ## <a name=\"set-up-your-application-to-use-azure-files\"></a>设置应用程序以使用 Azure 文件\r 要使用 Azure 存储 API，请将下列语句添加到要通过其来访问存储服务的 Java 文件的顶部：\r \r ```java\r // Include the following imports to use blob APIs.\r import com.microsoft.azure.storage.*;\r import com.microsoft.azure.storage.file.*;\r ```\r \r ## <a name=\"set-up-an-azure-storage-connection-string\"></a>设置 Azure 存储连接字符串\r 要使用 Azure 文件，需要连接到 Azure 存储帐户。 第一步是配置连接字符串，该字符串用于连接到存储帐户。 为此，我们需要定义一个静态变量。\r \r ```java\r // Configure the connection-string with your values\r public static final String storageConnectionString =\r     \"DefaultEndpointsProtocol=http;\" +\r     \"AccountName=your_storage_account_name;\" +\r     \"AccountKey=your_storage_account_key;\" +\r     \"EndpointSuffix=core.Chinacloudapi.cn\";\r ```\r \r > [!NOTE]\r > 将 your_storage_account_name 和 your_storage_account_key 替换为存储帐户的实际值。\r \r ## <a name=\"connecting-to-an-azure-storage-account\"></a>连接到 Azure 存储帐户\r \r 若要连接到存储帐户，需要使用 CloudStorageAccount 对象，将连接字符串传递到其 parse 方法。\r \r ```java\r // Use the CloudStorageAccount object to connect to your storage account\r try {\r     CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\r } catch (InvalidKeyException invalidKey) {\r     // Handle the exception\r }\r ```\r \r **CloudStorageAccount.parse** 会引发 InvalidKeyException，因此恤将其置于 try/catch 块内。\r \r ## <a name=\"create-an-azure-file-share\"></a>创建 Azure 文件共享\r Azure 文件中的所有文件和目录都位于名为 Share 的容器内。 存储帐户可以拥有无数的共享，只要帐户容量允许。 要获得共享及其内容的访问权限，需要使用 Azure 文件客户端。\r \r ```java\r // Create the Azure Files client.\r CloudFileClient fileClient = storageAccount.createCloudFileClient();\r ```\r \r 使用 Azure 文件客户端可以获取对共享的引用。\r \r ```java\r // Get a reference to the file share\r CloudFileShare share = fileClient.getShareReference(\"sampleshare\");\r ```\r \r 实际创建共享时，请使用 CloudFileShare 对象的 **createIfNotExists** 方法。\r \r ```java\r if (share.createIfNotExists()) {\r     System.out.println(\"New share created\");\r }\r ```\r \r 而在目前，share 保留对名为 sampleshare 的共享的引用。\r \r ## <a name=\"delete-an-azure-file-share\"></a>删除 Azure 文件共享\r 删除共享时，可针对 CloudFileShare 对象调用 **deleteIfExists** 方法。 以下是具有此类功能的示例代码。\r \r ```java\r try\r {\r     // Retrieve storage account from connection-string.\r     CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\r \r     // Create the file client.\r    CloudFileClient fileClient = storageAccount.createCloudFileClient();\r \r    // Get a reference to the file share\r    CloudFileShare share = fileClient.getShareReference(\"sampleshare\");\r \r    if (share.deleteIfExists()) {\r        System.out.println(\"sampleshare deleted\");\r    }\r } catch (Exception e) {\r     e.printStackTrace();\r }\r ```\r \r ## <a name=\"create-a-directory\"></a>创建目录\r 也可将文件置于子目录中，而不是将其全部置于根目录中，以便对存储进行有效的组织。 使用 Azure 文件可以创建帐户允许的任意数目的目录。 以下代码在根目录下创建名为 **sampledir** 的子目录。\r \r ```java\r //Get a reference to the root directory for the share.\r CloudFileDirectory rootDir = share.getRootDirectoryReference();\r \r //Get a reference to the sampledir directory\r CloudFileDirectory sampleDir = rootDir.getDirectoryReference(\"sampledir\");\r \r if (sampleDir.createIfNotExists()) {\r     System.out.println(\"sampledir created\");\r } else {\r     System.out.println(\"sampledir already exists\");\r }\r ```\r \r ## <a name=\"delete-a-directory\"></a>删除目录\r 删除目录相当简单，但需注意的是，不能删除仍然包含有文件或其他目录的目录。\r \r ```java\r // Get a reference to the root directory for the share.\r CloudFileDirectory rootDir = share.getRootDirectoryReference();\r \r // Get a reference to the directory you want to delete\r CloudFileDirectory containerDir = rootDir.getDirectoryReference(\"sampledir\");\r \r // Delete the directory\r if ( containerDir.deleteIfExists() ) {\r     System.out.println(\"Directory deleted\");\r }\r ```\r \r ## <a name=\"enumerate-files-and-directories-in-an-azure-file-share\"></a>枚举 Azure 文件共享中的文件和目录\r 可以轻松获取共享中文件和目录的列表，只需针对 CloudFileDirectory 引用调用 **listFilesAndDirectories** 即可。 该方法会返回可以对其进行循环访问的 ListFileItem 对象的列表。 例如，下面的代码列出根目录中的文件和目录。\r \r ```java\r //Get a reference to the root directory for the share.\r CloudFileDirectory rootDir = share.getRootDirectoryReference();\r \r for ( ListFileItem fileItem : rootDir.listFilesAndDirectories() ) {\r     System.out.println(fileItem.getUri());\r }\r ```\r \r ## <a name=\"upload-a-file\"></a>上传文件\r Azure 文件共享至少包含文件所在的根目录。 本部分会介绍如何将文件从本地存储上传到共享所在的根目录。\r \r 上传文件的第一步是获取对文件所在的目录的引用。 为此，需要调用共享对象的 **getRootDirectoryReference** 方法。\r \r ```java\r //Get a reference to the root directory for the share.\r CloudFileDirectory rootDir = share.getRootDirectoryReference();\r ```\r \r 现在，已经有了共享所在的根目录的引用，因此可以使用以下代码来上传文件。\r \r ```java\r // Define the path to a local file.\r final String filePath = \"C:\\\\temp\\\\Readme.txt\";\r \r CloudFile cloudFile = rootDir.getFileReference(\"Readme.txt\");\r cloudFile.uploadFromFile(filePath);\r ```\r \r ## <a name=\"download-a-file\"></a>下载文件\r 对于 Azure 文件，需要更频繁执行的一项操作是下载文件。 在下面的示例中，代码会下载 SampleFile.txt 并显示其内容。\r \r ```java\r //Get a reference to the root directory for the share.\r CloudFileDirectory rootDir = share.getRootDirectoryReference();\r \r //Get a reference to the directory that contains the file\r CloudFileDirectory sampleDir = rootDir.getDirectoryReference(\"sampledir\");\r \r //Get a reference to the file you want to download\r CloudFile file = sampleDir.getFileReference(\"SampleFile.txt\");\r \r //Write the contents of the file to the console.\r System.out.println(file.downloadText());\r ```\r \r ## <a name=\"delete-a-file\"></a>删除文件\r 另一项常见的 Azure 文件操作是删除文件。 下面的代码会删除名为 SampleFile.txt 的文件，该文件存储在名为 **sampledir**的目录中。\r \r ```java\r // Get a reference to the root directory for the share.\r CloudFileDirectory rootDir = share.getRootDirectoryReference();\r \r // Get a reference to the directory where the file to be deleted is in\r CloudFileDirectory containerDir = rootDir.getDirectoryReference(\"sampledir\");\r \r String filename = \"SampleFile.txt\"\r CloudFile file;\r \r file = containerDir.getFileReference(filename)\r if ( file.deleteIfExists() ) {\r     System.out.println(filename + \" was deleted\");\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 如果还想更多地了解其他 Azure 存储 API，请点击以下链接。\r \r * [面向 Java 开发人员的 Azure](https://docs.azure.cn/zh-cn/java/)\r * [Azure Storage SDK for Java](https://github.com/azure/azure-storage-java)\r * [Azure Storage SDK for Android](https://github.com/azure/azure-storage-android)\r * [Azure 存储客户端 SDK 参考](http://dl.windowsazure.com/storage/javadoc/)\r * [Azure 存储服务 REST API](https://msdn.microsoft.com/library/azure/dd179355.aspx)\r * [Azure 存储团队博客](http://blogs.msdn.com/b/windowsazurestorage/)\r * [使用 AzCopy 命令行实用程序传输数据](../common/storage-use-azcopy.md)\r * [排查 Azure 文件问题 - Windows](storage-troubleshoot-windows-file-connection-problems.md)\r \r <!--Update_Description: wording update-->\r "}