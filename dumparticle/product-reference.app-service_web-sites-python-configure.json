{"Title":"使用 Azure 应用服务 Web 应用配置 Python","Description":"本教程介绍在 Azure 应用服务 Web 应用中创作和配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。","Content":"# <a name=\"configuring-python-with-azure-app-service-web-apps\"></a>使用 Azure 应用服务 Web 应用配置 Python\r 本教程介绍在 Azure 应用服务 Web 应用中创作和配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。\r \r 其中讲解了 Git 部署的一些功能，如使用 requirements.txt 安装虚拟环境和包。\r \r ## <a name=\"web-app-creation-on-azure-portal\"></a>在 Azure 门户上创建 Web 应用\r 本教程假设已有 Azure 订阅和 Azure 门户访问权限。\r \r 如果没有现成的 Web 应用，则可从 [Azure 门户](https://portal.azure.cn)中创建一个。  单击左上角的“新建”按钮，并依次单击“Web + 移动” > “Web 应用”。\r \r ## <a name=\"git-publishing\"></a>Git 发布\r 按照 [从本地 Git 部署到 Azure 应用服务](app-service-deploy-local-git.md)的说明为新创建的 Web 应用配置 Git 发布。 本教程使用 Git 来创建、管理 Python Web 应用以及将其发布到 Azure 应用服务。\r \r 在设置 Git 发布之后，会创建 Git 存储库并使其与你的 Web 应用相关联。 随即会显示该存储库的 URL，之后其可用于将数据从本地开发环境推送到云。 要通过 Git 发布应用程序，请确保还安装了 Git 客户端，并按照提供的说明将 Web 应用内容推送到 Azure 应用服务。\r \r ## <a name=\"application-overview\"></a>应用程序概述\r 接下来几节会创建以下文件。 这些文件应放在 Git 存储库的根目录中。\r \r     app.py\r     requirements.txt\r     runtime.txt\r     web.config\r     ptvs_virtualenv_proxy.py\r \r ## <a name=\"wsgi-handler\"></a>WSGI 处理程序\r WSGI 是 [PEP 3333](http://www.python.org/dev/peps/pep-3333/) 所述的 Python 标准，用于定义 Web 服务器和 Python 之间的接口。 它提供了使用 Python 编写各种 Web 应用程序和框架所需的标准化接口。 当今常用的 Python Web 框架都使用 WSGI。 Azure 应用服务 Web 应用支持任何此类框架；此外，高级用户可以创作自己的框架，只要自定义处理程序遵循 WSGI 规范准则即可。\r \r 下面是定义自定义处理程序的 `app.py` 的一个示例：\r \r     def wsgi_app(environ, start_response):\r         status = '200 OK'\r         response_headers = [('Content-type', 'text/plain')]\r         start_response(status, response_headers)\r         response_body = 'Hello World'\r         yield response_body.encode()\r \r     if __name__ == '__main__':\r         from wsgiref.simple_server import make_server\r \r         httpd = make_server('localhost', 5555, wsgi_app)\r         httpd.serve_forever()\r \r 可以使用 `python app.py` 在本地运行此应用程序，并在 Web 浏览器中浏览到 `http://localhost:5555`。\r \r ## <a name=\"virtual-environment\"></a>虚拟环境\r 尽管上述示例应用程序不需要任何外部包，但应用程序很可能需要一些外部包。\r \r 为了便于管理外部包依赖项，Azure Git 部署支持创建虚拟环境。\r \r 当 Azure 在存储库的根目录中检测到 requirements.txt 文件时，自动创建名为 `env`的虚拟环境。 仅第一次部署会执行此操作，也可以在所选的 Python 运行时发生更改后进行任何部署的过程中执行此操作。\r \r 可能需要创建虚拟环境用于开发，但不将其包括在 Git 存储库中。\r \r ## <a name=\"package-management\"></a>包管理\r Requirements.txt 中列出的包将使用 pip 自动安装到虚拟环境中。 每次部署时都会发生这种情况，但如果已安装包，则 pip 会跳过安装。\r \r 示例 `requirements.txt`：\r \r     azure==0.8.4\r \r ## <a name=\"python-version\"></a>Python 版本\r [!INCLUDE [web-sites-python-customizing-runtime](../../includes/web-sites-python-customizing-runtime.md)]\r \r 示例 `runtime.txt`：\r \r     python-2.7\r \r ## <a name=\"webconfig\"></a>Web.config\r 需要创建一个 web.config 文件以指定服务器处理请求的方式。\r \r 请注意，如果存储库中有一个 Web.x.y 文件，其中 x.y 与所选的 Python 运行时匹配，则 Azure 会自动将相应的文件复制为 web.config。\r \r 以下 web.config 示例依赖于某个虚拟环境代理脚本（下一节介绍）。  它们与上述示例 `app.py` 中所用的 WSGI 处理程序配合使用。\r \r Python 2.7 的示例 `web.config` ：\r \r     <?xml version=\"1.0\"?>\r     <configuration>\r       <appSettings>\r         <add key=\"WSGI_ALT_VIRTUALENV_HANDLER\" value=\"app.wsgi_app\" />\r         <add key=\"WSGI_ALT_VIRTUALENV_ACTIVATE_THIS\"\r              value=\"D:\\home\\site\\wwwroot\\env\\Scripts\\activate_this.py\" />\r         <add key=\"WSGI_HANDLER\"\r              value=\"ptvs_virtualenv_proxy.get_virtualenv_handler()\" />\r         <add key=\"PYTHONPATH\" value=\"D:\\home\\site\\wwwroot\" />\r       </appSettings>\r       <system.web>\r         <compilation debug=\"true\" targetFramework=\"4.0\" />\r       </system.web>\r       <system.webServer>\r         <modules runAllManagedModulesForAllRequests=\"true\" />\r         <handlers>\r           <remove name=\"Python27_via_FastCGI\" />\r           <remove name=\"Python34_via_FastCGI\" />\r           <add name=\"Python FastCGI\"\r                path=\"handler.fcgi\"\r                verb=\"*\"\r                modules=\"FastCgiModule\"\r                scriptProcessor=\"D:\\Python27\\python.exe|D:\\Python27\\Scripts\\wfastcgi.py\"\r                resourceType=\"Unspecified\"\r                requireAccess=\"Script\" />\r         </handlers>\r         <rewrite>\r           <rules>\r             <rule name=\"Static Files\" stopProcessing=\"true\">\r               <conditions>\r                 <add input=\"true\" pattern=\"false\" />\r               </conditions>\r             </rule>\r             <rule name=\"Configure Python\" stopProcessing=\"true\">\r               <match url=\"(.*)\" ignoreCase=\"false\" />\r               <conditions>\r                 <add input=\"{REQUEST_URI}\" pattern=\"^/static/.*\" ignoreCase=\"true\" negate=\"true\" />\r               </conditions>\r               <action type=\"Rewrite\"\r                       url=\"handler.fcgi/{R:1}\"\r                       appendQueryString=\"true\" />\r             </rule>\r           </rules>\r         </rewrite>\r       </system.webServer>\r     </configuration>\r \r Python 3.4 的示例 `web.config` ：\r \r     <?xml version=\"1.0\"?>\r     <configuration>\r       <appSettings>\r         <add key=\"WSGI_ALT_VIRTUALENV_HANDLER\" value=\"app.wsgi_app\" />\r         <add key=\"WSGI_ALT_VIRTUALENV_ACTIVATE_THIS\"\r              value=\"D:\\home\\site\\wwwroot\\env\\Scripts\\python.exe\" />\r         <add key=\"WSGI_HANDLER\"\r              value=\"ptvs_virtualenv_proxy.get_venv_handler()\" />\r         <add key=\"PYTHONPATH\" value=\"D:\\home\\site\\wwwroot\" />\r       </appSettings>\r       <system.web>\r         <compilation debug=\"true\" targetFramework=\"4.0\" />\r       </system.web>\r       <system.webServer>\r         <modules runAllManagedModulesForAllRequests=\"true\" />\r         <handlers>\r           <remove name=\"Python27_via_FastCGI\" />\r           <remove name=\"Python34_via_FastCGI\" />\r           <add name=\"Python FastCGI\"\r                path=\"handler.fcgi\"\r                verb=\"*\"\r                modules=\"FastCgiModule\"\r                scriptProcessor=\"D:\\Python34\\python.exe|D:\\Python34\\Scripts\\wfastcgi.py\"\r                resourceType=\"Unspecified\"\r                requireAccess=\"Script\" />\r         </handlers>\r         <rewrite>\r           <rules>\r             <rule name=\"Static Files\" stopProcessing=\"true\">\r               <conditions>\r                 <add input=\"true\" pattern=\"false\" />\r               </conditions>\r             </rule>\r             <rule name=\"Configure Python\" stopProcessing=\"true\">\r               <match url=\"(.*)\" ignoreCase=\"false\" />\r               <conditions>\r                 <add input=\"{REQUEST_URI}\" pattern=\"^/static/.*\" ignoreCase=\"true\" negate=\"true\" />\r               </conditions>\r               <action type=\"Rewrite\" url=\"handler.fcgi/{R:1}\" appendQueryString=\"true\" />\r             </rule>\r           </rules>\r         </rewrite>\r       </system.webServer>\r     </configuration>\r \r 静态文件由 Web 服务器直接处理，无需通过 Python 代码，从而提高性能。\r \r 在上述示例中，磁盘上静态文件的位置应与 URL 中的位置匹配。 也就是说，`http://pythonapp.chinacloudsites.cn/static/site.css` 的请求将为磁盘上 `\\static\\site.css` 处的文件服务。\r \r `WSGI_ALT_VIRTUALENV_HANDLER` 是指定 WSGI 处理程序的位置。 在上述示例中，该位置为 `app.wsgi_app`，因为处理程序是根文件夹中 `app.py` 中的一个名为 `wsgi_app` 的函数。\r \r `PYTHONPATH`，但是，如果通过在 requirements.txt 中指定将所有依赖项全部安装到虚拟环境中，则不需要更改。\r \r ## <a name=\"virtual-environment-proxy\"></a>虚拟环境代理\r 使用以下脚本可检索 WSGI 处理程序、激活虚拟环境以及记录错误。 该脚本是通用的，无需修改即可使用。\r \r `ptvs_virtualenv_proxy.py`的内容：\r \r      # ############################################################################\r      #\r      # Copyright (c) Microsoft Corporation. \r      #\r      # This source code is subject to terms and conditions of the Apache License, Version 2.0. A \r      # copy of the license can be found in the License.html file at the root of this distribution. If \r      # you cannot locate the Apache License, Version 2.0, please send an email to \r      # vspython@microsoft.com. By using this source code in any fashion, you are agreeing to be bound \r      # by the terms of the Apache License, Version 2.0.\r      #\r      # You must not remove this notice, or any other, from this software.\r      #\r      # ###########################################################################\r \r     import datetime\r     import os\r     import sys\r     import traceback\r \r     if sys.version_info[0] == 3:\r         def to_str(value):\r             return value.decode(sys.getfilesystemencoding())\r \r         def execfile(path, global_dict):\r             \"\"\"Execute a file\"\"\"\r             with open(path, 'r') as f:\r                 code = f.read()\r             code = code.replace('\\r\\n', '\\n') + '\\n'\r             exec(code, global_dict)\r     else:\r         def to_str(value):\r             return value.encode(sys.getfilesystemencoding())\r \r     def log(txt):\r         \"\"\"Logs fatal errors to a log file if WSGI_LOG env var is defined\"\"\"\r         log_file = os.environ.get('WSGI_LOG')\r         if log_file:\r             f = open(log_file, 'a+')\r             try:\r                 f.write('%s: %s' % (datetime.datetime.now(), txt))\r             finally:\r                 f.close()\r \r     ptvsd_secret = os.getenv('WSGI_PTVSD_SECRET')\r     if ptvsd_secret:\r         log('Enabling ptvsd ...\\n')\r         try:\r             import ptvsd\r             try:\r                 ptvsd.enable_attach(ptvsd_secret)\r                 log('ptvsd enabled.\\n')\r             except: \r                 log('ptvsd.enable_attach failed\\n')\r         except ImportError:\r             log('error importing ptvsd.\\n')\r \r     def get_wsgi_handler(handler_name):\r         if not handler_name:\r             raise Exception('WSGI_ALT_VIRTUALENV_HANDLER env var must be set')\r \r         if not isinstance(handler_name, str):\r             handler_name = to_str(handler_name)\r \r         module_name, _, callable_name = handler_name.rpartition('.')\r         should_call = callable_name.endswith('()')\r         callable_name = callable_name[:-2] if should_call else callable_name\r         name_list = [(callable_name, should_call)]\r         handler = None\r         last_tb = ''\r \r         while module_name:\r             try:\r                 handler = __import__(module_name, fromlist=[name_list[0][0]])\r                 last_tb = ''\r                 for name, should_call in name_list:\r                     handler = getattr(handler, name)\r                     if should_call:\r                         handler = handler()\r                 break\r             except ImportError:\r                 module_name, _, callable_name = module_name.rpartition('.')\r                 should_call = callable_name.endswith('()')\r                 callable_name = callable_name[:-2] if should_call else callable_name\r                 name_list.insert(0, (callable_name, should_call))\r                 handler = None\r                 last_tb = ': ' + traceback.format_exc()\r \r         if handler is None:\r             raise ValueError('\"%s\" could not be imported%s' % (handler_name, last_tb))\r \r         return handler\r \r     activate_this = os.getenv('WSGI_ALT_VIRTUALENV_ACTIVATE_THIS')\r     if not activate_this:\r         raise Exception('WSGI_ALT_VIRTUALENV_ACTIVATE_THIS is not set')\r \r     def get_virtualenv_handler():\r         log('Activating virtualenv with %s\\n' % activate_this)\r         execfile(activate_this, dict(__file__=activate_this))\r \r         log('Getting handler %s\\n' % os.getenv('WSGI_ALT_VIRTUALENV_HANDLER'))\r         handler = get_wsgi_handler(os.getenv('WSGI_ALT_VIRTUALENV_HANDLER'))\r         log('Got handler: %r\\n' % handler)\r         return handler\r \r     def get_venv_handler():\r         log('Activating venv with executable at %s\\n' % activate_this)\r         import site\r         sys.executable = activate_this\r         old_sys_path, sys.path = sys.path, []\r \r         site.main()\r \r         sys.path.insert(0, '')\r         for item in old_sys_path:\r             if item not in sys.path:\r                 sys.path.append(item)\r \r         log('Getting handler %s\\n' % os.getenv('WSGI_ALT_VIRTUALENV_HANDLER'))\r         handler = get_wsgi_handler(os.getenv('WSGI_ALT_VIRTUALENV_HANDLER'))\r         log('Got handler: %r\\n' % handler)\r         return handler\r \r ## <a name=\"customize-git-deployment\"></a>自定义 Git 部署\r [!INCLUDE [web-sites-python-customizing-runtime](../../includes/web-sites-python-customizing-deployment.md)]\r \r ## <a name=\"troubleshooting---package-installation\"></a>故障排除 - 软件包安装\r [!INCLUDE [web-sites-python-troubleshooting-package-installation](../../includes/web-sites-python-troubleshooting-package-installation.md)]\r \r ## <a name=\"troubleshooting---virtual-environment\"></a>故障排除 - 虚拟环境\r [!INCLUDE [web-sites-python-troubleshooting-virtual-environment](../../includes/web-sites-python-troubleshooting-virtual-environment.md)]\r \r ## <a name=\"next-steps\"></a>后续步骤\r 有关详细信息，请参阅 [Python 开发人员中心](/develop/python/)。\r \r ## <a name=\"whats-changed\"></a>更改内容\r * 有关从网站更改为应用服务的指南，请参阅 [Azure 应用服务及其对现有 Azure 服务的影响](./app-service-changes-existing-services.md)\r \r <!--Update_Description:update meta properties and wording-->"}