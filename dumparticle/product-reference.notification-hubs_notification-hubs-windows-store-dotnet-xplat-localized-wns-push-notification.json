{"Title":"通知中心本地化的突发新闻教程","Description":"了解如何使用 Azure 通知中心发送本地化的突发新闻通知。","Content":"\r # 使用通知中心发送本地化的突发新闻\r \r > [!div class=\"op_single_selector\"]\r >- [Windows 应用商店 C#](./notification-hubs-windows-store-dotnet-xplat-localized-wns-push-notification.md)\r >- [iOS](./notification-hubs-ios-xplat-localized-apns-push-notification.md)\r \r ##概述\r \r 本主题演示如何使用 Azure 通知中心的**模板**功能广播已按语言和设备本地化的突发新闻通知。在本教程中，你从在[使用通知中心发送突发新闻]中创建的 Windows 应用商店应用程序开始操作。完成时，你将可以注册感兴趣的突发新闻类别，指定要接收通知的语言并仅接收采用该语言的这些类别的推送通知。\r \r 此方案包含两个部分：\r \r - Windows 应用商店应用程序允许客户端设备指定一种语言并订阅不同的突发新闻类别；\r \r - 后端使用 Azure 通知中心的**标记**和**模板**功能广播通知。\r \r ##先决条件\r \r 你必须已完成学习[使用通知中心发送突发新闻]教程并具有可用的代码，因为本教程直接围绕该代码展开论述。\r \r 你还需要 Visual Studio 2012 或更高版本。\r \r ##模板概念\r \r 在[使用通知中心发送突发新闻]中，你构建了一个使用**标记**订阅不同新闻类别通知的应用程序。\r 但是，很多应用程序针对多个市场，需要本地化。这意味着通知内容本身必须本地化且传递到正确的设备组。\r 在本主题中，我们将演示如何使用通知中心的**模板**功能轻松传递本地化的突发新闻通知。\r \r 注意：发送本地化的通知的一种方式是创建每个标签的多个版本。例如，要支持英语、法语和汉语，我们需要三种不同的标签用于世界新闻：“world\\_en”、“world\\_fr”和“world\\_ch”。我们然后必须将世界新闻的本地化版本分别发送到这些标签。在本主题中，我们使用模板来避免增生标签和发送多个消息的要求。\r \r 在较高级别上，模板是指定特定设备应如何接收通知的一种方法。模板通过引用作为你应用程序后端所发消息的一部分的属性，指定确切的负载格式。在我们的示例中，我们将发送包含所有支持的语言的区域设置未知的消息：\r \r ```\r {\r     \"News_English\": \"...\",\r     \"News_French\": \"...\",\r     \"News_Mandarin\": \"...\"\r }\r ```\r \r 然后我们将确保设备注册到引用正确属性的模板。例如，要接收简单的 toast 消息的 Windows 应用商店应用将注册以下包含任何相应标记的模板：\r \r ```\r <toast>\r   <visual>\r     <binding template=\\\"ToastText01\\\">\r       <text id=\\\"1\\\">$(News_English)</text>\r     </binding>\r   </visual>\r </toast>\r ```\r \r 模板是很强大的功能，你可以在[模板](./notification-hubs-templates-cross-platform-push-messages.md)一文中了解其更多信息。\r \r ##应用程序用户界面\r \r 我们现在将修改你在[使用通知中心发送突发新闻]主题中创建的“突发新闻”应用，以使用模板发送本地化的突发新闻。\r \r 在 Windows 应用商店应用程序中：\r \r 更改 MainPage.xaml 以包含区域设置组合框：\r \r ```\r <Grid Margin=\"120, 58, 120, 80\"  \r         Background=\"{StaticResource ApplicationPageBackgroundThemeBrush}\">\r     <Grid.RowDefinitions>\r         <RowDefinition />\r         <RowDefinition />\r         <RowDefinition />\r         <RowDefinition />\r         <RowDefinition />\r         <RowDefinition />\r     </Grid.RowDefinitions>\r     <Grid.ColumnDefinitions>\r         <ColumnDefinition />\r         <ColumnDefinition />\r     </Grid.ColumnDefinitions>\r     <TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\"  TextWrapping=\"Wrap\" Text=\"Breaking News\" FontSize=\"42\" VerticalAlignment=\"Top\"/>\r     <ComboBox Name=\"Locale\" HorizontalAlignment=\"Left\" VerticalAlignment=\"Center\" Width=\"200\" Grid.Row=\"1\" Grid.Column=\"0\">\r         <x:String>English</x:String>\r         <x:String>French</x:String>\r         <x:String>Mandarin</x:String>\r     </ComboBox>\r     <ToggleSwitch Header=\"World\" Name=\"WorldToggle\" Grid.Row=\"2\" Grid.Column=\"0\"/>\r     <ToggleSwitch Header=\"Politics\" Name=\"PoliticsToggle\" Grid.Row=\"3\" Grid.Column=\"0\"/>\r     <ToggleSwitch Header=\"Business\" Name=\"BusinessToggle\" Grid.Row=\"4\" Grid.Column=\"0\"/>\r     <ToggleSwitch Header=\"Technology\" Name=\"TechnologyToggle\" Grid.Row=\"2\" Grid.Column=\"1\"/>\r     <ToggleSwitch Header=\"Science\" Name=\"ScienceToggle\" Grid.Row=\"3\" Grid.Column=\"1\"/>\r     <ToggleSwitch Header=\"Sports\" Name=\"SportsToggle\" Grid.Row=\"4\" Grid.Column=\"1\"/>\r     <Button Content=\"Subscribe\" HorizontalAlignment=\"Center\" Grid.Row=\"5\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\" Click=\"SubscribeButton_Click\" />\r </Grid>\r ```\r \r ##构建 Windows 应用商店客户端应用程序\r \r 1. 在 Notifications 类中，将一个区域设置参数添加到 *StoreCategoriesAndSubscribe* 和 *SubscribeToCateories* 方法。\r \r     ```\r     public async Task<Registration> StoreCategoriesAndSubscribe(string locale, IEnumerable<string> categories)\r     {\r         ApplicationData.Current.LocalSettings.Values[\"categories\"] = string.Join(\",\", categories);\r         ApplicationData.Current.LocalSettings.Values[\"locale\"] = locale;\r         return await SubscribeToCategories(categories);\r     }\r \r     public async Task<Registration> SubscribeToCategories(string locale, IEnumerable<string> categories = null)\r     {\r         var channel = await PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync();\r \r         if (categories == null)\r         {\r             categories = RetrieveCategories();\r         }\r \r         // Using a template registration. This makes supporting notifications across other platforms much easier.\r         // Using the localized tags based on locale selected.\r         string templateBodyWNS = String.Format(\"<toast><visual><binding template=\"ToastText01\"><text id=\"1\">$(News_{0})</text></binding></visual></toast>\", locale);\r \r         return await hub.RegisterTemplateAsync(channel.Uri, templateBodyWNS, \"localizedWNSTemplateExample\", categories);\r     }\r     ```\r \r     请注意，不是调用 *RegisterNativeAsync* 方法，我们调用的是 *RegisterTemplateAsync*：我们将注册特定的通知格式，在其中模板依赖于区域设置。我们还提供模板的名称（“localizedWNSTemplateExample”），因为我们可能要注册多个模板（例如一个用于 toast 通知，一个用于磁贴），需要命名它们以便可以更新或删除它们。\r \r     请注意，如果一个设备使用同一标签注册多个模板，针对该标签的传入消息将导致多个通知发送到设备（每个通知对应一个模板）。当同一逻辑消息必须导致多个可视通知时，此行为很有用，例如在 Windows 应用商店应用程序显示徽章和 toast。\r \r 2. 添加以下方法来检索存储的区域设置：\r \r     ```\r     public string RetrieveLocale()\r     {\r         var locale = (string) ApplicationData.Current.LocalSettings.Values[\"locale\"];\r         return locale != null ? locale : \"English\";\r     }\r     ```\r \r 3. 在你的 MainPage.xaml.cs 中，通过检索“区域设置”组合框的当前值并将它提供给对 Notifications 类的调用，更新按钮单击处理程序，如下所示：\r \r     ```\r     private async void SubscribeButton_Click(object sender, RoutedEventArgs e)\r     {\r         var locale = (string)Locale.SelectedItem;\r \r         var categories = new HashSet<string>();\r         if (WorldToggle.IsOn) categories.Add(\"World\");\r         if (PoliticsToggle.IsOn) categories.Add(\"Politics\");\r         if (BusinessToggle.IsOn) categories.Add(\"Business\");\r         if (TechnologyToggle.IsOn) categories.Add(\"Technology\");\r         if (ScienceToggle.IsOn) categories.Add(\"Science\");\r         if (SportsToggle.IsOn) categories.Add(\"Sports\");\r \r         var result = await ((App)Application.Current).notifications.StoreCategoriesAndSubscribe(locale,\r              categories);\r \r         var dialog = new MessageDialog(\"Locale: \" + locale + \" Subscribed to: \" + \r             string.Join(\",\", categories) + \" on registration Id: \" + result.RegistrationId);\r         dialog.Commands.Add(new UICommand(\"OK\"));\r         await dialog.ShowAsync();\r     }\r     ```\r \r 4. 最后，在 App.xaml.cs 文件中，确保更新 `InitNotificationsAsync` 方法以检索区域设置，并在订阅时使用该区域设置：\r \r     ```\r     private async void InitNotificationsAsync()\r     {\r         var result = await notifications.SubscribeToCategories(notifications.RetrieveLocale());\r \r         // Displays the registration ID so you know it was successful\r         if (result.RegistrationId != null)\r         {\r             var dialog = new MessageDialog(\"Registration successful: \" + result.RegistrationId);\r             dialog.Commands.Add(new UICommand(\"OK\"));\r             await dialog.ShowAsync();\r         }\r     }\r     ```\r \r ##从后端发送本地化的通知\r \r [!INCLUDE [notification-hubs-localized-back-end](../../includes/notification-hubs-localized-back-end.md)]\r \r <!-- Anchors. -->\r [Template concepts]: #concepts\r [The app user interface]: #ui\r [Building the Windows Store client app]: #building-client\r [Send notifications from your back-end]: #send\r [Next Steps]: #next-steps\r \r <!-- Images. -->\r \r <!-- URLs. -->\r \r [使用通知中心发送突发新闻]: ./notification-hubs-windows-notification-dotnet-push-xplat-segmented-wns.md\r \r [Submit an app page]: http://go.microsoft.com/fwlink/p/?LinkID=266582\r [My Applications]: http://go.microsoft.com/fwlink/p/?LinkId=262039\r \r [wns object]: http://go.microsoft.com/fwlink/p/?LinkId=260591\r [Notification Hubs Guidance]: http://msdn.microsoft.com/library/jj927170.aspx\r [Notification Hubs How-To for iOS]: http://msdn.microsoft.com/library/jj927168.aspx\r [Notification Hubs How-To for Windows Store]: http://msdn.microsoft.com/library/jj927172.aspx\r \r <!---HONumber=Mooncake_0815_2016-->"}