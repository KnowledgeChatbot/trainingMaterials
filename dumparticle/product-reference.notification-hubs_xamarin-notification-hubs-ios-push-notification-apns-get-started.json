{"Title":"使用通知中心针对 Xamarin 应用发送 iOS 推送通知","Description":"在本教程中，你将了解如何使用 Azure 通知中心将推送通知发送到 Xamarin iOS 应用程序。","Content":"\r # 使用通知中心针对 Xamarin 应用发送 iOS 推送通知\r \r [!INCLUDE [notification-hubs-selector-get-started](../../includes/notification-hubs-selector-get-started.md)]\r \r ## 概述\r > [!IMPORTANT]\r > 若要完成本教程，你必须有一个有效的 Azure 帐户。如果你没有帐户，只需花费几分钟就能创建一个试用帐户。有关详细信息，请参阅 [Azure 试用](https://www.azure.cn/pricing/1rmb-trial/)。\r \r 本教程演示如何使用 Azure 通知中心将推送通知发送到 iOS 应用程序。\r 你将创建一个空白 Xamarin.iOS 应用，它使用 [Apple Push Notification 服务 APNs 接收推送通知。完成后，你将能够使用通知中心将推送通知广播到运行你的应用的所有设备。NotificationHubs 应用程序示例中提供了完成的代码。\r \r 本教程演示使用通知中心的简单推送消息广播方案。\r \r ## 先决条件\r \r 本教程需要的内容如下：\r \r + [Xcode 6.0][Install Xcode]\r + iOS 7.0（或更高版本）兼容设备\r + iOS 开发人员计划成员身份\r + [Xamarin Studio]\r \r    > [!NOTE]\r    > 由于 iOS 推送通知配置要求，你必须在物理 iOS 设备（iPhone 或 iPad）而不是在模拟器上部署和测试示例应用程序。\r \r 只有在完成本教程后，才能完成有关 Xamarin iOS 应用的所有其他通知中心教程。\r \r [!INCLUDE [通知中心：启用 Apple 推送通知](../../includes/notification-hubs-enable-apple-push-notifications.md)]\r \r <!--\r ##配置通知中心\r \r 本部分将引导你使用创建的 **.p12** 推送证书创建新的通知中心并配置 APNS 身份验证。如果你想要使用已创建的通知中心，可以跳到步骤 5。\r \r [!INCLUDE [notification-hubs-portal-create-new-hub](../../includes/notification-hubs-portal-create-new-hub.md)]\r \r <ol start=\"7\">\r <li>\r <p>如果想要配置 APNS 连接，则在 Azure 门户中打开通知中心设置，并单击<b></b>“通知服务”，然后单击列表中的“Apple (APNS)”<b></b>项。完成后单击“上传证书”，并选择前面导出的 <b>.p12</b> 证书以及证书的密码。<b></b></p>\r <p>请务必选择<b></b>“沙盒”模式，因为你将在开发环境发送推送消息。仅当你想要将推送通知发送给从应用商店购买了你应用的用户时，才使用“生产”设置。<b></b></p>\r </li>\r </ol>\r &emsp;&emsp;![](./media/notification-hubs-ios-get-started/notification-hubs-apns.png)\r \r &emsp;&emsp;![](./media/notification-hubs-ios-get-started/notification-hubs-sandbox.png)\r \r 你的通知中心现在已配置为使用 APNS，并且你有连接字符串用于注册你的应用和发送推送通知。\r \r -->\r \r ## 将你的应用连接到通知中心\r \r #### 创建新项目\r \r 1. 在 Xamarin Studio 中，创建新的 iOS 项目，然后选择“统一 API”>“单视图应用程序”模板。\r \r     ![Xamarin Studio - 选择应用程序类型][31]\r \r 2. 添加对 Azure 消息传送组件的引用。在“解决方案”视图中，右键单击你项目的“Components”文件夹，然后选择“获取更多组件”。搜索“Azure 消息传送”组件，并向你的项目添加该组件。\r \r 3. 在 **AppDelegate.cs** 中，添加以下 using 语句：\r \r     ```\r     using WindowsAzure.Messaging;\r     ```\r \r 4. 声明 **SBNotificationHub** 的实例：\r \r     ```\r     private SBNotificationHub Hub { get; set; }\r     ```\r \r 5. 使用以下变量创建 **Constants.cs** 类：\r \r     ```\r     // Azure app-specific connection string and hub path\r     public const string ConnectionString = \"<Azure connection string>\";\r     public const string NotificationHubPath = \"<Azure hub path>\";\r     ```\r \r 6. 在 **AppDelegate.cs** 中，更新 **FinishedLaunching()** 以匹配以下内容：\r \r     ```\r     public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions)\r     {\r         if (UIDevice.CurrentDevice.CheckSystemVersion (8, 0)) {\r             var pushSettings = UIUserNotificationSettings.GetSettingsForTypes (\r                    UIUserNotificationType.Alert | UIUserNotificationType.Badge | UIUserNotificationType.Sound,\r                    new NSSet ());\r \r             UIApplication.SharedApplication.RegisterUserNotificationSettings (pushSettings);\r             UIApplication.SharedApplication.RegisterForRemoteNotifications ();\r         } else {\r             UIRemoteNotificationType notificationTypes = UIRemoteNotificationType.Alert | UIRemoteNotificationType.Badge | UIRemoteNotificationType.Sound;\r             UIApplication.SharedApplication.RegisterForRemoteNotificationTypes (notificationTypes);\r         }\r \r         return true;\r     }\r     ```\r \r 7. 重写 **AppDelegate.cs** 中的 **RegisteredForRemoteNotifications()** 方法：\r \r     ```\r     public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)\r     {\r         Hub = new SBNotificationHub(Constants.ConnectionString, Constants.NotificationHubPath);\r \r         Hub.UnregisterAllAsync (deviceToken, (error) => {\r             if (error != null)\r             {\r                 Console.WriteLine(\"Error calling Unregister: {0}\", error.ToString());\r                 return;\r             }\r \r             NSSet tags = null; // create tags if you want\r             Hub.RegisterNativeAsync(deviceToken, tags, (errorCallback) => {\r                 if (errorCallback != null)\r                     Console.WriteLine(\"RegisterNativeAsync error: \" + errorCallback.ToString());\r             });\r         });\r     }\r     ```\r \r 8. 重写 **AppDelegate.cs** 中的 **ReceivedRemoteNotification()** 方法：\r \r     ```\r     public override void ReceivedRemoteNotification(UIApplication application, NSDictionary userInfo)\r     {\r         ProcessNotification(userInfo, false);\r     }\r     ```\r \r 9. 在 **AppDelegate.cs** 中创建以下 **ProcessNotification()** 方法：\r \r     ```\r     void ProcessNotification(NSDictionary options, bool fromFinishedLaunching)\r     {\r         // Check to see if the dictionary has the aps key.  This is the notification payload you would have sent\r         if (null != options && options.ContainsKey(new NSString(\"aps\")))\r         {\r             //Get the aps dictionary\r             NSDictionary aps = options.ObjectForKey(new NSString(\"aps\")) as NSDictionary;\r \r             string alert = string.Empty;\r \r             //Extract the alert text\r             // NOTE: If you're using the simple alert by just specifying\r             // \"  aps:{alert:\"alert msg here\"}  \", this will work fine.\r             // But if you're using a complex alert with Localization keys, etc.,\r             // your \"alert\" object from the aps dictionary will be another NSDictionary.\r             // Basically the JSON gets dumped right into a NSDictionary,\r             // so keep that in mind.\r             if (aps.ContainsKey(new NSString(\"alert\")))\r                 alert = (aps [new NSString(\"alert\")] as NSString).ToString();\r \r             //If this came from the ReceivedRemoteNotification while the app was running,\r             // we of course need to manually process things like the sound, badge, and alert.\r             if (!fromFinishedLaunching)\r             {\r                 //Manually show an alert\r                 if (!string.IsNullOrEmpty(alert))\r                 {\r                     UIAlertView avAlert = new UIAlertView(\"Notification\", alert, null, \"OK\", null);\r                     avAlert.Show();\r                 }\r             }\r         }\r     }\r     ```\r \r     > [!NOTE]\r     > 你可以选择覆盖 **FailedToRegisterForRemoteNotifications()** 以处理无网络连接等情况。如果用户可能会在脱机模式下（例如飞行模式）下启动你的应用程序，并且你想要处理应用特定的推送消息方案，则此操作特别重要。\r \r 10. 在你的设备上运行应用程序。\r \r ## 发送推送通知\r \r 在 [Azure 门户]中通过“通知中心”页面上“故障排除”工具集中的“测试发送”功能来发送通知，可以在应用中测试推送通知的接收情况，如以下屏幕中所示。\r \r ![](./media/notification-hubs-ios-get-started/notification-hubs-test-send.png)\r \r 通常，推送通知通过后端服务（例如移动服务或者使用兼容库的 ASP.NET）进行发送。如果你的方案中没有可用的库，则你也可以使用 REST API 直接发送推送消息。\r \r 在本教程中，为了保持内容的简单性，我们只会演示如何在控制台应用程序（而不是后端服务）中，使用通知中心的 .NET SDK 发送通知，以此测试你的客户端应用。建议你接下来学习[使用通知中心向用户推送通知](./notification-hubs-aspnet-backend-ios-apple-apns-notification.md)教程，以了解如何从 ASP.NET 后端发送通知。不过，可以使用以下方法来发送通知：\r \r - **REST 接口**：可以使用 [REST 接口](http://msdn.microsoft.com/zh-cn/library/windowsazure/dn223264.aspx)在任何后端平台上支持推送通知。\r \r * ** Azure 通知中心 .NET SDK**：在 Visual Studio 的 Nuget 包管理器中，运行 [Install-Package Microsoft.Azure.NotificationHubs](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)。\r \r * **Node.js**：[如何通过 Node.js 使用通知中心](./notification-hubs-nodejs-push-notification-tutorial.md)。\r \r * **Java/PHP**：有关如何使用 REST API 发送推送通知的示例，请参阅“如何通过 Java/PHP 使用通知中心”([Java](./notification-hubs-java-push-notification-tutorial.md) | [PHP](./notification-hubs-php-push-notification-tutorial.md))。\r \r #### （可选）通过 .NET 控制台应用发送推送通知\r \r 在本部分，你将使用简单的 .NET 控制台应用发送推送通知。为了演示本示例，我们将切换到已安装 Visual Studio 的 Windows 开发环境。\r \r 1. 在 Visual Studio 中创建新的 Visual C# 控制台应用程序：\r \r     ![Visual Studio - 新建控制台应用程序][213]\r \r 2. 在 Visual Studio 中，依次单击“工具”、“NuGet 包管理器”和“包管理器控制台”。\r \r     包管理器控制台应显示在 Visual Studio 工作区的底部。\r \r 3. 在“包管理器控制台”窗口中，将“默认项目”设置为新的控制台应用程序项目，然后在控制台窗口中执行以下命令：\r \r     ```\r     Install-Package Microsoft.Azure.NotificationHubs\r     ```\r \r     这将使用 <a href=\"http://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/\">Microsoft.Azure.Notification Hubs NuGet 包</a>添加对 Azure 通知中心 SDK 的引用。\r \r     ![](./media/notification-hubs-windows-store-dotnet-get-started/notification-hub-package-manager.png)\r \r 4. 打开 `Program.cs` 文件，并添加以下 `using` 语句，确保我们可以使用 Azure 类和你主类中的函数：\r \r     ```\r     using Microsoft.Azure.NotificationHubs;\r     ```\r \r 3. 在你的 `Program` 类中，添加以下方法（不要忘了替换**连接字符串**和**中心名称**）：\r \r     ```\r     private static async void SendNotificationAsync()\r     {\r         NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(\"<connection string with full access>\", \"<hub name>\");\r         var alert = \"{\"aps\":{\"alert\":\"Hello from .NET!\"}}\";\r         await hub.SendAppleNativeNotificationAsync(alert);\r     }\r     ```\r \r 4. 在 `Main` 方法中添加以下行：\r \r     ```\r      SendNotificationAsync();\r      Console.ReadLine();\r     ```\r \r 5. 按 F5 键以运行应用。数秒内，你应在设备上看到一条推送通知。无论你使用 Wi-Fi 或移动电话数据网络，确保设备上存在可用的 Internet 连接。\r \r 可以在 Apple [本地和推送通知编程指南]中找到所有可能的负载。\r \r #### （可选）从移动服务发送通知\r \r 在本部分，我们将使用移动服务通过节点脚本来发送推送通知。\r \r 若要使用移动服务发送通知，请按移动服务入门中的说明操作，然后：\r \r 1. 登录到 [Azure 经典门户]并选择你的移动服务。\r \r 2. 选择顶部的“计划程序”选项卡。\r \r     ![Azure 经典门户 - 计划程序][215]\r \r 3. 创建新的计划作业，插入名称，然后选择“按需”。\r \r     ![Azure 经典门户 - 新建作业][216]\r \r 4. 创建作业时，单击该作业名称。然后单击顶部栏上的“脚本”选项卡。\r \r 5. 在你的计划程序函数中插入以下脚本。确保将占位符替换为你先前获取的通知中心名称和 *DefaultFullSharedAccessSignature* 的连接字符串。单击“保存”。\r \r     ```\r     var azure = require('azure');\r     var notificationHubService = azure.createNotificationHubService('<Hubname>', '<SAS Full access >');\r     notificationHubService.apns.send(\r         null,\r         {\"aps\":\r             {\r               \"alert\": \"Hello from Mobile Services!\"\r             }\r         },\r         function (error)\r         {\r             if (!error) {\r                 console.warn(\"Notification successful\");\r             }\r         }\r     );\r     ```\r \r 6. 单击底部栏上的“运行一次”。你应在设备上收到警报。\r \r ## 后续步骤\r \r 在这个简单的示例中，你已将推送通知广播到所有 iOS 设备。若要针对特定客户，请参考教程[使用通知中心将通知推送到用户]。如果要按兴趣组划分用户，可以阅读[使用通知中心发送突发新闻]。请在[通知中心指南]和[适用于 iOS 的通知中心操作方法指南]中了解有关如何使用通知中心的详细信息。\r \r <!-- Images. -->\r \r [213]: ./media/partner-xamarin-notification-hubs-ios-get-started/notification-hub-create-console-app.png\r \r [215]: ./media/partner-xamarin-notification-hubs-ios-get-started/notification-hub-scheduler1.png\r [216]: ./media/partner-xamarin-notification-hubs-ios-get-started/notification-hub-scheduler2.png\r \r [31]: ./media/partner-xamarin-notification-hubs-ios-get-started/notification-hub-create-ios-app.png\r \r <!-- URLs. -->\r [Mobile Services iOS SDK]: http://go.microsoft.com/fwLink/?LinkID=266533\r [Submit an app page]: http://go.microsoft.com/fwlink/p/?LinkID=266582\r [My Applications]: http://go.microsoft.com/fwlink/p/?LinkId=262039\r [Azure 经典门户]: https://manage.windowsazure.cn/\r [通知中心指南]: http://msdn.microsoft.com/library/jj927170.aspx\r [适用于 iOS 的通知中心操作方法指南]: http://msdn.microsoft.com/library/jj927168.aspx\r [Install Xcode]: https://go.microsoft.com/fwLink/p/?LinkID=266532\r [iOS Provisioning Portal]: http://go.microsoft.com/fwlink/p/?LinkId=272456\r \r [使用通知中心将通知推送到用户]: ./notification-hubs-aspnet-backend-windows-dotnet-wns-notification.md\r [使用通知中心发送突发新闻]: ./notification-hubs-windows-notification-dotnet-push-xplat-segmented-wns.md\r \r [本地和推送通知编程指南]: http://developer.apple.com/library/mac/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW1\r [Apple Push Notification Service]: http://go.microsoft.com/fwlink/p/?LinkId=272584\r \r [Azure Mobile Services Component]: http://components.xamarin.com/view/azure-mobile-services/\r [Xamarin Studio]: http://xamarin.com/download\r [Azure 门户]: https://portal.azure.cn\r \r <!---HONumber=Mooncake_Quality_Review_0104_2017-->"}