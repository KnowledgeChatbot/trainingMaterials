{"Title":"为 Azure 云服务创建内部负载均衡器","Description":"了解如何在经典部署模型中使用 PowerShell 创建内部负载均衡器","Content":"# <a name=\"get-started-creating-an-internal-load-balancer-classic-for-cloud-services\"></a>开始为云服务创建内部负载均衡器（经典）\r \r > [!div class=\"op_single_selector\"]\r > * [PowerShell](../load-balancer/load-balancer-get-started-ilb-classic-ps.md)\r > * [Azure CLI](../load-balancer/load-balancer-get-started-ilb-classic-cli.md)\r > * [云服务](../load-balancer/load-balancer-get-started-ilb-classic-cloud.md)\r \r > [!IMPORTANT]\r > Azure 具有用于创建和处理资源的两个不同的部署模型：[Resource Manager 和经典](../azure-resource-manager/resource-manager-deployment-model.md)。  本文介绍使用经典部署模型的情况。 Azure 建议大多数新部署使用 Resource Manager 模型。 了解如何[使用 Resource Manager 模型执行这些步骤](load-balancer-get-started-ilb-arm-ps.md)。\r \r ## <a name=\"configure-internal-load-balancer-for-cloud-services\"></a>为云服务配置内部负载均衡器\r \r 虚拟机和云服务都支持内部负载均衡器。 在区域虚拟网络外部的云服务中创建的内部负载均衡器终结点只能在该云服务中进行访问。\r \r 在云服务中创建第一个部署期间必须设置内部负载均衡器配置，如下面的示例中所示。\r \r > [!IMPORTANT]\r > 运行以下步骤的先决条件是已为云部署创建虚拟网络。 需要虚拟网络名称和子网名称，以便创建内部负载均衡。\r \r ### <a name=\"step-1\"></a>步骤 1\r \r 在 Visual Studio 中打开云部署的服务配置文件 (.cscfg)，并在网络配置的最后一个“`</Role>`”项下添加以下节，以便创建内部负载均衡。\r \r ```xml\r <NetworkConfiguration>\r     <LoadBalancers>\r     <LoadBalancer name=\"name of the load balancer\">\r         <FrontendIPConfiguration type=\"private\" subnet=\"subnet-name\" staticVirtualNetworkIPAddress=\"static-IP-address\"/>\r     </LoadBalancer>\r     </LoadBalancers>\r </NetworkConfiguration>\r ```\r \r 让我们为网络配置文件添加值，以便显示其外观。 在此示例中，假定创建了一个名为“test_vnet”的 VNet，其中包含一个名为 test_subnet 的子网 10.0.0.0/24 并具有静态 IP 10.0.0.4。 负载均衡器将名为 testLB。\r \r ```xml\r <NetworkConfiguration>\r     <LoadBalancers>\r     <LoadBalancer name=\"testLB\">\r         <FrontendIPConfiguration type=\"private\" subnet=\"test_subnet\" staticVirtualNetworkIPAddress=\"10.0.0.4\"/>\r     </LoadBalancer>\r     </LoadBalancers>\r </NetworkConfiguration>\r ```\r \r 有关负载均衡器架构的详细信息，请参阅 [添加负载均衡器](https://msdn.microsoft.com/library/azure/dn722411.aspx)。\r \r ### <a name=\"step-2\"></a>步骤 2\r \r 更改服务定义 (.csdef) 文件，以便向内部负载均衡添加终结点。 创建角色实例的那一刻，服务定义文件会将角色实例添加到内部负载均衡。\r \r ```xml\r <WorkerRole name=\"worker-role-name\" vmsize=\"worker-role-size\" enableNativeCodeExecution=\"[true|false]\">\r     <Endpoints>\r     <InputEndpoint name=\"input-endpoint-name\" protocol=\"[http|https|tcp|udp]\" localPort=\"local-port-number\" port=\"port-number\" certificate=\"certificate-name\" loadBalancerProbe=\"load-balancer-probe-name\" loadBalancer=\"load-balancer-name\" />\r     </Endpoints>\r </WorkerRole>\r ```\r \r 按照上面的示例的相同值，让我们将值添加到服务定义文件。\r \r ```xml\r <WorkerRole name=\"WorkerRole1\" vmsize=\"A7\" enableNativeCodeExecution=\"[true|false]\">\r     <Endpoints>\r     <InputEndpoint name=\"endpoint1\" protocol=\"http\" localPort=\"80\" port=\"80\" loadBalancer=\"testLB\" />\r     </Endpoints>\r </WorkerRole>\r ```\r \r 将使用 testLB 负载均衡器对网络流量进行负载均衡，将端口 80 用于传入请求，也在端口 80 上发送到辅助角色实例。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r [使用源 IP 关联配置负载均衡器分发模式](load-balancer-distribution-mode.md)\r \r [配置负载均衡器的空闲 TCP 超时设置](load-balancer-tcp-idle-timeout.md)\r \r <!--Update_Description: update meta properties -->"}