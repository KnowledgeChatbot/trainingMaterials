{"Title":"适用于 Azure 的 MongoDB、Angular 和 Node 教程 - 第 5 部分","Description":"本教程系列介绍如何通过 Angular 和 Node 在 Azure Cosmos DB 上创建 MongoDB 应用（所使用的 API 与用于 MongoDB 的 API 完全相同）；这是本教程系列的第 5 部分","Content":"# <a name=\"create-a-mongodb-app-with-angular-and-azure-cosmos-db---part-5-use-mongoose-to-connect-to-azure-cosmos-db\"></a>通过 Angular 和 Azure Cosmos DB 创建 MongoDB 应用 - 第 5 部分：使用 Mongoose 连接到 Azure Cosmos DB\r \r 本教程包含多个部分，演示了如何通过 Express、Angular 和 Azure Cosmos DB 数据库创建以 Node.js 编写的新 [MongoDB API](mongodb-introduction.md) 应用。\r \r 本教程的第 5 部分基于[第 4 部分](tutorial-develop-mongodb-nodejs-part4.md)，涵盖以下任务：\r \r > [!div class=\"checklist\"]\r > * 使用 Mongoose 连接到 Azure Cosmos DB\r > * 从 Azure Cosmos DB 获取连接字符串信息\r > * 创建 hero 模型\r > * 创建 hero 服务，以获取 hero 数据\r > * 在本地运行应用\r \r <!-- Not Available ## Video walkthrough-->\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 开始教程的此部分之前，请确保已完成教程[第 4 部分](tutorial-develop-mongodb-nodejs-part4.md)的步骤。\r \r > [!TIP]\r > 本教程介绍生成应用程序的各个步骤。 若要下载完成的项目，可从 GitHub 上的 [angular-cosmosdb 存储库](https://github.com/Azure-Samples/angular-cosmosdb)获取完成的应用程序。\r \r ## <a name=\"use-mongoose-to-connect-to-azure-cosmos-db\"></a>使用 Mongoose 连接到 Azure Cosmos DB\r \r 1. 安装 mongoose npm 模块，此模块为 API，通常用于与 MongoDB 通信。\r \r     ```bash\r     npm i mongoose --save\r     ```\r \r 2. 现在，请在 server 文件夹中创建名为“mongo.js”的新文件。 在此文件中，请添加 Azure Cosmos DB 数据库的所有连接信息。\r \r 3. 将以下代码复制到 mongo.js 中。 此代码：\r     * 需要 Mongoose。\r     * 替代 Mongo 约定，使用内置到 ES6/ES2015 及更高版本中的基本约定。\r     * 针对 env 文件进行调用，以便根据自己是处在过渡期、生产期还是开发期来设置某些项目。 我们会很快创建该文件。\r     * 包括 MongoDB 连接字符串（将在 env 文件中设置）。\r     * 创建调用 Mongoose 的 connect 函数。\r \r     ```javascript\r     const mongoose = require('mongoose');\r     /**\r      * Set to Node.js native promises\r      * Per http://mongoosejs.com/docs/promises.html\r      */\r     mongoose.Promise = global.Promise;\r \r     const env = require('./env/environment');\r \r     // eslint-disable-next-line max-len\r     const mongoUri = `mongodb://${env.accountName}:${env.key}@${env.accountName}.documents.azure.cn:${env.port}/${env.databaseName}?ssl=true`;\r \r     function connect() {\r      mongoose.set('debug', true);\r      return mongoose.connect(mongoUri, { useMongoClient: true });\r     }\r \r     module.exports = {\r       connect,\r       mongoose\r     };\r     ```\r \r 4. 在“资源管理器”窗格的 server 下创建名为 environment 的文件夹，然后在 environment 文件夹中创建名为 environment.js 的新文件。\r \r 5. 从 mongo.js 文件可以知道，需包括 `dbName`、`key` 和 `cosmosPort`，因此请将以下代码复制到 environment.js 中。\r \r     ```javascript\r     // TODO: replace if yours are different\r     module.exports = {\r       accountName: 'your-cosmosdb-account-name-goes-here',\r       databaseName: 'admin', \r       key: 'your-key-goes-here',\r       port: 10255\r     };\r     ```\r \r ## <a name=\"get-the-connection-string-information\"></a>获取连接字符串信息\r \r 1. 在 environment.js 中，将 `port` 的值更改为 10255。 （可以在 Azure 门户中查找 Cosmos DB 端口）\r \r     ```javascript\r     const port = 10255;\r     ```\r \r 2. 在 environment.js 中，将 `accountName` 的值更改为在[步骤 4](tutorial-develop-mongodb-nodejs-part4.md) 中创建的 Azure Cosmos DB 帐户的名称。 \r \r 3. 在 Terminal 窗口中使用以下 CLI 命令，检索 Azure Cosmos DB 帐户的主密钥： \r \r     ```azure-cli-interactive\r     az cosmosdb list-keys --name <cosmosdb-name> -g myResourceGroup\r     ```    \r \r     * `<cosmosdb-name>` 是在[步骤 4](tutorial-develop-mongodb-nodejs-part4.md) 中创建的 Azure Cosmos DB 帐户的名称。\r \r 4. 将主密钥作为 `key` 值复制到 environment.js 文件中。\r \r     现在，应用已经有了连接到 Azure Cosmos DB 所需的全部信息。 也可在门户中检索该信息。 有关详细信息，请参阅[获取 MongoDB 连接字符串进行自定义](connect-mongodb-account.md#GetCustomConnection)。 门户中的用户名相当于 environments.js 中的 dbName。 \r \r ## <a name=\"create-a-hero-model\"></a>创建 Hero 模型\r \r 1.  在“资源管理器”窗格的 server 文件夹中，创建 hero.model.js 文件。\r \r 2. 将以下代码复制到 hero.model.js 中。 此代码：\r    * 需要 Mongoose。\r    * 使用 ID、name 和 saying 创建新架构。\r    * 使用该架构创建模型。\r    * 导出模型。 \r    * 将集合命名为 Heroes 而不是 Heros（根据 Mongoose 复数形式命名规则，后者为集合的默认名称）。\r \r    ```javascript\r    const mongoose = require('mongoose');\r \r    const Schema = mongoose.Schema;\r \r    const heroSchema = new Schema(\r      {\r        id: { type: Number, required: true, unique: true },\r        name: String,\r        saying: String\r      },\r      {\r        collection: 'Heroes'\r      }\r    );\r \r    const Hero = mongoose.model('Hero', heroSchema);\r \r    module.exports = Hero;\r    ```\r \r ## <a name=\"create-a-hero-service\"></a>创建 Hero 服务\r \r 1.  在“资源管理器”窗格的 server 文件夹中，创建 hero.service.js 文件。\r \r 2. 将以下代码复制到 hero.service.js 中。 此代码：\r    * 获取刚创建的模型\r    * 连接到数据库\r    * 创建 docquery 变量，以便使用 hero.find 方法定义一个返回所有 hero 的查询。\r    * 通过 docquery.exec 运行查询，使用约定来获取其中的响应状态为 200 的所有 hero 的列表。 \r    * 如果状态为 500，则发回错误消息\r    * 由于使用的是模块，因此可以获取 hero。 \r \r    ```javascript\r    const Hero = require('./hero.model');\r \r    require('./mongo').connect();\r \r    function getHeroes() {\r      const docquery = Hero.find({});\r      docquery\r        .exec()\r        .then(heroes => {\r          res.status(200).json(heroes);\r        })\r        .catch(error => {\r          res.status(500).send(error);\r          return;\r        });\r    }\r \r    module.exports = {\r      getHeroes\r    };\r    ```\r \r ## <a name=\"add-the-hero-service-to-routesjs\"></a>将 hero 服务添加到 routes.js\r \r 1. 在 Visual Studio Code 中，注释掉 routes.js 中用于发送示例 hero 数据的 `res.send` 函数，然后添加一行代码，改为调用 `heroService.getHeroes` 函数。\r \r     ```javascript\r     router.get('/heroes', (req, res) => {\r       heroService.getHeroes(req, res);\r     //  res.send(200, [\r     //      {\"id\": 10, \"name\": \"Starlord\", \"saying\": \"oh yeah\"}\r     //  ])\r     });\r     ```\r \r 2. 在 routes.js 中，需要 hero 服务：\r \r     ```javascript\r     const heroService = require('./hero.service'); \r     ```\r \r 3. 在 hero.service.js 中更新使用 `req` 和 `res` 参数的 getHeroes 函数，如下所示：\r \r     ```javascript\r     function getHeroes(req, res) {\r     ```\r \r     请花点时间查看并演练此处的调用链。 首先看看 `index.js`，此文件用于设置节点服务器。注意，此文件会设置和定义路由。 然后，routes.js 文件会与 hero 服务通信，要求该服务获取 getHeroes 之类的函数，并传递请求和响应。 在这里，hero.service.js 会获取模型并连接到 Mongo，然后在用户调用时执行 getHeroes，并返回响应 200。 然后通过链退出。 \r \r ## <a name=\"run-the-app\"></a>运行应用程序\r \r 1. 现在，请再次运行该应用。 在 Visual Studio Code 中，保存所有更改，单击左侧的“调试”按钮 ![Visual Studio Code 中的“调试”图标](./media/tutorial-develop-mongodb-nodejs-part5/debug-button.png)，然后单击“开始调试”按钮 ![Visual Studio Code 中的“开始调试”图标](./media/tutorial-develop-mongodb-nodejs-part5/start-debugging-button.png)。\r \r 3. 现在请转到浏览器，打开开发人员工具和“网络”选项卡，然后导航到 http://localhost:3000 ，其中有我们的应用程序。\r \r     ![Azure 门户中的新 Azure Cosmos DB 帐户](./media/tutorial-develop-mongodb-nodejs-part5/azure-cosmos-db-heroes-app.png)\r \r    尚无 hero 存储在应用中，但我们会在本教程的下一步添加放置、推送和删除功能，以便通过与 Azure Cosmos DB 数据库的 Mongoose 连接从 UI 中添加、更新和删除 hero。 \r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 在本教程的此部分，你已完成以下操作：\r \r > [!div class=\"checklist\"]\r > * 使用 Mongoose API 将 heroes 应用连接到 Azure Cosmos DB \r > * 向应用添加获取 hero 功能\r \r 可以转到本教程的下一部分，了解如何向应用添加 Post、Put 和 Delete 函数。\r \r > [!div class=\"nextstepaction\"]\r > [向应用添加 Post、Put 和 Delete 函数](tutorial-develop-mongodb-nodejs-part6.md)\r \r <!-- Update_Description: update meta properties, wording update -->"}