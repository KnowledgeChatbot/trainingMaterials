{"Title":"Azure AD Java Web 应用入门","Description":"生成可让用户使用工作或学校帐户登录的 Java Web 应用。","Content":"\r # 通过 Azure AD 实现 Java Web 应用登录和注销\r [!INCLUDE [active-directory-devguide](../../../includes/active-directory-devguide.md)]\r \r 使用 Azure Active Directory (Azure AD)，只需通过编写几行代码来提供单一登录和注销，就能简单外包 Web 应用的标识管理。可通过使用社区驱动的、用于 Java 的 Azure Active Directory 身份验证库 (ADAL4J) 的 Microsoft 实现，将用户登入和登出 Java Web 应用。\r \r 本文演示如何使用 ADAL4J 执行以下操作：\r \r - 使用 Azure AD 作为标识提供者将用户登录到 Web 应用。\r - 显示某些用户信息。\r - 将用户从应用中注销。\r \r ## 准备工作\r \r - 下载[应用框架](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/skeleton.zip)或下载[已完成的示例](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect\\\\/archive/complete.zip)。\r - 还需要一个用于注册应用的 Azure AD 租户。如果还没有 Azure AD 租户，请[了解如何获取租户](./active-directory-howto-tenant.md)。\r \r 准备好后，请按照以下 9 个部分中的步骤操作。\r \r ## 步骤 1：向 Azure AD 注册新应用\r 若要设置应用以便对用户进行身份验证，请先通过执行以下操作在租户中对其进行注册：\r \r - 登录到 Azure 管理门户。\r - 在左侧的导航栏中单击“Active Directory”。\r - 选择你要在其中注册应用程序的租户。\r - 单击“应用程序”选项卡，然后在底部抽屉中单击“添加”。\r - 根据提示创建一个新的 **Web 应用程序和/或 WebAPI**。\r     - 应用程序的**名称**向最终用户描述你的应用程序\r     - “登录 URL”是应用的基本 URL。框架的默认值为 `http://localhost:8080/adal4jsample/`。\r     - “应用 ID URI”是应用程序的唯一标识符。约定是使用 `https://<tenant-domain>/<app-name>`，例如 `http://localhost:8080/adal4jsample/`\r - 完成注册后，AAD 将为应用分配唯一的客户端标识符。在后面的部分中将会用到此值，因此，请从“配置”选项卡复制此值。\r \r 进入应用门户后，为应用程序创建一个**密钥**并复制该密钥。稍后将需要它。\r \r ## 步骤2：使用 Maven 将应用设置为使用 ADAL4J 和先决条件\r 在此步骤中，将 ADAL4J 配置为使用 OpenID Connect 身份验证协议。使用 ADAL4J 发出登录和注销请求、管理用户会话以及获取用户信息等。\r \r 在项目的根目录中，打开/创建 `pom.xml`，找到 `// TODO: provide dependencies for Maven` 并替换为以下代码：\r \r ```Java\r     <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r         <modelVersion>4.0.0</modelVersion>\r         <groupId>com.microsoft.azure</groupId>\r         <artifactId>adal4jsample</artifactId>\r         <packaging>war</packaging>\r         <version>0.0.1-SNAPSHOT</version>\r         <name>adal4jsample</name>\r         <url>http://maven.apache.org</url>\r         <properties>\r             <spring.version>3.0.5.RELEASE</spring.version>\r         </properties>\r \r         <dependencies>\r             <dependency>\r                 <groupId>com.microsoft.azure</groupId>\r                 <artifactId>adal4j</artifactId>\r                 <version>1.1.1</version>\r             </dependency>\r             <dependency>\r                 <groupId>com.nimbusds</groupId>\r                 <artifactId>oauth2-oidc-sdk</artifactId>\r                 <version>4.5</version>\r             </dependency>\r             <dependency>\r                 <groupId>org.json</groupId>\r                 <artifactId>json</artifactId>\r                 <version>20090211</version>\r             </dependency>\r             <dependency>\r                 <groupId>javax.servlet</groupId>\r                 <artifactId>javax.servlet-api</artifactId>\r                 <version>3.0.1</version>\r                 <scope>provided</scope>\r             </dependency>\r             <dependency>\r                 <groupId>org.slf4j</groupId>\r                 <artifactId>slf4j-log4j12</artifactId>\r                 <version>1.7.5</version>\r             </dependency>\r             <!-- Spring 3 dependencies -->\r             <dependency>\r                 <groupId>org.springframework</groupId>\r                 <artifactId>spring-core</artifactId>\r                 <version>${spring.version}</version>\r             </dependency>\r             <dependency>\r                 <groupId>org.springframework</groupId>\r                 <artifactId>spring-web</artifactId>\r                 <version>${spring.version}</version>\r             </dependency>\r             <dependency>\r                 <groupId>org.springframework</groupId>\r                 <artifactId>spring-webmvc</artifactId>\r                 <version>${spring.version}</version>\r             </dependency>\r         </dependencies>\r \r         <build>\r             <finalName>sample-for-adal4j</finalName>\r             <plugins>\r                 <plugin>\r                     <groupId>org.apache.maven.plugins</groupId>\r                     <artifactId>maven-compiler-plugin</artifactId>\r                     <configuration>\r                         <source>1.7</source>\r                         <target>1.7</target>\r                         <encoding>UTF-8</encoding>\r                     </configuration>\r                 </plugin>\r                 <plugin>\r                     <groupId>org.apache.maven.plugins</groupId>\r                     <artifactId>maven-war-plugin</artifactId>\r                     <version>2.4</version>\r                     <configuration>\r                         <warName>${project.artifactId}</warName>\r                         <source>${project.basedir}\\src</source>\r                         <target>${maven.compiler.target}</target>\r                         <encoding>utf-8</encoding>\r                     </configuration>\r                 </plugin>\r                 <plugin>\r                     <groupId>org.apache.maven.plugins</groupId>\r                     <artifactId>maven-dependency-plugin</artifactId>\r                     <executions>\r                         <execution>\r                             <id>install</id>\r                             <phase>install</phase>\r                             <goals>\r                                 <goal>sources</goal>\r                             </goals>\r                         </execution>\r                     </executions>\r                 </plugin>\r                 <plugin>\r                     <groupId>org.apache.maven.plugins</groupId>\r                     <artifactId>maven-resources-plugin</artifactId>\r                     <version>2.5</version>\r                     <configuration>\r                         <encoding>UTF-8</encoding>\r                     </configuration>\r                 </plugin>\r             </plugins>\r         </build>\r \r     </project>\r ```\r \r ## 步骤 3：创建 Java Web 应用文件 (WEB-INF)\r 在此步骤中，将 Java Web 应用配置为使用 OpenID Connect 身份验证协议。使用 ADAL4J 发出登录和注销请求、管理用户会话以及获取用户信息等。\r \r 1. 打开位于 \\\\webapp\\\\WEB-INF\\\\ 下的 web.xml 文件，然后在 XML 中输入应用配置值。XML 文件应包含以下代码：\r \r     ```xml\r     <?xml version=\"1.0\"?>\r     <web-app id=\"WebApp_ID\" version=\"2.4\"\r         xmlns=\"http://java.sun.com/xml/ns/j2ee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r         xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \r         http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\r         <display-name>Archetype Created Web Application</display-name>\r         <context-param>\r             <param-name>authority</param-name>\r             <param-value>https://login.chinacloudapi.cn/</param-value>\r         </context-param>\r         <context-param>\r             <param-name>tenant</param-name>\r             <param-value>YOUR_TENANT_NAME</param-value>\r         </context-param>\r \r         <filter>\r             <filter-name>BasicFilter</filter-name>\r             <filter-class>com.microsoft.aad.adal4jsample.BasicFilter</filter-class>\r             <init-param>\r                 <param-name>client_id</param-name>\r                 <param-value>YOUR_CLIENT_ID</param-value>\r             </init-param>\r             <init-param>\r                 <param-name>secret_key</param-name>\r                 <param-value>YOUR_CLIENT_SECRET</param-value>\r             </init-param>\r         </filter>\r         <filter-mapping>\r             <filter-name>BasicFilter</filter-name>\r             <url-pattern>/secure/*</url-pattern>\r         </filter-mapping>\r \r         <servlet>\r             <servlet-name>mvc-dispatcher</servlet-name>\r             <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r             <load-on-startup>1</load-on-startup>\r         </servlet>\r \r         <servlet-mapping>\r             <servlet-name>mvc-dispatcher</servlet-name>\r             <url-pattern>/</url-pattern>\r         </servlet-mapping>\r \r         <context-param>\r             <param-name>contextConfigLocation</param-name>\r             <param-value>/WEB-INF/mvc-dispatcher-servlet.xml</param-value>\r         </context-param>\r \r         <listener>\r             <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r         </listener>\r     </web-app>\r     ```\r \r     -    YOUR\\_CLIENT\\_ID 是在注册门户中为应用分配的**应用程序 ID**。\r     -    YOUR\\_CLIENT\\_SECRET 是在门户中创建的**密钥**。\r     -    YOUR\\_TENANT\\_NAME 是应用的**租户名称**，例如“contoso.partner.onmschina.cn”\r \r  正如在 XML 文件中所见，其中正在编写名为 mvc-dispatcher 的 JavaServer Pages (JSP) 或 Java Servlet Web 应用，它会在用户每次访问 /secure URL 时使用 BasicFilter。在相同的代码中，使用 /secure 作为受保护内容的位置，并强制向 Azure AD 进行身份验证。\r \r 2. 在 \\\\webapp\\\\WEB-INF\\\\ 下创建 mvc-dispatcher-servlet.xml 文件，然后输入以下代码：\r \r     ```xml\r     <beans xmlns=\"http://www.springframework.org/schema/beans\"\r         xmlns:context=\"http://www.springframework.org/schema/context\"\r         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r         xsi:schemaLocation=\"\r             http://www.springframework.org/schema/beans     \r             http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r             http://www.springframework.org/schema/context \r             http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\r \r         <context:component-scan base-package=\"com.microsoft.aad.adal4jsample\" />\r \r         <bean\r             class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r             <property name=\"prefix\">\r                 <value>/</value>\r             </property>\r             <property name=\"suffix\">\r                 <value>.jsp</value>\r             </property>\r         </bean>\r \r     </beans>\r     ```\r \r  此代码让 Web 应用使用 Spring，并指示用于查找 JSP 文件（在下一部分中编写）的位置。\r \r ## 步骤 4：创建 JSP 视图文件（适用于 BasicFilter MVC）\r 在 WEB-INF 中设置 Web 应用这一操作已完成一半。接下来，创建用于 BasicFilter 模型视图控制器 (MVC) 的 JSP 文件，Web 应用会执行该文件。之前曾提示过在配置期间创建文件。\r \r 之前，在 XML 配置文件中，曾告知 Java 有一个用于加载 JSP 文件的 `/` 资源，还有一个会通过筛选器的名为 BasicFilter 的 `/secure` 资源。\r \r 若要创建 JSP 文件，请执行以下操作：\r \r 1. 创建 index.jsp 文件（位于 \\\\webapp 下），然后粘贴以下代码：\r \r     ```jsp\r     <html>\r     <body>\r         <h2>Hello World!</h2>\r         <ul>\r         <li><a href=\"secure/aad\">Secure Page</a></li>\r         </ul>\r     </body>\r     </html>\r     ```\r \r     此代码仅重定向到筛选器保护的安全页。\r \r 2. 在同一个目录中创建 error.jsp 文件，用于捕获可能发生的任何错误：\r \r     ```jsp\r     <html>\r     <body>\r         <h2>ERROR PAGE!</h2>\r         <p>\r             Exception -\r             <%=request.getAttribute(\"error\")%></p>\r         <ul>\r             <li><a href=\"<%=request.getContextPath()%>/index.jsp\">Go Home</a></li>\r         </ul>\r     </body>\r     </html>\r     ```\r \r 3. 若要让其成为安全网页，请在 \\\\webapp 下创建名为 \\\\secure 的文件夹，以使目录变为 \\\\webapp\\\\secure。\r 4. 在 \\\\webapp\\\\secure 目录中，创建 aad.jsp 文件，然后粘贴以下代码：\r \r     ```jsp\r     <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r     <html>\r     <head>\r     <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r     <title>AAD Secure Page</title>\r     </head>\r     <body>\r \r         <h1>Directory - Users List</h1>\r         <p>${users}</p>\r \r         <ul>\r             <li><a href=\"<%=request.getContextPath()%>/secure/aad?cc=1\">Get\r                     new Access Token via Client Credentials</a></li>\r         </ul>\r         <ul>\r             <li><a href=\"<%=request.getContextPath()%>/secure/aad?refresh=1\">Get\r                     new Access Token via Refresh Token</a></li>\r         </ul>\r         <ul>\r             <li><a href=\"<%=request.getContextPath()%>/index.jsp\">Go Home</a></li>\r         </ul>\r     </body>\r     </html>\r     ```\r \r     此页会重定向到特定请求，BasicFilter servlet 使用 ADAJ4J 读取并执行这些请求。\r \r 现在需要设置 Java 文件，以便 servlet 可以执行其工作。\r \r ## 步骤 5：创建一些 Java 帮助程序文件（适用于 BasicFilter MVC）\r 在此步骤中，我们的目标是创建 Java 文件，用于：\r \r - 允许用户登录和注销。\r - 获取有关用户的一些数据。\r \r     > [!NOTE]\r     > 若要获取用户数据，请使用 Azure AD 的图形 API。图形 API 是安全的 Web 服务，可用于检索有关组织（包括个人用户）的数据。这种方法相较在令牌中预填充敏感数据更好，因为它可确保：\r     > * 授权给请求数据的用户。\r     > * 任何碰巧（例如，从越狱手机或桌面上的 Web 浏览器缓存中）持有令牌的用户都无法获取有关用户或组织的重要详细信息。\r \r 编写一些用于此工作的 Java 文件：\r \r 1. 在名为“adal4jsample”的根目录中创建一个文件夹用于存储所有 Java 文件。\r \r     本示例中，将在 Java 文件中使用命名空间 com.microsoft.aad.adal4jsample。为此，大多数 IDE 会创建嵌套文件夹结构（例如 /com/microsoft/aad/adal4jsample）。可执行此操作（但并非必要）。\r \r 2. 在此文件夹中，创建名为 JSONHelper.java 的文件，该文件将用于帮助分析来自令牌的 JSON 数据。若要创建该文件，请粘贴以下代码：\r \r     ```Java\r     package com.microsoft.aad.adal4jsample;\r \r     import java.lang.reflect.Field;\r     import java.util.Arrays;\r     import java.util.Enumeration;\r     import java.util.List;\r \r     import javax.servlet.http.HttpServletRequest;\r \r     import org.apache.commons.lang3.text.WordUtils;\r     import org.apache.log4j.Logger;\r     import org.json.JSONArray;\r     import org.json.JSONException;\r     import org.json.JSONObject;\r \r     /**\r      * This class provides the methods to parse JSON Data from a JSON Formatted\r      * String.\r      * \r      * @author Azure Active Directory Contributor\r      * \r      */\r     public class JSONHelper {\r \r         private static Logger logger = Logger.getLogger(JSONHelper.class);\r \r         JSONHelper() {\r             // PropertyConfigurator.configure(\"log4j.properties\");\r         }\r \r         /**\r          * This method parses an JSON Array out of a collection of JSON Objects\r          * within a string.\r          * \r          * @param jSonData\r          *            The JSON String that holds the collection.\r          * @return An JSON Array that would contains all the collection object.\r          * @throws Exception\r          */\r         public static JSONArray fetchDirectoryObjectJSONArray(JSONObject jsonObject) throws Exception {\r             JSONArray jsonArray = new JSONArray();\r             jsonArray = jsonObject.optJSONObject(\"responseMsg\").optJSONArray(\"value\");\r             return jsonArray;\r         }\r \r         /**\r          * This method parses an JSON Object out of a collection of JSON Objects\r          * within a string\r          * \r          * @param jsonObject\r          * @return An JSON Object that would contains the DirectoryObject.\r          * @throws Exception\r          */\r         public static JSONObject fetchDirectoryObjectJSONObject(JSONObject jsonObject) throws Exception {\r             JSONObject jObj = new JSONObject();\r             jObj = jsonObject.optJSONObject(\"responseMsg\");\r             return jObj;\r         }\r \r         /**\r          * This method parses the skip token from a json formatted string.\r          * \r          * @param jsonData\r          *            The JSON Formatted String.\r          * @return The skipToken.\r          * @throws Exception\r          */\r         public static String fetchNextSkiptoken(JSONObject jsonObject) throws Exception {\r             String skipToken = \"\";\r             // Parse the skip token out of the string.\r             skipToken = jsonObject.optJSONObject(\"responseMsg\").optString(\"odata.nextLink\");\r \r             if (!skipToken.equalsIgnoreCase(\"\")) {\r                 // Remove the unnecessary prefix from the skip token.\r                 int index = skipToken.indexOf(\"$skiptoken=\") + (new String(\"$skiptoken=\")).length();\r                 skipToken = skipToken.substring(index);\r             }\r             return skipToken;\r         }\r \r         /**\r          * @param jsonObject\r          * @return\r          * @throws Exception\r          */\r         public static String fetchDeltaLink(JSONObject jsonObject) throws Exception {\r             String deltaLink = \"\";\r             // Parse the skip token out of the string.\r             deltaLink = jsonObject.optJSONObject(\"responseMsg\").optString(\"aad.deltaLink\");\r             if (deltaLink == null || deltaLink.length() == 0) {\r                 deltaLink = jsonObject.optJSONObject(\"responseMsg\").optString(\"aad.nextLink\");\r                 logger.info(\"deltaLink empty, nextLink ->\" + deltaLink);\r \r             }\r             if (!deltaLink.equalsIgnoreCase(\"\")) {\r                 // Remove the unnecessary prefix from the skip token.\r                 int index = deltaLink.indexOf(\"deltaLink=\") + (new String(\"deltaLink=\")).length();\r                 deltaLink = deltaLink.substring(index);\r             }\r             return deltaLink;\r         }\r \r         /**\r          * This method would create a string consisting of a JSON document with all\r          * the necessary elements set from the HttpServletRequest request.\r          * \r          * @param request\r          *            The HttpServletRequest\r          * @return the string containing the JSON document.\r          * @throws Exception\r          *             If there is any error processing the request.\r          */\r         public static String createJSONString(HttpServletRequest request, String controller) throws Exception {\r             JSONObject obj = new JSONObject();\r             try {\r                 Field[] allFields = Class.forName(\r                         \"com.microsoft.windowsazure.activedirectory.sdk.graph.models.\" + controller).getDeclaredFields();\r                 String[] allFieldStr = new String[allFields.length];\r                 for (int i = 0; i < allFields.length; i++) {\r                     allFieldStr[i] = allFields[i].getName();\r                 }\r                 List<String> allFieldStringList = Arrays.asList(allFieldStr);\r                 Enumeration<String> fields = request.getParameterNames();\r \r                 while (fields.hasMoreElements()) {\r \r                     String fieldName = fields.nextElement();\r                     String param = request.getParameter(fieldName);\r                     if (allFieldStringList.contains(fieldName)) {\r                         if (param == null || param.length() == 0) {\r                             if (!fieldName.equalsIgnoreCase(\"password\")) {\r                                 obj.put(fieldName, JSONObject.NULL);\r                             }\r                         } else {\r                             if (fieldName.equalsIgnoreCase(\"password\")) {\r                                 obj.put(\"passwordProfile\", new JSONObject(\"{\"password\": \"\" + param + \"\"}\"));\r                             } else {\r                                 obj.put(fieldName, param);\r \r                             }\r                         }\r                     }\r                 }\r             } catch (JSONException e) {\r                 e.printStackTrace();\r             } catch (SecurityException e) {\r                 e.printStackTrace();\r             } catch (ClassNotFoundException e) {\r                 e.printStackTrace();\r             }\r             return obj.toString();\r         }\r \r         /**\r          * \r          * @param key\r          * @param value\r          * @return string format of this JSON obje\r          * @throws Exception\r          */\r         public static String createJSONString(String key, String value) throws Exception {\r \r             JSONObject obj = new JSONObject();\r             try {\r                 obj.put(key, value);\r             } catch (JSONException e) {\r                 e.printStackTrace();\r             }\r \r             return obj.toString();\r         }\r \r         /**\r          * This is a generic method that copies the simple attribute values from an\r          * argument jsonObject to an argument generic object.\r          * \r          * @param jsonObject\r          *            The jsonObject from where the attributes are to be copied.\r          * @param destObject\r          *            The object where the attributes should be copied into.\r          * @throws Exception\r          *             Throws a Exception when the operation are unsuccessful.\r          */\r         public static <T> void convertJSONObjectToDirectoryObject(JSONObject jsonObject, T destObject) throws Exception {\r \r             // Get the list of all the field names.\r             Field[] fieldList = destObject.getClass().getDeclaredFields();\r \r             // For all the declared field.\r             for (int i = 0; i < fieldList.length; i++) {\r                 // If the field is of type String, that is\r                 // if it is a simple attribute.\r                 if (fieldList[i].getType().equals(String.class)) {\r                     // Invoke the corresponding set method of the destObject using\r                     // the argument taken from the jsonObject.\r                     destObject\r                             .getClass()\r                             .getMethod(String.format(\"set%s\", WordUtils.capitalize(fieldList[i].getName())),\r                                     new Class[] { String.class })\r                             .invoke(destObject, new Object[] { jsonObject.optString(fieldList[i].getName()) });\r                 }\r             }\r         }\r \r         public static JSONArray joinJSONArrays(JSONArray a, JSONArray b) {\r             JSONArray comb = new JSONArray();\r             for (int i = 0; i < a.length(); i++) {\r                 comb.put(a.optJSONObject(i));\r             }\r             for (int i = 0; i < b.length(); i++) {\r                 comb.put(b.optJSONObject(i));\r             }\r             return comb;\r         }\r \r     }\r     ```\r \r 3. 创建名为 HttpClientHelper.java 的文件，该文件将用于帮助分析来自 Azure AD 终结点的 HTTP 数据。若要创建该文件，请粘贴以下代码：\r \r     ```Java\r     package com.microsoft.aad.adal4jsample;\r \r     import java.io.BufferedReader;\r     import java.io.ByteArrayOutputStream;\r     import java.io.IOException;\r     import java.io.InputStream;\r     import java.io.InputStreamReader;\r     import java.io.OutputStreamWriter;\r     import java.net.HttpURLConnection;\r \r     import org.json.JSONException;\r     import org.json.JSONObject;\r \r     /**\r      * This is Helper class for all RestClient class.\r      * \r      * @author Azure Active Directory Contributor\r      * \r      */\r     public class HttpClientHelper {\r \r         public HttpClientHelper() {\r             super();\r         }\r \r         public static String getResponseStringFromConn(HttpURLConnection conn, boolean isSuccess) throws IOException {\r \r             BufferedReader reader = null;\r             if (isSuccess) {\r                 reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\r             } else {\r                 reader = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\r             }\r             StringBuffer stringBuffer = new StringBuffer();\r             String line = \"\";\r             while ((line = reader.readLine()) != null) {\r                 stringBuffer.append(line);\r             }\r \r             return stringBuffer.toString();\r         }\r \r         public static String getResponseStringFromConn(HttpURLConnection conn, String payLoad) throws IOException {\r \r             // Send the http message payload to the server.\r             if (payLoad != null) {\r                 conn.setDoOutput(true);\r                 OutputStreamWriter osw = new OutputStreamWriter(conn.getOutputStream());\r                 osw.write(payLoad);\r                 osw.flush();\r                 osw.close();\r             }\r \r             // Get the message response from the server.\r             BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\r             String line = \"\";\r             StringBuffer stringBuffer = new StringBuffer();\r             while ((line = br.readLine()) != null) {\r                 stringBuffer.append(line);\r             }\r \r             br.close();\r \r             return stringBuffer.toString();\r         }\r \r         public static byte[] getByteaArrayFromConn(HttpURLConnection conn, boolean isSuccess) throws IOException {\r \r             InputStream is = conn.getInputStream();\r             ByteArrayOutputStream baos = new ByteArrayOutputStream();\r             byte[] buff = new byte[1024];\r             int bytesRead = 0;\r \r             while ((bytesRead = is.read(buff, 0, buff.length)) != -1) {\r                 baos.write(buff, 0, bytesRead);\r             }\r \r             byte[] bytes = baos.toByteArray();\r             baos.close();\r             return bytes;\r         }\r \r         /**\r          * for bad response, whose responseCode is not 200 level\r          * \r          * @param responseCode\r          * @param errorCode\r          * @param errorMsg\r          * @return\r          * @throws JSONException\r          */\r         public static JSONObject processResponse(int responseCode, String errorCode, String errorMsg) throws JSONException {\r             JSONObject response = new JSONObject();\r             response.put(\"responseCode\", responseCode);\r             response.put(\"errorCode\", errorCode);\r             response.put(\"errorMsg\", errorMsg);\r \r             return response;\r         }\r \r         /**\r          * for bad response, whose responseCode is not 200 level\r          * \r          * @param responseCode\r          * @param errorCode\r          * @param errorMsg\r          * @return\r          * @throws JSONException\r          */\r         public static JSONObject processGoodRespStr(int responseCode, String goodRespStr) throws JSONException {\r             JSONObject response = new JSONObject();\r             response.put(\"responseCode\", responseCode);\r             if (goodRespStr.equalsIgnoreCase(\"\")) {\r                 response.put(\"responseMsg\", \"\");\r             } else {\r                 response.put(\"responseMsg\", new JSONObject(goodRespStr));\r             }\r \r             return response;\r         }\r \r         /**\r          * for good response\r          * \r          * @param responseCode\r          * @param responseMsg\r          * @return\r          * @throws JSONException\r          */\r         public static JSONObject processBadRespStr(int responseCode, String responseMsg) throws JSONException {\r \r             JSONObject response = new JSONObject();\r             response.put(\"responseCode\", responseCode);\r             if (responseMsg.equalsIgnoreCase(\"\")) { // good response is empty string\r                 response.put(\"responseMsg\", \"\");\r             } else { // bad response is json string\r                 JSONObject errorObject = new JSONObject(responseMsg).optJSONObject(\"odata.error\");\r \r                 String errorCode = errorObject.optString(\"code\");\r                 String errorMsg = errorObject.optJSONObject(\"message\").optString(\"value\");\r                 response.put(\"responseCode\", responseCode);\r                 response.put(\"errorCode\", errorCode);\r                 response.put(\"errorMsg\", errorMsg);\r             }\r \r             return response;\r         }\r \r     }\r     ```\r \r ## 步骤 6：创建 Java 图形 API 模型文件（适用于 BasicFilter MVC）\r 如前所述，使用图形 API 获取有关登录用户的数据。为了让此过程用于执行，请同时创建一个表示目录对象的文件以及一个表示用户的文件，如此便可以使用 Java 的 OO 模式。\r \r 1. 创建名为 DirectoryObject.java 的文件，该文件将用于存储有关任何目录对象的基本数据。可在以后将此文件用于可能执行的任何其他图形查询。若要创建该文件，请粘贴以下代码：\r \r     ```Java\r     package com.microsoft.aad.adal4jsample;\r \r     /**\r      * @author Azure Active Directory Contributor\r      *\r      */\r     public abstract class DirectoryObject {\r \r         public DirectoryObject() {\r             super();\r         }\r \r         /**\r          * \r          * @return\r          */\r         public abstract String getObjectId();\r \r         /**\r          * @param objectId\r          */\r         public abstract void setObjectId(String objectId);\r \r         /**\r          * \r          * @return\r          */\r         public abstract String getObjectType();\r \r         /**\r          * \r          * @param objectType\r          */\r         public abstract void setObjectType(String objectType);\r \r         /**\r          * \r          * @return\r          */\r         public abstract String getDisplayName();\r \r         /**\r          * \r          * @param displayName\r          */\r         public abstract void setDisplayName(String displayName);\r \r     }\r     ```\r \r 2. 创建名为 User.java 的文件，该文件将用于存储有关目录中任何用户的基本数据。这些是用于目录数据的基本 getter 和 setter 方法，可粘贴以下代码：\r \r     ```Java\r     package com.microsoft.aad.adal4jsample;\r \r     import java.security.acl.Group;\r     import java.util.ArrayList;\r \r     import javax.xml.bind.annotation.XmlRootElement;\r \r     import org.json.JSONObject;\r \r     /**\r      *  The User Class holds together all the members of a WAAD User entity and all the access methods and set methods\r      *  @author Azure Active Directory Contributor\r      */\r     @XmlRootElement\r     public class User extends DirectoryObject{\r \r         // The following are the individual private members of a User object that holds\r         // a particular simple attribute of an User object.\r         protected String objectId;\r         protected String objectType;\r         protected String accountEnabled;\r         protected String city;\r         protected String country;\r         protected String department;\r         protected String dirSyncEnabled;\r         protected String displayName;\r         protected String facsimileTelephoneNumber;\r         protected String givenName;\r         protected String jobTitle;\r         protected String lastDirSyncTime;\r         protected String mail;\r         protected String mailNickname;\r         protected String mobile;\r         protected String password;\r         protected String passwordPolicies;\r         protected String physicalDeliveryOfficeName;\r         protected String postalCode;\r         protected String preferredLanguage;\r         protected String state;\r         protected String streetAddress;\r         protected String surname;\r         protected String telephoneNumber;\r         protected String usageLocation;\r         protected String userPrincipalName;\r         protected boolean isDeleted;  // this will move to dto\r \r         /**\r          * below 4 properties are for future use\r          */\r         // managerDisplayname of this user\r         protected String managerDisplayname;\r \r         // The directReports holds a list of directReports\r         private ArrayList<User> directReports;\r \r         // The groups holds a list of group entity this user belongs to. \r         private ArrayList<Group> groups;\r \r         // The roles holds a list of role entity this user belongs to. \r         private ArrayList<Group> roles;\r \r         /**\r          * The constructor for the User class. Initializes the dynamic lists and managerDisplayname variables.\r          */\r         public User(){\r             directReports = null;\r             groups = new ArrayList<Group>();\r             roles = new ArrayList<Group>();\r             managerDisplayname = null;\r         }\r     //\t\r     //\tpublic User(String displayName, String objectId){\r     //\t\tsetDisplayName(displayName);\r     //\t\tsetObjectId(objectId);\r     //\t}\r     //\t\r     //\tpublic User(String displayName, String objectId, String userPrincipalName, String accountEnabled){\r     //\t\tsetDisplayName(displayName);\r     //\t\tsetObjectId(objectId);\r     //\t\tsetUserPrincipalName(userPrincipalName);\r     //\t\tsetAccountEnabled(accountEnabled);\r     //\t}\r     //\t\r \r         /**\r          * @return The objectId of this user.\r          */\r         public String getObjectId() {\r             return objectId;\r         }\r \r         /**\r          * @param objectId The objectId to set to this User object.\r          */\r         public void setObjectId(String objectId) {\r             this.objectId = objectId;\r         }\r \r         /**\r          * @return The objectType of this User.\r          */\r         public String getObjectType() {\r             return objectType;\r         }\r \r         /**\r          * @param objectType The objectType to set to this User object.\r          */\r         public void setObjectType(String objectType) {\r             this.objectType = objectType;\r         }\r \r         /**\r          * @return The userPrincipalName of this User.\r          */\r         public String getUserPrincipalName() {\r             return userPrincipalName;\r         }\r \r         /**\r          * @param userPrincipalName The userPrincipalName to set to this User object.\r          */\r         public void setUserPrincipalName(String userPrincipalName) {\r             this.userPrincipalName = userPrincipalName;\r         }\r \r         /**\r          * @return The usageLocation of this User.\r          */\r         public String getUsageLocation() {\r             return usageLocation;\r         }\r \r         /**\r          * @param usageLocation The usageLocation to set to this User object.\r          */\r         public void setUsageLocation(String usageLocation) {\r             this.usageLocation = usageLocation;\r         }\r \r         /**\r          * @return The telephoneNumber of this User.\r          */\r         public String getTelephoneNumber() {\r             return telephoneNumber;\r         }\r \r         /**\r          * @param telephoneNumber The telephoneNumber to set to this User object.\r          */\r         public void setTelephoneNumber(String telephoneNumber) {\r             this.telephoneNumber = telephoneNumber;\r         }\r \r         /**\r          * @return The surname of this User.\r          */\r         public String getSurname() {\r             return surname;\r         }\r \r         /**\r          * @param surname The surname to set to this User Object.\r          */\r         public void setSurname(String surname) {\r             this.surname = surname;\r         }\r \r         /**\r          * @return The streetAddress of this User.\r          */\r         public String getStreetAddress() {\r             return streetAddress;\r         }\r \r         /**\r          * @param streetAddress The streetAddress to set to this User.\r          */\r         public void setStreetAddress(String streetAddress) {\r             this.streetAddress = streetAddress;\r         }\r \r         /**\r          * @return The state of this User.\r          */\r         public String getState() {\r             return state;\r         }\r \r         /**\r          * @param state The state to set to this User object.\r          */\r         public void setState(String state) {\r             this.state = state;\r         }\r \r         /**\r          * @return The preferredLanguage of this User.\r          */\r         public String getPreferredLanguage() {\r             return preferredLanguage;\r         }\r \r         /**\r          * @param preferredLanguage The preferredLanguage to set to this User.\r          */\r         public void setPreferredLanguage(String preferredLanguage) {\r             this.preferredLanguage = preferredLanguage;\r         }\r \r         /**\r          * @return The postalCode of this User.\r          */\r         public String getPostalCode() {\r             return postalCode;\r         }\r \r         /**\r          * @param postalCode The postalCode to set to this User.\r          */\r         public void setPostalCode(String postalCode) {\r             this.postalCode = postalCode;\r         }\r \r         /**\r          * @return The physicalDeliveryOfficeName of this User.\r          */\r         public String getPhysicalDeliveryOfficeName() {\r             return physicalDeliveryOfficeName;\r         }\r \r         /**\r          * @param physicalDeliveryOfficeName The physicalDeliveryOfficeName to set to this User Object.\r          */\r         public void setPhysicalDeliveryOfficeName(String physicalDeliveryOfficeName) {\r             this.physicalDeliveryOfficeName = physicalDeliveryOfficeName;\r         }\r \r         /**\r          * @return The passwordPolicies of this User.\r          */\r         public String getPasswordPolicies() {\r             return passwordPolicies;\r         }\r \r         /**\r          * @param passwordPolicies The passwordPolicies to set to this User object.\r          */\r         public void setPasswordPolicies(String passwordPolicies) {\r             this.passwordPolicies = passwordPolicies;\r         }\r \r         /**\r          * @return The mobile of this User.\r          */\r         public String getMobile() {\r             return mobile;\r         }\r \r         /**\r          * @param mobile The mobile to set to this User object.\r          */\r         public void setMobile(String mobile) {\r             this.mobile = mobile;\r         }\r \r         /**\r          * @return The Password of this User.\r          */\r         public String getPassword() {\r             return password;\r         }\r \r         /**\r          * @param password The mobile to set to this User object.\r          */\r         public void setPassword(String password) {\r             this.password = password;\r         }\r \r         /**\r          * @return The mail of this User.\r          */\r         public String getMail() {\r             return mail;\r         }\r \r         /**\r          * @param mail The mail to set to this User object.\r          */\r         public void setMail(String mail) {\r             this.mail = mail;\r         }\r \r         /**\r          * @return The MailNickname of this User.\r          */\r         public String getMailNickname() {\r             return mailNickname;\r         }\r \r         /**\r          * @param mail The MailNickname to set to this User object.\r          */\r         public void setMailNickname(String mailNickname) {\r             this.mailNickname = mailNickname;\r         }\r \r         /**\r          * @return The jobTitle of this User.\r          */\r         public String getJobTitle() {\r             return jobTitle;\r         }\r \r         /**\r          * @param jobTitle The jobTitle to set to this User Object.\r          */\r         public void setJobTitle(String jobTitle) {\r             this.jobTitle = jobTitle;\r         }\r \r         /**\r          * @return The givenName of this User.\r          */\r         public String getGivenName() {\r             return givenName;\r         }\r \r         /**\r          * @param givenName The givenName to set to this User.\r          */\r         public void setGivenName(String givenName) {\r             this.givenName = givenName;\r         }\r \r         /**\r          * @return The facsimileTelephoneNumber of this User.\r          */\r         public String getFacsimileTelephoneNumber() {\r             return facsimileTelephoneNumber;\r         }\r \r         /**\r          * @param facsimileTelephoneNumber The facsimileTelephoneNumber to set to this User Object.\r          */\r         public void setFacsimileTelephoneNumber(String facsimileTelephoneNumber) {\r             this.facsimileTelephoneNumber = facsimileTelephoneNumber;\r         }\r \r         /**\r          * @return The displayName of this User.\r          */\r         public String getDisplayName() {\r             return displayName;\r         }\r \r         /**\r          * @param displayName The displayName to set to this User Object.\r          */\r         public void setDisplayName(String displayName) {\r             this.displayName = displayName;\r         }\r \r         /**\r          * @return The dirSyncEnabled of this User.\r          */\r         public String getDirSyncEnabled() {\r             return dirSyncEnabled;\r         }\r \r         /**\r          * @param dirSyncEnabled The dirSyncEnabled to set to this User.\r          */\r         public void setDirSyncEnabled(String dirSyncEnabled) {\r             this.dirSyncEnabled = dirSyncEnabled;\r         }\r \r         /**\r          * @return The department of this User.\r          */\r         public String getDepartment() {\r             return department;\r         }\r \r         /**\r          * @param department The department to set to this User.\r          */\r         public void setDepartment(String department) {\r             this.department = department;\r         }\r \r         /**\r          * @return The lastDirSyncTime of this User.\r          */\r         public String getLastDirSyncTime() {\r             return lastDirSyncTime;\r         }\r \r         /**\r          * @param lastDirSyncTime The lastDirSyncTime to set to this User.\r          */\r         public void setLastDirSyncTime(String lastDirSyncTime) {\r             this.lastDirSyncTime = lastDirSyncTime;\r         }\r \r         /**\r          * @return The country of this User.\r          */\r         public String getCountry() {\r             return country;\r         }\r \r         /**\r          * @param country The country to set to this User.\r          */\r         public void setCountry(String country) {\r             this.country = country;\r         }\r \r         /**\r          * @return The city of this User.\r          */\r         public String getCity() {\r             return city;\r         }\r \r         /**\r          * @param city The city to set to this User.\r          */\r         public void setCity(String city) {\r             this.city = city;\r         }\r \r         /**\r          * @return The accountEnabled attribute of this User.\r          */\r         public String getAccountEnabled() {\r             return accountEnabled;\r         }\r \r         /**\r          * @param accountEnabled The accountEnabled to set to this User.\r          */\r         public void setAccountEnabled(String accountEnabled) {\r             this.accountEnabled = accountEnabled;\r         }\r \r         public boolean isIsDeleted() {\r             return this.isDeleted;\r         }\r \r         public void setIsDeleted(boolean isDeleted) {\r             this.isDeleted = isDeleted;\r         }\r \r         @Override\r         public String toString() {\r             return new JSONObject(this).toString();\r         }\r \r         public String getManagerDisplayname(){\r             return managerDisplayname;\r         }\r \r         public void setManagerDisplayname(String managerDisplayname){\r             this.managerDisplayname = managerDisplayname;\r         }\r     }\r \r     /**\r      * The Class DirectReports Holds the essential data for a single DirectReport entry. Namely,\r      * it holds the displayName and the objectId of the direct entry. Furthermore, it provides the\r      * access methods to set or get the displayName and the ObjectId of this entry.\r      */\r     //class DirectReport extends User{\r     //\r     //\tprivate String displayName;\r     //\tprivate String objectId;\r     //\t \r     //\t/**\r     //\t * Two arguments Constructor for the DirectReport Class.\r     //\t * @param displayName\r     //\t * @param objectId\r     //\t */\r     //\tpublic DirectReport(String displayName, String objectId){\r     //\t\tthis.displayName = displayName;\r     //\t\tthis.objectId = objectId;\r     //\t}\r     //\r     //\t/**\r     //\t * @return The diaplayName of this direct report entry.\r     //\t */\r     //\tpublic String getDisplayName() {\r     //\t\treturn displayName;\r     //\t}\r     //\r     //\t\r     //\t/**\r     //\t *  @return The objectId of this direct report entry. \r     //\t */\r     //\tpublic String getObjectId() {\r     //\t\treturn objectId;\r     //\t}\r     //\r     //}\r     ```\r \r ## 步骤 7：创建身份验证模型和控制器文件（适用于 BasicFilter）\r Java 确实可能比较冗长，但就快完成了。在编写用于处理请求的 BasicFilter servlet 之前，需要再编写一些 ADAL4J 所需的帮助器文件。\r \r 1. 创建名为 AuthHelper.java 的文件，该文件提供用于确定已登录用户状态的方法。方法包括：\r \r  - **isAuthenticated()**：返回用户是否登录。\r  - **containsAuthenticationData()**：返回令牌是否具有数据。\r  - **isAuthenticationSuccessful()**：返回用户身份验证是否成功。\r \r      若要创建 AuthHelper.java 文件，请粘贴以下代码：\r \r     ```Java\r     package com.microsoft.aad.adal4jsample;\r \r     import java.util.Map;\r \r     import javax.servlet.http.HttpServletRequest;\r \r     import com.microsoft.aad.adal4j.AuthenticationResult;\r     import com.nimbusds.openid.connect.sdk.AuthenticationResponse;\r     import com.nimbusds.openid.connect.sdk.AuthenticationResponseParser;\r     import com.nimbusds.openid.connect.sdk.AuthenticationSuccessResponse;\r \r     public final class AuthHelper {\r \r         public static final String PRINCIPAL_SESSION_NAME = \"principal\";\r \r         private AuthHelper() {\r         }\r \r         public static boolean isAuthenticated(HttpServletRequest request) {\r             return request.getSession().getAttribute(PRINCIPAL_SESSION_NAME) != null;\r         }\r \r         public static AuthenticationResult getAuthSessionObject(\r                 HttpServletRequest request) {\r             return (AuthenticationResult) request.getSession().getAttribute(\r                     PRINCIPAL_SESSION_NAME);\r         }\r \r         public static boolean containsAuthenticationData(\r                 HttpServletRequest httpRequest) {\r             Map<String, String[]> map = httpRequest.getParameterMap();\r             return httpRequest.getMethod().equalsIgnoreCase(\"POST\") && (httpRequest.getParameterMap().containsKey(\r                             AuthParameterNames.ERROR)\r                             || httpRequest.getParameterMap().containsKey(\r                                     AuthParameterNames.ID_TOKEN) || httpRequest\r                             .getParameterMap().containsKey(AuthParameterNames.CODE));\r         }\r \r         public static boolean isAuthenticationSuccessful(\r                 AuthenticationResponse authResponse) {\r             return authResponse instanceof AuthenticationSuccessResponse;\r         }\r     }\r     ```\r \r 2. 创建名为 AuthParameterNames.java 的文件，该文件提供 ADAL4J 所需的某些不可变变量。若要创建该文件，请粘贴以下代码：\r \r     ```Java\r     package com.microsoft.aad.adal4jsample;\r \r     public final class AuthParameterNames {\r \r         private AuthParameterNames() {\r         }\r \r         public static String ERROR = \"error\";\r         public static String ERROR_DESCRIPTION = \"error_description\";\r         public static String ERROR_URI = \"error_uri\";\r         public static String ID_TOKEN = \"id_token\";\r         public static String CODE = \"code\";\r     }\r     ```\r \r 3. 创建名为 AadController.java 的文件，该文件是 MVC 模式的控制器。该文件提供 JSP 控制器，并公开应用的 secure/aad URL 终结点。该文件还包括图形查询。若要创建该文件，请粘贴以下代码：\r \r     ```Java\r     package com.microsoft.aad.adal4jsample;\r \r     import java.net.HttpURLConnection;\r     import java.net.URL;\r \r     import javax.servlet.http.HttpServletRequest;\r     import javax.servlet.http.HttpSession;\r \r     import org.json.JSONArray;\r     import org.json.JSONObject;\r     import org.springframework.stereotype.Controller;\r     import org.springframework.ui.ModelMap;\r     import org.springframework.web.bind.annotation.RequestMapping;\r     import org.springframework.web.bind.annotation.RequestMethod;\r \r     import com.microsoft.aad.adal4j.AuthenticationResult;\r \r     @Controller\r     @RequestMapping(\"/secure/aad\")\r     public class AadController {\r \r         @RequestMapping(method = { RequestMethod.GET, RequestMethod.POST })\r         public String getDirectoryObjects(ModelMap model, HttpServletRequest httpRequest) {\r             HttpSession session = httpRequest.getSession();\r             AuthenticationResult result = (AuthenticationResult) session.getAttribute(AuthHelper.PRINCIPAL_SESSION_NAME);\r             if (result == null) {\r                 model.addAttribute(\"error\", new Exception(\"AuthenticationResult not found in session.\"));\r                 return \"/error\";\r             } else {\r                 String data;\r                 try {\r                     data = this.getUsernamesFromGraph(result.getAccessToken(), session.getServletContext()\r                             .getInitParameter(\"tenant\"));\r                     model.addAttribute(\"users\", data);\r                 } catch (Exception e) {\r                     model.addAttribute(\"error\", e);\r                     return \"/error\";\r                 }\r             }\r             return \"/secure/aad\";\r         }\r \r         private String getUsernamesFromGraph(String accessToken, String tenant) throws Exception {\r             URL url = new URL(String.format(\"https://graph.chinacloudapi.cn/%s/users?api-version=2013-04-05\", tenant,\r                     accessToken));\r \r             HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r             // Set the appropriate header fields in the request header.\r             conn.setRequestProperty(\"api-version\", \"2013-04-05\");\r             conn.setRequestProperty(\"Authorization\", accessToken);\r             conn.setRequestProperty(\"Accept\", \"application/json;odata=minimalmetadata\");\r             String goodRespStr = HttpClientHelper.getResponseStringFromConn(conn, true);\r             // logger.info(\"goodRespStr ->\" + goodRespStr);\r             int responseCode = conn.getResponseCode();\r             JSONObject response = HttpClientHelper.processGoodRespStr(responseCode, goodRespStr);\r             JSONArray users = new JSONArray();\r \r             users = JSONHelper.fetchDirectoryObjectJSONArray(response);\r \r             StringBuilder builder = new StringBuilder();\r             User user = null;\r             for (int i = 0; i < users.length(); i++) {\r                 JSONObject thisUserJSONObject = users.optJSONObject(i);\r                 user = new User();\r                 JSONHelper.convertJSONObjectToDirectoryObject(thisUserJSONObject, user);\r                 builder.append(user.getUserPrincipalName() + \"<br/>\");\r             }\r             return builder.toString();\r         }\r \r     }\r     ```\r \r ## 步骤 8：创建 BasicFilter 文件（适用于 BasicFilter MVC）\r 现在可以创建 BasicFilter.java 文件，它处理来自 JSP 视图文件的请求。若要创建该文件，请粘贴以下代码：\r \r ```Java\r package com.microsoft.aad.adal4jsample;\r \r import java.io.IOException;\r import java.io.UnsupportedEncodingException;\r import java.net.URI;\r import java.net.URLEncoder;\r import java.util.Date;\r import java.util.HashMap;\r import java.util.Map;\r import java.util.UUID;\r import java.util.concurrent.ExecutionException;\r import java.util.concurrent.ExecutorService;\r import java.util.concurrent.Executors;\r import java.util.concurrent.Future;\r \r import javax.naming.ServiceUnavailableException;\r import javax.servlet.Filter;\r import javax.servlet.FilterChain;\r import javax.servlet.FilterConfig;\r import javax.servlet.ServletException;\r import javax.servlet.ServletRequest;\r import javax.servlet.ServletResponse;\r import javax.servlet.http.HttpServletRequest;\r import javax.servlet.http.HttpServletResponse;\r \r import com.microsoft.aad.adal4j.AuthenticationContext;\r import com.microsoft.aad.adal4j.AuthenticationResult;\r import com.microsoft.aad.adal4j.ClientCredential;\r import com.nimbusds.oauth2.sdk.AuthorizationCode;\r import com.nimbusds.openid.connect.sdk.AuthenticationErrorResponse;\r import com.nimbusds.openid.connect.sdk.AuthenticationResponse;\r import com.nimbusds.openid.connect.sdk.AuthenticationResponseParser;\r import com.nimbusds.openid.connect.sdk.AuthenticationSuccessResponse;\r \r public class BasicFilter implements Filter {\r \r     private String clientId = \"\";\r     private String clientSecret = \"\";\r     private String tenant = \"\";\r     private String authority;\r \r     public void destroy() {\r \r     }\r \r     public void doFilter(ServletRequest request, ServletResponse response,\r             FilterChain chain) throws IOException, ServletException {\r \r         if (request instanceof HttpServletRequest) {\r             HttpServletRequest httpRequest = (HttpServletRequest) request;\r             HttpServletResponse httpResponse = (HttpServletResponse) response;\r             try {\r \r                 String currentUri = request.getScheme()\r                         + \"://\"\r                         + request.getServerName()\r                         + (\"http\".equals(request.getScheme())\r                                 && request.getServerPort() == 80\r                                 || \"https\".equals(request.getScheme())\r                                 && request.getServerPort() == 443 ? \"\" : \":\"\r                                 + request.getServerPort())\r                         + httpRequest.getRequestURI();\r                 String fullUrl = currentUri\r                         + (httpRequest.getQueryString() != null ? \"?\"\r                                 + httpRequest.getQueryString() : \"\");\r                 // check if user has a session\r                 if (!AuthHelper.isAuthenticated(httpRequest)) {\r                     if (AuthHelper.containsAuthenticationData(httpRequest)) {\r                         Map<String, String> params = new HashMap<String, String>();\r                         for (String key : request.getParameterMap().keySet()) {\r                             params.put(key,\r                                     request.getParameterMap().get(key)[0]);\r                         }\r                         AuthenticationResponse authResponse = AuthenticationResponseParser\r                                 .parse(new URI(fullUrl), params);\r                         if (AuthHelper.isAuthenticationSuccessful(authResponse)) {\r \r                             AuthenticationSuccessResponse oidcResponse = (AuthenticationSuccessResponse) authResponse;\r                             AuthenticationResult result = getAccessToken(\r                                     oidcResponse.getAuthorizationCode(),\r                                     currentUri);\r                             createSessionPrincipal(httpRequest, result);\r                         } else {\r                             AuthenticationErrorResponse oidcResponse = (AuthenticationErrorResponse) authResponse;\r                             throw new Exception(String.format(\r                                     \"Request for auth code failed: %s - %s\",\r                                     oidcResponse.getErrorObject().getCode(),\r                                     oidcResponse.getErrorObject()\r                                             .getDescription()));\r                         }\r                     } else {\r                             // not authenticated\r                             httpResponse.setStatus(302);\r                             httpResponse\r                                     .sendRedirect(getRedirectUrl(currentUri));\r                             return;\r                     }\r                 } else {\r                     // if authenticated, how to check for valid session?\r                     AuthenticationResult result = AuthHelper\r                             .getAuthSessionObject(httpRequest);\r \r                     if (httpRequest.getParameter(\"refresh\") != null) {\r                         result = getAccessTokenFromRefreshToken(\r                                 result.getRefreshToken(), currentUri);\r                     } else {\r                         if (httpRequest.getParameter(\"cc\") != null) {\r                             result = getAccessTokenFromClientCredentials();\r                         } else {\r                             if (result.getExpiresOnDate().before(new Date())) {\r                                 result = getAccessTokenFromRefreshToken(\r                                         result.getRefreshToken(), currentUri);\r                             }\r                         }\r                     }\r                     createSessionPrincipal(httpRequest, result);\r                 }\r             } catch (Throwable exc) {\r                 httpResponse.setStatus(500);\r                 request.setAttribute(\"error\", exc.getMessage());\r                 httpResponse.sendRedirect(((HttpServletRequest) request)\r                         .getContextPath() + \"/error.jsp\");\r             }\r         }\r         chain.doFilter(request, response);\r     }\r \r     private AuthenticationResult getAccessTokenFromClientCredentials()\r             throws Throwable {\r         AuthenticationContext context = null;\r         AuthenticationResult result = null;\r         ExecutorService service = null;\r         try {\r             service = Executors.newFixedThreadPool(1);\r             context = new AuthenticationContext(authority + tenant + \"/\", true,\r                     service);\r             Future<AuthenticationResult> future = context.acquireToken(\r                     \"https://graph.chinacloudapi.cn\", new ClientCredential(clientId,\r                             clientSecret), null);\r             result = future.get();\r         } catch (ExecutionException e) {\r             throw e.getCause();\r         } finally {\r             service.shutdown();\r         }\r \r         if (result == null) {\r             throw new ServiceUnavailableException(\r                     \"authentication result was null\");\r         }\r         return result;\r     }\r \r     private AuthenticationResult getAccessTokenFromRefreshToken(\r             String refreshToken, String currentUri) throws Throwable {\r         AuthenticationContext context = null;\r         AuthenticationResult result = null;\r         ExecutorService service = null;\r         try {\r             service = Executors.newFixedThreadPool(1);\r             context = new AuthenticationContext(authority + tenant + \"/\", true,\r                     service);\r             Future<AuthenticationResult> future = context\r                     .acquireTokenByRefreshToken(refreshToken,\r                             new ClientCredential(clientId, clientSecret), null,\r                             null);\r             result = future.get();\r         } catch (ExecutionException e) {\r             throw e.getCause();\r         } finally {\r             service.shutdown();\r         }\r \r         if (result == null) {\r             throw new ServiceUnavailableException(\r                     \"authentication result was null\");\r         }\r         return result;\r \r     }\r \r     private AuthenticationResult getAccessToken(\r             AuthorizationCode authorizationCode, String currentUri)\r             throws Throwable {\r         String authCode = authorizationCode.getValue();\r         ClientCredential credential = new ClientCredential(clientId,\r                 clientSecret);\r         AuthenticationContext context = null;\r         AuthenticationResult result = null;\r         ExecutorService service = null;\r         try {\r             service = Executors.newFixedThreadPool(1);\r             context = new AuthenticationContext(authority + tenant + \"/\", true,\r                     service);\r             Future<AuthenticationResult> future = context\r                     .acquireTokenByAuthorizationCode(authCode, new URI(\r                             currentUri), credential, null);\r             result = future.get();\r         } catch (ExecutionException e) {\r             throw e.getCause();\r         } finally {\r             service.shutdown();\r         }\r \r         if (result == null) {\r             throw new ServiceUnavailableException(\r                     \"authentication result was null\");\r         }\r         return result;\r     }\r \r     private void createSessionPrincipal(HttpServletRequest httpRequest,\r             AuthenticationResult result) throws Exception {\r         httpRequest.getSession().setAttribute(\r                 AuthHelper.PRINCIPAL_SESSION_NAME, result);\r     }\r \r     private String getRedirectUrl(String currentUri)\r             throws UnsupportedEncodingException {\r         String redirectUrl = authority\r                 + this.tenant\r                 + \"/oauth2/authorize?response_type=code%20id_token&scope=openid&response_mode=form_post&redirect_uri=\"\r                 + URLEncoder.encode(currentUri, \"UTF-8\") + \"&client_id=\"\r                 + clientId + \"&resource=https%3a%2f%2fgraph.chinacloudapi.cn\"\r                 + \"&nonce=\" + UUID.randomUUID() + \"&site_id=500879\";\r         return redirectUrl;\r     }\r \r     public void init(FilterConfig config) throws ServletException {\r         clientId = config.getInitParameter(\"client_id\");\r         authority = config.getServletContext().getInitParameter(\"authority\");\r         tenant = config.getServletContext().getInitParameter(\"tenant\");\r         clientSecret = config.getInitParameter(\"secret_key\");\r     }\r \r }\r ```\r \r 此 servlet 公开 ADAL4J 预期应用会运行的所有方法。方法包括：\r \r - **getAccessTokenFromClientCredentials()**：从密钥中获取访问令牌。\r - **getAccessTokenFromRefreshToken()**：从刷新令牌中获取访问令牌。\r - **getAccessToken()**：从所使用的 OpenID Connect 流中获取访问令牌。\r - **createSessionPrincipal()**：创建用于图形 API 访问的会话主体。\r - **getRedirectUrl()**：获取 redirectURL，以将它与在门户中输入的值进行比较。\r \r ## 步骤 9：在 Tomcat 中编译并运行示例\r \r 1. 更改为根目录。\r 2. 若要生成刚才通过使用 `maven` 组合成的示例，请运行以下命令：\r \r     `$ mvn package`  \r \r  此命令使用为依赖项编写的 pom.xml 文件。\r \r 现在，/targets 目录中应具有 adal4jsample.war 文件。可以在 Tomcat 容器中部署该文件并访问 http://localhost:8080/adal4jsample/ URL。\r \r > [!NOTE]\r 可使用最新的 Tomcat 服务器轻松部署 .war 文件。转到 http://localhost:8080/manager/ ，并按照相关说明上传 adal4jsample.war 文件。它会为你自动部署正确的终结点。\r \r ## 后续步骤\r 现在，已创建一个有效的 Java 应用，它可以对用户进行身份验证，使用 OAuth 2.0 安全调用 Web API，并获取有关用户的基本信息。如果尚未将用户填充到租户，现在正是执行此操作的最佳时机。\r \r 如需更多参考信息，可以使用以下两种方法之一获取已完成的示例（无需配置值）：\r \r - 将其下载为 [.zip 文件](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/complete.zip)。\r - 通过输入以下命令，从 GitHub 克隆文件：\r \r     git clone --branch complete https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect.git\r \r <!---HONumber=Mooncake_0306_2017-->\r <!---Update_Description: wording update -->"}