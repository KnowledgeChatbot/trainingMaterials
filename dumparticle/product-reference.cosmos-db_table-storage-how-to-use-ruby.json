{"Title":"如何配合使用 Ruby 和 Azure 表存储","Description":"使用 Azure 表存储（一种 NoSQL 数据存储）将结构化数据存储在云中。","Content":"# <a name=\"how-to-use-azure-table-storage-with-ruby\"></a>如何配合使用 Ruby 和 Azure 表存储\r [!INCLUDE [storage-selector-table-include](../../includes/storage-selector-table-include.md)]\r [!INCLUDE [storage-table-cosmos-db-langsoon-tip-include](../../includes/storage-table-cosmos-db-langsoon-tip-include.md)]\r \r ## <a name=\"overview\"></a>概述\r 本指南演示如何使用 Azure 表服务执行常见任务。 相关示例是使用 Ruby API 编写的。 涉及的情景包括创建和删除表、在表中插入和查询条目。\r \r [!INCLUDE [storage-table-concepts-include](../../includes/storage-table-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\r \r ## <a name=\"create-a-ruby-application\"></a>创建 Ruby 应用程序\r 有关如何创建 Ruby 应用程序的说明，请参阅 [Azure VM 上的 Ruby on Rails Web 应用程序](../virtual-machines/linux/classic/virtual-machines-linux-classic-ruby-rails-web-app.md)。\r \r ## <a name=\"configure-your-application-to-access-storage\"></a>配置应用程序以访问存储\r 要使用 Azure 存储，需下载和使用 Ruby Azure 包，其中包括与存储 REST 服务通信的一组方便的库。\r \r ### <a name=\"use-rubygems-to-obtain-the-package\"></a>使用 RubyGems 获取该程序包\r 1. 使用命令行接口，例如 PowerShell (Windows)、Terminal (Mac) 或 Bash (Unix)。\r 2. 在命令窗口中键入 **gem install azure** 以安装 gem 和依赖项。\r \r ### <a name=\"import-the-package\"></a>导入包\r 使用常用的文本编辑器将以下内容添加到要在其中使用存储的 Ruby 文件的顶部：\r \r ```ruby\r require \"azure\"\r ```\r \r ## <a name=\"set-up-an-azure-storage-connection\"></a>设置 Azure 存储连接\r Azure 模块会读取环境变量 **AZURE\\_STORAGE\\_ACCOUNT** 和 **AZURE\\_STORAGE\\_ACCESS\\_KEY** 以获取连接到 Azure 存储帐户所需的信息。 如果未设置这些环境变量，则在使用 **Azure::TableService** 之前必须通过以下代码指定帐户信息：\r \r ```ruby\r Azure.config.storage_account_name = \"<your azure storage account>\"\r Azure.config.storage_access_key = \"<your azure storage access key>\"\r Azure.config.storage_endpoint_suffix = \"core.chinacloudapi.cn\"\r ```\r \r 从 Azure 门户中的经典或 Resource Manager 存储帐户中获取这些值：\r \r 1. 登录到 [Azure 门户](https://portal.azure.cn)。\r 2. 导航到要使用的存储帐户。\r 3. 在右侧的“设置”边栏选项卡中，单击“访问密钥” 。\r 4. 在显示的“访问密钥”边栏选项卡中，可看到访问密钥 1 和访问密钥 2。 可以使用其中任意一个密钥。\r 5. 单击复制图标以将密钥复制到剪贴板。\r \r ## <a name=\"create-a-table\"></a>创建表\r 使用 **Azure::TableService** 对象可用于处理表和条目。 若要创建表，请使用 create\\_table() 方法。 以下示例创建表或输出存在的错误。\r \r ```ruby\r azure_table_service = Azure::TableService.new\r begin\r     azure_table_service.create_table(\"testtable\")\r rescue\r     puts $!\r end\r ```\r \r ## <a name=\"add-an-entity-to-a-table\"></a>向表中添加条目\r 若要添加条目，应首先创建定义条目属性的哈希对象。 请注意，必须为每个实体指定 PartitionKey 和 RowKey。 这些值是条目的唯一标识符，查询它们比查询其他属性快很多。 Azure 存储使用 **PartitionKey** 将表的实体自动分发到多个存储节点。 具有相同 **PartitionKey** 的条目存储在同一个节点上。 **RowKey** 是条目在其所属分区内的唯一 ID。\r \r ```ruby\r entity = { \"content\" => \"test entity\",\r     :PartitionKey => \"test-partition-key\", :RowKey => \"1\" }\r azure_table_service.insert_entity(\"testtable\", entity)\r ```\r \r ## <a name=\"update-an-entity\"></a>更新条目\r 可使用多种方法来更新现有实体：\r \r * **update\\_entity()：**通过替换更新现有实体。\r * **merge\\_entity()：**通过将新属性值合并到现有实体来更新现有实体。\r * **insert\\_or\\_merge\\_entity()：**通过替换更新现有实体。 如果不存在条目，则插入新条目：\r * **insert\\_or\\_replace\\_entity()：**通过将新属性值合并到现有实体来更新现有实体。 如果不存在条目，则插入新条目。\r \r 以下示例演示使用 **update\\_entity()** 更新实体：\r \r ```ruby\r entity = { \"content\" => \"test entity with updated content\",\r     :PartitionKey => \"test-partition-key\", :RowKey => \"1\" }\r azure_table_service.update_entity(\"testtable\", entity)\r ```\r \r 使用 **update\\_entity()** 和 **merge\\_entity()** 时，如果要更新的实体不存在，则更新操作会失败。 因此，如果希望存储某个实体而不用考虑它是否已存在，则应改用 **insert\\_or\\_replace\\_entity()** 或 **insert\\_or\\_merge\\_entity()**。\r \r ## <a name=\"work-with-groups-of-entities\"></a>使用实体组\r 有时，有必要批量同时提交多项操作以确保通过服务器进行原子处理。 要完成此操作，首先要创建一个 **Batch** 对象，然后对 **TableService** 使用 **execute\\_batch()** 方法。 下面的示例演示在一个批次中提交 RowKey 为 2 和 3 的两个实体。 请注意，此操作仅适用于具有相同 PartitionKey 的条目。\r \r ```ruby\r azure_table_service = Azure::TableService.new\r batch = Azure::Storage::Table::Batch.new(\"testtable\",\r     \"test-partition-key\") do\r     insert \"2\", { \"content\" => \"new content 2\" }\r     insert \"3\", { \"content\" => \"new content 3\" }\r end\r results = azure_table_service.execute_batch(batch)\r ```\r \r ## <a name=\"query-for-an-entity\"></a>查询实体\r 若要查询表中的实体，请使用 **get\\_entity()** 方法并传递表名称、**PartitionKey** 和 **RowKey**。\r \r ```ruby\r result = azure_table_service.get_entity(\"testtable\", \"test-partition-key\",\r     \"1\")\r ```\r \r ## <a name=\"query-a-set-of-entities\"></a>查询实体集\r 若要查询表中的一组实体，请创建查询哈希对象并使用 **query\\_entities()** 方法。 以下示例演示如何获取具有相同 **PartitionKey** 的所有实体：\r \r ```ruby\r query = { :filter => \"PartitionKey eq 'test-partition-key'\" }\r result, token = azure_table_service.query_entities(\"testtable\", query)\r ```\r \r > [!NOTE]\r > 如果结果集太大，一个查询无法全部返回，会返回一个继续标记，可以使用该标记检索后续页面。\r >\r >\r \r ## <a name=\"query-a-subset-of-entity-properties\"></a>查询条目属性的子集\r 对表的查询可以只检索条目的几个属性。 这种技术称为“投影”，可减少带宽并提高查询性能，尤其适用于大型条目。 请使用 select 子句并传递希望显示给客户端的属性的名称。\r \r ```ruby\r query = { :filter => \"PartitionKey eq 'test-partition-key'\",\r     :select => [\"content\"] }\r result, token = azure_table_service.query_entities(\"testtable\", query)\r ```\r \r ## <a name=\"delete-an-entity\"></a>删除实体\r 若要删除实体，请使用 **delete_entity()** 方法。 需要传入包含该实体的表的名称、实体的 PartitionKey 和 RowKey。\r \r ```ruby\r azure_table_service.delete_entity(\"testtable\", \"test-partition-key\", \"1\")\r ```\r \r ## <a name=\"delete-a-table\"></a>删除表\r 若要删除表，请使用 **delete\\_table()** 方法并传入要删除的表的名称。\r \r ```ruby\r azure_table_service.delete_table(\"testtable\")\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r * [Azure 存储资源管理器](../vs-azure-tools-storage-manage-with-storage-explorer.md)是我们免费提供的独立应用，适用于在 Windows、macOS 和 Linux 上以可视方式处理 Azure 存储数据。\r * [Azure SDK for Ruby](http://github.com/WindowsAzure/azure-sdk-for-ruby) 存储库\r \r <!--Update_Description: update meta properties, wording update-->"}