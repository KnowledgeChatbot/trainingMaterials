{"Title":"适用于 Azure 的 MongoDB、Angular 和 Node 教程 - 第 3 部分","Description":"本教程系列的第 3 部分，介绍如何通过 Angular 和 Node 在 Azure Cosmos DB 上创建 MongoDB 应用，所使用的 API 与用于 MongoDB 的 API 完全相同。","Content":"# <a name=\"create-a-mongodb-app-with-angular-and-azure-cosmos-db---part-3-build-the-ui-with-angular\"></a>通过 Angular 和 Azure Cosmos DB 创建 MongoDB 应用 - 第 3 部分：通过 Angular 生成 UI\r \r 本教程包含多个部分，演示了如何通过 Express 和 Angular 创建以 Node.js 编写的新 [MongoDB API](mongodb-introduction.md) 应用，然后将其连接到 Azure Cosmos DB 数据库。\r \r 本教程的第 3 部分基于[第 2 部分](tutorial-develop-mongodb-nodejs-part2.md)，涵盖以下任务：\r \r > [!div class=\"checklist\"]\r > * 生成 Angular UI\r > * 使用 CSS 设置外观\r > * 在本地测试应用\r \r <!-- Not Available ## Video walkthrough-->\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 开始教程的此部分之前，请确保已完成教程[第 2 部分](tutorial-develop-mongodb-nodejs-part2.md)的步骤。\r \r > [!TIP]\r > 本教程介绍分步生成应用程序的步骤。 若要下载完成的项目，可从 GitHub 上的 [angular-cosmosdb 存储库](https://github.com/Azure-Samples/angular-cosmosdb)获取完成的应用程序。\r \r ## <a name=\"build-the-ui\"></a>生成 UI\r \r 1. 在 Visual Studio Code 中，单击“停止”按钮 ![Visual Studio Code 中的“停止”按钮](./media/tutorial-develop-mongodb-nodejs-part3/stop-button.png) 停止 Node 应用。\r \r 2. 在 Windows 命令提示符或 Mac Terminal 窗口中输入以下命令，生成 heroes 组件。 在此代码中，g=generate（生成），c=component（组件），heroes=组件名称，并且由于使用的是平面文件结构 (--flat)，因此没有为其创建子文件夹。\r \r     ```\r     ng g c heroes --flat \r     ```\r \r     Terminal 窗口显示新组件的确认信息。\r \r     ```bash\r     installing component\r       create src\\client\\app\\heroes.component.ts\r       update src\\client\\app\\app.module.ts \r     ```\r \r     请看看已创建和更新的文件。 \r \r 3. 在 Visual Studio Code 的“资源管理器”窗格中，导航到新的 src\\client\\app 文件夹并打开步骤 2 创建的新的 heroes.component.ts 文件。 此 TypeScript 组件文件是上一命令创建的。\r \r     > [!TIP]\r     > 如果应用文件夹没有显示在 Visual Studio Code 中，请在 Mac 中输入 CMD + SHIFT P 或在 Windows 中输入 Ctrl + Shift + P 以打开命令面板，然后键入“Reload Window”以获取系统更改。\r \r     ![打开 heroes.component.ts 文件](./media/tutorial-develop-mongodb-nodejs-part3/open-folder.png)\r \r 4. 在同一文件夹中打开 app.module.ts 文件。请注意，该文件在第 5 行向声明添加了 `HeroesComponent`，并在第 10 行对其进行了导入操作。\r \r     ![打开 app-module.ts 文件](./media/tutorial-develop-mongodb-nodejs-part3/app-module-file.png)\r \r     有了 Heroes 组件以后，即可为 heroes 组件 HTML 创建新的文件。 由于创建的是最小的应用，因此本应将 HTML 与 TypeScript 文件置于同一文件中，但我们需要将其分开，创建单独的文件。\r \r 5. 在“资源管理器”窗格中，右键单击“app”文件夹，单击“新建文件”，然后将新文件命名为“heroes.component.html”。\r \r 6. 在 heroes.component.ts 文件中，删除第 5-9 行 \r \r     ```ts\r     template: `\r         <p>\r           heroes Works!\r         </p>\r       `,\r       ```\r       并将其替换为\r \r     ```ts\r     templateUrl: './heroes.component.html',\r     ```\r \r     以便引用新的 HTML 文件。\r \r     > [!TIP]\r     > 可以使用 John Papa 提供的适用于 Visual Studio Code 的 Angular Essentials 扩展和代码片段来加快开发速度。 \r     > 1. 单击“扩展”按钮 ![Visual Studio Code 的“扩展”按钮](./media/tutorial-develop-mongodb-nodejs-part3/extensions-button.png)。\r     > 2. 在搜索框中键入“angular essentials”。\r     > 3. 单击“安装” 。 \r     > 4. 单击“重新加载”按钮以使用新扩展。\r     > 或者从 [http://jpapa.me/angularessentials](http://jpapa.me/angularessentials) 下载。 \r     > ![Angular Essentials 扩展](./media/tutorial-develop-mongodb-nodejs-part3/angular-essentials-extension.png)\r \r 7. 返回到 heroes.component.html 文件，将此代码复制到其中。 `<div>` 是整个页面的容器。 容器内有一个需创建的 hero 的列表。创建这些组件后，在 UI 中单击其中一个组件即可将其选定进行编辑或删除操作。 然后就会在 HTML 中显示某种样式，可以据此判断选择了哪个组件。 此外还有编辑区域，用于添加新的 hero 或编辑现有的 hero。 \r \r     ```html\r     <div>\r       <ul class=\"heroes\">\r         <li *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\" [class.selected]=\"hero === selectedHero\">\r           <button class=\"delete-button\" (click)=\"deleteHero(hero)\">Delete</button>\r           <div class=\"hero-element\">\r             <div class=\"badge\">{{hero.id}}</div>\r             <div class=\"name\">{{hero.name}}</div>\r             <div class=\"saying\">{{hero.saying}}</div>\r           </div>\r         </li>\r       </ul>\r       <div class=\"editarea\">\r         <button (click)=\"enableAddMode()\">Add New Hero</button>\r         <div *ngIf=\"selectedHero\">\r           <div class=\"editfields\">\r             <div>\r               <label>id: </label>\r               <input [(ngModel)]=\"selectedHero.id\" placeholder=\"id\" *ngIf=\"addingHero\" />\r               <label *ngIf=\"!addingHero\" class=\"value\">{{selectedHero.id}}</label>\r             </div>\r             <div>\r               <label>name: </label>\r               <input [(ngModel)]=\"selectedHero.name\" placeholder=\"name\" />\r             </div>\r             <div>\r               <label>saying: </label>\r               <input [(ngModel)]=\"selectedHero.saying\" placeholder=\"saying\" />\r             </div>\r           </div>\r           <button (click)=\"cancel()\">Cancel</button>\r           <button (click)=\"save()\">Save</button>\r         </div>\r       </div>\r     </div>\r     ```\r \r 8. 准备好 HTML 之后，需将其添加到 heroes.component.ts 文件，然后才能与模板交互。 已添加到以下 heroes.component.ts 的新代码会将模板添加到组件文件中。 已添加了一个构造函数，该函数用于获取某些 hero 并初始化 hero 服务组件，以便获取所有数据。 此代码还添加了所有必需的方法，用于在 UI 中处理事件。 可以复制以下代码，覆盖 heroes.component.ts 中的现有代码。 \r \r     ```ts\r     import { Component, OnInit } from '@angular/core';\r \r     @Component({\r       selector: 'app-heroes',\r       templateUrl: './heroes.component.html'\r     })\r     export class HeroesComponent implements OnInit {\r       addingHero = false;\r       heroes: any = [];\r       selectedHero: Hero;\r \r       constructor(private heroService: HeroService) {}\r \r       ngOnInit() {\r        this.getHeroes();\r       }\r \r       cancel() {\r         this.addingHero = false;\r         this.selectedHero = null;\r       }\r \r       deleteHero(hero: Hero) {\r         this.heroService.deleteHero(hero).subscribe(res => {\r           this.heroes = this.heroes.filter(h => h !== hero);\r           if (this.selectedHero === hero) {\r             this.selectedHero = null;\r           }\r         });\r       }\r \r       getHeroes() {\r         return this.heroService.getHeroes().subscribe(heroes => {\r           this.heroes = heroes;\r         });\r       }\r \r       enableAddMode() {\r         this.addingHero = true;\r         this.selectedHero = new Hero();\r       }\r \r       onSelect(hero: Hero) {\r         this.addingHero = false;\r         this.selectedHero = hero;\r       }\r \r       save() {\r         if (this.addingHero) {\r           this.heroService.addHero(this.selectedHero).subscribe(hero => {\r             this.addingHero = false;\r             this.selectedHero = null;\r             this.heroes.push(hero);\r           });\r         } else {\r           this.heroService.updateHero(this.selectedHero).subscribe(hero => {\r             this.addingHero = false;\r             this.selectedHero = null;\r           });\r         }\r       }\r     }\r     ```\r \r 9. 在资源管理器中打开 app/app.module.ts 文件，更新第 13 行（添加逗号）和第 14 行，为 `FormsModule` 添加 import。 import 节现在应如下所示：\r \r     ```\r     imports: [\r       BrowserModule,\r       FormsModule\r     ],\r     ```\r \r 10. 在第 3 行添加适用于新 FormsModule 模块的 import。 \r \r     ```\r     import { BrowserModule } from '@angular/platform-browser';\r     import { NgModule } from '@angular/core';\r     import { FormsModule } from '@angular/forms';\r     ```\r \r ## <a name=\"use-css-to-set-the-look-and-feel\"></a>使用 CSS 设置外观\r \r 1. 在“资源管理器”窗格中，打开 src/client/styles.scss 文件。\r \r 2. 将以下代码复制到 styles.scss 文件中，替换文件的现有内容。\r \r     ```css\r     /* You can add global styles to this file, and also import other style files */\r \r     * {\r       font-family: Arial;\r     }\r     h2 {\r       color: #444;\r       font-weight: lighter;\r     }\r     body {\r       margin: 2em;\r     }\r \r     body,\r     input[text],\r     button {\r       color: #888;\r       // font-family: Cambria, Georgia;\r     }\r     button {\r       font-size: 14px;\r       font-family: Arial;\r       background-color: #eee;\r       border: none;\r       padding: 5px 10px;\r       border-radius: 4px;\r       cursor: pointer;\r       cursor: hand;\r       &:hover {\r         background-color: #cfd8dc;\r       }\r       &.delete-button {\r         float: right;\r         background-color: gray !important;\r         background-color: rgb(216, 59, 1) !important;\r         color: white;\r         padding: 4px;\r         position: relative;\r         font-size: 12px;\r       }\r     }\r     div {\r       margin: .1em;\r     }\r \r     .selected {\r       background-color: #cfd8dc !important;\r       background-color: rgb(0, 120, 215) !important;\r       color: white;\r     }\r \r     .heroes {\r       float: left;\r       margin: 0 0 2em 0;\r       list-style-type: none;\r       padding: 0;\r       li {\r         cursor: pointer;\r         position: relative;\r         left: 0;\r         background-color: #eee;\r         margin: .5em;\r         padding: .5em;\r         height: 3.0em;\r         border-radius: 4px;\r         width: 17em;\r         &:hover {\r           color: #607d8b;\r           color: rgb(0, 120, 215);\r           background-color: #ddd;\r           left: .1em;\r         }\r         &.selected:hover {\r           /*background-color: #BBD8DC !important;*/\r           color: white;\r         }\r       }\r       .text {\r         position: relative;\r         top: -3px;\r       }\r       .saying {\r         margin: 5px 0;\r       }\r       .name {\r         font-weight: bold;\r       }\r       .badge {\r         /* display: inline-block; */\r         float: left;\r         font-size: small;\r         color: white;\r         padding: 0.7em 0.7em 0 0.5em;\r         background-color: #607d8b;\r         background-color: rgb(0, 120, 215);\r         background-color:rgb(134, 183, 221);\r         line-height: 1em;\r         position: relative;\r         left: -1px;\r         top: -4px;\r         height: 3.0em;\r         margin-right: .8em;\r         border-radius: 4px 0 0 4px;\r         width: 1.2em;\r       }\r     }\r \r     .header-bar {\r       background-color: rgb(0, 120, 215);\r       height: 4px;\r       margin-top: 10px;\r       margin-bottom: 10px;\r     }\r \r     label {\r       display: inline-block;\r       width: 4em;\r       margin: .5em 0;\r       color: #888;\r       &.value {\r         margin-left: 10px;\r         font-size: 14px;\r       }\r     }\r \r     input {\r       height: 2em;\r       font-size: 1em;\r       padding-left: .4em;\r       &::placeholder {\r           color: lightgray;\r           font-weight: normal;\r           font-size: 12px;\r           letter-spacing: 3px;\r       }\r     }\r \r     .editarea {\r       float: left;\r       input {\r         margin: 4px;\r         height: 20px;\r         color: rgb(0, 120, 215);\r       }\r       button {\r         margin: 8px;\r       }\r       .editfields {\r         margin-left: 12px;\r       }\r     }\r     ``` \r 3. 保存文件。 \r \r ## <a name=\"display-the-component\"></a>显示组件\r \r 有了组件以后，如何让其显示在平面上？ 请修改 app.component.ts 中的默认组件。\r \r 1. 在“资源管理器”窗格中，打开 client/app/app.component.ts。\r \r 2. 在第 6-8 行中，将标题更改为 Heroes，然后将已创建组件的名称置于 heroes.components.ts (app-heroes) 中，以便引用该新组件。 现在，template 节应如下所示： \r \r     ```ts\r     template: `\r       <h1>Heroes</h1>\r       <div class=\"header-bar\"></div>\r       <app-heroes></app-heroes>\r     `,\r     ```\r \r 3. heroes.components.ts 中有其他需要引用的组件（类似于 Hero 组件），因此还需创建此类组件。 在 Angular CLI 命令提示符中，使用以下命令创建一个 hero 模型和一个名为 hero.ts 的文件，其中，g=generate（生成），cl=class（类），hero=类名。\r \r     ```bash\r     ng g cl hero\r     ```\r \r     Terminal 窗口显示新类的确认信息。\r \r     ```bash\r     installing class\r     create src\\client\\app\\hero.ts\r     ```\r \r 4. 在“资源管理器”窗格中，打开 src\\client\\app\\hero.ts。\r \r 5. 在 hero.ts 中，将文件的内容替换为以下代码，以便添加带 ID、name 和 saying 的 Hero 类。 \r \r     ```ts\r       export class Hero {\r       id: number;\r       name: string;\r       saying: string;\r     }\r     ```\r \r 6. 返回到 heroes.components.ts。请注意，`selectedHero: Hero;` 行（第 10 行）的 `Hero` 下方有一条红线。 \r \r 7. 左键单击 `Hero` 一词，Visual Studio 会在代码块左侧显示一个灯泡图标。 \r \r     ![Visual Studio Code 中的灯泡](./media/tutorial-develop-mongodb-nodejs-part3/light-bulb.png)\r \r 8. 单击灯泡，然后单击“从 \"client/app/hero\" 导入 Hero” 或“从 \"./hero\" 导入 Hero”。 （此消息因设置而异）\r \r     此时会在第 2 行出现新的代码行。 如果第 2 行引用 client/app/hero，请对其进行修改，使之引用本地文件夹中的 hero 文件 (./hero)。 第 2 行应如下所示：\r \r    ```\r    import { Hero } from \"./hero\";\r    ``` \r \r     该代码适用于模型，而我们仍需创建服务。\r \r ## <a name=\"create-the-service\"></a>创建服务\r \r 1. 在 Angular CLI 命令提示符中输入以下命令，以便在 app.module.ts 中创建 hero 服务，其中，g=generate（生成），s=service（服务），hero=服务名称，-m=置于 app.module 中。\r \r     ```bash\r     ng g s hero -m app.module\r     ```\r \r     输出表明已创建 hero.service.ts 并更新 app.module.ts。\r \r     ```bash\r     installing service\r       create src\\client\\app\\hero.service.ts\r       update src\\client\\app\\app.module.ts\r     ```\r \r     在 app.module.ts 中添加了以下代码行（第 6 行和第 17 行）：\r \r     ```typescript\r     import { HeroService } from './hero.service';\r     ...\r         providers: [HeroService],\r     ```\r \r 2. 在 Visual Studio Code 中打开 hero.service.ts，将以下代码复制到其中，替换文件的内容。\r \r     ```ts\r     import { Injectable } from '@angular/core';\r     import { HttpClient } from '@angular/common/http';\r \r     import { Hero } from './hero';\r \r     const api = '/api';\r \r     @Injectable()\r     export class HeroService {\r       constructor(private http: HttpClient) {}\r \r       getHeroes() {\r         return this.http.get<Array<Hero>>(`${api}/heroes`)\r       }\r \r       deleteHero(hero: Hero) {\r         return this.http.delete(`${api}/hero/${hero.id}`);\r       }\r \r       addHero(hero: Hero) {\r         return this.http.post<Hero>(`${api}/hero/`, hero);\r       }\r \r       updateHero(hero: Hero) {\r         return this.http.put<Hero>(`${api}/hero/${hero.id}`, hero);\r       }\r     }\r     ```\r \r     此代码使用 Angular 提供的最新版 HttpClient，这是你需要提供的一个模块，因此我们接下来会进行相应的操作。\r \r 3. 在 Visual Studio Code 中打开 app.module.ts 并更新 import 节，使之包括 HttpClientModule，从而导入 HttpClientModule。\r \r     ```ts\r     imports: [\r       BrowserModule,\r       FormsModule,\r       HttpClientModule\r     ],\r     ```\r \r 4. 在 app.module.ts 中，从 import 列表添加 HttpClientModule import 语句。\r \r     ```ts\r     import { HttpClientModule } from '@angular/common/http';\r     ```\r \r 5. 在 Visual Studio Code 中返回到 heroes.components.ts。 请注意，`constructor(private heroService: HeroService) {}` 行（第 13 行）的 `HeroService` 下方有一条红线。 单击 `HeroService`，此时会在代码块左侧出现灯泡。 单击该灯泡，然后单击“从 \"./hero.service\" 导入 HeroService” 或“从 \"client/app/hero.service\" 导入 HeroService”。\r \r     单击灯泡会在第 2 行中插入新的代码行。 如果第 2 行引用 client/app/hero.service 文件夹，请对其进行修改，使之引用本地文件夹中的 hero 文件 (./hero.serivce)。 第 2 行应如下所示：\r \r     ```javascript\r     import { HeroService } from \"./hero.service\"\r     ```\r \r 6. 在 Visual Studio Code 中保存所有文件。\r \r ## <a name=\"build-the-app\"></a>生成应用\r \r 1. 在命令提示符处输入以下命令，生成 Angular 应用程序。 \r \r     ```bash\r     ng b\r     ``` \r \r     如果存在问题，Terminal 窗口会显示要修改的文件的相关信息。 生成操作完成后，新文件会进入 dist 文件夹中。 可以根据需要查看 dist 文件夹中的新文件。\r \r     现在，请运行该应用。\r \r 2. 在 Visual Studio Code 中，单击左侧的“调试”按钮 ![Visual Studio Code 中的“调试”图标](./media/tutorial-develop-mongodb-nodejs-part2/debug-button.png)，然后单击“开始调试”按钮 ![Visual Studio Code 中的“开始调试”图标](./media/tutorial-develop-mongodb-nodejs-part3/start-debugging-button.png)。\r \r 3. 现在请打开 Internet 浏览器，导航到 localhost:3000，然后就会看到该应用在本地运行。\r \r      ![在本地运行的 Hero 应用程序](./media/tutorial-develop-mongodb-nodejs-part3/azure-cosmos-db-mongodb-mean-app.png)\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 在本教程的此部分，你已完成以下操作：\r \r > [!div class=\"checklist\"]\r > * 生成 Angular UI\r > * 在本地测试应用\r \r 你可以转到本教程的下一部分，了解如何创建 Azure Cosmos DB 帐户。\r \r > [!div class=\"nextstepaction\"]\r > [使用 Azure CLI 创建 Azure Cosmos DB 帐户](tutorial-develop-mongodb-nodejs-part4.md)"}