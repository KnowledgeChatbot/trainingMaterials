{"Title":"IoT DevKit 到云 - 将 IoT DevKit AZ3166 连接到 Azure IoT 中心","Description":"在本教程中了解如何设置 IoT DevKit AZ3166 并将其连接到 Azure IoT 中心，使其能够将数据发送到 Azure 云平台。","Content":"# <a name=\"connect-iot-devkit-az3166-to-azure-iot-hub-in-the-cloud\"></a>将 IoT DevKit AZ3166 连接到云中的 Azure IoT 中心\r \r [!INCLUDE [iot-hub-get-started-device-selector](../../includes/iot-hub-get-started-device-selector.md)]\r \r [MXChip IoT DevKit](https://microsoft.github.io/azure-iot-developer-kit/) 可用于开发物联网 (IoT) 解决方案和构建其原型，以利用 Azure 服务。 它包括一个具有大量外围设备和传感器的 Arduino 兼容的板、一个开源板包和一份日益增长的[项目目录](https://microsoft.github.io/azure-iot-developer-kit/docs/projects/)。\r \r ## <a name=\"what-you-do\"></a>准备工作\r 将 [DevKit](https://microsoft.github.io/azure-iot-developer-kit/) 连接到创建的 Azure IoT 中心，从传感器收集温度和湿度数据，并将数据发送到 IoT 中心。\r \r 还没有 DevKit？ [获取一个](https://aka.ms/iot-devkit-purchase)。\r \r ## <a name=\"what-you-learn\"></a>学习内容\r \r * 如何将 IoT DevKit 连接到无线接入点并准备开发环境。\r * 如何创建 IoT 中心以及注册 MXChip IoT DevKit 的设备。\r * 如何通过在 MXChip IoT DevKit 上运行示例应用程序来收集传感器数据。\r * 如何将传感器数据发送到 IoT 中心。\r \r ## <a name=\"what-you-need\"></a>需要什么\r \r * 采用 micro USB 电缆的 MXChip IoT DevKit 板。 [立即获取](https://aka.ms/iot-devkit-purchase)\r * 运行 Windows 10 或 macOS 10.10 以上版本的计算机\r * 一个有效的 Azure 订阅\r   * 激活一个[试用版 Azure 帐户](https://www.azure.cn/pricing/1rmb-trial/)\r \r ## <a name=\"prepare-your-hardware\"></a>准备硬件\r \r 将硬件挂接到计算机。\r \r 所需硬件包括：\r \r * DevKit 板\r * Micro-USB 电缆\r \r ![所需硬件](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/hardware.jpg)\r \r 将 DevKit 连接到计算机：\r \r 1. 将 USB 端连接到计算机。\r 2. 将 Micro-USB 端连接到 DevKit。\r 3. 电源的绿色 LED 灯确认连接。\r \r ![硬件连接](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/connect.jpg)\r \r ## <a name=\"configure-wi-fi\"></a>配置 Wi-Fi\r \r IoT 项目依赖 Internet 连接。 使用以下说明配置 DevKit 连接到 Wi-Fi。\r \r ### <a name=\"enter-ap-mode\"></a>进入 AP 模式\r \r 长按按钮 B，然后按下重置按钮并松开，再松开按钮 B。DevKit 将进入 AP 模式以配置 Wi-Fi。 屏幕将显示 DevKit 的服务集标识符 (SSID) 和配置门户 IP 地址。\r \r ![重置按钮、按钮 B 和 SSID](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/wifi-ap.jpg)\r \r ### <a name=\"connect-to-devkit-ap\"></a>连接到 DevKit AP\r \r 现在，使用另一台支持 Wi-Fi 的设备（计算机或手机）连接到 DevKit SSID（在上方图像中突出显示）。 将密码留空。\r \r ![网络信息和“连接”按钮](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/connect-ssid.png)\r \r ### <a name=\"configure-wi-fi-for-the-devkit\"></a>为 DevKit 配置 Wi-Fi\r \r 在计算机或手机浏览器上打开 DevKit 屏幕上显示的 IP 地址，选择 DevKit 要连接的 Wi-Fi 网络，然后键入密码。 选择“连接” 。\r \r ![密码框和“连接”按钮](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/wifi-portal.png)\r \r 连接成功后，DevKit 将在几秒钟内重启。 将在屏幕上看到 Wi-Fi 名称和 IP 地址：\r \r ![Wi-Fi 名称和 IP 地址](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/wifi-ip.jpg)\r \r > [!NOTE] \r > 照片中显示的 IP 地址可能与 DevKit 屏幕上分配和显示的实际 IP 地址不匹配。 这是正常的，因为 Wi-Fi 使用 DHCP 动态分配 IP。\r \r 配置 Wi-Fi 后，即使拔下设备插头，该连接的凭据也会保留在设备上。 例如，如果在家中为 DevKit 配置了 Wi-Fi，之后将 DevKit 带到办公室，则需要重新配置 AP 模式（从“进入 AP 模式”部分中的步骤开始），将 DevKit 连接到办公室 Wi-Fi。 \r \r ## <a name=\"start-using-the-devkit\"></a>开始使用 DevKit\r \r DevKit 上运行的默认应用会检查固件的最新版本，并显示某些传感器诊断数据。\r \r ### <a name=\"upgrade-to-the-latest-firmware\"></a>升级到最新固件\r \r > [!NOTE] \r > 从 1.1 版开始，DevKit 在引导加载程序中启用了 ST-SAFE。 如果运行的是低于 1.1 版的固件，则需要升级固件才能使其正确工作。\r >\r >\r \r \r 如果需要升级固件，屏幕将显示当前和最新的固件版本。 请按照[升级固件](https://microsoft.github.io/azure-iot-developer-kit/docs/upgrading/)指南进行升级。\r \r ![显示当前和最新的固件版本](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/firmware.jpg)\r \r > [!NOTE] \r > 这是一次性操作。 开始在 DevKit 上开发并上传应用后，应用将附带最新的固件。\r \r ### <a name=\"test-various-sensors\"></a>测试各种传感器\r \r 按下按钮 B 测试传感器。 继续按下并松开按钮 B 可逐个测试每个传感器。\r \r ![按钮 B 和传感器显示](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/sensors.jpg)\r \r ## <a name=\"prepare-the-development-environment\"></a>准备开发环境\r \r 现在该设置开发环境了，开发环境是用于生成令人惊叹的 IoT 应用程序的工具和包。 可根据你的操作系统选择 Windows 或 macOS 版本。\r \r \r ### <a name=\"windows\"></a>Windows\r \r 我们鼓励使用安装包来准备开发环境。 如果遇到任何问题，可按照[手动步骤](https://microsoft.github.io/azure-iot-developer-kit/docs/installation/)进行操作。\r \r #### <a name=\"download-the-latest-package\"></a>下载最新包\r \r 下载的 .zip 文件包含 DevKit 开发所需的所有必需工具和包。\r \r > [!div class=\"button\"]\r [下载](https://aka.ms/devkit/prod/installpackage/latest)\r \r \r .zip 文件包含以下工具和包。 如果已经安装了某些组件，脚本会检测并跳过它们。\r \r * Node.js 和 Yarn：用于安装脚本和自动化任务的运行时。\r * [Azure CLI 2.0 MSI](https://docs.azure.cn/zh-cn/cli/install-azure-cli?view=azure-cli-lastest)：用于管理 Azure 资源的跨平台命令行体验。 MSI 包含依赖的 Python 和 pip。\r * [Visual Studio Code](https://code.visualstudio.com/) (VS Code)：用于 DevKit 开发的轻量级代码编辑器。\r * [适用于 Arduino 的 Visual Studio Code 扩展](https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino)：在 Visual Studio Code 中启用 Arduino 开发的扩展。\r * [Arduino IDE](https://www.arduino.cc/en/Main/Software)：Arduino 扩展所依赖的工具。\r * DevKit 板包：DevKit 的工具链、库和项目。\r * ST-Link 实用程序：基本工具和驱动程序。\r \r #### <a name=\"run-the-installation-script\"></a>运行安装脚本\r \r 在 Windows 文件资源管理器中，找到并解压缩 zip 文件。 找到并右键单击 `install.cmd`，然后选择“以管理员身份运行”。\r \r ![文件资源管理器](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/run-admin.png)\r \r 安装过程中，将看到每个工具或包的进度。\r \r ![安装进度](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/install.png)\r \r > [!NOTE] \r > 根据具体环境，有时无法成功安装 Arduino IDE。 这种情况下，可尝试[单独安装 Arduino IDE](https://microsoft.github.io/azure-iot-developer-kit/docs/installation/#windows)，然后再次运行 install.cmd。 否则，请遵循[手动步骤](https://microsoft.github.io/azure-iot-developer-kit/docs/installation/#windows)安装所有必要的工具和包。\r \r #### <a name=\"install-drivers\"></a>安装驱动程序\r \r 适用于 Arduino 扩展的 VS Code 依赖 Arduino IDE。 如果是第一次安装 Arduino IDE，系统会提示安装相关驱动程序：\r \r ![getting-started-driver](./media/iot-hub-arduino-devkit-az3166-get-started/getting-started/driver.png)\r \r 完成安装需要大约 10 分钟，具体取决于 Internet 速度。 安装完成后，桌面上应该会显示 Visual Studio Code 和 Arduino IDE 的快捷方式。\r \r > [!NOTE] \r > 当启动 VS Code 时，有时系统会提示出现错误：找不到 Arduino IDE 或相关板包。 若要解决此错误，请关闭 VS Code 并重启 Arduino IDE。 然后，VS Code 应正确找到 Arduino IDE 的路径。\r >\r >\r \r ### <a name=\"macos\"></a>macOS\r \r 我们建议使用一键安装体验来准备开发环境。 如果遇到任何问题，可按照[手动步骤](https://microsoft.github.io/azure-iot-developer-kit/docs/installation/)进行操作。\r \r #### <a name=\"install-homebrew\"></a>安装 Homebrew\r \r > [!NOTE] \r > 如果已安装 Homebrew，可跳过此步骤。\r \r 请按照 [Homebrew 安装说明](https://docs.brew.sh/Installation.html)进行安装。\r \r #### <a name=\"download-the-latest-package\"></a>下载最新包\r 下载的 .zip 文件包含 DevKit 开发所需的所有必需工具和包。\r \r > [!div class=\"button\"]\r [下载](https://aka.ms/devkit/prod/installpackage/mac/latest)\r \r .zip 文件包含以下工具和包。 如果已经安装了某些组件，脚本会检测并跳过它们。\r \r * Node.js 和 Yarn：用于安装脚本和自动化任务的运行时。\r * [Azure CLI 2.0](https://docs.azure.cn/zh-cn/cli/install-azure-cli?view=azure-cli-lastest)：用于管理 Azure 资源的跨平台命令行体验。\r * [Visual Studio Code](https://code.visualstudio.com/) (VS Code)：用于 DevKit 开发的轻量级代码编辑器。\r * [适用于 Arduino 的 Visual Studio Code 扩展](https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino)：在 Visual Studio Code 中启用 Arduino 开发的扩展。\r * [Arduino IDE](https://www.arduino.cc/en/Main/Software)：Arduino 扩展所依赖的工具。\r * DevKit 板包：DevKit 的工具链、库和项目。\r * ST-Link 实用程序：基本工具和驱动程序。\r \r #### <a name=\"run-the-installation-script\"></a>运行安装脚本\r \r 在查找工具中，定位到 .zip 并提取它：\r \r ![macOS 查找器](media/iot-hub-arduino-devkit-az3166-get-started/getting-started/mac-finder.png)\r \r 启动终端应用，定位到提取“.zip”文件的文件夹，然后运行：\r \r ```bash\r ./install.sh\r ```\r \r ![macOS 安装](media/iot-hub-arduino-devkit-az3166-get-started/getting-started/mac-install-sh.png)\r \r > [!NOTE] \r > 如果遇到 Homebrew 权限错误，请运行 `brew doctor` 以进行修复。 有关详细信息，请查阅 [FAQ](https://microsoft.github.io/azure-iot-developer-kit/docs/faq/#homebrew-permission-error-on-macos)。\r \r 现在已为 macOS 安装了所有必需的工具和包。\r \r \r ## <a name=\"open-the-project-folder\"></a>打开项目文件夹\r \r ### <a name=\"start-vs-code\"></a>启动 VS Code\r \r 确保 DevKit 未连接。 首先启动 VS Code，并将 DevKit 连接到计算机。 VS Code 将自动查找 DevKit，并打开简介页：\r \r ![“简介”页](media/iot-hub-arduino-devkit-az3166-get-started/mini-solution/vscode_start.png)\r \r > [!NOTE] \r > 当启动 VS Code 时，有时系统会提示出现错误：找不到 Arduino IDE 或相关板包。 关闭 VS Code 并重启 Arduino IDE。 然后，VS Code 应正确找到 Arduino IDE 的路径。\r \r \r ### <a name=\"open-the-arduino-examples-folder\"></a>打开 Arduino 示例文件夹\r \r 打开“Arduino 示例”选项卡，浏览到“MXCHIP AZ3166 示例” > “AzureIoT”，然后选择“GetStarted”。\r \r ![“Arduino 示例”选项卡](media/iot-hub-arduino-devkit-az3166-get-started/mini-solution/vscode_start.png)\r \r 如果无意中关闭了窗格，可以重新打开它。 使用 `Ctrl+Shift+P` (macOS: `Cmd+Shift+P`) 打开命令面板，键入“Arduino”，然后找到并选择“Arduino: Examples”。\r \r ## <a name=\"provision-azure-services\"></a>预配 Azure 服务\r \r 在解决方案窗口中，通过输入 `task cloud-provision` 并按 `Ctrl+P` (macOS: `Cmd+P`) 来运行任务。\r \r 在 VS Code 终端中，交互式命令行指导你预配所需的 Azure 服务：\r \r ![交互式命令行](media/iot-hub-arduino-devkit-az3166-get-started/mini-solution/connect-iothub/cloud-provision.png)\r \r ## <a name=\"build-and-upload-the-arduino-sketch\"></a>生成并上传 Arduino 草图\r \r ### <a name=\"windows\"></a>Windows\r \r 1. 使用 `Ctrl+P` 运行 `task device-upload`。\r 2. 终端会提示进入配置模式。 为此，请长按按钮 A，然后按下重置按钮并松开。 屏幕将显示 DevKit id 和“配置”。\r \r 这是为了设置在 `task cloud-provision` 步骤中进行检索的连接字符串。\r \r 然后，VS Code 将开始验证并上传 Arduino 草图：\r \r ![验证并上传 Arduino 草图](media/iot-hub-arduino-devkit-az3166-get-started/mini-solution/connect-iothub/device-upload.png)\r \r DevKit 将重新启动并开始运行代码。\r \r > [!NOTE] \r > 有时会收到错误“错误: AZ3166: 未知程序包”。 这是因为板程序包索引没有刷新。 查看此[常见问题解答步骤](https://microsoft.github.io/azure-iot-developer-kit/docs/faq/)以解决此问题。\r \r ### <a name=\"macos\"></a>macOS\r \r 1. 将 DevKit 置于配置模式：按下按钮 A，然后按下重置按钮并松开。 屏幕将显示“配置”。\r 2. 使用 `Cmd+P` 运行 `task device-upload`。\r \r 这是为了设置在 `task cloud-provision` 步骤中进行检索的连接字符串。\r \r 然后，VS Code 将开始验证并上传 Arduino 草图：\r \r ![设备上传](./media/iot-hub-arduino-devkit-az3166-get-started/mini-solution/connect-iothub/device-upload.png)\r \r DevKit 将重新启动并开始运行代码。\r \r > [!NOTE] \r > 有时会收到错误“错误: AZ3166: 未知程序包”。 这是因为板程序包索引没有刷新。 查看此[常见问题解答步骤](https://microsoft.github.io/azure-iot-developer-kit/docs/faq/)以解决此问题。\r \r \r ## <a name=\"test-the-project\"></a>测试项目\r \r 在 VS Code 中，按照以下步骤打开并设置串行监视器：\r \r 1. 单击状态栏上的 `COM[X]` 字样以使用 `STMicroelectronics`: ![com-port](./media/iot-hub-arduino-devkit-az3166-get-started/mini-solution/connect-iothub/com-port.png) 设置正确的 COM 端口\r \r 2. 单击状态栏上的电源插头图标，打开串行监视器：![serial-monitor](./media/iot-hub-arduino-devkit-az3166-get-started/mini-solution/connect-iothub/serial-monitor.png)\r \r 3. 在状态栏上，单击表示波特率的数字并设置为 `115200`：![baud-rate](./media/iot-hub-arduino-devkit-az3166-get-started/mini-solution/connect-iothub/baud-rate.png)\r \r 当看到以下结果时，示例应用程序已成功运行：\r \r * 串行监视器显示与下面截图中内容相同的信息。\r * MXChip IoT DevKit 上的 LED 灯闪烁。\r \r ![VS Code 中的最终输出](./media/iot-hub-arduino-devkit-az3166-get-started/mini-solution/connect-iothub/result-serial-output.png)\r \r ## <a name=\"problems-and-feedback\"></a>问题和反馈\r \r 如果遇到问题，可以参阅[常见问题解答](https://microsoft.github.io/azure-iot-developer-kit/docs/faq/)。 还可在此页中留言，向我们提供反馈。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 现已成功将 MXChip IoT DevKit 连接到 IoT 中心，并将捕获的传感器数据发送到了 IoT 中心。\r \r 若要继续了解 Azure IoT 中心入门知识并浏览其他 IoT 方案，请参阅：\r \r - [使用 iothub-explorer 管理云设备消息传送](./iot-hub-explorer-cloud-device-messaging.md)\r - [使用 Web 应用可视化 Azure IoT 中心的实时传感器数据](./iot-hub-live-data-visualization-in-web-apps.md)\r - [使用 iothub-explorer 进行设备管理](./iot-hub-device-management-iothub-explorer.md)\r \r \r <!--Update_Description: update wording and meta data-->"}