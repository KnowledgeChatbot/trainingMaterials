{"Title":"如何配置 Spring Boot Initializer 应用，以使用 Redis 缓存","Description":"了解如何配置使用 Spring Initializer 创建的 Spring Boot 应用程序，以使用 Azure Redis 缓存。","Content":"# <a name=\"how-to-configure-a-spring-boot-initializer-app-to-use-redis-cache\"></a>如何配置 Spring Boot Initializer 应用，以使用 Redis 缓存\r \r ## <a name=\"overview\"></a>概述\r \r **[Spring Framework]** 是一种开放源代码解决方案，可帮助 Java 开发人员创建企业级应用程序。 基于该平台构建的其中一个更常用的项目是 [Spring Boot]，该项目提供了一种用于创建独立 Java 应用程序的简化方法。 为帮助开发人员开始使用 Spring Boot，在 <https://github.com/spring-guides/> 网站中提供了几个 Spring Boot 包。 除了从基本的 Spring Boot 项目列表中选择之外，**[Spring Initializr]** 也可帮助开发人员开始创建自定义 Spring Boot 应用程序。\r \r 本文提供以下分步指导：使用 Azure 门户创建 Redis 缓存，使用 Spring Initializr 创建自定义应用程序，然后创建使用 Redis 缓存存储并检索数据的 Java web 应用程序。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 为遵循本文介绍的步骤，需要以下先决条件：\r \r - 一个 Azure 订阅；如果没有 Azure 订阅，可以注册[试用版](https://www.azure.cn/pricing/1rmb-trial)。\r \r - [Java 开发工具包 (JDK)](http://www.oracle.com/technetwork/java/javase/downloads/) 1.7 版或更高版本。\r \r - [Apache Maven](http://maven.apache.org/) 3.0 或更高版本。\r \r ## <a name=\"create-a-redis-cache-on-azure\"></a>在 Azure 上创建 Redis 缓存\r \r 1. 浏览到 Azure 门户 <https://portal.azure.cn/>，然后单击“+新建”项。\r \r    ![Azure 门户][AZ01]\r \r 1. 单击“数据库”，然后单击“Redis 缓存”。\r \r    ![Azure 门户][AZ02]\r \r 1. 在“新建 Redis 缓存”页上，指定以下信息：\r \r    - 输入缓存的“DNS 名称”。\r    - 指定“订阅”、“资源组”、“位置”和“定价层”。\r    - 对于本教程，选择“取消阻止端口 6379”。\r \r    > [!NOTE]\r    >\r    > 可以通过 Redis 缓存使用 SSL，但需要使用其他 Redis 客户端，如 Jedis。 有关详细信息，请参阅[如何将 Azure Redis 缓存与 Java 配合使用][Redis Cache with Java]。\r    >\r \r    指定这些选项后，单击“创建”以创建缓存。\r \r    ![Azure 门户][AZ03]\r \r 1. 创建缓存完成后，会看到其列在 Azure“仪表板”上，并显示在“所有资源”和“Redis 缓存”页下。 可在任何上述位置上单击缓存，打开缓存的属性页。\r \r    ![Azure 门户][AZ04]\r \r 1. 显示包含缓存属性列表的页面后，单击“访问密匙”，然后复制缓存的访问密钥。\r \r    ![Azure 门户][AZ05]\r \r ## <a name=\"create-a-custom-application-using-the-spring-initializr\"></a>使用 Spring Initializr 创建自定义应用程序\r \r 1. 浏览到 https://start.spring.io/<>。\r \r 1. 指定要使用 Java 生成的 Maven 项目，输入应用程序的“组”名称和“Aritifact”名称，然后单击链接切换到 Spring Initializr 完整版。\r \r    ![Spring Initializr 的基本选项][SI01]\r \r    > [!NOTE]\r    >\r    > Spring Initializr 会使用“组”和“Artifact”名称创建包名称，例如：com.contoso.myazuredemo。\r    >\r \r 1. 向下滚动到“Web”部分，选中“Web”框，然后向下滚动到“NoSQL”，选中“Redis”框，再滚动到页面底部，单击“生成项目”按钮。\r \r    ![Spring Initializr 的完整选项][SI02]\r \r 1. 出现提示时，将项目下载到本地计算机中的路径。\r \r    ![下载自定义 Spring Boot 项目][SI03]\r \r 1. 提取本地系统上的文件之后，自定义 Spring Boot 应用程序便可进行编辑。\r \r    ![自定义 Spring Boot 项目文件][SI04]\r \r ## <a name=\"configure-your-custom-spring-boot-to-use-your-redis-cache\"></a>配置自定义 Spring Boot 以使用 Redis 缓存\r \r 1. 在应用的“资源”目录中找到 application.properties 文件，或创建此文件（若此文件不存在）。\r \r    ![找到 application.properties 文件][RE01]\r \r 1. 在文本编辑器中打开 application.properties 文件，将以下行添加到文件中，然后将示例值替换为缓存中的相应属性：\r \r    ```yaml\r    # Specify the DNS URI of your Redis cache.\r    spring.redis.host=myspringbootcache.redis.cache.chinacloudapi.cn\r \r    # Specify the port for your Redis cache.\r    spring.redis.port=6379\r \r    # Specify the access key for your Redis cache.\r    spring.redis.password=57686f6120447564652c2049495320526f636b73=\r    ```\r \r    ![编辑 application.properties 文件][RE02]\r \r    > [!NOTE]\r    >\r    > 如果使用其他启用了 SSL 的 Redis 客户端（如 Jedis），可能需要在 application.properties 文件中指定端口 6380。 有关详细信息，请参阅[如何将 Azure Redis 缓存与 Java 配合使用][Redis Cache with Java]。\r    >\r \r 1. 保存并关闭 *application.properties* 文件。\r \r 1. 在包的源文件夹中创建名为“控制器”的文件夹，例如：\r \r    `C:\\SpringBoot\\myazuredemo\\src\\main\\java\\com\\contoso\\myazuredemo\\controller`\r \r    -或-\r \r    `/users/example/home/myazuredemo/src/main/java/com/contoso/myazuredemo/controller`\r \r 1. 在 controller 文件夹中创建一个名为 HelloController.java 的新文件。 在文本编辑器中打开该文件，然后向其添加以下代码：\r \r    ```java\r    package com.contoso.myazuredemo;\r \r    import org.springframework.web.bind.annotation.RequestMapping;\r    import org.springframework.web.bind.annotation.RestController;\r    import org.springframework.beans.factory.annotation.Autowired;\r    import org.springframework.boot.SpringApplication;\r    import org.springframework.boot.autoconfigure.SpringBootApplication;\r    import org.springframework.data.redis.core.StringRedisTemplate;\r    import org.springframework.data.redis.core.ValueOperations;\r \r    @RestController\r    public class HelloController {\r    \r       @Autowired\r       private StringRedisTemplate template;\r \r       @RequestMapping(\"/\")\r       // Define the Hello World controller.\r       public String hello() {\r       \r          ValueOperations<String, String> ops = this.template.opsForValue();\r \r          // Add a Hello World string to your cache.\r          String key = \"greeting\";\r          if (!this.template.hasKey(key)) {\r              ops.set(key, \"Hello World!\");\r          }\r \r          // Return the string from your cache.\r          return ops.get(key);\r       }\r    }\r    ```\r    \r    需要将 `com.contoso.myazuredemo` 替换为项目的包名称的地方。\r \r 1. 保存并关闭 HelloController.java 文件。\r \r 1. 使用 Maven 生成 Spring Boot 应用程序，然后运行该程序，例如：\r \r    ```shell\r    mvn clean package\r    mvn spring-boot:run\r    ```\r \r 1. 使用 Web 浏览器浏览到 http://localhost:8080 以测试 Web 应用，如果有可用的 Curl，也可使用如以下示例所示的语法：\r \r    ```shell\r    curl http://localhost:8080\r    ```\r \r    应会看到“Hello World!” 消息在示例控制器中显示，这是从 Redis 缓存中动态检索到的。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 有关使用 Azure 上的 Spring Boot 应用程序的详细信息，请参阅以下文章：\r \r - [将 Spring Boot 应用程序部署到 Azure 应用服务](../app-service/app-service-deploy-spring-boot-web-app-on-azure.md)\r \r 有关将 Azure 与 Java 配合使用的详细信息，请参阅 [Azure Java 开发人员中心]和[用于 Visual Studio Team Services 的 Java 工具]。\r \r 若要深入了解如何在 Azure 上开始将 Redis 缓存用于 Java，请参阅[如何将 Azure Redis 缓存用于 Java][Redis Cache with Java]。\r \r <!-- URL List -->\r \r [Azure Java 开发人员中心]: /develop/java/\r [Azure account]: https://www.azure.cn/pricing/1rmb-trial/\r [用于 Visual Studio Team Services 的 Java 工具]: https://java.visualstudio.com/\r [Spring Boot]: http://projects.spring.io/spring-boot/\r [Spring Initializr]: https://start.spring.io/\r [Spring Framework]: https://spring.io/\r [Redis Cache with Java]: cache-java-get-started.md\r \r <!-- IMG List -->\r \r [AZ01]: ./media/cache-java-spring-boot-initializer-with-redis-cache/AZ01.png\r [AZ02]: ./media/cache-java-spring-boot-initializer-with-redis-cache/AZ02.png\r [AZ03]: ./media/cache-java-spring-boot-initializer-with-redis-cache/AZ03.png\r [AZ04]: ./media/cache-java-spring-boot-initializer-with-redis-cache/AZ04.png\r [AZ05]: ./media/cache-java-spring-boot-initializer-with-redis-cache/AZ05.png\r \r [SI01]: ./media/cache-java-spring-boot-initializer-with-redis-cache/SI01.png\r [SI02]: ./media/cache-java-spring-boot-initializer-with-redis-cache/SI02.png\r [SI03]: ./media/cache-java-spring-boot-initializer-with-redis-cache/SI03.png\r [SI04]: ./media/cache-java-spring-boot-initializer-with-redis-cache/SI04.png\r \r [RE01]: ./media/cache-java-spring-boot-initializer-with-redis-cache/RE01.png\r [RE02]: ./media/cache-java-spring-boot-initializer-with-redis-cache/RE02.png\r \r <!--Update_Description: wording update-->\r "}