{"Title":"Azure Cosmos DB DocumentDB API：SQL 语法","Description":"Azure Cosmos DB DocumentDB API SQL 查询语言的参考文档。","Content":"# <a name=\"azure-cosmos-db-documentdb-api-sql-syntax-reference\"></a>Azure Cosmos DB DocumentDB API：SQL 语法参考\r \r Azure Cosmos DB DocumentDB API 支持使用熟悉的 SQL（结构化查询语言）风格的语法对分层 JSON 文档执行文档查询，不需要使用显式架构或创建辅助索引。 本主题提供了 DocumentDB API SQL 查询语言的参考文档。\r \r 有关 DocumentDB API SQL 查询语言的演练，请参阅 [Azure Cosmos DB DocumentDB API 的 SQL 查询](documentdb-sql-query.md)。  \r \r 建议你访问 [Query Playground](http://www.documentdb.com/sql/demo)（查询板块），可以在该板块中试用 Azure Cosmos DB，并对数据集运行 SQL 查询。  \r \r ## <a name=\"select-query\"></a>SELECT 查询  \r 从数据库检索 JSON 文档。 支持表达式计算、投影、筛选和联接。  语法约定部分中以表格方式显示了用于描述 SELECT 语句的约定。  \r \r **语法**  \r \r ```\r <select_query> ::=  \r SELECT <select_specification>   \r     [ FROM <from_specification>]   \r     [ WHERE <filter_condition> ]  \r     [ ORDER BY <sort_specification> ]  \r ```  \r \r  **备注**  \r \r  有关每个子句的详细信息，请参阅以下各部分：  \r \r -   [SELECT 子句](#bk_select_query)  \r \r -   [FROM 子句](#bk_from_clause)  \r \r -   [WHERE 子句](#bk_where_clause)  \r \r -   [ORDER BY 子句](#bk_orderby_clause)  \r \r SELECT 语句中的子句必须采用上面显示的顺序。 任何可选子句都可以省略。 但是，如果使用可选子句，则它们必须以正确的顺序出现。  \r \r **SELECT 语句的逻辑处理顺序**  \r \r 各个子句的处理顺序如下所示：  \r \r 1.  [FROM 子句](#bk_from_clause)  \r 2.  [WHERE 子句](#bk_where_clause)  \r 3.  [ORDER BY 子句](#bk_orderby_clause)  \r 4.  [SELECT 子句](#bk_select_query)  \r \r 请注意，这不同于它们在语法中的出现顺序。 这样安排顺序是为了使所处理的子句引入的所有新符号都可见并且可以在后面处理的子句中使用。 例如，可以在 WHERE 和 SELECT 子句中访问在 FROM 子句中声明的别名。  \r \r **空格字符和注释**  \r \r 不属于带引号的字符串或带引号的标识符的一部分的所有空格字符都不是该语言语法的一部分，在分析过程中会被忽略。  \r \r 该查询语言支持 T-SQL 样式的注释，例如  \r \r -   SQL 语句 `-- comment text [newline]`  \r \r 虽然空格字符和注释在语法中没有任何意义，但必须使用它们来分隔标记。 例如：`-1e5` 是一个单一数字标记，而 `: - 1 e5` 是一个减号标记，后跟数字 1 和标识符 e5。  \r \r ##  <a name=\"bk_select_query\"></a> SELECT 子句  \r SELECT 语句中的子句必须采用上面显示的顺序。 任何可选子句都可以省略。 但是，如果使用可选子句，则它们必须以正确的顺序出现。  \r \r **语法**  \r ```  \r SELECT <select_specification>  \r \r <select_specification> ::=   \r       '*'   \r       | <object_property_list>   \r       | VALUE <scalar_expression> [[ AS ] value_alias]  \r \r <object_property_list> ::=   \r { <scalar_expression> [ [ AS ] property_alias ] } [ ,...n ]  \r \r ```  \r \r  **参数**  \r \r  `<select_specification>`  \r \r  要为结果集选择的属性或值。  \r \r  `'*'`  \r \r 指定应当在不进行任何更改的情况下检索值。 指定如果处理的值是一个对象，则将检索所有属性。  \r \r  `<object_property_list>`  \r \r 指定要检索的属性的列表。 每个返回值都是具有指定属性的对象。  \r \r `VALUE`  \r \r 指定应当检索 JSON 值而非整个 JSON 对象。 不同于 `<property_list>`，这不会将投影的值包装在对象中。  \r \r `<scalar_expression>`  \r \r 表示待计算值的表达式。 有关详细信息，请参阅[标量表达式](#bk_scalar_expressions)部分。  \r \r **备注**  \r \r 只有 FROM 子句仅声明了一个别名时，`SELECT *` 语法才有效。 `SELECT *` 提供了标识投影，在不需要投影时可能十分有用。 只有当指定了 FROM 子句并且仅引入了单个输入源时，SELECT * 才有效。  \r \r 请注意，`SELECT <select_list>` 和 `SELECT *` 是“语法糖”，还可以使用简单的 SELECT 语句以另外的方式来表达，如下所示。  \r \r 1.  `SELECT * FROM ... AS from_alias ...`  \r \r      等效于：  \r \r      `SELECT from_alias FROM ... AS from_alias ...`  \r \r 2.  `SELECT <expr1> AS p1, <expr2> AS p2,..., <exprN> AS pN [other clauses...]`  \r \r      等效于：  \r \r      `SELECT VALUE { p1: <expr1>, p2: <expr2>, ..., pN: <exprN> }[other clauses...]`  \r \r **另请参阅**  \r \r [标量表达式](#bk_scalar_expressions)  \r [SELECT 子句](#bk_select_query)  \r \r ##  <a name=\"bk_from_clause\"></a> FROM 子句  \r 指定源或联接的源。 FROM 子句是可选的。 如果未指定，其他子句仍然会执行，就像 FROM 子句提供了单个文档一样。  \r \r **语法**  \r \r ```  \r FROM <from_specification>  \r \r <from_specification> ::=   \r         <from_source> {[ JOIN <from_source>][,...n]}  \r \r <from_source> ::=   \r           <collection_expression> [[AS] input_alias]  \r         | input_alias IN <collection_expression>  \r \r <collection_expression> ::=   \r         ROOT   \r      | collection_name  \r      | input_alias  \r      | <collection_expression> '.' property_name  \r      | <collection_expression> '[' \"property_name\" | array_index ']'  \r ```  \r \r **参数**  \r \r `<from_source>`  \r \r 指定数据源，可以带别名，也可以不带别名。 如果未指定别名，则会使用以下规则从 `<collection_expression>` 推断别名：  \r \r -   如果表达式是一个 collection_name，则会将 collection_name 用作别名。  \r \r -   如果表达式是 `<collection_expression>`，则会将 property_name 用作别名。 如果表达式是一个 collection_name，则会将 collection_name 用作别名。  \r \r AS `input_alias`  \r \r 指定 `input_alias` 是由基础集合表达式返回的值集。  \r \r `input_alias` IN  \r \r 指定 `input_alias` 应当表示通过遍历由基础集合表达式返回的每个数组的所有数组元素而获得的值集。 将忽略基础集合表达式返回的不是数组的任何值。  \r \r `<collection_expression>`  \r \r 指定要用来检索文档的集合表达式。  \r \r `ROOT`  \r \r 指定应当从默认的、当前所连接的集合检索文档。  \r \r `collection_name`  \r \r 指定应当从提供的集合检索文档。 集合的名称必须与当前连接到的集合的名称匹配。  \r \r `input_alias`  \r \r 指定应当从由提供的别名定义的其他源检索文档。  \r \r `<collection_expression> '.' property_`  \r \r 指定应当通过访问由指定集合表达式检索到的所有文档的 `property_name` 属性或 array_index 数组元素来检索文档。  \r \r `<collection_expression> '[' \"property_name\" | array_index ']'`  \r \r 指定应当通过访问由指定集合表达式检索到的所有文档的 `property_name` 属性或 array_index 数组元素来检索文档。  \r \r **备注**  \r \r 在 `<from_source>(` 中提供或推断出的所有别名都必须是唯一的。 语法 `<collection_expression>.`property_name 与 `<collection_expression>' ['\"property_name\"']'` 相同。 但是，如果属性名称包含非标识符字符，可以使用后一种语法。  \r \r **对缺少的属性、缺少的数组元素、undefined 值的处理**  \r \r 如果某个集合表达式访问属性或数组元素并且该值不存在，则将忽略该值并且不做进一步处理。  \r \r **集合表达式上下文作用域**  \r \r 集合表达式的作用域可以是集合或文档：  \r \r -   如果集合表达式的基础源是 ROOT 或 `collection_name`，则表达式的作用域是集合。 这样的表达式表示直接从集合检索到的文档集，不依赖于其他集合表达式的处理。  \r \r -   如果集合表达式的基础源是在查询中在前面引入的 `input_alias`，则表达式的作用域是文档。 这样的表达式表示通过在与具有别名的集合关联的集拥有的每个文档的作用域中对集合表达式进行计算而获得的文档集。  结果集将是通过针对基础集中的每个文档对集合表达式进行计算而获得的并集。  \r \r **联接**  \r \r 在当前版本中，Azure Cosmos DB 支持内联。 其他联接功能即将推出。\r \r 内联可获得参与联接的集的完整叉积。 N 向联接的结果是一个 N 元素元组集，其中，元组中的每个值都与参与联接的具有别名的集相关联，并且可以通过在其他子句中引用该别名进行访问。  \r \r 联接的计算取决于参与其中的各个集的上下文作用域：  \r \r -  集合集 A 与以集合为作用域的集 B 之间的联接将生成集 A 与 B 中所有元素的叉积。\r \r -   集 A 与以文档为作用域的集 B 之间的联接将生成通过针对集 A 中的每个文档对以文档为作用域的集 B 进行计算而得到的所有集的并集。  \r \r  在当前版本中，查询处理器最多支持一个以集合为作用域的表达式。  \r \r **联接示例：**  \r \r 请看下面的 FROM 子句：`<from_source1> JOIN <from_source2> JOIN ... JOIN <from_sourceN>`  \r \r  让每个源定义 `input_alias1, input_alias2, …, input_aliasN`。 此 FROM 子句返回一个 N 元组集（包含 N 个值的元组）。 每个元组拥有通过对它们相应的集遍历所有集合别名所产生的值。  \r \r *JOIN 示例 1，具有 2 个源：*  \r \r - 让 `<from_source1>` 以集合为作用域并表示集 {A, B, C}。  \r \r - 让 `<from_source2>` 以文档为作用域，引用 input_alias1 并表示以下集：  \r \r     {1, 2}，对于 `input_alias1 = A,`  \r \r     {3}，对于 `input_alias1 = B,`  \r \r     {4, 5}，对于 `input_alias1 = C,`  \r \r - FROM 子句 `<from_source1> JOIN <from_source2>` 将生成以下元组：  \r \r     (`input_alias1, input_alias2`)：  \r \r     `(A, 1), (A, 2), (B, 3), (C, 4), (C, 5)`  \r \r *JOIN 示例 2，具有 3 个源：*  \r \r - 让 `<from_source1>` 以集合为作用域并表示集 {A, B, C}。  \r \r - 让 `<from_source2>` 以文档为作用域，引用 `input_alias1` 并表示以下集：  \r \r     {1, 2}，对于 `input_alias1 = A,`  \r \r     {3}，对于 `input_alias1 = B,`  \r \r     {4, 5}，对于 `input_alias1 = C,`  \r \r - 让 `<from_source3>` 以文档为作用域，引用 `input_alias2` 并表示以下集：  \r \r     {100, 200}，对于 `input_alias2 = 1,`  \r \r     {300}，对于 `input_alias2 = 3,`  \r \r - FROM 子句 `<from_source1> JOIN <from_source2> JOIN <from_source3>` 将生成以下元组：  \r \r     (input_alias1, input_alias2, input_alias3)：  \r \r     (A, 1, 100)、(A, 1, 200)、(B, 3, 300)  \r \r > [!NOTE]\r > 对于 `input_alias1`、`input_alias2` 的其他值，由于缺少元组，因此 `<from_source3>` 没有返回任何值。  \r \r *JOIN 示例 3，具有 3 个源：*  \r \r - 让 <from_source1> 以集合为作用域并表示集 {A, B, C}。  \r \r - 让 `<from_source1>` 以集合为作用域并表示集 {A, B, C}。  \r \r - 让 <from_source2> 以文档为作用域，引用 input_alias1 并表示以下集：  \r \r     {1, 2}，对于 `input_alias1 = A,`  \r \r     {3}，对于 `input_alias1 = B,`  \r \r     {4, 5}，对于 `input_alias1 = C,`  \r \r - 让 `<from_source3>` 以 `input_alias1` 为作用域并表示以下集：  \r \r     {100, 200}，对于 `input_alias2 = A,`  \r \r     {300}，对于 `input_alias2 = C,`  \r \r - FROM 子句 `<from_source1> JOIN <from_source2> JOIN <from_source3>` 将生成以下元组：  \r \r     (`input_alias1, input_alias2, input_alias3`)：  \r \r     (A, 1, 100)、(A, 1, 200)、(A, 2, 100)、(A, 2, 200)、(C, 4, 300)、(C, 5, 300)  \r \r > [!NOTE]\r > 这生成了 `<from_source2>` 与 `<from_source3>` 之间的叉积，因为这两者的作用域是同一个 `<from_source1>`。  这生成了 4 个 (2x2) 具有值 A 的元组、0 个 (1x0) 具有值 B 的元组和 2 个 (2x1) 具有值 C 的元组。  \r \r **另请参阅**  \r \r  [SELECT 子句](#bk_select_query)  \r \r ##  <a name=\"bk_where_clause\"></a> WHERE 子句  \r  指定查询返回的文档的搜索条件。  \r \r  **语法**  \r \r ```  \r WHERE <filter_condition>  \r <filter_condition> ::= <scalar_expression>  \r \r ```  \r \r  **参数**  \r \r -   `<filter_condition>`  \r \r      指定需要满足什么条件才会返回文档。  \r \r -   `<scalar_expression>`  \r \r      表示待计算值的表达式。 有关详细信息，请参阅[标量表达式](#bk_scalar_expressions)部分。  \r \r  **备注**  \r \r  指定为筛选条件的表达式的求值结果必须为 true，才会返回文档。 只有布尔值 true 满足条件，任何其他值（undefined、null、false、数字、数组或对象）都不满足条件。  \r \r ##  <a name=\"bk_orderby_clause\"></a> ORDER BY 子句  \r  指定查询返回的结果的排序顺序。  \r \r  **语法**  \r \r ```  \r ORDER BY <sort_specification>  \r <sort_specification> ::= <sort_expression> [, <sort_expression>]  \r <sort_expression> ::= <scalar_expression> [ASC | DESC]  \r \r ```  \r \r  **参数**  \r \r -   `<sort_specification>`  \r \r      指定对查询结果集进行排序时要依据的属性或表达式。 可以通过名称或列别名指定排序列。  \r \r      可以指定多个排序列。 列名称必须唯一。 ORDER BY 子句中排序列的顺序定义了排序结果集的组织。 也就是说，结果集首先按第一个属性排序，然后该有序列表按第二个属性排序，依此类推。  \r \r      ORDER BY 子句中引用的列名称必须与 select 列表中的列或者与在 FROM 子句中指定的表中的列相对应，且没有任何多义性。  \r \r -   `<sort_expression>`  \r \r      指定对查询结果集进行排序时要依据的单个属性或表达式。  \r \r -   `<scalar_expression>`  \r \r      有关详细信息，请参阅[标量表达式](#bk_scalar_expressions)部分。  \r \r -   `ASC | DESC`  \r \r      指定应当按升序或降序对指定列中的值进行排序。 ASC 将按照从最低值到最高值的顺序进行排序。 DESC 将按照从最高值到最低值的顺序进行排序。 ASC 是默认排序顺序。 Null 值被视为最低的可能值。  \r \r  **备注**  \r \r  虽然查询语法支持多个排序依据属性，但Azure Cosmos DB 查询运行时仅支持依据单个属性进行排序，并且仅支持依据属性名称进行排序，也就是说，不支持依据计算属性进行排序。 排序还要求索引策略针对该属性和指定类型包括具有最高精度的范围索引。 有关详细信息，请参阅索引策略文档。  \r \r ##  <a name=\"bk_scalar_expressions\"></a> 标量表达式  \r  标量表达式是符号和运算符的组合，可以对该组合进行计算来获得单个值。 简单表达式可以是常量、属性引用、数组元素引用、别名引用或函数调用。 可以使用运算符将简单表达式组合成复杂表达式。  \r \r  有关标量表达式可以具有的值的详细信息，请参阅[常量](#bk_constants)部分。  \r \r  **语法**  \r \r ```  \r <scalar_expression> ::=  \r        <constant>   \r      | input_alias   \r      | parameter_name  \r      | <scalar_expression>.property_name  \r      | <scalar_expression>'['\"property_name\"|array_index']'  \r      | unary_operator <scalar_expression>  \r      | <scalar_expression> binary_operator <scalar_expression>    \r      | <scalar_expression> ? <scalar_expression> : <scalar_expression>  \r      | <scalar_function_expression>  \r      | <create_object_expression>   \r      | <create_array_expression>  \r      | (<scalar_expression>)   \r \r <scalar_function_expression> ::=  \r         'udf.' Udf_scalar_function([<scalar_expression>][,…n])  \r         | builtin_scalar_function([<scalar_expression>][,…n])  \r \r <create_object_expression> ::=  \r    '{' [{property_name | \"property_name\"} : <scalar_expression>][,…n] '}'  \r \r <create_array_expression> ::=  \r    '[' [<scalar_expression>][,…n] ']'  \r \r ```  \r \r  **参数**  \r \r -   `<constant>`  \r \r      返回一个常量值。 有关详细信息，请参阅[常量](#bk_constants)部分。  \r \r -   `input_alias`  \r \r      表示由 `FROM` 子句中引入的 `input_alias` 定义的值。  \r      此值可以保证不是**未定义的** -- 将跳过输入中的**未定义**值。  \r \r -   `<scalar_expression>.property_name`  \r \r      表示对象的该属性的值。 如果该属性不存在，或者在不是对象的值上引用了该属性，则表达式的求值结果将是 **undefined** 值。  \r \r -   `<scalar_expression>'['\"property_name\"|array_index']'`  \r \r      表示名为 `property_name` 的属性的值或对象/数组中索引为 `array_index` 的数组元素的值。 如果该属性/数组索引不存在，或者在不是对象/数组的值上引用了该属性/数组索引，则表达式的求值结果将是 undefined 值。  \r \r -   `unary_operator <scalar_expression>`  \r \r      表示应用于单个值的运算符。 有关详细信息，请参阅[运算符](#bk_operators)部分。  \r \r -   `<scalar_expression> binary_operator <scalar_expression>`  \r \r      表示应用于两个值的运算符。 有关详细信息，请参阅[运算符](#bk_operators)部分。  \r \r -   `<scalar_function_expression>`  \r \r      表示由函数调用的结果定义的值。  \r \r -   `udf_scalar_function`  \r \r      用户定义的标量函数的名称。  \r \r -   `builtin_scalar_function`  \r \r      内置标量函数的名称。  \r \r -   `<create_object_expression>`  \r \r      表示通过使用指定属性及其值创建新对象而获得的值。  \r \r -   `<create_array_expression>`  \r \r      表示通过创建以指定值为元素的新数组而获得的值  \r \r -   `parameter_name`  \r \r      表示指定的参数名称的值。 参数名称必须以单个 @ 作为第一个字符。  \r \r  **备注**  \r \r  调用内置的或用户定义的标量函数时，必须定义所有参数。 如果有任何参数未定义，则不会调用函数，并且结果将是 undefined。  \r \r  在创建对象时，将跳过任何分配有 undefined 值的属性并且不会将其包括在创建的对象中。  \r \r  在创建数组时，将跳过任何分配有 **undefined** 值的元素值并且不会将其包括在创建的对象中。 这将导致下一个已定义元素取代其位置，这样，创建的数组将不会具有跳过的索引。  \r \r ##  <a name=\"bk_operators\"></a> 运算符  \r  本部分介绍了支持的运算符。 每个运算符都只能分配到一个类别。  \r \r  有关如何处理 **undefined** 值、对输入值的类型要求以及如何处理类型不匹配的值等方面的详细信息，请参阅**运算符类别**。  \r \r  **运算符类别：**  \r \r |**类别**|**详细信息**|  \r |-|-|  \r |**算术**|运算符要求输入为数字。 输出也是数字。 如果有任何输入是 **undefined** 或者是数字之外的类型，则结果将是 **undefined**。|  \r |**按位**|运算符要求输入是 32 位有符号整数。 输出也是 32 位有符号整数。<br /><br /> 将对任何非整数值进行舍入。 正值将向下舍入，负值将向上舍入。<br /><br /> 对于超出 32 位整数范围的值，将通过取其 2 的补码数表示法的最后 32 位对其进行转换。<br /><br /> 如果有任何输入是 **undefined** 或者是数字之外的类型，则结果将是 **undefined**。<br /><br /> **注意：**以上行为与 JavaScript 按位运算符的行为兼容。|  \r |**逻辑**|运算符要求输入为布尔值。 输出也是布尔值。<br />如果有任何输入**未定义**或者是布尔值之外的类型，则结果将是 **undefined**。|  \r |**比较**|运算符要求输入具有相同的类型，且不能未定义。 输出是布尔值。<br /><br /> 如果有任何输入**未定义**或者输入具有不同的类型，则结果将是 **undefined**。<br /><br /> 有关值排序的详细信息，请参阅**进行比较的值的排序**表。|  \r |**字符串**|运算符要求输入为字符串。 输出也是字符串。<br />如果有任何输入**未定义**或者是字符串之外的类型，则结果将是 **undefined**。|  \r \r  **一元运算符：**  \r \r |**名称**|**运算符**|**详细信息**|  \r |-|-|-|  \r |**算术**|+<br /><br /> -|返回数字值。<br /><br /> 按位求反。 返回求反后的数字值。|  \r |**按位**|~|求补数。 返回数字值的补数。|  \r |**逻辑**|**NOT**|求反。 返回求反后的布尔值。|  \r \r  **二元运算符：**  \r \r |**名称**|**运算符**|**详细信息**|  \r |-|-|-|  \r |**算术**|+<br /><br /> -<br /><br /> *<br /><br /> /<br /><br /> %|加。<br /><br /> 减。<br /><br /> 乘。<br /><br /> 除。<br /><br /> 求模。|  \r |**按位**|&#124;<br /><br /> &<br /><br /> ^<br /><br /> <<<br /><br /> >><br /><br /> >>>|按位或。<br /><br /> 按位与。<br /><br /> 按位异或。<br /><br /> 左移。<br /><br /> 右移。<br /><br /> 补零右移。|  \r |**逻辑**|**AND**<br /><br /> **OR**|逻辑连接。 如果两个参数都是 **true**，则返回 **true**，否则返回 **false**。<br /><br /> 逻辑连接。 如果两个参数都是 **true**，则返回 **true**，否则返回 **false**。|  \r |**比较**|**=**<br /><br /> **!=, <>**<br /><br /> **>**<br /><br /> **>=**<br /><br /> **<**<br /><br /> **<=**<br /><br /> **??**|等于。 如果参数相等，则返回 **true**，否则返回 **false**。<br /><br /> 不等于。 如果参数不相等，则返回 **true**，否则返回 **false**。<br /><br /> 大于。 如果第一个参数大于第二个参数，则返回 **true**，否则返回 **false**。<br /><br /> 大于或等于。 如果第一个参数大于或等于第二个参数，则返回 **true**，否则返回 **false**。<br /><br /> 小于。 如果第一个参数小于第二个参数，则返回 **true**，否则返回 **false**。<br /><br /> 小于或等于。 如果第一个参数小于或等于第二个参数，则返回 **true**，否则返回 **false**。<br /><br /> 联合。 如果第一个参数是一个**未定义的**值，则返回第二个参数。|  \r |**字符串**|**&#124;&#124;**|串联。 返回两个参数的串联。|  \r \r  **三元运算符：**  \r \r |三元运算符|?|如果第一个参数的求值结果为 **true**，则返回第二个参数，否则返回第三个参数。|  \r |-|-|-|  \r \r  **进行比较的值的排序**  \r \r |**类型**|**值顺序**|  \r |-|-|  \r |**Undefined**|不可比较。|  \r |**Null**|单一值：**null**|  \r |**数字**|自然实数。<br /><br /> 负无穷大值小于任何其他数字值。<br /><br /> 正无穷大值大于任何其他数字值。**NaN** 值不可比较。 与 **NaN** 进行比较将返回 **undefined** 值。|  \r |**字符串**|字典顺序。|  \r |**数组**|不排序，但可比较是否相等。|  \r |**对象**|不排序，但可比较是否相等。|  \r \r  **备注**  \r \r  在 Azure Cosmos DB 中，在从数据库中实际检索到值之前，值的类型通常未知。 为了支持查询的高效执行，大多数运算符具有严格的类型要求。 另外，运算符本身不执行隐式转换。  \r \r  这意味着诸如 SELECT * FROM ROOT r WHERE r.Age = 21 的查询将仅返回 Age 属性等于数字 21 的文档。 Age 属性等于字符串 \"21\" 或字符串 \"0021\" 的文档将不会匹配，因为表达式 \"21\" = 21 的求值结果是 undefined。 这允许更好地使用索引，因为查找特定值（即数字 21）比搜索不确定数目的可能匹配项（即数字 21 或字符串 \"21\"、\"021\"、\"21.0\" …）更为快速。 这与 JavaScript 针对不同类型的值采用运算符进行计算时的方式不同。  \r \r  **数组和对象的相等和比较**  \r \r  使用范围运算符（>、>=、<、<=）对数组或对象值进行比较将导致 undefined，因为没有为对象或数组值定义顺序。 但是，支持使用等于/不等于运算符（=、!=、<>），并且可以在结构上对值进行比较。  \r \r  如果两个数组具有相同数目的元素并且在匹配位置的元素也相等，则这两个数组相等。 如果对任何元素对进行比较时导致 undefined，则数组比较结果为 undefined。  \r \r  如果两个对象定义了相同的属性并且匹配属性的值也相等，则这两个对象相等。 如果对任何属性值对进行比较时导致 undefined，则对象比较结果为 undefined。  \r \r ##  <a name=\"bk_constants\"></a> 常量  \r  常量也称为文本或标量值，是一个表示特定数据值的符号。 常量的格式取决于它表示的值的数据类型。  \r \r  **支持的标量数据类型：**  \r \r |**类型**|**值顺序**|  \r |-|-|  \r |**Undefined**|单一值：**undefined**|  \r |**Null**|单一值：**null**|  \r |**布尔值**|值：**false**、**true**。|  \r |**数字**|双精度浮点数，按 IEEE 754 标准。|  \r |**字符串**|由零个或多个 Unicode 字符构成的序列。 字符串必须括在单引号或双引号中。|  \r |**数组**|由零个或多个元素构成的序列。 每个元素可以是任何标量数据类型（Undefined 除外）的值。|  \r |**对象**|由零个或多个名称/值对构成的无序集。 名称是一个 Unicode 字符串，值可以是任何标量数据类型，但 **Undefined** 除外。|  \r \r  **语法**  \r \r ```  \r <constant> ::=  \r    <undefined_constant>  \r      | <null_constant>   \r      | <boolean_constant>   \r      | <number_constant>   \r      | <string_constant>   \r      | <array_constant>   \r      | <object_constant>   \r \r <undefined_constant> ::= undefined  \r \r <null_constant> ::= null  \r \r <boolean_constant> ::= false | true  \r \r <number_constant> ::= decimal_literal | hexadecimal_literal  \r \r <string_constant> ::= string_literal  \r \r <array_constant> ::=  \r     '[' [<constant>][,...n] ']'  \r \r <object_constant> ::=   \r    '{' [{property_name | \"property_name\"} : <constant>][,...n] '}'  \r \r ```  \r \r  **参数**  \r \r 1.  `<undefined_constant>; undefined`  \r \r      表示类型为 Undefined 的未定义值。  \r \r 2.  `<null_constant>; null`  \r \r      表示类型为 **Null** 的 **null** 值。  \r \r 3.  `<boolean_constant>`  \r \r      表示类型为 Boolean 的常量。  \r \r 4.  `false`  \r \r      表示类型为 Boolean 的 **false** 值。  \r \r 5.  `true`  \r \r      表示类型为 Boolean 的 **true** 值。  \r \r 6.  `<number_constant>`  \r \r      表示一个常量。  \r \r 7.  `decimal_literal`  \r \r      十进制文本是使用十进制表示法或科学记数法表示的数字。  \r \r 8.  `hexadecimal_literal`  \r \r      十六进制文本是使用前缀“0x”和后跟的一个或多个十六进制数位表示的数字。  \r \r 9. `<string_constant>`  \r \r      表示类型为 String 的常量。  \r \r 10. `string _literal`  \r \r      字符串文本是以零个或多个 Unicode 字符序列或转义符序列表示的 Unicode 字符串。 字符串文本括在单引号 (') 或双引号 (\") 中。  \r \r  允许以下转义序列：  \r \r |**转义序列**|**说明**|**Unicode 字符**|  \r |-|-|-|  \r |\\\\'|撇号 (')|U+0027|  \r |\\\\\"|引号 (\")|U+0022|  \r |\\\\\\|反斜线号 (\\\\)|U+005C|  \r |\\\\/|斜线号 (/)|U+002F|  \r |\\b|退格键|U+0008|  \r |\\f|换页符|U+000C|  \r |\\n|换行符|U+000A|  \r |\\r|回车键|U+000D|  \r |\\t|tab 键|U+0009|  \r |\\uXXXX|由 4 个十六进制数位定义的 Unicode 字符。|U+XXXX|  \r \r ##  <a name=\"bk_query_perf_guidelines\"></a> 查询性能准则  \r  对于大型集合，为了使查询高效执行，应当使用可通过一个或多个索引来发挥作用的筛选器。  \r \r  对于索引查找，将考虑以下筛选器：  \r \r -   对文档路径表达式和常量使用等于运算符 ( = )。  \r \r -   对文档路径表达式和数字常量使用范围运算符（<、\\<=、>、>=）。  \r \r -   文档路径表达式代表对所引用的数据库集合中的文档中的常量路径进行标识的任何表达式。  \r \r  **文档路径表达式**  \r \r  文档路径表达式是数据库文档集合中的文档上的属性或数组索引器评估器的路径的表达式。 此路径可用于在数据库集合的文档中直接标识筛选器中引用的值的位置。  \r \r  若要将表达式视为文档路径表达式，它应当：  \r \r 1.  直接引用集合根路径。  \r \r 2.  引用某个文档路径表达式的属性或常量数组索引器  \r \r 3.  引用表示某个文档路径表达式的别名。  \r \r      **语法约定**  \r \r      下表介绍了 DocumentDB API 查询语言参考中用来描述语法的约定。  \r \r     |**约定**|**用于**|  \r     |-|-|    \r     |大写|不区分大小写的关键字。|  \r     |小写|区分大小写的关键字。|  \r     |\\<非终端>|单独定义的非终端。|  \r     |\\<非终端> ::=|非终端的语法定义。|  \r     |other_terminal|以文字详细描述的终端（标记）。|  \r     |标识符|标识符。 仅允许以下字符：a-z A-Z 0-9 _第一个字符不能为数字。|  \r     |\"字符串\"|带引号的字符串。 允许任何有效的字符串。 请参阅 string_literal 的说明。|  \r     |'符号'|属于语法的一部分的文字符号。|  \r     |&#124;（竖线）|语法项的备选方法。 只能使用指定项之一。|  \r     |[ ] /（方括号）|方括号中包含一个或多个可选项。|  \r     |[ ,...n ]|表示前面的项可以重复 n 次。 各个实例以逗号分隔。|  \r     |[ ...n ]|表示前面的项可以重复 n 次。 各个实例以空格分隔。|  \r \r ##  <a name=\"bk_built_in_functions\"></a> 内置函数  \r  Azure Cosmos DB 提供了许多内置 SQL 函数。 下面列出了内置函数的类别。  \r \r |函数|说明|  \r |--------------|-----------------|  \r |[数学函数](#bk_mathematical_functions)|每个数学函数均执行一个计算，通常基于作为参数提供的输出值，并返回数值。|  \r |[类型检查函数](#bk_type_checking_functions)|类型检查函数允许检查 SQL 查询内表达式的类型。|  \r |[字符串函数](#bk_string_functions)|字符串函数对字符串输入值执行运算，并返回字符串、数值或布尔值。|  \r |[数组函数](#bk_array_functions)|数组函数对数组输入值执行运算，并返回数值、布尔值或数组值。|  \r |[空间函数](#bk_spatial_functions)|空间函数对空间对象输入值执行运算，并返回数值或布尔值。|  \r \r ###  <a name=\"bk_mathematical_functions\"></a> 数学函数  \r  以下函数每个均执行一个计算（通常基于作为参数提供的输入值）并返回数值。  \r \r ||||  \r |-|-|-|  \r |[ABS](#bk_abs)|[ACOS](#bk_acos)|[ASIN](#bk_asin)|  \r |[ATAN](#bk_atan)|[ATN2](#bk_atn2)|[CEILING](#bk_ceiling)|  \r |[COS](#bk_cos)|[COT](#bk_cot)|[DEGREES](#bk_degrees)|  \r |[EXP](#bk_exp)|[FLOOR](#bk_floor)|[LOG](#bk_log)|  \r |[LOG10](#bk_log10)|[PI](#bk_pi)|[POWER](#bk_power)|  \r |[RADIANS](#bk_radians)|[ROUND](#bk_round)|[SIN](#bk_sin)|  \r |[SQRT](#bk_sqrt)|[SQUARE](#bk_square)|[SIGN](#bk_sign)|  \r |[TAN](#bk_tan)|[TRUNC](#bk_trunc)||  \r \r ####  <a name=\"bk_abs\"></a> ABS  \r  返回指定数值表达式的绝对（正）值。  \r \r  **语法**  \r \r ```  \r ABS (<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例显示了对三个不同数字使用 ABS 函数的结果。  \r \r ```  \r SELECT ABS(-1), ABS(0), ABS(1)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 1, $2: 0, $3: 1}]  \r ```  \r \r ####  <a name=\"bk_acos\"></a> ACOS  \r  返回角度（弧度），其余弦是指定的数值表达式；也被称为反余弦。  \r \r  **语法**  \r \r ```  \r ACOS(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例返回 -1 的 ACOS。  \r \r ```  \r SELECT ACOS(-1)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": 3.1415926535897931}]  \r ```  \r \r ####  <a name=\"bk_asin\"></a> ASIN  \r  返回角度（弧度），其正弦是指定的数值表达式。 也被称为反正弦。  \r \r  **语法**  \r \r ```  \r ASIN(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例返回 -1 的 ASIN。  \r \r ```  \r SELECT ASIN(-1)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": -1.5707963267948966}]  \r ```  \r \r ####  <a name=\"bk_atan\"></a> ATAN  \r  返回角度（弧度），其正切是指定的数值表达式。 这也被称为反正切。  \r \r  **语法**  \r \r ```  \r ATAN(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例返回指定值的 ATAN。  \r \r ```  \r SELECT ATAN(-45.01)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": -1.5485826962062663}]  \r ```  \r \r ####  <a name=\"bk_atn2\"></a> ATN2  \r  返回 y/x 的反正切的主体值，以弧度表示。  \r \r  **语法**  \r \r ```  \r ATN2(<numeric_expression>, <numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例为指定的 x 和 y 组件计算 ATN2。  \r \r ```  \r SELECT ATN2(35.175643, 129.44)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": 1.3054517947300646}]  \r ```  \r \r ####  <a name=\"bk_ceiling\"></a> CEILING  \r  返回大于或等于指定数值表达式的最小整数值。  \r \r  **语法**  \r \r ```  \r CEILING (<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例显示了如何对正值、负值和零值使用 CEILING 函数。  \r \r ```  \r SELECT CEILING(123.45), CEILING(-123.45), CEILING(0.0)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 124, $2: -123, $3: 0}]  \r ```  \r \r ####  <a name=\"bk_cos\"></a> COS  \r  返回指定表达式中指定角度的三角余弦（弧度）。  \r \r  **语法**  \r \r ```  \r COS(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例计算指定角度的 COS。  \r \r ```  \r SELECT COS(14.78)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": -0.59946542619465426}]  \r ```  \r \r ####  <a name=\"bk_cot\"></a> COT  \r  返回指定数值表达式中指定角度的三角余切。  \r \r  **语法**  \r \r ```  \r COT(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例计算指定角度的 COT。  \r \r ```  \r SELECT COT(124.1332)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": -0.040311998371148884}]  \r ```  \r \r ####  <a name=\"bk_degrees\"></a> DEGREES  \r  返回指定角度（弧度）的相应角度（度）。  \r \r  **语法**  \r \r ```  \r DEGREES (<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例返回 PI/2 弧度表示的角度的度数。  \r \r ```  \r SELECT DEGREES(PI()/2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": 90}]  \r ```  \r \r ####  <a name=\"bk_floor\"></a> FLOOR  \r  返回小于或等于指定数值表达式的最大整数。  \r \r  **语法**  \r \r ```  \r FLOOR (<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例显示了如何对正值、负值和零值使用 FLOOR 函数。  \r \r ```  \r SELECT FLOOR(123.45), FLOOR(-123.45), FLOOR(0.0)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 123, $2: -124, $3: 0}]  \r ```  \r \r ####  <a name=\"bk_exp\"></a> EXP  \r  返回指定数值表达式的指数值。  \r \r  **语法**  \r \r ```  \r EXP (<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **备注**  \r \r  常量 **e** (2.718281…) 是自然对数的底。  \r \r  某个数字的指数是对常量 **e** 执行该次数的乘幂计算。 例如，EXP(1.0) = e^1.0 = 2.71828182845905，EXP(10) = e^10 = 22026.4657948067。  \r \r  某个数字的自然对数的指数是该数字本身：EXP (LOG (n)) = n。 某个数字的指数的自然对数是该数字本身：LOG (EXP (n)) = n。  \r \r  **示例**  \r \r  以下示例声明一个变量并返回指定变量 (10) 的指数值。  \r \r ```  \r SELECT EXP(10)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 22026.465794806718}]  \r ```  \r \r  以下示例返回 20 的自然对数的指数值和 20 的指数的自然对数。 因为这些函数是另一个的反函数，因此，在两个示例中，返回值在进行浮点算术舍入后都是 20。  \r \r ```  \r SELECT EXP(LOG(20)), LOG(EXP(20))  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 19.999999999999996, $2: 20}]  \r ```  \r \r ####  <a name=\"bk_log\"></a> LOG  \r  返回指定数值表达式的自然对数。  \r \r  **语法**  \r \r ```  \r LOG (<numeric_expression> [, <base>])  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r -   `base`  \r \r      可选的数值参数，用于设置对数的底。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **备注**  \r \r  默认情况下，LOG() 返回自然对数。 可以通过使用可选的 base 参数将对数的底更改为其他值。  \r \r  自然对数是以 **e** 为底的对数，其中，**e** 是一个无理常量，约等于 2.718281828。  \r \r  某个数字的指数的自然对数是该数字本身： LOG( EXP( n ) ) = n。 某个数字的自然对数的指数是该数字本身：EXP( LOG( n ) ) = n。  \r \r  **示例**  \r \r  以下示例声明一个变量并返回指定变量 (10) 的对数值。  \r \r ```  \r SELECT LOG(10)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 2.3025850929940459}]  \r ```  \r \r  以下示例计算某个数字的指数的 LOG。  \r \r ```  \r SELECT EXP(LOG(10))  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 10.000000000000002}]  \r ```  \r \r ####  <a name=\"bk_log10\"></a> LOG10  \r  返回指定数值表达式以 10 为底的对数。  \r \r  **语法**  \r \r ```  \r LOG10 (<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **备注**  \r \r  LOG10 和 POWER 函数互为反函数。 例如，10 ^ LOG10(n) = n。  \r \r  **示例**  \r \r  以下示例声明一个变量并返回指定变量 (100) 的 LOG10 值。  \r \r ```  \r SELECT LOG10(100)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 2}]  \r ```  \r \r ####  <a name=\"bk_pi\"></a> PI  \r  返回 PI 的常数值。  \r \r  **语法**  \r \r ```  \r PI ()  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例返回 PI 的值。  \r \r ```  \r SELECT PI()  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": 3.1415926535897931}]  \r ```  \r \r ####  <a name=\"bk_power\"></a> POWER  \r  返回指定表达式的指定幂的值。  \r \r  **语法**  \r \r ```  \r POWER (<numeric_expression>, <y>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r -   `y`  \r \r      是要将 `numeric_expression` 提升到的幂次。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下数字演示了如何求某个数字的 3 次幂（数字的立方）。  \r \r ```  \r SELECT POWER(2, 3), POWER(2.5, 3)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 8, $2: 15.625}]  \r ```  \r \r ####  <a name=\"bk_radians\"></a> RADIANS  \r  返回输入的数值表达式（度）的弧度。  \r \r  **语法**  \r \r ```  \r RADIANS (<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例采用几个角度作为输入并返回其对应的弧度值。  \r \r ```  \r SELECT RADIANS(-45.01), RADIANS(-181.01), RADIANS(0), RADIANS(0.1472738), RADIANS(197.1099392)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{  \r        \"$1\": -0.7855726963226477,  \r        \"$2\": -3.1592204790349356,  \r        \"$3\": 0,  \r        \"$4\": 0.0025704127119236249,  \r        \"$5\": 3.4402174274458375  \r    }]  \r ```  \r \r ####  <a name=\"bk_round\"></a> ROUND  \r  返回一个数值，四舍五入到最接近的整数值。  \r \r  **语法**  \r \r ```  \r ROUND(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例将以下正数和负数舍入到最接近的整数。  \r \r ```  \r SELECT ROUND(2.4), ROUND(2.6), ROUND(2.5), ROUND(-2.4), ROUND(-2.6)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 2, $2: 3, $3: 3, $4: -2, $5: -3}]  \r ```  \r \r ####  <a name=\"bk_sign\"></a> SIGN  \r  返回指定数值表达式的正数 (+1)、零 (0) 或负数 (-1)。  \r \r  **语法**  \r \r ```  \r SIGN(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例返回数字 -2 到 2 的 SIGN 值。  \r \r ```  \r SELECT SIGN(-2), SIGN(-1), SIGN(0), SIGN(1), SIGN(2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: -1, $2: -1, $3: 0, $4: 1, $5: 1}]  \r ```  \r \r ####  <a name=\"bk_sin\"></a> SIN  \r  返回指定表达式中指定角度的三角正弦（弧度）。  \r \r  **语法**  \r \r ```  \r SIN(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例计算指定角度的 SIN。  \r \r ```  \r SELECT SIN(45.175643)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": 0.929607286611012}]  \r ```  \r \r ####  <a name=\"bk_sqrt\"></a> SQRT  \r  返回指定数值的平方根。  \r \r  **语法**  \r \r ```  \r SQRT(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例返回数字 1-3 的平方根。  \r \r ```  \r SELECT SQRT(1), SQRT(2.0), SQRT(3)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 1, $2: 1.4142135623730952, $3: 1.7320508075688772}]  \r ```  \r \r ####  <a name=\"bk_square\"></a> SQUARE  \r  返回指定数字值的平方。  \r \r  **语法**  \r \r ```  \r SQUARE(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例返回数字 1-3 的平方。  \r \r ```  \r SELECT SQUARE(1), SQUARE(2.0), SQUARE(3)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 1, $2: 4, $3: 9}]  \r ```  \r \r ####  <a name=\"bk_tan\"></a> TAN  \r  返回在指定表达式中以弧度表示的指定角度的正切。  \r \r  **语法**  \r \r ```  \r TAN (<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例计算 PI()/2 的正切。  \r \r ```  \r SELECT TAN(PI()/2);  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": 16331239353195370 }]  \r ```  \r \r ####  <a name=\"bk_trunc\"></a> TRUNC  \r  返回一个数值，截断到最接近的整数值。  \r \r  **语法**  \r \r ```  \r TRUNC(<numeric_expression>)  \r ```  \r \r  **参数**  \r \r -   `numeric_expression`  \r \r      是一个数值表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例将以下正数和负数截断到最接近的整数值。  \r \r ```  \r SELECT TRUNC(2.4), TRUNC(2.6), TRUNC(2.5), TRUNC(-2.4), TRUNC(-2.6)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: 2, $2: 2, $3: 2, $4: -2, $5: -2}]  \r ```  \r \r ###  <a name=\"bk_type_checking_functions\"></a> 类型检查函数  \r  以下函数支持针对输入值执行类型检查，并且每个函数将返回一个布尔值。  \r \r ||||  \r |-|-|-|  \r |[IS_ARRAY](#bk_is_array)|[IS_BOOL](#bk_is_bool)|[IS_DEFINED](#bk_is_defined)|  \r |[IS_NULL](#bk_is_null)|[IS_NUMBER](#bk_is_number)|[IS_OBJECT](#bk_is_object)|  \r |[IS_PRIMITIVE](#bk_is_primitive)|[IS_STRING](#bk_is_string)||  \r \r ####  <a name=\"bk_is_array\"></a> IS_ARRAY  \r  返回一个布尔值，指示指定表达式类型是否为数组。  \r \r  **语法**  \r \r ```  \r IS_ARRAY(<expression>)  \r ```  \r \r  **参数**  \r \r -   `expression`  \r \r      是任何有效的表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例使用 IS_ARRAY 函数检查 JSON 布尔、数字、字符串、null、对象、数组和 undefined 类型的对象。  \r \r ```  \r SELECT   \r  IS_ARRAY(true),   \r  IS_ARRAY(1),  \r  IS_ARRAY(\"value\"),  \r  IS_ARRAY(null),  \r  IS_ARRAY({prop: \"value\"}),   \r  IS_ARRAY([1, 2, 3]),  \r  IS_ARRAY({prop: \"value\"}.prop2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: false, $2: false, $3: false, $4: false, $5: false, $6: true}]  \r ```  \r \r ####  <a name=\"bk_is_bool\"></a> IS_BOOL  \r  返回一个布尔值，指示指定表达式的类型是否为布尔表达式。  \r \r  **语法**  \r \r ```  \r IS_BOOL(<expression>)  \r ```  \r \r  **参数**  \r \r -   `expression`  \r \r      是任何有效的表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例使用 IS_BOOL 函数检查 JSON 布尔、数字、字符串、null、对象、数组和 undefined 类型的对象。  \r \r ```  \r SELECT   \r     IS_BOOL(true),   \r     IS_BOOL(1),  \r     IS_BOOL(\"value\"),   \r     IS_BOOL(null),  \r     IS_BOOL({prop: \"value\"}),   \r     IS_BOOL([1, 2, 3]),  \r     IS_BOOL({prop: \"value\"}.prop2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: true, $2: false, $3: false, $4: false, $5: false, $6: false}]  \r ```  \r \r ####  <a name=\"bk_is_defined\"></a> IS_DEFINED  \r  返回一个布尔，它指示属性是否已经分配了值。  \r \r  **语法**  \r \r ```  \r IS_DEFINED(<expression>)  \r ```  \r \r  **参数**  \r \r -   `expression`  \r \r      是任何有效的表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例检查指定的 JSON 文档中是否存在某个属性。 第一个示例返回 true，因为“a” 存在；第二个示例返回 false，因为“b”不存在。  \r \r ```  \r SELECT IS_DEFINED({ \"a\" : 5 }.a), IS_DEFINED({ \"a\" : 5 }.b)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{  \r        \"$1\": true,    \r        \"$2\": false   \r    }]  \r ```  \r \r ####  <a name=\"bk_is_null\"></a> IS_NULL  \r  返回一个布尔值，指示指定表达式的类型是否为 null。  \r \r  **语法**  \r \r ```  \r IS_NULL(<expression>)  \r ```  \r \r  **参数**  \r \r -   `expression`  \r \r      是任何有效的表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例使用 IS_NUMBER 函数检查 JSON 布尔、数字、字符串、null、对象、数组和 undefined 类型的对象。  \r \r ```  \r SELECT   \r     IS_NULL(true),   \r     IS_NULL(1),  \r     IS_NULL(\"value\"),   \r     IS_NULL(null),  \r     IS_NULL({prop: \"value\"}),   \r     IS_NULL([1, 2, 3]),  \r     IS_NULL({prop: \"value\"}.prop2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: false, $2: false, $3: false, $4: true, $5: false, $6: false}]  \r ```  \r \r ####  <a name=\"bk_is_number\"></a> IS_NUMBER  \r  返回一个布尔值，指示指定表达式的类型是否为数字。  \r \r  **语法**  \r \r ```  \r IS_NUMBER(<expression>)  \r ```  \r \r  **参数**  \r \r -   `expression`  \r \r      是任何有效的表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例使用 IS_NUMBER 函数检查 JSON 布尔、数字、字符串、null、对象、数组和 undefined 类型的对象。  \r \r ```  \r SELECT   \r     IS_NUMBER(true),   \r     IS_NUMBER(1),  \r     IS_NUMBER(\"value\"),   \r     IS_NUMBER(null),  \r     IS_NUMBER({prop: \"value\"}),   \r     IS_NUMBER([1, 2, 3]),  \r     IS_NUMBER({prop: \"value\"}.prop2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: false, $2: true, $3: false, $4: false, $5: false, $6: false}]  \r ```  \r \r ####  <a name=\"bk_is_object\"></a> IS_OBJECT  \r  返回一个布尔值，指示指定表达式的类型是否为 JSON 对象。  \r \r  **语法**  \r \r ```  \r IS_OBJECT(<expression>)  \r ```  \r \r  **参数**  \r \r -   `expression`  \r \r      是任何有效的表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例使用 IS_OBJECT 函数检查 JSON 布尔、数字、字符串、null、对象、数组和 undefined 类型的对象。  \r \r ```  \r SELECT   \r     IS_OBJECT(true),   \r     IS_OBJECT(1),  \r     IS_OBJECT(\"value\"),   \r     IS_OBJECT(null),  \r     IS_OBJECT({prop: \"value\"}),   \r     IS_OBJECT([1, 2, 3]),  \r     IS_OBJECT({prop: \"value\"}.prop2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: false, $2: false, $3: false, $4: false, $5: true, $6: false}]  \r ```  \r \r ####  <a name=\"bk_is_primitive\"></a> IS_PRIMITIVE  \r  返回一个布尔值，指示指定表达式的类型是否为基元（字符串、布尔值、数字或 null）。  \r \r  **语法**  \r \r ```  \r IS_PRIMITIVE(<expression>)  \r ```  \r \r  **参数**  \r \r -   `expression`  \r \r      是任何有效的表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例使用 IS_PRIMITIVE 函数检查 JSON 布尔、数字、字符串、null、对象、数组和 undefined 类型的对象。  \r \r ```  \r SELECT   \r            IS_PRIMITIVE(true),   \r            IS_PRIMITIVE(1),  \r            IS_PRIMITIVE(\"value\"),   \r            IS_PRIMITIVE(null),  \r            IS_PRIMITIVE({prop: \"value\"}),   \r            IS_PRIMITIVE([1, 2, 3]),  \r            IS_PRIMITIVE({prop: \"value\"}.prop2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": true, \"$2\": true, \"$3\": true, \"$4\": true, \"$5\": false, \"$6\": false, \"$7\": false}]  \r ```  \r \r ####  <a name=\"bk_is_string\"></a> IS_STRING  \r  返回一个布尔值，指示指定表达式的类型是否为字符串。  \r \r  **语法**  \r \r ```  \r IS_STRING(<expression>)  \r ```  \r \r  **参数**  \r \r -   `expression`  \r \r      是任何有效的表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例使用 IS_STRING 函数检查 JSON 布尔、数字、字符串、null、对象、数组和 undefined 类型的对象。  \r \r ```  \r SELECT   \r        IS_STRING(true),   \r        IS_STRING(1),  \r        IS_STRING(\"value\"),   \r        IS_STRING(null),  \r        IS_STRING({prop: \"value\"}),   \r        IS_STRING([1, 2, 3]),  \r        IS_STRING({prop: \"value\"}.prop2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{$1: false, $2: false, $3: true, $4: false, $5: false, $6: false}]  \r ```  \r \r ###  <a name=\"bk_string_functions\"></a> 字符串函数  \r  下面的标量函数对字符串输入值执行操作，并返回字符串、数值或布尔值。  \r \r ||||  \r |-|-|-|  \r |[CONCAT](#bk_concat)|[CONTAINS](#bk_contains)|[ENDSWITH](#bk_endswith)|  \r |[INDEX_OF](#bk_index_of)|[LEFT](#bk_left)|[LENGTH](#bk_length)|  \r |[LOWER](#bk_lower)|[LTRIM](#bk_ltrim)|[REPLACE](#bk_replace)|  \r |[REPLICATE](#bk_replicate)|[REVERSE](#bk_reverse)|[RIGHT](#bk_right)|  \r |[RTRIM](#bk_rtrim)|[STARTSWITH](#bk_startswith)|[SUBSTRING](#bk_substring)|  \r |[UPPER](#bk_upper)|||  \r \r ####  <a name=\"bk_concat\"></a> CONCAT  \r  返回一个字符串，该字符串是连接两个或多个字符串值的结果。  \r \r  **语法**  \r \r ```  \r CONCAT(<str_expr>, <str_expr> [, <str_expr>])  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例返回将指定值串联后形成的字符串。  \r \r ```  \r SELECT CONCAT(\"abc\", \"def\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"abcdef\"}  \r ```  \r \r ####  <a name=\"bk_contains\"></a> CONTAINS  \r  返回一个布尔值，该值指示第一个字符串表达式是否包含第二个字符串表达式。  \r \r  **语法**  \r \r ```  \r CONTAINS(<str_expr>, <str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例检查“abc”是否包含“ab”以及是否包含“d”。  \r \r ```  \r SELECT CONTAINS(\"abc\", \"ab\"), CONTAINS(\"abc\", \"d\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": true, \"$2\": false}]  \r ```  \r \r ####  <a name=\"bk_endswith\"></a> ENDSWITH  \r  返回一个布尔值，指示第一个字符串表达式是否以第二个字符串表达式结尾。  \r \r  **语法**  \r \r ```  \r ENDSWITH(<str_expr>, <str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例的返回结果指示“abc”是否以“b”和“bc”结尾。  \r \r ```  \r SELECT ENDSWITH(\"abc\", \"b\"), ENDSWITH(\"abc\", \"bc\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": false, \"$2\": true}]  \r ```  \r \r ####  <a name=\"bk_index_of\"></a> INDEX_OF  \r  返回第一个指定的字符串表达式中第一次出现第二个字符串表达式的起始位置，如果未找到字符串，则返回 -1。  \r \r  **语法**  \r \r ```  \r INDEX_OF(<str_expr>, <str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例返回“abc”内的各个子字符串的索引。  \r \r ```  \r SELECT INDEX_OF(\"abc\", \"ab\"), INDEX_OF(\"abc\", \"b\"), INDEX_OF(\"abc\", \"c\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": 0, \"$2\": 1, \"$3\": -1}]  \r ```  \r \r ####  <a name=\"bk_left\"></a> LEFT  \r  返回具有指定字符数的字符串的左侧部分。  \r \r  **语法**  \r \r ```  \r LEFT(<str_expr>, <num_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r -   `num_expr`  \r \r      是任何有效的数值表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例根据不同的长度值返回“abc”的左侧部分。  \r \r ```  \r SELECT LEFT(\"abc\", 1), LEFT(\"abc\", 2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"a\", \"$2\": \"ab\"}]  \r ```  \r \r ####  <a name=\"bk_length\"></a> LENGTH  \r  返回指定字符串表达式的字符数。  \r \r  **语法**  \r \r ```  \r LENGTH(<str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例返回某个字符串的长度。  \r \r ```  \r SELECT LENGTH(\"abc\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": 3}]  \r ```  \r \r ####  <a name=\"bk_lower\"></a> LOWER  \r  返回在将大写字符数据转换为小写后的字符串表达式。  \r \r  **语法**  \r \r ```  \r LOWER(<str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例演示了如何在查询中使用 LOWER。  \r \r ```  \r SELECT LOWER(\"Abc\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"abc\"}]  \r \r ```  \r \r ####  <a name=\"bk_ltrim\"></a> LTRIM  \r  返回删除前导空格后的字符串表达式。  \r \r  **语法**  \r \r ```  \r LTRIM(<str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例演示了如何在查询中使用 LTRIM。  \r \r ```  \r SELECT LTRIM(\"  abc\"), LTRIM(\"abc\"), LTRIM(\"abc   \")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"abc\", \"$2\": \"abc\", \"$3\": \"abc   \"}]  \r ```  \r \r ####  <a name=\"bk_replace\"></a> REPLACE  \r  将出现的所有指定字符串值替换为另一个字符串值。  \r \r  **语法**  \r \r ```  \r REPLACE(<str_expr>, <str_expr>, <str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例演示了如何在查询中使用 REPLACE。  \r \r ```  \r SELECT REPLACE(\"This is a Test\", \"Test\", \"desk\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"This is a desk\"}]  \r ```  \r \r ####  <a name=\"bk_replicate\"></a> REPLICATE  \r  将一个字符串值重复指定的次数。  \r \r  **语法**  \r \r ```  \r REPLICATE(<str_expr>, <num_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r -   `num_expr`  \r \r      是任何有效的数值表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例演示了如何在查询中使用 REPLICATE。  \r \r ```  \r SELECT REPLICATE(\"a\", 3)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"aaa\"}]  \r ```  \r \r ####  <a name=\"bk_reverse\"></a> REVERSE  \r  返回字符串值的逆序排序形式。  \r \r  **语法**  \r \r ```  \r REVERSE(<str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例演示了如何在查询中使用 REVERSE。  \r \r ```  \r SELECT REVERSE(\"Abc\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"cbA\"}]  \r ```  \r \r ####  <a name=\"bk_right\"></a> RIGHT  \r  返回具有指定字符数的字符串的右侧部分。  \r \r  **语法**  \r \r ```  \r RIGHT(<str_expr>, <num_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r -   `num_expr`  \r \r      是任何有效的数值表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例根据不同的长度值返回“abc”的右侧部分。  \r \r ```  \r SELECT RIGHT(\"abc\", 1), RIGHT(\"abc\", 2)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"c\", \"$2\": \"bc\"}]  \r ```  \r \r ####  <a name=\"bk_rtrim\"></a> RTRIM  \r  返回删除尾随空格后的字符串表达式。  \r \r  **语法**  \r \r ```  \r RTRIM(<str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例演示了如何在查询中使用 RTRIM。  \r \r ```  \r SELECT RTRIM(\"  abc\"), RTRIM(\"abc\"), RTRIM(\"abc   \")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"   abc\", \"$2\": \"abc\", \"$3\": \"abc\"}]  \r ```  \r \r ####  <a name=\"bk_startswith\"></a> STARTSWITH  \r  返回一个布尔值，指示第一个字符串表达式是否以第二个字符串表达式开头。  \r \r  **语法**  \r \r ```  \r STARTSWITH(<str_expr>, <str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例检查字符串“abc”是否以“b”和“a”开头。  \r \r ```  \r SELECT STARTSWITH(\"abc\", \"b\"), STARTSWITH(\"abc\", \"a\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": false, \"$2\": true}]  \r ```  \r \r ####  <a name=\"bk_substring\"></a> SUBSTRING  \r  返回字符串表达式的部分内容，该内容起于指定字符从零开始的位置，继续到指定长度或字符串结尾。  \r \r  **语法**  \r \r ```  \r SUBSTRING(<str_expr>, <num_expr> [, <num_expr>])  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r -   `num_expr`  \r \r      是任何有效的数值表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例返回“abc”中从位置 1 开始且长度为 1 个字符的子字符串。  \r \r ```  \r SELECT SUBSTRING(\"abc\", 1, 1)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"b\"}]  \r ```  \r \r ####  <a name=\"bk_upper\"></a> UPPER  \r  返回在将小写字符数据转换为大写后的字符串表达式。  \r \r  **语法**  \r \r ```  \r UPPER(<str_expr>)  \r ```  \r \r  **参数**  \r \r -   `str_expr`  \r \r      是任何有效的字符串表达式。  \r \r  **返回类型**  \r \r  返回一个字符串表达式。  \r \r  **示例**  \r \r  以下示例演示了如何在查询中使用 UPPER。  \r \r ```  \r SELECT UPPER(\"Abc\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": \"ABC\"}]  \r ```  \r \r ###  <a name=\"bk_array_functions\"></a> 数组函数  \r  下面的标量函数对数组输入值执行运算，并返回数值、布尔值或数组值  \r \r ||||  \r |-|-|-|  \r |[ARRAY_CONCAT](#bk_array_concat)|[ARRAY_CONTAINS](#bk_array_contains)|[ARRAY_LENGTH](#bk_array_length)|  \r |[ARRAY_SLICE](#bk_array_slice)|||  \r \r ####  <a name=\"bk_array_concat\"></a> ARRAY_CONCAT  \r  返回一个数组，该数组是连接两个或更多数组值的结果。  \r \r  **语法**  \r \r ```  \r ARRAY_CONCAT (<arr_expr>, <arr_expr> [, <arr_expr>])  \r ```  \r \r  **参数**  \r \r -   `arr_expr`  \r \r      是任何有效的数组表达式。  \r \r  **返回类型**  \r \r  返回一个数组表达式。  \r \r  **示例**  \r \r  以下示例演示了如何连接两个数组。  \r \r ```  \r SELECT ARRAY_CONCAT([\"apples\", \"strawberries\"], [\"bananas\"])  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": [\"apples\", \"strawberries\", \"bananas\"]}]  \r ```  \r \r ####  <a name=\"bk_array_contains\"></a> ARRAY_CONTAINS  \r 返回一个布尔，它指示数组是否包含指定的值。 可以指定是要执行完全还是部分匹配。 \r \r  **语法**  \r \r ```  \r ARRAY_CONTAINS (<arr_expr>, <expr> [, bool_expr])  \r ```  \r \r  **参数**  \r \r -   `arr_expr`  \r \r      是任何有效的数组表达式。  \r \r -   `expr`  \r \r      是任何有效的表达式。  \r \r -   `bool_expr`  \r \r      为任何布尔表达式。       \r \r  **返回类型**  \r \r  返回一个布尔值。  \r \r  **示例**  \r \r  以下示例演示了如何使用 ARRAY_CONTAINS 检查数组中的成员身份。  \r \r ```  \r SELECT   \r            ARRAY_CONTAINS([\"apples\", \"strawberries\", \"bananas\"], \"apples\"),  \r            ARRAY_CONTAINS([\"apples\", \"strawberries\", \"bananas\"], \"mangoes\")  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": true, \"$2\": false}]  \r ```  \r \r  以下示例介绍了如何使用 ARRAY_CONTAINS 检查数组内是否存在 JSON 字符串的部分匹配字符串。  \r \r ```  \r SELECT  \r     ARRAY_CONTAINS([{\"name\": \"apples\", \"fresh\": true}, {\"name\": \"strawberries\", \"fresh\": true}], {\"name\": \"apples\"}, true), \r     ARRAY_CONTAINS([{\"name\": \"apples\", \"fresh\": true}, {\"name\": \"strawberries\", \"fresh\": true}], {\"name\": \"apples\"}),\r     ARRAY_CONTAINS([{\"name\": \"apples\", \"fresh\": true}, {\"name\": \"strawberries\", \"fresh\": true}], {\"name\": \"mangoes\"}, true) \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\r   \"$1\": true,\r   \"$2\": false,\r   \"$3\": false\r }] \r ```  \r \r ####  <a name=\"bk_array_length\"></a> ARRAY_LENGTH  \r  返回指定数组表达式的元素数。  \r \r  **语法**  \r \r ```  \r ARRAY_LENGTH(<arr_expr>)  \r ```  \r \r  **参数**  \r \r -   `arr_expr`  \r \r      是任何有效的数组表达式。  \r \r  **返回类型**  \r \r  返回一个数值表达式。  \r \r  **示例**  \r \r  以下示例演示了如何使用 ARRAY_LENGTH 获取数组的长度。  \r \r ```  \r SELECT ARRAY_LENGTH([\"apples\", \"strawberries\", \"bananas\"])  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{\"$1\": 3}]  \r ```  \r \r ####  <a name=\"bk_array_slice\"></a> ARRAY_SLICE  \r  返回部分数组表达式。\r \r  **语法**  \r \r ```  \r ARRAY_SLICE (<arr_expr>, <num_expr> [, <num_expr>])  \r ```  \r \r  **参数**  \r \r -   `arr_expr`  \r \r      是任何有效的数组表达式。  \r \r -   `num_expr`  \r \r      是任何有效的数值表达式。  \r \r  **返回类型**  \r \r  返回一个布尔值。  \r \r  **示例**  \r \r  以下示例演示了如何使用 ARRAY_SLICE 获取数组的一部分。  \r \r ```  \r SELECT   \r            ARRAY_SLICE([\"apples\", \"strawberries\", \"bananas\"], 1),  \r            ARRAY_SLICE([\"apples\", \"strawberries\", \"bananas\"], 1, 1)  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{  \r            \"$1\": [\"strawberries\", \"bananas\"],   \r            \"$2\": [\"strawberries\"]  \r        }]  \r ```  \r \r ###  <a name=\"bk_spatial_functions\"></a> 空间函数  \r  下面的标量函数对空间对象输入值执行运算，并返回数值或布尔值。  \r \r ||||  \r |-|-|-|  \r |[ST_DISTANCE](#bk_st_distance)|[ST_WITHIN](#bk_st_within)|[ST_INTERSECTS](#bk_st_intersects)|[ST_ISVALID](#bk_st_isvalid)|  \r |[ST_ISVALIDDETAILED](#bk_st_isvaliddetailed)|||  \r \r ####  <a name=\"bk_st_distance\"></a> ST_DISTANCE  \r  返回两个 GeoJSON 点、多边形或 LineString 表达式之间的距离。  \r \r  **语法**  \r \r ```  \r ST_DISTANCE (<spatial_expr>, <spatial_expr>)  \r ```  \r \r  **参数**  \r \r -   `spatial_expr`  \r \r      是任何有效的 GeoJSON 点、多边形或 LineString 对象表达式。  \r \r  **返回类型**  \r \r  返回包含距离的一个数字表达式。 这是根据默认参考系统以米为单位表示的。  \r \r  **示例**  \r \r  以下示例演示了如何使用 ST_DISTANCE 内置函数返回与指定位置的距离在 30 公里内的所有家族文档。 。  \r \r ```  \r SELECT f.id   \r FROM Families f   \r WHERE ST_DISTANCE(f.location, {'type': 'Point', 'coordinates':[31.9, -4.8]}) < 30000  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{  \r   \"id\": \"WakefieldFamily\"  \r }]  \r ```  \r \r ####  <a name=\"bk_st_within\"></a> ST_WITHIN  \r  返回一个布尔表达式，指示在第一个参数中指定的 GeoJSON 对象（点、多边形或 LineString）是否位于第二个参数中的 GeoJSON（点、多边形或 LineString）内。  \r \r  **语法**  \r \r ```  \r ST_WITHIN (<spatial_expr>, <spatial_expr>)  \r ```  \r \r  **参数**  \r \r -   `spatial_expr`  \r \r      是任何有效的 GeoJSON 点、多边形或 LineString 对象表达式。  \r \r -   `spatial_expr`  \r \r      是任何有效的 GeoJSON 点、多边形或 LineString 对象表达式。  \r \r  **返回类型**  \r \r  返回一个布尔值。  \r \r  **示例**  \r \r  以下示例演示了如何使用 ST_WITHIN 查找某个多边形内的所有家族文档。  \r \r ```  \r SELECT f.id   \r FROM Families f   \r WHERE ST_WITHIN(f.location, {  \r     'type':'Polygon',   \r     'coordinates': [[[31.8, -5], [32, -5], [32, -4.7], [31.8, -4.7], [31.8, -5]]]  \r })  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{ \"id\": \"WakefieldFamily\" }]  \r ```  \r \r ####  <a name=\"bk_st_intersects\"></a> ST_INTERSECTS  \r  返回一个布尔表达式，指示在第一个参数中指定的 GeoJSON 对象（点、多边形或 LineString）是否与第二个参数中的 GeoJSON（点、多边形或 LineString）相交。  \r \r  **语法**  \r \r ```  \r ST_INTERSECTS (<spatial_expr>, <spatial_expr>)  \r ```  \r \r  **参数**  \r \r -   `spatial_expr`  \r \r      是任何有效的 GeoJSON 点、多边形或 LineString 对象表达式。  \r \r -   `spatial_expr`  \r \r      是任何有效的 GeoJSON 点、多边形或 LineString 对象表达式。  \r \r  **返回类型**  \r \r  返回一个布尔值。  \r \r  **示例**  \r \r  以下示例演示了如何查找与给定的多边形相交的所有区域。  \r \r ```  \r SELECT a.id   \r FROM Areas a   \r WHERE ST_INTERSECTS(a.location, {  \r     'type':'Polygon',   \r     'coordinates': [[[31.8, -5], [32, -5], [32, -4.7], [31.8, -4.7], [31.8, -5]]]  \r })  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{ \"id\": \"IntersectingPolygon\" }]  \r ```  \r \r ####  <a name=\"bk_st_isvalid\"></a> ST_ISVALID  \r  返回一个布尔值，该值指示指定的 GeoJSON 点、多边形或 LineString 表达式是否有效。  \r \r  **语法**  \r \r ```  \r ST_ISVALID(<spatial_expr>)  \r ```  \r \r  **参数**  \r \r -   `spatial_expr`  \r \r      是任何有效的 GeoJSON 点、多边形或 LineString 表达式。  \r \r  **返回类型**  \r \r  返回一个布尔表达式。  \r \r  **示例**  \r \r  以下示例演示了如何使用 ST_VALID 检查某个点是否有效。  \r \r  例如，此点具有不在有效的值范围 [-90, 90] 中的纬度值，因此，该查询返回 false。  \r \r  对于多边形，若要创建闭合的形状，GeoJSON 规范要求所提供的最后一个坐标对应该与第一个坐标对相同。 多边形内的点必须以逆时针顺序指定。 以顺时针顺序指定的多边形表示其中的区域倒转。  \r \r ```  \r SELECT ST_ISVALID({ \"type\": \"Point\", \"coordinates\": [31.9, -132.8] })  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{ \"$1\": false }]  \r ```  \r \r ####  <a name=\"bk_st_isvaliddetailed\"></a> ST_ISVALIDDETAILED  \r  如果指定的 GeoJSON 点、多边形或 LineString 表达式有效，则返回包含布尔值的 JSON 值；如果无效，则额外加上作为字符串值的原因。  \r \r  **语法**  \r \r ```  \r ST_ISVALID(<spatial_expr>)  \r ```  \r \r  **参数**  \r \r -   `spatial_expr`  \r \r      是任何有效的 GeoJSON 点或多边形表达式。  \r \r  **返回类型**  \r \r  如果指定的 GeoJSON 点或多边形表达式有效，则返回包含布尔值的 JSON 值；如果无效，则额外以字符串值提供原因。  \r \r  **示例**  \r \r  以下示例演示了如何使用 ST_ISVALIDDETAILED 检查有效性（带详细信息）。  \r \r ```  \r SELECT ST_ISVALIDDETAILED({   \r   \"type\": \"Polygon\",   \r   \"coordinates\": [[ [ 31.8, -5 ], [ 31.8, -4.7 ], [ 32, -4.7 ], [ 32, -5 ] ]]  \r })  \r ```  \r \r  下面是结果集。  \r \r ```  \r [{  \r   \"$1\": {   \r     \"valid\": false,   \r     \"reason\": \"The Polygon input is not valid because the start and end points of the ring number 1 are not the same. Each ring of a polygon must have the same start and end points.\"   \r   }  \r }]  \r ```  \r \r ## <a name=\"next-steps\"></a>后续步骤  \r  [Azure Cosmos DB 的 SQL 语法和 SQL 查询](documentdb-sql-query.md)   \r  [Azure Cosmos DB 文档](/cosmos-db/)\r  \r  <!--Update_Description: update meta properties, wording update -->"}