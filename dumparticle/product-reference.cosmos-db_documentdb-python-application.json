{"Title":"适用于 Azure Cosmos DB 的 Python Flask Web 应用程序教程","Description":"查看一个数据库教程，其中介绍了如何使用 Azure Cosmos DB 通过 Azure 上托管的 Python Flask Web 应用程序存储和访问数据。 查找应用程序开发解决方案。","Content":"# <a name=\"build-a-python-flask-web-application-using-azure-cosmos-db\"></a>构建使用 Azure Cosmos DB 的 Python Flask Web 应用程序\r > [!div class=\"op_single_selector\"]\r > * [.NET](documentdb-dotnet-application.md)\r > * [Node.js](documentdb-nodejs-application.md)\r > * [Java](documentdb-java-application.md)\r > * [Python](documentdb-python-application.md)\r > \r > \r \r 本教程介绍如何使用 Azure Cosmos DB 通过 Azure 应用服务中托管的 Python Flask 应用程序存储和访问数据。 本教程假设读者在 Python 和 Azure 网站的用法方面具有一定的经验。\r \r 本数据库教程涵盖以下内容：\r \r 1. 创建并预配 Azure Cosmos DB 帐户。\r 2. 创建 Python Flask 应用程序。\r 3. 从 Web 应用程序连接并使用 Azure Cosmos DB。\r 4. 将 Web 应用程序部署到 Azure 应用服务。\r \r 通过学习本教程，将可以构建一个可对轮询进行投票的简单投票应用程序。\r \r ![屏幕截图：本数据库教程创建的投票应用程序](./media/documentdb-python-application/cosmos-db-pythonr-run-application.png)\r \r ## <a name=\"database-tutorial-prerequisites\"></a>数据库教程先决条件\r 在按照本文中的说明操作之前，应确保已安装下列项：\r \r * [一个 Azure 订阅](https://www.azure.cn/pricing/1rmb-trial)。 \r \r   [!INCLUDE [cosmos-db-emulator-docdb-api](../../includes/cosmos-db-emulator-docdb-api.md)]\r \r * 已启用 **Azure 开发**和 **Python 开发**的 [Visual Studio 2017]((https://www.visualstudio.com/downloads/))。 可以检查是否已安装这些必备组件，并在本地打开“Visual Studio 安装程序”进行安装。   \r * [Azure SDK for Python 2.7](https://www.azure.cn/downloads/)。 \r * [Python 2.7](https://www.python.org/downloads/windows/)。 可以使用 32 位或 64 位安装。\r \r > [!IMPORTANT]\r > 如果首次安装 Python 2.7，请确保在自定义 Python 2.7.13 屏幕中，选择“向路径添加 python.exe”。\r > \r > ![自定义 Python 2.7.11 屏幕的屏幕截图，需要在该屏幕中选择“向路径添加 python.exe”](./media/documentdb-python-application/cosmos-db-python-install.png)\r > \r > \r \r * [Microsoft Visual C++ Compiler for Python 2.7](https://www.microsoft.com/download/details.aspx?id=44266)。\r \r ## <a name=\"step-1-create-an-azure-cosmos-db-database-account\"></a>步骤 1：创建 Azure Cosmos DB 数据库帐户\r 首先创建一个 Azure Cosmos DB 帐户。 如果已有一个帐户，或者要在本教程中使用 Azure Cosmos DB 模拟器，可以跳到[步骤 2：创建新的 Python Flask 应用程序](#step-2-create-a-new-python-flask-web-application)。\r \r [!INCLUDE [cosmos-db-create-dbaccount](../../includes/cosmos-db-create-dbaccount.md)]\r \r <br/>\r 现在，我们演练如何从头开始新建 Python Flask Web 应用程序。\r \r ## <a name=\"step-2-create-a-new-python-flask-web-application\"></a>步骤 2：创建 Python Flask web 应用程序\r 1. 在 Visual Studio 的“文件”菜单中，指向“新建”，并单击“项目”。\r \r     会显示“新建项目”对话框  。\r 2. 在左窗格中，依次展开“模板”、“Python”，并单击“Web”。 \r 3. 在中心窗格中选择“Flask Web 项目”，在“名称”框中键入“tutorial”，并单击“确定”。 请记住，Python 包的名称应全部为小写，如 [Style Guide for Python Code（Python 代码风格指南）](https://www.python.org/dev/peps/pep-0008/#package-and-module-names)中所述。\r \r     对于新接触 Python Flask 的人员，它是一个 Web 应用程序开发框架，可帮助更快地在 Python 中构建 Web 应用程序。\r \r     ![Visual Studio 中“新建项目”窗口的屏幕截图，截图上包括左侧突出显示的 Python、中间已选中的 Python Flask Web 项目以及“名称”框中的名称“教程”](./media/documentdb-python-application/image9.png)\r 4. 在“Python Tools for Visual Studio”窗口中，单击“安装到虚拟环境中”。 \r \r     ![数据库教程 - Python Tools for Visual Studio 窗口的屏幕截图](./media/documentdb-python-application/python-install-virtual-environment.png)\r 5. 在“添加虚拟环境”窗口中选择“Python 2.7”或“Python 3.5”，在“选择解释器”框中接受其他默认值，并单击“创建”。 此操作将设置项目所需的 Python 虚拟环境。\r \r     ![数据库教程 - Python Tools for Visual Studio 窗口的屏幕截图](./media/documentdb-python-application/image10_A.png)\r \r     成功安装环境后，输出窗口会显示 `Successfully installed Flask-0.10.1 Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.5 itsdangerous-0.24 'requirements.txt' was installed successfully.`\r \r ## <a name=\"step-3-modify-the-python-flask-web-application\"></a>步骤 3：修改 Python Flask Web 应用程序\r ### <a name=\"add-the-python-flask-packages-to-your-project\"></a>将 Python Flask 包添加到项目\r 设置项目后，需要将所需的 Flask 包（包括 pydocumentdb - 用于 DocumentDB 的 Python 软件包）添加到项目。\r \r 1. 在解决方案资源管理器中，打开名为 **requirements.txt** 的文件并将内容替换为：\r \r         flask==0.9\r         flask-mail==0.7.6\r         sqlalchemy==0.7.9\r         flask-sqlalchemy==0.16\r         sqlalchemy-migrate==0.7.2\r         flask-whooshalchemy==0.55a\r         flask-wtf==0.8.4\r         pytz==2013b\r         flask-babel==0.8\r         flup\r         pydocumentdb>=1.0.0\r 2. 保存 **requirements.txt** 文件。 \r 3. 在解决方案资源管理器中，右键单击“env”，并单击“使用 requirements.txt 安装”。\r \r     ![显示 env (Python 2.7) 已选中的屏幕截图，其中突出显示了列表中的“使用 requirements.txt 安装”](./media/documentdb-python-application/cosmos-db-python-install-from-requirements.png)\r \r     安装成功后，输出窗口显示以下信息：\r \r         Successfully installed Babel-2.3.2 Tempita-0.5.2 WTForms-2.1 Whoosh-2.7.4 blinker-1.4 decorator-4.0.9 flask-0.9 flask-babel-0.8 flask-mail-0.7.6 flask-sqlalchemy-0.16 flask-whooshalchemy-0.55a0 flask-wtf-0.8.4 flup-1.0.2 pydocumentdb-1.6.1 pytz-2013b0 speaklater-1.3 sqlalchemy-0.7.9 sqlalchemy-migrate-0.7.2\r \r    > [!NOTE]\r    > 在相当少见的情况下，可能会在输出窗口中看到失败。 如果出现此情况，请检查错误是否与清理相关。 有时候清理会失败，但安装仍是成功的（在输出窗口中向上滚动以确认这一点）。 可以通过 [验证虚拟环境](#verify-the-virtual-environment)来检查安装。 如果安装失败，但验证成功，则可以继续操作。\r    > \r    > \r \r ### <a name=\"verify-the-virtual-environment\"></a>验证虚拟环境\r 我们必须确保正确安装所有内容。\r \r 1. 按 **Ctrl**+**Shift**+**B** 生成解决方案。\r 2. 生成成功后，按 **F5**启动网站。 这会启动 Flask 开发服务器，并启动 Web 浏览器。 应该看到以下页面。\r \r     ![在浏览器中显示的空 Python Flask Web 开发项目](./media/documentdb-python-application/image12.png)\r 3. 在 Visual Studio 中按 **Shift**+**F5** 停止调试网站。\r \r ### <a name=\"create-database-collection-and-document-definitions\"></a>创建数据库、集合和文档定义\r 现在，通过添加新文件并更新其他文件来创建投票应用程序。\r \r 1. 在解决方案资源管理器中，右键单击“教程”项目，并依次单击“添加”、“新建项”。 选择“空 Python 文件”并将该文件命名为 **forms.py**。  \r 2. 将以下代码添加到 forms.py 文件，并保存该文件。\r \r ```python\r from flask.ext.wtf import Form\r from wtforms import RadioField\r \r class VoteForm(Form):\r     deploy_preference  = RadioField('Deployment Preference', choices=[\r         ('Web Site', 'Web Site'),\r         ('Cloud Service', 'Cloud Service'),\r         ('Virtual Machine', 'Virtual Machine')], default='Web Site')\r ```\r \r ### <a name=\"add-the-required-imports-to-viewspy\"></a>将所需的导入添加到 views.py 中\r 1. 在“解决方案资源管理器”中，展开 **tutorial** 文件夹并打开 **views.py** 文件。 \r 2. 将以下导入语句添加到 **views.py** 文件的顶部，并保存该文件。 这些语句将导入 Azure Cosmos DB 的 PythonSDK 和 Flask 包。\r \r     ```python\r     from forms import VoteForm\r     import config\r     import pydocumentdb.document_client as document_client\r     ```\r \r ### <a name=\"create-database-collection-and-document\"></a>创建数据库、集合和文档\r * 还是在 **views.py**中，将以下代码添加到文件末尾。 这会创建窗体使用的数据库。 不要删除 **views.py**中任何现有的代码。 仅将其追加到末尾。\r \r ```python\r @app.route('/create')\r def create():\r     \"\"\"Renders the contact page.\"\"\"\r     client = document_client.DocumentClient(config.DOCUMENTDB_HOST, {'masterKey': config.DOCUMENTDB_KEY})\r \r     # Attempt to delete the database.  This allows this to be used to recreate as well as create\r     try:\r         db = next((data for data in client.ReadDatabases() if data['id'] == config.DOCUMENTDB_DATABASE))\r         client.DeleteDatabase(db['_self'])\r     except:\r         pass\r \r     # Create database\r     db = client.CreateDatabase({ 'id': config.DOCUMENTDB_DATABASE })\r \r     # Create collection\r     collection = client.CreateCollection(db['_self'],{ 'id': config.DOCUMENTDB_COLLECTION })\r \r     # Create document\r     document = client.CreateDocument(collection['_self'],\r         { 'id': config.DOCUMENTDB_DOCUMENT,\r           'Web Site': 0,\r           'Cloud Service': 0,\r           'Virtual Machine': 0,\r           'name': config.DOCUMENTDB_DOCUMENT \r         })\r \r     return render_template(\r        'create.html',\r         title='Create Page',\r         year=datetime.now().year,\r         message='You just created a new database, collection, and document.  Your old votes have been deleted')\r ```\r \r ### <a name=\"read-database-collection-document-and-submit-form\"></a>读取数据库、集合、文档，并提交窗体\r * 还是在 **views.py**中，将以下代码添加到文件末尾。 这会设置窗体、读取数据库、集合和文档。 不要删除 **views.py**中任何现有的代码。 仅将其追加到末尾。\r \r ```python\r @app.route('/vote', methods=['GET', 'POST'])\r def vote(): \r     form = VoteForm()\r     replaced_document ={}\r     if form.validate_on_submit(): # is user submitted vote  \r         client = document_client.DocumentClient(config.DOCUMENTDB_HOST, {'masterKey': config.DOCUMENTDB_KEY})\r \r         # Read databases and take first since id should not be duplicated.\r         db = next((data for data in client.ReadDatabases() if data['id'] == config.DOCUMENTDB_DATABASE))\r \r         # Read collections and take first since id should not be duplicated.\r         coll = next((coll for coll in client.ReadCollections(db['_self']) if coll['id'] == config.DOCUMENTDB_COLLECTION))\r \r         # Read documents and take first since id should not be duplicated.\r         doc = next((doc for doc in client.ReadDocuments(coll['_self']) if doc['id'] == config.DOCUMENTDB_DOCUMENT))\r \r         # Take the data from the deploy_preference and increment our database\r         doc[form.deploy_preference.data] = doc[form.deploy_preference.data] + 1\r         replaced_document = client.ReplaceDocument(doc['_self'], doc)\r \r         # Create a model to pass to results.html\r         class VoteObject:\r             choices = dict()\r             total_votes = 0\r \r         vote_object = VoteObject()\r         vote_object.choices = {\r             \"Web Site\" : doc['Web Site'],\r             \"Cloud Service\" : doc['Cloud Service'],\r             \"Virtual Machine\" : doc['Virtual Machine']\r         }\r         vote_object.total_votes = sum(vote_object.choices.values())\r \r         return render_template(\r             'results.html', \r             year=datetime.now().year, \r             vote_object = vote_object)\r \r     else :\r         return render_template(\r             'vote.html', \r             title = 'Vote',\r             year=datetime.now().year,\r             form = form)\r ```\r \r ### <a name=\"create-the-html-files\"></a>创建 HTML 文件\r 1. 在解决方案资源管理器中的 **tutorial** 文件夹中，右键单击 **templates** 文件夹，并依次单击“添加”、“新建项”。 \r 2. 选择“HTML 页”，并在名称框中键入 **create.html**。 \r 3. 重复步骤 1 和步骤 2，以创建另外两个 HTML 文件：results.html 和 vote.html。\r 4. 将以下代码添加到 `<body>` 元素中的 **create.html**。 它显示一条消息，说明我们创建了新的数据库、集合和文档。\r \r     ```html\r     {% extends \"layout.html\" %}\r     {% block content %}\r     <h2>{{ title }}.</h2>\r     <h3>{{ message }}</h3>\r     <p><a href=\"{{ url_for('vote') }}\" class=\"btn btn-primary btn-large\">Vote &raquo;</a></p>\r     {% endblock %}\r     ```\r 5. 将以下代码添加到 `<body`> 元素中的 **results.html**。 它会显示轮询结果。\r \r     ```html\r     {% extends \"layout.html\" %}\r     {% block content %}\r     <h2>Results of the vote</h2>\r         <br />\r \r     {% for choice in vote_object.choices %}\r     <div class=\"row\">\r         <div class=\"col-sm-5\">{{choice}}</div>\r             <div class=\"col-sm-5\">\r                 <div class=\"progress\">\r                     <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{vote_object.choices[choice]}}\" aria-valuemin=\"0\" aria-valuemax=\"{{vote_object.total_votes}}\" style=\"width: {{(vote_object.choices[choice]/vote_object.total_votes)*100}}%;\">\r                                 {{vote_object.choices[choice]}}\r                 </div>\r             </div>\r             </div>\r     </div>\r     {% endfor %}\r \r     <br />\r     <a class=\"btn btn-primary\" href=\"{{ url_for('vote') }}\">Vote again?</a>\r     {% endblock %}\r     ```\r 6. 将以下代码添加到 `<body`> 元素中的 **vote.html**。 它会显示轮询并接受投票。 注册投票时，控件权会传递到 views.py 中，Azure Cosmos DB 会在该位置识别投票并相应地追加文档。\r \r     ```html\r     {% extends \"layout.html\" %}\r     {% block content %}\r     <h2>What is your favorite way to host an application on Azure?</h2>\r     <form action=\"\" method=\"post\" name=\"vote\">\r         {{form.hidden_tag()}}\r             {{form.deploy_preference}}\r             <button class=\"btn btn-primary\" type=\"submit\">Vote</button>\r     </form>\r     {% endblock %}\r     ```\r 7. 在 **templates** 文件夹中，将 **index.html** 的内容替换为以下内容。 这会作为你的应用程序的登录页。\r \r     ```html\r     {% extends \"layout.html\" %}\r     {% block content %}\r     <h2>Python + Azure Cosmos DB Voting Application.</h2>\r     <h3>This is a sample Cosmos DB voting application using PyDocumentDB</h3>\r     <p><a href=\"{{ url_for('create') }}\" class=\"btn btn-primary btn-large\">Create/Clear the Voting Database &raquo;</a></p>\r     <p><a href=\"{{ url_for('vote') }}\" class=\"btn btn-primary btn-large\">Vote &raquo;</a></p>\r     {% endblock %}\r     ```\r \r ### <a name=\"add-a-configuration-file-and-change-the-initpy\"></a>添加配置文件并更改 \\_\\_init\\_\\_.py\r 1. 在解决方案资源管理器中，右键单击 **tutorial** 项目，依次单击“添加”、“新建项”，选择“空 Python 文件”，并将该文件命名为 **config.py**。 Flask 中的窗体需要此配置文件。 也可将其用于提供机密密钥。 但此教程不需要此密钥。\r 2. 将以下代码添加到 config.py，需要在下一步更改 **DOCUMENTDB\\_HOST** 和 **DOCUMENTDB\\_KEY** 的值。\r \r     ```python\r     CSRF_ENABLED = True\r     SECRET_KEY = 'you-will-never-guess'\r \r     DOCUMENTDB_HOST = 'https://YOUR_DOCUMENTDB_NAME.documents.azure.cn:443/'\r     DOCUMENTDB_KEY = 'YOUR_SECRET_KEY_ENDING_IN_=='\r \r     DOCUMENTDB_DATABASE = 'voting database'\r     DOCUMENTDB_COLLECTION = 'voting collection'\r     DOCUMENTDB_DOCUMENT = 'voting document'\r     ```\r 3. 在 [Azure 门户](https://portal.azure.cn/)中，依次单击“浏览”、“Azure Cosmos DB 帐户”导航到“密钥”页，双击要使用的帐户名，并单击“概要”区域中的“密钥”按钮。 在“密钥”页中，复制“URI”值并将其粘贴到 **config.py** 文件中，作为 **DOCUMENTDB\\_HOST** 属性的值。 \r 4. 返回到 Azure 门户，在“密钥”页中，复制“主密钥”或“辅助密钥”的值，并将其粘贴到 **config.py** 文件，作为 **DOCUMENTDB\\_KEY** 属性的值。\r 5. 在 **\\_\\_init\\_\\_.py** 文件中添加以下行： \r \r         app.config.from_object('config')\r \r     因此，该文件的内容应为：\r \r     ```python\r     from flask import Flask\r     app = Flask(__name__)\r     app.config.from_object('config')\r     import tutorial.views\r     ```\r 6. 添加所有文件后，解决方案资源管理器应如下所示：\r \r     ![Visual Studio 解决方案资源管理器窗口的屏幕截图](./media/documentdb-python-application/cosmos-db-python-solution-explorer.png)\r \r ## <a name=\"step-4-run-your-web-application-locally\"></a>步骤 4：本地运行 Web 应用程序\r 1. 按 **Ctrl**+**Shift**+**B** 生成解决方案。\r 2. 生成成功后，按 **F5**启动网站。 应会在屏幕上看到以下内容：\r \r     ![在 Web 浏览器中显示的 Python + Azure Cosmos DB 投票应用程序的屏幕截图](./media/documentdb-python-application/cosmos-db-pythonr-run-application.png)\r 3. 单击“创建/清除投票数据库”  以生成数据库。\r \r     ![Web 应用程序的创建页面 — 开发详细信息的屏幕截图](./media/documentdb-python-application/cosmos-db-python-run-create-page.png)\r 4. 然后，单击“投票”并选择选项。\r \r     ![提出了一个投票问题的 Web 应用程序的屏幕截图](./media/documentdb-python-application/cosmos-db-vote.png)\r 5. 对于所投的每一票，它都增加了相应的计数器。\r \r     ![投票页面所示的结果的屏幕截图](./media/documentdb-python-application/cosmos-db-voting-results.png)\r 6. 按 Shift+F5 停止调试该项目。\r \r ## <a name=\"step-5-deploy-the-web-application-to-azure\"></a>步骤 5：将 Web 应用程序部署到 Azure\r 创建可在本地针对 Azure Cosmos DB 正常工作的完整应用程序后，我们要创建一个 web.config 文件，将服务器上的文件更新为与本地环境匹配，然后在 Azure 中查看已完成的应用。 此过程只能在 Visual Studio 2017 中执行。 如果使用其他 Visual Studio 版本，请参阅[发布到 Azure 应用服务](https://docs.microsoft.com/visualstudio/python/publishing-to-azure.md)。\r \r 1. 在 Visual Studio 的“解决方案资源管理器”中，右键单击项目，并选择“添加”>“新建项...”。在显示的对话框中，选择“Azure web.config (Fast CGI)”模板，再选择“确定”。 随后会在项目根目录中创建一个 `web.config` 文件。 \r \r 2. 修改 `web.config` 中的 `<system.webServer>` 节，使路径与 Python 安装匹配。 例如，对于 Python 2.7 x64，该条目应如下所示：\r \r     ```xml\r     <system.webServer>\r         <handlers>\r             <add name=\"PythonHandler\" path=\"*\" verb=\"*\" modules=\"FastCgiModule\" scriptProcessor=\"D:\\home\\Python27\\python.exe|D:\\home\\Python27\\wfastcgi.py\" resourceType=\"Unspecified\" requireAccess=\"Script\"/>\r         </handlers>\r     </system.webServer>\r     ```\r \r 3. 将 `web.config` 中的 `WSGI_HANDLER` 条目设置为 `tutorial.app`，使之与项目名称匹配。 \r \r     ```xml\r     <!-- Flask apps only: change the project name to match your app -->\r     <add key=\"WSGI_HANDLER\" value=\"tutorial.app\"/>\r     ```\r \r 4. 在 Visual Studio 的“解决方案资源管理器”中，展开 **tutorial** 文件夹，右键单击 `static` 文件夹，并依次选择“添加”>“新建项...”、“Azure 静态文件 web.config”模板、“确定”。 此操作会在 `static` 中创建另一个 `web.config`，用于针对该文件夹禁用 Python 处理。 此配置会将静态文件的请求发送到默认的 Web 服务器，而不使用 Python 应用程序。\r \r 5. 保存文件，右键单击解决方案资源管理器中的项目（确保不要在本地运行它），并选择“发布”。  \r \r      ![解决方案资源管理器中选中的教程的屏幕截图，其中突出显示了“发布”选项](./media/documentdb-python-application/image20.png)\r 6. 在“发布”对话框中，依次选择“Azure 应用服务”和“新建”，然后单击“发布”。\r \r     ![“发布 Web 窗口”的屏幕截图，其中突出显示了“Azure 应用服务”](./media/documentdb-python-application/cosmos-db-python-publish.png)\r 7. 在“创建应用服务”对话框中，输入 Web 应用名称、订阅、资源组和应用服务计划，然后单击“创建”。\r \r     ![“Azure Web 应用窗口”窗口的屏幕截图](./media/documentdb-python-application/cosmos-db-python-create-app-service.png)\r 8. 几秒钟后，Visual Studio 会完成将文件复制到服务器的过程，并 在 `http://<your app service>.chinacloudsites.cn/` 页上显示“由于发生内部服务器错误，无法显示该页”。\r \r 9. 在 Azure 门户中打开新的应用服务帐户，在导航菜单中向下滚动到“开发工具”部分，选择“扩展”，并单击“+ 添加”。\r \r 10. 在“选择扩展”页上，向下滚动到最近的 Python 2.7 安装并选择 x86 或 x64 位选项，然后单击“确定”接受法律条款。  \r \r 11. 使用 Kudu 控制台（可通过 `https://<your app service name>.scm.chinacloudsites.cn/DebugConsole` 访问）安装应用的 `requirements.txt` 文件中所列的包。 为此，请在 Kudu 诊断控制台中导航到 Python 文件夹 `D:\\home\\Python27`，并根据 [Kudu 控制台](/visual-studio/python/managing-python-on-azure-app-service.md#azure-app-service-kudu-console)部分中所述运行以下命令：\r \r     ```\r     D:\\home\\Python27>python -m pip install --upgrade -r /home/site/wwwroot/requirements.txt\r     ```          \r \r 12. 安装新包后，按“重启”按钮在 Azure 门户中重启应用服务。 \r \r     > [!Tip] \r     > 如果对应用的 `requirements.txt` 文件做了任何更改，请务必重新使用 Kudu 控制台来安装该文件中现已列出的所有包。 \r \r 13. 完全配置服务器环境后，请在浏览器中刷新页面，随后应会显示该 Web 应用。\r \r     ![将 Bottle、Flask 和 Django 应用发布到应用服务后的结果](./media/documentdb-python-application/python-published-app-services.png)\r \r     > [!Tip] \r     > 如果该网页未出现，或者仍然出现“由于发生内部服务器错误，无法显示该页” 消息，请在 Kudo 中打开 web.config 文件，将 ` <httpErrors errorMode=\"Detailed\"></httpErrors>` 添加到 system.webServer 节，并刷新页面。 这样就会在浏览器中提供详细的错误输出。 \r \r ## <a name=\"troubleshooting\"></a>故障排除\r 如果这是在计算机上运行的第一个 Python 应用程序，请确保下列文件夹（或等效的安装位置）包括在 PATH 变量中：\r \r     C:\\Python27\\site-packages;C:\\Python27\\;C:\\Python27\\Scripts;\r \r 如果在投票页上收到了错误，并且已将项目命名为 **tutorial** 以外的名称，请确保 **\\_\\_init\\_\\_.py** 引用以下行中正确的项目名称：`import tutorial.view`。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 祝贺！ 现已完成第一个使用 Azure Cosmos DB 的 Python Web 应用程序并将其发布到了 Azure。\r \r 要将其他功能添加到 Web 应用程序，请查看 [Azure Cosmos DB Python SDK](documentdb-sdk-python.md)中提供的 API。\r \r 有关 Azure、Visual Studio 和 Python 的详细信息，请参阅 [Python 开发人员中心](/develop/python/)。 \r \r 有关其他 Python Flask 教程，请参阅 [The Flask Mega-Tutorial, Part I: Hello, World!](http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world)（Flask 大型教程，第 I 部分：Hello, World!）。 \r \r [Visual Studio Express]: http://www.visualstudio.com/products/visual-studio-express-vs.aspx\r [2]: https://www.python.org/downloads/windows/\r [3]: https://www.microsoft.com/download/details.aspx?id=44266\r [Microsoft Web Platform Installer]: http://www.microsoft.com/web/downloads/platform.aspx\r [Azure portal]: http://portal.azure.cn\r \r <!--Update_Description: update meta properties, wording update, update link -->"}