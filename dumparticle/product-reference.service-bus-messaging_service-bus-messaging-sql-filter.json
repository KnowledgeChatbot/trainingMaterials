{"Title":"Azure 服务总线 SQLFilter 语法参考","Description":"有关 SqlFilter 语法的详细信息。","Content":"# <a name=\"sqlfilter-syntax\"></a>SQLFilter 语法\r \r SqlFilter 对象是 [SqlFilter 类](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.sqlfilter)的实例，代表基于 SQL 语言的筛选器表达式，该表达式针对 [BrokeredMessage](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.brokeredmessage) 进行计算。 SqlFilter 支持 SQL-92 标准的子集。  \r   \r  本主题列出有关 SqlFilter 语法的详细信息。  \r   \r ```  \r <predicate ::=  \r       { NOT <predicate> }  \r       | <predicate> AND <predicate>  \r       | <predicate> OR <predicate>  \r       | <expression> { = | <> | != | > | >= | < | <= } <expression>  \r       | <property> IS [NOT] NULL  \r       | <expression> [NOT] IN ( <expression> [, ...n] )  \r       | <expression> [NOT] LIKE <pattern> [ESCAPE <escape_char>]  \r       | EXISTS ( <property> )  \r       | ( <predicate> )  \r   \r ```  \r   \r ```  \r <expression> ::=  \r       <constant>   \r       | <function>  \r       | <property>  \r       | <expression> { + | - | * | / | % } <expression>  \r       | { + | - } <expression>  \r       | ( <expression> )  \r   \r ```  \r   \r ```  \r <property> :=   \r        [<scope> .] <property_name>  \r   \r ```  \r   \r ## <a name=\"arguments\"></a>参数  \r   \r -   `<scope>` 是一个可选字符串，指示 `<property_name>` 的范围。 有效值为 `sys` or `user`进行求值的基于 SQL 语言的筛选器表达式。 `sys` 值指示系统范围，其中 `<property_name>` 是 [BrokeredMessage 类](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.brokeredmessage)的公共属性名称。 `user` 指示用户范围，其中 `<property_name>` 是 [BrokeredMessage 类](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.brokeredmessage)字典的项。 `user` 范围是默认范围（如果 `<scope>` 未指定）。  \r   \r ## <a name=\"remarks\"></a>备注\r \r 访问不存在的系统属性的尝试是错误，访问不存在的用户属性的尝试不是错误。 相反，不存在的用户属性在内部作为未知值进行求值。 运算符求值期间会对未知值进行特殊处理。  \r   \r ## <a name=\"propertyname\"></a>property_name  \r   \r ```  \r <property_name> ::=  \r      <identifier>  \r      | <delimited_identifier>  \r   \r <identifier> ::=  \r      <regular_identifier> | <quoted_identifier> | <delimited_identifier>  \r   \r ```  \r   \r ### <a name=\"arguments\"></a>参数  \r \r  `<regular_identifier>` 是一个字符串，由以下正则表达式表示：  \r   \r ```  \r [[:IsLetter:]][_[:IsLetter:][:IsDigit:]]*  \r ```  \r   \r 此语法是指任何以字母开头且后跟一个或多个下划线/字母/数字的字符串。  \r   \r `[:IsLetter:]` 是指其类别为 Unicode 字母的任何 Unicode 字符。 `System.Char.IsLetter(c)` 返回 `true`（如果 `c` 为 Unicode 字母）。  \r   \r `[:IsDigit:]` 是指分类为十进制数字的任何 Unicode 字符。 `System.Char.IsDigit(c)` 返回 `true`（如果 `c` 为 Unicode 数字）。  \r   \r `<regular_identifier>` 不能是保留关键字。  \r   \r `<delimited_identifier>` 是用左/右方括号 ([]) 括起来的任何字符串。 右方括号以两个右方括号表示。 下面是 `<delimited_identifier>`的示例：  \r   \r ```  \r [Property With Space]  \r [HR-EmployeeID]  \r   \r ```  \r   \r `<quoted_identifier>` 是指使用双引号引起来的任何字符串。 标识符中的双引号以两个双引号表示。 建议不要使用带引号的标识符，因为很容易与字符串常量混淆。 如果可能，请使用分隔标识符。 下面是 `<quoted_identifier>`的示例：  \r   \r ```  \r \"Contoso & Northwind\"  \r ```  \r   \r ## <a name=\"pattern\"></a>pattern  \r   \r ```  \r <pattern> ::=  \r       <expression>  \r ```  \r   \r ### <a name=\"remarks\"></a>备注\r   \r `<pattern>` 必须是作为字符串进行求值的表达式。 它用作 LIKE 运算符的模式。      它可以包含以下通配符：  \r   \r -   `%`：包含零个或多个字符的任意字符串。  \r   \r -   `_`：任何单个字符。  \r   \r ## <a name=\"escapechar\"></a>escape_char  \r   \r ```  \r <escape_char> ::=  \r       <expression>  \r ```  \r   \r ### <a name=\"remarks\"></a>备注  \r \r `<escape_char>` 必须是作为长度为 1 的字符串进行求值的表达式。 它用作 LIKE 运算符的转义符。  \r   \r  例如，`property LIKE 'ABC\\%' ESCAPE '\\'` 匹配 `ABC%`，而不匹配以 `ABC` 开头的字符串。  \r   \r ## <a name=\"constant\"></a>constant  \r   \r ```  \r <constant> ::=  \r       <integer_constant> | <decimal_constant> | <approximate_number_constant> | <boolean_constant> | NULL  \r ```  \r   \r ### <a name=\"arguments\"></a>参数  \r   \r -   `<integer_constant>` 是指不使用引号引起来且不包含小数点的数字字符串。 这些值以 `System.Int64` 形式存储在内部，并具有相同的范围。  \r   \r      下面是长常量的示例：  \r   \r     ```  \r     1894  \r     2  \r     ```  \r   \r -   `<decimal_constant>` 是一个数字字符串，不使用引号，但包含小数点。 这些值作为 `System.Double` 在内部存储，并具有相同的作用域/精度。  \r   \r      在未来版本中，此数字可能以其他数据类型存储，目的是支持确切的数字语义，因此不应依赖于 `<decimal_constant>` 的基础数据类型为 `System.Double` 这一事实。  \r   \r      下面是十进制常量的示例：  \r   \r     ```  \r     1894.1204  \r     2.0  \r     ```  \r   \r -   `<approximate_number_constant>` 是指使用科学记数法书写的数字。 这些值作为 `System.Double` 在内部存储，并具有相同的作用域/精度。 下面是近似数常量的示例：  \r   \r     ```  \r     101.5E5  \r     0.5E-2  \r     ```  \r   \r ## <a name=\"booleanconstant\"></a>boolean_constant  \r   \r ```  \r <boolean_constant> :=  \r       TRUE | FALSE  \r ```  \r   \r ### <a name=\"remarks\"></a>备注  \r \r 布尔常量以关键字 **TRUE** 或 **FALSE** 表示。 这些值作为 `System.Boolean`存储。  \r   \r ## <a name=\"stringconstant\"></a>string_constant  \r   \r ```  \r <string_constant>  \r ```  \r   \r ### <a name=\"remarks\"></a>备注  \r \r 字符串常量使用单引号引起来，并包含任何有效的 Unicode 字符。 字符串常量中嵌入的单引号以两个单引号表示。  \r   \r ## <a name=\"function\"></a>function  \r   \r ```  \r <function> :=  \r       newid() |  \r       property(name) | p(name)  \r ```  \r   \r ### <a name=\"remarks\"></a>备注\r   \r `newid()` 函数返回 `System.Guid.NewGuid()` 方法生成的 **System.Guid**。  \r   \r `property(name)` 函数返回 `name` 所引用的属性的值。 `name` 值可以是返回字符串值的任何有效表达式。  \r   \r ## <a name=\"considerations\"></a>注意事项\r   \r 请注意以下 [SqlFilter](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.sqlfilter) 语义：  \r   \r -   属性名称区分大小写。  \r   \r -   运算符尽可能遵循 C# 隐式转换语义。  \r   \r -   系统属性是值在 [BrokeredMessage](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.brokeredmessage) 实例中公开的公共属性。  \r   \r     请注意以下 `IS [NOT] NULL` 语义：  \r   \r     -   `property IS NULL` 作为 `true` 求值（如果属性不存在，或者属性的值为 `null`）。  \r   \r ### <a name=\"property-evaluation-semantics\"></a>属性求值语义  \r   \r -   尝试对不存在的系统属性求值会引发 [FilterException](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.filterexception) 异常。  \r   \r -   不存在的属性在进行内部求值时会被视为**未知**。  \r   \r  算术运算符中的未知求值：  \r   \r -   对于二元运算符，如果操作数的左侧和/或右侧的求值结果为**未知**，则结果为**未知**。  \r   \r -   对于一元运算符，如果操作数的求值结果为**未知**，则结果为**未知**。  \r   \r  二进制比较运算符中的未知求值：  \r   \r -   如果操作数的左侧和/或右侧的求值结果为**未知**，则结果为**未知**。  \r   \r  `[NOT] LIKE`中的未知求值：  \r   \r -   如果任何操作数的求值结果为“未知”，则结果为“未知”。  \r   \r  `[NOT] IN`中的未知求值：  \r   \r -   如果左侧操作数的求值结果为“未知”，则结果为“未知”。  \r   \r  **AND** 运算符中的未知求值：  \r   \r ```  \r +---+---+---+---+  \r |AND| T | F | U |  \r +---+---+---+---+  \r | T | T | F | U |  \r +---+---+---+---+  \r | F | F | F | F |  \r +---+---+---+---+  \r | U | U | F | U |  \r +---+---+---+---+  \r ```  \r   \r  **OR** 运算符中的未知求值：  \r   \r ```  \r +---+---+---+---+  \r |OR | T | F | U |  \r +---+---+---+---+  \r | T | T | T | T |  \r +---+---+---+---+  \r | F | T | F | U |  \r +---+---+---+---+  \r | U | T | U | U |  \r +---+---+---+---+  \r ```  \r   \r ### <a name=\"operator-binding-semantics\"></a>运算符绑定语义\r   \r -   在进行数据类型提升和隐式转换时，比较运算符（例如 `>`、`>=`、`<`、`<=`、`!=` 和 `=`）与 C# 运算符绑定遵循相同的语义。  \r   \r -   在进行数据类型提升和隐式转换时，算术运算符（例如 `+`、`-`、`*`、`/` 和 `%`）与 C# 运算符绑定遵循相同的语义。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r - [SQLFilter 类 (.NET Framework)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.servicebus.messaging.sqlfilter?view=azure-dotnet)\r - [SQLRuleAction 类](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.sqlruleaction)\r \r <!--Update_Description:update meta properties and wording-->"}