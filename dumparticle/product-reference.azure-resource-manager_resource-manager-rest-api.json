{"Title":"Resource Manager REST API","Description":"概述 Resource Manager REST API 身份验证和用例","Content":"# Resource Manager REST API\r <a name=\"resource-manager-rest-apis\" ></a>\r > [!div class=\"op_single_selector\"]\r > * [Azure PowerShell](powershell-azure-resource-manager.md)\r > * [Azure CLI](xplat-cli-azure-resource-manager.md)\r > * [门户](resource-group-portal.md) \r > * [REST API](resource-manager-rest-api.md)\r > \r > \r \r 在每次调用 Azure Resource Manager、每次部署模板以及每次配置存储帐户时，都会对 Azure Resource Manager 的 RESTful API 进行一次或多次调用。 本主题专门介绍这些 API 以及如何在完全不使用任何 SDK 的情况下调用它们。 如果想要完全控制对 Azure 发出的请求，或者偏好语言的 SDK 不可用或不支持所需的操作，这种方法可能十分有用。\r \r 本文不逐一介绍 Azure 中公开的每个 API，而是使用某些操作举例说明如何连接到这些 API。 了解基础知识后，可继续阅读 [Azure Resource Manager REST API Reference](https://docs.microsoft.com/rest/api/resources/) （Azure Resource Manager REST API 参考），查找有关如何使用其余 API 的详细信息。\r \r ## 身份验证\r <a name=\"authentication\" ></a>\r Resource Manager 的身份验证由 Azure Active Directory (Azure AD) 处理。 若要连接到任何 API，首先需要使用 Azure AD 进行身份验证，接收可传递给每个请求的身份验证令牌。 由于我们讨论的是如何直接对 REST API 进行单纯调用，因此假设你不想要根据用户名和密码提示进行身份验证。 另外，假设你不使用双重身份验证机制。 因此，我们将创建用于登录的所谓 Azure AD 应用程序和服务主体。 但请记住，Azure AD 支持多个身份验证过程，而这些过程全都可用于检索后续 API 请求所需的身份验证令牌。\r 有关分步说明，请参阅 [Create Azure AD Application and Service Principal](resource-group-create-service-principal-portal.md)（创建 Azure AD 应用程序和服务主体）。\r \r ### 生成访问令牌\r <a name=\"generating-an-access-token\" ></a>\r 通过调用位于 login.chinacloudapi.cn 的 Azure AD 来对 Azure AD 进行身份验证。 若要进行身份验证，需要提供以下信息：\r \r * Azure AD 租户 ID（用于登录的 Azure AD 名称，通常与你的公司同名，但不一定总是如此）\r * 应用程序 ID（在创建 Azure AD 应用程序期间获取）\r * 密码（在创建 Azure AD 应用程序时选择）\r \r 在以下 HTTP 请求中，请确保将“Azure AD Tenant ID”、“Application ID”和“Password”替换为正确的值。\r \r **常规 HTTP 请求：**\r \r ```HTTP\r POST /<Azure AD Tenant ID>/oauth2/token?api-version=1.0 HTTP/1.1 HTTP/1.1\r Host: login.chinacloudapi.cn\r Cache-Control: no-cache\r Content-Type: application/x-www-form-urlencoded\r \r grant_type=client_credentials&resource=https%3A%2F%2Fmanagement.core.chinacloudapi.cn%2F&client_id=<Application ID>&client_secret=<Password>\r ```\r \r ... 将（如果身份验证成功）导致类似于下面的响应：\r \r ```json\r {\r   \"token_type\": \"Bearer\",\r   \"expires_in\": \"3600\",\r   \"expires_on\": \"1448199959\",\r   \"not_before\": \"1448196059\",\r   \"resource\": \"https://management.core.chinacloudapi.cn/\",\r   \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhb...86U3JI_0InPUk_lZqWvKiEWsayA\"\r }\r ```\r （为了方便阅读，上述响应中的 access_token 已缩短）\r \r **使用 Bash 生成访问令牌：**\r \r ```console\r curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"grant_type=client_credentials&resource=https://management.core.chinacloudapi.cn/&client_id=<application id>&client_secret=<password you selected for authentication>\" https://login.chinacloudapi.cn/<Azure AD Tenant ID>/oauth2/token?api-version=1.0\r ```\r \r **使用 PowerShell 生成访问令牌：**\r \r ```powershell\r Invoke-RestMethod -Uri https://login.chinacloudapi.cn/<Azure AD Tenant ID>/oauth2/token?api-version=1.0 -Method Post\r  -Body @{\"grant_type\" = \"client_credentials\"; \"resource\" = \"https://management.core.chinacloudapi.cn/\"; \"client_id\" = \"<application id>\"; \"client_secret\" = \"<password you selected for authentication>\" }\r ```\r \r 响应包含访问令牌和令牌有效期限的相关信息，以及可以将该令牌用于哪项资源的相关信息。\r 在前面的 HTTP 调用中收到的访问令牌必须针对所有请求传递到 Resource Manager API。 请将它作为名为“Authorization”、值为“Bearer YOUR_ACCESS_TOKEN”的标头值传递。 请注意“Bearer”与访问令牌之间有空格。\r \r 从上面的 HTTP 结果可以看到，令牌在特定时间段内保持有效状态，你应在这段期间缓存并重复使用同一令牌。 即使你可以在每次调用 API 时对 Azure AD 进行身份验证，但这样做的效率很低。\r \r ## 调用 Resource Manager REST API\r <a name=\"calling-resource-manager-rest-apis\" ></a>\r 本主题只使用几个 API 来说明 REST 操作的基本用法。 有关所有操作的信息，请参阅 [Azure Resource Manager REST API](https://docs.microsoft.com/rest/api/resources/)。\r \r ### 列出所有订阅\r <a name=\"list-all-subscriptions\" ></a>\r 可以执行的最简单操作之一是列出可以访问的可用订阅。 在以下请求中，可以看到如何以标头的形式传入访问令牌：\r \r （将 YOUR_ACCESS_TOKEN 替换为实际访问令牌。）\r \r ```HTTP\r GET /subscriptions?api-version=2015-01-01 HTTP/1.1\r Host: management.chinacloudapi.cn\r Authorization: Bearer YOUR_ACCESS_TOKEN\r Content-Type: application/json\r ```\r \r ...因此，会收到此服务主体可以访问的订阅列表\r \r （为方便阅读，订阅 ID 已缩短）\r \r ```json\r {\r   \"value\": [\r     {\r       \"id\": \"/subscriptions/3a8555...555995\",\r       \"subscriptionId\": \"3a8555...555995\",\r       \"displayName\": \"Azure Subscription\",\r       \"state\": \"Enabled\",\r       \"subscriptionPolicies\": {\r         \"locationPlacementId\": \"Internal_2014-09-01\",\r         \"quotaId\": \"Internal_2014-09-01\"\r       }\r     }\r   ]\r }\r ```\r \r ### 列出特定订阅中的所有资源组\r <a name=\"list-all-resource-groups-in-a-specific-subscription\" ></a>\r 适用于 Resource Manager API 的所有资源嵌套在资源组中。 可以使用以下 HTTP GET 请求，在 Resource Manager 中查询订阅中现有的资源组。 请注意这一次如何将订阅 ID 作为 URL 的一部分传入。\r \r （将 YOUR_ACCESS_TOKEN 和 SUBSCRIPTION_ID 替换为实际的访问令牌和订阅 ID）\r \r ```HTTP\r GET /subscriptions/SUBSCRIPTION_ID/resourcegroups?api-version=2015-01-01 HTTP/1.1\r Host: management.chinacloudapi.cn\r Authorization: Bearer YOUR_ACCESS_TOKEN\r Content-Type: application/json\r ```\r \r 收到的响应取决于是否已定义任何资源组以及定义了多少个（如果已定义）。\r \r （为方便阅读，订阅 ID 已缩短）\r \r ```json\r {\r     \"value\": [\r         {\r             \"id\": \"/subscriptions/3a8555...555995/resourceGroups/myfirstresourcegroup\",\r             \"name\": \"myfirstresourcegroup\",\r             \"location\": \"chinaeast\",\r             \"properties\": {\r                 \"provisioningState\": \"Succeeded\"\r             }\r         },\r         {\r             \"id\": \"/subscriptions/3a8555...555995/resourceGroups/mysecondresourcegroup\",\r             \"name\": \"mysecondresourcegroup\",\r             \"location\": \"chinaeast\",\r             \"tags\": {\r                 \"tagname1\": \"My first tag\"\r             },\r             \"properties\": {\r                 \"provisioningState\": \"Succeeded\"\r             }\r         }\r     ]\r }\r ```\r \r ### 创建资源组\r <a name=\"create-a-resource-group\" ></a>\r 到目前为止，我们只是通过 Resource Manager API 查询了信息。 接下来可以创建一些资源。让我们从最简单的资源组开始。 以下 HTTP 请求在所选的区域/位置创建一个资源组并在其中添加一个标记。\r \r （将 YOUR_ACCESS_TOKEN、SUBSCRIPTION_ID、RESOURCE_GROUP_NAME 替换为实际的访问令牌、订阅 ID 和要创建的资源组名称）\r \r ```HTTP\r PUT /subscriptions/SUBSCRIPTION_ID/resourcegroups/RESOURCE_GROUP_NAME?api-version=2015-01-01 HTTP/1.1\r Host: management.chinacloudapi.cn\r Authorization: Bearer YOUR_ACCESS_TOKEN\r Content-Type: application/json\r \r {\r   \"location\": \"chinaeast\",\r   \"tags\": {\r     \"tagname1\": \"test-tag\"\r   }\r }\r ```\r \r 如果成功，将返回类似于下面的响应：\r \r ```json\r {\r   \"id\": \"/subscriptions/3a8555...555995/resourceGroups/RESOURCE_GROUP_NAME\",\r   \"name\": \"RESOURCE_GROUP_NAME\",\r   \"location\": \"chinaeast\",\r   \"tags\": {\r     \"tagname1\": \"test-tag\"\r   },\r   \"properties\": {\r     \"provisioningState\": \"Succeeded\"\r   }\r }\r ```\r \r 现已在 Azure 中成功创建一个资源组。 祝贺你！\r \r ### 使用 Resource Manager 模板将资源部署到资源组\r <a name=\"deploy-resources-to-a-resource-group-using-a-resource-manager-template\" ></a>\r 在 Resource Manager 中，可以使用模板部署资源。 模板定义多个资源及其依赖项。 本部分假设读者熟悉 Resource Manager 模板，演示如何进行 API 调用以开始部署。 有关构造模板的详细信息，请参阅[创作 Azure Resource Manager 模板](resource-group-authoring-templates.md)。\r \r 模板的部署与调用其他 API 的方式并没有太大差别。 一个重要方面就是模板部署需要相当长的时间。 API 调用只会返回，开发人员需负责查询部署状态，了解部署何时完成。 有关详细信息，请参阅[跟踪异步 Azure 操作](resource-manager-async-operations.md)。\r \r 本示例使用 [GitHub](https://github.com/Azure/azure-quickstart-templates)上提供的一个公开模板。 使用的模板将 Linux VM 部署到中国北部区域。 尽管本示例使用了公共存储库（如 GitHub）中提供的模板，但你也可以传递整个模板作为请求的一部分。 请注意，在请求中提供的值是部署的模板中使用的值。\r \r （将 SUBSCRIPTION_ID、RESOURCE_GROUP_NAME、DEPLOYMENT_NAME、YOUR_ACCESS_TOKEN、GLOBALY_UNIQUE_STORAGE_ACCOUNT_NAME、ADMIN_USER_NAME、ADMIN_PASSWORD 和 DNS_NAME_FOR_PUBLIC_IP 替换为请求适用的值）\r \r ```HTTP\r PUT /subscriptions/SUBSCRIPTION_ID/resourcegroups/RESOURCE_GROUP_NAME/providers/microsoft.resources/deployments/DEPLOYMENT_NAME?api-version=2015-01-01 HTTP/1.1\r Host: management.chinacloudapi.cn\r Authorization: Bearer YOUR_ACCESS_TOKEN\r Content-Type: application/json\r \r {\r   \"properties\": {\r     \"templateLink\": {\r       \"uri\": \"https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/101-simple-linux-vm/azuredeploy.json\",\r       \"contentVersion\": \"1.0.0.0\",\r     },\r     \"mode\": \"Incremental\",\r     \"parameters\": {\r         \"newStorageAccountName\": {\r           \"value\": \"GLOBALY_UNIQUE_STORAGE_ACCOUNT_NAME\"\r         },\r         \"adminUsername\": {\r           \"value\": \"ADMIN_USER_NAME\"\r         },\r         \"adminPassword\": {\r           \"value\": \"ADMIN_PASSWORD\"\r         },\r         \"dnsNameForPublicIP\": {\r           \"value\": \"DNS_NAME_FOR_PUBLIC_IP\"\r         },\r         \"ubuntuOSVersion\": {\r           \"value\": \"15.04\"\r         }\r     }\r   }\r }\r ```\r \r 为方便阅读本文档，此处省略了此请求的较长 JSON 响应。 响应中包含创建的样板化部署的相关信息。\r \r ## 后续步骤\r <a name=\"next-steps\" ></a>\r \r - 若要了解如何处理异步 REST 操作，请参阅[跟踪异步 Azure 操作](resource-manager-async-operations.md)。"}