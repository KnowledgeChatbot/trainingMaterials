{"Title":"通过百度开始使用 Azure 通知中心","Description":"在本教程中，将了解如何通过百度使用 Azure 通知中心将通知推送到 Android 设备。","Content":"# <a name=\"get-started-with-notification-hubs-using-baidu\"></a>通过百度开始使用通知中心\r [!INCLUDE [notification-hubs-selector-get-started](../../includes/notification-hubs-selector-get-started.md)]\r \r 百度云推送是一种中国云服务，可用于将推送通知发送到移动设备。 \r \r 由于 Google Play 和 FCM (Firebase Cloud Messaging) 在中国不可用，必须使用其他的应用商店和推送服务。 百度就是其中的一个，也是通知中心目前所使用的。\r \r ## <a name=\"prerequisites\"></a>先决条件\r 本教程需要：\r \r - Android SDK（我们假设你使用 Android Studio），可从 <a href=\"http://go.microsoft.com/fwlink/?LinkId=389797\">Android 站点</a>下载\r - [百度推送 Android SDK]\r \r > [!NOTE]\r > 要完成本教程，必须有一个有效的 Azure 帐户。 如果没有帐户，可以创建一个试用帐户，只需几分钟即可完成。 有关详细信息，请参阅 [Azure 1 元试用](https://www.azure.cn/pricing/1rmb-trial/)。\r > \r > \r \r ## <a name=\"create-a-baidu-account\"></a>创建百度帐户\r 要使用百度，必须有一个百度帐户。 如果已有帐户，请登录 [百度门户]，并跳到下一步。 否则请参阅以下说明创建百度帐户。  \r \r 1. 转到[百度门户]并单击“登录”链接。 单击“立即注册”(Register Now) 以启动帐户注册过程。\r    \r     ![百度注册](./media/notification-hubs-baidu-get-started/BaiduRegistration.png)\r \r 2. 输入所需的详细信息（电话/电子邮件地址、密码和验证码），并单击“注册”(Signup)。\r    \r     ![百度注册输入](./media/notification-hubs-baidu-get-started/BaiduRegistrationInput.png)\r \r 3. 系统会将一封电子邮件发送到输入的电子邮件地址，该邮件包含一个用于激活百度帐户的链接。\r    \r     ![百度注册确认](./media/notification-hubs-baidu-get-started/BaiduConfirmation.png)\r \r 4. 登录到用户的电子邮件帐户，打开百度激活邮件，并单击激活链接以激活用户的百度帐号。\r    \r     ![百度激活电子邮件](./media/notification-hubs-baidu-get-started/BaiduActivationEmail.png)\r \r 有已激活的百度帐户后，请登录 [百度门户]。\r \r ## <a name=\"create-a-baidu-cloud-push-project\"></a>创建百度云推送项目\r 在创建百度云推送项目时，将收到应用程序 ID、API 密钥和密钥。\r \r 1. 登录到[百度门户]后，请单击“更多>>”。\r    \r     ![注册 - 更多内容](./media/notification-hubs-baidu-get-started/BaiduRegistrationMore.png)\r \r 2. 向下滚动“站长与开发者服务”(Webmaster and Developer Services) 部分并单击“百度云推送”(Baidu Cloud Push)。\r    \r     ![百度开放云平台](./media/notification-hubs-baidu-get-started/BaiduOpenCloudPlatform.png)\r \r 3. 在下一页的右上角单击“登录”(Login)。\r    \r     ![百度登录](./media/notification-hubs-baidu-get-started/BaiduLogin.png)\r \r 4. 然后，单击该页上的“创建应用”(Create Application)。\r \r     ![百度“创建应用”](./media/notification-hubs-baidu-get-started/BaiduCreateApplication.png)\r \r 5. 在下一页上单击“创建新应用”(Create New Application)。\r    \r     ![百度“创建新应用”](./media/notification-hubs-baidu-get-started/BaiduCreateNewApplication.png)\r \r 6. 输入应用程序名称，并单击“创建”(Create)。\r    \r     ![](./media/notification-hubs-baidu-get-started/BaiduCreateApplicationDoCreate.png)\r \r 7. 成功创建百度云推送项目后，会显示一个页面，其中包含“AppID”、“API 密钥”和“密钥”。 请记下 API 密钥和密钥，因为稍后将要用到。\r    \r     ![百度“推送机密”](./media/notification-hubs-baidu-get-started/BaiduGetSecrets.png)\r \r 8. 通过单击左侧窗格中的“创建通知”(Create Notification) 来配置推送通知项目。\r    \r     ![](./media/notification-hubs-baidu-get-started/BaiduCreateNotification.png)\r \r \r ## <a name=\"configure-a-new-notification-hub\"></a>配置新通知中心\r [!INCLUDE [notification-hubs-portal-create-new-hub](../../includes/notification-hubs-portal-create-new-hub.md)]\r \r \r 5. 在通知中心选择“通知服务”，然后选择“百度(Android China)”。\r \r     ![Azure 通知中心 - 百度](./media/notification-hubs-baidu-get-started/AzureNotificationServicesBaidu.png)\r \r 6. 向下滚动到百度通知设置部分。 在百度云推送项目中，输入从百度控制台获得的 API 密钥和密钥。 然后单击“保存”。\r \r     ![Azure 通知中心 - 百度机密](./media/notification-hubs-baidu-get-started/NotificationHubBaiduConfigure.png)\r \r 通知中心现在已配置为使用百度。 此外还有连接字符串，用于注册发送和接收推送通知的应用。\r \r 记下“访问连接信息”窗口中的 `DefaultListenSharedAccessSignature` 和 `DefaultFullSharedAccessSignature`。\r \r ## <a name=\"connect-your-app-to-the-notification-hub\"></a>将应用连接到通知中心\r 1. 在 Android Studio 中创建新的 Android 项目（“文件”>“新建”>“新建项目”）。\r \r     ![Azure 通知中心 - 百度“新建项目”](./media/notification-hubs-baidu-get-started/AndroidNewProject.png)\r \r 2. 输入应用程序名称，并确保将要求的最低 SDK 版本设为“API 16: Android 4.1”。 **另请确保应用包名与百度云推送门户中的相同**\r \r     ![Azure 通知中心 - 百度 Min SDK1](./media/notification-hubs-baidu-get-started/AndroidMinSDK.png) ![Azure 通知中心 - 百度 Min SDK2](./media/notification-hubs-baidu-get-started/AndroidMinSDK2.png)\r \r 3. 单击“下一步”，并继续执行向导，直到显示“创建活动”窗口。 确保选中了“空活动”，最后选择“完成”以创建新的 Android 应用程序。\r \r     ![Azure 通知中心 - 百度“添加活动”](./media/notification-hubs-baidu-get-started/AndroidAddActivity.png)\r \r 4. 确保“项目生成目标”已正确设置。\r \r 5. 然后添加 Azure 通知中心库。 在应用的 `Build.Gradle` 文件中，在 dependencies 节添加以下行。\r \r     ```javascript\r     compile 'com.microsoft.azure:notification-hubs-android-sdk:0.4@aar'\r     compile 'com.microsoft.azure:azure-notifications-handler:1.0.1@aar'\r     ```\r \r     在 dependencies 节的后面添加以下存储库。\r \r     ```javascript\r     repositories {\r         maven {\r             url \"http://dl.bintray.com/microsoftazuremobile/SDK\"\r         }\r     }\r     ```\r \r     为了避免列表冲突，需在 Manifest.xml 中添加以下代码。\r \r     ```xml\r     <manifest package=\"YOUR.PACKAGE.NAME\"\r     xmlns:tools=\"http://schemas.android.com/tools\"\r     xmlns:android=\"http://schemas.android.com/apk/res/android\">\r     ```\r \r     然后在 `<application/>` 标记中执行以下操作：\r \r     ```xml\r     <application\r         tools:replace=\"android:allowBackup,icon,theme,label\">\r     ```\r \r 6. 下载并解压缩[百度推送 Android SDK]。 复制 libs 文件夹中的 `pushservice-x.y.z jar` 文件。 然后复制 Android 应用程序的 `src/main/jniLibs`（创建新文件夹）文件夹中的 `.so` 文件。\r \r     ![Azure 通知中心 - 百度 SDK Libs](./media/notification-hubs-baidu-get-started/BaiduSDKLib.png)\r \r 7. 右键单击 libs 文件夹中的 pushervice-x.y.z.jar 文件，然后单击“添加为库”将该 lib 包括到项目中。\r \r     ![Azure 通知中心 - 百度“添加为库”](./media/notification-hubs-baidu-get-started/BaiduAddAsALib.jpg)\r \r 8. 打开 Android 项目的 **AndroidManifest.xml** 文件，并添加百度 SDK 所需的权限。 **将 `YOURPACKAGENAME` 替换为包名**。\r \r     ```xml\r     <uses-permission android:name=\"android.permission.INTERNET\" />\r     <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r     <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r     <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\r     <uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\r     <uses-permission android:name=\"android.permission.VIBRATE\" />\r     <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r     <uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\" />\r     <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r     <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r     <uses-permission android:name=\"android.permission.ACCESS_DOWNLOAD_MANAGER\" />\r     <uses-permission android:name=\"android.permission.DOWNLOAD_WITHOUT_NOTIFICATION\" />\r     <uses-permission android:name=\"android.permission.EXPAND_STATUS_BAR\" />\r     !! <uses-permission android:name=\"baidu.push.permission.WRITE_PUSHINFOPROVIDER.YOURPACKAGENAME\" />\r     !!<permission android:name=\"baidu.push.permission.WRITE_PUSHINFOPROVIDER.YOURPACKAGENAME\"android:protectionLevel=\"normal\" />\r \r     ```\r \r 9. 在 `.MainActivity` 活动元素后的 application 元素内添加以下配置，并替换 *yourprojectname*（例如 `com.example.BaiduTest`）：\r \r     ```xml\r     <activity\r         android:name=\"com.baidu.android.pushservice.richmedia.MediaViewActivity\"\r         android:configChanges=\"orientation|keyboardHidden\"\r         android:label=\"MediaViewActivity\" />\r     <activity\r         android:name=\"com.baidu.android.pushservice.richmedia.MediaListActivity\"\r         android:configChanges=\"orientation|keyboardHidden\"\r         android:label=\"MediaListActivity\"\r         android:launchMode=\"singleTask\" />\r  \r     <!-- Push application definition message -->\r     <receiver android:name=\".MyPushMessageReceiver\">\r         <intent-filter>\r \r             <!-- receive push message-->\r             <action android:name=\"com.baidu.android.pushservice.action.MESSAGE\" />\r             <!-- receive bind,unbind,fetch,delete.. message-->\r             <action android:name=\"com.baidu.android.pushservice.action.RECEIVE\" />\r             <action android:name=\"com.baidu.android.pushservice.action.notification.CLICK\" />\r         </intent-filter>\r     </receiver>\r \r     <receiver\r         android:name=\"com.baidu.android.pushservice.PushServiceReceiver\"\r         android:process=\":bdservice_v1\">\r         <intent-filter>\r             <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\r             <action android:name=\"android.net.conn.CONNECTIVITY_CHANGE\" />\r             <action android:name=\"com.baidu.android.pushservice.action.notification.SHOW\" />\r             <action android:name=\"com.baidu.android.pushservice.action.media.CLICK\" />\r             <action android:name=\"android.intent.action.MEDIA_MOUNTED\" />\r             <action android:name=\"android.intent.action.USER_PRESENT\" />\r             <action android:name=\"android.intent.action.ACTION_POWER_CONNECTED\" />\r             <action android:name=\"android.intent.action.ACTION_POWER_DISCONNECTED\" />\r         </intent-filter>\r     </receiver>\r \r     <receiver\r         android:name=\"com.baidu.android.pushservice.RegistrationReceiver\"\r         android:process=\":bdservice_v1\">\r         <intent-filter>\r             <action android:name=\"com.baidu.android.pushservice.action.METHOD\" />\r             <action android:name=\"com.baidu.android.pushservice.action.BIND_SYNC\" />\r         </intent-filter>\r         <intent-filter>\r             <action android:name=\"android.intent.action.PACKAGE_REMOVED\" />\r \r             <data android:scheme=\"package\" />\r         </intent-filter>\r     </receiver>\r \r     <service\r         android:name=\"com.baidu.android.pushservice.PushService\"\r         android:exported=\"true\"\r         android:process=\":bdservice_v1\">\r         <intent-filter>\r             <action android:name=\"com.baidu.android.pushservice.action.PUSH_SERVICE\" />\r         </intent-filter>\r     </service>\r \r     <service\r         android:name=\"com.baidu.android.pushservice.CommandService\"\r         android:exported=\"true\" />\r \r     <!-- Adapt the ContentProvider declaration required for the Android N system, and the write permissions include the application package name-->\r     <provider\r         android:name=\"com.baidu.android.pushservice.PushInfoProvider\"\r         android:authorities=\"com.baidu.push.example.bdpush\"\r         android:exported=\"true\"\r         android:protectionLevel=\"signature\"\r         android:writePermission=\"baidu.push.permission.WRITE_PUSHINFOPROVIDER. yourprojectname  \" />\r \r     <!-- API Key of the Baidu application -->\r     <meta-data\r         android:name=\"api_key\"\r         !!   android:value=\"api_key\" />\r     </application>\r     ```\r \r 10. 将名为 `ConfigurationSettings.java` 的新类添加到项目。\r \r     ```java\r     public class ConfigurationSettings {\r         public static String API_KEY = \"...\";\r         public static String NotificationHubName = \"...\";\r         public static String NotificationHubConnectionString = \"...\";\r     }\r     ```\r     \r     使用百度云项目中的 API_KEY 设置 `API_KEY` 字符串的值。\r     \r     使用 [Azure 门户]中的通知中心名称设置 `NotificationHubName` 字符串的值，然后使用 [Azure 门户]中的 `DefaultListenSharedAccessSignature` 设置 `NotificationHubConnectionString` 的值。\r \r 11. 打开 MainActivity.java，并将以下内容添加到 onCreate 方法中：\r \r     ```java\r     PushManager.startWork(this, PushConstants.LOGIN_TYPE_API_KEY,  API_KEY );\r     ```\r \r 12. 添加一个名为 `MyPushMessageReceiver.java` 的新类，并向此类中添加以下代码： 此类用于处理从百度推送服务器收到的推送通知。\r \r     ```java\r     package your.package.name;\r \r     import android.content.Context;\r     import android.content.Intent;\r     import android.os.AsyncTask;\r     import android.text.TextUtils;\r     import android.util.Log;\r \r     import com.baidu.android.pushservice.PushMessageReceiver;\r     import com.microsoft.windowsazure.messaging.NotificationHub;\r     import org.json.JSONException;\r     import org.json.JSONObject;\r \r     import java.util.List;\r \r     public class MyPushMessageReceiver extends PushMessageReceiver {\r \r         public static final String TAG = MyPushMessageReceiver.class\r                 .getSimpleName();\r         public static NotificationHub hub = null;\r         public static String mChannelId, mUserId;\r \r         @Override\r         public void onBind(Context context, int errorCode, String appid,\r                         String userId, String channelId, String requestId) {\r             String responseString = \"onBind errorCode=\" + errorCode + \" appid=\"\r                     + appid + \" userId=\" + userId + \" channelId=\" + channelId\r                     + \" requestId=\" + requestId;\r             Log.d(TAG, responseString);\r \r             if (errorCode == 0) {\r                 // Binding successful\r                 Log.d(TAG, \" Binding successful\");\r             }\r             try {\r                 if (hub == null) {\r                     hub = new NotificationHub(\r                             ConfigurationSettings.NotificationHubName,\r                             ConfigurationSettings.NotificationHubConnectionString,\r                             context);\r                     Log.i(TAG, \"Notification hub initialized\");\r                 }\r             } catch (Exception e) {\r                 Log.e(TAG, e.getMessage());\r             }\r             mChannelId = channelId;\r             mUserId = userId;\r \r             registerWithNotificationHubs();\r         }\r         private void registerWithNotificationHubs() {\r \r             new AsyncTask<Void, Void, Void>() {\r                 @Override\r                 protected Void doInBackground(Void... params) {\r                     try {\r                         hub.registerBaidu(mUserId, mChannelId);\r                         Log.i(TAG, \"Registered with Notification Hub - '\"\r                                 + ConfigurationSettings.NotificationHubName + \"'\"\r                                 + \" with UserId - '\"\r                                 + mUserId + \"' and Channel Id - '\"\r                                 + mChannelId + \"'\");\r                     } catch (Exception e) {\r                         Log.e(TAG, e.getMessage());\r                     }\r                     return null;\r                 }\r             }.execute(null, null, null);\r         }\r \r         @Override\r         public void onMessage(Context context, String message,\r                             String customContentString) {\r             String messageString = \" onMessage=\\\"\" + message\r                     + \"\\\" customContentString=\" + customContentString;\r             Log.d(TAG, messageString);\r             if (!TextUtils.isEmpty(customContentString)) {\r                 JSONObject customJson = null;\r                 try {\r                     customJson = new JSONObject(customContentString);\r                     String myvalue = null;\r                     if (!customJson.isNull(\"mykey\")) {\r                         myvalue = customJson.getString(\"mykey\");\r                     }\r                 } catch (JSONException e) {\r                     e.printStackTrace();\r                 }\r             }\r \r         }\r \r         @Override\r         public void onNotificationArrived(Context context, String title, String description, String customContentString) {\r             String notifyString = \" Notice Arrives onNotificationArrived  title=\\\"\" + title\r                     + \"\\\" description=\\\"\" + description + \"\\\" customContent=\"\r                     + customContentString;\r             Log.d(TAG, notifyString);\r             if (!TextUtils.isEmpty(customContentString)) {\r                 JSONObject customJson = null;\r                 try {\r                     customJson = new JSONObject(customContentString);\r                     String myvalue = null;\r                     if (!customJson.isNull(\"mykey\")) {\r                         myvalue = customJson.getString(\"mykey\");\r                     }\r                 } catch (JSONException e) {\r                     // TODO Auto-generated catch block\r                     e.printStackTrace();\r                 }\r             }\r         }\r \r         @Override\r         public void onNotificationClicked(Context context, String title, String description, String customContentString) {\r             String notifyString = \" onNotificationClicked title=\\\"\" + title + \"\\\" description=\\\"\"\r                     + description + \"\\\" customContent=\" + customContentString;\r             Log.d(TAG, notifyString);\r             Intent intent = new Intent(context.getApplicationContext(),MainActivity.class);\r             intent.putExtra(\"title\",title);\r             intent.putExtra(\"description\",description);\r             intent.putExtra(\"isFromNotify\",true);\r             intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r             context.getApplicationContext().startActivity(intent);\r \r         }\r \r         @Override\r         public void onSetTags(Context context, int errorCode,\r                             List<String> successTags, List<String> failTags, String requestId) {\r             String responseString = \"onSetTags errorCode=\" + errorCode\r                     + \" successTags=\" + successTags + \" failTags=\" + failTags\r                     + \" requestId=\" + requestId;\r             Log.d(TAG, responseString);\r \r         }\r \r         @Override\r         public void onDelTags(Context context, int errorCode,\r                             List<String> successTags, List<String> failTags, String requestId) {\r             String responseString = \"onDelTags errorCode=\" + errorCode\r                     + \" successTags=\" + successTags + \" failTags=\" + failTags\r                     + \" requestId=\" + requestId;\r             Log.d(TAG, responseString);\r \r         }\r \r         @Override\r         public void onListTags(Context context, int errorCode, List<String> tags,\r                             String requestId) {\r             String responseString = \"onListTags errorCode=\" + errorCode + \" tags=\"\r                     + tags;\r             Log.d(TAG, responseString);\r \r         }\r \r         @Override\r         public void onUnbind(Context context, int errorCode, String requestId) {\r             String responseString = \"onUnbind errorCode=\" + errorCode\r                     + \" requestId = \" + requestId;\r             Log.d(TAG, responseString);\r \r             if (errorCode == 0) {\r                 // Unbinding is successful\r                 Log.d(TAG, \" Unbinding is successful \");\r             }\r         }\r     }\r     ```\r \r ## <a name=\"send-notifications-to-your-app\"></a>向应用程序发送通知\r \r 可以在 [Azure 门户]中快速测试通知接收情况：使用通知中心配置屏幕中的“发送”按钮，如以下屏幕所示：\r \r ![](./media/notification-hubs-baidu-get-started/BaiduTestSendButton.png)\r ![](./media/notification-hubs-baidu-get-started/BaiduTestSend.png)\r \r 通常，推送通知是在后端服务（例如，移动服务，或者使用兼容库的 ASP.NET）中发送的。 如果后端没有可用的库，则可直接使用 REST API 发送通知消息。\r \r 为简单起见，本教程使用一个控制台应用演示如何通过 .NET SDK 来发送通知。 但是，建议你接下来学习[使用通知中心向用户推送通知](notification-hubs-aspnet-backend-windows-dotnet-wns-notification.md)教程，了解如何从 ASP.NET 后端发送通知。 \r \r 下面是用于发送通知的不同方法：\r - REST 接口：可以使用 [REST 接口](http://msdn.microsoft.com/library/windowsazure/dn223264.aspx)在任何后端平台上支持通知。\r - **Azure 通知中心 .NET SDK**：在 Visual Studio 的 Nuget 包管理器中，运行 [Install-Package Microsoft.Azure.NotificationHubs](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)。\r - **Node.js**：[如何通过 Node.js 使用通知中心](notification-hubs-nodejs-push-notification-tutorial.md)。\r - **Java/PHP**：有关如何使用 REST API 发送通知的示例，请参阅“如何通过 Java/PHP 使用通知中心”([Java](notification-hubs-java-push-notification-tutorial.md) | [PHP](notification-hubs-php-push-notification-tutorial.md))。\r \r ## <a name=\"optional-send-notifications-from-a-net-console-app\"></a>（可选）通过 .NET 控制台应用发送通知。\r 在本部分，我们将演示如何使用 .NET 控制台应用发送通知。\r \r 1. 创建新的 Visual C# 控制台应用程序：\r    \r     ![](./media/notification-hubs-baidu-get-started/ConsoleProject.png)\r \r 2. 在“包管理器控制台”窗口中，将“默认项目”设置为新的控制台应用程序项目，然后在控制台窗口中执行以下命令：\r    \r         Install-Package Microsoft.Azure.NotificationHubs\r    \r     此指令会使用 <a href=\"http://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/\">Microsoft.Azure.Notification Hubs NuGet 包</a>添加对 Azure 通知中心 SDK 的引用。\r    \r     ![](./media/notification-hubs-windows-store-dotnet-get-started/notification-hub-package-manager.png)\r \r 3. 打开 `Program.cs` 文件并添加以下 using 语句：\r    \r     ```csharp\r     using Microsoft.Azure.NotificationHubs;\r     ```\r \r 4. 在 `Program` 类中添加以下方法，并使用自己的值替换 `DefaultFullSharedAccessSignatureSASConnectionString` 和 `NotificationHubName`。\r    \r     ```csharp\r     private static async void SendNotificationAsync()\r     {\r         NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(\"DefaultFullSharedAccessSignatureSASConnectionString\", \"NotificationHubName\");\r         string message = \"{\\\"title\\\":\\\"((Notification title))\\\",\\\"description\\\":\\\"Hello from Azure\\\"}\";\r         var result = await hub.SendBaiduNativeNotificationAsync(message);\r     }\r     ```\r \r 5. 在 `Main` 方法中添加以下行：\r \r     ```csharp\r     SendNotificationAsync();\r     Console.ReadLine();\r     ```\r \r ## <a name=\"test-your-app\"></a>测试应用程序\r \r 要使用实际的手机测试此应用，只需使用 USB 电缆将该手机连接到计算机。 此操作会将应用加载到连接的手机中。\r \r 若要使用模拟器测试此应用，请在 Android Studio 顶部工具栏中单击“运行”，然后选择用于启动模拟器、加载和运行应用的应用。\r \r 该应用将从百度推送通知服务检索 `userId` 和 `channelId`，并注册到通知中心。\r \r 若要发送测试通知，可以使用 [Azure 门户]的调试选项卡。 如果为 Visual Studio 生成了 .NET 控制台应用程序，只需在 Visual Studio 中按 F5 键以运行该应用程序。 该应用程序会发送一条通知，该通知显示在设备或模拟器的顶部通知区域。\r \r <!-- URLs. -->\r [Mobile Services Android SDK]: https://go.microsoft.com/fwLink/?LinkID=280126&clcid=0x409\r [百度推送 Android SDK]: http://push.baidu.com/sdk/push_client_sdk_for_android\r [Azure 门户]: https://portal.azure.cn/\r [百度门户]: http://www.baidu.com/\r \r <!--Update_Description: wording update -->\r "}