{"Title":"向通用 Windows 平台 (UWP) 应用添加身份验证","Description":"了解如何使用 Azure 应用服务移动应用通过各种标识提供者（包括 AAD 和 Microsoft）对通用 Windows 平台 (UWP) 应用的用户进行身份验证。","Content":"# <a name=\"add-authentication-to-your-windows-app\"></a>向 Windows 应用添加身份验证\r \r [!INCLUDE [app-service-mobile-selector-get-started-users](../../includes/app-service-mobile-selector-get-started-users.md)]\r \r 本主题演示如何向移动应用添加基于云的身份验证。在本教程中，使用 Azure 应用服务支持的标识提供者向移动应用的通用 Windows 平台 (UWP) 快速入门项目添加身份验证。在移动应用后端成功进行身份验证和授权后，显示用户 ID 值。\r \r 本教程基于移动应用快速入门。必须先完成[移动应用入门](./app-service-mobile-windows-store-dotnet-get-started.md)教程。\r \r ##<a name=\"register\"></a>注册应用以进行身份验证并配置应用服务\r \r [!INCLUDE [app-service-mobile-register-authentication](../../includes/app-service-mobile-register-authentication.md)]\r \r ## <a name=\"redirecturl\"></a>将应用添加到允许的外部重定向 URL\r \r 安全身份验证要求为应用定义新的 URL 方案。 此方案允许在完成身份验证过程后，身份验证系统重定向到应用。 在本教程中，我们自始至终使用 URL 方案 _appname_ 。 但是，可以使用任何你所选的 URL 方案。 对于移动应用程序而言，它应是唯一的。 在服务器端启用重定向：\r \r 1. 在 [Azure 门户]中，选择应用服务。\r \r 2. 单击“身份验证/授权”菜单选项。\r \r 3. 在“允许的外部重定向 URL”中，输入 `url_scheme_of_your_app://easyauth.callback`。  此字符串中的 **url_scheme_of_your_app** 是移动应用程序的 URL 方案。  它应该遵循协议的正常 URL 规范（仅使用字母和数字，并以字母开头）。  请记下所选的字符串，因为需要在几个地方使用 URL 方案调整移动应用程序代码。\r \r 4. 单击 **“确定”**。\r \r 5. 单击“保存” 。\r \r ## <a name=\"permissions\"></a>将权限限制给已经过身份验证的用户\r [!INCLUDE [app-service-mobile-restrict-permissions-dotnet-backend](../../includes/app-service-mobile-restrict-permissions-dotnet-backend.md)]\r \r 现在，可以验证是否已禁用对后端的匿名访问。将 UWP 应用项目设为启动项目后，部署并运行该应用；验证启动该应用后，是否会引发状态代码为 401（“未授权”）的未处理异常。发生此异常的原因是应用尝试以未经身份验证的用户身份访问移动应用代码，但 *TodoItem* 表现在要求身份验证。\r \r 接下来，更新应用，以便在从应用服务请求资源之前对用户进行身份验证。\r \r ##<a name=\"add-authentication\"></a>向应用程序添加身份验证\r \r 1. 在 UWP 应用项目文件 MainPage.xaml.cs 中，添加以下代码片段：\r \r     ```\r     // Define a member variable for storing the signed-in user. \r     private MobileServiceUser user;\r \r     // Define a method that performs the authentication process\r     // using a Microsoft sign-in. \r     private async System.Threading.Tasks.Task<bool> AuthenticateAsync()\r     {\r         string message;\r         bool success = false;\r         try\r         {\r             // Change 'MobileService' to the name of your MobileServiceClient instance.\r             // Sign-in using MicrosoftAccount authentication.\r             user = await App.MobileService\r                     .LoginAsync(MobileServiceAuthenticationProvider.MicrosoftAccount, \"{url_scheme_of_your_app}\");\r             message =\r                 string.Format(\"You are now signed in - {0}\", user.UserId);\r \r             success = true;\r         }\r         catch (InvalidOperationException)\r         {\r             message = \"You must log in. Login Required\";\r         }\r \r         var dialog = new MessageDialog(message);\r         dialog.Commands.Add(new UICommand(\"OK\"));\r         await dialog.ShowAsync();\r         return success;\r     }\r     ```\r \r     此代码使用 MicrosoftAccount 登录对用户进行身份验证。 如果使用的标识提供者不是 MicrosoftAccount，请将上述 **MobileServiceAuthenticationProvider** 的值更改为提供者的值。\r 2. 替换 MainPage.xaml.cs 中的 **OnNavigatedTo()** 方法。 接下来，向应用添加用于触发身份验证的“登录”  按钮。\r \r         protected override async void OnNavigatedTo(NavigationEventArgs e)\r         {\r             if (e.Parameter is Uri)\r             {\r                 App.MobileService.ResumeWithURL(e.Parameter as Uri);\r             }\r         }\r \r 3. 将以下代码片段添加到 MainPage.xaml.cs：\r \r     ```\r     private async void ButtonLogin_Click(object sender, RoutedEventArgs e)\r     {\r         // Login the user and then load data from the mobile app.\r         if (await AuthenticateAsync())\r         {\r             // Switch the buttons and load items from the mobile app.\r             ButtonLogin.Visibility = Visibility.Collapsed;\r             ButtonSave.Visibility = Visibility.Visible;\r             //await InitLocalStoreAsync(); //offline sync support.\r             await RefreshTodoItems();\r         }\r     }\r     ```\r \r 5. 打开 MainPage.xaml 项目文件，找到定义“保存”按钮的元素，将其替换为以下代码：\r \r     ```\r     <Button Name=\"ButtonSave\" Visibility=\"Collapsed\" Margin=\"0,8,8,0\" \r             Click=\"ButtonSave_Click\">\r         <StackPanel Orientation=\"Horizontal\">\r             <SymbolIcon Symbol=\"Add\"/>\r             <TextBlock Margin=\"5\">Save</TextBlock>\r         </StackPanel>\r     </Button>\r     <Button Name=\"ButtonLogin\" Visibility=\"Visible\" Margin=\"0,8,8,0\" \r             Click=\"ButtonLogin_Click\" TabIndex=\"0\">\r         <StackPanel Orientation=\"Horizontal\">\r             <SymbolIcon Symbol=\"Permissions\"/>\r             <TextBlock Margin=\"5\">Sign in</TextBlock> \r         </StackPanel>\r     </Button>\r     ```\r     \r 5. 将以下代码片段添加到 App.xaml.cs：\r \r         protected override void OnActivated(IActivatedEventArgs args)\r         {\r             if (args.Kind == ActivationKind.Protocol)\r             {\r                 ProtocolActivatedEventArgs protocolArgs = args as ProtocolActivatedEventArgs;\r                 Frame content = Window.Current.Content as Frame;\r                 if (content.Content.GetType() == typeof(MainPage))\r                 {\r                     content.Navigate(typeof(MainPage), protocolArgs.Uri);\r                 }\r             }\r             Window.Current.Activate();\r             base.OnActivated(args);\r         }\r 6. 打开 Package.appxmanifest 文件，导航到“声明”，在“可用声明”下拉列表中，选择“协议”并单击“添加”按钮。 现在，配置**协议**声明的**属性**。 在“显示名称”中，添加要向应用程序的用户显示的名称。 在“名称”中，添加 {url_scheme_of_your_app}。\r 7. 按 F5 键运行该应用，单击“登录”按钮，然后使用所选的标识提供者登录到该应用。 成功登录后，该应用运行时不会出错，用户能够查询后端，并对数据进行更新。\r \r ##<a name=\"tokens\"></a>在客户端上存储身份验证令牌\r \r 前一示例显示了标准登录，这要求在该应用每次启动时客户端同时联系标识提供者和应用服务。 此方法不仅效率低下，而且如果很多客户尝试同时启动应用，会遇到关于使用率的问题。 更好的方法是缓存应用服务返回的授权令牌，并在使用基于提供者的登录之前首先尝试使用此令牌。\r \r >[!NOTE]\r >无论使用的是客户端管理的还是服务管理的身份验证，都可以缓存应用服务颁发的令牌。本教程使用服务管理的身份验证。\r > \r > \r \r ##<a name=\"next-steps\"></a>后续步骤\r \r 完成此基本身份验证教程后，请考虑继续学习以下教程之一：\r \r + [为应用启用脱机同步](./app-service-mobile-windows-store-dotnet-get-started-offline-data.md) \r   了解如何使用移动应用后端向应用添加脱机支持。 借助脱机同步，最终用户即使在没有网络连接时也能够与移动应用进行交互（查看、添加或修改数据）。\r \r <!-- URLs. -->\r [Get started with your mobile app]: ./app-service-mobile-windows-store-dotnet-get-started.md\r \r [Azure 门户]: https://portal.azure.cn\r \r <!--Update_Description: update wording and code-->"}