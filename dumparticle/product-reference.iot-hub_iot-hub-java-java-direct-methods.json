{"Title":"使用 Azure IoT 中心的直接方法 (Java)","Description":"如何使用 Azure IoT 中心直接方法。 使用适用于 Java 的 Azure IoT 设备 SDK 实现包含直接方法的模拟设备应用，并使用适用于 Java 的 Azure IoT 服务 SDK 实现调用直接方法的服务应用。","Content":"# <a name=\"use-direct-methods-java\"></a>使用直接方法 (Java)\r \r [!INCLUDE [iot-hub-selector-c2d-methods](../../includes/iot-hub-selector-c2d-methods.md)]\r \r 在本教程中，你将创建两个 Java 控制台应用：\r \r * **invoke-direct-method**：一个 Java 后端应用，它调用模拟设备应用上的方法并显示响应。\r * **模拟设备**：一个 Java 应用，它模拟使用创建的设备标识连接到 IoT 中心的设备。 此应用对后端直接调用做出响应。\r \r > [!NOTE]\r > 有关 SDK 的信息（可以使用这些 SDK 构建在设备和解决方案后端上运行的应用程序），请参阅 [Azure IoT SDK][lnk-hub-sdks]。\r \r 要完成本教程，需要：\r \r * Java SE 8。 <br/> [准备开发环境][lnk-dev-setup] 介绍了如何在 Windows 或 Linux 上安装本教程所用的 Java。\r * Maven 3。  <br/> [准备开发环境][lnk-dev-setup]介绍如何在 Windows 或 Linux 上安装本教程所用的 [Maven][lnk-maven]。\r * [Node.js 版本 0.10.0 或更高版本](http://nodejs.org)。\r \r [!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r \r [!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r \r ## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r \r 在本部分中，你将创建一个 Java 控制台应用，用以响应解决方案后端调用的方法。\r \r 1. 创建一个名为 iot-java-direct-method 的空文件夹。\r \r 1. 在命令提示符下使用以下命令，在 iot-java-direct-method 文件夹中创建一个名为 **simulated-device** 的 Maven 项目。 以下命令是一条很长的命令：\r \r     `mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=simulated-device -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false`\r \r 1. 在命令提示符下，导航到 simulated-device 文件夹。\r \r 1. 使用文本编辑器，打开 simulated-device 文件夹中的 pom.xml 文件，并在 **dependencies** 节点中添加以下依赖项。 此依赖项使得你可以使用应用中的 iot-device-client 包来与 IoT 中心进行通信：\r \r     ```xml\r     <dependency>\r       <groupId>com.microsoft.azure.sdk.iot</groupId>\r       <artifactId>iot-device-client</artifactId>\r       <version>1.3.32</version>\r     </dependency>\r     ```\r \r     > [!NOTE]\r     > 可以使用 [Maven 搜索][lnk-maven-device-search]检查是否有最新版本的 **iot-device-client**。\r \r 1. 在 **dependencies** 节点后添加以下 **build** 节点。 此配置指示 Maven 使用 Java 1.8 来生成应用：\r \r     ```xml\r     <build>\r       <plugins>\r         <plugin>\r           <groupId>org.apache.maven.plugins</groupId>\r           <artifactId>maven-compiler-plugin</artifactId>\r           <version>3.3</version>\r           <configuration>\r             <source>1.8</source>\r             <target>1.8</target>\r           </configuration>\r         </plugin>\r       </plugins>\r     </build>\r     ```\r \r 1. 保存并关闭 pom.xml 文件。\r \r 1. 使用文本编辑器打开 simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。\r \r 1. 在该文件中添加以下 **import** 语句：\r \r     ```java\r     import com.microsoft.azure.sdk.iot.device.*;\r     import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\r \r     import java.io.IOException;\r     import java.net.URISyntaxException;\r     import java.util.Scanner;\r     ```\r \r 1. 将以下类级变量添加到 **App** 类。 将 `{youriothubname}` 替换为 IoT 中心名称，将 `{yourdevicekey}` 替换为在“创建设备标识”部分中生成的设备密钥值：\r \r     ```java\r     private static String connString = \"HostName={youriothubname}.azure-devices.cn;DeviceId=myDeviceID;SharedAccessKey={yourdevicekey}\";\r     private static IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\r     private static String deviceId = \"myDeviceId\";\r     private static final int METHOD_SUCCESS = 200;\r     private static final int METHOD_NOT_DEFINED = 404;\r     ```\r \r     本示例应用在实例化 **DeviceClient** 对象时使用 **protocol** 变量。 \r \r 1. 若要向 IoT 中心返回状态代码，向 App 类添加以下嵌套类：\r \r     ```java\r     protected static class DirectMethodStatusCallback implements IotHubEventCallback\r     {\r       public void execute(IotHubStatusCode status, Object context)\r       {\r         System.out.println(\"IoT Hub responded to device method operation with status \" + status.name());\r       }\r     }\r     ```\r \r 1. 若要处理从解决方案后端进行的直接方法调用，向 App 类添加以下嵌套类：\r \r     ```java\r     protected static class DirectMethodCallback implements com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback\r     {\r       @Override\r       public DeviceMethodData call(String methodName, Object methodData, Object context)\r       {\r         DeviceMethodData deviceMethodData;\r         switch (methodName)\r         {\r           case \"writeLine\" :\r           {\r             int status = METHOD_SUCCESS;\r             System.out.println(new String((byte[])methodData));\r             deviceMethodData = new DeviceMethodData(status, \"Executed direct method \" + methodName);\r             break;\r           }\r           default:\r           {\r             int status = METHOD_NOT_DEFINED;\r             deviceMethodData = new DeviceMethodData(status, \"Not defined direct method \" + methodName);\r           }\r         }\r         return deviceMethodData;\r       }\r     }\r     ```\r \r 1. 若要创建 DeviceClient 并侦听直接方法调用，将一个 main 方法添加到 App 类中：\r \r     ```java\r     public static void main(String[] args)\r       throws IOException, URISyntaxException\r     {\r       System.out.println(\"Starting device sample...\");\r \r       DeviceClient client = new DeviceClient(connString, protocol);\r \r       try\r       {\r         client.open();\r         client.subscribeToDeviceMethod(new DirectMethodCallback(), null, new DirectMethodStatusCallback(), null);\r         System.out.println(\"Subscribed to direct methods. Waiting...\");\r       }\r       catch (Exception e)\r       {\r         System.out.println(\"On exception, shutting down \\n\" + \" Cause: \" + e.getCause() + \" \\n\" +  e.getMessage());\r         client.close();\r         System.out.println(\"Shutting down...\");\r       }\r \r       System.out.println(\"Press any key to exit...\");\r       Scanner scanner = new Scanner(System.in);\r       scanner.nextLine();\r       scanner.close();\r       client.close();\r       System.out.println(\"Shutting down...\");\r     }\r     ```\r \r 1. 保存并关闭 simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java 文件\r \r 1. 生成 **simulated-device** 应用并更正任何错误。 在命令提示符下，导航到 simulated-device 文件夹并运行以下命令：\r \r     `mvn clean package -DskipTests`\r \r ## <a name=\"call-a-direct-method-on-a-device\"></a>在设备上调用直接方法\r \r 在本部分中，创建一个 Java 控制台应用，用以调用一个直接方法并显示响应。 此控制台应用连接到 IoT 中心来调用该直接方法。\r \r 1. 在命令提示符下使用以下命令，在 iot-java-direct-method 文件夹中创建一个名为 **invoke-direct-method** 的 Maven 项目。 以下命令是一条很长的命令：\r \r     `mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=invoke-direct-method -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false`\r \r 1. 在命令提示符下，导航到 invoke-direct-method 文件夹。\r \r 1. 使用文本编辑器，打开 invoke-direct-method 文件夹中的 pom.xml 文件，并在 **dependencies** 节点中添加以下依赖项。 此依赖项使得你可以使用应用中的 iot-service-client 包来与 IoT 中心进行通信：\r \r     ```xml\r     <dependency>\r       <groupId>com.microsoft.azure.sdk.iot</groupId>\r       <artifactId>iot-service-client</artifactId>\r       <version>1.7.23</version>\r       <type>jar</type>\r     </dependency>\r     ```\r \r     > [!NOTE]\r     > 可以使用 [Maven 搜索][lnk-maven-service-search]检查是否有最新版本的 **iot-service-client**。\r \r 1. 在 **dependencies** 节点后添加以下 **build** 节点。 此配置指示 Maven 使用 Java 1.8 来生成应用：\r \r     ```xml\r     <build>\r       <plugins>\r         <plugin>\r           <groupId>org.apache.maven.plugins</groupId>\r           <artifactId>maven-compiler-plugin</artifactId>\r           <version>3.3</version>\r           <configuration>\r             <source>1.8</source>\r             <target>1.8</target>\r           </configuration>\r         </plugin>\r       </plugins>\r     </build>\r     ```\r \r 1. 保存并关闭 pom.xml 文件。\r \r 1. 使用文本编辑器打开 invoke-direct-method\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。\r \r 1. 在该文件中添加以下 **import** 语句：\r \r     ```java\r     import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceMethod;\r     import com.microsoft.azure.sdk.iot.service.devicetwin.MethodResult;\r     import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\r \r     import java.io.IOException;\r     import java.util.concurrent.TimeUnit;\r     ```\r \r 1. 将以下类级变量添加到 **App** 类。 将 `{youriothubconnectionstring}` 替换为在“创建 IoT 中心”部分记下的 IoT 中心连接字符串：\r \r     ```java\r     public static final String iotHubConnectionString = \"{youriothubconnectionstring}\";\r     public static final String deviceId = \"myDeviceId\";\r \r     public static final String methodName = \"writeLine\";\r     public static final Long responseTimeout = TimeUnit.SECONDS.toSeconds(30);\r     public static final Long connectTimeout = TimeUnit.SECONDS.toSeconds(5);\r     public static final String payload = \"a line to be written\";\r     ```\r \r 1. 若要在模拟设备上调用该方法，将以下代码在添加到 main 方法中：\r \r     ```java\r     System.out.println(\"Starting sample...\");\r     DeviceMethod methodClient = DeviceMethod.createFromConnectionString(iotHubConnectionString);\r \r     try\r     {\r         System.out.println(\"Invoke direct method\");\r         MethodResult result = methodClient.invoke(deviceId, methodName, responseTimeout, connectTimeout, payload);\r \r         if(result == null)\r         {\r             throw new IOException(\"Direct method invoke returns null\");\r         }\r         System.out.println(\"Status=\" + result.getStatus());\r         System.out.println(\"Payload=\" + result.getPayload());\r     }\r     catch (IotHubException e)\r     {\r         System.out.println(e.getMessage());\r     }\r \r     System.out.println(\"Shutting down sample...\");\r     ```\r \r 1. 保存并关闭 invoke-direct-method\\src\\main\\java\\com\\mycompany\\app\\App.java 文件\r \r 1. 生成 invoke-direct-method 应用并更正任何错误。 在命令提示符下，导航到 invoke-direct-method 文件夹并运行以下命令：\r \r     `mvn clean package -DskipTests`\r \r ## <a name=\"run-the-apps\"></a>运行应用\r \r 现在可以运行控制台应用了。\r \r \r 1. 在命令提示符下，在 simulated-device 文件夹中运行以下命令，开始侦听从 IoT 中心发出的方法调用：\r \r     `mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"`\r \r     ![Java IoT 中心模拟设备应用侦听直接方法调用][8]\r \r 1. 在命令提示符下，在 invoke-direct-method 文件夹中运行以下命令，从 IoT 中心调用模拟设备上的方法：\r \r     `mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"`\r \r     ![Java IoT 中心服务应用调用直接方法][7]\r \r 1. 模拟设备对直接方法调用做出响应：\r \r     ![Java IoT 中心模拟设备应用对直接方法调用进行响应][9]\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 本教程中，在 Azure 门户中配置了新的 IoT 中心，并在 IoT 中心的标识注册表中创建了设备标识。 已通过此设备标识启用模拟设备应用的相关功能，使之能够响应通过云调用的方法。 还创建了一个应用，用于调用设备上的方法并显示来自设备的响应。\r \r 若要探索其他 IoT 方案，请参阅[在多个设备上计划作业][lnk-devguide-jobs]。\r \r 若要了解如何扩展 IoT 解决方案并在多个设备上计划方法调用，请参阅 [Schedule and broadcast jobs][lnk-tutorial-jobs] （计划和广播作业）教程。\r \r <!-- Images. -->\r [7]: ./media/iot-hub-java-java-direct-methods/invoke-method.png\r [8]: ./media/iot-hub-java-java-direct-methods/device-listen.png\r [9]: ./media/iot-hub-java-java-direct-methods/device-respond.png\r \r <!-- Links -->\r [lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-java/blob/master/doc/java-devbox-setup.md\r [lnk-maven]: https://maven.apache.org/what-is-maven.html\r [lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r \r [lnk-devguide-jobs]: ./iot-hub-devguide-jobs.md\r [lnk-tutorial-jobs]: ./iot-hub-node-node-schedule-jobs.md\r [lnk-maven-service-search]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22iot-service-client%22%20g%3A%22com.microsoft.azure.sdk.iot%22\r [lnk-maven-device-search]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22iot-device-client%22%20g%3A%22com.microsoft.azure.sdk.iot%22\r \r \r <!--Update_Description:update meta properties and wording-->"}