{"Title":"Azure API 管理缓存策略","Description":"了解可在 Azure API 管理中使用的缓存策略。","Content":"# <a name=\"api-management-caching-policies\"></a>API 管理缓存策略\r 本主题提供以下 API 管理策略的参考。 有关添加和配置策略的信息，请参阅 [API 管理中的策略](http://go.microsoft.com/fwlink/?LinkID=398186)。  \r   \r ##  <a name=\"CachingPolicies\"></a> 缓存策略  \r   \r -   响应缓存策略  \r   \r     -   [从缓存中获取](./api-management-caching-policies.md#GetFromCache) - 执行缓存查找，并返回有效的缓存响应（如果有）。  \r   \r     -   [存储到缓存](./api-management-caching-policies.md#StoreToCache) - 根据指定的缓存控制配置来缓存响应。  \r   \r -   值缓存策略  \r   \r     -   [从缓存中获取值](#GetFromCacheByKey) - 按密钥检索缓存项。  \r   \r     -   [在缓存中存储值](#StoreToCacheByKey) - 按密钥在缓存中存储项。  \r   \r     -   [从缓存中删除值](#RemoveCacheByKey) - 按密钥在缓存中删除项。  \r   \r ##  <a name=\"GetFromCache\"></a> 从缓存中获取  \r  使用 `cache-lookup` 策略执行缓存查找，并返回有效的缓存响应（如果有）。 当响应内容在某个时间段内保持静态时，即可应用该策略。 响应缓存可以降低后端 Web 服务器需要满足的带宽和处理能力要求，并可以减小 API 使用者能够察觉到的延迟。  \r   \r > [!NOTE]\r >  此策略必须已设置相应的[存储到缓存](./api-management-caching-policies.md#StoreToCache)策略。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <cache-lookup vary-by-developer=\"true | false\" vary-by-developer-groups=\"true | false\" downstream-caching-type=\"none | private | public\" must-revalidate=\"true | false\" allow-private-response-caching=\"@(expression to evaluate)\">  \r   <vary-by-header>Accept</vary-by-header>  \r   <!-- should be present in most cases -->  \r   <vary-by-header>Accept-Charset</vary-by-header>  \r   <!-- should be present in most cases -->  \r   <vary-by-header>Authorization</vary-by-header>  \r   <!-- should be present when allow-authorized-response-caching is \"true\"-->  \r   <vary-by-header>header name</vary-by-header>  \r   <!-- optional, can repeated several times -->  \r   <vary-by-query-parameter>parameter name</vary-by-query-parameter>  \r   <!-- optional, can repeated several times -->  \r </cache-lookup>  \r ```  \r   \r ### <a name=\"examples\"></a>示例  \r   \r #### <a name=\"example\"></a>示例  \r   \r ```xml  \r <policies>  \r     <inbound>  \r         <base />  \r         <cache-lookup vary-by-developer=\"false\" vary-by-developer-groups=\"false\" downstream-caching-type=\"none\" must-revalidate=\"true\">  \r             <vary-by-query-parameter>version</vary-by-query-parameter>  \r         </cache-lookup>           \r     </inbound>  \r     <outbound>  \r         <cache-store duration=\"seconds\" />  \r         <base />          \r     </outbound>  \r </policies>  \r ```  \r   \r #### <a name=\"example-using-policy-expressions\"></a>策略表达式使用示例  \r  此示例演示如何配置 API 管理响应缓存持续时间，使之匹配由后端服务的 `Cache-Control` 指令指定的后端服务响应缓存。 \r ```xml  \r <!-- The following cache policy snippets demonstrate how to control API Management reponse cache duration with Cache-Control headers sent by the backend service. -->  \r   \r <!-- Copy this snippet into the inbound section -->  \r <cache-lookup vary-by-developer=\"false\" vary-by-developer-groups=\"false\" downstream-caching-type=\"public\" must-revalidate=\"true\" >  \r   <vary-by-header>Accept</vary-by-header>  \r   <vary-by-header>Accept-Charset</vary-by-header>  \r </cache-lookup>  \r   \r <!-- Copy this snippet into the outbound section. Note that cache duration is set to the max-age value provided in the Cache-Control header received from the backend service or to the deafult value of 5 min if none is found  -->  \r <cache-store duration=\"@{  \r     var header = context.Response.Headers.GetValueOrDefault(\"Cache-Control\",\"\");  \r     var maxAge = Regex.Match(header, @\"max-age=(?<maxAge>\\d+)\").Groups[\"maxAge\"]?.Value;  \r     return (!string.IsNullOrEmpty(maxAge))?int.Parse(maxAge):300;  \r   }\"  \r  />  \r ```  \r   \r  有关详细信息，请参阅[策略表达式](./api-management-policy-expressions.md)和[上下文变量](./api-management-policy-expressions.md#ContextVariables)。  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |cache-lookup|根元素。|是|  \r |vary-by-header|开始按指定标头（例如 Accept、Accept-Charset、Accept-Encoding、Accept-Language、Authorization、Expect、From、Host、If-Match）的值缓存响应。|否|  \r |vary-by-query-parameter|开始按指定查询参数的值缓存响应。 请输入一个或多个参数。 使用分号作为分隔符。 如果未指定任何参数，将使用所有查询参数。|否|  \r   \r ### <a name=\"attributes\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |allow-private-response-caching|设置为 `true` 即可缓存包含 Authorization 标头的请求。|否|false|  \r |downstream-caching-type|此属性必须设置为以下值之一。<br /><br /> -   none - 不允许下游缓存。<br />-   private - 允许下游专用缓存。<br />-   public - 允许专用和共享下游缓存。|否|无|  \r |must-revalidate|启用下游缓存时，此属性会启用或关闭网关响应中的 `must-revalidate` 缓存控制指令。|否|true|  \r |vary-by-developer|设置为 `true` 即可按开发人员密钥缓存响应。|否|false|  \r |vary-by-developer-groups|设置为 `true` 即可按用户角色缓存响应。|否|false|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站  \r   \r -   **策略范围：**API、操作、产品  \r   \r ##  <a name=\"StoreToCache\"></a> 存储到缓存  \r  `cache-store` 策略根据指定的缓存设置缓存响应。 当响应内容在某个时间段内保持静态时，即可应用该策略。 响应缓存可以降低后端 Web 服务器需要满足的带宽和处理能力要求，并可以减小 API 使用者能够察觉到的延迟。  \r   \r > [!NOTE]\r >  此策略必须已设置相应的[从缓存中获取](./api-management-caching-policies.md#GetFromCache)策略。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <cache-store duration=\"seconds\" />  \r ```  \r   \r ### <a name=\"examples\"></a>示例  \r   \r #### <a name=\"example\"></a>示例  \r   \r ```xml  \r <policies>  \r     <inbound>  \r         <base />  \r           <cache-lookup vary-by-developer=\"true | false\" vary-by-developer-groups=\"true | false\" downstream-caching-type=\"none | private | public\" must-revalidate=\"true | false\">  \r                 <vary-by-query-parameter>parameter name</vary-by-query-parameter> <!-- optional, can repeated several times -->  \r         </cache-lookup>  \r     </inbound>  \r     <outbound>  \r         <base />  \r             <cache-store duration=\"3600\" />  \r     </outbound>  \r </policies>  \r ```  \r   \r #### <a name=\"example-using-policy-expressions\"></a>策略表达式使用示例  \r  此示例演示如何配置 API 管理响应缓存持续时间，使之匹配由后端服务的 `Cache-Control` 指令指定的后端服务响应缓存。 \r   \r ```xml  \r <!-- The following cache policy snippets demonstrate how to control API Management reponse cache duration with Cache-Control headers sent by the backend service. -->  \r   \r <!-- Copy this snippet into the inbound section -->  \r <cache-lookup vary-by-developer=\"false\" vary-by-developer-groups=\"false\" downstream-caching-type=\"public\" must-revalidate=\"true\" >  \r   <vary-by-header>Accept</vary-by-header>  \r   <vary-by-header>Accept-Charset</vary-by-header>  \r </cache-lookup>  \r   \r <!-- Copy this snippet into the outbound section. Note that cache duration is set to the max-age value provided in the Cache-Control header received from the backend service or to the deafult value of 5 min if none is found  -->  \r <cache-store duration=\"@{  \r     var header = context.Response.Headers.GetValueOrDefault(\"Cache-Control\",\"\");  \r     var maxAge = Regex.Match(header, @\"max-age=(?<maxAge>\\d+)\").Groups[\"maxAge\"]?.Value;  \r     return (!string.IsNullOrEmpty(maxAge))?int.Parse(maxAge):300;  \r   }\"  \r  />  \r ```  \r   \r  有关详细信息，请参阅[策略表达式](./api-management-policy-expressions.md)和[上下文变量](./api-management-policy-expressions.md#ContextVariables)。  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |cache-store|根元素。|是|  \r   \r ### <a name=\"attributes\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |duration|缓存条目的生存时间，以秒为单位指定。|是|不适用|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**出站  \r   \r -   **策略范围：**API、操作、产品  \r   \r ##  <a name=\"GetFromCacheByKey\"></a> 从缓存中获取值  \r  使用 `cache-lookup-value` 策略，可以通过密钥执行缓存查找，并返回缓存的值。 密钥的值可以是任意字符串，通常使用策略表达式来提供密钥。  \r   \r > [!NOTE]\r >  此策略必须已设置相应的[在缓存中存储值](#StoreToCacheByKey)策略。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <cache-lookup-value key=\"cache key value\"   \r     default-value=\"value to use if cache lookup resulted in a miss\"   \r     variable-name=\"name of a variable looked up value is assigned to\" />  \r ```  \r   \r ### <a name=\"example\"></a>示例  \r  有关此策略的详细信息和示例，请参阅 [Azure API 管理中的自定义缓存](./api-management-sample-cache-by-key.md)。  \r   \r ```xml  \r <cache-lookup-value  \r     key=\"@(\"userprofile-\" + context.Variables[\"enduserid\"])\"    \r     variable-name=\"userprofile\" />  \r   \r ```  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |cache-lookup-value|根元素。|是|  \r   \r ### <a name=\"attributes\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |default-value|在缓存密钥查找未命中的情况下，会分配给变量的值。 如果未指定此属性，则会分配 `null`。|否|`null`|  \r |key|要在查找中使用的缓存密钥值。|是|不适用|  \r |variable-name|在查找成功的情况下，会向其分配查找值的[上下文变量](./api-management-policy-expressions.md#ContextVariables)的名称。 如果查找未命中，则会为此变量分配 `default-value` 属性的值或 `null`（如果省略了 `default-value` 属性）。|是|不适用|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站、后端、错误时  \r   \r -   **策略范围：**全局、API、操作、产品  \r   \r ##  <a name=\"StoreToCacheByKey\"></a> 在缓存中存储值  \r  `cache-store-value` 按密钥执行缓存存储。 密钥的值可以是任意字符串，通常使用策略表达式来提供密钥。  \r   \r > [!NOTE]\r >  此策略必须已设置相应的[从缓存中获取值](#GetFromCacheByKey)策略。  \r   \r ### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r <cache-store-value key=\"cache key value\" value=\"value to cache\" duration=\"seconds\" />  \r ```  \r   \r ### <a name=\"example\"></a>示例  \r  有关此策略的详细信息和示例，请参阅 [Azure API 管理中的自定义缓存](./api-management-sample-cache-by-key.md)。  \r   \r ```xml  \r <cache-store-value  \r     key=\"@(\"userprofile-\" + context.Variables[\"enduserid\"])\"  \r     value=\"@((string)context.Variables[\"userprofile\"])\" duration=\"100000\" />  \r   \r ```  \r   \r ### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |cache-store-value|根元素。|是|  \r   \r ### <a name=\"attributes\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |duration|会根据提供的期间值（以秒为单位指定）将值缓存一段时间。|是|不适用|  \r |key|缓存密钥，会在其下存储值。|是|不适用|  \r |value|要缓存的值。|是|不适用|  \r   \r ### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站、后端、错误时  \r   \r -   **策略范围：**全局、API、操作、产品  \r   \r ###  <a name=\"RemoveCacheByKey\"></a> 从缓存中删除值  \r  `cache-remove-value` 删除通过密钥标识的缓存项。 密钥的值可以是任意字符串，通常使用策略表达式来提供密钥。  \r   \r #### <a name=\"policy-statement\"></a>策略语句  \r   \r ```xml  \r   \r <cache-remove-value key=\"cache key value\"/>  \r   \r ```  \r   \r #### <a name=\"example\"></a>示例  \r   \r ```xml  \r   \r <cache-remove-value key=\"@(\"userprofile-\" + context.Variables[\"enduserid\"])\"/>  \r   \r ```  \r   \r #### <a name=\"elements\"></a>元素  \r   \r |名称|说明|必选|  \r |----------|-----------------|--------------|  \r |cache-remove-value|根元素。|是|  \r   \r #### <a name=\"attributes\"></a>属性  \r   \r |名称|说明|必选|默认|  \r |----------|-----------------|--------------|-------------|  \r |key|以前所缓存的值（将从缓存中删除）的密钥。|是|不适用|  \r   \r #### <a name=\"usage\"></a>使用情况  \r  此策略可在以下策略[节](./api-management-howto-policies.md#sections)和[范围](./api-management-howto-policies.md#scopes)中使用。  \r   \r -   **策略节：**入站、出站、后端、错误时  \r   \r -   **策略范围：**全局、API、操作、产品  \r   \r \r ## <a name=\"next-steps\"></a>后续步骤\r 有关如何使用策略的详细信息，请参阅 [API 管理中的策略](./api-management-howto-policies.md)。  "}