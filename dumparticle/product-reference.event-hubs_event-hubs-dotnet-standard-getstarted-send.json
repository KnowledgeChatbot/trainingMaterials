{"Title":"使用 .NET Standard 将事件发送到 Azure 事件中心","Description":"在 .NET Standard 中将事件发送到事件中心入门","Content":"# <a name=\"get-started-sending-messages-to-azure-event-hubs-in-net-standard\"></a>使用 .NET Standard 将消息发送到 Azure 事件中心入门\r \r > [!NOTE]\r > [GitHub](https://github.com/Azure/azure-event-hubs/tree/master/samples/DotNet/Microsoft.Azure.EventHubs/SampleSender) 上提供了此示例。\r \r 本教程演示如何编写将一组消息发送到事件中心的 .NET Core 控制台应用程序。 可以按原样运行 [GitHub](https://github.com/Azure/azure-event-hubs/tree/master/samples/DotNet/Microsoft.Azure.EventHubs/SampleSender) 解决方案，将 `EhConnectionString` 和 `EhEntityPath` 字符串替换为事件中心的值。 或者，可以按照本教程中的步骤创建自己的解决方案。\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r * [Microsoft Visual Studio 2015 或 2017](http://www.visualstudio.com)。 本教程中的示例使用 Visual Studio 2017，但也支持 Visual Studio 2015。\r * [.NET Core Visual Studio 2015 或 2017 工具](http://www.microsoft.com/net/core)。\r * Azure 订阅。\r * 事件中心命名空间。\r \r 为了将消息发送到事件中心，我们将使用 Visual Studio 编写 C# 控制台应用程序。\r \r ## <a name=\"create-an-event-hubs-namespace-and-an-event-hub\"></a>创建事件中心命名空间和事件中心\r \r 第一步是使用 [Azure 门户](https://portal.azure.cn)创建事件中心类型的命名空间，并获取应用程序与事件中心进行通信所需的管理凭据。 要创建命名空间和事件中心，请按照[本文](event-hubs-create.md)中的步骤操作，并继续执行以下步骤。\r \r ## <a name=\"create-a-console-application\"></a>创建控制台应用程序\r \r 启动 Visual Studio。 在“文件”菜单中，单击“新建”，并单击“项目”。 创建 .NET Core 控制台应用程序。\r \r ![新建项目][1]\r \r ## <a name=\"add-the-event-hubs-nuget-package\"></a>添加事件中心 NuGet 包\r \r 通过执行以下步骤，将 [`Microsoft.Azure.EventHubs`](https://www.nuget.org/packages/Microsoft.Azure.EventHubs/) .NET 标准库 NuGet 包添加到项目中： \r \r 1. 右键单击新创建的项目，并选择“管理 NuGet 包” 。\r 2. 单击“浏览”选项卡，然后搜索“Microsoft.Azure.EventHubs”，并选择“Microsoft.Azure.EventHubs”包。 单击“安装”以完成安装，并关闭此对话框。\r \r ## <a name=\"write-some-code-to-send-messages-to-the-event-hub\"></a>编写一些代码以将消息发送到事件中心\r \r 1. 在 Program.cs 文件顶部添加以下 `using` 语句。\r \r     ```csharp\r     using Microsoft.Azure.EventHubs;\r     using System.Text;\r     using System.Threading.Tasks;\r     ```\r \r 2. 向 `Program` 类添加常量作为事件中心连接字符串和实体路径（单个事件中心名称）。 将括号中的占位符替换为在创建事件中心时获得的相应值。 请确保 `{Event Hubs connection string}` 是命名空间级别的连接字符串，而不是事件中心字符串。 \r \r     ```csharp\r     private static EventHubClient eventHubClient;\r     private const string EhConnectionString = \"{Event Hubs connection string}\";\r     private const string EhEntityPath = \"{Event Hub path/name}\";\r     ```\r \r 3. 将名为 `MainAsync` 的新方法添加到 `Program` 类，如下所示：\r \r     ```csharp\r     private static async Task MainAsync(string[] args)\r     {\r         // Creates an EventHubsConnectionStringBuilder object from the connection string, and sets the EntityPath.\r         // Typically, the connection string should have the entity path in it, but for the sake of this simple scenario\r         // we are using the connection string from the namespace.\r         var connectionStringBuilder = new EventHubsConnectionStringBuilder(EhConnectionString)\r         {\r             EntityPath = EhEntityPath\r         };\r \r         eventHubClient = EventHubClient.CreateFromConnectionString(connectionStringBuilder.ToString());\r \r         await SendMessagesToEventHub(100);\r \r         await eventHubClient.CloseAsync();\r \r         Console.WriteLine(\"Press ENTER to exit.\");\r         Console.ReadLine();\r     }\r     ```\r \r 4. 将名为 `SendMessagesToEventHub` 的新方法添加到 `Program` 类，如下所示：\r \r     ```csharp\r     // Creates an event hub client and sends 100 messages to the event hub.\r     private static async Task SendMessagesToEventHub(int numMessagesToSend)\r     {\r         for (var i = 0; i < numMessagesToSend; i++)\r         {\r             try\r             {\r                 var message = $\"Message {i}\";\r                 Console.WriteLine($\"Sending message: {message}\");\r                 await eventHubClient.SendAsync(new EventData(Encoding.UTF8.GetBytes(message)));\r             }\r             catch (Exception exception)\r             {\r                 Console.WriteLine($\"{DateTime.Now} > Exception: {exception.Message}\");\r             }\r \r             await Task.Delay(10);\r         }\r \r         Console.WriteLine($\"{numMessagesToSend} messages sent.\");\r     }\r     ```\r \r 5. 在 `Program` 类的 `Main` 方法中添加以下代码。\r \r     ```csharp\r     MainAsync(args).GetAwaiter().GetResult();\r     ```\r \r    Program.cs 文件的内容如下所示。\r \r     ```csharp\r     namespace SampleSender\r     {\r         using System;\r         using System.Text;\r         using System.Threading.Tasks;\r         using Microsoft.Azure.EventHubs;\r \r         public class Program\r         {\r             private static EventHubClient eventHubClient;\r             private const string EhConnectionString = \"{Event Hubs connection string}\";\r             private const string EhEntityPath = \"{Event Hub path/name}\";\r \r             public static void Main(string[] args)\r             {\r                 MainAsync(args).GetAwaiter().GetResult();\r             }\r \r             private static async Task MainAsync(string[] args)\r             {\r                 // Creates an EventHubsConnectionStringBuilder object from the connection string, and sets the EntityPath.\r                 // Typically, the connection string should have the entity path in it, but for the sake of this simple scenario\r                 // we are using the connection string from the namespace.\r                 var connectionStringBuilder = new EventHubsConnectionStringBuilder(EhConnectionString)\r                 {\r                     EntityPath = EhEntityPath\r                 };\r \r                 eventHubClient = EventHubClient.CreateFromConnectionString(connectionStringBuilder.ToString());\r \r                 await SendMessagesToEventHub(100);\r \r                 await eventHubClient.CloseAsync();\r \r                 Console.WriteLine(\"Press ENTER to exit.\");\r                 Console.ReadLine();\r             }\r \r             // Creates an event hub client and sends 100 messages to the event hub.\r             private static async Task SendMessagesToEventHub(int numMessagesToSend)\r             {\r                 for (var i = 0; i < numMessagesToSend; i++)\r                 {\r                     try\r                     {\r                         var message = $\"Message {i}\";\r                         Console.WriteLine($\"Sending message: {message}\");\r                         await eventHubClient.SendAsync(new EventData(Encoding.UTF8.GetBytes(message)));\r                     }\r                     catch (Exception exception)\r                     {\r                         Console.WriteLine($\"{DateTime.Now} > Exception: {exception.Message}\");\r                     }\r \r                     await Task.Delay(10);\r                 }\r \r                 Console.WriteLine($\"{numMessagesToSend} messages sent.\");\r             }\r         }\r     }\r     ```\r \r 6. 运行程序，并确保没有任何错误。\r \r 祝贺！ 现在已向事件中心发送消息。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 访问以下链接可以了解有关事件中心的详细信息：\r \r * [从事件中心接收事件](event-hubs-dotnet-standard-getstarted-receive-eph.md)\r * [事件中心概述](event-hubs-what-is-event-hubs.md)\r * [创建事件中心](event-hubs-create.md)\r * [事件中心常见问题](event-hubs-faq.md)\r \r [1]: ./media/event-hubs-dotnet-standard-getstarted-send/netcore.png\r \r <!--Update_Description: update meta properties, wording update-->"}