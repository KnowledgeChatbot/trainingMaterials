{"Title":"使用 HDInsight .NET SDK 提交 MapReduce 作业 - Azure","Description":"了解如何使用 HDInsight .NET SDK 将 MapReduce 作业提交到 Azure HDInsight Hadoop。","Content":"# <a name=\"run-mapreduce-jobs-using-hdinsight-net-sdk\"></a>使用 HDInsight .NET SDK 运行 MapReduce 作业\r [!INCLUDE [mapreduce-selector](../../../includes/hdinsight-selector-use-mapreduce.md)]\r \r 了解如何使用 HDInsight .NET SDK 提交 MapReduce 作业。 HDInsight 群集附带了一个 jar 文件，其中包含一些 MarReduce 示例。 该 jar 文件是 */example/jars/hadoop-mapreduce-examples.jar*。  其中一个示例是 *wordcount*。 开发 C# 控制台应用程序，提交 wordcount 作业。  作业会读取 /example/data/gutenberg/davinci.txt 文件，并将结果输出到 /example/data/davinciwordcount。  如果要重新运行该应用程序，必须清理输出文件夹。\r \r > [!NOTE]\r > 必须从 Windows 客户端执行本文中的步骤。 有关使用 Linux、OS X 或 Unix 客户端处理 Hive 的信息，请使用本文顶部显示的选项卡选择器。\r > \r > \r \r ## <a name=\"prerequisites\"></a>先决条件\r 在开始阅读本文前，必须具有以下项：\r \r * **HDInsight 中的 Hadoop 群集**。 请参阅[在 HDInsight 中开始使用基于 Linux 的 Hadoop](apache-hadoop-linux-tutorial-get-started.md)。\r * **Visual Studio 2013/2015/2017**。\r \r ## <a name=\"submit-mapreduce-jobs-using-hdinsight-net-sdk\"></a>使用 HDInsight .NET SDK 提交 MapReduce 作业\r HDInsight .NET SDK 提供 .NET 客户端库，可简化从 .NET 中使用 HDInsight 群集的操作。 \r \r **提交作业**\r \r 1. 在 Visual Studio 中创建 C# 控制台应用程序。\r 2. 通过 Nuget 包管理器控制台运行以下命令：\r \r         Install-Package Microsoft.Azure.Management.HDInsight.Job\r 3. 使用以下代码：\r \r         using System.Collections.Generic;\r         using System.IO;\r         using System.Text;\r         using System.Threading;\r         using Microsoft.Azure.Management.HDInsight.Job;\r         using Microsoft.Azure.Management.HDInsight.Job.Models;\r         using Hyak.Common;\r         using Microsoft.WindowsAzure.Storage;\r         using Microsoft.WindowsAzure.Storage.Blob;\r \r         namespace SubmitHDInsightJobDotNet\r         {\r             class Program\r             {\r                 private static HDInsightJobManagementClient _hdiJobManagementClient;\r \r                 private const string existingClusterName = \"<Your HDInsight Cluster Name>\";\r                 private const string existingClusterUri = existingClusterName + \".azurehdinsight.cn\";\r                 private const string existingClusterUsername = \"<Cluster Username>\";\r                 private const string existingClusterPassword = \"<Cluster User Password>\";\r \r                 private const string defaultStorageAccountName = \"<Default Storage Account Name>\"; //<StorageAccountName>.blob.core.chinacloudapi.cn\r                 private const string StorageAccountSuffix = \"core.chinacloudapi.cn\";\r                 private const string defaultStorageAccountKey = \"<Default Storage Account Key>\";\r                 private const string defaultStorageContainerName = \"<Default Blob Container Name>\";\r \r                 private const string sourceFile = \"/example/data/gutenberg/davinci.txt\";  \r                 private const string outputFolder = \"/example/data/davinciwordcount\";\r \r                 static void Main(string[] args)\r                 {\r                     System.Console.WriteLine(\"The application is running ...\");\r \r                     var clusterCredentials = new BasicAuthenticationCloudCredentials { Username = ExistingClusterUsername, Password = ExistingClusterPassword };\r                     _hdiJobManagementClient = new HDInsightJobManagementClient(ExistingClusterUri, clusterCredentials);\r \r                     SubmitMRJob();\r \r                     System.Console.WriteLine(\"Press ENTER to continue ...\");\r                     System.Console.ReadLine();\r                 }\r \r                 private static void SubmitMRJob()\r                 {\r                     List<string> args = new List<string> { { \"/example/data/gutenberg/davinci.txt\" }, { \"/example/data/davinciwordcount\" } };\r \r                     var paras = new MapReduceJobSubmissionParameters\r                     {\r                         JarFile = @\"/example/jars/hadoop-mapreduce-examples.jar\",\r                         JarClass = \"wordcount\",\r                         Arguments = args\r                     };\r \r                     System.Console.WriteLine(\"Submitting the MR job to the cluster...\");\r                     var jobResponse = _hdiJobManagementClient.JobManagement.SubmitMapReduceJob(paras);\r                     var jobId = jobResponse.JobSubmissionJsonResponse.Id;\r                     System.Console.WriteLine(\"Response status code is \" + jobResponse.StatusCode);\r                     System.Console.WriteLine(\"JobId is \" + jobId);\r \r                     System.Console.WriteLine(\"Waiting for the job completion ...\");\r \r                     // Wait for job completion\r                     var jobDetail = _hdiJobManagementClient.JobManagement.GetJob(jobId).JobDetail;\r                     while (!jobDetail.Status.JobComplete)\r                     {\r                         Thread.Sleep(1000);\r                         jobDetail = _hdiJobManagementClient.JobManagement.GetJob(jobId).JobDetail;\r                     }\r \r                     // Get job output\r                     System.Console.WriteLine(\"Job output is: \");\r                     var storageAccess = new AzureStorageAccess(defaultStorageAccountName, defaultStorageAccountKey,\r                         defaultStorageContainerName, StorageAccountSuffix);\r \r                     if (jobDetail.ExitValue == 0)\r                     {\r                         // Create the storage account object\r                         CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\"DefaultEndpointsProtocol=https;AccountName=\" + \r                             defaultStorageAccountName + \r                             \";AccountKey=\" + defaultStorageAccountKey + \"; Endsuffix=\" + StorageAccountSuffix);\r \r                         // Create the blob client.\r                         CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\r \r                         // Retrieve reference to a previously created container.\r                         CloudBlobContainer container = blobClient.GetContainerReference(defaultStorageContainerName);\r \r                         CloudBlockBlob blockBlob = container.GetBlockBlobReference(outputFolder.Substring(1) + \"/part-r-00000\");\r \r                         using (var stream = blockBlob.OpenRead())\r                         {\r                             using (StreamReader reader = new StreamReader(stream))\r                             {\r                                 while (!reader.EndOfStream)\r                                 {\r                                     System.Console.WriteLine(reader.ReadLine());\r                                 }\r                             }\r                         }\r                     }\r                     else\r                     {\r                         // fetch stderr output in case of failure\r                         var output = _hdiJobManagementClient.JobManagement.GetJobErrorLogs(jobId, storageAccess); \r \r                         using (var reader = new StreamReader(output, Encoding.UTF8))\r                         {\r                             string value = reader.ReadToEnd();\r                             System.Console.WriteLine(value);\r                         }\r \r                     }\r                 }\r             }\r         }\r 4. 按 **F5** 运行应用程序。\r \r 若要重新运行该作业，必须更改作业输出文件夹名称，在此示例中，它是“/example/data/davinciwordcount”。\r \r 作业成功完成后，应用程序将打印输出文件的内容“part-r-00000”。\r \r ## <a name=\"next-steps\"></a>后续步骤\r 在本文中，已经学习了几种创建 HDInsight 群集的方法。 若要了解更多信息，请参阅下列文章：\r \r * 有关提交 Hive 作业，请参阅[使用 HDInsight .NET SDK 运行 Hive 查询](apache-hadoop-use-hive-dotnet-sdk.md)。\r * 有关创建 HDInsight 群集，请参阅[在 HDInsight 中创建基于 Linux 的 Hadoop 群集](../hdinsight-hadoop-provision-linux-clusters.md)。\r * 有关管理 HDInsight 群集，请参阅[在 HDInsight 中管理 Hadoop 群集](../hdinsight-administer-use-portal-linux.md)。\r * 有关向 Azure 进行非交互式身份验证，请参阅[创建非交互式身份验证 .NET HDInsight 应用程序](../hdinsight-create-non-interactive-authentication-dotnet-applications.md)。\r \r \r <!--Update_Description: update wording and link references-->"}