{"Title":"对 Azure 存储使用 Azure PowerShell","Description":"了解如何使用 Azure 存储的 Azure PowerShell cmdlet 来创建和管理存储帐户；使用 Blob、表、队列和文件；配置和查询存储分析并创建共享访问签名。","Content":"# <a name=\"using-azure-powershell-with-azure-storage\"></a>对 Azure 存储 使用 Azure PowerShell\r ## <a name=\"overview\"></a>概述\r Azure PowerShell 是一个模块，提供用于通过 Windows PowerShell 管理 Azure 的 cmdlet。 它是一种基于任务的命令行 shell 和脚本语言，专门用于系统管理。 使用 PowerShell，可以轻松控制和自动化 Azure 服务与应用程序的管理。 例如，可以使用这些 cmdlet 执行在 [Azure 门户](https://portal.azure.cn)中可以执行的相同任务。\r \r 本指南会探讨如何使用 [Azure 存储 Cmdlet](https://docs.microsoft.com/powershell/module/azurerm.storage/#storage)，以通过 Azure 存储执行各种开发和管理任务。\r \r 本指南假设用户具有使用 [Azure 存储](/storage/)和 [Windows PowerShell](http://technet.microsoft.com/library/bb978526.aspx) 的经验。 本指南提供了大量的脚本，用于演示 PowerShell 与 Azure 存储的用法。 在运行每个脚本之前，应该根据配置更新脚本变量。\r \r 本指南的第一部分提供 Azure 存储和 PowerShell 的概览。 有关详细信息和说明，请先了解 [对 Azure 存储使用 Azure PowerShell 的先决条件](#prerequisites-for-using-azure-powershell-with-azure-storage)。\r \r ## <a name=\"getting-started-with-azure-storage-and-powershell-in-5-minutes\"></a>在 5 分钟内开始使用 Azure 存储和 PowerShell\r 本部分说明如何在 5 分钟内通过 PowerShell 访问 Azure 存储。\r \r **Azure 新用户：** 获取一个 Azure 订阅以及与该订阅关联的 Azure 帐户。 有关 Azure 购买选项的信息，请参阅 [1 元试用](https://www.azure.cn/pricing/1rmb-trial/)。\r \r 请参阅[在 Azure Active Directory (Azure AD) 中分配管理员角色](https://msdn.microsoft.com/library/azure/hh531793.aspx)，以了解有关 Azure 订阅的更多信息。\r \r **创建 Azure 订阅和帐户之后：**\r \r 1. 下载并安装最新的 [Azure PowerShell](https://github.com/Azure/azure-powershell/releases/latest)。\r 2. 启动 Windows PowerShell 集成脚本环境 (ISE)：在本地计算机上，转到“开始”菜单。 键入“管理工具”，并单击以运行它。 在“管理工具”窗口中，右键单击“Windows PowerShell ISE”，并单击“以管理员身份运行”。\r 3. 在“Windows PowerShell ISE”中，单击“文件” > “新建”创建新的脚本文件。\r 4. 现在，我们提供一个简单的脚本，演示用于访问 Azure 存储的基本 PowerShell 命令。 该脚本首先会请求用户提供 Azure 帐户凭据，以将 Azure 帐户添加到本地 PowerShell 环境。 然后，该脚本设置默认 Azure 订阅，并在 Azure 中创建新的存储帐户。 接下来，该脚本将在此新存储帐户中创建新容器，并将现有图像文件 (Blob) 上传到该容器。 在脚本列出该容器中的所有 Blob 后，它会在本地计算机中创建新的目标目录，并下载图像文件。\r 5. 在以下代码部分中，选择注释 **#begin** 和 **#end** 之间的脚本。 按 CTRL+C 将其复制到剪贴板。\r \r     ```powershell\r     # begin\r     # Update with the name of your subscription.\r     $SubscriptionName = \"YourSubscriptionName\"\r \r     # Give a name to your new storage account. It must be lowercase!\r     $StorageAccountName = \"yourstorageaccountname\"\r \r     # Choose \"China North\" as an example.\r     $Location = \"China North\"\r \r     # Give a name to your new container.\r     $ContainerName = \"imagecontainer\"\r \r     # Have an image file and a source directory in your local computer.\r     $ImageToUpload = \"C:\\Images\\HelloWorld.png\"\r \r     # A destination directory in your local computer.\r     $DestinationFolder = \"C:\\DownloadImages\"\r \r     # Add your Azure account to the local PowerShell environment.\r     Add-AzureAccount -Environment AzureChinaCloud\r \r     # Set a default Azure subscription.\r     Select-AzureSubscription -SubscriptionName $SubscriptionName -Default\r \r     # Create a new storage account.\r     New-AzureStorageAccount -StorageAccountName $StorageAccountName -Location $Location\r \r     # Set a default storage account.\r     Set-AzureSubscription -CurrentStorageAccountName $StorageAccountName -SubscriptionName $SubscriptionName\r \r     # Create a new container.\r     New-AzureStorageContainer -Name $ContainerName -Permission Off\r \r     # Upload a blob into a container.\r     Set-AzureStorageBlobContent -Container $ContainerName -File $ImageToUpload\r \r     # List all blobs in a container.\r     Get-AzureStorageBlob -Container $ContainerName\r \r     # Download blobs from the container:\r     # Get a reference to a list of all blobs in a container.\r     $blobs = Get-AzureStorageBlob -Container $ContainerName\r \r     # Create the destination directory.\r     New-Item -Path $DestinationFolder -ItemType Directory -Force  \r \r     # Download blobs into the local destination directory.\r     $blobs | Get-AzureStorageBlobContent -Destination $DestinationFolder\r \r     # end\r     ```\r \r 6. 在 **Windows PowerShell ISE** 中，按 Ctrl+V 复制该脚本。 单击“文件” > “保存”。 在“另存为”对话窗口中，键入脚本文件的名称，例如“mystoragescript”。 单击“保存” 。\r 7. 现在，需要基于配置设置更新脚本变量。 必须根据自己的订阅更新 **$SubscriptionName** 变量。 可以保留脚本中指定的其他变量，或根据需要更新。\r \r    * **$SubscriptionName：** 必须根据自己的订阅更新此变量。 请按照以下三种方法之一查找订阅的名称：\r \r     a. 在“Windows PowerShell ISE”中，单击“文件” > “新建”创建新的脚本文件。 将以下脚本复制到新脚本文件，并单击“调试” > “运行”。 以下脚本会先请求用户提供 Azure 帐户凭据以将用户的 Azure 帐户添加到本地 PowerShell 环境，然后显示已连接到本地 PowerShell 会话的所有订阅。 记下在学习本教程时要使用的订阅名称：\r \r     ```powershell\r     Add-AzureAccount -Environment AzureChinaCloud \r       Get-AzureSubscription | Format-Table SubscriptionName, IsDefault, IsCurrent, CurrentStorageAccountName\r     ```\r \r     b. 若要在 [Azure 门户](https://portal.azure.cn)中找到并复制订阅名称，请在左侧“中心”菜单中单击“订阅”。 复制在运行本指南中的脚本时要使用的订阅名称。\r \r      ![Azure 门户](./media/storage-powershell-guide-full/Subscription_Previewportal.png)\r \r     c. 若要在 [Azure 经典管理门户](https://manage.windowsazure.cn/)中找到并复制订阅名称，请向下滚动并单击门户左侧的“设置”。 单击“订阅”以查看订阅列表。 复制在运行本指南中指定的脚本时要使用的订阅名称。\r \r      ![Azure 经典管理门户](./media/storage-powershell-guide-full/Subscription_currentportal.png)\r \r    * **$StorageAccountName：** 使用脚本中给定的名称，或输入存储帐户的新名称。 **重要提示：** 在 Azure 中，存储帐户的名称必须是唯一的。 它还必须为小写！\r    * **$Location：**使用脚本中给定的“China North”，或者选择其他 Azure 位置，例如 China East、China North。\r    * **$ContainerName：** 使用脚本中给定的名称，或输入容器的新名称。\r    * **$ImageToUpload：**输入本地计算机上图片的路径，例如：“C:\\Images\\HelloWorld.png”。\r    * **$DestinationFolder：**输入用于存储从 Azure 存储下载的文件的本地目录路径，例如：“C:\\DownloadImages”。\r 8. 在更新“mystoragescript.ps1”文件中的脚本变量后，请单击“文件” > “保存”。 然后单击“调试” > “运行”，或按“F5”运行该脚本。  \r \r 运行脚本后，应会创建包含已下载图像文件的本地目标文件夹。 以下屏幕截图显示了示例输出：\r \r ![下载 Blob](./media/storage-powershell-guide-full/Blobdownload.png)\r \r > [!NOTE]\r > “在 5 分钟内开始使用 Azure 存储和 PowerShell”部分提供了有关如何对 Azure 存储使用 Azure PowerShell 的简介。 有关详细信息和说明，建议阅读以下部分。\r > \r \r ## <a name=\"prerequisites-for-using-azure-powershell-with-azure-storage\"></a>对 Azure 存储使用 Azure PowerShell 的先决条件\r 如上所述，需要一个 Azure 订阅和帐户来运行本指南中指定的 PowerShell cmdlet。\r \r Azure PowerShell 是一个模块，提供用于通过 Windows PowerShell 管理 Azure 的 cmdlet。 有关安装和设置 Azure PowerShell 的信息，请参阅[如何安装和配置 Azure PowerShell](https://docs.microsoft.com/powershell/azure/overview)。 建议在使用本指南之前下载并安装或者升级到最新的 Azure PowerShell 模块。\r \r 可以在标准的 Windows PowerShell 控制台或 Windows PowerShell 集成脚本环境 (ISE) 中运行 cmdlet。 例如，如果要打开 **Windows PowerShell ISE**，请转到“开始”菜单，键入“管理工具”，并单击以运行它。 在“管理工具”窗口中，右键单击“Windows PowerShell ISE”，并单击“以管理员身份运行”。\r \r ## <a name=\"how-to-manage-storage-accounts-in-azure\"></a>如何管理 Azure 中的存储帐户\r \r 让我们看看如何在 Azure 中使用 PowerShell 管理存储帐户\r \r ### <a name=\"how-to-set-a-default-azure-subscription\"></a>如何设置默认的 Azure 订阅\r 若要使用 Azure PowerShell 管理 Azure 存储，需要通过 Azure Active Directory 身份验证或基于证书的身份验证在 Azure 中对客户端环境进行身份验证。 有关详细信息，请参阅[如何安装和配置 Azure PowerShell](https://docs.microsoft.com/powershell/azure/overview) 教程。 本指南使用 Azure Active Directory 身份验证。\r \r 1. 在 Windows PowerShell ISE 中键入以下命令，将 Azure 帐户添加到本地 PowerShell 环境：\r \r     ```powershell\r     Add-AzureAccount -Environment AzureChinaCloud\r     ```\r \r 2. 在“登录 Azure”窗口中，键入与帐户关联的电子邮件地址和密码。 Azure 将对凭据信息进行身份验证并保存，并关闭该窗口。\r \r 3. 接下来，运行以下命令以查看本地 PowerShell 环境中的 Azure 帐户，并检查是否列出了帐户：\r \r     ```powershell\r     Get-AzureAccount\r     ```\r 4. 然后，运行以下 cmdlet 以查看已连接到本地 PowerShell 会话的所有订阅，并验证是否列出了订阅：\r \r     ```powershell\r     Get-AzureSubscription | Format-Table SubscriptionName, IsDefault, IsCurrent, CurrentStorageAccountName`\r     ```\r 5. 若要设置默认 Azure 订阅，请运行 Select-AzureSubscription cmdlet：\r \r     ```powershell\r     $SubscriptionName = 'Your subscription Name'\r     Select-AzureSubscription -SubscriptionName $SubscriptionName -Default\r     ```\r \r 6. 通过运行 Get-AzureSubscription cmdlet 检查默认订阅的名称：\r \r     ```powershell\r     Get-AzureSubscription -Default\r     ```\r \r 7. 若要查看所有适用于 Azure 存储的 PowerShell cmdlet，请运行：\r \r     ```powershell\r     Get-Command -Module Azure -Noun *Storage*`\r     ```\r \r ### <a name=\"how-to-create-a-new-azure-storage-account\"></a>如何创建新的 Azure 存储帐户\r 若要使用 Azure 存储，则需要一个存储帐户。 可以在将计算机配置为连接到订阅之后，创建新的 Azure 存储帐户。\r \r 1. 运行 Get-AzureLocation cmdlet 查找所有可用的数据中心位置：\r \r     ```powershell\r     Get-AzureLocation | Format-Table -Property Name, AvailableServices, StorageAccountTypes\r     ```\r \r 2. 接下来，运行 New-AzureStorageAccount cmdlet 创建新的存储帐户。 以下示例在“中国北部”数据中心创建新的存储帐户。\r \r     ```powershell\r     $location = \"China North\"\r     $StorageAccountName = \"yourstorageaccount\"\r     New-AzureStorageAccount -StorageAccountName $StorageAccountName -Location $location\r     ```\r \r > [!IMPORTANT]\r > 存储帐户的名称在 Azure 中是唯一的，并且必须采用小写。 有关命名约定和限制，请参阅[关于 Azure 存储帐户](../storage-create-storage-account.md)和 [Naming and Referencing Containers, Blobs, and Metadata](http://msdn.microsoft.com/library/azure/dd135715.aspx)（命名和引用容器、Blob 和元数据）。\r > \r > \r \r ### <a name=\"how-to-set-a-default-azure-storage-account\"></a>如何设置默认的 Azure 存储帐户\r 可以在订阅中设置多个存储帐户。 可以选择其中的一个存储帐户，并将其设置为同一个 PowerShell 会话中所有存储命令的默认存储帐户。 这样，便可以在不显式指定存储上下文的情况下运行 Azure PowerShell 存储命令。\r \r 1. 若要设置订阅的默认存储帐户，可以运行 Set-AzureSubscription cmdlet。\r \r     ```powershell\r     $SubscriptionName = \"Your subscription name\"\r     $StorageAccountName = \"yourstorageaccount\"  \r     Set-AzureSubscription -CurrentStorageAccountName $StorageAccountName -SubscriptionName $SubscriptionName\r     ```\r \r 2. 接下来，运行 Get-AzureSubscription cmdlet，以检查该存储帐户是否与默认订阅帐户关联。 此命令返回当前订阅的订阅属性，包括其当前存储帐户。\r \r     ```powershell\r     Get-AzureSubscription -Current\r     ```\r \r ### <a name=\"how-to-list-all-azure-storage-accounts-in-a-subscription\"></a>如何列出订阅中所有的 Azure 存储帐户\r 每个 Azure 订阅最多可以有 100 个存储帐户。 \r \r 运行以下 cmdlet 可了解当前订阅中的存储帐户的名称和状态：\r \r ```powershell\r Get-AzureStorageAccount | Format-Table -Property StorageAccountName, Location, AccountType, StorageAccountStatus\r ```\r \r ### <a name=\"how-to-create-an-azure-storage-context\"></a>如何创建 Azure 存储上下文\r Azure 存储上下文是 PowerShell 中用于封装存储凭据的对象。 运行任何后续 cmdlet 时使用存储上下文可以对请求进行身份验证，而无需显式指定存储帐户及其访问密钥。 可以通过多种方式创建存储上下文，例如，使用存储帐户名称和访问密钥、共享访问签名 (SAS) 令牌、连接字符串或匿名。 有关详细信息，请参阅 [New-AzureStorageContext](https://docs.microsoft.com/powershell/module/azure.storage/new-azurestoragecontext)。  \r \r 使用以下三种方法之一创建存储上下文：\r \r * 运行 [Get-AzureStorageKey](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestoragekey) cmdlet，找出 Azure 存储帐户的主存储访问密钥。 接下来，调用 [New-AzureStorageContext](https://docs.microsoft.com/powershell/module/azure.storage/new-azurestoragecontext) cmdlet 以创建存储上下文：\r \r     ```powershell\r     $StorageAccountName = \"yourstorageaccount\"\r     $StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName\r     $Ctx = New-AzureStorageContext $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary\r     ```\r \r * 生成 Azure 存储容器的共享访问签名令牌，并使用它来创建存储上下文：\r \r     ```powershell\r     $sasToken = New-AzureStorageContainerSASToken -Container abc -Permission rl\r     $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -SasToken $sasToken\r     ```\r \r     有关详细信息，请参阅 [New-AzureStorageContainerSASToken](https://docs.microsoft.com/powershell/module/azure.storage/new-azurestoragecontainersastoken) 和[使用共享访问签名 (SAS)](../storage-dotnet-shared-access-signature-part-1.md)。\r \r * 在某些情况下，可能想要在创建新的存储上下文时指定服务终结点。 如果已将存储帐户的自定义域名注册到 Blob 服务，或者想要使用共享访问签名来访问存储资源，则可能需要进行这种指定。 在连接字符串中设置服务终结点，并使用它来创建新的存储上下文，如下所示：\r \r     ```powershell\r     $ConnectionString = \"DefaultEndpointsProtocol=http;BlobEndpoint=<blobEndpoint>;QueueEndpoint=<QueueEndpoint>;TableEndpoint=<TableEndpoint>;AccountName=<AccountName>;AccountKey=<AccountKey>\"\r     $Ctx = New-AzureStorageContext -ConnectionString $ConnectionString\r     ```\r \r 有关如何配置存储连接字符串的详细信息，请参阅[配置连接字符串](../storage-configure-connection-string.md)。\r \r 在设置了计算机并已了解如何使用 Azure PowerShell 管理订阅和存储帐户后，可转到下一节，了解如何管理 Azure blob 和 blob 快照。\r \r ### <a name=\"how-to-retrieve-and-regenerate-azure-storage-keys\"></a>如何检索和重新生成 Azure 存储密钥\r Azure 存储帐户附带了两个帐户密钥。 可以使用以下 cmdlet 示例来检索密钥。\r \r ```powershell\r Get-AzureStorageKey -StorageAccountName \"yourstorageaccount\"\r ```\r \r 使用以下 cmdlet 检索特定密钥。 有效值为 Primary 和 Secondary。  \r \r ```powershell\r (Get-AzureStorageKey -StorageAccountName $StorageAccountName).Primary\r \r (Get-AzureStorageKey -StorageAccountName $StorageAccountName).Secondary\r ```\r \r 如果想要重新生成密钥，请使用以下 cmdlet。 -KeyType 的有效值为“Primary”和“Secondary”\r \r ```powershell\r New-AzureStorageKey -StorageAccountName $StorageAccountName -KeyType \"Primary\"\r \r New-AzureStorageKey -StorageAccountName $StorageAccountName -KeyType \"Secondary\"\r ```\r \r ## <a name=\"how-to-manage-azure-blobs\"></a>如何管理 Azure blob\r Azure Blob 存储是用于存储大量非结构化数据（例如文本或二进制数据）的服务，这些数据可通过 HTTP 或 HTTPS 从世界各地进行访问。 本部分假设用户已熟悉了 Azure Blob 存储服务的概念。 有关详细信息，请参阅[通过 .NET 开始使用 Blob 存储](../blobs/storage-dotnet-how-to-use-blobs.md)和 [Blob Service Concepts](http://msdn.microsoft.com/library/azure/dd179376.aspx)（Blob 服务概念）。\r \r ### <a name=\"how-to-create-a-container\"></a>如何创建容器\r Azure 存储中的每个 Blob 都必须在容器中。 可以使用 New-AzureStorageContainer cmdlet 创建专用容器：\r \r ```powershell\r $StorageContainerName = \"yourcontainername\"\r New-AzureStorageContainer -Name $StorageContainerName -Permission Off\r ```\r \r > [!NOTE]\r > 有三种级别的匿名读取访问权限：**Off**、**Blob** 和 **Container**。 要防止对 Blob 进行匿名访问，请将 Permission 参数设置为 **Off**。 默认情况下，新容器是专用容器，只能由帐户所有者访问。 要允许对 Blob 资源进行匿名公共读取访问，但不允许访问容器元数据或容器中的 Blob 列表，请将 Permission 参数设置为 **Blob**。 要允许对 Blob 资源、容器元数据和容器中的 Blob 列表进行完全公开读取访问，请将 Permission 参数设置为 **Container**。 有关详细信息，请参阅[管理对容器和 Blob 的匿名读取访问](../blobs/storage-manage-access-to-resources.md)。\r > \r > \r \r ### <a name=\"how-to-upload-a-blob-into-a-container\"></a>如何将 Blob 上传到容器\r Azure Blob 存储支持块 Blob 和页 Blob。 有关详细信息，请参阅 [Understanding Block Blobs, Append BLobs, and Page Blobs](http://msdn.microsoft.com/library/azure/ee691964.aspx)（了解块 Blob、追加 Blob 和页 Blob）。\r \r 要将 Blob 上传到容器，可以使用 [Set-AzureStorageBlobContent](https://docs.microsoft.com/powershell/module/azure.storage/set-azurestorageblobcontent) cmdlet。 默认情况下，此命令会将本地文件上传到块 Blob。 若要指定 Blob 的类型，可以使用 -BlobType 参数。\r \r 以下示例将运行 [Get-ChildItem](http://technet.microsoft.com/library/hh849800.aspx) cmdlet 以获取指定文件夹中的所有文件，然后，通过使用管道运算符将这些文件传递到下一个 cmdlet。 [Set-AzureStorageBlobContent](https://docs.microsoft.com/powershell/module/azure.storage/set-azurestorageblobcontent) cmdlet 将本地文件上传到容器：\r \r ```powershell\r Get-ChildItem -Path C:\\Images\\* | Set-AzureStorageBlobContent -Container \"yourcontainername\"\r ```\r \r ### <a name=\"how-to-download-blobs-from-a-container\"></a>如何从容器下载 Blob\r 以下示例演示如何从容器下载 Blob。 该示例首先使用存储帐户上下文（包括存储帐户名称及其主访问密钥）与 Azure 存储建立连接。 然后，该示例使用 [Get-AzureStorageBlob](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestorageblob) cmdlet 检索 Blob 引用。 接下来，该示例使用 [Get-AzureStorageBlobContent](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestorageblobcontent) cmdlet 将 Blob 下载到本地目标文件夹。\r \r ```powershell\r #Define the variables.\r $ContainerName = \"yourcontainername\"\r $DestinationFolder = \"C:\\DownloadImages\"\r \r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = \"Storage key for yourstorageaccount ends with ==\"\r $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey\r \r #List all blobs in a container.\r $blobs = Get-AzureStorageBlob -Container $ContainerName -Context $Ctx\r \r #Download blobs from a container.\r New-Item -Path $DestinationFolder -ItemType Directory -Force\r $blobs | Get-AzureStorageBlobContent -Destination $DestinationFolder -Context $Ctx\r ```\r \r ### <a name=\"how-to-copy-blobs-from-one-storage-container-to-another\"></a>如何将 Blob 复制到另一个存储容器\r 可以跨存储帐户和区域异步复制 Blob。 以下示例演示如何在两个不同的存储帐户，将一个存储容器中的 Blob 复制到另一个存储容器。 该示例首先设置源和目标存储帐户的变量，并创建每个帐户的存储上下文。 接下来，该示例使用 [Start-AzureStorageBlobCopy](https://docs.microsoft.com/powershell/module/azure.storage/start-azurestorageblobcopy) cmdlet 将 Blob 从源容器复制到目标容器。 该示例假设源存储帐户、目标存储帐户和容器已存在。\r \r ```powershell\r #Define the source storage account and context.\r $SourceStorageAccountName = \"yoursourcestorageaccount\"\r $SourceStorageAccountKey = \"Storage key for yoursourcestorageaccount\"\r $SrcContainerName = \"yoursrccontainername\"\r $SourceContext = New-AzureStorageContext -StorageAccountName $SourceStorageAccountName -StorageAccountKey $SourceStorageAccountKey\r \r #Define the destination storage account and context.\r $DestStorageAccountName = \"yourdeststorageaccount\"\r $DestStorageAccountKey = \"Storage key for yourdeststorageaccount\"\r $DestContainerName = \"destcontainername\"\r $DestContext = New-AzureStorageContext -StorageAccountName $DestStorageAccountName -StorageAccountKey $DestStorageAccountKey\r \r #Get a reference to blobs in the source container.\r $blobs = Get-AzureStorageBlob -Container $SrcContainerName -Context $SourceContext\r \r #Copy blobs from one container to another.\r $blobs| Start-AzureStorageBlobCopy -DestContainer $DestContainerName -DestContext $DestContext\r ```\r \r 请注意，此示例执行异步复制。 可以通过运行 [Get-AzureStorageBlobCopyState](https://docs.microsoft.com/powershell/module/azure.storage/start-azurestorageblobcopystate) cmdlet 来监视每个副本的状态。\r \r ### <a name=\"how-to-copy-blobs-from-a-secondary-location\"></a>如何从辅助位置复制 Blob\r 可以从一个已启用 RA-GRS 帐户的辅助位置复制 Blob。\r \r ```powershell\r #define secondary storage context using a connection string constructed from secondary endpoints.\r $SrcContext = New-AzureStorageContext -ConnectionString \"DefaultEndpointsProtocol=https;AccountName=***;AccountKey=***;BlobEndpoint=http://***-secondary.blob.core.chinacloudapi.cn;FileEndpoint=http://***-secondary.file.core.chinacloudapi.cn;QueueEndpoint=http://***-secondary.queue.core.chinacloudapi.cn; TableEndpoint=http://***-secondary.table.core.chinacloudapi.cn;\"\r Start-AzureStorageBlobCopy -Container *** -Blob *** -Context $SrcContext -DestContainer *** -DestBlob *** -DestContext $DestContext\r ```\r \r ### <a name=\"how-to-delete-a-blob\"></a>如何删除 Blob\r 如果要删除 Blob，首先需要获取 Blob 引用，然后对该引用调用 Remove-AzureStorageBlob cmdlet。 以下示例删除给定容器中的所有 Blob。 该示例首先设置存储帐户的变量，并创建存储上下文。 接下来，该示例使用 [Get-AzureStorageBlob](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestorageblob) cmdlet 检索 Blob 引用，并运行 [Remove-AzureStorageBlob](https://docs.microsoft.com/powershell/module/azure.storage/remove-azurestorageblob) cmdlet 删除 Azure 存储内某个容器中的 Blob。\r \r ```powershell\r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = \"Storage key for yourstorageaccount ends with ==\"\r $ContainerName = \"containername\"\r $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey\r \r #Get a reference to all the blobs in the container.\r $blobs = Get-AzureStorageBlob -Container $ContainerName -Context $Ctx\r \r #Delete blobs in a specified container.\r $blobs| Remove-AzureStorageBlob\r ```\r \r ## <a name=\"how-to-manage-azure-blob-snapshots\"></a>如何管理 Azure Blob 快照\r Azure 允许创建 Blob 的快照。 快照是在某一时间点拍摄的只读版本的 Blob。 在创建快照后，可以读取、复制或删除该快照，但无法对其进行修改。 利用快照，可以在某个时间点备份 Blob。 有关详细信息，请参阅 [Creating a Snapshot of a Blob](http://msdn.microsoft.com/library/azure/hh488361.aspx)（创建 Blob 的快照）。\r \r ### <a name=\"how-to-create-a-blob-snapshot\"></a>如何创建 Blob 快照\r 如果要创建 Blob 的快照，首先需要获取 Blob 引用，然后对其调用 `ICloudBlob.CreateSnapshot` 方法。 以下示例首先设置存储帐户的变量，并创建存储上下文。 接下来，该示例使用 [Get-AzureStorageBlob](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestorageblob) cmdlet 检索 Blob 引用，并运行 [ICloudBlob.CreateSnapshot](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.blob.icloudblob.aspx) 方法创建一个快照。\r \r ```powershell\r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = \"Storage key for yourstorageaccount ends with ==\"\r $ContainerName = \"yourcontainername\"\r $BlobName = \"yourblobname\"\r $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey\r \r #Get a reference to a blob.\r $blob = Get-AzureStorageBlob -Context $Ctx -Container $ContainerName -Blob $BlobName\r \r #Create a snapshot of the blob.\r $snap = $blob.ICloudBlob.CreateSnapshot()\r ```\r \r ### <a name=\"how-to-list-a-blobs-snapshots\"></a>如何列出 Blob 的快照\r 可以根据需要为 Blob 创建任意数目的快照。 可以列出与 Blob 关联的快照，以跟踪当前快照。 以下示例使用预定义的 Blob，并调用 [Get-AzureStorageBlob](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestorageblob) cmdlet 列出该 Blob 的快照。  \r \r ```powershell\r #Define the blob name.\r $BlobName = \"yourblobname\"\r \r #List the snapshots of a blob.\r Get-AzureStorageBlob -Context $Ctx -Prefix $BlobName -Container $ContainerName  | Where-Object  { $_.ICloudBlob.IsSnapshot -and $_.Name -eq $BlobName }\r ```\r \r ### <a name=\"how-to-copy-a-snapshot-of-a-blob\"></a>如何复制 Blob 的快照\r 可以复制 Blob 的快照以还原快照。 有关详细信息和限制，请参阅 [Creating a Snapshot of a Blob](http://msdn.microsoft.com/library/azure/hh488361.aspx)（创建 Blob 的快照）。 以下示例首先设置存储帐户的变量，并创建存储上下文。 接下来，该示例定义容器和 Blob 的名称变量。 该示例使用 [Get-AzureStorageBlob](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestorageblob) cmdlet 检索 Blob 引用，并运行 [ICloudBlob.CreateSnapshot](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.blob.icloudblob.aspx) 方法创建一个快照。 然后，该示例运行 [Start-AzureStorageBlobCopy](https://docs.microsoft.com/powershell/module/azure.storage/start-azurestorageblobcopy) cmdlet，以使用源 Blob 的 ICloudBlob 对象复制 Blob 的快照。 在运行该示例之前，请务必根据配置更新变量。 请注意，以下示例假设源容器、目标容器和源 Blob 已存在。\r \r ```powershell\r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = \"Storage key for yourstorageaccount ends with ==\"\r $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey\r \r #Define the variables.\r $SrcContainerName = \"yoursourcecontainername\"\r $DestContainerName = \"yourdestcontainername\"\r $SrcBlobName = \"yourblobname\"\r $DestBlobName = \"CopyBlobName\"\r \r #Get a reference to a blob.\r $blob = Get-AzureStorageBlob -Context $Ctx -Container $SrcContainerName -Blob $SrcBlobName\r \r #Create a snapshot of a blob.\r $snap = $blob.ICloudBlob.CreateSnapshot()\r \r #Copy the snapshot to another container.\r Start-AzureStorageBlobCopy -Context $Ctx -ICloudBlob $snap -DestBlob $DestBlobName -DestContainer $DestContainerName\r ```\r \r 在已了解了如何使用 Azure PowerShell 管理 Azure blob 和 blob 快照后，可转到下一节，了解如何管理表、队列和文件。\r \r ## <a name=\"how-to-manage-azure-tables-and-table-entities\"></a>如何管理 Azure 表和表实体\r Azure 表存储服务是一种 NoSQL 数据存储，可用于存储和查询大量的结构化非关系型数据。 该服务的主要组件包括表、实体和属性。 表是实体的集合。 实体是一组属性。 每个实体最多可以有 252 个属性（都是一些名称-值对）。 本部分假设用户已熟悉 Azure 表存储服务的概念。 有关详细信息，请参阅 [Understanding the Table Service Data Model](http://msdn.microsoft.com/library/azure/dd179338.aspx)（了解表服务数据模型）和[通过 .NET 开始使用 Azure 表存储](../../cosmos-db/table-storage-how-to-use-dotnet.md)。\r \r 以下小节中介绍如何使用 Azure PowerShell 管理 Azure 表存储服务。 涉及的情景包括**创建**、**删除**和**检索****表**，以及**添加**、**查询**和**删除表实体**。\r \r ### <a name=\"how-to-create-a-table\"></a>如何创建表\r 每个表必须驻留在 Azure 存储帐户中。 以下示例演示如何在 Azure 存储中创建一个表。 该示例首先使用存储帐户上下文（包括存储帐户名称及其访问密钥）与 Azure 存储建立连接。 接下来，它会使用 [New-AzureStorageTable](https://docs.microsoft.com/powershell/module/azure.storage/new-azurestoragetable) cmdlet 在 Azure 存储中创建表。\r \r ```powershell\r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = \"Storage key for yourstorageaccount ends with ==\"\r $Ctx = New-AzureStorageContext $StorageAccountName -StorageAccountKey $StorageAccountKey\r \r #Create a new table.\r $tabName = \"yourtablename\"\r New-AzureStorageTable -Name $tabName -Context $Ctx\r ```\r \r ### <a name=\"how-to-retrieve-a-table\"></a>如何检索表\r 可以查询和检索存储帐户中的一个或所有表。 以下示例演示如何使用 [Get-AzureStorageTable](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestoragetable) cmdlet 检索给定的表。\r \r ```powershell\r #Retrieve a table.\r $tabName = \"yourtablename\"\r Get-AzureStorageTable -Name $tabName -Context $Ctx\r ```\r \r 如果调用不带任何参数的 Get-AzureStorageTable cmdlet，则会获取存储帐户的所有存储表。\r \r ### <a name=\"how-to-delete-a-table\"></a>如何删除表\r 可以使用 [Remove-AzureStorageTable](https://docs.microsoft.com/powershell/module/azure.storage/remove-azurestoragetable) cmdlet 从存储帐户中删除表。  \r \r ```powershell\r #Delete a table.\r $tabName = \"yourtablename\"\r Remove-AzureStorageTable -Name $tabName -Context $Ctx\r ```\r \r ### <a name=\"how-to-manage-table-entities\"></a>如何管理表实体\r 目前，Azure PowerShell 未直接提供用于管理表实体的 cmdlet。 若要对表实体执行操作，可以使用[用于 .NET 的 Azure 存储客户端库](http://msdn.microsoft.com/library/azure/wa_storage_30_reference_home.aspx)中提供的类。\r \r #### <a name=\"how-to-add-table-entities\"></a>如何添加表实体\r 要将实体添加到表中，请先创建用于定义实体属性的对象。 一个实体最多可以有 255 个属性，其中包括 3 个系统属性：**PartitionKey**、**RowKey** 和 **Timestamp**。 需要负责插入和更新 **PartitionKey** 与 **RowKey** 的值。 服务器管理 **Timestamp**的值，该值不可修改。 **PartitionKey** 和 **RowKey** 共同唯一标识表中的每个实体。\r \r * **PartitionKey**：确定实体存储在其中的分区。\r * **RowKey**：唯一标识分区内的实体。\r \r 最多可为一个实体定义 252 个自定义属性。 有关详细信息，请参阅 [Understanding the Table Service Data Model](http://msdn.microsoft.com/library/azure/dd179338.aspx)（了解表服务数据模型）。\r \r 以下示例演示如何向表中添加实体。 该示例演示如何检索员工表，并将多个实体添加到其中。 该示例首先使用存储帐户上下文（包括存储帐户名称及其访问密钥）与 Azure 存储建立连接。 接下来，使用 [Get-AzureStorageTable](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestoragetable) cmdlet 检索给定的表。 如果该表不存在，则使用 [New-AzureStorageTable](https://docs.microsoft.com/powershell/module/azure.storage/new-azurestoragetable) cmdlet 在 Azure 存储中创建一个表。 接下来，该示例定义一个自定义函数 Add-Entity，以通过指定每个实体的分区和行键，将实体添加到表中。 Add-Entity 函数对 [Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.table.dynamictableentity.aspx) 类调用 [New-Object](http://technet.microsoft.com/library/hh849885.aspx) cmdlet，以创建实体对象。 随后，该示例对此实体对象调用 [Microsoft.WindowsAzure.Storage.Table.TableOperation.Insert](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.table.tableoperation.insert.aspx) 方法，以将它添加到表中。\r \r ```powershell\r #Function Add-Entity: Adds an employee entity to a table.\r function Add-Entity() {\r     [CmdletBinding()]\r     param(\r        $table,\r        [String]$partitionKey,\r        [String]$rowKey,\r        [String]$name,\r        [Int]$id\r     )\r \r   $entity = New-Object -TypeName Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity -ArgumentList $partitionKey, $rowKey\r   $entity.Properties.Add(\"Name\", $name)\r   $entity.Properties.Add(\"ID\", $id)\r \r   $result = $table.CloudTable.Execute([Microsoft.WindowsAzure.Storage.Table.TableOperation]::Insert($entity))\r }\r \r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName\r $Ctx = New-AzureStorageContext $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary\r $TableName = \"Employees\"\r \r #Retrieve the table if it already exists.\r $table = Get-AzureStorageTable -Name $TableName -Context $Ctx -ErrorAction Ignore\r \r #Create a new table if it does not exist.\r if ($table -eq $null)\r {\r    $table = New-AzureStorageTable -Name $TableName -Context $Ctx\r }\r \r #Add multiple entities to a table.\r Add-Entity -Table $table -PartitionKey Partition1 -RowKey Row1 -Name Chris -Id 1\r Add-Entity -Table $table -PartitionKey Partition1 -RowKey Row2 -Name Jessie -Id 2\r Add-Entity -Table $table -PartitionKey Partition2 -RowKey Row1 -Name Christine -Id 3\r Add-Entity -Table $table -PartitionKey Partition2 -RowKey Row2 -Name Steven -Id 4\r ```\r \r #### <a name=\"how-to-query-table-entities\"></a>如何查询表实体\r 若要查询表，请使用 [Microsoft.WindowsAzure.Storage.Table.TableQuery](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.table.tablequery.aspx) 类。 以下示例假设已运行本指南的“如何添加实体”部分中指定的脚本。 该示例首先使用存储上下文（包括存储帐户名称及其访问密钥）与 Azure 存储建立连接。 接下来，它会尝试使用 [Get-AzureStorageTable](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestoragetable) cmdlet 检索前面创建的“Employees”表。 对 Microsoft.WindowsAzure.Storage.Table.TableQuery 类调用 [New-Object](http://technet.microsoft.com/library/hh849885.aspx) cmdlet 会创建一个新的查询对象。 该示例查找字符串筛选器中指定的“ID”列值为 1 的实体。 有关详细信息，请参阅 [Querying Tables and Entities](http://msdn.microsoft.com/library/azure/dd894031.aspx)（查询表和实体）。 当运行此查询时，它返回与筛选条件匹配的所有实体。\r \r ```powershell\r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName\r $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary\r $TableName = \"Employees\"\r \r #Get a reference to a table.\r $table = Get-AzureStorageTable -Name $TableName -Context $Ctx\r \r #Create a table query.\r $query = New-Object Microsoft.WindowsAzure.Storage.Table.TableQuery\r \r #Define columns to select.\r $list = New-Object System.Collections.Generic.List[string]\r $list.Add(\"RowKey\")\r $list.Add(\"ID\")\r $list.Add(\"Name\")\r \r #Set query details.\r $query.FilterString = \"ID gt 0\"\r $query.SelectColumns = $list\r $query.TakeCount = 20\r \r #Execute the query.\r $entities = $table.CloudTable.ExecuteQuery($query)\r \r #Display entity properties with the table format.\r $entities  | Format-Table PartitionKey, RowKey, @{ Label = \"Name\"; Expression={$_.Properties[\"Name\"].StringValue}}, @{ Label = \"ID\"; Expression={$_.Properties[\"ID\"].Int32Value}} -AutoSize\r ```\r \r #### <a name=\"how-to-delete-table-entities\"></a>如何删除表实体\r 可以使用实体的分区键和行键删除实体。 以下示例假设已运行本指南的“如何添加实体”部分中指定的脚本。 该示例首先使用存储上下文（包括存储帐户名称及其访问密钥）与 Azure 存储建立连接。 接下来，它会尝试使用 [Get-AzureStorageTable](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestoragetable) cmdlet 检索前面创建的“Employees”表。 如果该表存在，该示例会调用 [Microsoft.WindowsAzure.Storage.Table.TableOperation.Retrieve](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.table.tableoperation.retrieve.aspx) 方法，以基于实体的分区键和行键值来检索实体。 然后，将该实体传递到 [Microsoft.WindowsAzure.Storage.Table.TableOperation.Delete](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.table.tableoperation.delete.aspx) 方法以将其删除。\r \r ```powershell\r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName\r $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary\r \r #Retrieve the table.\r $TableName = \"Employees\"\r $table = Get-AzureStorageTable -Name $TableName -Context $Ctx -ErrorAction Ignore\r \r #If the table exists, start deleting its entities.\r if ($table -ne $null) \r {\r     #Together the PartitionKey and RowKey uniquely identify every  \r     #entity within a table.\r     $tableResult = $table.CloudTable.Execute([Microsoft.WindowsAzure.Storage.Table.TableOperation]::Retrieve(\"Partition2\", \"Row1\"))\r     $entity = $tableResult.Result\r     if ($entity -ne $null)\r     {\r         #Delete the entity.\r         $table.CloudTable.Execute([Microsoft.WindowsAzure.Storage.Table.TableOperation]::Delete($entity))\r     }\r }\r ```\r \r ## <a name=\"how-to-manage-azure-queues-and-queue-messages\"></a>如何管理 Azure 队列和队列消息\r Azure 队列存储是一项可存储大量消息的服务，用户可以通过经验证的呼叫，使用 HTTP 或 HTTPS 从世界任何地方访问这些消息。 本部分假设用户已熟悉 Azure 队列存储服务的概念。 有关详细信息，请参阅[通过 .NET 开始使用 Azure 队列存储](../storage-dotnet-how-to-use-queues.md)。\r \r 本部分说明如何使用 Azure PowerShell 管理 Azure 队列存储服务。 涉及的情景包括**插入**和**删除**队列消息，以及**创建**、**删除**和**检索队列**。\r \r ### <a name=\"how-to-create-a-queue\"></a>如何创建队列\r 以下示例首先使用存储帐户上下文（包括存储帐户名称及其访问密钥）与 Azure 存储建立连接。 接下来，它调用 [New-AzureStorageQueue](https://docs.microsoft.com/powershell/module/azure.storage/new-azurestoragequeue) cmdlet 以创建名为“queuename”的队列。\r \r ```powershell\r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName\r $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary\r $QueueName = \"queuename\"\r $Queue = New-AzureStorageQueue -Name $QueueName -Context $Ctx\r ```\r \r 有关命名 Azure 队列服务命名约定的信息，请参阅 [Naming Queues and Metadata](http://msdn.microsoft.com/library/azure/dd179349.aspx)（命名队列和元数据）。\r \r ### <a name=\"how-to-retrieve-a-queue\"></a>如何检索队列\r 可以查询和检索存储帐户中的特定队列，或者所有队列的列表。 以下示例演示如何使用 [Get-AzureStorageQueue](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestoragequeue) cmdlet 检索指定的队列。\r \r ```powershell\r #Retrieve a queue.\r $QueueName = \"queuename\"\r $Queue = Get-AzureStorageQueue -Name $QueueName -Context $Ctx\r ```\r \r 如果调用不带任何参数的 [Get-AzureStorageQueue](https://docs.microsoft.com/powershell/module/azure.storage/get-azurestoragequeue) cmdlet，它可获取所有队列的列表。\r \r ### <a name=\"how-to-delete-a-queue\"></a>如何删除队列\r 若要删除队列及其中包含的所有消息，请调用 Remove-AzureStorageQueue cmdlet。 以下示例演示如何使用 Remove-AzureStorageQueue cmdlet 删除指定的队列。\r \r ```powershell\r #Delete a queue.\r $QueueName = \"yourqueuename\"\r Remove-AzureStorageQueue -Name $QueueName -Context $Ctx\r ```\r \r #### <a name=\"how-to-insert-a-message-into-a-queue\"></a>如何在队列中插入消息\r 若要在现有队列中插入一条消息，请先创建 [Microsoft.WindowsAzure.Storage.Queue.CloudQueueMessage](http://msdn.microsoft.com/library/azure/jj732474.aspx) 类的新实例。 接下来，调用 [AddMessage](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.queue.cloudqueue.addmessage.aspx) 方法。 可从字符串（UTF-8 格式）或字节数组创建 CloudQueueMessage。\r \r 以下示例演示如何向队列中添加消息。 该示例首先使用存储帐户上下文（包括存储帐户名称及其访问密钥）与 Azure 存储建立连接。 接下来，它会使用 [Get-AzureStorageQueue](https://msdn.microsoft.com/library/azure/dn806377.aspx) cmdlet 检索指定的队列。 如果该队列存在，则使用 [New-Object](http://technet.microsoft.com/library/hh849885.aspx) cmdlet 创建 [Microsoft.WindowsAzure.Storage.Queue.CloudQueueMessage](http://msdn.microsoft.com/library/azure/jj732474.aspx) 类的实例。 随后，该示例对此消息对象调用 [AddMessage](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.queue.cloudqueue.addmessage.aspx) 方法，以将它添加到队列中。 以下是检索队列并插入消息“MessageInfo”的代码：\r \r ```powershell\r #Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName\r $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary\r \r #Retrieve the queue.\r $QueueName = \"queuename\"\r $Queue = Get-AzureStorageQueue -Name $QueueName -Context $ctx\r \r #If the queue exists, add a new message.\r if ($Queue -ne $null) {\r    # Create a new message using a constructor of the CloudQueueMessage class.\r    $QueueMessage = New-Object -TypeName Microsoft.WindowsAzure.Storage.Queue.CloudQueueMessage -ArgumentList MessageInfo\r \r    # Add a new message to the queue.\r    $Queue.CloudQueue.AddMessage($QueueMessage)\r }\r ```\r \r #### <a name=\"how-to-de-queue-at-the-next-message\"></a>如何取消下一条消息的排队\r 代码通过两个步骤来取消对队列中某条消息的排队。 当调用 [Microsoft.WindowsAzure.Storage.Queue.CloudQueue.GetMessage](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.queue.cloudqueue.getmessage.aspx) 方法时，会获取队列中的下一条消息。 从 **GetMessage** 返回的消息变得对从此队列读取消息的任何其他代码不可见。 若要完成从队列中删除消息，还必须调用 [Microsoft.WindowsAzure.Storage.Queue.CloudQueue.DeleteMessage](http://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.queue.cloudqueue.deletemessage.aspx) 方法。 此删除消息的两步过程可确保，如果代码因硬件或软件故障而无法处理消息，则代码的其他实例可以获取相同消息并重试。 代码在处理消息后会立即调用 **DeleteMessage** 。\r \r ```powershell\r # Define the storage account and context.\r $StorageAccountName = \"yourstorageaccount\"\r $StorageAccountKey = Get-AzureStorageKey -StorageAccountName $StorageAccountName\r $Ctx = New-AzureStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $StorageAccountKey.Primary\r \r # Retrieve the queue.\r $QueueName = \"queuename\"\r $Queue = Get-AzureStorageQueue -Name $QueueName -Context $ctx\r \r $InvisibleTimeout = [System.TimeSpan]::FromSeconds(10)\r \r # Get the message object from the queue.\r $QueueMessage = $Queue.CloudQueue.GetMessage($InvisibleTimeout)\r # Delete the message.\r $Queue.CloudQueue.DeleteMessage($QueueMessage)\r ```\r \r ## <a name=\"how-to-manage-azure-file-shares-and-files\"></a>如何管理 Azure 文件共享和文件\r Azure 文件存储使用标准 SMB 协议为应用程序提供共享存储。 Azure 虚拟机和云服务可以通过装入的共享在应用程序组件之间共享文件数据，本地应用程序可以通过文件存储 API 或 Azure PowerShell 访问共享中的文件数据。\r \r 有关 Azure 文件存储的详细信息，请参阅[在 Windows 上开始使用 Azure 文件存储](../storage-dotnet-how-to-use-files.md)和 [File Service REST API](http://msdn.microsoft.com/library/azure/dn167006.aspx)（文件服务 REST API）。\r \r ## <a name=\"how-to-set-and-query-storage-analytics\"></a>如何设置和查询存储分析\r 可使用 [Azure 存储分析](../storage-analytics.md)从 Azure 存储帐户收集度量值，并记录与发送到存储帐户的请求有关的数据。 可以使用存储度量值监视存储帐户的运行状况，并使用存储日志记录诊断和解决与存储帐户有关的问题。 可以使用 Azure 门户或 Windows PowerShell 配置监视，也可以使用存储客户端库以编程方式配置监视。 存储日志记录在服务器端执行，可用于在存储帐户中记录成功和失败请求的相关详细信息。 使用这些日志，可以查看针对表、队列和 Blob 的读取、写入和删除操作的详细信息，以及请求失败的原因。\r \r 若要了解如何使用 PowerShell 启用和查看存储度量值数据，请参阅[如何使用 PowerShell 启用存储度量值](http://msdn.microsoft.com/library/azure/dn782843.aspx#HowtoenableStorageMetricsusingPowerShell)。\r \r 若要了解如何使用 PowerShell 启用和检索存储日志记录数据，请参阅[如何使用 PowerShell 启用存储日志记录](http://msdn.microsoft.com/library/azure/dn782840.aspx#HowtoenableStorageLoggingusingPowerShell)和[查找存储日志记录的日志数据](http://msdn.microsoft.com/library/azure/dn782840.aspx#FindingyourStorageLogginglogdata)。\r 有关使用“存储指标”和“存储日志记录”排查存储问题的详细信息，请参阅[对 Azure 存储进行监视、诊断和故障排除](../storage-monitoring-diagnosing-troubleshooting.md)。\r \r ## <a name=\"how-to-manage-shared-access-signature-sas-and-stored-access-policy\"></a>如何管理共享访问签名 (SAS) 和存储访问策略\r 共享访问签名是对使用 Azure 存储的任何应用程序创建安全模型的重要环节。 它们用于将存储帐户的受限权限提供给不应具有帐户密钥的客户端。 默认情况下，只有存储帐户的所有者可访问该帐户中的 Blob、表和队列。 如果服务或应用程序需要向其他客户端提供这些资源但不共享访问密钥，可以使用三个选项：\r \r * 设置容器的权限以允许匿名读取该容器及其 Blob。 表或队列不允许这样做。\r * 使用共享访问签名，它可以在特定时间间隔内授予对容器、Blob、队列和表的受限访问权限。\r * 使用存储访问策略，以在更高程度上控制容器或其 Blob、队列或表的共享访问签名。 使用存储访问策略可以更改签名的开始时间、到期时间或权限，或者在颁发签名后将其吊销。\r \r 共享访问签名可以采取以下两种形式的一种：\r \r * **Ad hoc SAS**：在创建一个临时 SAS 时，针对该 SAS 的开始时间、到期时间和权限全都在 SAS URI 上指定。 可以在容器、Blob、表或队列上创建这种不可吊销的 SAS。\r * **具有存储访问策略的 SAS**：存储访问策略是对资源容器（Blob 容器、表或队列）定义的，可用于管理针对一个或多个共享访问签名的约束。 将某一 SAS 与一个存储访问策略相关联时，该 SAS 会继承对该存储访问策略定义的约束：开始时间、到期时间和权限。 这种类型的 SAS 可吊销。\r \r 有关详细信息，请参阅[使用共享访问签名 (SAS)](../storage-dotnet-shared-access-signature-part-1.md) 和[管理对容器和 Blob 的匿名读取访问](../blobs/storage-manage-access-to-resources.md)。\r \r 下一部分介绍如何为 Azure 表创建共享访问签名令牌和存储访问策略。 Azure PowerShell 为容器、Blob 和队列提供了类似的 cmdlet。 若要运行本部分中的脚本，下载 [Azure PowerShell 版本 0.8.14](http://go.microsoft.com/?linkid=9811175&clcid=0x409) 或更高版本。\r \r ### <a name=\"how-to-create-a-policy-based-shared-access-signature-token\"></a>如何创建基于策略的共享访问签名令牌\r 使用 New-AzureStorageTableStoredAccessPolicy cmdlet 创建新的存储访问策略。 然后，调用 [New-AzureStorageTableSASToken](https://docs.microsoft.com/powershell/module/azure.storage/new-azurestoragetablesastoken) cmdlet 为 Azure 存储表创建新的基于策略的共享访问签名令牌。\r \r ```powershell\r $policy = \"policy1\"\r New-AzureStorageTableStoredAccessPolicy -Name $tableName -Policy $policy -Permission \"rd\" -StartTime \"2015-01-01\" -ExpiryTime \"2016-01-01\" -Context $Ctx\r New-AzureStorageTableSASToken -Name $tableName -Policy $policy -Context $Ctx\r ```\r \r ### <a name=\"how-to-create-an-ad-hoc-non-revocable-shared-access-signature-token\"></a>如何创建临时（不可吊销）共享访问签名令牌\r 使用 [New-AzureStorageTableSASToken](https://docs.microsoft.com/powershell/module/azure.storage/new-azurestoragetablesastoken) cmdlet 为 Azure 存储表创建新的临时（不可吊销的）共享访问签名令牌：\r \r ```powershell\r New-AzureStorageTableSASToken -Name $tableName -Permission \"rqud\" -StartTime \"2015-01-01\" -ExpiryTime \"2015-02-01\" -Context $Ctx\r ```\r \r ### <a name=\"how-to-create-a-stored-access-policy\"></a>如何创建存储访问策略\r 使用 New-AzureStorageTableStoredAccessPolicy cmdlet 为 Azure 存储表创建新的存储访问策略：\r \r ```powershell\r $policy = \"policy1\"\r New-AzureStorageTableStoredAccessPolicy -Name $tableName -Policy $policy -Permission \"rd\" -StartTime \"2015-01-01\" -ExpiryTime \"2016-01-01\" -Context $Ctx\r ```\r \r ### <a name=\"how-to-update-a-stored-access-policy\"></a>如何更新存储访问策略\r 使用 Set-AzureStorageTableStoredAccessPolicy cmdlet 更新 Azure 存储表的现有存储访问策略：\r \r ```powershell\r Set-AzureStorageTableStoredAccessPolicy -Policy $policy -Table $tableName -Permission \"rd\" -NoExpiryTime -NoStartTime -Context $Ctx\r ```\r \r ### <a name=\"how-to-delete-a-stored-access-policy\"></a>如何删除存储访问策略\r 使用 Remove-AzureStorageTableStoredAccessPolicy cmdlet 删除 Azure 存储表的存储访问策略：\r \r ```powershell\r Remove-AzureStorageTableStoredAccessPolicy -Policy $policy -Table $tableName -Context $Ctx\r ```\r \r ## <a name=\"how-to-use-azure-storage-for-azure-china\"></a>如何在 Azure 中国区使用 Azure 存储\r Azure 环境的部署独立于 Azure，例如[中国世纪互联运营的 AzureChinaCloud for Azure](https://www.azure.cn/)。 可以为 Azure 中国区部署新的 Azure 环境。\r \r 要将 Azure 存储用于 AzureChinaCloud，需要创建与 AzureChinaCloud 关联的存储上下文。 请按照以下步骤开始：\r \r 1. 运行 [Get-AzureEnvironment](https://docs.microsoft.com/powershell/module/azure/get-azureenvironment?view=azuresmps-3.7.0) cmdlet 以查看可用的 Azure 环境：\r \r     ```powershell\r     Get-AzureEnvironment\r     ```\r \r 2. 将 Azure 中国区帐户添加到 Windows PowerShell：\r \r     ```powershell\r     Add-AzureAccount -Environment AzureChinaCloud\r     ```\r \r 3. 为 AzureChinaCloud 帐户创建存储上下文：\r \r     ```powershell\r     $Ctx = New-AzureStorageContext -StorageAccountName $AccountName -StorageAccountKey $AccountKey> -Environment AzureChinaCloud\r     ```\r \r * [在中国服务中创建应用程序时的差异概述](/articles/others/developerdifferences)\r \r ## <a name=\"next-steps\"></a>后续步骤\r 在本指南中，已了解如何使用 Azure PowerShell 管理 Azure 存储。 下面是一些相关的文章和了解有关这些更多的资源。\r \r * [Azure 存储文档](/storage/)\r * [Azure 存储 PowerShell Cmdlet](https://docs.microsoft.com/powershell/module/azurerm.storage/#storage)\r * [Windows PowerShell 参考](https://msdn.microsoft.com/library/ms714469.aspx)\r \r [Getting started with Azure Storage and PowerShell in 5 minutes]: #getstart\r [Prerequisites for using Azure PowerShell with Azure Storage]: #pre\r [How to manage storage accounts in Azure]: #manageaccount\r [How to set a default Azure subscription]: #setdefsub\r [How to create a new Azure storage account]: #createaccount\r [How to set a default Azure storage account]: #defaultaccount\r [How to list all Azure storage accounts in a subscription]: #listaccounts\r [How to create an Azure storage context]: #createctx\r [How to manage Azure blobs and blob snapshots]: #manageblobs\r [How to create a container]: #container\r [How to upload a blob into a container]: #uploadblob\r [How to download blobs from a container]: #downblob\r [How to copy blobs from one storage container to another]: #copyblob\r [How to delete a blob]: #deleteblob\r [How to manage Azure blob snapshots]: #manageshots\r [How to create a blob snapshot]: #createshot\r [How to list snapshots of a blob]: #listshot\r [How to copy a snapshot of a blob]: #copyshot\r [How to manage Azure tables and table entities]: #managetables\r [How to create a table]: #createtable\r [How to retrieve a table]: #gettable\r [How to delete a table]: #remtable\r [How to manage table entities]: #mngentity\r [How to add table entities]: #addentity\r [How to query table entities]: #queryentity\r [How to delete table entities]: #deleteentity\r [How to manage Azure queues and queue messages]: #managequeues\r [How to create a queue]: #createqueue\r [How to retrieve a queue]: #getqueue\r [How to delete a queue]: #remqueue\r [How to manage queue messages]: #mngqueuemsg\r [How to insert a message into a queue]: #addqueuemsg\r [How to de-queue at the next message]: #dequeuemsg\r [How to manage Azure file shares and files]: #files\r [How to set and query storage analytics]: #stganalytics\r [How to manage Shared Access Signature (SAS) and Stored Access Policy]: #sas\r [How to use Azure Storage for Azure China]: #gov\r [Next Steps]: #next\r \r "}