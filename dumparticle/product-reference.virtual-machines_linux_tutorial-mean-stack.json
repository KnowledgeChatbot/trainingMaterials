{"Title":"在 Azure 中的 Linux VM 上创建 MongoDB、Express、AngularJS 和 Node.js (MEAN) 堆栈","Description":"了解如何在 Azure 中的 Linux VM 上创建 MongoDB、Express、AngularJS 和 Node.js (MEAN) 堆栈。","Content":"# <a name=\"create-a-mongodb-express-angularjs-and-nodejs-mean-stack-on-a-linux-vm-in-azure\"></a>在 Azure 中的 Linux VM 上创建 MongoDB、Express、AngularJS 和 Node.js (MEAN) 堆栈\r \r 本教程介绍如何在 Azure 中的 Linux VM 上实现 MongoDB、Express、AngularJS 和 Node.js (MEAN) 堆栈。 通过创建的 MEAN 堆栈，可以在数据库中添加、删除和列出书籍。 你将学习如何执行以下操作：\r \r > [!div class=\"checklist\"]\r > * 创建 Linux VM\r > * 安装 Node.js\r > * 安装 MongoDB 并设置服务器\r > * 安装 Express 并设置服务器的路由\r > * 使用 AngularJS 访问路由\r > * 运行应用程序\r \r [!INCLUDE [azure-cli-2-azurechinacloud-environment-parameter](../../../includes/azure-cli-2-azurechinacloud-environment-parameter.md)]\r \r 如果选择在本地安装并使用 CLI，本教程要求运行 Azure CLI 2.0.4 或更高版本。 运行 `az --version` 即可查找版本。 如果需要进行安装或升级，请参阅[安装 Azure CLI 2.0](https://docs.azure.cn/zh-cn/cli/install-azure-cli?view=azure-cli-latest)。\r \r ## <a name=\"create-a-linux-vm\"></a>创建 Linux VM\r \r 使用 [az group create](https://docs.azure.cn/zh-cn/cli/group?view=azure-cli-latest#az_group_create) 命令创建资源组，并使用 [az vm create](https://docs.azure.cn/zh-cn/cli/vm?view=azure-cli-latest#az_vm_create) 命令创建 Linux VM。 Azure 资源组是在其中部署和管理 Azure 资源的逻辑容器。\r \r 以下示例使用 Azure CLI 在“中国北部”位置创建名为 *myResourceGroupMEAN* 的资源组。 将会创建一个包含 SSH 密钥（如果默认密钥位置不存在这些密钥）的、名为 *myVM* 的 VM。 若要使用一组特定的密钥，请使用 --ssh-key-value 选项。\r \r ```azurecli\r az group create --name myResourceGroupMEAN --location \"China North\"\r az vm create \\\r     --resource-group myResourceGroupMEAN \\\r     --name myVM \\\r     --image UbuntuLTS \\\r     --admin-username azureuser \\\r     --admin-password 'Azure12345678!' \\\r     --generate-ssh-keys\r az vm open-port --port 3300 --resource-group myResourceGroupMEAN --name myVM\r ```\r \r 创建 VM 后，Azure CLI 显示类似于以下示例的信息。 \r \r ```azurecli\r {\r   \"fqdns\": \"\",\r   \"id\": \"/subscriptions/{subscription-id}/resourceGroups/myResourceGroupMEAN/providers/Microsoft.Compute/virtualMachines/myVM\",\r   \"location\": \"China North\",\r   \"macAddress\": \"00-0D-3A-23-9A-49\",\r   \"powerState\": \"VM running\",\r   \"privateIpAddress\": \"10.0.0.4\",\r   \"publicIpAddress\": \"13.72.77.9\",\r   \"resourceGroup\": \"myResourceGroupMEAN\"\r }\r ```\r 记下 `publicIpAddress`。 此地址用于访问 VM。\r \r 使用以下命令来与 VM 建立 SSH 会话。 请确保使用正确的公共 IP 地址。 在上例中，我们的 IP 地址为 13.72.77.9。\r \r ```bash\r ssh azureuser@13.72.77.9\r ```\r \r ## <a name=\"install-nodejs\"></a>安装 Node.js\r \r [Node.js](https://nodejs.org/en/) 是构建在 Chrome V8 JavaScript 引擎基础之上的 JavaScript 运行时。 本教程使用 Node.js 来设置 Express 路由和 AngularJS 控制器。\r \r 在 VM 上，使用通过 SSH 打开的 bash shell 安装 Node.js。\r \r ```bash\r sudo apt-get install -y nodejs\r ```\r \r ## <a name=\"install-mongodb-and-set-up-the-server\"></a>安装 MongoDB 并设置服务器\r [MongoDB](http://www.mongodb.com) 将数据存储在灵活的、类似于 JSON 的文档中。 数据库中的字段根据文档的不同而异，数据结构随时可发生变化。 针对示例应用程序，我们要将包含书名、ISBN 编号、作者和页数的书籍记录添加到 MongoDB。 \r \r 1. 在 VM 上，使用通过 SSH 打开的 bash shell 设置 MongoDB 密钥。\r \r     ```bash\r     sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6\r     echo \"deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list\r     ```\r \r 2. 使用密钥更新包管理器。\r \r     ```bash\r     sudo apt-get update\r     ```\r \r 3. 安装 MongoDB。\r \r     ```bash\r     sudo apt-get install -y mongodb\r     ```\r \r 4. 启动服务器。\r \r     ```bash\r     sudo service mongodb start\r     ```\r \r 5. 还需要安装 [body-parser](https://www.npmjs.com/package/body-parser-json) 包，以帮助我们处理在请求中传递给服务器的 JSON。\r \r     安装 npm 包管理器。\r \r     ```bash\r     sudo apt-get install npm\r     ```\r \r     安装正文分析器包。\r \r     ```bash\r     sudo npm install body-parser\r     ```\r \r 6. 创建名为 *Books* 的文件夹，并将包含 Web 服务器配置的、名为 *server.js* 的文件添加到该文件夹。\r \r     ```node.js\r     var express = require('express');\r     var bodyParser = require('body-parser');\r     var app = express();\r     app.use(express.static(__dirname + '/public'));\r     app.use(bodyParser.json());\r     require('./apps/routes')(app);\r     app.set('port', 3300);\r     app.listen(app.get('port'), function() {\r         console.log('Server up: http://localhost:' + app.get('port'));\r     });\r     ```\r \r ## <a name=\"install-express-and-set-up-routes-to-the-server\"></a>安装 Express 并设置服务器的路由\r \r [Express](https://expressjs.com) 是一个微型的灵活 Node.js Web 应用程序框架，为 Web 和移动应用程序提供功能。 本教程使用 Express 将书籍信息传入和传出 MongoDB 数据库。 [Mongoose](http://mongoosejs.com) 提供简洁的基于架构的解决方案来为应用程序数据建模。 本教程使用 Mongoose 来为数据库提供书籍架构。\r \r 1. 安装 Express 和 Mongoose。\r \r     ```bash\r     sudo npm install express mongoose\r     ```\r \r 2. 在 *Books* 文件夹中，创建名为 *apps* 的文件夹，并添加包含所定义的 Express 路由的、名为 *routes.js* 的文件。\r \r     ```node.js\r     var Book = require('./models/book');\r     module.exports = function(app) {\r       app.get('/book', function(req, res) {\r         Book.find({}, function(err, result) {\r           if ( err ) throw err;\r           res.json(result);\r         });\r       }); \r       app.post('/book', function(req, res) {\r         var book = new Book( {\r           name:req.body.name,\r           isbn:req.body.isbn,\r           author:req.body.author,\r           pages:req.body.pages\r         });\r         book.save(function(err, result) {\r           if ( err ) throw err;\r           res.json( {\r             message:\"Successfully added book\",\r             book:result\r           });\r         });\r       });\r       app.delete(\"/book/:isbn\", function(req, res) {\r         Book.findOneAndRemove(req.query, function(err, result) {\r           if ( err ) throw err;\r           res.json( {\r             message: \"Successfully deleted the book\",\r             book: result\r           });\r         });\r       });\r       var path = require('path');\r       app.get('*', function(req, res) {\r         res.sendfile(path.join(__dirname + '/public', 'index.html'));\r       });\r     };\r     ```\r \r 3. 在 *apps* 文件夹中，创建名为 *models* 的文件夹，并添加包含所定义的书籍模型配置的、名为 *book.js* 的文件。  \r \r     ```node.js\r     var mongoose = require('mongoose');\r     var dbHost = 'mongodb://localhost:27017/test';\r     mongoose.connect(dbHost);\r     mongoose.connection;\r     mongoose.set('debug', true);\r     var bookSchema = mongoose.Schema( {\r       name: String,\r       isbn: {type: String, index: true},\r       author: String,\r       pages: Number\r     });\r     var Book = mongoose.model('Book', bookSchema);\r     module.exports = mongoose.model('Book', bookSchema); \r     ```\r \r ## <a name=\"access-the-routes-with-angularjs\"></a>使用 AngularJS 访问路由\r \r [AngularJS](https://angularjs.org) 提供一个 Web 框架用于在 Web 应用程序中创建动态视图。 本教程使用 AngularJS 将网页与 Express 相连接，并针对书籍数据库执行操作。\r \r 1. 将目录切换回到 *Books* (`cd ../..`)，然后创建名为 *public* 的文件夹，并添加包含所定义的控制器配置的、名为 *script.js* 的文件。\r \r     ```node.js\r     var app = angular.module('myApp', []);\r     app.controller('myCtrl', function($scope, $http) {\r       $http( {\r         method: 'GET',\r         url: '/book'\r       }).then(function successCallback(response) {\r         $scope.books = response.data;\r       }, function errorCallback(response) {\r         console.log('Error: ' + response);\r       });\r       $scope.del_book = function(book) {\r         $http( {\r           method: 'DELETE',\r           url: '/book/:isbn',\r           params: {'isbn': book.isbn}\r         }).then(function successCallback(response) {\r           console.log(response);\r         }, function errorCallback(response) {\r           console.log('Error: ' + response);\r         });\r       };\r       $scope.add_book = function() {\r         var body = '{ \"name\": \"' + $scope.Name + \r         '\", \"isbn\": \"' + $scope.Isbn +\r         '\", \"author\": \"' + $scope.Author + \r         '\", \"pages\": \"' + $scope.Pages + '\" }';\r         $http({\r           method: 'POST',\r           url: '/book',\r           data: body\r         }).then(function successCallback(response) {\r           console.log(response);\r         }, function errorCallback(response) {\r           console.log('Error: ' + response);\r         });\r       };\r     });\r     ```\r \r 2. 在 *public* 文件夹中，创建包含所定义的网页的、名为 *index.html* 的文件。\r \r     ```html\r     <!doctype html>\r     <html ng-app=\"myApp\" ng-controller=\"myCtrl\">\r       <head>\r         <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js\"></script>\r         <script src=\"script.js\"></script>\r       </head>\r       <body>\r         <div>\r           <table>\r             <tr>\r               <td>Name:</td> \r               <td><input type=\"text\" ng-model=\"Name\"></td>\r             </tr>\r             <tr>\r               <td>Isbn:</td>\r               <td><input type=\"text\" ng-model=\"Isbn\"></td>\r             </tr>\r             <tr>\r               <td>Author:</td> \r               <td><input type=\"text\" ng-model=\"Author\"></td>\r             </tr>\r             <tr>\r               <td>Pages:</td>\r               <td><input type=\"number\" ng-model=\"Pages\"></td>\r             </tr>\r           </table>\r           <button ng-click=\"add_book()\">Add</button>\r         </div>\r         <hr>\r         <div>\r           <table>\r             <tr>\r               <th>Name</th>\r               <th>Isbn</th>\r               <th>Author</th>\r               <th>Pages</th>\r             </tr>\r             <tr ng-repeat=\"book in books\">\r               <td><input type=\"button\" value=\"Delete\" data-ng-click=\"del_book(book)\"></td>\r               <td>{{book.name}}</td>\r               <td>{{book.isbn}}</td>\r               <td>{{book.author}}</td>\r               <td>{{book.pages}}</td>\r             </tr>\r           </table>\r         </div>\r       </body>\r     </html>\r     ```\r \r ##  <a name=\"run-the-application\"></a>运行应用程序\r \r 1. 将目录切换回到 *Books* (`cd ..`)，并通过运行以下命令启动服务器：\r \r     ```bash\r     nodejs server.js\r     ```\r \r 2. 打开 Web 浏览器并导航到针对 VM 记录的地址。 例如 *http://13.72.77.9:3300*。 应显示以下页面所示的内容：\r \r     ![书籍记录](media/tutorial-mean/meanstack-init.png)\r \r 3. 在文本框中输入数据并单击“添加”。 例如：\r \r     ![添加书籍记录](media/tutorial-mean/meanstack-add.png)\r \r 4. 刷新页面后，应会看到以下页面所示的内容：\r \r     ![列出书籍记录](media/tutorial-mean/meanstack-list.png)\r \r 5. 可以单击“删除”并从数据库中删除书籍记录。\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 本教程已创建一个可在 Linux VM 上使用 MEAN 堆栈跟踪书籍记录的 Web 应用程序。 你已了解如何：\r \r > [!div class=\"checklist\"]\r > * 创建 Linux VM\r > * 安装 Node.js\r > * 安装 MongoDB 并设置服务器\r > * 安装 Express 并设置服务器的路由\r > * 使用 AngularJS 访问路由\r > * 运行应用程序\r \r 转到下一教程，了解如何使用 SSL 证书保护 Web 服务器。\r \r > [!div class=\"nextstepaction\"]\r > [使用 SSL 保护 Web 服务器](tutorial-secure-web-server.md)\r \r <!--Update_Description: update meta properties， wording update, update link-->\r "}