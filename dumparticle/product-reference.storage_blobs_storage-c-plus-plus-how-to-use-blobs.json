{"Title":"如何通过 C++ 使用 Blob 存储（对象存储）","Description":"使用 Azure Blob 存储（对象存储）将非结构化数据存储在云中。","Content":"# <a name=\"how-to-use-blob-storage-from-c\"></a>如何通过 C++ 使用 Blob 存储\r [!INCLUDE [storage-selector-blob-include](../../../includes/storage-selector-blob-include.md)]\r \r [!INCLUDE [storage-try-azure-tools-blobs](../../../includes/storage-try-azure-tools-blobs.md)]\r \r ## <a name=\"overview\"></a>概述\r Azure Blob 存储是一种将非结构化数据作为对象/Blob 存储在云中的服务。 Blob 存储可以存储任何类型的文本或二进制数据，例如文档、媒体文件或应用程序安装程序。 Blob 存储也称为对象存储。\r \r 本指南将演示如何使用 Azure Blob 存储服务执行常见方案。 示例采用 C++ 编写，并使用了[适用于 C++ 的 Azure 存储客户端库](http://github.com/Azure/azure-storage-cpp/blob/master/README.md)。 涉及的任务包括上传、列出、下载和删除 Blob。  \r \r > [!NOTE]\r > 本指南主要面向适用于 C++ 的 Azure 存储客户端库 1.0.0 版及更高版本。 推荐版本：存储客户端库 2.2.0（可通过 [NuGet](http://www.nuget.org/packages/wastorage) 或 [GitHub](https://github.com/Azure/azure-storage-cpp) 获得）。\r > \r > \r \r [!INCLUDE [storage-blob-concepts-include](../../../includes/storage-blob-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../../includes/storage-create-account-include.md)]\r \r ## <a name=\"create-a-c-application\"></a>创建 C++ 应用程序\r 本指南会使用存储功能，这些功能可以在 C++ 应用程序中运行。  \r \r 为此，需要安装适用于 C++ 的 Azure 存储客户端库，并在 Azure 订阅中创建 Azure 存储帐户。   \r \r 若要安装适用于 C++ 的 Azure 存储客户端库，可使用以下方法：\r \r * **Linux：** 按照[适用于 C++ 的 Azure 存储客户端库自述文件](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)页中提供的说明操作。  \r * **Windows：** 在 Visual Studio 中，单击“工具”>“NuGet 包管理器”>“程序包管理器控制台”。 在 [NuGet 包管理器控制台](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)中，键入以下命令，并按 **ENTER**。  \r   \r      Install-Package wastorage\r \r ## <a name=\"configure-your-application-to-access-blob-storage\"></a>配置应用程序以访问 Blob 存储\r 将以下 include 语句添加到 C++ 文件的顶部，要在此使用 Azure 存储 API 来访问 blob：  \r \r ```cpp\r #include <was/storage_account.h>\r #include <was/blob.h>\r ```\r \r ## <a name=\"setup-an-azure-storage-connection-string\"></a>设置 Azure 存储连接字符串\r Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。 在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 AccountName 和 AccountKey 值使用 [Azure 门户](https://portal.azure.cn)中列出的存储帐户的名称和存储帐户的存储访问密钥。 有关存储帐户和访问密钥的信息，请参阅[关于 Azure 存储帐户](../common/storage-create-storage-account.md?toc=%2fstorage%2fblobs%2ftoc.json)。 此示例演示如何声明一个静态字段以保存连接字符串：  \r \r ```cpp\r // Define the connection-string with your values.\r const utility::string_t storage_connection_string(U(\"DefaultEndpointsProtocol=https;AccountName=your_storage_account;AccountKey=your_storage_account_key;EndpointSuffix=core.chinacloudapi.cn\"));\r ```\r \r 若要在本地 Windows 计算机中测试应用程序，可以使用随 [Azure SDK](https://www.azure.cn/downloads/) 一起安装的 Azure [存储模拟器](../storage-use-emulator.md)。 存储模拟器是一种用于模拟本地开发计算机上 Azure 中可用的 Blob、队列和表服务的实用程序。 以下示例演示如何声明一个静态字段以将连接字符串保存到本地存储模拟器：\r \r ```cpp\r // Define the connection-string with Azure Storage Emulator.\r const utility::string_t storage_connection_string(U(\"UseDevelopmentStorage=true;\"));  \r ```\r \r 若要启动 Azure 存储模拟器，请选择“开始”按钮或按 Windows 键。 开始键入“Azure 存储模拟器”，并从应用程序列表中选择“Azure 存储模拟器”。  \r \r 下面的示例假定使用了这两个方法之一来获取存储连接字符串。  \r \r ## <a name=\"retrieve-your-connection-string\"></a>检索连接字符串\r 可使用 **cloud_storage_account** 类来表示存储帐户信息。 若要从存储连接字符串中检索存储帐户信息，可以使用 **parse** 方法。  \r \r ```cpp\r // Retrieve storage account from connection string.\r azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\r ```\r \r 其次，获取对 cloud_blob_client 类的引用，因为它允许用户检索表示存储在 Blob 存储服务中的容器和 Blob 的对象。 以下代码使用我们在上面检索到的存储帐户对象创建 cloud_blob_client 对象：  \r \r ```cpp\r // Create the blob client.\r azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();  \r ```\r \r ## <a name=\"how-to-create-a-container\"></a>如何：创建容器\r [!INCLUDE [storage-container-naming-rules-include](../../../includes/storage-container-naming-rules-include.md)]\r \r 此示例演示如何创建一个容器（如果该容器不存在）：  \r \r ```cpp\r try\r {\r     // Retrieve storage account from connection string.\r     azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\r \r     // Create the blob client.\r     azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\r \r     // Retrieve a reference to a container.\r     azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\r \r     // Create the container if it doesn't already exist.\r     container.create_if_not_exists();\r }\r catch (const std::exception& e)\r {\r     std::wcout << U(\"Error: \") << e.what() << std::endl;\r }  \r ```\r \r 默认情况下，新容器是专用容器，因此，必须指定存储访问密钥才能从该容器下载 Blob。 如果要使容器中的文件 (Blob) 对任何人都可用，则可以使用以下代码将容器设置为公用：  \r \r ```cpp\r // Make the blob container publicly accessible.\r azure::storage::blob_container_permissions permissions;\r permissions.set_public_access(azure::storage::blob_container_public_access_type::blob);\r container.upload_permissions(permissions);  \r ```\r \r Internet 中的所有人都可以查看公共容器中的 Blob，但是，仅在具有相应的访问密钥时，才能修改或删除它们。  \r \r ## <a name=\"how-to-upload-a-blob-into-a-container\"></a>如何：将 Blob 上传到容器\r Azure Blob 存储支持块 Blob 和页 Blob。 大多数情况下，推荐使用块 Blob。  \r \r 要将文件上传到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。 获取 Blob 引用后，可以通过调用 upload_from_stream 方法将任何数据流上传到其中。 如果之前不存在 Blob，此操作会创建一个；如果存在 Blob，此操作将覆盖它。 下面的示例演示了如何将 Blob 上传到容器中，并假定已创建容器。  \r \r ```cpp\r // Retrieve storage account from connection string.\r azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\r \r // Create the blob client.\r azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\r \r // Retrieve a reference to a previously created container.\r azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\r \r // Retrieve reference to a blob named \"my-blob-1\".\r azure::storage::cloud_block_blob blockBlob = container.get_block_blob_reference(U(\"my-blob-1\"));\r \r // Create or overwrite the \"my-blob-1\" blob with contents from a local file.\r concurrency::streams::istream input_stream = concurrency::streams::file_stream<uint8_t>::open_istream(U(\"DataFile.txt\")).get();\r blockBlob.upload_from_stream(input_stream);\r input_stream.close().wait();\r \r // Create or overwrite the \"my-blob-2\" and \"my-blob-3\" blobs with contents from text.\r // Retrieve a reference to a blob named \"my-blob-2\".\r azure::storage::cloud_block_blob blob2 = container.get_block_blob_reference(U(\"my-blob-2\"));\r blob2.upload_text(U(\"more text\"));\r \r // Retrieve a reference to a blob named \"my-blob-3\".\r azure::storage::cloud_block_blob blob3 = container.get_block_blob_reference(U(\"my-directory/my-sub-directory/my-blob-3\"));\r blob3.upload_text(U(\"other text\"));  \r ```\r \r 还可以使用 upload_from_file 方法将文件上传到块 Blob。\r \r ## <a name=\"how-to-list-the-blobs-in-a-container\"></a>如何：列出容器中的 Blob\r 若要列出容器中的 Blob，首先需要获取容器引用。 然后，可以使用容器的 list_blobs 方法来检索其中的 Blob 和/或目录。 若要针对一个返回的 list_blob_item 访问其丰富的属性和方法，必须调用 list_blob_item.as_blob 方法以获取一个 cloud_blob 对象，或调用 list_blob.as_directory 方法以获取 cloud_blob_directory 对象。 以下代码演示如何检索和输出 **my-sample-container** 容器中每一项的 URI：\r \r ```cpp\r // Retrieve storage account from connection string.\r azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\r \r // Create the blob client.\r azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\r \r // Retrieve a reference to a previously created container.\r azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\r \r // Output URI of each item.\r azure::storage::list_blob_item_iterator end_of_results;\r for (auto it = container.list_blobs(); it != end_of_results; ++it)\r {\r     if (it->is_blob())\r     {\r         std::wcout << U(\"Blob: \") << it->as_blob().uri().primary_uri().to_string() << std::endl;\r     }\r     else\r     {\r         std::wcout << U(\"Directory: \") << it->as_directory().uri().primary_uri().to_string() << std::endl;\r     }\r }\r ```\r \r 有关列出操作的更多详细信息，请参阅[使用 C++ 列出 Azure 存储资源](../storage-c-plus-plus-enumeration.md)。\r \r ## <a name=\"how-to-download-blobs\"></a>如何：下载 Blob\r 如果要下载 Blob，请首先检索 Blob 引用，然后调用 download_to_stream 方法。 以下示例使用 download_to_stream 方法将 Blob 内容传输到一个流对象，用户即可将该对象保存到本地文件。  \r \r ```cpp\r // Retrieve storage account from connection string.\r azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\r \r // Create the blob client.\r azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\r \r // Retrieve a reference to a previously created container.\r azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\r \r // Retrieve reference to a blob named \"my-blob-1\".\r azure::storage::cloud_block_blob blockBlob = container.get_block_blob_reference(U(\"my-blob-1\"));\r \r // Save blob contents to a file.\r concurrency::streams::container_buffer<std::vector<uint8_t>> buffer;\r concurrency::streams::ostream output_stream(buffer);\r blockBlob.download_to_stream(output_stream);\r \r std::ofstream outfile(\"DownloadBlobFile.txt\", std::ofstream::binary);\r std::vector<unsigned char>& data = buffer.collection();\r \r outfile.write((char *)&data[0], buffer.size());\r outfile.close();  \r ```\r \r 也可以使用 download_to_file 方法将 Blob 的内容下载到文件。\r 此外，还可以使用 download_text 方法以文本字符串形式下载 Blob 的内容。  \r \r ```cpp\r // Retrieve storage account from connection string.\r azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\r \r // Create the blob client.\r azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\r \r // Retrieve a reference to a previously created container.\r azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\r \r // Retrieve reference to a blob named \"my-blob-2\".\r azure::storage::cloud_block_blob text_blob = container.get_block_blob_reference(U(\"my-blob-2\"));\r \r // Download the contents of a blog as a text string.\r utility::string_t text = text_blob.download_text();\r ```\r \r ## <a name=\"how-to-delete-blobs\"></a>如何：删除 Blob\r 如果要删除 Blob，请先获取 Blob 引用，然后对其调用 delete_blob 方法。  \r \r ```cpp\r // Retrieve storage account from connection string.\r azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\r \r // Create the blob client.\r azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\r \r // Retrieve a reference to a previously created container.\r azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\r \r // Retrieve reference to a blob named \"my-blob-1\".\r azure::storage::cloud_block_blob blockBlob = container.get_block_blob_reference(U(\"my-blob-1\"));\r \r // Delete the blob.\r blockBlob.delete_blob();\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 既然已了解 blob 存储的基础知识，请打开以下链接了解有关 Azure 存储的详细信息。  \r \r * [如何通过 C++ 使用队列存储](../storage-c-plus-plus-how-to-use-queues.md)\r * [如何通过 C++ 使用表存储](../../cosmos-db/table-storage-how-to-use-c-plus.md)\r * [使用 C++ 列出 Azure 存储资源](../storage-c-plus-plus-enumeration.md)\r * [适用于 C++ 的存储空间客户端库参考](http://azure.github.io/azure-storage-cpp)\r * [Azure 存储文档](/storage/)\r * [使用 AzCopy 命令行实用程序传输数据](../storage-use-azcopy.md)\r \r <!--Update_Description: update link -->"}