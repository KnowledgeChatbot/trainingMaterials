{"Title":"如何使用 Media Encoder Standard 通过 .NET 来生成缩略图","Description":"本主题介绍如何使用 .NET 通过 Media Encoder Standard 同时对资产进行编码和生成缩略图。","Content":"# <a name=\"how-to-generate-thumbnails-using-media-encoder-standard-with-net\"></a>如何使用 Media Encoder Standard 通过 .NET 来生成缩略图\r \r 可以使用 Media Encoder Standard 以 [JPEG](https://en.wikipedia.org/wiki/JPEG)、[PNG](https://en.wikipedia.org/wiki/Portable_Network_Graphics) 或 [BMP](https://en.wikipedia.org/wiki/BMP_file_format) 图像文件格式从输入视频生成一个或多个缩略图。 可以提交仅生成图像的任务，或者合并缩略图的生成与编码功能。 本主题针对此类方案提供一些示例 XML 和 JSON 缩略图预设。 本主题的末尾提供了一段[示例代码](#code_sample)，演示如何使用媒体服务 .NET SDK 来完成编码任务。\r \r 有关示例预设中使用的元素的更多详细信息，请查看 [Media Encoder Standard 架构](media-services-mes-schema.md)。\r \r 请务必仔细阅读 [注意事项](media-services-dotnet-generate-thumbnail-with-mes.md#considerations) 部分。\r     \r ## <a name=\"example-of-a-single-png-file-preset\"></a>“单个 PNG 文件”预设示例\r \r 使用以下 JSON 和 XML 预设可以基于输入视频的前几秒内容生成单个输出 PNG 文件，其中的编码器会尽力尝试查找“相关的”帧。 请注意，输出图像尺寸已设置为 100%，这意味着，这些尺寸将与输入视频的尺寸匹配。 另请注意需要如何指定“Outputs”中“Format”设置，以匹配“Codecs”节中“PngLayers”的用法。 \r \r ### <a name=\"json-preset\"></a>JSON 预设\r \r     {\r       \"Version\": 1.0,\r       \"Codecs\": [\r         {\r           \"PngLayers\": [\r             {\r               \"Type\": \"PngLayer\",\r               \"Width\": \"100%\",\r               \"Height\": \"100%\"\r             }\r           ],\r           \"Start\": \"{Best}\",\r           \"Type\": \"PngImage\"\r         }\r       ],\r       \"Outputs\": [\r         {\r           \"FileName\": \"{Basename}_{Index}{Extension}\",\r           \"Format\": {\r             \"Type\": \"PngFormat\"\r           }\r         }\r       ]\r     }\r \r ### <a name=\"xml-preset\"></a>XML 预设\r \r     <?xml version=\"1.0\" encoding=\"utf-16\"?>\r     <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r       <Encoding>\r         <PngImage Start=\"{Best}\">\r           <PngLayers>\r             <PngLayer>\r               <Width>100%</Width>\r               <Height>100%</Height>\r             </PngLayer>\r           </PngLayers>\r         </PngImage>\r       </Encoding>\r       <Outputs>\r         <Output FileName=\"{Basename}_{Index}{Extension}\">\r           <PngFormat />\r         </Output>\r       </Outputs>\r     </Preset>\r \r ## <a name=\"example-of-a-series-of-jpeg-images-preset\"></a>“一系列 JPEG 图像”预设的示例\r \r 可以使用以下 JSON 和 XML 预设在输入时间线的 5%、15% ... 95% 时间戳处生成一组 10 幅图像，其中的图像大小指定为输入视频的四分之一。\r \r ### <a name=\"json-preset\"></a>JSON 预设\r \r     {\r       \"Version\": 1.0,\r       \"Codecs\": [\r         {\r           \"JpgLayers\": [\r             {\r               \"Quality\": 90,\r               \"Type\": \"JpgLayer\",\r               \"Width\": \"25%\",\r               \"Height\": \"25%\"\r             }\r           ],\r           \"Start\": \"5%\",\r           \"Step\": \"10%\",\r           \"Range\": \"96%\",\r           \"Type\": \"JpgImage\"\r         }\r       ],\r       \"Outputs\": [\r         {\r           \"FileName\": \"{Basename}_{Index}{Extension}\",\r           \"Format\": {\r             \"Type\": \"JpgFormat\"\r           }\r         }\r       ]\r     }\r \r ### <a name=\"xml-preset\"></a>XML 预设\r \r     <?xml version=\"1.0\" encoding=\"utf-16\"?>\r     <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r       <Encoding>\r         <JpgImage Start=\"5%\" Step=\"10%\" Range=\"96%\">\r           <JpgLayers>\r             <JpgLayer>\r               <Width>25%</Width>\r               <Height>25%</Height>\r               <Quality>90</Quality>\r             </JpgLayer>\r           </JpgLayers>\r         </JpgImage>\r       </Encoding>\r       <Outputs>\r         <Output FileName=\"{Basename}_{Index}{Extension}\">\r           <JpgFormat />\r         </Output>\r       </Outputs>\r     </Preset>\r \r ## <a name=\"example-of-a-one-image-at-a-specific-timestamp-preset\"></a>“在特定时间戳处生成一个图像”预设示例\r \r 可以使用以下 JSON 和 XML 预设在输入视频的 30 秒标记处生成单个 JPEG 图像。 此预设预期输入视频的持续时间超过 30 秒（否则作业会失败）。\r \r ### <a name=\"json-preset\"></a>JSON 预设\r \r     {\r       \"Version\": 1.0,\r       \"Codecs\": [\r         {\r           \"JpgLayers\": [\r             {\r               \"Quality\": 90,\r               \"Type\": \"JpgLayer\",\r               \"Width\": \"25%\",\r               \"Height\": \"25%\"\r             }\r           ],\r           \"Start\": \"00:00:30\",\r           \"Step\": \"1\",\r           \"Range\": \"1\",\r           \"Type\": \"JpgImage\"\r         }\r       ],\r       \"Outputs\": [\r         {\r           \"FileName\": \"{Basename}_{Index}{Extension}\",\r           \"Format\": {\r             \"Type\": \"JpgFormat\"\r           }\r         }\r       ]\r     }\r \r ### <a name=\"xml-preset\"></a>XML 预设\r \r     <?xml version=\"1.0\" encoding=\"utf-16\"?>\r     <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r       <Encoding>\r         <JpgImage Start=\"00:00:30\" Step=\"00:00:01\" Range=\"00:00:01\">\r           <JpgLayers>\r             <JpgLayer>\r               <Width>25%</Width>\r               <Height>25%</Height>\r               <Quality>90</Quality>\r             </JpgLayer>\r           </JpgLayers>\r         </JpgImage>\r       </Encoding>\r       <Outputs>\r         <Output FileName=\"{Basename}_{Index}{Extension}\">\r           <JpgFormat />\r         </Output>\r       </Outputs>\r     </Preset>\r     \r ## <a name=\"example-of-a-thumbnails-at-different-resolutions-preset\"></a>“不同分辨率的缩略图”预设示例\r \r 可使用以下预设在同一个任务中的不同解决方案下生成缩略图。 在该示例中，当输入时间线位于 5%、15%、…、95% 时，编码器将在两个时点各生成一个图像 - 一个是输入视频分辨率的 100% 处，一个是 50% 处。\r \r 请注意 FileName 中 {Resolution} 宏的使用；它指示在生成输出图像的文件名时，编码器要使用在预设的“编码”部分中所指定的宽度和高度。 这还能够帮助轻松区分不同图像\r \r ### <a name=\"json-preset\"></a>JSON 预设\r \r     {\r       \"Version\": 1.0,\r       \"Codecs\": [\r         {\r           \"JpgLayers\": [\r         {\r           \"Quality\": 90,\r           \"Type\": \"JpgLayer\",\r           \"Width\": \"100%\",\r           \"Height\": \"100%\"\r         },\r         {\r           \"Quality\": 90,\r           \"Type\": \"JpgLayer\",\r           \"Width\": \"50%\",\r           \"Height\": \"50%\"\r         }\r \r           ],\r           \"Start\": \"5%\",\r           \"Step\": \"10%\",\r           \"Range\": \"96%\",\r           \"Type\": \"JpgImage\"\r         }\r       ],\r       \"Outputs\": [\r         {\r           \"FileName\": \"{Basename}_{Resolution}_{Index}{Extension}\",\r           \"Format\": {\r         \"Type\": \"JpgFormat\"\r           }\r         }\r       ]\r     }\r \r ### <a name=\"xml-preset\"></a>XML 预设\r \r     <?xml version=\"1.0\" encoding=\"utf-8\"?>\r     <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r     <Encoding>\r     <JpgImage Start=\"5%\" Step=\"10%\" Range=\"96%\"><JpgImage Start=\"00:00:01\" Step=\"00:00:15\">\r       <JpgLayers>\r        <JpgLayer>\r         <Width>100%</Width>\r         <Height>100%</Height>\r         <Quality>90</Quality>\r        </JpgLayer>\r        <JpgLayer>\r         <Width>50%</Width>\r         <Height>50%</Height>\r         <Quality>90</Quality>\r        </JpgLayer>\r       </JpgLayers>\r     </JpgImage>\r     </Encoding>\r     <Outputs>\r       <Output FileName=\"{Basename}_{Resolution}_{Index}{Extension}\">\r         <JpgFormat/>\r       </Output>\r     </Outputs>\r     </Preset>\r     \r ## <a name=\"example-of-generating-a-thumbnail-while-encoding\"></a>在编码时生成缩略图的示例\r \r 上述所有示例都在讨论如何提交仅生成图像的编码任务，但还可以将视频/音频编码与缩略图生成结合起来。 以下的 JSON 和 XML 预设指示 Media Encoder Standard 在编码过程中生成一个缩略图。\r \r ### <a id=\"json\"></a>JSON 预设\r 有关架构的信息，请参阅[此](media-services-mes-schema.md)主题。\r \r     {\r       \"Version\": 1.0,\r       \"Codecs\": [\r         {\r           \"KeyFrameInterval\": \"00:00:02\",\r           \"SceneChangeDetection\": \"true\",\r           \"H264Layers\": [\r             {\r               \"Profile\": \"Auto\",\r               \"Level\": \"auto\",\r               \"Bitrate\": 4500,\r               \"MaxBitrate\": 4500,\r               \"BufferWindow\": \"00:00:05\",\r               \"Width\": 1280,\r               \"Height\": 720,\r               \"ReferenceFrames\": 3,\r               \"EntropyMode\": \"Cabac\",\r               \"AdaptiveBFrame\": true,\r               \"Type\": \"H264Layer\",\r               \"FrameRate\": \"0/1\"\r     \r             }\r           ],\r           \"Type\": \"H264Video\"\r         },\r         {\r           \"JpgLayers\": [\r             {\r               \"Quality\": 90,\r               \"Type\": \"JpgLayer\",\r               \"Width\": \"100%\",\r               \"Height\": \"100%\"\r             }\r           ],\r           \"Start\": \"{Best}\",\r           \"Type\": \"JpgImage\"\r         },\r         {\r           \"Channels\": 2,\r           \"SamplingRate\": 48000,\r           \"Bitrate\": 128,\r           \"Type\": \"AACAudio\"\r         }\r       ],\r       \"Outputs\": [\r         {\r           \"FileName\": \"{Basename}_{Index}{Extension}\",\r           \"Format\": {\r             \"Type\": \"JpgFormat\"\r           }\r         },\r         {\r           \"FileName\": \"{Basename}_{Resolution}_{VideoBitrate}.mp4\",\r           \"Format\": {\r             \"Type\": \"MP4Format\"\r           }\r         }\r       ]\r     }\r \r ### <a id=\"xml\"></a>XML 预设\r 有关架构的信息，请参阅[此](media-services-mes-schema.md)主题。\r     \r     <?xml version=\"1.0\" encoding=\"utf-16\"?>\r     <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r       <Encoding>\r         <H264Video>\r           <KeyFrameInterval>00:00:02</KeyFrameInterval>\r           <SceneChangeDetection>true</SceneChangeDetection>\r           <H264Layers>\r             <H264Layer>\r               <Bitrate>4500</Bitrate>\r               <Width>1280</Width>\r               <Height>720</Height>\r               <FrameRate>0/1</FrameRate>\r               <Profile>Auto</Profile>\r               <Level>auto</Level>\r               <BFrames>3</BFrames>\r               <ReferenceFrames>3</ReferenceFrames>\r               <Slices>0</Slices>\r               <AdaptiveBFrame>true</AdaptiveBFrame>\r               <EntropyMode>Cabac</EntropyMode>\r               <BufferWindow>00:00:05</BufferWindow>\r               <MaxBitrate>4500</MaxBitrate>\r             </H264Layer>\r           </H264Layers>\r         </H264Video>\r         <AACAudio>\r           <Profile>AACLC</Profile>\r           <Channels>2</Channels>\r           <SamplingRate>48000</SamplingRate>\r           <Bitrate>128</Bitrate>\r         </AACAudio>\r         <JpgImage Start=\"{Best}\">\r           <JpgLayers>\r             <JpgLayer>\r               <Width>100%</Width>\r               <Height>100%/Height>\r               <Quality>90</Quality>\r             </JpgLayer>\r           </JpgLayers>\r         </JpgImage>\r       </Encoding>\r       <Outputs>\r         <Output FileName=\"{Basename}_{Resolution}_{VideoBitrate}.mp4\">\r           <MP4Format />\r         </Output>\r         <Output FileName=\"{Basename}_{Index}{Extension}\">\r           <JpgFormat />\r         </Output>\r       </Outputs>\r     </Preset>   \r \r ## <a id=\"code_sample\"></a>编码视频并使用 .NET 生成缩略图\r \r 以下代码示例使用媒体服务 .NET SDK 执行下列任务：\r \r * 创建编码作业。\r * 获取对 Media Encoder Standard 编码器的引用。\r * 加载预设 [XML](media-services-dotnet-generate-thumbnail-with-mes.md#xml) 或 [JSON](media-services-dotnet-generate-thumbnail-with-mes.md#json)，包含有编码预设以及生成缩略图所需的信息。 可以在某一文件中保存此 [XML](media-services-dotnet-generate-thumbnail-with-mes.md#xml) 或 [JSON](media-services-dotnet-generate-thumbnail-with-mes.md#json)，并使用以下代码来加载该文件。\r \r     ```\r     // Load the XML (or JSON) from the local file.\r     string configuration = File.ReadAllText(fileName);  \r     ```\r * 将一个编码任务添加到该作业。 \r * 指定要编码的输入资产。\r * 创建要包含所编码资产的输出资产。\r * 添加事件处理程序以检查作业进度。\r * 提交作业。\r \r 有关如何设置开发环境的指导，请参阅[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)主题。\r \r     using System;\r     using System.Configuration;\r     using System.IO;\r     using System.Linq;\r     using Microsoft.WindowsAzure.MediaServices.Client;\r     using System.Threading;\r \r     namespace EncodeAndGenerateThumbnails\r     {\r         class Program\r         {\r             // Read values from the App.config file.\r             private static readonly string _AADTenantDomain = ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r             private static readonly string _RESTAPIEndpoint = ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r             private static CloudMediaContext _context = null;\r \r             private static readonly string _mediaFiles =\r                 Path.GetFullPath(@\"../..\\Media\");\r \r             private static readonly string _singleMP4File =\r                 Path.Combine(_mediaFiles, @\"BigBuckBunny.mp4\");\r \r             static void Main(string[] args)\r             {\r                 var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r                 var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r                 _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r                 // Get an uploaded asset.\r                 var asset = _context.Assets.FirstOrDefault();\r \r                 // Encode and generate the thumbnails.\r                 EncodeToAdaptiveBitrateMP4Set(asset);\r \r                 Console.ReadLine();\r             }\r \r             static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\r             {\r                 // Declare a new job.\r                 IJob job = _context.Jobs.Create(\"Media Encoder Standard Thumbnail Job\");\r                 // Get a media processor reference, and pass to it the name of the \r                 // processor to use for the specific task.\r                 IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\r \r                 // Load the XML (or JSON) from the local file.\r                 string configuration = File.ReadAllText(\"ThumbnailPreset_JSON.json\");\r \r                 // Create a task\r                 ITask task = job.Tasks.AddNew(\"Media Encoder Standard Thumbnail task\",\r                     processor,\r                     configuration,\r                     TaskOptions.None);\r \r                 // Specify the input asset to be encoded.\r                 task.InputAssets.Add(asset);\r                 // Add an output asset to contain the results of the job. \r                 // This output is specified as AssetCreationOptions.None, which \r                 // means the output asset is not encrypted. \r                 task.OutputAssets.AddNew(\"Output asset\",\r                     AssetCreationOptions.None);\r \r                 job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\r                 job.Submit();\r                 job.GetExecutionProgressTask(CancellationToken.None).Wait();\r \r                 return job.OutputMediaAssets[0];\r             }\r \r             private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\r             {\r                 Console.WriteLine(\"Job state changed event:\");\r                 Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r                 Console.WriteLine(\"  Current state: \" + e.CurrentState);\r                 switch (e.CurrentState)\r                 {\r                     case JobState.Finished:\r                         Console.WriteLine();\r                         Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\r                         break;\r                     case JobState.Canceling:\r                     case JobState.Queued:\r                     case JobState.Scheduled:\r                     case JobState.Processing:\r                         Console.WriteLine(\"Please wait...\\n\");\r                         break;\r                     case JobState.Canceled:\r                     case JobState.Error:\r \r                         // Cast sender as a job.\r                         IJob job = (IJob)sender;\r \r                         // Display or log error details as needed.\r                         break;\r                     default:\r                         break;\r                 }\r             }\r \r             private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r             {\r                 var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\r                 ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\r \r                 if (processor == null)\r                     throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\r \r                 return processor;\r             }\r         }\r     }\r \r \r ## <a name=\"considerations\"></a>注意事项\r \r 请注意以下事项：\r \r - 为 Start/Step/Range 使用的显式时间戳假设输入源的长度至少为 1 分钟。\r - Jpg/Png/BmpImage 元素包含 Start、Step 和 Range 字符串属性 – 这些属性解释如下：\r   - 帧数（如果为非负整数），例如： \"Start\": \"120\"，\r   - 相对于源持续时间（如果以 % 后缀表示），例如： \"Start\": \"15%\"，或者\r   - 时间戳（如果以 HH:MM:SS... 格式表示）。 例如 \"Start\" : \"00:01:00\"  \r     可以随意混搭使用表示法。  \r     此外，Start 还支持特殊的宏 {Best}，它会尝试判断第一个“有意义”的内容帧。注意：（Start 设置为 {Best} 时，将忽略 Step 与 Range）\r   - 默认值：Start:{Best}\r - 需要显式提供每个图像格式的输出格式：Jpg/Png/BmpFormat。 提供时，MES 会将 JpgVideo 与 JpgFormat 进行匹配，依此类推。 OutputFormat 引入了新的图像编解码器特定宏 {Index}，需要为图像输出格式提供该宏一次（且只需一次）。\r \r ## <a name=\"see-also\"></a>另请参阅\r [媒体服务编码概述](media-services-encode-asset.md)\r \r <!--Update_Description: preset configuration update-->"}