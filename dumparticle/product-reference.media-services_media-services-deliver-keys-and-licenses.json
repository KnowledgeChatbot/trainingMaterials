{"Title":"使用 Azure 媒体服务传送 DRM 许可证或 AES 密钥","Description":"本文介绍如何使用 Azure 媒体服务 (AMS) 来传送 PlayReady 许可证和 AES 密钥，但使用本地服务器完成余下的操作（编码、加密、流式传输）。","Content":"# <a name=\"use-azure-media-services-to-deliver-drm-licenses-or-aes-keys\"></a>使用 Azure 媒体服务传送 DRM 许可证或 AES 密钥\r Azure 媒体服务 (AMS) 可让你引入、编码、添加内容保护，以及流式传输内容（有关详细信息，请参阅[此文章](media-services-protect-with-drm.md)）。 但是，有些客户只想使用 AMS 来传送许可证和/或密钥，并使用他们的本地服务器来进行编码、加密和流式传输。 本文说明如何使用 AMS 来传送 PlayReady 许可证，但使用本地服务器完成余下的操作。 \r \r ## <a name=\"overview\"></a>概述\r 媒体服务提供传送 PlayReady DRM 许可证及 AES-128 密钥的服务。 媒体服务还提供用于配置所需权限和限制的 API，这样当用户播放 DRM 保护的内容时，DRM 运行时便会强制实施这些权限和限制。 当用户请求受保护的内容时，播放器应用程序将从 AMS 许可证服务请求许可证。 AMS 许可证服务将向播放器颁发许可证（如果播放器已获授权）。 PlayReady 许可证包含客户端播放器用来对内容进行解密和流式传输的解密密钥。\r \r 媒体服务支持通过多种方式对发出许可证或密钥请求的用户进行授权。 可以配置内容密钥的授权策略，该策略可以包含一种或多种限制：开放或令牌限制。 令牌限制策略必须附带由安全令牌服务 (STS) 颁发的令牌。 媒体服务支持采用简单 Web 令牌 (SWT) 格式和 JSON Web 令牌 (JWT) 格式的令牌。\r \r 下图显示了使用 AMS 传送 PlayReady 许可证，但使用本地服务器完成其余部分所要执行的主要步骤。\r \r ![使用 PlayReady 进行保护](./media/media-services-deliver-keys-and-licenses/media-services-diagram1.png)\r \r ## <a name=\"download-sample\"></a>下载示例\r 可以从 [此处](https://github.com/Azure/media-services-dotnet-deliver-drm-licenses)下载本文所述的示例。\r \r ## <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r \r 1. 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r 2. 将以下元素添加到 app.config 文件中定义的 **appSettings**：\r \r     <add key=\"Issuer\" value=\"http://testacs.com\"/> <add key=\"Audience\" value=\"urn:test\"/>\r \r ## <a name=\"net-code-example\"></a>.NET 代码示例\r 以下代码示例演示如何创建通用内容密钥，并获取 PlayReady 许可证获取 URL。 需要从 AMS 获取一下信息片段并配置本地服务器：内容密钥、 密钥 ID、 许可证获取 URL。 配置本地服务器后，可以从自己的流服务器进行流式传输。 由于加密的流指向 AMS 许可证服务器，播放器将从 AMS 请求许可证。 如果选择令牌身份验证，AMS 许可证服务器将验证通过 HTTPS 发送的令牌，然后（如果有效）将许可证传回给播放器。 （代码示例仅演示了如何创建通用内容密钥，并获取 PlayReady 许可证获取 URL。 如果想要传送 AES-128 密钥，则需要创建信封内容密钥，并获取密钥获取 URL，[此文章](media-services-protect-with-aes128.md)介绍了具体的操作）。\r \r     using System;\r     using System.Collections.Generic;\r     using System.Configuration;\r     using Microsoft.WindowsAzure.MediaServices.Client;\r     using Microsoft.WindowsAzure.MediaServices.Client.ContentKeyAuthorization;\r     using Microsoft.WindowsAzure.MediaServices.Client.Widevine;\r     using Newtonsoft.Json;\r \r     namespace DeliverDRMLicenses\r     {\r         class Program\r         {\r             // Read values from the App.config file.\r             private static readonly string _AADTenantDomain =\r                 ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r             private static readonly string _RESTAPIEndpoint =\r                 ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r             private static readonly Uri _sampleIssuer =\r                 new Uri(ConfigurationManager.AppSettings[\"Issuer\"]);\r             private static readonly Uri _sampleAudience =\r                 new Uri(ConfigurationManager.AppSettings[\"Audience\"]);\r \r             // Field for service context.\r             private static CloudMediaContext _context = null;\r \r             static void Main(string[] args)\r             {\r                 var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r                 var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r                 _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r                 bool tokenRestriction = true;\r                 string tokenTemplateString = null;\r \r \r                 IContentKey key = CreateCommonTypeContentKey();\r \r                 // Print out the key ID and Key in base64 string format\r                 Console.WriteLine(\"Created key {0} with key value {1} \",\r                     key.Id, System.Convert.ToBase64String(key.GetClearKeyValue()));\r \r                 Console.WriteLine(\"PlayReady License Key delivery URL: {0}\",\r                     key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense));\r \r                 if (tokenRestriction)\r                     tokenTemplateString = AddTokenRestrictedAuthorizationPolicy(key);\r                 else\r                     AddOpenAuthorizationPolicy(key);\r \r                 Console.WriteLine(\"Added authorization policy: {0}\",\r                     key.AuthorizationPolicyId);\r                 Console.WriteLine();\r                 Console.ReadLine();\r             }\r \r             static public void AddOpenAuthorizationPolicy(IContentKey contentKey)\r             {\r \r                 // Create ContentKeyAuthorizationPolicy with Open restrictions \r                 // and create authorization policy          \r \r                 List<ContentKeyAuthorizationPolicyRestriction> restrictions =\r                     new List<ContentKeyAuthorizationPolicyRestriction>\r                 {\r                         new ContentKeyAuthorizationPolicyRestriction\r                         {\r                             Name = \"Open\",\r                             KeyRestrictionType = (int)ContentKeyRestrictionType.Open,\r                             Requirements = null\r                         }\r                 };\r \r                 // Configure PlayReady license templates.\r                 string PlayReadyLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r \r                 IContentKeyAuthorizationPolicyOption PlayReadyPolicy =\r                     _context.ContentKeyAuthorizationPolicyOptions.Create(\"\",\r                         ContentKeyDeliveryType.PlayReadyLicense,\r                             restrictions, PlayReadyLicenseTemplate);\r \r                 IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r                             ContentKeyAuthorizationPolicies.\r                             CreateAsync(\"Deliver Common Content Key with no restrictions\").\r                             Result;\r \r \r                 contentKeyAuthorizationPolicy.Options.Add(PlayReadyPolicy);\r                 // Associate the content key authorization policy with the content key.\r                 contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r                 contentKey = contentKey.UpdateAsync().Result;\r             }\r \r             public static string AddTokenRestrictedAuthorizationPolicy(IContentKey contentKey)\r             {\r                 string tokenTemplateString = GenerateTokenRequirements();\r \r                 List<ContentKeyAuthorizationPolicyRestriction> restrictions =\r                     new List<ContentKeyAuthorizationPolicyRestriction>\r                 {\r                         new ContentKeyAuthorizationPolicyRestriction\r                         {\r                             Name = \"Token Authorization Policy\",\r                             KeyRestrictionType = (int)ContentKeyRestrictionType.TokenRestricted,\r                             Requirements = tokenTemplateString,\r                         }\r                 };\r \r                 // Configure PlayReady license templates.\r                 string PlayReadyLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r                 IContentKeyAuthorizationPolicyOption PlayReadyPolicy =\r                     _context.ContentKeyAuthorizationPolicyOptions.Create(\"Token option\",\r                         ContentKeyDeliveryType.PlayReadyLicense,\r                             restrictions, PlayReadyLicenseTemplate);\r                 IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r                             ContentKeyAuthorizationPolicies.\r                             CreateAsync(\"Deliver Common Content Key with token restrictions\").\r                             Result;\r \r                 contentKeyAuthorizationPolicy.Options.Add(PlayReadyPolicy);\r                 // Associate the content key authorization policy with the content key\r                 contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r                 contentKey = contentKey.UpdateAsync().Result;\r \r                 return tokenTemplateString;\r             }\r \r             static private string GenerateTokenRequirements()\r             {\r                 TokenRestrictionTemplate template = new TokenRestrictionTemplate(TokenType.SWT);\r \r                 template.PrimaryVerificationKey = new SymmetricVerificationKey();\r                 template.AlternateVerificationKeys.Add(new SymmetricVerificationKey());\r                 template.Audience = _sampleAudience.ToString();\r                 template.Issuer = _sampleIssuer.ToString();\r                 template.RequiredClaims.Add(TokenClaim.ContentKeyIdentifierClaim);\r \r                 return TokenRestrictionTemplateSerializer.Serialize(template);\r             }\r \r             static private string ConfigurePlayReadyLicenseTemplate()\r             {\r                 // The following code configures PlayReady License Template using .NET classes\r                 // and returns the XML string.\r \r                 //The PlayReadyLicenseResponseTemplate class represents the template \r                 //for the response sent back to the end user. \r                 //It contains a field for a custom data string between the license server \r                 //and the application (may be useful for custom app logic) \r                 //as well as a list of one or more license templates.\r \r                 PlayReadyLicenseResponseTemplate responseTemplate =\r                     new PlayReadyLicenseResponseTemplate();\r \r                 // The PlayReadyLicenseTemplate class represents a license template \r                 // for creating PlayReady licenses\r                 // to be returned to the end users. \r                 // It contains the data on the content key in the license \r                 // and any rights or restrictions to be \r                 // enforced by the PlayReady DRM runtime when using the content key.\r                 PlayReadyLicenseTemplate licenseTemplate = new PlayReadyLicenseTemplate();\r \r                 // Configure whether the license is persistent \r                 // (saved in persistent storage on the client) \r                 // or non-persistent (only held in memory while the player is using the license).  \r                 licenseTemplate.LicenseType = PlayReadyLicenseType.Nonpersistent;\r \r                 // AllowTestDevices controls whether test devices can use the license or not.  \r                 // If true, the MinimumSecurityLevel property of the license\r                 // is set to 150.  If false (the default), \r                 // the MinimumSecurityLevel property of the license is set to 2000.\r                 licenseTemplate.AllowTestDevices = true;\r \r                 // You can also configure the Play Right in the PlayReady license by using the PlayReadyPlayRight class. \r                 // It grants the user the ability to playback the content subject to the zero or more restrictions \r                 // configured in the license and on the PlayRight itself (for playback specific policy). \r                 // Much of the policy on the PlayRight has to do with output restrictions \r                 // which control the types of outputs that the content can be played over and \r                 // any restrictions that must be put in place when using a given output.\r                 // For example, if the DigitalVideoOnlyContentRestriction is enabled, \r                 //then the DRM runtime will only allow the video to be displayed over digital outputs \r                 //(analog video outputs won’t be allowed to pass the content).\r \r                 // IMPORTANT: These types of restrictions can be very powerful \r                 // but can also affect the consumer experience. \r                 // If the output protections are configured too restrictive, \r                 // the content might be unplayable on some clients. \r                 // For more information, see the PlayReady Compliance Rules document.\r \r                 // For example:\r                 //licenseTemplate.PlayRight.AgcAndColorStripeRestriction = new AgcAndColorStripeRestriction(1);\r \r                 responseTemplate.LicenseTemplates.Add(licenseTemplate);\r \r                 return MediaServicesLicenseTemplateSerializer.Serialize(responseTemplate);\r             }\r \r \r             static public IContentKey CreateCommonTypeContentKey()\r             {\r                 // Create envelope encryption content key\r                 Guid keyId = Guid.NewGuid();\r                 byte[] contentKey = GetRandomBuffer(16);\r \r                 IContentKey key = _context.ContentKeys.Create(\r                                         keyId,\r                                         contentKey,\r                                         \"ContentKey\",\r                                         ContentKeyType.CommonEncryption);\r \r                 return key;\r             }\r \r             static private byte[] GetRandomBuffer(int length)\r             {\r                 var returnValue = new byte[length];\r \r                 using (var rng =\r                     new System.Security.Cryptography.RNGCryptoServiceProvider())\r                 {\r                     rng.GetBytes(returnValue);\r                 }\r \r                 return returnValue;\r             }\r         }\r     }\r \r \r ## <a name=\"see-also\"></a>另请参阅\r [使用 PlayReady 动态通用加密](media-services-protect-with-drm.md)\r \r [使用 AES-128 动态加密和密钥传送服务](media-services-protect-with-aes128.md)\r <!--Update_Description:update code to use AAD token instead of ACS-->"}