{"Title":"适用于 Open Source Media Framework 的平滑流式处理插件","Description":"了解如何使用适用于 Adobe Open Source Media Framework 的 Azure 媒体服务平滑流式处理插件。","Content":"\r # 如何使用适用于 Adobe Open Source Media Framework 的 Microsoft 平滑流式处理插件\r \r ##概述\r \r 适用于 Open Source Media Framework 2.0 的 Microsoft 平滑流式处理插件 (SS for OSMF) 扩展了 OSMF 的默认功能，并在新的和现有的 OSMF 播放器中添加了 Microsoft 平滑流式处理内容播放功能。该插件还为 Strobe Media Playback (SMP) 添加了平滑流式处理播放功能。\r \r SS for OSMF 包括两个版本的插件：\r \r - 适用于 OSMF 的静态平滑流式处理插件 (.swc)\r \r - 适用于 OSMF 的动态平滑流式处理插件 (.swf)\r \r 本文档假设读者具有 OSMF 和 OSMF 插件方面的一般实践知识。有关 OSMF 的详细信息，请参阅 [OSMF 官方网站](http://osmf.org/)上的文档。\r \r ###适用于 OSMF 2.0 的平滑流式处理插件\r \r 该插件支持通过以下功能加载和播放按需平滑流式处理内容：\r \r - 按需平滑流式处理播放（播放、暂停、定位、停止）\r - 实时平滑流式处理播放（播放）\r - 实时 DVR 功能（暂停、定位、DVR 播放、现场直播）\r - 支持视频编解码器 - H.264\r - 支持音频编解码器 - AAC\r - 通过 OSMF 内置 API 切换多种音频语言\r - 通过 OSMF 内置 API 选择最佳播放质量\r - 通过 OSMF 字幕插件实现 Sidecar 隐藏字幕\r - Adobe&reg; Flash&reg; Player 11.4 或更高版本。\r - 此版本仅支持 OSMF 2.0。\r \r ## 支持的功能和已知问题\r \r 有关支持的功能、不支持的功能和已知问题的完整列表，请参阅[本文档](http://download.microsoft.com/download/3/1/B/31B63D97-574E-4A8D-BF8D-170744181724/Smooth_Streaming_Plugin_for_OSMF.pdf)。\r \r ## 加载插件\r 可静态（在编译时）或动态（在运行时）加载 OSMF 插件。适用于 OSMF 的平滑流式处理插件的下载内容包括动态和静态版本。\r \r - 静态加载：若要以静态方式加载，必须有一个静态库 (SWC) 文件。静态插件将添加为对项目的引用，并在编译时合并到最终输出文件中。\r \r - 动态加载：若要以动态方式加载，必须有一个预编译的 (SWF) 文件。动态插件在运行时中加载，不包含在项目输出中。（编译的输出）可以使用 HTTP 和 FILE 协议加载动态插件。\r \r 有关静态和动态加载的详细信息，请参阅官方的 [OSMF 插件页](http://osmf.org/dev/osmf/OtherPDFs/osmf_plugin_dev_guide.pdf)。\r \r ###SS for OSMF 静态加载\r 以下代码段演示如何静态加载 SS for OSMF 插件以及如何使用 OSMF MediaFactory 类播放基本视频。在包含 SS for OSMF 代码之前，请确保项目引用包含“MSAdaptiveStreamingPlugin-v1.0.3-osmf2.0.swc”静态插件。\r \r ```\r package \r {\r \r     import com.microsoft.azure.media.AdaptiveStreamingPluginInfo;\r \r     import flash.display.*;\r     import org.osmf.media.*;\r     import org.osmf.containers.MediaContainer;\r     import org.osmf.events.MediaErrorEvent;\r     import org.osmf.events.MediaFactoryEvent;\r     import org.osmf.events.MediaPlayerStateChangeEvent;\r     import org.osmf.layout.*;\r \r     [SWF(width=\"1024\", height=\"768\", backgroundColor='#405050', frameRate=\"25\")]\r     public class TestPlayer extends Sprite\r     {        \r         public var _container:MediaContainer;\r         public var _mediaFactory:DefaultMediaFactory;\r         private var _mediaPlayerSprite:MediaPlayerSprite;\r \r         public function TestPlayer( )\r         {\r             stage.quality = StageQuality.HIGH;\r \r             initMediaPlayer();\r \r         }\r \r         private function initMediaPlayer():void\r         {\r \r             // Create the container (sprite) for managing display and layout\r             _mediaPlayerSprite = new MediaPlayerSprite();    \r             _mediaPlayerSprite.addEventListener(MediaErrorEvent.MEDIA_ERROR, onPlayerFailed);\r             _mediaPlayerSprite.addEventListener(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE, onPlayerStateChange);\r             _mediaPlayerSprite.scaleMode = ScaleMode.NONE;\r             _mediaPlayerSprite.width = stage.stageWidth;\r             _mediaPlayerSprite.height = stage.stageHeight;\r             //Adds the container to the stage\r             addChild(_mediaPlayerSprite);\r \r             // Create a mediafactory instance\r             _mediaFactory = new DefaultMediaFactory();\r \r             // Add the listeners for PLUGIN_LOADING\r             _mediaFactory.addEventListener(MediaFactoryEvent.PLUGIN_LOAD,onPluginLoaded);\r             _mediaFactory.addEventListener(MediaFactoryEvent.PLUGIN_LOAD_ERROR, onPluginLoadFailed );\r \r             // Load the plugin class \r             loadAdaptiveStreamingPlugin( );  \r \r         }\r \r         private function loadAdaptiveStreamingPlugin( ):void\r         {\r             var pluginResource:MediaResourceBase;\r \r             pluginResource = new PluginInfoResource(new AdaptiveStreamingPluginInfo( )); \r             _mediaFactory.loadPlugin( pluginResource ); \r         }\r \r         private function onPluginLoaded( event:MediaFactoryEvent ):void\r         {\r             // The plugin is loaded successfully.\r             // Your web server needs to host a valid crossdomain.xml file to allow plugin to download Smooth Streaming files.\r         loadMediaSource(\"http://devplatem.vo.msecnd.net/Sintel/Sintel_H264.ism/manifest\")\r \r         }\r \r         private function onPluginLoadFailed( event:MediaFactoryEvent ):void\r         {\r             // The plugin is failed to load ...\r         }\r \r         private function onPlayerStateChange(event:MediaPlayerStateChangeEvent) : void\r         {\r             var state:String;\r \r             state =  event.state;\r \r             switch (state)\r             {\r                 case MediaPlayerState.LOADING: \r \r                     // A new source is started to load.\r \r                     break;\r \r                 case  MediaPlayerState.READY :   \r                     // Add code to deal with Player Ready when it is hit the first load after a source is loaded. \r \r                     break;\r \r                 case MediaPlayerState.BUFFERING :\r \r                     break;\r \r                 case  MediaPlayerState.PAUSED :\r                     break;      \r                 // other states ...          \r             }\r         }\r \r         private function onPlayerFailed(event:MediaErrorEvent) : void\r         {\r             // Media Player is failed .           \r         }\r \r         private function loadMediaSource(sourceURL : String):void \r         {\r             // Take an URL of SmoothStreamingSource's manifest and add it to the page.\r \r             var resource:URLResource= new URLResource( sourceURL );\r \r             var element:MediaElement = _mediaFactory.createMediaElement( resource );\r             _mediaPlayerSprite.scaleMode = ScaleMode.LETTERBOX;\r             _mediaPlayerSprite.width = stage.stageWidth;\r             _mediaPlayerSprite.height = stage.stageHeight;\r \r             // Add the media element\r             _mediaPlayerSprite.media = element;\r         }     \r \r     }\r }\r ```\r \r ###SS for OSMF 动态加载\r \r 以下代码段演示如何动态加载 SS for OSMF 插件以及如何使用 OSMF MediaFactory 类播放基本视频。在包含 SS for OSMF 代码之前，如果要使用 FILE 协议进行加载，请将“MSAdaptiveStreamingPlugin-v1.0.3-osmf2.0.swf”动态插件复制到项目文件夹；如果要进行 HTTP 加载，请将该插件复制到 Web 服务器下。不需要在项目引用中包含“MSAdaptiveStreamingPlugin-v1.0.3-osmf2.0.swc”。\r \r ```\r package\r {\r \r     import flash.display.*;\r     import org.osmf.media.*;\r     import org.osmf.containers.MediaContainer;\r     import org.osmf.events.MediaErrorEvent;\r     import org.osmf.events.MediaFactoryEvent;\r     import org.osmf.events.MediaPlayerStateChangeEvent;\r     import org.osmf.layout.*;\r     import flash.events.Event;\r     import flash.system.Capabilities;\r \r     //Sets the size of the SWF\r \r     [SWF(width=\"1024\", height=\"768\", backgroundColor='#405050', frameRate=\"25\")]\r     public class TestPlayer extends Sprite\r     {        \r         public var _container:MediaContainer;\r         public var _mediaFactory:DefaultMediaFactory;\r         private var _mediaPlayerSprite:MediaPlayerSprite;\r \r         public function TestPlayer( )\r         {\r             stage.quality = StageQuality.HIGH;\r             initMediaPlayer();\r         }\r \r         private function initMediaPlayer():void\r         {\r \r             // Create the container (sprite) for managing display and layout\r             _mediaPlayerSprite = new MediaPlayerSprite();    \r             _mediaPlayerSprite.addEventListener(MediaErrorEvent.MEDIA_ERROR, onPlayerFailed);\r             _mediaPlayerSprite.addEventListener(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE, onPlayerStateChange);\r \r             //Adds the container to the stage\r             addChild(_mediaPlayerSprite);\r \r             // Create a mediafactory instance\r             _mediaFactory = new DefaultMediaFactory();\r \r             // Add the listeners for PLUGIN_LOADING\r             _mediaFactory.addEventListener(MediaFactoryEvent.PLUGIN_LOAD,onPluginLoaded);\r             _mediaFactory.addEventListener(MediaFactoryEvent.PLUGIN_LOAD_ERROR, onPluginLoadFailed );\r \r             // Load the plugin class \r             loadAdaptiveStreamingPlugin( );  \r \r         }\r \r         private function loadAdaptiveStreamingPlugin( ):void\r         {\r             var pluginResource:MediaResourceBase;\r             var adaptiveStreamingPluginUrl:String;\r \r             // Your dynamic plugin web server needs to host a valid crossdomain.xml file to allow loading plugins.\r \r             adaptiveStreamingPluginUrl = \"http://yourdomain/MSAdaptiveStreamingPlugin-v1.0.3-osmf2.0.swf\";\r             pluginResource = new URLResource(adaptiveStreamingPluginUrl);\r             _mediaFactory.loadPlugin( pluginResource ); \r \r         }\r \r         private function onPluginLoaded( event:MediaFactoryEvent ):void\r         {\r             // The plugin is loaded successfully.\r \r             // Your web server needs to host a valid crossdomain.xml file to allow plugin to download Smooth Streaming files.\r \r     loadMediaSource(\"http://devplatem.vo.msecnd.net/Sintel/Sintel_H264.ism/manifest\")\r         }\r \r         private function onPluginLoadFailed( event:MediaFactoryEvent ):void\r         {\r             // The plugin is failed to load ...\r         }\r \r         private function onPlayerStateChange(event:MediaPlayerStateChangeEvent) : void\r         {\r             var state:String;\r \r             state =  event.state;\r \r             switch (state)\r             {\r                 case MediaPlayerState.LOADING: \r \r                     // A new source is started to load.\r \r                     break;\r \r                 case  MediaPlayerState.READY :   \r                     // Add code to deal with Player Ready when it is hit the first load after a source is loaded. \r \r                     break;\r \r                 case MediaPlayerState.BUFFERING :\r \r                     break;\r \r                 case  MediaPlayerState.PAUSED :\r                     break;      \r                 // other states ...          \r             }\r         }\r \r         private function onPlayerFailed(event:MediaErrorEvent) : void\r         {\r             // Media Player is failed .           \r         }\r \r         private function loadMediaSource(sourceURL : String):void \r         {\r             // Take an URL of SmoothStreamingSource's manifest and add it to the page.\r \r             var resource:URLResource= new URLResource( sourceURL );\r \r             var element:MediaElement = _mediaFactory.createMediaElement( resource );\r             _mediaPlayerSprite.scaleMode = ScaleMode.LETTERBOX;\r             _mediaPlayerSprite.width = stage.stageWidth;\r             _mediaPlayerSprite.height = stage.stageHeight;\r             // Add the media element\r             _mediaPlayerSprite.media = element;\r         }     \r \r     }\r }\r ```\r \r ##Strobe Media Playback 与 SS OSMF 动态插件\r \r 适用于 OSMF 的平滑流式处理动态插件与 [Strobe Media Playback (SMP)](http://osmf.org/strobe_mediaplayback.html) 兼容。你可以使用 SS for OSMF 插件向 SMP 添加平滑流式处理内容播放功能。为此，请在进行 HTTP 加载时，使用以下步骤将“MSAdaptiveStreamingPlugin-v1.0.3-osmf2.0.swf”复制到 Web 服务器下：\r \r 1. 浏览 [Strobe Media Playback 设置页](http://osmf.org/dev/2.0gm/setup.html)。 \r 2. 将 src 设置为平滑流式处理源（例如 http://devplatem.vo.msecnd.net/Sintel/Sintel_H264.ism/manifest ） \r 3. 进行所需的配置更改，然后单击“Preview and Update”（预览并更新）。\r \r     **注意** 你的内容 Web 服务器需要有效的 crossdomain.xml。 \r 4. 使用常用的文本编辑器将该代码复制并粘贴到一个简单的 HTML 页，如以下示例所示：\r \r     ```\r     <html>\r     <body>\r     <object width=\"920\" height=\"640\"> \r     <param name=\"movie\" value=\"http://osmf.org/dev/2.0gm/StrobeMediaPlayback.swf\"></param>\r     <param name=\"flashvars\" value=\"src=http://devplatem.vo.msecnd.net/Sintel/Sintel_H264.ism/manifest &autoPlay=true\"></param>\r     <param name=\"allowFullScreen\" value=\"true\"></param>\r     <param name=\"allowscriptaccess\" value=\"always\"></param>\r     <param name=\"wmode\" value=\"direct\"></param>\r     <embed src=\"http://osmf.org/dev/2.0gm/StrobeMediaPlayback.swf\" \r         type=\"application/x-shockwave-flash\" \r         allowscriptaccess=\"always\" \r         allowfullscreen=\"true\" \r         wmode=\"direct\" \r         width=\"920\" \r         height=\"640\" \r         flashvars=\" src=http://devplatem.vo.msecnd.net/Sintel/Sintel_H264.ism/manifest&autoPlay=true\">\r     </embed>\r     </object>\r     </body>\r     </html>\r     ```\r \r 5. 将平滑流式处理 OSMF 插件添加到 embed 代码中，然后保存。\r \r     ```\r     <html>\r     <object width=\"920\" height=\"640\"> \r     <param name=\"movie\" value=\"http://osmf.org/dev/2.0gm/StrobeMediaPlayback.swf\"></param>\r     <param name=\"flashvars\" value=\"src=http://devplatem.vo.msecnd.net/Sintel/Sintel_H264.ism/manifest&autoPlay=true&plugin_AdaptiveStreamingPlugin=http://yourdomain/MSAdaptiveStreamingPlugin-v1.0.3-osmf2.0.swf&AdaptiveStreamingPlugin_retryLive=true&AdaptiveStreamingPlugin_retryInterval=10\"></param>\r     <param name=\"allowFullScreen\" value=\"true\"></param>\r     <param name=\"allowscriptaccess\" value=\"always\"></param>\r     <param name=\"wmode\" value=\"direct\"></param>\r     <embed src=\"http://osmf.org/dev/2.0gm/StrobeMediaPlayback.swf\" \r         type=\"application/x-shockwave-flash\" \r         allowscriptaccess=\"always\" \r         allowfullscreen=\"true\" \r         wmode=\"direct\" \r         width=\"920\" \r         height=\"640\" \r         flashvars=\"src=http://devplatem.vo.msecnd.net/Sintel/Sintel_H264.ism/manifest&autoPlay=true&plugin_AdaptiveStreamingPlugin=http://yourdomain/MSAdaptiveStreamingPlugin-v1.0.3-osmf2.0.swf&AdaptiveStreamingPlugin_retryLive=true&AdaptiveStreamingPlugin_retryInterval=10\">\r     </embed>\r     </object>\r     </html>\r     ```\r \r 6. \t保存 HTML 页，然后发布到 Web 服务器。使用你最常用的、已启用 Flash&reg; Player 的 Internet 浏览器（Internet Explorer、Chrome、Firefox 等）浏览到已发布的网页。\r 7. \t在 Adobe&reg; Flash&reg; Player 中欣赏平滑流式处理内容。\r \r 有关一般性 OSMF 开发的详细信息，请参阅官方的 [OSMF 开发页](http://osmf.org/resources.html)。\r \r ##另请参阅\r \r [适用于 OSMF 的 Microsoft 自适应流式处理插件更新](https://azure.microsoft.com/blog/2014/10/27/microsoft-adaptive-streaming-plugin-for-osmf-update/)\r \r <!---HONumber=Mooncake_1114_2016-->"}