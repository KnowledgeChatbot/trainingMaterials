{"Title":"使应用程序数据在 Azure 中高度可用","Description":"利用读取访问异地冗余存储，使应用程序数据高度可用","Content":"# <a name=\"make-your-application-data-highly-available-with-azure-storage\"></a>使应用程序数据在 Azure 存储中高度可用\r \r 本教程是一个系列中的第一部分。 本教程介绍如何使应用程序数据在 Azure 中高度可用。 完成后，你会有一个控制台应用程序，用于将 blob 上传到[读取访问异地冗余](../common/storage-redundancy.md#read-access-geo-redundant-storage) (RA-GRS) 存储帐户并对其进行检索。 RA-GRS 的工作方式是将事务从主要区域复制到次要区域。 此复制过程可确保次要区域中的数据最终一致。 应用程序使用[断路器](https://docs.microsoft.com/azure/architecture/patterns/circuit-breaker.md)模式来确定要连接到的终结点。 对故障进行模拟时，应用程序切换到辅助终结点。\r \r 在该系列的第一部分中，你将学习如何：\r \r > [!div class=\"checklist\"]\r > * 创建存储帐户\r > * 下载示例\r > * 设置连接字符串\r > * 运行控制台应用程序\r \r ## <a name=\"prerequisites\"></a>先决条件\r \r 若要完成本教程，需执行以下操作：\r \r * 使用以下工作负荷安装 [Visual Studio 2017](https://www.visualstudio.com/downloads/)：\r   - **Azure 开发**\r \r   ![Azure 开发（位于“Web 和云”下）](media/storage-create-geo-redundant-storage/workloads.png)\r \r * 下载并安装 [Fiddler](https://www.telerik.com/download/fiddler)\r \r [!INCLUDE [quickstarts-free-trial-note](../../../includes/quickstarts-free-trial-note.md)]\r \r ## <a name=\"log-in-to-the-azure-portal\"></a>登录到 Azure 门户\r \r 登录到 [Azure 门户](https://portal.azure.cn/)。\r \r ## <a name=\"create-a-storage-account\"></a>创建存储帐户\r \r 存储帐户提供唯一的命名空间来存储和访问 Azure 存储数据对象。\r \r 按以下步骤创建读取访问异地冗余存储帐户：\r \r 1. 选择 Azure 门户左上角的“新建”按钮。\r \r 2. 在“新建”页中选择“存储”，然后在“特别推荐”下选择“存储帐户 - blob、文件、表、队列”。\r 3. 使用以下信息填充存储帐户窗体（如下图所示），然后选择“创建”：\r \r    | 设置       | 建议的值 | 说明 |\r    | ------------ | ------------------ | ------------------------------------------------- |\r    | **Name** | mystorageaccount | 存储帐户的唯一值 |\r    | 部署模型 | Resource Manager  | 资源管理器包含最新功能。  |\r    | 帐户类型 | 常规用途 | 有关帐户类型的详细信息，请参阅[存储帐户的类型](../common/storage-introduction.md#types-of-storage-accounts) |\r    | **性能** | 标准 | 对于示例方案，“标准”已足够。 |\r    | **复制**| 读取访问异地冗余存储 (RA-GRS) | 这是运行示例所必需的。 |\r    |需要安全传输 | 已禁用| 此方案不需要安全传输。 |\r    |**订阅** | 你的订阅 |有关订阅的详细信息，请参阅[订阅](https://account.windowsazure.cn/Subscriptions)。 |\r    |**ResourceGroup** | MyResourceGroup |如需有效的资源组名称，请参阅 [Naming rules and restrictions](https://docs.microsoft.com/azure/architecture/best-practices/naming-conventions)（命名规则和限制）。 |\r    |**位置** | 中国东部 | 选择一个位置。 |\r \r ![创建存储帐户](media/storage-create-geo-redundant-storage/figure1.png)\r \r ## <a name=\"download-the-sample\"></a>下载示例\r \r [下载示例项目](https://github.com/Azure-Samples/storage-dotnet-circuit-breaker-pattern-ha-apps-using-ra-grs/archive/master.zip)。\r \r 提取（解压缩）storage-dotnet-circuit-breaker-pattern-ha-apps-using-ra-grs.zip 文件。\r 示例项目包含一个控制台应用程序。\r \r ## <a name=\"set-the-connection-string\"></a>设置连接字符串\r \r 在 Visual Studio 中打开 storage-dotnet-circuit-breaker-pattern-ha-apps-using-ra-grs 控制台应用程序。\r \r 在 App.config 文件的 appSettings 节点下，将 StorageConnectionString 的值替换为存储帐户连接字符串。 在 Azure 门户的存储帐户中，选择“设置”下的“访问密钥”即可检索该值。 复制主密钥或辅助密钥中的连接字符串，并将其粘贴到 App.config 文件中。 选择“保存”，在完成后保存文件。\r \r ![应用配置文件](media/storage-create-geo-redundant-storage/figure2.png)\r \r ## <a name=\"run-the-console-application\"></a>运行控制台应用程序\r \r 在 Visual Studio 中，按 F5 或选择“开始”即可开始调试应用程序。 Visual studio 自动还原缺失的 Nuget 包（如果已配置）。若要了解详细信息，请访问 [Installing and reinstalling packages with package restore](https://docs.microsoft.com/nuget/consume-packages/package-restore#package-restore-overview)（通过包还原安装和重新安装包）。 \r \r 此时会启动一个控制台窗口，应用程序开始运行。 应用程序将 HelloWorld.png 图像从解决方案上传到存储帐户。 应用程序会进行检查，确保图像已复制到辅助 RA-GRS 终结点， 然后开始下载图像（最多 999 次）。 每次读取都用 P 或 S 来表示。其中，P 表示主终结点，S 表示辅助终结点。\r \r ![正在运行的控制台应用](media/storage-create-geo-redundant-storage/figure3.png)\r \r 在示例代码中，`Program.cs` 文件中的 `RunCircuitBreakerAsync` 任务用于通过 [DownloadToFileAsync](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.cloudblockblob.downloadtofileasync?view=azure-dotnet) 方法下载存储帐户中的图像。 在下载之前，会定义 [OperationContext](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.operationcontext?view=azure-dotnet)。 操作上下文定义事件处理程序，此类程序在下载成功完成时或者下载失败并重试时触发。\r \r ### <a name=\"retry-event-handler\"></a>Retry 事件处理程序\r \r 当图像下载失败并设置为重试时，会调用 `Operation_context_Retrying` 事件处理程序。 如果达到重试的最大次数（在应用程序中定义），请求的 [LocationMode](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.blobrequestoptions.locationmode?view=azure-dotnet#Microsoft_WindowsAzure_Storage_Blob_BlobRequestOptions_LocationMode) 会更改为 `SecondaryOnly`。 此设置强制应用程序从辅助终结点尝试下载该图像。 此配置可减少请求图像所花的时间，因为不会无限重试主终结点。\r \r ```csharp\r private static void Operation_context_Retrying(object sender, RequestEventArgs e)\r {\r     retryCount++;\r     Console.WriteLine(\"Retrying event because of failure reading the primary. RetryCount = \" + retryCount);\r \r     // Check if we have had more than n retries in which case switch to secondary.\r     if (retryCount >= retryThreshold)\r     {\r \r         // Check to see if we can fail over to secondary.\r         if (blobClient.DefaultRequestOptions.LocationMode != LocationMode.SecondaryOnly)\r         {\r             blobClient.DefaultRequestOptions.LocationMode = LocationMode.SecondaryOnly;\r             retryCount = 0;\r         }\r         else\r         {\r             throw new ApplicationException(\"Both primary and secondary are unreachable. Check your application's network connection. \");\r         }\r     }\r }\r ```\r \r ### <a name=\"request-completed-event-handler\"></a>RequestCompleted 事件处理程序\r \r 当图像下载成功时，会调用 `Operation_context_RequestCompleted` 事件处理程序。 如果应用程序使用的是辅助终结点，则应用程序会继续使用该终结点，最多 20 次。 20 次以后，应用程序会将 [LocationMode](https://docs.microsoft.com/dotnet/api/microsoft.windowsazure.storage.blob.blobrequestoptions.locationmode?view=azure-dotnet#Microsoft_WindowsAzure_Storage_Blob_BlobRequestOptions_LocationMode) 重新设置为 `PrimaryThenSecondary` 并重试主终结点。 如果请求成功，应用程序会继续从主终结点读取。\r \r ```csharp\r private static void Operation_context_RequestCompleted(object sender, RequestEventArgs e)\r {\r     if (blobClient.DefaultRequestOptions.LocationMode == LocationMode.SecondaryOnly)\r     {\r         // You're reading the secondary. Let it read the secondary [secondaryThreshold] times, \r         //    then switch back to the primary and see if it's available now.\r         secondaryReadCount++;\r         if (secondaryReadCount >= secondaryThreshold)\r         {\r             blobClient.DefaultRequestOptions.LocationMode = LocationMode.PrimaryThenSecondary;\r             secondaryReadCount = 0;\r         }\r     }\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 此系列的第一部分介绍了如何通过 RA-GRS 存储帐户使应用程序高度可用，例如，如何：\r \r > [!div class=\"checklist\"]\r > * 创建存储帐户\r > * 下载示例\r > * 设置连接字符串\r > * 运行控制台应用程序\r \r 若要了解如何模拟故障并强制应用程序使用辅助 RA-GRS 终结点，请转到此系列的第二部分。\r \r > [!div class=\"nextstepaction\"]\r > [模拟连接到主存储终结点时出现的故障](storage-simulate-failure-ragrs-account-app.md)\r "}