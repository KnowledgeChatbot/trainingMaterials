{"Title":"Azure AD Java 命令行入门","Description":"如何生成使用户登录以访问 API 的 Java 命令行应用。","Content":"\r # 通过 Azure AD 使用 Java 命令行应用访问 API\r \r [!INCLUDE [active-directory-devguide](../../../includes/active-directory-devguide.md)]\r \r 使用 Azure AD，只需编写几行代码，就能简单直接地外包 Web 应用的标识管理，提供单一登录和注销。在 Java Web 应用中，你可以使用社区驱动 ADAL4J 的 Microsoft 实现来达到此目的。\r \r   现在，我们将使用 ADAL4J 来执行以下操作：\r - 使用 Azure AD 作为标识提供者程序将用户登录到应用。\r - 显示有关用户的一些信息。\r - 从应用中注销用户。\r \r 为此，你需要：\r \r 1. 将一个应用程序注册到 Azure AD\r 2. 将应用设置为使用 ADAL4J 库。\r 3. 使用 ADAL4J 库向 Azure AD 发出登录和注销请求。\r 4. 列显有关用户的数据。\r \r 若要开始，请[下载应用程序框架](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/skeleton.zip)或[下载已完成的示例](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect\\\\/archive/complete.zip)。你还需要一个用于注册应用程序的 Azure AD 租户。如果你没有此租户，请[了解如何获取租户](./active-directory-howto-tenant.md)。\r \r ## 1\\.将一个应用程序注册到 Azure AD\r 若要使应用程序对用户进行身份验证，你首先需要在租户中注册新的应用程序。\r \r - 登录到 Azure 管理门户。\r - 在左侧的导航栏中单击“Active Directory”。\r - 选择你要在其中注册应用程序的租户。\r - 单击“应用程序”选项卡，然后在底部抽屉中单击“添加”。\r - 根据提示创建一个新的 **Web 应用程序和/或 WebAPI**。\r     - 应用程序的**名称**向最终用户描述你的应用程序\r     - “登录 URL”是应用的基本 URL。框架的默认值为 `http://localhost:8080/adal4jsample/`。\r     - “应用 ID URI”是应用程序的唯一标识符。约定是使用 `https://<tenant-domain>/<app-name>`，例如 `http://localhost:8080/adal4jsample/`\r - 完成注册后，AAD 将为应用分配唯一的客户端标识符。在后面的部分中将会用到此值，因此，请从“配置”选项卡复制此值。\r \r 进入门户后，为你的应用创建一个**应用程序机密**并复制该机密。稍后将需要它。\r \r ## 2\\.使用 Maven 将应用设置为使用 ADAL4J 库和必备组件\r 在这里，我们要将 ADAL4J 配置为使用 OpenID Connect 身份验证协议。ADAL4J 将用于发出登录和注销请求、管理用户的会话、获取有关用户的信息，等等。\r \r - 在项目的根目录中，打开/创建 `pom.xml`，找到 `// TODO: provide dependencies for Maven` 并替换为以下代码：\r \r     ```Java\r         <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r             <modelVersion>4.0.0</modelVersion>\r             <groupId>com.microsoft.azure</groupId>\r             <artifactId>public-client-adal4j-sample</artifactId>\r             <packaging>jar</packaging>\r             <version>0.0.1-SNAPSHOT</version>\r             <name>public-client-adal4j-sample</name>\r             <url>http://maven.apache.org</url>\r             <properties>\r                 <spring.version>3.0.5.RELEASE</spring.version>\r             </properties>\r \r             <dependencies>\r                 <dependency>\r                     <groupId>com.microsoft.azure</groupId>\r                     <artifactId>adal4j</artifactId>\r                     <version>1.1.2</version>\r                 </dependency>\r                 <dependency>\r                     <groupId>com.nimbusds</groupId>\r                     <artifactId>oauth2-oidc-sdk</artifactId>\r                     <version>4.5</version>\r                 </dependency>\r                 <dependency>\r                     <groupId>org.json</groupId>\r                     <artifactId>json</artifactId>\r                     <version>20090211</version>\r                 </dependency>\r                 <dependency>\r                     <groupId>javax.servlet</groupId>\r                     <artifactId>javax.servlet-api</artifactId>\r                     <version>3.0.1</version>\r                     <scope>provided</scope>\r                 </dependency>\r                 <dependency>\r                     <groupId>org.slf4j</groupId>\r                     <artifactId>slf4j-log4j12</artifactId>\r                     <version>1.7.5</version>\r                 </dependency>\r         </dependencies>\r             <build>\r                 <finalName>public-client-adal4j-sample</finalName>\r                 <plugins>\r                         <plugin>\r                     <groupId>org.codehaus.mojo</groupId>\r                     <artifactId>exec-maven-plugin</artifactId>\r                     <version>1.2.1</version>\r                     <configuration>\r                         <mainClass>PublicClient</mainClass>\r                     </configuration>\r                 </plugin>\r                     <plugin>\r                         <groupId>org.apache.maven.plugins</groupId>\r                         <artifactId>maven-compiler-plugin</artifactId>\r                         <configuration>\r                             <source>1.7</source>\r                             <target>1.7</target>\r                             <encoding>UTF-8</encoding>\r                         </configuration>\r                     </plugin>\r                     <plugin>\r                         <groupId>org.apache.maven.plugins</groupId>\r                         <artifactId>maven-dependency-plugin</artifactId>\r                         <executions>\r                             <execution>\r                                 <id>install</id>\r                                 <phase>install</phase>\r                                 <goals>\r                                     <goal>sources</goal>\r                                 </goals>\r                             </execution>\r                         </executions>\r                     </plugin>\r                     <plugin>\r                         <groupId>org.apache.maven.plugins</groupId>\r                         <artifactId>maven-resources-plugin</artifactId>\r                         <version>2.5</version>\r                         <configuration>\r                             <encoding>UTF-8</encoding>\r                         </configuration>\r                     </plugin>\r                     <plugin>\r                 <artifactId>maven-assembly-plugin</artifactId>\r                 <executions>\r                   <execution>\r                     <phase>package</phase>\r                     <goals>\r                       <goal>single</goal>\r                     </goals>\r                   </execution>\r                 </executions>\r                 <configuration>\r                   <descriptorRefs>\r                     <descriptorRef>jar-with-dependencies</descriptorRef>\r                   </descriptorRefs>\r                 </configuration>\r               </plugin>\r               <plugin>\r           <groupId>org.apache.maven.plugins</groupId>\r           <artifactId>maven-assembly-plugin</artifactId>\r           <configuration>\r             <archive>\r               <manifest>\r                 <mainClass>PublicClient</mainClass>\r               </manifest>\r             </archive>\r           </configuration>\r         </plugin>\r                 </plugins>\r             </build>\r \r         </project>\r     ```\r \r ## 3\\.创建 Java PublicClient 文件\r 如上所述，我们将使用图形 API 来获取有关已登录的用户的数据。为了顺利进行，我们应该创建一个表示**目录对象**的文件以及一个表示**用户**的单独文件，如此便可以使用 Java 的 OO 模式。\r \r - 创建一个名为 `DirectoryObject.java` 的文件，我们将用它来存储有关任何 DirectoryObject 的基本数据（你稍后可以随意使用它来执行任何其他图形查询）。可以从以下内容中剪切/粘贴此信息：\r \r     ```Java\r         import java.io.BufferedReader;\r         import java.io.InputStreamReader;\r         import java.util.concurrent.ExecutorService;\r         import java.util.concurrent.Executors;\r         import java.util.concurrent.Future;\r \r         import javax.naming.ServiceUnavailableException;\r \r         import com.microsoft.aad.adal4j.AuthenticationContext;\r         import com.microsoft.aad.adal4j.AuthenticationResult;\r \r         public class PublicClient {\r \r             private final static String AUTHORITY = \"https://login.microsoftonline.com/common/\";\r             private final static String CLIENT_ID = \"2a4da06c-ff07-410d-af8a-542a512f5092\";\r \r             public static void main(String args[]) throws Exception {\r \r                 try (BufferedReader br = new BufferedReader(new InputStreamReader(\r                         System.in))) {\r                     System.out.print(\"Enter username: \");\r                     String username = br.readLine();\r                     System.out.print(\"Enter password: \");\r                     String password = br.readLine();\r \r                     AuthenticationResult result = getAccessTokenFromUserCredentials(\r                             username, password);\r                     System.out.println(\"Access Token - \" + result.getAccessToken());\r                     System.out.println(\"Refresh Token - \" + result.getRefreshToken());\r                     System.out.println(\"ID Token - \" + result.getIdToken());\r                 }\r             }\r \r             private static AuthenticationResult getAccessTokenFromUserCredentials(\r                     String username, String password) throws Exception {\r                 AuthenticationContext context = null;\r                 AuthenticationResult result = null;\r                 ExecutorService service = null;\r                 try {\r                     service = Executors.newFixedThreadPool(1);\r                     context = new AuthenticationContext(AUTHORITY, false, service);\r                     Future<AuthenticationResult> future = context.acquireToken(\r                             \"https://graph.chinacloudapi.cn\", CLIENT_ID, username, password,\r                             null);\r                     result = future.get();\r                 } finally {\r                     service.shutdown();\r                 }\r \r                 if (result == null) {\r                     throw new ServiceUnavailableException(\r                             \"authentication result was null\");\r                 }\r                 return result;\r             }\r         }\r     ```\r \r ## 编译并运行示例\r 更改回根目录，并运行下列命令来生成你刚刚使用 `maven` 组成的示例。这会使用你针对依赖项编写的 `pom.xml` 文件。\r \r `$ mvn package`\r \r 你的 `/targets` 目录中现在应包含 `adal4jsample.war` 文件。你可以在 Tomcat 容器中部署该文件并访问 URL\r \r `http://localhost:8080/adal4jsample/`\r \r > [!NOTE]\r 使用最新的 Tomcat 服务器部署 WAR 非常容易。只要导航到 `http://localhost:8080/manager/` 并遵循有关上载 ``adal4jsample.war` 文件的说明即可。它会为你自动部署正确的终结点。\r > \r > \r \r ## 后续步骤\r 祝贺你！ 现在，你已创建一个有效的 Java 应用程序，它可以对用户进行身份验证，使用 OAuth 2.0 安全调用 Web API，并获取有关用户的基本信息。如果你尚未这样做，可以在租户中填充一些用户。\r \r [此处以 .zip 格式提供了](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/complete.zip)完整示例（不包括配置值），你也可以从 GitHub 克隆该示例：\r \r ```\r git clone --branch complete https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect.git\r ```\r \r <!---HONumber=Mooncake_0306_2017-->\r <!---Update_Description: wording update -->"}