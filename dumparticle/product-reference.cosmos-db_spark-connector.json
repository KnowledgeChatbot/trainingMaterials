{"Title":"将 Apache Spark 连接到 Azure Cosmos DB","Description":"使用本教程来了解 Azure Cosmos DB Spark 连接器：使用该连接器可将 Apache Spark 连接到 Azure Cosmos DB，以便在 世纪互联 提供的针对云设计的多租户多个区域分布式数据库系统中执行分布式聚合和数据科学。","Content":"<!-- Notice in meta : 全球 to 多个区域 -->\r # <a name=\"accelerate-real-time-big-data-analytics-with-the-spark-to-azure-cosmos-db-connector\"></a>使用 Spark 到 Azure Cosmos DB 的连接器加速实时大数据分析\r \r Spark 到 Azure Cosmos DB 的连接器能使 Azure Cosmos DB 充当 Apache Spark 作业的输入源或输出接收器。 将 [Spark](http://spark.apache.org/) 连接到 [Azure Cosmos DB](https://www.azure.cn/home/features/cosmos-db/) 后，可以使用 Azure Cosmos DB 快速保存和查询数据，更快地解决瞬息万变的数据科学问题。 Spark 到 Azure Cosmos DB 的连接器有效利用本机 Azure Cosmos DB 托管的索引。 针对快速变化的多个区域分布的数据执行分析和向下推送谓词筛选时，这些索引可用于实现可更新的列（范围从物联网 (IoT) 到数据科学以及分析方案）。\r <!-- Not Available  [Perform graph analytics using Spark and Apache TinkerPop Gremlin](spark-connector-graph.md) -->\r <!-- Notice: 全球 to 多个区域 -->\r \r ## <a name=\"download\"></a>下载\r \r 若要开始使用，请从 GitHub 上的 [azure-cosmosdb-spark](https://github.com/Azure/azure-cosmosdb-spark/) 存储库中下载 Spark 到 Azure Cosmos DB 连接器。\r \r ## <a name=\"connector-components\"></a>连接器组件\r \r 连接器利用以下组件：\r \r * 使用 [Azure Cosmos DB](http://documentdb.com)，客户可跨任意数量的地理区域弹性缩放吞吐量与存储。 该服务提供：\r    * 统包的[多个区域分布](distribute-data-globally.md)和水平缩放\r <!-- Notice: 全球 to 多个区域 -->\r    * 准确率达 99% 的有保证单一数位延迟\r    * [多个妥善定义的一致性模型](consistency-levels.md)\r    * 具有多宿主功能的有保证高可用性\r    * 所有功能都由行业领先的全面的[服务级别协议](https://www.azure.cn/support/sla/cosmos-db) (SLA) 提供支持。\r \r * [Apache Spark](http://spark.apache.org/) 是一个强大开源处理引擎，专为速度、易用性和复杂分析而打造。\r \r * 通过 [Apache Spark on Azure HDInsight](../hdinsight/hdinsight-apache-spark-jupyter-spark-sql.md)，可以使用 [Azure HDInsight](https://www.azure.cn/home/features/hdinsight/apache-spark/) 在云中为任务关键型部署方案部署 Apache Spark。\r \r 官方支持的版本：\r \r | 组件 | 版本 |\r |---------|-------|\r |Apache Spark|2.0+|\r | Scala| 2.11|\r | Azure DocumentDB Java SDK | 1.10.0 |\r \r 本文将帮助你使用 Python（通过 pyDocumentDB）和 Scala 接口运行一些简单的示例。\r \r 可使用两种方法连接 Apache Spark 和 Azure Cosmos DB：\r - 通过 [Azure DocumentDB Python SDK](https://github.com/Azure/azure-documentdb-python) 使用 pyDocumentDB。\r - 利用 [Azure DocumentDB Java SDK](https://github.com/Azure/azure-documentdb-java) 创建基于 Java 的 Spark 到 Azure Cosmos DB 的连接器。\r \r ## <a name=\"pydocumentdb-implementation\"></a>pyDocumentDB 实现\r 使用最新的 [pyDocumentDB SDK](https://github.com/Azure/azure-documentdb-python) 可将 Spark 连接到 Azure Cosmos DB，如下图所示：\r \r ![通过 pyDocumentDB DB 从 Spark 流到 Azure Cosmos DB 的数据流](./media/spark-connector/spark-pydocumentdb.png)\r \r ### <a name=\"data-flow-of-the-pydocumentdb-implementation\"></a>pyDocumentDB 实现的数据流\r \r 数据流如下所示：\r \r 1. Spark 主节点通过 pyDocumentDB 连接到 Azure Cosmos DB 网关节点。 用户只需指定 Spark 和 Azure Cosmos DB 连接。 到各自的主节点和网关节点的连接对用户而言是透明的。\r 2. 网关节点向 Azure Cosmos DB 发出查询，并针对数据节点中的集合分区运行查询。 这些查询的响应发回到网关节点，结果集返回到 Spark 主节点。\r 3. 后续查询（例如，针对 Spark 数据框架执行的查询）将发送到 Spark 工作节点进行处理。\r \r Spark 与 Azure Cosmos DB 之间的通信仅限于 Spark 主节点和 Azure Cosmos DB 网关节点。  查询速度与这两个节点之间的传输层允许的速度相同。\r \r ### <a name=\"install-pydocumentdb\"></a>安装 pyDocumentDB\r 可以使用 **pip** 在驱动程序节点上安装 pyDocumentDB，例如：\r \r ```\r pip install pyDocumentDB\r ```\r \r ### <a name=\"connect-spark-to-azure-cosmos-db-via-pydocumentdb\"></a>通过 pyDocumentDB 将 Spark 连接到 Azure Cosmos DB\r 由于通信传输的简单性，使用 pyDocumentDB 执行从 Spark 到 Azure Cosmos DB 的查询相对简单。\r \r 以下代码片段演示了如何在 Spark 上下文中使用 pyDocumentDB。\r \r ```\r # Import Necessary Libraries\r import pydocumentdb\r from pydocumentdb import document_client\r from pydocumentdb import documents\r import datetime\r \r # Configuring the connection policy (allowing for endpoint discovery)\r connectionPolicy = documents.ConnectionPolicy()\r connectionPolicy.EnableEndpointDiscovery\r connectionPolicy.PreferredLocations = [\"China North\", \"China East\"]\r \r # Set keys to connect to Azure Cosmos DB\r masterKey = 'le1n99i1w5l7uvokJs3RT5ZAH8dc3ql7lx2CG0h0kK4lVWPkQnwpRLyAN0nwS1z4Cyd1lJgvGUfMWR3v8vkXKA=='\r host = 'https://doctorwho.documents.azure.cn:443/'\r client = document_client.DocumentClient(host, {'masterKey': masterKey}, connectionPolicy)\r ```\r \r 代码片段指明：\r \r * Azure Cosmos DB Python SDK (`pyDocumentDB`) 包含所有必需的连接参数。 例如，首选的位置参数选择读取副本和优先级顺序。\r *  导入所需的库，并配置 masterKey 和主机来创建 Azure Cosmos DB 客户端 (**pydocumentdb.document_client**)。\r \r ### <a name=\"execute-spark-queries-via-pydocumentdb\"></a>通过 pyDocumentDB 执行 Spark 查询\r 以下示例使用前面代码片段中通过指定的只读键创建的 Azure Cosmos DB 实例。 以下代码片段在前面指定的 DoctorWho 帐户中连接到 **airports.codes** 集合，并运行一个查询来提取华盛顿州的机场城市信息。\r \r ```\r # Configure Database and Collections\r databaseId = 'airports'\r collectionId = 'codes'\r \r # Configurations the Azure Cosmos DB client will use to connect to the database and collection\r dbLink = 'dbs/' + databaseId\r collLink = dbLink + '/colls/' + collectionId\r \r # Set query parameter\r querystr = \"SELECT c.City FROM c WHERE c.State='WA'\"\r \r # Query documents\r query = client.QueryDocuments(collLink, querystr, options=None, partition_key=None)\r \r # Query for partitioned collections\r # query = client.QueryDocuments(collLink, query, options= { 'enableCrossPartitionQuery': True }, partition_key=None)\r \r # Push into list `elements`\r elements = list(query)\r ```\r \r 通过 **query** 执行查询后，返回已转换为 Python 列表的 **query_iterable.QueryIterable** 结果。 可以使用以下代码轻松将 Python 列表转换为 Spark 数据框架：\r \r ```\r # Create `df` Spark DataFrame from `elements` Python list\r df = spark.createDataFrame(elements)\r ```\r \r ### <a name=\"why-use-the-pydocumentdb-to-connect-spark-to-azure-cosmos-db\"></a>为何使用 pyDocumentDB 将 Spark 连接到 Azure Cosmos DB？\r 在以下场合，通常使用 pyDocumentDB 将 Spark 连接到 Azure Cosmos DB：\r \r * 你希望使用 Python。\r * 要将 Azure Cosmos DB 中相对较小的结果集返回到 Spark。 请注意，Azure Cosmos DB 中的基础数据集可能很大。 要对 Azure Cosmos DB 源应用筛选器，即运行谓词筛选器。  \r \r ## <a name=\"spark-to-azure-cosmos-db-connector\"></a>Spark 到 Azure Cosmos DB 的连接器\r \r Spark 到 Azure Cosmos DB 的连接器使用 [Azure DocumentDB Java SDK](https://github.com/Azure/azure-documentdb-java)，并在 Spark 工作节点与 Azure Cosmos DB 之间移动数据，如下图所示：\r \r ![Spark 到 Azure Cosmos DB 的连接器中的数据流](./media/spark-connector/spark-connector.png)\r \r 数据流如下所示：\r \r 1. Spark 主节点连接到 Azure Cosmos DB 网关节点，以获取分区映射。 用户只需指定 Spark 和 Azure Cosmos DB 连接。 到各自的主节点和网关节点的连接对用户而言是透明的。\r 2. 此信息返回给 Spark 主节点。  此时，应该能够分析查询，确定需要访问 Azure Cosmos DB 中的哪些分区及其位置。\r 3. 此信息将传送到 Spark 辅助角色节点。\r 4. Spark 工作节点直接连接到 Azure Cosmos DB 分区以提取数据，并将数据返回到 Spark 工作节点中的 Spark 分区。\r \r Spark 与 Azure Cosmos DB 之间的通信速度会大幅提高，因为数据在 Spark 工作节点与 Azure Cosmos DB 数据节点（分区）之间移动。\r \r ### <a name=\"build-the-spark-to-azure-cosmos-db-connector\"></a>构建 Spark 到 Azure Cosmos DB 的连接器\r 目前，连接器项目使用 maven。 若要构建不带依赖项的连接器，可以运行：\r ```\r mvn clean package\r ```\r 也可以从 *releases* 文件夹中下载最新版本的 JAR。\r \r ### <a name=\"include-the-azure-cosmos-db-spark-jar\"></a>包含 Azure Cosmos DB Spark JAR\r 在执行任何代码之前，都需要包含 Azure Cosmos DB Spark JAR。  如果使用 **spark-shell**，则可以使用 **-jar** 选项包含 JAR。  \r \r ```\r spark-shell --master $master --jars /$location/azure-cosmosdb-spark-0.0.3-jar-with-dependencies.jar\r ```\r \r 如果想要执行不带依赖项的 JAR，请使用以下代码：\r \r ```\r spark-shell --master $master --jars /$location/azure-cosmosdb-spark-0.0.3.jar,/$location/azure-documentdb-1.10.0.jar\r ```\r \r 如果正在使用笔记本服务（例如 Azure HDInsight Jupyter 笔记本服务），可以使用 **spark magic** 命令：\r \r ```\r %%configure\r { \"jars\": [\"wasb:///example/jars/azure-documentdb-1.10.0.jar\",\"wasb:///example/jars/azure-cosmosdb-spark-0.0.3.jar\"],\r   \"conf\": {\r     \"spark.jars.excludes\": \"org.scala-lang:scala-reflect\"\r    }\r }\r ```\r \r 使用 **jars** 命令可以包含 **azure-cosmosdb-spark** 所需的两个 JAR（该 JAR 本身以及 Azure DocumentDB Java SDK）并排除 **scala-reflect**，使其不会干扰 Livy 调用（Jupyter 笔记本 > Livy > Spark）。\r \r ### <a name=\"connect-spark-to-azure-cosmos-db-using-the-connector\"></a>使用连接器将 Spark 连接到 Azure Cosmos DB\r 尽管通信传输有点复杂，但使用连接器执行从 Spark 到 Azure Cosmos DB 的查询要快得多。\r \r 以下代码片段演示了如何在 Spark 上下文中使用连接器。\r \r ```\r // Import Necessary Libraries\r import org.joda.time._\r import org.joda.time.format._\r import com.microsoft.azure.cosmosdb.spark.schema._\r import com.microsoft.azure.cosmosdb.spark._\r import com.microsoft.azure.cosmosdb.spark.config.Config\r \r // Configure connection to your collection\r val readConfig2 = Config(Map(\"Endpoint\" -> \"https://doctorwho.documents.azure.cn:443/\",\r \"Masterkey\" -> \"le1n99i1w5l7uvokJs3RT5ZAH8dc3ql7lx2CG0h0kK4lVWPkQnwpRLyAN0nwS1z4Cyd1lJgvGUfMWR3v8vkXKA==\",\r \"Database\" -> \"DepartureDelays\",\r \"preferredRegions\" -> \"China North;China East2;\",\r \"Collection\" -> \"flights_pcoll\",\r \"SamplingRatio\" -> \"1.0\"))\r \r // Create collection connection\r val coll = spark.sqlContext.read.cosmosDB(readConfig2)\r coll.createOrReplaceTempView(\"c\")\r ```\r \r 代码片段指明：\r \r - **azure-cosmosdb-spark** 包含所有必需的连接参数，包括首选位置。 例如，可以选择读取副本和优先级顺序。\r - 只需导入所需的库，并配置 masterKey 和主机来创建 Azure Cosmos DB 客户端。\r \r ### <a name=\"execute-spark-queries-via-the-connector\"></a>通过连接器执行 Spark 查询\r \r 以下示例使用前面代码片段中通过指定的只读键创建的 Azure Cosmos DB 实例。 以下代码片段连接到 DepartureDelays.flights_pcoll 集合（前面指定的 DoctorWho 帐户），并运行一个查询来提取从西雅图出发的航班的航班延迟信息。\r \r ```\r // Queries\r var query = \"SELECT c.date, c.delay, c.distance, c.origin, c.destination FROM c WHERE c.origin = 'SEA'\"\r val df = spark.sql(query)\r \r // Run DF query (count)\r df.count()\r \r // Run DF query (show)\r df.show()\r ```\r \r ### <a name=\"why-use-the-spark-to-azure-cosmos-db-connector-implementation\"></a>为何使用 Spark 到 Azure Cosmos DB 的连接器实现？\r \r 在以下场合，通常使用连接器将 Spark 连接到 Azure Cosmos DB：\r \r * 要使用 Scala，并对其进行更新以包含[问题 3：添加 Python 包装和示例](https://github.com/Azure/azure-cosmosdb-spark/issues/3)中所述的 Python 包装。\r * 要在 Apache Spark 与 Azure Cosmos DB 之间传输大量的数据。\r \r 若要大致了解查询性能的差异，请参阅[查询测试运行 wiki 文章](https://github.com/Azure/azure-cosmosdb-spark/wiki/Query-Test-Runs)。\r \r ## <a name=\"distributed-aggregation-example\"></a>分布式聚合示例\r 本部分举例说明了如何结合使用 Apache Spark 和 Azure Cosmos DB 来执行分布式聚合与分析。 Azure Cosmos DB 已经支持聚合，[使用 Azure Cosmos DB 在多个区域范围内聚合](https://azure.microsoft.com/blog/planet-scale-aggregates-with-azure-documentdb/)博客中对此进行了讨论。 下面是可以通过 Apache Spark 将其提升到下一级别的方式。\r <!-- Notice: 全球 to 多个区域 -->\r \r 请注意，这些聚合与 [Spark 到 Azure Cosmos DB 的连接器 Notebook](https://github.com/Azure/azure-cosmosdb-spark/blob/master/samples/notebooks/Spark-to-CosmosDB_Connector.ipynb) 相关。\r \r ### <a name=\"connect-to-flights-sample-data\"></a>连接到航班示例数据\r 这些聚合示例访问 **DoctorWho** Azure Cosmos DB 数据库中存储的一些飞行性能数据。 若要连接到这些数据，需要利用以下代码片段：\r \r ```\r // Import Spark to Azure Cosmos DB connector\r import com.microsoft.azure.cosmosdb.spark.schema._\r import com.microsoft.azure.cosmosdb.spark._\r import com.microsoft.azure.cosmosdb.spark.config.Config\r \r // Connect to Azure Cosmos DB Database\r val readConfig2 = Config(Map(\"Endpoint\" -> \"https://doctorwho.documents.azure.cn:443/\",\r \"Masterkey\" -> \"le1n99i1w5l7uvokJs3RT5ZAH8dc3ql7lx2CG0h0kK4lVWPkQnwpRLyAN0nwS1z4Cyd1lJgvGUfMWR3v8vkXKA==\",\r \"Database\" -> \"DepartureDelays\",\r \"preferredRegions\" -> \"China North;China East 2;\",\r \"Collection\" -> \"flights_pcoll\",\r \"SamplingRatio\" -> \"1.0\"))\r \r // Create collection connection\r val coll = spark.sqlContext.read.cosmosDB(readConfig2)\r coll.createOrReplaceTempView(\"c\")\r ```\r \r 我们还要使用此代码片段运行一个基本查询，以便将 Azure Cosmos DB 中的筛选数据集传输到 Spark（后者可以执行分布式聚合）。 在本例中，我们要查询从西雅图 (SEA) 出发的航班。\r \r ```\r // Run, get row count, and time query\r val originSEA = spark.sql(\"SELECT c.date, c.delay, c.distance, c.origin, c.destination FROM c WHERE c.origin = 'SEA'\")\r originSEA.createOrReplaceTempView(\"originSEA\")\r ```\r \r 从 Jupyter 笔记本服务运行查询后，生成了以下结果。  请注意，所有代码片段都是泛用性的，并不特定于任一服务。\r \r ### <a name=\"running-limit-and-count-queries\"></a>运行 LIMIT 和 COUNT 查询\r 就像我们在 SQL/Spark SQL 中经常所做的那样，让我们从 **LIMIT** 查询开始：\r \r ![Spark LIMIT 查询](./media/spark-connector/spark-sql-query.png)\r \r 下一个查询是简单快速的 **COUNT** 查询：\r \r ![Spark COUNT 查询](./media/spark-connector/spark-count-query.png)\r \r ### <a name=\"group-by-query\"></a>GROUP BY 查询\r 接下来，我们可以对 Azure Cosmos DB 数据库轻松运行 **GROUP BY** 查询：\r \r ```\r select destination, sum(delay) as TotalDelays\r from originSEA\r group by destination\r order by sum(delay) desc limit 10\r ```\r \r ![Spark  GROUP BY 查询图表](./media/spark-connector/group-by-query-graph.png)\r \r ### <a name=\"distinct-order-by-query\"></a>DISTINCT, ORDER BY 查询\r 下面是 **DISTINCT, ORDER BY** 查询：\r \r ![Spark  GROUP BY 查询图表](./media/spark-connector/order-by-query.png)\r \r ### <a name=\"continue-the-flight-data-analysis\"></a>继续分析航班数据\r 可以使用以下示例查询继续分析航班数据：\r \r #### <a name=\"top-5-delayed-destinations-cities-departing-from-seattle\"></a>从西雅图出发的航班延迟次数最多的 5 个目的地（城市）\r ```\r select destination, sum(delay)\r from originSEA\r where delay < 0\r group by destination\r order by sum(delay) limit 5\r ```\r ![Spark 延迟次数最多的目的地图表](./media/spark-connector/top-delays-graph.png)\r \r #### <a name=\"calculate-median-delays-by-destination-cities-departing-from-seattle\"></a>根据从西雅图出发的航班的目的地城市计算平均延迟时间\r ```\r select destination, percentile_approx(delay, 0.5) as median_delay\r from originSEA\r where delay < 0\r group by destination\r order by percentile_approx(delay, 0.5)\r ```\r \r ![Spark 平均延迟时间图表](./media/spark-connector/median-delays-graph.png)\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r 从 [azure-cosmosdb-spark](https://github.com/Azure/azure-cosmosdb-spark) GitHub 存储库下载 Spark 到 Azure Cosmos DB 的连接器（如果尚未下载），并浏览该存储库中的其他资源：\r \r * [分布式聚合示例](https://github.com/Azure/azure-cosmosdb-spark/wiki/Aggregations-Examples)\r * [示例脚本和笔记本](https://github.com/Azure/azure-cosmosdb-spark/tree/master/samples)\r \r 此外，还可以查看文章 [Apache Spark SQL、数据框架和数据集指南](http://spark.apache.org/docs/latest/sql-programming-guide.html)以及 [Azure HDInsight 上的 Apache Spark](../hdinsight/hdinsight-apache-spark-jupyter-spark-sql.md)。\r \r <!--Update_Description: wording update-->"}