{"Title":"如何通过 Python 使用 Azure Blob 存储（对象存储）","Description":"使用 Azure Blob 存储（对象存储）将非结构化数据存储在云中。","Content":"# <a name=\"how-to-use-azure-blob-storage-from-python\"></a>如何通过 Python 使用 Azure Blob 存储\r [!INCLUDE [storage-selector-blob-include](../../../includes/storage-selector-blob-include.md)]\r \r [!INCLUDE [storage-try-azure-tools-blobs](../../../includes/storage-try-azure-tools-blobs.md)]\r \r ## <a name=\"overview\"></a>概述\r Azure Blob 存储是一种将非结构化数据作为对象/Blob 存储在云中的服务。 Blob 存储可以存储任何类型的文本或二进制数据，例如文档、媒体文件或应用程序安装程序。 Blob 存储也称为对象存储。\r \r 本指南将演示如何使用 Blob 存储执行常见方案。 这些示例用 Python 编写并使用 [Azure Storage SDK for Python]。 涉及的任务包括上传、列出、下载和删除 Blob。\r \r [!INCLUDE [storage-blob-concepts-include](../../../includes/storage-blob-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../../includes/storage-create-account-include.md)]\r \r ## <a name=\"download-and-install-azure-storage-sdk-for-python\"></a>下载和安装适用于 Python 的 Azure 存储 SDK\r \r 适用于 Python 的 Azure 存储 SDK 需要 Python 2.7、3.3、3.4、3.5 或 3.6，并且包含 4 个不同包：`azure-storage-blob`、`azure-storage-file`、`azure-storage-table` 和 `azure-storage-queue`。 在本教程中，我们要用到 `azure-storage-blob` 包。\r  \r ### <a name=\"install-via-pypi\"></a>通过 PyPi 安装\r \r 要通过 Python 包索引 (PyPI) 安装，请键入：\r \r ```bash\r pip install azure-storage-blob\r ```\r \r \r > [!NOTE]\r > 如果要从用于 Python 的 Azure 存储 SDK 版本 0.36 或更早版本升级，首先需要使用 `pip uninstall azure-storage` 进行卸载，因为我们不再通过单个包的形式发布用于 Python 的存储 SDK 了。\r > \r > \r \r 有关备用安装方法，请访问 [Github 上用于 Python 的 Azure 存储 SDK](https://github.com/Azure/azure-storage-python/)。\r \r ## <a name=\"create-a-container\"></a>创建容器\r 根据要使用的 Blob 的类型，创建 **BlockBlobService**、**AppendBlobService** 或 **PageBlobService** 对象。 以下代码使用 **BlockBlobService** 对象。 在希望在其中以编程方式访问 Azure 块 Blob 存储的任何 Python 文件中，将以下代码添加到文件的顶部附近。\r \r ```python\r from azure.storage.blob import BlockBlobService\r ```\r \r 以下代码使用存储帐户名称和帐户密钥创建一个 **BlockBlobService** 对象。  使用帐户名称和密钥替换“myaccount”和“mykey”。\r \r ```python\r block_blob_service = BlockBlobService(account_name='myaccount', account_key='mykey', endpoint_suffix='core.chinacloudapi.cn')\r ```\r \r [!INCLUDE [storage-container-naming-rules-include](../../../includes/storage-container-naming-rules-include.md)]\r \r 在以下代码示例中，如果容器不存在，可以使用 **BlockBlobService** 对象进行创建。\r \r ```python\r block_blob_service.create_container('mycontainer')\r ```\r \r 默认情况下，新容器是专用容器，因此必须指定存储访问密钥（如之前所做的那样）才能从该容器下载 Blob。 如果要让容器中的 Blob 可供所有人使用，则可以使用以下代码创建容器并传递公共访问级别。\r \r ```python\r from azure.storage.blob import PublicAccess\r block_blob_service.create_container('mycontainer', public_access=PublicAccess.Container)\r ```\r \r 或者，也可以在创建容器后使用以下代码修改该容器。\r \r ```python\r block_blob_service.set_container_acl('mycontainer', public_access=PublicAccess.Container)\r ```\r \r 在此更改后，Internet 上的任何人都可以查看公共容器中的 Blob，但只有可以修改或删除它们。\r \r ## <a name=\"upload-a-blob-into-a-container\"></a>将 Blob 上传到容器中\r 若要创建块 blob 和上传数据，请使用 **create\\_blob\\_from\\_path**、**create\\_blob\\_from\\_stream**、**create\\_blob\\_from\\_bytes** 或 **create\\_blob\\_from\\_text** 方法。 这些方法属于高级方法，用于在数据大小超过 64 MB 时执行必要的分块。\r \r **create\\_blob\\_from\\_path** 用于从指定位置上传文件内容，**create\\_blob\\_from\\_stream** 用于从已经打开的文件/流上传内容。 **create\\_blob\\_from\\_bytes** 用于上传一组字节，**create\\_blob\\_from\\_text** 使用指定的编码（默认为 UTF-8）上传指定的文本值。\r \r 下面的示例将“sunset.png” 文件的内容上传到“myblockblob”Blob。\r \r ```python\r from azure.storage.blob import ContentSettings\r block_blob_service.create_blob_from_path(\r     'mycontainer',\r     'myblockblob',\r     'sunset.png',\r     content_settings=ContentSettings(content_type='image/png')\r             )\r ```\r \r ## <a name=\"list-the-blobs-in-a-container\"></a>列出容器中的 Blob\r 若要列出容器中的 blob，请使用 **list\\_blobs** 方法。 此方法会返回一个生成器。 以下代码将容器中每个 Blob 的“名称”输出到控制台。\r \r ```python\r generator = block_blob_service.list_blobs('mycontainer')\r for blob in generator:\r     print(blob.name)\r ```\r \r ## <a name=\"download-blobs\"></a>下载 Blob\r 若要从 blob 下载数据，请使用 **get\\_blob\\_to\\_path**、**get\\_blob\\_to\\_stream**、**get\\_blob\\_to\\_bytes** 或 **get\\_blob\\_to\\_text**。 这些方法属于高级方法，在数据大小超过 64 MB 时执行必要的分块。\r \r 下面的示例演示了如何使用 **get\\_blob\\_to\\_path** 下载“myblockblob”Blob 的内容，并将其存储到“out-sunset.png”文件。\r \r ```python\r block_blob_service.get_blob_to_path('mycontainer', 'myblockblob', 'out-sunset.png')\r ```\r \r ## <a name=\"delete-a-blob\"></a>删除 Blob\r 最后，若要删除 Blob，请调用 **delete_blob**。\r \r ```python\r block_blob_service.delete_blob('mycontainer', 'myblockblob')\r ```\r \r ## <a name=\"writing-to-an-append-blob\"></a>写入追加 Blob\r 追加 Blob 针对追加操作（例如日志记录）进行了优化。 类似于块 Blob，追加 Blob 由块组成，但是将新的块添加到追加 Blob 时，始终追加到该 Blob 的末尾。 不能更新或删除追加 Blob 中现有的块。 追加 Blob 的块 ID 不公开，因为它们是用于一个块 Blob 的。\r \r 追加 Blob 中的每个块可以有不同的大小，最大为 4 MB，并且追加 Blob 最多可包含 50000 个块。 因此，追加 Blob 的最大大小稍微大于 195 GB（4 MB X 50000 块）。\r \r 下面的示例创建一个新的追加 Blob 并向其追加某些数据，模拟一个简单的日志记录操作。\r \r ```python\r from azure.storage.blob import AppendBlobService\r append_blob_service = AppendBlobService(account_name='myaccount', account_key='mykey', endpoint_suffix='core.chinacloudapi.cn')\r \r # The same containers can hold all types of blobs\r append_blob_service.create_container('mycontainer')\r \r # Append blobs must be created before they are appended to\r append_blob_service.create_blob('mycontainer', 'myappendblob')\r append_blob_service.append_blob_from_text('mycontainer', 'myappendblob', u'Hello, world!')\r \r append_blob = append_blob_service.get_blob_to_text('mycontainer', 'myappendblob')\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 在了解了 Blob 存储的基础知识后，可单击下面的链接了解详细信息。\r \r * [Python 开发人员中心](/develop/python/)\r * [Azure 存储服务 REST API](http://msdn.microsoft.com/library/azure/dd179355)\r * [Azure 存储团队博客]\r * [Azure Storage SDK for Python]\r \r [Azure 存储团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\r [Azure Storage SDK for Python]: https://github.com/Azure/azure-storage-python\r \r <!--Update_Description: add \"Download and Install Azure Storage SDK for Python\" section-->"}