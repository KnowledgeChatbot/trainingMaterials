{"Title":"在 Azure SQL 数据库中监视数据库性能","Description":"了解使用 Azure 工具和动态管理视图监视数据库时可用的选项。","Content":"# <a name=\"monitoring-database-performance-in-azure-sql-database\"></a>在 Azure SQL 数据库中监视数据库性能\r 若要监视 Azure 中的 SQL 数据库的性能，首先需要监视所选数据库性能级别相关的资源利用率。 监视功能可帮助你确定数据库是否超出容量，或者因资源超限而遇到问题，然后确定是否有必要调整数据库的性能级别和[服务层](sql-database-service-tiers.md)。 可以使用 [Azure 门户](https://portal.azure.cn)中的图形工具或使用 SQL [动态管理视图](https://msdn.microsoft.com/library/ms188754.aspx)来监视数据库。\r \r ## <a name=\"monitor-databases-using-the-azure-portal\"></a>使用 Azure 门户监视数据库\r 在 [Azure 门户](https://portal.azure.cn)中，可以通过选择数据库并单击“监视”图表来监视单一数据库的利用率。 这将显示“指标”窗口，可通过单击“编辑图表”按钮来对其进行更改。 添加以下指标：\r \r * CPU 百分比\r * DTU 百分比\r * 数据 IO 百分比\r * 数据库大小百分比\r \r 添加这些指标后，可以继续在“监视”图表上查看它们，并可在“指标”窗口上查看更多详细信息。 **DTU** 的平均利用率百分比。 请参阅[服务层](sql-database-service-tiers.md)一文，了解有关 DTU 的详细信息。\r \r ![在服务层监视数据库性能。](./media/sql-database-service-tiers/sqldb_service_tier_monitoring.png)\r \r 还可针对性能指标配置警报。 在“指标”窗口中单击“添加警报”按钮。 按照向导说明来配置警报。 可选择在指标超出或低于特定阈值时显示警报。\r \r 例如，如果期望数据库上的工作负荷增长，可选择配置在数据库的任意性能指标达到 80% 时发出电子邮件警报。 可将此警报用作预警，来确定何时需要切换到高一级的性能级别。\r \r 性能指标还可以帮助确定能否降级到更低性能级别。 假定正在使用标准 S2 数据库，所有性能指标均显示该数据库在任意给定时间的平均使用率都不超过 10%。 采用标准 S1 很可能使该数据库正常工作。 但是，在决定转换到更低的性能级别之前，请注意出现峰值或波动情况的工作负荷。\r \r ## <a name=\"monitor-databases-using-dmvs\"></a>使用 DMV 监视数据库\r 在门户中公开的相同指标也可以通过系统视图查看：服务器的逻辑 [master](https://msdn.microsoft.com/library/dn269979.aspx) 数据库中的 **sys.resource_stats**，以及用户数据库中的 [sys.dm_db_resource_stats](https://msdn.microsoft.com/library/dn800981.aspx)。 如果需要在更长时间段内监视更粗粒度的数据，请使用 **sys.resource_stats**。 如果需要在较小的时间范围内监视更细粒度的数据，请使用 **sys.dm_db_resource_stats**。 有关详细信息，请参阅 [Azure SQL 数据库性能指南](sql-database-single-database-monitor.md#monitor-resource-use)。\r \r > [!NOTE]\r > 如果在已停用的 Web 和 Business Edition 数据库中使用，**sys.dm_db_resource_stats** 将返回空结果集。\r >\r >\r \r ### <a name=\"monitor-resource-use\"></a>监视资源使用情况\r \r 可以使用 [SQL 数据库 Query Performance Insight](sql-database-query-performance.md) 和 [Query Store](https://msdn.microsoft.com/library/dn817826.aspx) 监视资源使用情况。\r \r 也可以使用以下两个视图来监视使用情况：\r \r * [sys.dm_db_resource_stats](https://msdn.microsoft.com/library/dn800981.aspx)\r * [sys.resource_stats](https://msdn.microsoft.com/library/dn269979.aspx)\r \r #### <a name=\"sysdmdbresourcestats\"></a>sys.dm_db_resource_stats\r 可以在每个 SQL 数据库中使用 [sys.dm_db_resource_stats](https://msdn.microsoft.com/library/dn800981.aspx) 视图。 **Sys.dm_db_resource_stats** 视图显示相对于服务层的最新资源使用数据。 CPU 平均百分比、数据 I/O、日志写入以及内存每 15 秒记录一次，持续记录 1 小时。\r \r 由于此视图提供了更精细的资源使用情况，因此首先将 **sys.dm_db_resource_stats** 用于任何当前状态分析或故障排除。 例如，此查询显示过去一小时的当前数据库平均和最大资源使用情况：\r \r     SELECT  \r         AVG(avg_cpu_percent) AS 'Average CPU use in percent',\r         MAX(avg_cpu_percent) AS 'Maximum CPU use in percent',\r         AVG(avg_data_io_percent) AS 'Average data I/O in percent',\r         MAX(avg_data_io_percent) AS 'Maximum data I/O in percent',\r         AVG(avg_log_write_percent) AS 'Average log write use in percent',\r         MAX(avg_log_write_percent) AS 'Maximum log write use in percent',\r         AVG(avg_memory_usage_percent) AS 'Average memory use in percent',\r         MAX(avg_memory_usage_percent) AS 'Maximum memory use in percent'\r     FROM sys.dm_db_resource_stats;  \r \r 有关其他查询，请参阅 [sys.dm_db_resource_stats](https://msdn.microsoft.com/library/dn800981.aspx) 中的示例。\r \r #### <a name=\"sysresourcestats\"></a>sys.resource_stats\r **master** 数据库中的 [Sys.resource_stats](https://msdn.microsoft.com/library/dn269979.aspx) 视图包含可帮助监视 SQL 数据库在特定服务层和性能级别的性能。 每 5 分钟收集一次数据，并且会保留大约 35 天。 此视图适用于对 SQL 数据库资源使用情况进行较长期的历史分析。\r \r 下图显示了性能级别为 P2 的高级数据库在一周内每小时的 CPU 资源使用情况。 此图从星期一开始显示，先显示 5 个工作日，然后显示周末，应用程序在周末使用的资源要少得多。\r \r ![SQL 数据库资源使用情况](./media/sql-database-performance-guidance/sql_db_resource_utilization.png)\r \r 从数据而言，此数据库当前有一个峰值 CPU 负载刚好超过相对于 P2 性能级别的 50% CPU 使用率（星期二中午）。 如果 CPU 是应用程序资源分布曲线中的决定因素，则可确定 P2 就是适当的性能级别，它能够保证工作负荷始终适当。 如果预期应用程序的资源使用会随时间而增长，则最好是设置额外的资源缓冲，使应用程序不会达到性能级别限制。 如果提高性能级别，则可避免当数据库的功能无法有效处理请求时会发生的错误（这种错误客户也能看到，尤其是在对延迟很敏感的环境中）。 例如，如果数据库支持的应用程序根据数据库调用结果绘制网页，则属于这种情况。\r \r 其他应用程序类型对同一图形可能有不同的解释。 例如，如果某个应用程序尝试每天处理工资数据并使用相同的图表，则使用 P1 性能级别也许就能让此类“批处理作业”模型正常工作。 P1 性能级别有 100 个 DTU，而 P2 性能级别有 200 个 DTU。 P1 性能级别提供的性能是 P2 性能级别的一半。 因此，P2 级别 50% 的 CPU 使用率相当于 P1 级别 100% 的 CPU 使用率。 如果应用程序没有设置超时，则即使有作业耗时 2 小时或 2.5 小时才完成也无关紧要，只要今天完成即可。 此类别的应用程序也许只需使用 P1 性能级别。 一个事实是，白天有几个时段的资源使用率较低，因此可充分利用这一点，将“大高峰”作业分配一部分到当天晚些时候的某个资源使用低谷。 只要作业可以每天按时完成，P1 性能级别就适用于该类型的应用程序（且节省费用）。\r \r Azure SQL 数据库在每个服务器的 **master** 数据库的 **sys.resource_stats** 视图中，公开每个活动数据库的资源耗用信息。 表中的数据以 5 分钟为间隔收集而得。 对于基本、标准和高级服务层，数据可能需要再耗费 5 分钟才会出现在表中，以使此数据更有利于历史分析而非接近实时的分析。 查询 **sys.resource_stats** 视图，以查看数据库的最近历史记录和验证你选择的保留是否提供了所需的性能。\r \r > [!NOTE]\r > 必须连接到逻辑 SQL 数据库服务器的 **master** 数据库，才能查询下面示例中的 **sys.resource_stats**。\r > \r > \r \r 此示例演示如何公开此视图中的数据：\r \r     SELECT TOP 10 *\r     FROM sys.resource_stats\r     WHERE database_name = 'resource1'\r     ORDER BY start_time DESC\r \r ![sys.resource_stats 目录视图](./media/sql-database-performance-guidance/sys_resource_stats.png)\r \r 下面的示例演示可以用不同方式使用 **sys.resource_stats** 目录视图以获取有关 SQL 数据库使用资源的方式的信息：\r \r 1. 若要查看数据库 userdb1 过去一周的资源使用情况，可以运行此查询：\r    \r         SELECT *\r         FROM sys.resource_stats\r         WHERE database_name = 'userdb1' AND\r               start_time > DATEADD(day, -7, GETDATE())\r         ORDER BY start_time DESC;\r 2. 要评估工作负荷与性能级别的适合程度，需要向下钻取资源指标的每个方面：CPU、读取数、写入数、辅助进程数和会话数。 下面是使用 **sys.resource_stats** 的修订查询，用于报告这些资源度量值的平均值和最大值：\r    \r         SELECT\r             avg(avg_cpu_percent) AS 'Average CPU use in percent',\r             max(avg_cpu_percent) AS 'Maximum CPU use in percent',\r             avg(avg_data_io_percent) AS 'Average physical data I/O use in percent',\r             max(avg_data_io_percent) AS 'Maximum physical data I/O use in percent',\r             avg(avg_log_write_percent) AS 'Average log write use in percent',\r             max(avg_log_write_percent) AS 'Maximum log write use in percent',\r             avg(max_session_percent) AS 'Average % of sessions',\r             max(max_session_percent) AS 'Maximum % of sessions',\r             avg(max_worker_percent) AS 'Average % of workers',\r             max(max_worker_percent) AS 'Maximum % of workers'\r         FROM sys.resource_stats\r         WHERE database_name = 'userdb1' AND start_time > DATEADD(day, -7, GETDATE());\r 3. 使用每个资源指标的平均值和最大值信息，可以评估工作负荷与所选性能级别的适合程度。 通常情况下，**sys.resource_stats** 中的平均值可提供一个用于目标大小的良好基准。 它应该是主要测量标杆。 例如，你可能正在使用性能级别为 S2 的标准服务层。 CPU 以及 I/O 读取和写入的平均使用百分比低于 40%，平均辅助进程数低于 50，平均会话数低于 200。 工作负荷可能适合 S1 性能级别。 很轻松就能判断数据库是否在辅助进程和会话限制范围内。 要查看数据库是否适合 CPU 和读写数等更低性能级别，请将更低性能级别的 DTU 数除以当前性能级别的 DTU 数，然后将结果乘以 100：\r    \r     **S1 DTU / S2 DTU * 100 = 20 / 50 * 100 = 40**\r    \r     结果是以百分比表示的两个性能级别之间的相对性能差异。 如果资源使用不超出此量，工作负荷可能适合更低的性能级别。 但是，需要查看资源用量值的所有范围，并确定数据库工作负荷适合更低性能级别的频率（以百分比计）。 以下查询会根据以上示例计算得出的阈值 40%，输出每个资源维度的适合性百分比：\r    \r         SELECT\r             (COUNT(database_name) - SUM(CASE WHEN avg_cpu_percent >= 40 THEN 1 ELSE 0 END) * 1.0) / COUNT(database_name) AS 'CPU Fit Percent'\r             ,(COUNT(database_name) - SUM(CASE WHEN avg_log_write_percent >= 40 THEN 1 ELSE 0 END) * 1.0) / COUNT(database_name) AS 'Log Write Fit Percent'\r             ,(COUNT(database_name) - SUM(CASE WHEN avg_data_io_percent >= 40 THEN 1 ELSE 0 END) * 1.0) / COUNT(database_name) AS 'Physical Data IO Fit Percent'\r         FROM sys.resource_stats\r         WHERE database_name = 'userdb1' AND start_time > DATEADD(day, -7, GETDATE());\r    \r     可以根据数据库服务级别目标 (SLO) 确定工作负荷是否适合更低性能级别。 如果数据库工作负荷 SLO 为 99.9%，而上述查询针对所有三个资源维度返回的值大于 99.9%，则工作负荷可能适合更低性能级别。\r    \r     查看适合性百分比还可以深入分析是否应转到下一个更高的性能级别以满足 SLO。 例如，userdb1 显示过去一周的如下 CPU 使用率：\r    \r    | 平均 CPU 百分比 | 最大 CPU 百分比 |\r    | --- | --- |\r    | 24.5 |100.00 |\r    \r     平均 CPU 大约是性能级别限制的四分之一，这意味着它很适合数据库的性能级别限制。 但是，最大值显示该数据库达到了性能级别的限制。 在这种情况下，是否需要转到下一个更高的性能级别？ 查看工作负荷达到 100% 的次数，并将这种情况与数据库工作负荷 SLO 进行比较。\r    \r         SELECT\r         (COUNT(database_name) - SUM(CASE WHEN avg_cpu_percent >= 100 THEN 1 ELSE 0 END) * 1.0) / COUNT(database_name) AS 'CPU fit percent'\r         ,(COUNT(database_name) - SUM(CASE WHEN avg_log_write_percent >= 100 THEN 1 ELSE 0 END) * 1.0) / COUNT(database_name) AS 'Log write fit percent'\r         ,(COUNT(database_name) - SUM(CASE WHEN avg_data_io_percent >= 100 THEN 1 ELSE 0 END) * 1.0) / COUNT(database_name) AS 'Physical data I/O fit percent'\r         FROM sys.resource_stats\r         WHERE database_name = 'userdb1' AND start_time > DATEADD(day, -7, GETDATE());\r    \r     如果对于三个资源维度中的任何一个维度，此查询返回的值小于 99.9%，请考虑转到下一个更高的性能级别，或使用应用程序优化技术来减少 SQL 数据库上的负载。\r 4. 本练习还应将未来预计的工作负荷增加考虑在内。\r \r 对于弹性池，可以使用本节中所述的方法来监视池中的单个数据库。 但也可总体监视该池。 有关信息，请参阅[监视和管理弹性池](sql-database-elastic-pool-manage-portal.md)。\r \r \r ### <a name=\"maximum-concurrent-requests\"></a>最大并发请求数\r 若要查看并发请求数，请在 SQL 数据库中运行以下 Transact-SQL 查询：\r \r     SELECT COUNT(*) AS [Concurrent_Requests]\r     FROM sys.dm_exec_requests R\r \r 若要分析本地 SQL Server 数据库的工作负荷，请修改此查询，针对要分析的特定数据库进行筛选。 例如，如果有一个名为 MyDatabase 的本地数据库，则以下 Transact-SQL 查询返回该数据库中并发请求的计数：\r \r     SELECT COUNT(*) AS [Concurrent_Requests]\r     FROM sys.dm_exec_requests R\r     INNER JOIN sys.databases D ON D.database_id = R.database_id\r     AND D.name = 'MyDatabase'\r \r 这只是某一时刻的快照。 若要更好地了解工作负荷和并发请求需求，需在一定时间内收集多个样本。\r \r ### <a name=\"maximum-concurrent-logins\"></a>最大并发登录数\r 可以通过分析用户和应用程序模式来了解登录频率。 还可以在测试环境中运行实际负荷，确保不会超过本文所介绍的这样或那样的限制。 无法通过单一查询或动态管理视图 (DMV) 了解并发登录计数或历史记录。\r \r 如果多个客户端使用相同的连接字符串，该服务也会对每个登录名进行身份验证。 如果 10 个用户使用相同的用户名和密码同时连接到数据库，则会有 10 个并发登录。 此限制仅针对使用登录名进行身份验证的那段时间。 如果这 10 个用户依次连接到数据库，则并发登录数始终不会超过 1。\r \r > [!NOTE]\r > 此限制目前不适用于弹性池中的数据库。\r > \r > \r \r ### <a name=\"maximum-sessions\"></a>最大会话数\r 若要查看当前的活动会话数，请在 SQL 数据库中运行以下 Transact-SQL 查询：\r \r     SELECT COUNT(*) AS [Sessions]\r     FROM sys.dm_exec_connections\r \r 若要分析本地 SQL Server 工作负荷，可以对查询进行修改，使之专注于特定的数据库。 此查询有助于确定数据库可能的会话需求（如果考虑将其移至 Azure SQL 数据库）。\r \r     SELECT COUNT(*)  AS [Sessions]\r     FROM sys.dm_exec_connections C\r     INNER JOIN sys.dm_exec_sessions S ON (S.session_id = C.session_id)\r     INNER JOIN sys.databases D ON (D.database_id = S.database_id)\r     WHERE D.name = 'MyDatabase'\r \r 同样，这些查询返回时间点计数。 如果在一段内收集多个样本，则会对会话的使用情况有最佳了解。\r \r 对于 SQL 数据库分析，也可以通过查询 [sys.resource_stats](https://msdn.microsoft.com/library/dn269979.aspx) 视图并查看 **active_session_count** 列获取会话的历史统计信息。 \r \r ## <a name=\"next-steps\"></a>后续步骤\r \r - 使用 [Azure SQL 数据库自动优化](sql-database-automatic-tuning.md)自动优化数据库索引和查询执行计划。\r <!--Update_Description: add \"Monitor resource use\", \"Maximum concurrent requests\", \"Maximum concurrent logins\"and \"Maximum sessions\" sections-->"}