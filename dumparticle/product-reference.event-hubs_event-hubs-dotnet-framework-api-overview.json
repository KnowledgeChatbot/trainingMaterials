{"Title":"Azure 事件中心 .NET Framework API 概述","Description":"汇总了一些重要的事件中心 .NET Framework 客户端 API。","Content":"# <a name=\"event-hubs-net-framework-api-overview\"></a>事件中心 .NET Framework API 概述\r 本文汇总了一些重要的事件中心 .NET Framework 客户端 API。 有两个类别：管理 API 和运行时 API。 运行时 API 包括发送和接收消息所需的全部操作。 借助管理操作，可以通过创建、更新和删除实体来管理事件中心实体状态。\r \r 监视方案跨越管理操作和运行时操作。 有关 .NET API 的详细参考文档，请参阅[服务总线 .NET](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging) 和 [EventProcessorHost API](https://docs.microsoft.com/dotnet/api/microsoft.azure.eventhubs.processor) 参考。\r \r ## <a name=\"management-apis\"></a>管理 API\r 若要执行以下管理操作，必须对事件中心命名空间具有 **管理** 权限：\r \r ### <a name=\"create\"></a>创建\r ```csharp\r // Create the event hub\r var ehd = new EventHubDescription(eventHubName);\r ehd.PartitionCount = SampleManager.numPartitions;\r await namespaceManager.CreateEventHubAsync(ehd);\r ```\r \r ### <a name=\"update\"></a>更新\r ```csharp\r var ehd = await namespaceManager.GetEventHubAsync(eventHubName);\r \r // Create a customer SAS rule with Manage permissions\r ehd.UserMetadata = \"Some updated info\";\r var ruleName = \"myeventhubmanagerule\";\r var ruleKey = SharedAccessAuthorizationRule.GenerateRandomKey();\r ehd.Authorization.Add(new SharedAccessAuthorizationRule(ruleName, ruleKey, new AccessRights[] {AccessRights.Manage, AccessRights.Listen, AccessRights.Send} )); \r await namespaceManager.UpdateEventHubAsync(ehd);\r ```\r \r ### <a name=\"delete\"></a>删除\r ```csharp\r await namespaceManager.DeleteEventHubAsync(\"Event Hub name\");\r ```\r \r ## <a name=\"run-time-apis\"></a>运行时 API\r ### <a name=\"create-publisher\"></a>创建发布者\r ```csharp\r // EventHubClient model (uses implicit factory instance, so all links on same connection)\r var eventHubClient = EventHubClient.Create(\"Event Hub name\");\r ```\r \r ### <a name=\"publish-message\"></a>发布消息\r ```csharp\r // Create the device/temperature metric\r var info = new MetricEvent() { DeviceId = random.Next(SampleManager.NumDevices), Temperature = random.Next(100) };\r var data = new EventData(new byte[10]); // Byte array\r var data = new EventData(Stream); // Stream \r var data = new EventData(info, serializer) //Object and serializer \r {\r     PartitionKey = info.DeviceId.ToString()\r };\r \r // Set user properties if needed\r data.Properties.Add(\"Type\", \"Telemetry_\" + DateTime.Now.ToLongTimeString());\r \r // Send single message async\r await client.SendAsync(data);\r ```\r \r ### <a name=\"create-consumer\"></a>创建使用者\r ```csharp\r // Create the Event Hubs client\r var eventHubClient = EventHubClient.Create(EventHubName);\r \r // Get the default consumer group\r var defaultConsumerGroup = eventHubClient.GetDefaultConsumerGroup();\r \r // All messages\r var consumer = await defaultConsumerGroup.CreateReceiverAsync(partitionId: index);\r \r // From one day ago\r var consumer = await defaultConsumerGroup.CreateReceiverAsync(partitionId: index, startingDateTimeUtc:DateTime.Now.AddDays(-1));\r \r // From specific offset, -1 means oldest\r var consumer = await defaultConsumerGroup.CreateReceiverAsync(partitionId: index,startingOffset:-1); \r ```\r \r ### <a name=\"consume-message\"></a>使用消息\r ```csharp\r var message = await consumer.ReceiveAsync();\r \r // Provide a serializer\r var info = message.GetBody<Type>(Serializer)\r \r // Get a byte[]\r var info = message.GetBytes(); \r msg = UnicodeEncoding.UTF8.GetString(info);\r ```\r \r ## <a name=\"event-processor-host-apis\"></a>事件处理程序主机 API\r 这些 API 通过在可用工作进程之间分布分区，为可能变为不可用的工作进程提供复原能力。\r \r ```csharp\r // Checkpointing is done within the SimpleEventProcessor and on a per-consumerGroup per-partition basis, workers resume from where they last left off.\r // Use the EventData.Offset value for checkpointing yourself, this value is unique per partition.\r \r var eventHubConnectionString = System.Configuration.ConfigurationManager.AppSettings[\"Microsoft.ServiceBus.ConnectionString\"];\r var blobConnectionString = System.Configuration.ConfigurationManager.AppSettings[\"AzureStorageConnectionString\"]; // Required for checkpoint/state\r \r var eventHubDescription = new EventHubDescription(EventHubName);\r var host = new EventProcessorHost(WorkerName, EventHubName, defaultConsumerGroup.GroupName, eventHubConnectionString, blobConnectionString);\r await host.RegisterEventProcessorAsync<SimpleEventProcessor>();\r \r // To close\r await host.UnregisterEventProcessorAsync();\r ```\r \r [IEventProcessor](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging.ieventprocessor) 接口定义如下：\r \r ```csharp\r public class SimpleEventProcessor : IEventProcessor\r {\r     IDictionary<string, string> map;\r     PartitionContext partitionContext;\r \r     public SimpleEventProcessor()\r     {\r         this.map = new Dictionary<string, string>();\r     }\r \r     public Task OpenAsync(PartitionContext context)\r     {\r         this.partitionContext = context;\r \r         return Task.FromResult<object>(null);\r     }\r \r     public async Task ProcessEventsAsync(PartitionContext context, IEnumerable<EventData> messages)\r     {\r         foreach (EventData message in messages)\r         {\r             // Process messages here\r         }\r \r         // Checkpoint when appropriate\r         await context.CheckpointAsync();\r \r     }\r \r     public async Task CloseAsync(PartitionContext context, CloseReason reason)\r     {\r         if (reason == CloseReason.Shutdown)\r         {\r             await context.CheckpointAsync();\r         }\r     }\r }\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 若要了解有关事件中心方案的详细信息，请访问以下链接：\r \r * [什么是 Azure 事件中心？](event-hubs-what-is-event-hubs.md)\r * [事件中心编程指南](event-hubs-programming-guide.md)\r \r 下面提供了 .NET API 参考：\r \r * [Microsoft.ServiceBus.Messaging](https://docs.microsoft.com/dotnet/api/microsoft.servicebus.messaging)\r * [Microsoft.Azure.EventHubs.EventProcessorHost](https://docs.microsoft.com/dotnet/api/microsoft.azure.eventhubs.processor.eventprocessorhost)\r \r <!--Update_Description: update meta properties, update reference link-->"}