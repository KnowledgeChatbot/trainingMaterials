{"Title":"在 Mac OS X 上设置开发环境以使用 Azure Service Fabric","Description":"安装运行时、SDK 和工具并创建本地开发群集。 完成此设置后，可以在 Mac OS X 上构建应用程序。","Content":"# <a name=\"set-up-your-development-environment-on-mac-os-x\"></a>在 Mac OS X 上设置开发环境\r > [!div class=\"op_single_selector\"]\r > * [Windows](service-fabric-get-started.md)\r > * [Linux](service-fabric-get-started-linux.md)\r > * [OSX](service-fabric-get-started-mac.md)\r >\r >  \r \r 可以使用 Mac OS X 生成在 Linux 群集上运行的 Service Fabric 应用程序。本文介绍了如何设置 Mac 以用于开发。\r \r ## <a name=\"prerequisites\"></a>先决条件\r Service Fabric 不在 OS X 本机上运行。为了运行本地 Service Fabric 群集，我们提供了预配置的 Docker 容器映像。 准备事项：\r \r * 至少 4 GB RAM\r * 最新版的 [Docker](https://www.docker.com/)\r * 访问 Service Fabric 单机 Docker 容器[映像](https://hub.docker.com/r/servicefabricoss/service-fabric-onebox/)\r \r > [!TIP]\r > * 可以按照在官方的 Docker [文档](https://docs.docker.com/docker-for-mac/install/#what-to-know-before-you-install)中提到的步骤，在 Mac 上安装 Docker。 \r > * 安装完以后，请按照[此处](https://docs.docker.com/docker-for-mac/#check-versions-of-docker-engine-compose-and-machine)提到的步骤验证其是否已正确安装。\r \r ## <a name=\"create-a-local-container-and-setup-service-fabric\"></a>创建本地容器和设置 Service Fabric\r 若要设置本地 Docker 容器并在其上运行 Service Fabric 群集，请执行以下步骤：\r \r 1. 从 Docker 中心存储库拉取映像：\r \r     ```bash\r     docker pull servicefabricoss/service-fabric-onebox\r     ```\r \r 2. 使用以下内容更新主机上的 Docker 守护程序配置并重启 Docker 守护程序： \r \r     ```json\r     {\r         \"ipv6\": true,\r         \"fixed-cidr-v6\": \"fd00::/64\"\r     }\r     ```\r     可以直接在 docker 安装路径下的 daemon.json（其位置可能因计算机而异，例如 - ~/Library/Containers/com.docker.docker/Data/database/com.docker.driver.amd64-linux/etc/docker/daemon.json）中更新此内容。 建议的更新方法是：转到 Docker 图标 >“首选项”>“守护程序”>“高级”，在该处更新。\r \r 3. 启动带映像的 Service Fabric 单机容器实例：\r \r     ```bash\r     docker run -itd -p 19080:19080 --name sfonebox servicefabricoss/service-fabric-onebox\r     ```\r     > [!TIP]\r     > 可通过指定容器实例的名称，以更具可读性的方式对其进行处理。 \r \r 4. 以交互性的 ssh 模式登录到 Docker 容器：\r \r     ```bash\r     docker exec -it sfonebox bash\r     ```\r \r 5. 运行安装程序脚本，该脚本会提取所需的依赖项，然后启动容器中的群集。\r \r     ```bash\r     ./setup.sh     # Fetches and installs the dependencies required for Service Fabric to run\r     ./run.sh       # Starts the local cluster\r     ```\r \r 6. 成功完成步骤 5 以后，即可从 Mac 转到 ``http://localhost:19080``，然后便会看到 Service Fabric 资源管理器。\r \r ## <a name=\"set-up-the-service-fabric-cli-sfctl-on-your-mac\"></a>在 Mac 上设置 Service Fabric CLI (sfctl)\r \r 按照 [Service Fabric CLI](service-fabric-cli.md#cli-mac) 中的说明在 Mac 上安装 Service Fabric CLI (`sfctl`)。\r Azure CLI 命令，用来与 Service Fabric 实体（包括群集、应用程序和服务）交互。\r \r ## <a name=\"create-application-on-your-mac-using-yeoman\"></a>使用 Yeoman 在 Mac 上创建应用程序\r \r Service Fabric 提供基架工具，可以借助此类工具，使用 Yeoman 模板生成器从终端创建 Service Fabric 应用程序。 执行以下步骤，确保已经有可以在计算机上运行的 Service Fabric yeoman 模板生成器。\r \r 1. 需在 Mac 上安装 Node.js 和 NPM。 如果没有安装，可使用以下步骤通过 Homebrew 来安装 Node.js 和 NPM。 若要检查安装在 Mac 上的 Node.js 和 NPM 的版本，可以使用 ``-v`` 选项。\r \r     ```bash\r     brew install node\r     node -v\r     npm -v\r     ```\r 2. 通过 NPM 在计算机上安装 [Yeoman](http://yeoman.io/) 模板生成器。\r \r     ```bash\r     npm install -g yo\r     ```\r 3. 请按入门[文档](service-fabric-get-started-linux.md)中的步骤，安装要使用的 Yeoman 生成器。 若要使用 Yeoman 来创建 Service Fabric 应用程序，请执行以下步骤：\r \r     ```bash\r     npm install -g generator-azuresfjava       # for Service Fabric Java Applications\r     npm install -g generator-azuresfguest      # for Service Fabric Guest executables\r     npm install -g generator-azuresfcontainer  # for Service Fabric Container Applications\r     ```\r 4. 若要在 Mac 上生成 Service Fabric Java 应用程序，则需在主机上安装 JDK 1.8 和 Gradle。 如果该应用程序尚未安装，可以使用 [HomeBrew](https://brew.sh/) 进行安装。 \r \r     ```bash\r     brew update\r     brew cask install java\r     brew install gradle\r     ```\r \r ## <a name=\"deploy-application-on-your-mac-from-terminal\"></a>通过 Terminal 在 Mac 上部署应用程序\r \r 创建和生成 Service Fabric 应用程序以后，即可使用 [Service Fabric CLI](service-fabric-cli.md#cli-mac) 部署该应用程序，只需执行以下步骤即可：\r \r 1. 连接到在 Mac 的容器实例中运行的 Service Fabric 群集。\r \r     ```bash\r     sfctl cluster select --endpoint http://localhost:19080\r     ```\r \r 2. 转到项目目录中，运行安装脚本。\r \r     ```bash\r     cd MyProject\r     bash install.sh\r     ```\r \r ## <a name=\"set-up-net-core-20-development\"></a>设置 .NET Core 2.0 开发\r \r 安装[用于 Mac 的 .NET Core 2.0 SDK](https://www.microsoft.com/net/core#macos)，开始[创建 C# Service Fabric 应用程序](service-fabric-create-your-first-linux-application-with-csharp.md)。 .NET Core 2.0 Service Fabric 应用程序包托管在 NuGet.org 上，目前以预览版提供。\r \r ## <a name=\"install-the-service-fabric-plugin-for-eclipse-neon-on-your-mac\"></a>在 Mac 上为 Eclipse Neon 安装 Service Fabric 插件\r \r Service Fabric 为**适用于 Java IDE 的 Eclipse Neon** 提供了一个插件，可简化创建、生成和部署 Java 服务的过程。 可以按照通用[文档](service-fabric-get-started-eclipse.md#install-or-update-the-service-fabric-plug-in-in-eclipse-neon)中提及的安装步骤，安装 Service Fabric Eclipse 插件或将其更新到最新版本。\r \r [Service Fabric Eclipse 文档](service-fabric-get-started-eclipse.md)中提到的所有其他步骤（生成应用程序、向应用程序添加服务、安装/卸载应用程序，等等）在此处也会适用。\r \r 若要使 Service Fabric Eclipse 插件与 Mac 上的 Docker 容器兼容，则除了执行上述步骤，还应使用与主机共享的路径来实例化该容器，如下所示：\r ```bash\r docker run -itd -p 19080:19080 -v /Users/sayantan/work/workspaces/mySFWorkspace:/tmp/mySFWorkspace --name sfonebox servicefabricoss/service-fabric-onebox\r ```\r 其中，``/Users/sayantan/work/workspaces/mySFWorkspace`` 是 Mac 上工作区的完全限定路径，``/tmp/mySFWorkspace`` 是要映射到的容器中的路径。\r \r > [!NOTE]\r >1. 如果你的工作区名称/路径有所不同，请在上面的 ``docker run`` 命令中对同一项进行相应的更新。\r >2. 如果所启动容器的名称不是 ``sfonebox``，请在 Service Fabric 执行组件 Java 应用程序的 ``testclient.sh`` 文件中更新同一项。\r \r ## <a name=\"next-steps\"></a>后续步骤\r <!-- Links -->\r * [使用 Yeoman 在 Linux 上创建和部署第一个 Service Fabric Java 应用程序](service-fabric-create-your-first-linux-application-with-java.md)\r * [使用适用于 Eclipse 的 Service Fabric 插件在 Linux 上创建和部署第一个 Service Fabric Java 应用程序](service-fabric-get-started-eclipse.md)\r * [在 Azure 门户中创建 Service Fabric 群集](service-fabric-cluster-creation-via-portal.md)\r * [使用 Azure 资源管理器创建 Service Fabric 群集](service-fabric-cluster-creation-via-arm.md)\r * [了解 Service Fabric 应用程序模型](service-fabric-application-model.md)\r * [使用 Service Fabric CLI 管理应用程序](service-fabric-application-lifecycle-sfctl.md)\r \r <!-- Images -->\r [cluster-setup-script]: ./media/service-fabric-get-started-mac/cluster-setup-mac.png\r [sfx-mac]: ./media/service-fabric-get-started-mac/sfx-mac.png\r [sf-eclipse-plugin-install]: ./media/service-fabric-get-started-mac/sf-eclipse-plugin-install.png\r [buildship-update]: https://projects.eclipse.org/projects/tools.buildship\r \r <!--Update_Description: update meta properties, add update workflow of creating service fabric on mac -->"}