{"Title":"带 VS Code 扩展的 Azure 资源管理器模板","Description":"使用可在资源管理器模板上运行的 Azure 资源管理器工具扩展。","Content":"# <a name=\"use-visual-studio-code-extension-to-create-azure-resource-manager-template\"></a>使用 Visual Studio Code 扩展创建 Azure 资源管理器模板\r 本文介绍在 Visual Studio Code 中安装和使用 Azure 资源管理器工具扩展有哪些好处。 可以在 VS Code 中创建不带扩展的资源管理器模板，但是该扩展提供自动完成选项，可以简化模板开发。 它会为用户建议可以在模板中使用的模板函数、参数和变量。\r \r 若要完成本文的操作，需安装 [Visual Studio Code](https://code.visualstudio.com/)。\r \r 若要了解与部署和管理 Azure 解决方案相关联的概念，请参阅 [Azure Resource Manager 概述](resource-group-overview.md)。\r \r ## <a name=\"create-the-template\"></a>创建模板\r \r 本文基于在[创建和部署第一个 Azure 资源管理器模板](resource-manager-create-first-template.md)中创建的模板。 如果已有该模板，则可跳过此部分。\r \r 1. 如需创建该模板，请启动 VS Code。 选择“文件” > “新建文件”。 \r \r     ![新建文件](./media/resource-manager-vscode-extension/new-file.png)\r \r 2. 将以下 JSON 语法复制并粘贴到该文件中：\r \r    ```json\r    {\r      \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r      \"contentVersion\": \"1.0.0.0\",\r      \"parameters\": {\r        \"storageSKU\": {\r          \"type\": \"string\",\r          \"allowedValues\": [\r            \"Standard_LRS\",\r            \"Standard_ZRS\",\r            \"Standard_GRS\",\r            \"Standard_RAGRS\",\r            \"Premium_LRS\"\r          ],\r          \"defaultValue\": \"Standard_LRS\",\r          \"metadata\": {\r            \"description\": \"The type of replication to use for the storage account.\"\r          }\r        },   \r        \"storageNamePrefix\": {\r          \"type\": \"string\",\r          \"maxLength\": 11,\r          \"defaultValue\": \"storage\",\r          \"metadata\": {\r            \"description\": \"The value to use for starting the storage account name. Use only lowercase letters and numbers.\"\r          }\r        }\r      },\r      \"variables\": {\r        \"storageName\": \"[concat(toLower(parameters('storageNamePrefix')), uniqueString(resourceGroup().id))]\"\r      },\r      \"resources\": [\r        {\r          \"name\": \"[variables('storageName')]\",\r          \"type\": \"Microsoft.Storage/storageAccounts\",\r          \"apiVersion\": \"2016-01-01\",\r          \"sku\": {\r            \"name\": \"[parameters('storageSKU')]\"\r          },\r          \"kind\": \"Storage\",\r          \"location\": \"[resourceGroup().location]\",\r          \"tags\": {},\r          \"properties\": {\r            \"encryption\":{\r              \"services\":{\r                \"blob\":{\r                  \"enabled\":true\r                }\r              },\r              \"keySource\":\"Microsoft.Storage\"\r            }\r          }\r        }\r      ],\r      \"outputs\": {  }\r    }\r    ```\r \r 3. 在本地文件夹中将该文件另存为 azuredeploy.json。\r \r     ![保存模板](./media/resource-manager-vscode-extension/save-template.png)\r \r ## <a name=\"install-the-extension\"></a>安装扩展\r \r 1. 在 VS Code 中选择“扩展”。\r \r     ![选择扩展](./media/resource-manager-vscode-extension/select-extensions.png)\r \r 2. 搜索“Azure 资源管理器工具”，然后选择“安装”。\r \r     ![安装扩展](./media/resource-manager-vscode-extension/install-extension.png)\r \r 3. 若要完成扩展的安装，请选择“重新加载”。\r \r ## <a name=\"edit-the-template\"></a>编辑模板\r \r 1. 打开 azuredeploy.json 文件。\r \r 2. 扩展会检索所有可用的[模板函数](resource-group-template-functions.md)， 并且会读取在模板中定义的参数和变量。 若要查看此功能，请向 outputs 节添加两个值。 在模板中，将 outputs 节替换为：\r \r    ```json\r    \"outputs\": { \r        \"groupLocation\": {\r          \"type\": \"string\",\r          \"value\": \"\"\r        },\r        \"storageUri\": {\r          \"type\": \"string\",\r          \"value\": \"\"\r        }\r    }\r    ```\r \r 3. 将光标置于 groupLocation 中值的引号内。 键入左方括号 (`[`)。 注意，扩展会立即建议可用的模板函数。\r \r     ![显示可用函数](./media/resource-manager-vscode-extension/available-functions.png)\r \r 4. 开始键入 resourceGroup。 显示 `resourceGroup()` 函数时，按 Tab 或 Enter。\r \r     ![选择 resourceGroup 函数](./media/resource-manager-vscode-extension/show-resourcegroup.png)\r \r 5. 该扩展会填充函数语法。 [resourceGroup](resource-group-template-functions-resource.md#resourcegroup) 函数不接受参数。 在右圆括号后添加句点。 该扩展提供的属性适用于 `resourceGroup()` 函数返回的对象。 选择 `location`。\r \r     ![选择属性](./media/resource-manager-vscode-extension/resourcegroup-properties.png)\r \r 6. 在 location 后添加右方括号。\r \r    ```json\r    \"outputs\": { \r        \"groupLocation\": {\r          \"type\": \"string\",\r          \"value\": \"[resourceGroup().location]\"\r        },\r        \"storageUri\": {\r          \"type\": \"string\",\r          \"value\": \"\"\r        }\r    }\r    ```\r \r 7. 现在，请将光标置于 storageUri 的引号内。 再次键入左方括号。 开始键入 reference。 选定该函数后，按 Tab 或 Enter。\r \r     ![选择 reference](./media/resource-manager-vscode-extension/add-reference.png)\r \r 8. [reference](resource-group-template-functions-resource.md#reference) 接受资源 ID 或资源名称作为参数。 变量中已经有了存储帐户的名称。 键入 var，然后选择 Ctrl+space。 该扩展会建议 variables 函数。\r \r     ![选择变量](./media/resource-manager-vscode-extension/add-variable.png)\r \r     按 Tab 或 Enter。\r \r 9. [variables](resource-group-template-functions-deployment.md#variables) 函数需要变量的名称。 在圆括号内添加单引号。 该扩展提供在模板中定义的变量的名称。\r \r     ![显示变量](./media/resource-manager-vscode-extension/show-variables.png) \r \r 10. 选择 storageName 变量。 添加右方括号。 以下示例显示 outputs 节：\r \r    ```json\r    \"outputs\": { \r        \"groupLocation\": {\r          \"type\": \"string\",\r          \"value\": \"[resourceGroup().location]\"\r        },\r        \"storageUri\": {\r          \"type\": \"string\",\r          \"value\": \"[reference(variables('storageName'))]\"\r        }\r    }\r    ```\r \r 最终模板为：\r \r ```json\r {\r   \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r   \"contentVersion\": \"1.0.0.0\",\r   \"parameters\": {\r     \"storageSKU\": {\r       \"type\": \"string\",\r       \"allowedValues\": [\r         \"Standard_LRS\",\r         \"Standard_ZRS\",\r         \"Standard_GRS\",\r         \"Standard_RAGRS\",\r         \"Premium_LRS\"\r       ],\r       \"defaultValue\": \"Standard_LRS\",\r       \"metadata\": {\r         \"description\": \"The type of replication to use for the storage account.\"\r       }\r     },   \r     \"storageNamePrefix\": {\r       \"type\": \"string\",\r       \"maxLength\": 11,\r       \"defaultValue\": \"storage\",\r       \"metadata\": {\r         \"description\": \"The value to use for starting the storage account name. Use only lowercase letters and numbers.\"\r       }\r     }\r   },\r   \"variables\": {\r     \"storageName\": \"[concat(toLower(parameters('storageNamePrefix')), uniqueString(resourceGroup().id))]\"\r   },\r   \"resources\": [\r     {\r       \"name\": \"[variables('storageName')]\",\r       \"type\": \"Microsoft.Storage/storageAccounts\",\r       \"apiVersion\": \"2016-01-01\",\r       \"sku\": {\r         \"name\": \"[parameters('storageSKU')]\"\r       },\r       \"kind\": \"Storage\",\r       \"location\": \"[resourceGroup().location]\",\r       \"tags\": {},\r       \"properties\": {\r         \"encryption\":{\r           \"services\":{\r             \"blob\":{\r               \"enabled\":true\r             }\r           },\r           \"keySource\":\"Microsoft.Storage\"\r         }\r       }\r     }\r   ],\r   \"outputs\": { \r     \"groupLocation\": {\r       \"type\": \"string\",\r       \"value\": \"[resourceGroup().location]\"\r     },\r     \"storageUri\": {\r       \"type\": \"string\",\r       \"value\": \"[reference(variables('storageName'))]\"\r     }\r   }\r }\r ```\r \r ## <a name=\"deploy-template\"></a>部署模板\r \r 已做好部署此模板的准备。 请使用 PowerShell 或 Azure CLI 创建一个资源组。 然后，将存储帐户部署到该资源组。\r \r * 对于 PowerShell，请在包含模板的文件夹中使用以下命令：\r \r    ```powershell\r    Login-AzureRmAccount -EnvironmentName AzureChinaCloud\r \r    New-AzureRmResourceGroup -Name examplegroup -Location \"China East\"\r    New-AzureRmResourceGroupDeployment -ResourceGroupName examplegroup -TemplateFile azuredeploy.json\r    ```\r \r * 若要在本地安装 Azure CLI，请在包含模板的文件夹中使用以下命令：\r \r    ```azurecli\r    az cloud set -n AzureChinaCloud\r az login\r #az cloud set -n AzureCloud\r #return to global azure\r \r    az group create --name examplegroup --location \"China East\"\r    az group deployment create --resource-group examplegroup --template-file azuredeploy.json\r    ```\r \r 当部署完成后，会返回输出值。\r \r ## <a name=\"clean-up-resources\"></a>清理资源\r \r 不再需要时，请通过删除资源组来清理部署的资源。\r \r 对于 PowerShell，请使用：\r \r ```powershell\r Remove-AzureRmResourceGroup -Name examplegroup\r ```\r \r 对于 Azure CLI，请使用：\r \r ```azurecli\r az group delete --name examplegroup\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r * 若要详细了解模板的结构，请参阅 [Authoring Azure Resource Manager templates](resource-group-authoring-templates.md)（创作 Azure Resource Manager 模板）。\r <!-- Not Avaialble (/templates/microsoft.storage/storageaccounts).-->\r * 若要查看许多不同类型的解决方案的完整模型，请参阅 [Azure Quickstart Templates](https://github.com/Azure/azure-quickstart-templates/)（Azure 快速入门模板）。\r \r <!--Update_Description: new articles about VS code extension in Azure Resource Manager -->\r "}