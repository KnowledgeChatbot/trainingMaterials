{"Title":"使用 .NET 通过 Media Encoder Standard 对资产进行编码","Description":"本主题介绍如何使用 .NET 通过 Media Encoder Standard 对资产进行编码。","Content":"# <a name=\"encode-an-asset-with-media-encoder-standard-using-net\"></a>使用 .NET 通过 Media Encoder Standard 对资产进行编码\r 编码作业是媒体服务中最常见的处理操作之一。 可通过创建编码作业将媒体文件从一种编码转换为另一种编码。 进行编码时，可以使用媒体服务内置的 Media Encoder。 也可以使用媒体服务合作伙伴提供的编码器；可通过 Azure 应用商店获取第三方编码器。 \r \r 本主题介绍如何使用 .NET 通过媒体编码器标准 (MES) 对资产进行编码。 Media Encoder Standard 使用[此处](media-services-mes-presets-overview.md)所述的编码器预设之一进行配置。\r \r 建议始终将源文件编码为自适应比特率 MP4 集，然后使用[动态打包](media-services-dynamic-packaging-overview.md)将该集转换为所需的格式。 \r \r 如果输出资产已经过存储加密，则必须配置资产传送策略。 有关详细信息，请参阅[配置资产传送策略](media-services-dotnet-configure-asset-delivery-policy.md)。\r \r > [!NOTE]\r > MES 会生成一个输出文件，其名称包含输入文件名的前 32 个字符。 该名称基于预设文件中指定的内容。 例如，\"FileName\": \"{Basename}_{Index}{Extension}\"。 {Basename} 替换为输入文件名的前 32 个字符。\r > \r > \r \r ### <a name=\"mes-formats\"></a>MES 格式\r [格式和编解码器](media-services-media-encoder-standard-formats.md)\r \r ### <a name=\"mes-presets\"></a>MES 预设\r Media Encoder Standard 使用[此处](media-services-mes-presets-overview.md)所述的编码器预设之一进行配置。\r \r ### <a name=\"input-and-output-metadata\"></a>输入和输出元数据\r 如果使用 MES 为输入资产（或资产）编码，在该编码任务成功完成时，便能获取输出资产。 输出资产包含视频、音频、缩略图、清单等等，具体视你使用的编码预设而定。\r \r 输出资产还包含提供输入资产相关元数据的文件。 元数据 XML 文件的名称采用下列格式：<asset_id>_metadata.xml（例如，41114ad3-eb5e-4c57-8d92-5354e2b7d4a4_metadata.xml），其中 <asset_id> 是输入资产的 AssetId 值。 [此处](media-services-input-metadata-schema.md)描述了此输入元数据 XML 的架构。\r \r 输出资产还包含提供输出资产相关元数据的文件。 元数据 XML 文件的名称采用下列格式：<source_file_name>_manifest.xml（例如，BigBuckBunny_manifest.xml）。 [此处](media-services-output-metadata-schema.md)描述了此输出元数据 XML 的架构。\r \r 如果想要检查这两个元数据文件中的任意一个，可以创建 SAS 定位器并将文件下载到本地计算机。 可以就如何创建 SAS 定位器并下载使用媒体服务 .NET SDK 扩展的文件找到相关示例。\r \r ## <a name=\"download-sample\"></a>下载示例\r 可从[此处](https://azure.microsoft.com/documentation/samples/media-services-dotnet-on-demand-encoding-with-media-encoder-standard/)获取并运行说明如何使用 MES 进行编码的示例。\r \r ## <a name=\"net-sample-code\"></a>.NET 示例代码\r \r 以下代码示例使用媒体服务 .NET SDK 执行下列任务：\r \r * 创建编码作业。\r * 获取对 Media Encoder Standard 编码器的引用。\r * 指定使用[自适应流式处理](media-services-autogen-bitrate-ladder-with-mes.md)预设。 \r * 将一个编码任务添加到该作业。 \r * 指定要编码的输入资产。\r * 创建要包含所编码资产的输出资产。\r * 添加事件处理程序以检查作业进度。\r * 提交作业。\r \r #### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r \r 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r \r #### <a name=\"example\"></a>示例 \r ```C#\r using System;\r using System.Linq;\r using System.Configuration;\r using System.IO;\r using System.Threading;\r using Microsoft.WindowsAzure.MediaServices.Client;\r \r namespace MediaEncoderStandardSample\r {\r     class Program\r     {\r         private static readonly string _AADTenantDomain =\r             ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r         private static readonly string _RESTAPIEndpoint =\r             ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r \r         // Field for service context.\r         private static CloudMediaContext _context = null;\r \r         private static readonly string _supportFiles =\r             Path.GetFullPath(@\"../..\\Media\");\r \r         static void Main(string[] args)\r         {\r             var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r             var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r \r             _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r \r             // Get an uploaded asset.\r             var asset = _context.Assets.FirstOrDefault();\r \r             // Encode and generate the output using the \"Adaptive Streaming\" preset.\r             EncodeToAdaptiveBitrateMP4Set(asset);\r \r             Console.ReadLine();\r         }\r \r         static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\r         {\r             // Declare a new job.\r             IJob job = _context.Jobs.Create(\"Media Encoder Standard Job\");\r             // Get a media processor reference, and pass to it the name of the \r             // processor to use for the specific task.\r             IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\r \r             // Create a task with the encoding details, using a string preset.\r             // In this case \"Adaptive Streaming\" preset is used.\r             ITask task = job.Tasks.AddNew(\"My encoding task\",\r                 processor,\r                 \"Adaptive Streaming\",\r                 TaskOptions.None);\r \r             // Specify the input asset to be encoded.\r             task.InputAssets.Add(asset);\r             // Add an output asset to contain the results of the job. \r             // This output is specified as AssetCreationOptions.None, which \r             // means the output asset is not encrypted. \r             task.OutputAssets.AddNew(\"Output asset\",\r                 AssetCreationOptions.None);\r \r             job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\r             job.Submit();\r             job.GetExecutionProgressTask(CancellationToken.None).Wait();\r \r             return job.OutputMediaAssets[0];\r         }\r \r         private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\r         {\r             Console.WriteLine(\"Job state changed event:\");\r             Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r             Console.WriteLine(\"  Current state: \" + e.CurrentState);\r             switch (e.CurrentState)\r             {\r                 case JobState.Finished:\r                     Console.WriteLine();\r                     Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\r                     break;\r                 case JobState.Canceling:\r                 case JobState.Queued:\r                 case JobState.Scheduled:\r                 case JobState.Processing:\r                     Console.WriteLine(\"Please wait...\\n\");\r                     break;\r                 case JobState.Canceled:\r                 case JobState.Error:\r \r                     // Cast sender as a job.\r                     IJob job = (IJob)sender;\r \r                     // Display or log error details as needed.\r                     break;\r                 default:\r                     break;\r             }\r         }\r \r         private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r         {\r             var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\r             ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\r \r             if (processor == null)\r                 throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\r \r             return processor;\r         }\r     }\r }\r ```\r ## <a name=\"next-steps\"></a>后续步骤\r [如何使用 Media Encoder Standard 通过 .NET 来生成缩略图](media-services-dotnet-generate-thumbnail-with-mes.md)\r [媒体服务编码概述](media-services-encode-asset.md)\r <!--Update_Description: update code to use AAD token instead of ACS-->\r "}