{"Title":"横向扩展 Azure SQL 数据库","Description":"如何使用弹性数据库客户端库 ShardMapManager","Content":"# <a name=\"scale-out-databases-with-the-shard-map-manager\"></a>使用分片映射管理器扩大数据库\r 若要轻松地扩大 SQL Azure 上的数据库，请使用分片映射管理器。 分片映射管理器是一个特殊的数据库，它维护一个分片集中有关所有分片（数据库）的全局映射信息。 元数据允许应用程序基于 **分片键**值连接到正确的数据库。 此外，在集中的每个分片都包含跟踪本地分片数据的映射（称为 shardlet）。 \r \r ![分片映射管理](./media/sql-database-elastic-scale-shard-map-management/glossary.png)\r \r 了解如何构建这些映射对于分片映射管理至关重要。 使用[弹性数据库客户端库](sql-database-elastic-database-client-library.md)中发现的 [ShardMapManager 类](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmapmanager.aspx)来完成此操作。  \r \r ## <a name=\"shard-maps-and-shard-mappings\"></a>分片映射\r 对于每个分片，必须选择要创建的分片映射类型。 选择取决于数据库架构： \r \r 1. 每个数据库一个租户  \r 2. 每个数据库多个租户（两种类型）：\r    1. 列表映射\r    2. 范围映射\r \r 对于单租户模型，创建“列表映射”  分片映射。 单租户模型将每个租户分配给一个数据库。 这是适用于 SaaS 开发人员的有效模型，因为它可以简化管理。\r \r ![列表映射][1]\r \r 多租户模型将数个租户分配给单一数据库（可以跨多个数据库分布租户组）。 如果希望每个租户具有较小的数据需求，请使用此模型。 在此模型中，我们使用“范围映射” 将一系列租户分配给数据库。 \r \r ![范围映射][2]\r \r 或者你可以使用“列表映射”  实现多租户数据库模型，以将多个租户分配给单一数据库。 例如，DB1 用于存储租户 ID 1 和 5 的相关信息，而 DB2 用于存储租户 7 和租户 10 的数据。 \r \r ![单一数据库上的多个租户][3] \r \r ### <a name=\"supported-net-types-for-sharding-keys\"></a>支持的分片键的 .Net 类型\r 弹性收缩支持将以下 .Net Framework 类型用作分片键：\r \r * integer\r * long\r * guid\r * byte[]  \r * datetime\r * timespan\r * datetimeoffset\r \r ### <a name=\"list-and-range-shard-maps\"></a>列表和范围分片映射\r 使用各个分片键值的列表或分片键值的范围可构造分片映射。 \r \r ### <a name=\"list-shard-maps\"></a>列表分片映射\r 分片包含 shardlet，shardlet 到分片的映射由分片映射维护。 **列表分片映射** 是可标识 shardlet 的单独键值和可用作分片的数据库之间的关联项。   是可以映射到同一个数据库的显式且不同的键值。 例如，键 1 映射到数据库 A，键值 3 和 6 都引用数据库 B。\r \r | 键 | 分片位置 |\r | --- | --- |\r | 1 |Database_A |\r | 3 |Database_B |\r | 4 |Database_C |\r | 6 |Database_B |\r | ... |... |\r \r ### <a name=\"range-shard-maps\"></a>范围分片映射\r 在范围分片映射中，键范围由 [Low Value, High Value) 对描述，其中 Low Value 是范围中的最小键，而 High Value 是第一个大于范围的值。 \r \r 例如，[0, 100) 包括所有大于或等于 0 且小于 100 的整数。 请注意，多个范围可指向同一数据库，并且支持多个不连续的范围（例如，在下面的示例中，[100,200) 和 [400,600) 可同时指向数据库 C）。\r \r | 键 | 分片位置 |\r | --- | --- |\r | [1,50) |Database_A |\r | [50,100) |Database_B |\r | [100,200) |Database_C |\r | [400,600) |Database_C |\r | ... |... |\r \r 上面所示的每个表都是 **ShardMap** 对象的概念性示例。 每一行都是单个 PointMapping（适用于列表分片映射）对象或 RangeMapping（适用于范围分片映射）对象的简化示例。\r \r ## <a name=\"shard-map-manager\"></a>分片映射管理器\r 在客户端库中，分片映射管理器是分片映射的集合。 由 **ShardMapManager** 实例管理的数据保存在以下三个位置中： \r \r 1. 全局分片映射 (GSM)：指定一个数据库作为其所有分片映射和映射的存储库。 将自动创建特殊的表和存储过程以管理信息。 这通常是小型数据库且可轻松进行访问，但不应用于满足应用程序的其他需求。 这些表位于名为 __ShardManagement 的特殊架构中。 \r 2. 局部分片映射 (LSM)：修改指定为分片的每个数据库，以包含多个小表和特殊存储过程，其中包括特定于该分片的分片映射信息并对其进行管理。 对于 GSM 中的信息而言，该信息是冗余的，但应用程序通过该信息可验证缓存的分片映射信息，而无需将所有负载置于 GSM 上；应用程序可使用 LSM 确定缓存的映射是否仍然有效。 与每个分片上的 LSM 对应的表也位于架构 __ShardManagement 中。\r 3. 应用程序缓存：每个用于访问 ShardMapManager 对象的应用程序实例都可维护其映射的本地内存中缓存。 它存储最近检索到的路由信息。 \r \r ## <a name=\"constructing-a-shardmapmanager\"></a>构造 ShardMapManager\r **ShardMapManager** 对象使用 [工厂](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmapmanagerfactory.aspx) 模式进行构造。 通过 [ShardMapManagerFactory.GetSqlShardMapManager](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmapmanagerfactory.getsqlshardmapmanager.aspx) 方法可获取具有 ConnectionString 形式的凭据（包括用于保存 GSM 的服务器名称和数据库名称），并返回 ShardMapManager 的实例。  \r \r 请注意：在应用程序的初始化代码内，每个应用域只应实例化 ShardMapManager 一次。 在同一个应用域中创建 ShardMapManager 的其他实例将导致应用程序的内存增加且 CPU 使用率增加。 **ShardMapManager** 可包含任意数量的分片映射。 尽管对于许多应用程序而言，单个分片映射可能是足够的，但有时针对不同的架构或出于特定目的，需使用不同的数据库集，在这些情况下多个分片映射可能更合适。 \r \r 在此代码中，应用程序尝试使用 **TryGetSqlShardMapManager 方法** 打开现有的 [ShardMapManager](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmapmanagerfactory.trygetsqlshardmapmanager.aspx)。  如果表示全局 ShardMapManager (GSM) 的对象尚未存在于数据库内，则客户端库将在此处使用 [CreateSqlShardMapManager](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmapmanagerfactory.createsqlshardmapmanager.aspx) 方法创建这些对象。\r \r ```\r // Try to get a reference to the Shard Map Manager \r  // via the Shard Map Manager database.  \r // If it doesn't already exist, then create it. \r ShardMapManager shardMapManager; \r bool shardMapManagerExists = ShardMapManagerFactory.TryGetSqlShardMapManager(\r                                     connectionString, \r                                     ShardMapManagerLoadPolicy.Lazy, \r                                     out shardMapManager); \r \r if (shardMapManagerExists) \r  { \r     Console.WriteLine(\"Shard Map Manager already exists\");\r } \r else\r {\r     // Create the Shard Map Manager. \r     ShardMapManagerFactory.CreateSqlShardMapManager(connectionString);\r     Console.WriteLine(\"Created SqlShardMapManager\"); \r \r     shardMapManager = ShardMapManagerFactory.GetSqlShardMapManager(\r         connectionString, \r         ShardMapManagerLoadPolicy.Lazy);\r \r     // The connectionString contains server name, database name, and admin credentials \r     // for privileges on both the GSM and the shards themselves.\r } \r ```\r \r 作为替代方法，你可以使用 Powershell 创建新的分片映射管理器。 [此处](https://gallery.technet.microsoft.com/scriptcenter/Azure-SQL-DB-Elastic-731883db)提供了一个示例。\r \r ## <a name=\"get-a-rangeshardmap-or-listshardmap\"></a>获取 RangeShardMap 或 ListShardMap\r 创建分片映射管理器后，使用 [TryGetRangeShardMap](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmapmanager.trygetrangeshardmap.aspx)、[TryGetListShardMap](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmapmanager.trygetlistshardmap.aspx) 或 [GetShardMap](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmapmanager.getshardmap.aspx) 方法获取 [RangeShardMap](https://msdn.microsoft.com/library/azure/dn807318.aspx) 或 [ListShardMap](https://msdn.microsoft.com/library/azure/dn807370.aspx)。\r \r ```\r /// <summary>\r /// Creates a new Range Shard Map with the specified name, or gets the Range Shard Map if it already exists.\r /// </summary>\r public static RangeShardMap<T> CreateOrGetRangeShardMap<T>(ShardMapManager shardMapManager, string shardMapName)\r {\r     // Try to get a reference to the Shard Map.\r     RangeShardMap<T> shardMap;\r     bool shardMapExists = shardMapManager.TryGetRangeShardMap(shardMapName, out shardMap);\r \r     if (shardMapExists)\r     {\r         ConsoleUtils.WriteInfo(\"Shard Map {0} already exists\", shardMap.Name);\r     }\r     else\r     {\r         // The Shard Map does not exist, so create it\r         shardMap = shardMapManager.CreateRangeShardMap<T>(shardMapName);\r         ConsoleUtils.WriteInfo(\"Created Shard Map {0}\", shardMap.Name);\r     }\r \r     return shardMap;\r } \r ```\r \r ### <a name=\"shard-map-administration-credentials\"></a>分片映射管理凭据\r 用于管理和操作分片映射的应用程序不同于那些使用分片映射路由连接的应用程序。 \r \r 若要管理分片映射（添加或更改分片、分片映射等），必须使用在 GSM 数据库和用作分片的每个数据库上都具有读/写权限的凭据实例化 ShardMapManager。 在输入或更改分片映射信息时，这些凭据必须允许编写 GSM 和 LSM 中的表，以及在新分片上创建 LSM 表。  \r \r 请参阅[用于访问弹性数据库客户端库的凭据](sql-database-elastic-scale-manage-credentials.md)。\r \r ### <a name=\"only-metadata-affected\"></a>仅元数据受影响\r 用于填充或更改 **ShardMapManager** 数据的方法不会更改存储在分片本身中的用户数据。 例如，类似于 CreateShard、DeleteShard、UpdateMapping 等的方法仅影响分片映射元数据。 不会删除、添加或更改分片中所包含的用户数据。 但是，这些方法旨在与你执行的单独操作结合使用，以创建或删除实际数据库，或者将行从一个分片移动到另一个分片，以使分片环境恢复均衡。  （弹性数据库工具附带的拆分-合并工具将使用这些 API 并安排在分片之间移动实际数据。）请参阅[使用弹性数据库拆分/合并工具进行缩放](sql-database-elastic-scale-overview-split-and-merge.md)。\r \r ## <a name=\"populating-a-shard-map-example\"></a>填充分片映射示例\r 下面显示了用于填充特定分片映射的操作的示例序列。 此代码将执行下列步骤： \r \r 1. 将在分片映射管理器中创建新的分片映射。 \r 2. 将两个不同分片的元数据添加到分片映射。 \r 3. 将添加各种键范围映射，并且将显示分片映射的整体内容。 \r \r 编写代码，以在发生错误时重新运行该方法。 每个请求将测试是否存在某个分片或映射，然后尝试创建该分片或映射。 该代码假设已在由字符串 shardServer 引用的服务器中创建名为 sample_shard_0、sample_shard_1 和 sample_shard_2 的数据库。 \r \r ```\r public void CreatePopulatedRangeMap(ShardMapManager smm, string mapName) \r     {            \r         RangeShardMap<long> sm = null; \r \r         // check if shardmap exists and if not, create it \r         if (!smm.TryGetRangeShardMap(mapName, out sm)) \r         { \r             sm = smm.CreateRangeShardMap<long>(mapName); \r         } \r \r         Shard shard0 = null, shard1=null; \r         // Check if shard exists and if not, \r         // create it (Idempotent / tolerant of re-execute) \r         if (!sm.TryGetShard(new ShardLocation(\r                                  shardServer, \r                                  \"sample_shard_0\"), \r                                  out shard0)) \r         { \r             Shard0 = sm.CreateShard(new ShardLocation(\r                                         shardServer, \r                                         \"sample_shard_0\")); \r         } \r \r         if (!sm.TryGetShard(new ShardLocation(\r                                 shardServer, \r                                 \"sample_shard_1\"), \r                                 out shard1)) \r         { \r             Shard1 = sm.CreateShard(new ShardLocation(\r                                          shardServer, \r                                         \"sample_shard_1\"));  \r         } \r \r         RangeMapping<long> rmpg=null; \r \r         // Check if mapping exists and if not,\r         // create it (Idempotent / tolerant of re-execute) \r         if (!sm.TryGetMappingForKey(0, out rmpg)) \r         { \r             sm.CreateRangeMapping(\r                       new RangeMappingCreationInfo<long>\r                       (new Range<long>(0, 50), \r                       shard0, \r                       MappingStatus.Online)); \r         } \r \r         if (!sm.TryGetMappingForKey(50, out rmpg)) \r         { \r             sm.CreateRangeMapping(\r                      new RangeMappingCreationInfo<long> \r                      (new Range<long>(50, 100), \r                      shard1, \r                      MappingStatus.Online)); \r         } \r \r         if (!sm.TryGetMappingForKey(100, out rmpg)) \r         { \r             sm.CreateRangeMapping(\r                      new RangeMappingCreationInfo<long>\r                      (new Range<long>(100, 150), \r                      shard0, \r                      MappingStatus.Online)); \r         } \r \r         if (!sm.TryGetMappingForKey(150, out rmpg)) \r         { \r             sm.CreateRangeMapping(\r                      new RangeMappingCreationInfo<long> \r                      (new Range<long>(150, 200), \r                      shard1, \r                      MappingStatus.Online)); \r         } \r \r         if (!sm.TryGetMappingForKey(200, out rmpg)) \r         { \r            sm.CreateRangeMapping(\r                      new RangeMappingCreationInfo<long> \r                      (new Range<long>(200, 300), \r                      shard0, \r                      MappingStatus.Online)); \r         } \r \r         // List the shards and mappings \r         foreach (Shard s in sm.GetShards()\r                      .OrderBy(s => s.Location.DataSource)\r                      .ThenBy(s => s.Location.Database))\r         { \r            Console.WriteLine(\"shard: \"+ s.Location); \r         } \r \r         foreach (RangeMapping<long> rm in sm.GetMappings()) \r         { \r             Console.WriteLine(\"range: [\" + rm.Value.Low.ToString() + \":\" \r                     + rm.Value.High.ToString()+ \")  ==>\" +rm.Shard.Location); \r         } \r     } \r ```\r \r 作为替代方法，可使用 PowerShell 脚本达到相同的结果。 [此处](https://gallery.technet.microsoft.com/scriptcenter/Azure-SQL-DB-Elastic-731883db)提供了某些 PowerShell 示例。     \r \r 填充完分片映射后，即可创建或改编数据访问应用程序，以便使用这些映射。 在需要更改 **映射布局** 之前，无需重新填充或操作映射。  \r \r ## <a name=\"data-dependent-routing\"></a>依赖于数据的路由\r 分片映射管理器主要由需要数据库连接的应用程序用来执行特定于应用的数据操作。 这些连接必须与正确的数据库关联。 这称为 **依赖于数据的路由**。 对于这些应用程序，通过使用在 GSM 数据库上具有只读访问权限的凭据，实例化来自工厂的分片映射管理器对象。 以后，单独的连接请求将提供连接相应分片数据库时所需的凭据。\r \r 请注意，这些应用程序（使用具有只读权限的凭据打开的 ShardMapManager）无法对映射进行更改。 为了满足这些需求，请创建特定于管理的应用程序或 PowerShell 脚本，以提供如前所述的更高级别权限的凭据。 请参阅[用于访问弹性数据库客户端库的凭据](sql-database-elastic-scale-manage-credentials.md)。\r \r 有关详细信息，请参阅[数据依赖型路由](sql-database-elastic-scale-data-dependent-routing.md)。 \r \r ## <a name=\"modifying-a-shard-map\"></a>修改分片映射\r 可采用不同方式更改分片映射。 以下所有方法都可修改用于描述分片及其映射的元数据，但这些方法不以物理方式修改分片内的数据，也不创建或删除实际数据库。  下面所述的分片映射上的某些操作可能需要与以物理方式移动数据或添加和删除用作分片的数据库的管理操作进行协调。\r \r 这些方法作为构建基块一同工作，以便在分片的数据库环境中修改数据的总体分发情况。  \r \r * 若要添加或删除分片：请使用 [Shardmap 类](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmap.aspx)的 [CreateShard](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmap.createshard.aspx) 和 [DeleteShard](https://msdn.microsoft.com/library/azure/microsoft.azure.sqldatabase.elasticscale.shardmanagement.shardmap.deleteshard.aspx)。 \r \r     若要执行这些操作，表示目标分片的服务器和数据库必须已经存在。 这些方法不会对数据库本身产生任何影响，仅对分片映射上的元数据产生影响。\r * 若要创建或删除映射到分片的点或范围：请使用 [RangeShardMapping 类](https://msdn.microsoft.com/library/azure/dn807318.aspx)的 [CreateRangeMapping](https://msdn.microsoft.com/library/azure/dn841993.aspx) 和 [DeleteMapping](https://msdn.microsoft.com/library/azure/dn824200.aspx)，以及 [ListShardMap](https://msdn.microsoft.com/library/azure/dn842123.aspx) 的 [CreatePointMapping](https://msdn.microsoft.com/library/azure/dn807218.aspx)\r \r     许多不同的点或范围可映射到相同的分片。 这些方法仅影响元数据，而不会影响已显示在分片中的任何数据。 如果为了与 **DeleteMapping** 操作保持一致而需要将数据从数据库中删除，你将需要单独执行这些操作，但需要结合使用这些方法。  \r * 将现有的范围拆分为两个，或将相邻的范围合并为一个：请使用 [SplitMapping](https://msdn.microsoft.com/library/azure/dn824205.aspx) 和 [MergeMappings](https://msdn.microsoft.com/library/azure/dn824201.aspx)。  \r \r     请注意，拆分和合并操作 **不更改键值要映射到的分片**。 拆分操作可将现有范围拆分为两个部分，但在映射到相同分片时同时保留这两个部分。 对在已映射到相同分片的两个相邻范围进行合并操作，从而可将其合并到单个范围中。  若要在分片之间移动点或范围本身，需要将 **UpdateMapping** 与移动的实际数据结合使用，才能进行协调。  当需要移动数据时，你可以使用弹性数据库工具中随附的 **拆分/合并** 服务，以将分片映射更改与数据移动相协调。 \r * 将单独的点或范围重新映射（或移动）到不同的分片：请使用 [UpdateMapping](https://msdn.microsoft.com/library/azure/dn824207.aspx)。  \r \r     由于可能需要将数据从一个分片移动到另一个分片，以便与 **UpdateMapping** 操作保持一致，因此你将需要单独执行此移动，但需要结合使用这些方法。\r * 若要在联机和脱机状态下执行映射：请使用 [MarkMappingOffline](https://msdn.microsoft.com/library/azure/dn824202.aspx) 和 [MarkMappingOnline](https://msdn.microsoft.com/library/azure/dn807225.aspx) 控制映射的联机状态。 \r \r     仅当映射处于“脱机”状态时才允许在分片映射上进行某些操作，其中包括 UpdateMapping 和 DeleteMapping。 当映射处于脱机状态时，基于该映射中所包含的键的依赖于数据的请求将返回一个错误。 此外，当范围首次处于脱机状态时，所有到受影响分片的连接都将自动终止，以防止因范围的更改而导致查询出现不一致或不完整的结果。 \r \r 映射是 .Net 中的不可变对象。  以上会更改映射的所有方法也会使代码中任何对映射的引用失效。 为了更轻松地执行操作序列来更改映射的状态，所有会更改映射的方法都将返回新的映射引用，以便能够链接操作。 例如，若要在 shardmap sm 中删除包含键 25 的现有映射，可以执行以下命令： \r \r ```\r     sm.DeleteMapping(sm.MarkMappingOffline(sm.GetMappingForKey(25)));\r ```\r \r ## <a name=\"adding-a-shard\"></a>添加分片\r 对于已经存在的分片映射，应用程序通常仅需要添加新分片，以处理预期的新键或键范围数据。 例如，由租户 ID 分片的应用程序可能需要为新的租户预配新分片，或者在每个新的月份开始之前，每月分片的数据可能需要预配新分片。 \r \r 如果新的键值范围还不是现有映射的组成部分且无需移动数据，则添加新分片以及将新键或范围关联到该分片非常简单。 有关添加新分片的详细信息，请参阅[添加新分片](sql-database-elastic-scale-add-a-shard.md)。\r \r 但是，在需要移动数据的情况下，需要拆分/合并工具并结合使用必要的分片映射更新，才能安排在分片之间移动数据。 有关使用拆分/合并工具的详细信息，请参阅[拆分/合并概述](sql-database-elastic-scale-overview-split-and-merge.md) \r \r [!INCLUDE [elastic-scale-include](../../includes/elastic-scale-include.md)]\r \r <!--Image references-->\r [1]: ./media/sql-database-elastic-scale-shard-map-management/listmapping.png\r [2]: ./media/sql-database-elastic-scale-shard-map-management/rangemapping.png\r [3]: ./media/sql-database-elastic-scale-shard-map-management/multipleonsingledb.png"}