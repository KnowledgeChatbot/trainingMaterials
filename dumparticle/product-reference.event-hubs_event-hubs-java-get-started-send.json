{"Title":"使用 Java 将事件发送到 Azure 事件中心","Description":"使用 Java 向事件中心发送入门","Content":"# 使用 Java 将事件发送到 Azure 事件中心\r <a name=\"send-events-to-azure-event-hubs-using-java\" ></a>\r \r ## 介绍\r <a name=\"introduction\" ></a>\r 事件中心是一个具备高度可伸缩性的引入系统，每秒可收入大量事件，从而使应用程序能够处理和分析连接的设备和应用程序所产生的海量数据。 数据采集到事件中心后，可以使用任何实时分析提供程序或存储群集来转换和存储数据。\r \r 有关详细信息，请参阅 [事件中心概述][Event Hubs overview]。\r \r 本教程演示如何使用用 Java 编写的控制台应用程序将事件发送到事件中心。 若要使用 Java 事件处理器主机库接收事件，请参阅[此文](event-hubs-java-get-started-receive-eph.md)，或单击左侧目录中的相应接收语言。\r \r 若要完成本教程，你需要以下各项：\r \r * Java 开发环境。 对于本教程，我们假定使用 [Eclipse](https://www.eclipse.org/)。\r * 有效的 Azure 帐户。 <br/>如果你没有帐户，只需花费几分钟就能创建一个免费帐户。 有关详细信息，请参阅 <a href=\"https://www.azure.cn/pricing/1rmb-trial/\" target=\"_blank\">Azure 试用版</a>。\r \r ## 将消息发送到事件中心\r <a name=\"send-messages-to-event-hubs\" ></a>\r 事件中心的 Java 客户端库可用于 [Maven 中央存储库](https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22azure-eventhubs%22)中的 Maven 项目，并且可以使用 Maven 项目文件中的以下依赖项声明进行引用：    \r \r ```XML\r <dependency>\r     <groupId>com.microsoft.azure</groupId>\r     <artifactId>azure-eventhubs</artifactId>\r     <version>{VERSION}</version>\r </dependency>\r ```\r \r 对于不同类型的生成环境，可以从 [Maven 中央存储库](https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22azure-eventhubs%22)或 [GitHub 上的版本分发点](https://github.com/Azure/azure-event-hubs/releases)显式获取最新发布的 JAR 文件。  \r \r 对于简单的事件发布服务器，请导入事件中心客户端类的 *com.microsoft.azure.eventhubs* 包和实用程序类（如与 Azure 服务总线消息传送客户端共享的常见异常）的 *com.microsoft.azure.servicebus* 包。 \r \r 对于下面的示例，请首先在你最喜欢的 Java 开发环境中为控制台/shell 应用程序创建一个新的 Maven 项目。 该类将称为 `Send`。     \r \r ```Java\r \r import java.io.IOException;\r import java.nio.charset.*;\r import java.util.*;\r import java.util.concurrent.ExecutionException;\r \r import com.microsoft.azure.eventhubs.*;\r import com.microsoft.azure.servicebus.*;\r \r public class Send\r {\r     public static void main(String[] args) \r             throws ServiceBusException, ExecutionException, InterruptedException, IOException\r     {\r ```\r \r 将命名空间和事件中心名称替换为创建事件中心时使用的值。\r \r ```Java\r     final String namespaceName = \"----ServiceBusNamespaceName-----\";\r     final String eventHubName = \"----EventHubName-----\";\r     final String sasKeyName = \"-----SharedAccessSignatureKeyName-----\";\r     final String sasKey = \"---SharedAccessSignatureKey----\";\r     ConnectionStringBuilder connStr = new ConnectionStringBuilder(namespaceName, eventHubName, sasKeyName, sasKey);\r ```\r \r 然后，通过将字符串转换为其 UTF-8 字节编码创建单一事件。 然后再使用连接字符串创建一个新的事件中心客户端实例并发送该消息。   \r \r ```Java \r \r     byte[] payloadBytes = \"Test AMQP message from JMS\".getBytes(\"UTF-8\");\r     EventData sendEvent = new EventData(payloadBytes);\r \r     EventHubClient ehClient = EventHubClient.createFromConnectionStringSync(connStr.toString());\r     ehClient.sendSync(sendEvent);\r     }\r }\r \r ``` \r \r ## 后续步骤\r <a name=\"next-steps\" ></a>\r 访问以下链接可以了解有关事件中心的详细信息：\r \r * [使用 EventProcessorHost 接收事件](event-hubs-java-get-started-receive-eph.md)\r * [事件中心概述][Event Hubs overview]\r * [创建事件中心](event-hubs-create.md)\r * [事件中心常见问题](event-hubs-faq.md)\r \r <!-- Links -->\r [Event Hubs overview]: event-hubs-overview.md"}