{"Title":"如何通过 Python 使用 Azure 表存储","Description":"使用 Azure 表存储（一种 NoSQL 数据存储）将结构化数据存储在云中。","Content":"# <a name=\"how-to-use-azure-table-storage-with-python\"></a>如何配合使用 Python 和 Azure 表存储\r \r [!INCLUDE [storage-selector-table-include](../../includes/storage-selector-table-include.md)]\r [!INCLUDE [storage-table-cosmos-db-langsoon-tip-include](../../includes/storage-table-cosmos-db-langsoon-tip-include.md)]\r \r 本指南将演示在 Python 中如何使用[用于 Python 的 Azure 存储 SDK](https://github.com/Azure/azure-storage-python) 执行常见的 Azure 表存储方案。 涉及的情景包括创建和删除表、插入和查询实体。\r \r 对本教程中的方案进行了解时，可参考[用于 Python API 参考的 Azure 存储 SDK](https://azure-storage.readthedocs.io/en/latest/index.html)。\r \r [!INCLUDE [storage-table-concepts-include](../../includes/storage-table-concepts-include.md)]\r \r [!INCLUDE [storage-create-account-include](../../includes/storage-create-account-include.md)]\r \r ## <a name=\"install-the-microsoft-azure-storage-sdk-for-python\"></a>安装用于 Python 的 Microsoft Azure 存储 SDK\r \r 创建存储帐户后，下一步就是安装[用于 Python 的 Azure 存储 SDK](https://github.com/Azure/azure-storage-python)。 有关安装 SDK 的详细信息，请参阅 GitHub 上用于 Python 的存储 SDK 存储库中的 [README.rst](https://github.com/Azure/azure-storage-python/blob/master/README.rst) 文件。\r \r ## <a name=\"create-a-table\"></a>创建表\r \r 若要使用 Python 中的 Azure 表服务，必须导入 [TableService][py_TableService] 模块。 因为要使用表实体，因此还需要[实体][ py_Entity]类。 将此代码添加到 Python 文件顶部附近，以便同时导入：\r \r ```python\r from azure.storage.table import TableService, Entity\r ```\r \r 创建 [TableService][py_TableService] 对象，传入存储帐户名和帐户密钥。 将 `myaccount` 和 `mykey` 替换为帐户名和密钥，并调用[create_table][py_create_table]，在 Azure 存储中创建表。\r \r ```python\r table_service = TableService(account_name='myaccount', account_key='mykey',endpoint_suffix='core.chinacloudapi.cn')\r \r table_service.create_table('tasktable')\r ```\r \r ## <a name=\"add-an-entity-to-a-table\"></a>向表中添加条目\r \r 如果要添加实体，首先创建一个表示实体的对象，然后将该对象传递给 [TableService][py_TableService].[insert_entity][py_insert_entity] 方法。 实体对象可以是一个[实体][py_Entity]类型的字典和对象，且可定义实体的属性名和值。 除了为实体定义的任何其他属性外，每个实体还必须包含 [PartitionKey 和 RowKey](#partitionkey-and-rowkey) 属性。\r \r 此示例将创建一个表示实体的字典对象，并将该对象传递给 [insert_entity][py_insert_entity] 方法以将其添加到表：\r \r ```python\r task = {'PartitionKey': 'tasksSeattle', 'RowKey': '001', 'description' : 'Take out the trash', 'priority' : 200}\r table_service.insert_entity('tasktable', task)\r ```\r \r 此示例将创建一个[实体][py_Entity]对象，并将该对象传递给 [insert_entity][py_insert_entity] 方法以将其添加到表：\r \r ```python\r task = Entity()\r task.PartitionKey = 'tasksSeattle'\r task.RowKey = '002'\r task.description = 'Wash the car'\r task.priority = 100\r table_service.insert_entity('tasktable', task)\r ```\r \r ### <a name=\"partitionkey-and-rowkey\"></a>PartitionKey 和 RowKey\r \r 必须为每个实体同时指定 PartitionKey 和 RowKey 属性。 这些是实体的唯一标识符，它们一起构成了实体的主键。 由于只对这些属性编制了索引，因此可使用这些值进行查询，速度比查询任何其他实体属性都要快。\r \r 表服务使用 PartitionKey 在存储节点中智能分发。 具有相同的 PartitionKey 的实体存储在同一个节点上。 RowKey 是实体在其所属分区内的唯一 ID。\r \r ## <a name=\"update-an-entity\"></a>更新条目\r \r 若要更新实体的所有属性值，请调用 [update_entity][py_update_entity] 方法。 此示例演示如何使用更新版本替换现有实体：\r \r ```python\r task = {'PartitionKey': 'tasksSeattle', 'RowKey': '001', 'description' : 'Take out the garbage', 'priority' : 250}\r table_service.update_entity('tasktable', task)\r ```\r \r 如果要更新的实体不存在，更新操作将失败。 如果要存储实体，无论它是否已存在，请使用 [insert_or_replace_entity][py_insert_or_replace_entity]。 在下面的示例中，第一次调用会替换现有实体。 第二个调用将插入新实体，因为表中不存在具有指定 PartitionKey 和 RowKey 的实体。\r \r ```python\r # Replace the entity created earlier\r task = {'PartitionKey': 'tasksSeattle', 'RowKey': '001', 'description' : 'Take out the garbage again', 'priority' : 250}\r table_service.insert_or_replace_entity('tasktable', task)\r \r # Insert a new entity\r task = {'PartitionKey': 'tasksSeattle', 'RowKey': '003', 'description' : 'Buy detergent', 'priority' : 300}\r table_service.insert_or_replace_entity('tasktable', task)\r ```\r \r > [!TIP]\r > [update_entity][py_update_entity] 方法将替换现有实体的所有属性和值，还可将其用于从现有实体中删除属性。 可以使用 [merge_entity][py_merge_entity] 方法更新含新的或修改后的属性值的现有实体，而无需彻底替换该实体。\r \r ## <a name=\"modify-multiple-entities\"></a>修改多个实体\r \r 若要确保通过表服务进行原子处理，可以批量同时提交多个操作。 首先，使用 [TableBatch][py_TableBatch] 类将多个操作添加到单个批处理中。 接下来，调用 [TableService][py_TableService].[commit_batch][py_commit_batch] 以原子操作的形式提交操作。 批处理中要修改的实体必须位于同一分区。\r \r 该示例将两个实体一起添加到批处理中：\r \r ```python\r from azure.storage.table import TableBatch\r batch = TableBatch()\r task004 = {'PartitionKey': 'tasksSeattle', 'RowKey': '004', 'description' : 'Go grocery shopping', 'priority' : 400}\r task005 = {'PartitionKey': 'tasksSeattle', 'RowKey': '005', 'description' : 'Clean the bathroom', 'priority' : 100}\r batch.insert_entity(task004)\r batch.insert_entity(task005)\r table_service.commit_batch('tasktable', batch)\r ```\r \r 还可以通过上下文管理器语法来使用批处理：\r \r ```python\r task006 = {'PartitionKey': 'tasksSeattle', 'RowKey': '006', 'description' : 'Go grocery shopping', 'priority' : 400}\r task007 = {'PartitionKey': 'tasksSeattle', 'RowKey': '007', 'description' : 'Clean the bathroom', 'priority' : 100}\r \r with table_service.batch('tasktable') as batch:\r     batch.insert_entity(task006)\r     batch.insert_entity(task007)\r ```\r \r ## <a name=\"query-for-an-entity\"></a>查询条目\r \r 要查询表中的实体，请将 PartitionKey 和 RowKey 传递给 [TableService][py_TableService].[get_entity][py_get_entity] 方法。\r \r ```python\r task = table_service.get_entity('tasktable', 'tasksSeattle', '001')\r print(task.description)\r print(task.priority)\r ```\r \r ## <a name=\"query-a-set-of-entities\"></a>查询一组条目\r \r 在筛选器字符串中提供 filter 参数，可以查询一组实体。 此示例通过对 PartitionKey 应用筛选器来查找 Seattle 中的所有任务：\r \r ```python\r tasks = table_service.query_entities('tasktable', filter=\"PartitionKey eq 'tasksSeattle'\")\r for task in tasks:\r     print(task.description)\r     print(task.priority)\r ```\r \r ## <a name=\"query-a-subset-of-entity-properties\"></a>查询条目属性的子集\r \r 还可以限制查询中每个实体所返回的属性。 此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体或结果集。 使用 select 参数并传递希望返回给客户端的属性的名称。\r \r 以下代码中的查询只返回表中实体的说明。\r \r > [!NOTE]\r > 下面的代码段仅对 Azure 存储有效。 但不受存储模拟器支持。\r \r ```python\r tasks = table_service.query_entities('tasktable', filter=\"PartitionKey eq 'tasksSeattle'\", select='description')\r for task in tasks:\r     print(task.description)\r ```\r \r ## <a name=\"delete-an-entity\"></a>删除实体\r \r 可通过将实体的 PartitionKey 和 RowKey 传递给 [delete_entity][py_delete_entity] 方法将其删除。\r \r ```python\r table_service.delete_entity('tasktable', 'tasksSeattle', '001')\r ```\r \r ## <a name=\"delete-a-table\"></a>删除表\r \r 如果不再需要表或表中的所有实体，请调用 [delete_table][py_delete_table]方法，从 Azure 存储永久删除该表。\r \r ```python\r table_service.delete_table('tasktable')\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r \r * [用于 Python API 的 Microsoft Azure 存储 SDK 参考](https://azure-storage.readthedocs.io/en/latest/index.html)\r * [Microsoft Azure Storage SDK for Python](https://github.com/Azure/azure-storage-python)\r * [Python 开发人员中心](/develop/python/)\r * [Azure 存储资源管理器](../vs-azure-tools-storage-manage-with-storage-explorer.md)：一款跨平台的免费应用程序，用于直观处理 Windows、MacOS 和 Linux 上的 Azure 存储数据。\r \r [py_commit_batch]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html#azure.storage.table.tableservice.TableService.commit_batch\r [py_create_table]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html#azure.storage.table.tableservice.TableService.create_table\r [py_delete_entity]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html#azure.storage.table.tableservice.TableService.delete_entity\r [py_delete_table]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html#azure.storage.table.tableservice.TableService.delete_table\r [py_Entity]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.models.html#azure.storage.table.models.Entity\r [py_get_entity]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html#azure.storage.table.tableservice.TableService.get_entity\r [py_insert_entity]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html#azure.storage.table.tableservice.TableService.insert_entity\r [py_insert_or_replace_entity]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html#azure.storage.table.tableservice.TableService.insert_or_replace_entity\r [py_merge_entity]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html#azure.storage.table.tableservice.TableService.merge_entity\r [py_update_entity]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html#azure.storage.table.tableservice.TableService.update_entity\r [py_TableService]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tableservice.html\r [py_TableBatch]: https://azure-storage.readthedocs.io/en/latest/ref/azure.storage.table.tablebatch.html#azure.storage.table.tablebatch.TableBatch\r \r <!--Update_Description: wording update, update link-->"}