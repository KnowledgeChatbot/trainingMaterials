{"Title":"使用 .NET 监视作业进度","Description":"了解如何使用事件处理程序代码来跟踪作业进度并发送状态更新。 代码示例用 C# 编写，并使用用于 .NET 的媒体服务 SDK。","Content":"# <a name=\"monitor-job-progress-using-net\"></a>使用 .NET 监视作业进度\r > [!div class=\"op_single_selector\"]\r > * [门户](media-services-portal-check-job-progress.md)\r > * [.NET](media-services-check-job-progress.md)\r > * [REST](media-services-rest-check-job-progress.md)\r > \r > \r \r 运行作业时，通常需要采用某种方式跟踪作业进度。 可以通过定义 StateChanged 事件处理程序（如本主题中所述）或使用 Azure 队列存储监视媒体服务作业通知（如[此主题](media-services-dotnet-check-job-progress-with-queues.md)中所述）来检查进度。\r \r ##<a id=\"statechange_event_handler\"></a>定义 StateChanged 事件处理程序以监视作业进度\r \r 以下代码示例定义了 StateChanged 事件处理程序。 此事件处理程序跟踪作业进度，并根据现状提供更新的状态。 该代码还定义了 LogJobStop 方法。 此 helper 方法记录错误详细信息。\r \r ```\r private static void StateChanged(object sender, JobStateChangedEventArgs e)\r {\r     Console.WriteLine(\"Job state changed event:\");\r     Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r     Console.WriteLine(\"  Current state: \" + e.CurrentState);\r \r     switch (e.CurrentState)\r     {\r         case JobState.Finished:\r             Console.WriteLine();\r             Console.WriteLine(\"********************\");\r             Console.WriteLine(\"Job is finished.\");\r             Console.WriteLine(\"Please wait while local tasks or downloads complete...\");\r             Console.WriteLine(\"********************\");\r             Console.WriteLine();\r             Console.WriteLine();\r             break;\r         case JobState.Canceling:\r         case JobState.Queued:\r         case JobState.Scheduled:\r         case JobState.Processing:\r             Console.WriteLine(\"Please wait...\\n\");\r             break;\r         case JobState.Canceled:\r         case JobState.Error:\r             // Cast sender as a job.\r             IJob job = (IJob)sender;\r             // Display or log error details as needed.\r             LogJobStop(job.Id);\r             break;\r         default:\r             break;\r     }\r }\r \r private static void LogJobStop(string jobId)\r {\r     StringBuilder builder = new StringBuilder();\r     IJob job = GetJob(jobId);\r \r     builder.AppendLine(\"\\nThe job stopped due to cancellation or an error.\");\r     builder.AppendLine(\"***************************\");\r     builder.AppendLine(\"Job ID: \" + job.Id);\r     builder.AppendLine(\"Job Name: \" + job.Name);\r     builder.AppendLine(\"Job State: \" + job.State.ToString());\r     builder.AppendLine(\"Job started (server UTC time): \" + job.StartTime.ToString());\r     builder.AppendLine(\"Media Services account name: \" + _accountName);\r     builder.AppendLine(\"Media Services account location: \" + _accountLocation);\r     // Log job errors if they exist.  \r     if (job.State == JobState.Error)\r     {\r         builder.Append(\"Error Details: \\n\");\r         foreach (ITask task in job.Tasks)\r         {\r             foreach (ErrorDetail detail in task.ErrorDetails)\r             {\r                 builder.AppendLine(\"  Task Id: \" + task.Id);\r                 builder.AppendLine(\"    Error Code: \" + detail.Code);\r                 builder.AppendLine(\"    Error Message: \" + detail.Message + \"\\n\");\r             }\r         }\r     }\r     builder.AppendLine(\"***************************\\n\");\r     // Write the output to a local file and to the console. The template \r     // for an error output file is:  JobStop-{JobId}.txt\r     string outputFile = _outputFilesFolder + @\"\\JobStop-\" + JobIdAsFileName(job.Id) + \".txt\";\r     WriteToFile(outputFile, builder.ToString());\r     Console.Write(builder.ToString());\r }\r \r private static string JobIdAsFileName(string jobID)\r {\r     return jobID.Replace(\":\", \"_\");\r }\r ```\r "}