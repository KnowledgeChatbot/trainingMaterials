{"Title":"Azure 中继 .NET Standard API 概述","Description":"Azure 中继 .NET Standard API 概述","Content":"# <a name=\"azure-relay-hybrid-connections-net-standard-api-overview\"></a>Azure 中继混合连接 .NET 标准 API 概述\r 本文汇总了一些重要的 Azure 中继混合连接 .NET 标准[客户端 API](https://docs.microsoft.com/dotnet/api/microsoft.azure.relay)。\r   \r ## <a name=\"relay-connection-string-builder\"></a>中继连接字符串生成器\r \r [RelayConnectionStringBuilder][RelayConnectionStringBuilder] 类对特定于中继混合连接的连接字符串进行格式化。 该类可用于验证连接字符串的格式或从头开始生成连接字符串。 有关示例，请参阅以下代码：\r \r ```csharp\r var endpoint = \"{Relay namespace}\";\r var entityPath = \"{Name of the Hybrid Connection}\";\r var sharedAccessKeyName = \"{SAS key name}\";\r var sharedAccessKey = \"{SAS key value}\";\r \r var connectionStringBuilder = new RelayConnectionStringBuilder()\r {\r     Endpoint = endpoint,\r     EntityPath = entityPath,\r     SharedAccessKeyName = sasKeyName,\r     SharedAccessKey = sasKeyValue\r };\r ```\r \r 还可以将连接字符串直接传递给 `RelayConnectionStringBuilder` 方法。 此操作允许验证连接字符串是否为有效格式。 如果任何参数无效，构造函数生成 `ArgumentException`。\r \r ```csharp\r var myConnectionString = \"{RelayConnectionString}\";\r // Declare the connectionStringBuilder so that it can be used outside of the loop if needed\r RelayConnectionStringBuilder connectionStringBuilder;\r try\r {\r     // Create the connectionStringBuilder using the supplied connection string\r     connectionStringBuilder = new RelayConnectionStringBuilder(myConnectionString);\r }\r catch (ArgumentException ae)\r {\r     // Perform some error handling\r }\r ```\r \r ## <a name=\"hybrid-connection-stream\"></a>混合连接流\r 无论使用的是 [HybridConnectionClient][HCClient]，还是 [HybridConnectionListener][HCListener]，[HybridConnectionStream][HCStream] 类这一主要对象均用于从 Azure 中继终结点发送和接收数据。\r \r ### <a name=\"getting-a-hybrid-connection-stream\"></a>获取混合连接流\r \r #### <a name=\"listener\"></a>侦听器\r 使用 [HybridConnectionListener][HCListener] 可以获取 `HybridConnectionStream` 对象，如下所示：\r \r ```csharp\r // Use the RelayConnectionStringBuilder to get a valid connection string\r var listener = new HybridConnectionListener(csb.ToString());\r // Open a connection to the Relay endpoint\r await listener.OpenAsync();\r // Get a `HybridConnectionStream`\r var hybridConnectionStream = await listener.AcceptConnectionAsync();\r ```\r \r #### <a name=\"client\"></a>客户端\r 使用 [HybridConnectionClient][HCClient]，可以获取 `HybridConnectionStream` 对象，如下所示：\r \r ```csharp\r // Use the RelayConnectionStringBuilder to get a valid connection string\r var client = new HybridConnectionClient(csb.ToString());\r // Open a connection to the Relay endpoint and get a `HybridConnectionStream`\r var hybridConnectionStream = await client.CreateConnectionAsync();\r ```\r \r ### <a name=\"receiving-data\"></a>接收数据\r [HybridConnectionStream][HCStream] 类允许进行双向通信。 在大多数情况下，都会持续地从流接收信息。 如果正在从流读取文本，则还需使用 [StreamReader](https://msdn.microsoft.com/library/system.io.streamreader(v=vs.110).aspx) 对象，以便于分析数据。 例如，可以将数据读取为文本，而不能读取为 `byte[]`。\r \r 以下代码可从流中读取各行文本，直到请求取消为止：\r \r ```csharp\r // Create a CancellationToken, so that we can cancel the while loop\r var cancellationToken = new CancellationToken();\r // Create a StreamReader from the 'hybridConnectionStream`\r var streamReader = new StreamReader(hybridConnectionStream);\r \r while (!cancellationToken.IsCancellationRequested)\r {\r     // Read a line of input until a newline is encountered\r     var line = await streamReader.ReadLineAsync();\r     if (string.IsNullOrEmpty(line))\r     {\r         // If there's no input data, we will signal that \r         // we will no longer send data on this connection\r         // and then break out of the processing loop.\r         await hybridConnectionStream.ShutdownAsync(cancellationToken);\r         break;\r     }\r }\r ```\r \r ### <a name=\"sending-data\"></a>发送数据\r 建立连接后，即可将消息发送到中继终结点。 由于连接对象继承 [Stream](https://msdn.microsoft.com/library/system.io.stream(v=vs.110).aspx)，因此以 `byte[]` 形式发送数据。 以下示例介绍如何执行此操作：\r \r ```csharp\r var data = Encoding.UTF8.GetBytes(\"hello\");\r await clientConnection.WriteAsync(data, 0, data.Length);\r ```\r \r 但是，如果要直接发送文本，而无需每次都对字符串进行编码，则可以使用 [StreamWriter](https://msdn.microsoft.com/library/system.io.streamwriter(v=vs.110).aspx) 对象包装 `hybridConnectionStream` 对象。\r \r ```csharp\r // The StreamWriter object only needs to be created once\r var textWriter = new StreamWriter(hybridConnectionStream);\r await textWriter.WriteLineAsync(\"hello\");\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 若要了解有关 Azure 中继的详细信息，请访问以下链接：\r \r * [Microsoft.Azure.Relay reference](https://docs.microsoft.com/dotnet/api/microsoft.azure.relay)\r * [什么是 Azure 中继？](./relay-what-is-it.md)\r * [可用的中继 API](./relay-api-overview.md)\r \r [RelayConnectionStringBuilder]: https://docs.microsoft.com/dotnet/api/microsoft.azure.relay.relayconnectionstringbuilder\r [HCStream]: https://docs.microsoft.com/dotnet/api/microsoft.azure.relay.hybridconnectionstream\r [HCClient]: https://docs.microsoft.com/dotnet/api/microsoft.azure.relay.hybridconnectionclient\r [HCListener]: https://docs.microsoft.com/dotnet/api/microsoft.azure.relay.hybridconnectionlistener\r \r \r \r <!--Update_Description:update meta properties and wording-->"}