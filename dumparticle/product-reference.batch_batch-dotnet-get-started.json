{"Title":"教程 - 使用适用于 .NET 的 Azure Batch 客户端库","Description":"了解 Azure Batch 的基本概念并使用 .NET 构建简单的解决方案。","Content":"# <a name=\"get-started-building-solutions-with-the-batch-client-library-for-net\"></a>通过适用于 .NET 的 Batch 客户端库开始构建解决方案\r \r > [!div class=\"op_single_selector\"]\r > * [.NET](batch-dotnet-get-started.md)\r > * [Python](batch-python-tutorial.md)\r > * [Node.js](batch-nodejs-get-started.md)\r >\r >\r \r 在我们分步讨论 C# 示例应用程序时，了解本文中的 [Azure Batch][azure_batch]和[批处理 .NET][net_api] 库的基础知识。 我们将探讨该示例应用程序如何利用批处理服务来处理云中的并行工作负荷，以及如何与 [Azure 存储](../storage/common/storage-introduction.md)交互来暂存和检索文件。 将了解常见的 Batch 应用程序工作流，并基本了解 Batch 的主要组件，例如作业、任务、池和计算节点。\r \r ![Batch 解决方案工作流（基础）][11]<br/>\r \r ## <a name=\"prerequisites\"></a>先决条件\r 本文假定你有 C# 和 Visual Studio 的使用知识。 本文还假定，能够满足下面为 Azure 和 Batch 及存储服务指定的帐户创建要求。\r \r ### <a name=\"accounts\"></a>帐户\r - **Azure 帐户**：如果没有 Azure 订阅，可以 [创建一个 Azure 帐户][azure_free_account]。\r - **Batch 帐户**：获取 Azure 订阅后，请 [创建 Azure Batch 帐户](batch-account-create-portal.md)。\r - **存储帐户**：请参阅[关于 Azure 存储帐户](../storage/common/storage-create-storage-account.md)中的[创建存储帐户](../storage/common/storage-create-storage-account.md#create-a-storage-account)。\r \r > [!IMPORTANT]\r > Batch 目前仅支持常规用途存储帐户类型，如[关于 Azure 存储帐户](../storage/common/storage-create-storage-account.md)的[创建存储帐户](../storage/common/storage-create-storage-account.md#create-a-storage-account)中的步骤 5 所述。\r >\r >\r \r ### <a name=\"visual-studio\"></a>Visual Studio\r 必须拥有 **Visual Studio 2015 或更高版本**才能生成示例项目。 可以在 [Visual Studio 产品概述][visual_studio]中找到免费试用版的 Visual Studio。\r \r ### <a name=\"dotnettutorial-code-sample\"></a>*DotNetTutorial* 代码示例\r [DotNetTutorial][github_dotnettutorial] 示例是 GitHub 上的 [azure-batch-samples][github_samples] 存储库中提供的众多批处理代码示例之一。 单击存储库主页上的“克隆或下载”>“下载 ZIP”，或单击 [azure-batch-samples-master.zip][github_samples_zip]”直接下载链接，即可下载所有示例。 将 ZIP 文件的内容解压缩后，可在以下文件夹中找到该解决方案：\r \r `\\azure-batch-samples\\CSharp\\ArticleProjects\\DotNetTutorial`\r \r ### <a name=\"batchlabs-optional\"></a>BatchLabs（可选）\r [BatchLabs][github_batchlabs] 是一个功能丰富的免费独立客户端工具，可帮助创建、调试和监视 Azure Batch 应用程序。 尽管完成本教程不要求使用 Azure Batch 资源管理器，但可将其用于开发和调试 Batch 解决方案。\r \r ## <a name=\"dotnettutorial-sample-project-overview\"></a>DotNetTutorial 示例项目概述\r *DotNetTutorial* 代码示例是由以下两个项目组成的 Visual Studio 解决方案：**DotNetTutorial** 和 **TaskApplication**。\r \r - **DotNetTutorial** 是与 Batch 和存储服务交互，以在计算节点（虚拟机）上执行并行工作负荷的客户端应用程序。 DotNetTutorial 在本地工作站上运行。\r - **TaskApplication** 是在 Azure 中的计算节点上运行以执行实际工作的程序。 在本示例中，`TaskApplication.exe` 将分析从 Azure 存储下载的文件（输入文件）中的文本。 然后，它会生成一个文本文件（输出文件），其中包含出现在输入文件中的头三个单词的列表。 在创建输出文件以后，TaskApplication 会将文件上传到 Azure 存储。 这样该文件就可供客户端应用程序下载。 TaskApplication 在 Batch 服务中的多个计算节点上并行运行。\r \r 下图演示了客户端应用程序 *DotNetTutorial* 执行的主要操作，以及任务执行的应用程序 *TaskApplication*。 此基本工作流是通过 Batch 创建的许多计算解决方案中常见的工作流。 尽管它并未演示 Batch 服务提供的每项功能，但几乎每个 Batch 方案都包含此工作流的某些部分。\r \r ![Batch 示例工作流][8]<br/>\r \r [**步骤 1.**](#step-1-create-storage-containers) 在 Azure Blob 存储中创建**容器**。<br/>\r [**步骤 2.**](#step-2-upload-task-application-and-data-files) 将任务应用程序文件和输入文件上传到容器。<br/>\r [**步骤 3.**](#step-3-create-batch-pool) 创建批处理**池**。<br/>\r   &nbsp;&nbsp;&nbsp;&nbsp;**3a.** 池 **StartTask** 在节点加入池时将任务二进制文件 (TaskApplication) 下载到节点。<br/>\r [**步骤 4.**](#step-4-create-batch-job) 创建批处理**作业**。<br/>\r [**步骤 5.**](#step-5-add-tasks-to-job) 将**任务**添加到作业。<br/>\r   &nbsp;&nbsp;&nbsp;&nbsp;**5a.** 任务计划在节点上执行。<br/>\r     &nbsp;&nbsp;&nbsp;&nbsp;**5b.** 每项任务从 Azure 存储下载其输入数据，并开始执行。<br/>\r [**步骤 6.**](#step-6-monitor-tasks) 监视任务。<br/>\r   &nbsp;&nbsp;&nbsp;&nbsp;**6a.** 当任务完成时，会将其输出数据上传到 Azure 存储。<br/>\r [**步骤 7.**](#step-7-download-task-output) 从存储空间下载任务输出。\r \r 如前所述，并非每个 Batch 解决方案都执行这些具体步骤，此类方案可能包含更多步骤，但 *DotNetTutorial* 示例应用程序将演示 Batch 方案中的常见过程。\r \r ## <a name=\"build-the-dotnettutorial-sample-project\"></a>构建 *DotNetTutorial* 示例项目\r 必须先在 *DotNetTutorial* 项目的 `Program.cs` 文件中指定批处理和存储帐户凭据才能成功运行该示例。 请在 Visual Studio 中双击 `DotNetTutorial.sln` 解决方案文件以打开该解决方案（如果尚未这样做）。 也可以在 Visual Studio 中使用“文件”>“打开”>“项目/解决方案”菜单打开它。\r \r 在 *DotNetTutorial* 项目中打开 `Program.cs`。 然后，添加在文件顶部附近指定的凭据：\r \r ```csharp\r // Update the Batch and Storage account credential strings below with the values\r // unique to your accounts. These are used when constructing connection strings\r // for the Batch and Storage client objects.\r \r // Batch account credentials\r private const string BatchAccountName = \"\";\r private const string BatchAccountKey  = \"\";\r private const string BatchAccountUrl  = \"\";\r \r // Storage account credentials\r private const string StorageAccountName = \"\";\r private const string StorageAccountKey  = \"\";\r ```\r \r > [!IMPORTANT]\r > 如上所述，目前必须为 Azure 存储中的常规用途存储帐户指定凭据。 Batch 应用程序使用常规用途存储帐户中的 Blob 存储。 请不要为通过选择 *Blob 存储* 帐户类型创建的存储帐户指定凭据。\r >\r >\r \r 可以在 [Azure 门户][azure_portal]中每项服务的帐户边栏选项卡中找到批处理和存储帐户凭据：\r \r ![门户中的批处理凭据][9]\r ![门户中的存储凭据][10]<br/>\r \r 使用凭据更新项目后，在“解决方案资源管理器”中右键单击该解决方案，并单击“构建解决方案”。 出现提示时，请确认还原任何 NuGet 包。\r \r > [!TIP]\r > 如果未自动还原 NuGet 包，或者看到了有关包还原失败的错误，请确保已安装 [NuGet 包管理器][nuget_packagemgr]， 然后启用遗失包的下载。 若要启用包下载，请参阅[在构建期间启用包还原][nuget_restore]。\r >\r >\r \r 在以下部分中，我们将示例应用程序细分为用于处理 Batch 服务中工作负荷的多个步骤，并详细讨论这些步骤。 建议在学习本文的余下部分时参考 Visual Studio 中打开的解决方案，因为我们并不会讨论示例中的每一行代码。\r \r 导航到 *DotNetTutorial* 项目的 `Program.cs` 文件中 `MainAsync` 方法的顶部，开始执行步骤 1。 以下每个步骤大致遵循 `MainAsync`中方法调用的进度。\r \r ## <a name=\"step-1-create-storage-containers\"></a>步骤 1：创建存储容器\r \r ![在 Azure 存储中创建容器][1]\r <br/>\r \r Batch 包含的内置支持支持与 Azure 存储交互。 存储帐户中的容器将为 Batch 帐户中运行的任务提供所需的文件。 这些容器还提供存储任务生成的输出数据所需的位置。 *DotNetTutorial* 客户端应用程序首先在 [Azure Blob 存储](../storage/common/storage-introduction.md)中创建三个容器：\r \r - **应用程序**：此容器用于存储任务所要运行的应用程序及其依赖项，例如 DLL。\r - **输入**：任务会从*输入*容器下载所要处理的数据文件。\r - **输出**：当任务完成输入文件的处理时，会将其结果上传到*输出*容器。\r \r 为了与存储帐户交互并创建容器，我们使用了[用于 .NET 的 Azure 存储客户端库][net_api_storage]。 我们将创建包含 [CloudStorageAccount][net_cloudstorageaccount] 的帐户引用，并从中创建 [CloudBlobClient][net_cloudblobclient]：\r \r ```csharp\r // Construct the Storage account connection string\r string storageConnectionString = String.Format(\r     \"DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.chinacloudapi.cn\",\r     StorageAccountName,\r     StorageAccountKey);\r \r // Retrieve the storage account\r CloudStorageAccount storageAccount =\r     CloudStorageAccount.Parse(storageConnectionString);\r \r // Create the blob client, for use in obtaining references to\r // blob storage containers\r CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\r ```\r \r 我们会在整个应用程序中使用 `blobClient` 引用，并将它作为参数传递给多个方法。 在紧随上述代码的代码块中提供了示例，我们在其中调用 `CreateContainerIfNotExistAsync` 以实际创建容器。\r \r ```csharp\r // Use the blob client to create the containers in Azure Storage if they don't\r // yet exist\r const string appContainerName    = \"application\";\r const string inputContainerName  = \"input\";\r const string outputContainerName = \"output\";\r await CreateContainerIfNotExistAsync(blobClient, appContainerName);\r await CreateContainerIfNotExistAsync(blobClient, inputContainerName);\r await CreateContainerIfNotExistAsync(blobClient, outputContainerName);\r ```\r \r ```csharp\r private static async Task CreateContainerIfNotExistAsync(\r     CloudBlobClient blobClient,\r     string containerName)\r {\r         CloudBlobContainer container =\r             blobClient.GetContainerReference(containerName);\r \r         if (await container.CreateIfNotExistsAsync())\r         {\r                 Console.WriteLine(\"Container [{0}] created.\", containerName);\r         }\r         else\r         {\r                 Console.WriteLine(\"Container [{0}] exists, skipping creation.\",\r                     containerName);\r         }\r }\r ```\r \r 创建容器之后，应用程序现在即可上传任务使用的文件。\r \r > [!TIP]\r > [如何通过 .NET 使用 Blob 存储](../storage/blobs/storage-dotnet-how-to-use-blobs.md)对如何使用 Azure 存储容器和 Blob 做了全面的概述。 开始使用 Batch 时，它应该位于阅读列表顶部附近。\r >\r >\r \r ## <a name=\"step-2-upload-task-application-and-data-files\"></a>步骤 2：上传任务应用程序和数据文件\r ![将任务应用程序和输入（数据）文件上传到容器][2]\r <br/>\r \r 在文件上传操作中，DotNetTutorial 先定义应用程序和输入文件在本地计算机上的路径的集合， 然后将这些文件上传到上一步骤创建的容器。\r \r ```csharp\r // Paths to the executable and its dependencies that will be executed by the tasks\r List<string> applicationFilePaths = new List<string>\r {\r     // The DotNetTutorial project includes a project reference to TaskApplication,\r     // allowing us to determine the path of the task application binary dynamically\r     typeof(TaskApplication.Program).Assembly.Location,\r     \"Microsoft.WindowsAzure.Storage.dll\"\r };\r \r // The collection of data files that are to be processed by the tasks\r List<string> inputFilePaths = new List<string>\r {\r     @\"..\\..\\taskdata1.txt\",\r     @\"..\\..\\taskdata2.txt\",\r     @\"..\\..\\taskdata3.txt\"\r };\r \r // Upload the application and its dependencies to Azure Storage. This is the\r // application that will process the data files, and will be executed by each\r // of the tasks on the compute nodes.\r List<ResourceFile> applicationFiles = await UploadFilesToContainerAsync(\r     blobClient,\r     appContainerName,\r     applicationFilePaths);\r \r // Upload the data files. This is the data that will be processed by each of\r // the tasks that are executed on the compute nodes within the pool.\r List<ResourceFile> inputFiles = await UploadFilesToContainerAsync(\r     blobClient,\r     inputContainerName,\r     inputFilePaths);\r ```\r \r `Program.cs` 中有两个方法涉及到上传过程：\r \r - `UploadFilesToContainerAsync`：此方法返回 [ResourceFile][net_resourcefile] 对象的集合（下面将会介绍），并在内部调用 `UploadFileToContainerAsync` 上传在 *filePaths* 参数中传递的每个文件。\r - `UploadFileToContainerAsync`：这是实际执行文件上传并创建 [ResourceFile][net_resourcefile] 对象的方法。 上传文件后，它将获取该文件的共享访问签名 (SAS) 并返回代表它的 ResourceFile 对象。 下面也会介绍共享访问签名。\r \r ```csharp\r private static async Task<ResourceFile> UploadFileToContainerAsync(\r     CloudBlobClient blobClient,\r     string containerName,\r     string filePath)\r {\r         Console.WriteLine(\r             \"Uploading file {0} to container [{1}]...\", filePath, containerName);\r \r         string blobName = Path.GetFileName(filePath);\r \r         CloudBlobContainer container = blobClient.GetContainerReference(containerName);\r         CloudBlockBlob blobData = container.GetBlockBlobReference(blobName);\r         await blobData.UploadFromFileAsync(filePath);\r \r         // Set the expiry time and permissions for the blob shared access signature.\r         // In this case, no start time is specified, so the shared access signature\r         // becomes valid immediately\r         SharedAccessBlobPolicy sasConstraints = new SharedAccessBlobPolicy\r         {\r                 SharedAccessExpiryTime = DateTime.UtcNow.AddHours(2),\r                 Permissions = SharedAccessBlobPermissions.Read\r         };\r \r         // Construct the SAS URL for blob\r         string sasBlobToken = blobData.GetSharedAccessSignature(sasConstraints);\r         string blobSasUri = String.Format(\"{0}{1}\", blobData.Uri, sasBlobToken);\r \r         return new ResourceFile(blobSasUri, blobName);\r }\r ```\r \r ### <a name=\"resourcefiles\"></a>ResourceFiles\r \r [ResourceFile][net_resourcefile] 提供批处理中的任务，以及 Azure 存储中在任务运行之前下载到计算节点的文件的 URL。 [ResourceFile.BlobSource][net_resourcefile_blobsource] 属性指定存在于 Azure 存储的文件的完整 URL。 该 URL 还可以包含用于对文件进行安全访问的共享访问签名 (SAS)。 Batch .NET 中的大多数任务类型都包含 *ResourceFiles* 属性，这些类型包括：\r \r - [CloudTask][net_task]\r - [StartTask][net_pool_starttask]\r - [JobPreparationTask][net_jobpreptask]\r - [JobReleaseTask][net_jobreltask]\r \r DotNetTutorial 示例应用程序不使用 JobPreparationTask 或 JobReleaseTask 任务类型，但可以通过 [在 Azure Batch 计算节点上运行作业准备和完成任务](batch-job-prep-release.md)来详细了解这些任务类型。\r \r ### <a name=\"shared-access-signature-sas\"></a>共享访问签名 (SAS)\r 共享访问签名是一些字符串，包含为 URL 的一部分时，它们可以提供对 Azure 存储中容器和 Blob 的安全访问。 DotNetTutorial 应用程序使用 Blob 和容器共享访问签名 URL，并演示如何从存储空间服务获取这些共享访问签名字符串。\r \r - **Blob 共享访问签名**：DotNetTutorial 中池的 StartTask 在从存储空间下载应用程序二进制文件和输入数据文件时使用 Blob 共享访问签名（请参阅下面的步骤 3）。 DotNetTutorial 的 `Program.cs` 中的 `UploadFileToContainerAsync` 方法包含的代码可用于获取每个 blob 的共享访问签名。 它是通过调用 [CloudBlob.GetSharedAccessSignature][net_sas_blob] 来完成此操作的。\r - **容器共享访问签名**：每个任务在计算节点上完成其工作后，会将其输出文件上传到 Azure 存储中的*输出*容器。 为此，TaskApplication 使用容器共享访问签名，在上传文件时，该共享访问签名提供对路径中包含的容器的写访问。 获取容器共享访问签名的操作方式类似于获取 blob 共享访问签名。 在 DotNetTutorial 中，会发现 `GetContainerSasUrl` 帮助器方法调用 [CloudBlobContainer.GetSharedAccessSignature][net_sas_container] 来执行该操作。 可以在下面的“步骤 6：监视任务”中详细了解 TaskApplication 如何使用容器共享访问签名。\r \r > [!TIP]\r > 请查看有关共享访问签名的两篇系列教程的[第 1 部分：了解共享访问签名 (SAS) 模型](../storage/common/storage-dotnet-shared-access-signature-part-1.md)和[第 2 部分：创建共享访问签名 (SAS) 并将其用于 Blob 存储](../storage/blobs/storage-dotnet-shared-access-signature-part-2.md)，详细了解如何提供对存储帐户中数据的安全访问。\r >\r >\r \r ## <a name=\"step-3-create-batch-pool\"></a>步骤 3：创建 Batch 池\r ![创建 Batch 池][3]\r <br/>\r \r Batch **池** 是 Batch 执行作业任务时所在的计算节点（虚拟机）集合。\r \r 通过 Azure 存储 API 将应用程序和数据文件上传到存储帐户以后，*DotNetTutorial* 就会开始通过 Batch .NET 库提供的 API 调用 Batch 服务。 代码首先创建 [BatchClient][net_batchclient]：\r \r ```csharp\r BatchSharedKeyCredentials cred = new BatchSharedKeyCredentials(\r     BatchAccountUrl,\r     BatchAccountName,\r     BatchAccountKey);\r \r using (BatchClient batchClient = BatchClient.Open(cred))\r {\r     ...\r ```\r \r 然后，该示例会调用 `CreatePoolIfNotExistsAsync` 以在 Batch 帐户中创建计算节点池。 `CreatePoolIfNotExistsAsync` 使用 [BatchClient.PoolOperations.CreatePool][net_pool_create] 方法在 Batch 服务中创建新池：\r \r ```csharp\r private static async Task CreatePoolIfNotExistAsync(BatchClient batchClient, string poolId, IList<ResourceFile> resourceFiles)\r {\r     CloudPool pool = null;\r     try\r     {\r         Console.WriteLine(\"Creating pool [{0}]...\", poolId);\r \r         // Create the unbound pool. Until we call CloudPool.Commit() or CommitAsync(), no pool is actually created in the\r         // Batch service. This CloudPool instance is therefore considered \"unbound,\" and we can modify its properties.\r         pool = batchClient.PoolOperations.CreatePool(\r             poolId: poolId,\r             targetDedicatedComputeNodes: 3,                                             // 3 compute nodes\r             virtualMachineSize: \"small\",                                                // single-vCPU, 1.75 GB memory, 225 GB disk\r             cloudServiceConfiguration: new CloudServiceConfiguration(osFamily: \"4\"));   // Windows Server 2012 R2\r \r         // Create and assign the StartTask that will be executed when compute nodes join the pool.\r         // In this case, we copy the StartTask's resource files (that will be automatically downloaded\r         // to the node by the StartTask) into the shared directory that all tasks will have access to.\r         pool.StartTask = new StartTask\r         {\r             // Specify a command line for the StartTask that copies the task application files to the\r             // node's shared directory. Every compute node in a Batch pool is configured with a number\r             // of pre-defined environment variables that can be referenced by commands or applications\r             // run by tasks.\r \r             // Since a successful execution of robocopy can return a non-zero exit code (e.g. 1 when one or\r             // more files were successfully copied) we need to manually exit with a 0 for Batch to recognize\r             // StartTask execution success.\r             CommandLine = \"cmd /c (robocopy %AZ_BATCH_TASK_WORKING_DIR% %AZ_BATCH_NODE_SHARED_DIR%) ^& IF %ERRORLEVEL% LEQ 1 exit 0\",\r             ResourceFiles = resourceFiles,\r             WaitForSuccess = true\r         };\r \r         await pool.CommitAsync();\r     }\r     catch (BatchException be)\r     {\r         // Swallow the specific error code PoolExists since that is expected if the pool already exists\r         if (be.RequestInformation?.BatchError != null && be.RequestInformation.BatchError.Code == BatchErrorCodeStrings.PoolExists)\r         {\r             Console.WriteLine(\"The pool {0} already existed when we tried to create it\", poolId);\r         }\r         else\r         {\r             throw; // Any other exception is unexpected\r         }\r     }\r }\r ```\r \r 使用 [CreatePool][net_pool_create] 创建池时，需指定多个参数，例如计算节点数目、[节点大小](../cloud-services/cloud-services-sizes-specs.md)以及节点的操作系统。 在 *DotNetTutorial* 中，我们使用 [CloudServiceConfiguration][net_cloudserviceconfiguration] 从[云服务](../cloud-services/cloud-services-guestos-update-matrix.md)指定 Windows Server 2012 R2。 \r \r 也可通过为池指定 [VirtualMachineConfiguration][net_virtualmachineconfiguration] 来创建是 Azure 虚拟机 (VM) 的计算节点的池。 可以根据 Windows 或 [Linux 映像](batch-linux-nodes.md)创建 VM 计算节点池。 VM 映像的源可以是下述任意一种：\r \r - [Azure 虚拟机 Marketplace][vm_marketplace]，提供可随时使用的 Windows 和 Linux 映像。 \r - 你准备和提供的自定义映像。 有关自定义映像的更多详细信息，请参阅[使用 Batch 开发大规模并行计算解决方案](batch-api-basics.md#pool)。\r \r > [!IMPORTANT]\r > 需要支付 Batch 中计算资源的费用。 要将费用降到最低，可以在运行示例之前，将 `targetDedicatedComputeNodes` 降为 1。\r >\r >\r \r 也可以连同这些实体节点属性一起指定池的 [StartTask][net_pool_starttask] 。 StartTask 在每个节点加入池以及每次重新启动节点时在该节点上运行。 StartTask 特别适合用于在任务执行之前在计算节点上安装应用程序。 例如，如果任务使用 Python 脚本处理数据，则可以使用 StartTask 在计算节点上安装 Python。\r \r 在此示例应用程序中，StartTask 将它从存储中下载的文件（使用 [StartTask][net_starttask].[ResourceFiles][net_starttask_resourcefiles] 属性指定），从 StartTask 工作目录复制到在节点上运行的*所有*任务可以访问的共享目录。 本质上，这会在节点加入池时，将 `TaskApplication.exe` 及其依赖项复制到每个节点上的共享目录，因此该节点上运行的任何任务都可以访问它。\r \r > [!TIP]\r > Azure Batch 的 **应用程序包** 功能提供另一种方法，用于将应用程序转移到池中的计算节点。 有关详细信息，请参阅[使用 Batch 应用程序包将应用程序部署到计算节点](batch-application-packages.md)。\r >\r >\r \r 此外，在上述代码片段中，值得注意的问题是，StartTask 的 *CommandLine* 属性中使用了两个环境变量：`%AZ_BATCH_TASK_WORKING_DIR%` 和 `%AZ_BATCH_NODE_SHARED_DIR%`。 将自动为 Batch 池中的每个计算节点配置多个特定于 Batch 的环境变量。 由任务执行的任何进程都可以访问这些环境变量。\r \r > [!TIP]\r > 若要深入了解批处理池中计算节点上可用的环境变量，以及有关任务工作目录的信息，请参阅[面向开发人员的批处理功能概述](batch-api-basics.md)中的[任务的环境设置](batch-api-basics.md#environment-settings-for-tasks)及[文件和目录](batch-api-basics.md#files-and-directories)部分。\r >\r >\r \r ## <a name=\"step-4-create-batch-job\"></a>步骤 4：创建 Batch 作业\r ![创建 Batch 作业][4]<br/>\r \r Batch **作业** 是任务的集合，它与计算节点池相关联。 作业中的任务在关联池的计算节点上执行。\r \r 不仅可以使用作业来组织和跟踪相关工作负荷中的任务，也可以使用它来实施特定的约束，例如作业（并扩展到其任务）的最大运行时，以及 Batch 帐户中其他作业的相关作业优先级。 不过在本示例中，该作业仅与步骤 3 中创建的池关联。 未配置任何其他属性。\r \r 所有 Batch 作业都与特定的池关联。 此关联指示将要在其上执行作业任务的节点。 可以通过 [CloudJob.PoolInformation][net_job_poolinfo] 属性进行这方面的指定，如下面的代码片段所示。\r \r ```csharp\r private static async Task CreateJobAsync(\r     BatchClient batchClient,\r     string jobId,\r     string poolId)\r {\r     Console.WriteLine(\"Creating job [{0}]...\", jobId);\r \r     CloudJob job = batchClient.JobOperations.CreateJob();\r     job.Id = jobId;\r     job.PoolInformation = new PoolInformation { PoolId = poolId };\r \r     await job.CommitAsync();\r }\r ```\r \r 创建作业后，可以添加任务来执行工作。\r \r ## <a name=\"step-5-add-tasks-to-job\"></a>步骤 5：将任务添加到作业\r ![将任务添加到作业][5]<br/>\r *(1) 将任务添加到作业；(2) 将任务计划为在节点上运行；(3) 任务下载要处理的数据文件*\r \r Batch **任务** 是在计算节点上执行的各个工作单位。 任务有一个命令行，可运行在该命令行中指定的脚本或可执行文件。\r \r 要实际执行工作，必须将任务添加到作业。 每个 [CloudTask][net_task] 都是使用命令行属性以及任务在其命令行自动执行前下载到节点的 [ResourceFiles][net_task_resourcefiles]（如同池的 StartTask）进行配置的。 在 *DotNetTutorial* 示例项目中，每个任务只处理一个文件。 因此，其 ResourceFiles 集合包含单个元素。\r \r ```csharp\r private static async Task<List<CloudTask>> AddTasksAsync(\r     BatchClient batchClient,\r     string jobId,\r     List<ResourceFile> inputFiles,\r     string outputContainerSasUrl)\r {\r     Console.WriteLine(\"Adding {0} tasks to job [{1}]...\", inputFiles.Count, jobId);\r \r     // Create a collection to hold the tasks that we'll be adding to the job\r     List<CloudTask> tasks = new List<CloudTask>();\r \r     // Create each of the tasks. Because we copied the task application to the\r     // node's shared directory with the pool's StartTask, we can access it via\r     // the shared directory on the node that the task runs on.\r     foreach (ResourceFile inputFile in inputFiles)\r     {\r         string taskId = \"topNtask\" + inputFiles.IndexOf(inputFile);\r         string taskCommandLine = String.Format(\r             \"cmd /c %AZ_BATCH_NODE_SHARED_DIR%\\\\TaskApplication.exe {0} 3 \\\"{1}\\\"\",\r             inputFile.FilePath,\r             outputContainerSasUrl);\r \r         CloudTask task = new CloudTask(taskId, taskCommandLine);\r         task.ResourceFiles = new List<ResourceFile> { inputFile };\r         tasks.Add(task);\r     }\r \r     // Add the tasks as a collection, as opposed to issuing a separate AddTask call\r     // for each. Bulk task submission helps to ensure efficient underlying API calls\r     // to the Batch service.\r     await batchClient.JobOperations.AddTaskAsync(jobId, tasks);\r \r     return tasks;\r }\r ```\r \r > [!IMPORTANT]\r > 在访问环境变量（例如 `%AZ_BATCH_NODE_SHARED_DIR%`）或执行节点的 `PATH` 中找不到的应用程序时，任务命令行必须带有 `cmd /c` 前缀。 这样才可以显式执行命令解释器，并指示其在执行命令后终止操作。 如果任务在节点的 `PATH` 中执行应用程序（例如 *robocopy.exe* 或 *powershell.exe*），而且未使用任何环境变量，则不必要满足此要求。\r >\r >\r \r 在上述代码片段中的 `foreach` 循环内，可以看到已构造任务的命令行，因此有三个命令行参数已传递到 *TaskApplication.exe*：\r \r 1. **第一个参数** 是要处理的文件的路径。 这是节点上现有文件的本地路径。 首次创建上面 `UploadFileToContainerAsync` 中的 ResourceFile 对象时，会将文件名用于此属性（作为 ResourceFile 构造函数的参数）。 这意味着可以在 *TaskApplication.exe*所在的目录中找到此文件。\r 2. **第二个参数**指定应将前 *N* 个单词写入输出文件。 在示例中，此参数已经过硬编码，因此会将前 3 个单词写入输出文件。\r 3. **第三个参数**是共享访问签名 (SAS)，提供对 Azure 存储中**输出**容器的写访问。 *TaskApplication.exe* 使用此共享访问签名 URL。 可以在 TaskApplication 项目的 `Program.cs` 文件的 `UploadFileToContainer` 方法中找到此方面的代码：\r \r     ```csharp\r     // NOTE: From project TaskApplication Program.cs\r \r     private static void UploadFileToContainer(string filePath, string containerSas)\r     {\r             string blobName = Path.GetFileName(filePath);\r \r             // Obtain a reference to the container using the SAS URI.\r             CloudBlobContainer container = new CloudBlobContainer(new Uri(containerSas));\r \r             // Upload the file (as a new blob) to the container\r             try\r             {\r                     CloudBlockBlob blob = container.GetBlockBlobReference(blobName);\r                     blob.UploadFromFile(filePath);\r \r                     Console.WriteLine(\"Write operation succeeded for SAS URL \" + containerSas);\r                     Console.WriteLine();\r             }\r             catch (StorageException e)\r             {\r \r                     Console.WriteLine(\"Write operation failed for SAS URL \" + containerSas);\r                     Console.WriteLine(\"Additional error information: \" + e.Message);\r                     Console.WriteLine();\r \r                     // Indicate that a failure has occurred so that when the Batch service\r                     // sets the CloudTask.ExecutionInformation.ExitCode for the task that\r                     // executed this application, it properly indicates that there was a\r                     // problem with the task.\r                     Environment.ExitCode = -1;\r             }\r     }\r     ```\r \r ## <a name=\"step-6-monitor-tasks\"></a>步骤 6：监视任务\r \r ![监视任务][6]<br/>\r *客户端应用程序会：(1) 监视任务的完成和成功状态；(2) 监视将结果数据上传到 Azure 存储的任务*\r \r 任务在添加到作业后，自动排入队列并计划在与作业关联的池中的计算节点上执行。 根据你指定的设置，Batch 将处理所有任务排队、计划、重试和其他任务管理工作。\r \r 监视任务的执行有许多方法。 DotNetTutorial 显示了一个简单的示例，该示例只报告完成状态以及任务的失败或成功状态。 DotNetTutorial 的 `Program.cs` 中的 `MonitorTasks` 方法内有三个 Batch .NET 概念值得讨论。 下面按出现顺序列出了这些概念：\r \r 1. **ODATADetailLevel**：必须在列出操作（例如获取作业的任务列表）中指定 [ODATADetailLevel][net_odatadetaillevel]，确保批处理应用程序的性能。 若打算在 Batch 应用程序中进行任何类型的状态监视，请将 [有效地查询 Azure Batch 服务](batch-efficient-list-queries.md) 加入阅读列表。\r 2. **TaskStateMonitor**：[TaskStateMonitor][net_taskstatemonitor] 为批处理 .NET 应用程提供用于监视任务状态的帮助器实用工具。 在 `MonitorTasks` 中，*DotNetTutorial* 将等待所有任务在时限内达到 [TaskState.Completed][net_taskstate]， 然后终止作业。\r 3. **TerminateJobAsync**：通过 [JobOperations.TerminateJobAsync][net_joboperations_terminatejob] 终止作业（或阻止 JobOperations.TerminateJob）会将该作业标记为已完成。 如果批处理解决方案使用 [JobReleaseTask][net_jobreltask]，则这样做很重要。 这是一种特殊类型的任务，在 [作业准备与完成任务](batch-job-prep-release.md)中有说明。\r \r *DotNetTutorial* 的 `Program.cs` 中的 `MonitorTasks` 方法如下所示：\r \r ```csharp\r private static async Task<bool> MonitorTasks(\r     BatchClient batchClient,\r     string jobId,\r     TimeSpan timeout)\r {\r     bool allTasksSuccessful = true;\r     const string successMessage = \"All tasks reached state Completed.\";\r     const string failureMessage = \"One or more tasks failed to reach the Completed state within the timeout period.\";\r \r     // Obtain the collection of tasks currently managed by the job. Note that we use\r     // a detail level to  specify that only the \"id\" property of each task should be\r     // populated. Using a detail level for all list operations helps to lower\r     // response time from the Batch service.\r     ODATADetailLevel detail = new ODATADetailLevel(selectClause: \"id\");\r     List<CloudTask> tasks =\r         await batchClient.JobOperations.ListTasks(JobId, detail).ToListAsync();\r \r     Console.WriteLine(\"Awaiting task completion, timeout in {0}...\",\r         timeout.ToString());\r \r     // We use a TaskStateMonitor to monitor the state of our tasks. In this case, we\r     // will wait for all tasks to reach the Completed state.\r     TaskStateMonitor taskStateMonitor\r         = batchClient.Utilities.CreateTaskStateMonitor();\r \r     try\r     {\r         await taskStateMonitor.WhenAll(tasks, TaskState.Completed, timeout);\r     }\r     catch (TimeoutException)\r     {\r         await batchClient.JobOperations.TerminateJobAsync(jobId, failureMessage);\r         Console.WriteLine(failureMessage);\r         return false;\r     }\r \r     await batchClient.JobOperations.TerminateJobAsync(jobId, successMessage);\r \r     // All tasks have reached the \"Completed\" state, however, this does not\r     // guarantee all tasks completed successfully. Here we further check each task's\r     // ExecutionInfo property to ensure that it did not encounter a failure\r     // or return a non-zero exit code.\r \r     // Update the detail level to populate only the task id and executionInfo\r     // properties. We refresh the tasks below, and need only this information for\r     // each task.\r     detail.SelectClause = \"id, executionInfo\";\r \r     foreach (CloudTask task in tasks)\r     {\r         // Populate the task's properties with the latest info from the Batch service\r         await task.RefreshAsync(detail);\r \r         if (task.ExecutionInformation.Result == TaskExecutionResult.Failure)\r         {\r             // A task with failure information set indicates there was a problem with the task. It is important to note that\r             // the task's state can be \"Completed,\" yet still have encountered a failure.\r \r             allTasksSuccessful = false;\r \r             Console.WriteLine(\"WARNING: Task [{0}] encountered a failure: {1}\", task.Id, task.ExecutionInformation.FailureInformation.Message);\r             if (task.ExecutionInformation.ExitCode != 0)\r             {\r                 // A non-zero exit code may indicate that the application executed by the task encountered an error\r                 // during execution. As not every application returns non-zero on failure by default (e.g. robocopy),\r                 // your implementation of error checking may differ from this example.\r \r                 Console.WriteLine(\"WARNING: Task [{0}] returned a non-zero exit code - this may indicate task execution or completion failure.\", task.Id);\r             }\r         }\r     }\r \r     if (allTasksSuccessful)\r     {\r         Console.WriteLine(\"Success! All tasks completed successfully within the specified timeout period.\");\r     }\r \r     return allTasksSuccessful;\r }\r ```\r \r ## <a name=\"step-7-download-task-output\"></a>步骤 7：下载任务输出\r \r ![从存储空间下载任务输出][7]<br/>\r \r 完成作业后，可以从 Azure 存储下载任务的输出。 可以在 *DotNetTutorial* 的 `Program.cs` 中调用 `DownloadBlobsFromContainerAsync` 来实现此目的：\r \r ```csharp\r private static async Task DownloadBlobsFromContainerAsync(\r     CloudBlobClient blobClient,\r     string containerName,\r     string directoryPath)\r {\r         Console.WriteLine(\"Downloading all files from container [{0}]...\", containerName);\r \r         // Retrieve a reference to a previously created container\r         CloudBlobContainer container = blobClient.GetContainerReference(containerName);\r \r         // Get a flat listing of all the block blobs in the specified container\r         foreach (IListBlobItem item in container.ListBlobs(\r                     prefix: null,\r                     useFlatBlobListing: true))\r         {\r                 // Retrieve reference to the current blob\r                 CloudBlob blob = (CloudBlob)item;\r \r                 // Save blob contents to a file in the specified folder\r                 string localOutputFile = Path.Combine(directoryPath, blob.Name);\r                 await blob.DownloadToFileAsync(localOutputFile, FileMode.Create);\r         }\r \r         Console.WriteLine(\"All files downloaded to {0}\", directoryPath);\r }\r ```\r \r > [!NOTE]\r > 对 *DotNetTutorial* 应用程序中 `DownloadBlobsFromContainerAsync` 的调用可以指定应将文件下载到 `%TEMP%` 文件夹。 可以随意修改此输出位置。\r >\r >\r \r ## <a name=\"step-8-delete-containers\"></a>步骤 8：删除容器\r 由于用户需要对位于 Azure 存储中的数据付费，因此我们建议删除批处理作业不再需要的 Blob。 在 DotNetTutorial 的 `Program.cs` 中，调用帮助器方法 `DeleteContainerAsync` 三次即可实现此目的：\r \r ```csharp\r // Clean up Storage resources\r await DeleteContainerAsync(blobClient, appContainerName);\r await DeleteContainerAsync(blobClient, inputContainerName);\r await DeleteContainerAsync(blobClient, outputContainerName);\r ```\r \r 该方法本身只获取对容器的引用，并调用 [CloudBlobContainer.DeleteIfExistsAsync][net_container_delete]：\r \r ```csharp\r private static async Task DeleteContainerAsync(\r     CloudBlobClient blobClient,\r     string containerName)\r {\r     CloudBlobContainer container = blobClient.GetContainerReference(containerName);\r \r     if (await container.DeleteIfExistsAsync())\r     {\r         Console.WriteLine(\"Container [{0}] deleted.\", containerName);\r     }\r     else\r     {\r         Console.WriteLine(\"Container [{0}] does not exist, skipping deletion.\",\r             containerName);\r     }\r }\r ```\r \r ## <a name=\"step-9-delete-the-job-and-the-pool\"></a>步骤 9：删除作业和池\r 在最后一个步骤中，系统会提示用户删除 DotNetTutorial 应用程序创建的作业和池。 虽然作业和任务本身不收费，但计算节点*收费*。 因此，建议只在需要的时候分配节点。 在维护过程中，可能需要删除未使用的池。\r \r BatchClient 的 [JobOperations][net_joboperations] 和 [PoolOperations][net_pooloperations] 都有对应的删除方法（在用户确认删除时调用）：\r \r ```csharp\r // Clean up the resources we've created in the Batch account if the user so chooses\r Console.WriteLine();\r Console.WriteLine(\"Delete job? [yes] no\");\r string response = Console.ReadLine().ToLower();\r if (response != \"n\" && response != \"no\")\r {\r     await batchClient.JobOperations.DeleteJobAsync(JobId);\r }\r \r Console.WriteLine(\"Delete pool? [yes] no\");\r response = Console.ReadLine();\r if (response != \"n\" && response != \"no\")\r {\r     await batchClient.PoolOperations.DeletePoolAsync(PoolId);\r }\r ```\r \r > [!IMPORTANT]\r > 请记住，需要支付计算资源的费用，删除未使用的池可将费用降到最低。 另请注意，删除池也会删除该池内的所有计算节点，并且删除池后，将无法恢复节点上的任何数据。\r >\r >\r \r ## <a name=\"run-the-dotnettutorial-sample\"></a>运行 *DotNetTutorial* 示例\r 运行示例应用程序时，控制台输出如下所示。 在执行期间启动池的计算节点时，会遇到暂停并看到 `Awaiting task completion, timeout in 00:30:00...`。 在执行期间和之后，可以使用 [Azure 门户][azure_portal] 监视池、计算节点、作业和任务。 使用 [Azure 门户][azure_portal]或 [Azure 存储资源管理器][storage_explorers]可以查看应用程序创建的存储资源（容器和 Blob）。\r \r 以默认配置运行应用程序时，典型的执行时间 **大约为 5 分钟** 。\r \r ```\r Sample start: 1/8/2016 09:42:58 AM\r \r Container [application] created.\r Container [input] created.\r Container [output] created.\r Uploading file C:\\repos\\azure-batch-samples\\CSharp\\ArticleProjects\\DotNetTutorial\\bin\\Debug\\TaskApplication.exe to container [application]...\r Uploading file Microsoft.WindowsAzure.Storage.dll to container [application]...\r Uploading file ..\\..\\taskdata1.txt to container [input]...\r Uploading file ..\\..\\taskdata2.txt to container [input]...\r Uploading file ..\\..\\taskdata3.txt to container [input]...\r Creating pool [DotNetTutorialPool]...\r Creating job [DotNetTutorialJob]...\r Adding 3 tasks to job [DotNetTutorialJob]...\r Awaiting task completion, timeout in 00:30:00...\r Success! All tasks completed successfully within the specified timeout period.\r Downloading all files from container [output]...\r All files downloaded to C:\\Users\\USERNAME\\AppData\\Local\\Temp\r Container [application] deleted.\r Container [input] deleted.\r Container [output] deleted.\r \r Sample end: 1/8/2016 09:47:47 AM\r Elapsed time: 00:04:48.5358142\r \r Delete job? [yes] no: yes\r Delete pool? [yes] no: yes\r \r Sample complete, hit ENTER to exit...\r ```\r \r ## <a name=\"next-steps\"></a>后续步骤\r 可以随意更改 *DotNetTutorial* 和 *TaskApplication*，体验不同的计算方案。 例如，尝试通过某个方法（例如使用 [Thread.Sleep][net_thread_sleep]）将执行延迟添加到 *TaskApplication*，模拟长时间运行的任务并在门户中监视这些任务。 尝试添加更多任务，或调整计算节点的数目。 添加逻辑来检查并允许使用现有的池加速执行时间（*提示*：请查看 [azure-batch-samples][github_samples] 中 [Microsoft.Azure.Batch.Samples.Common][github_samples_common] 项目的 `ArticleHelpers.cs`）。\r \r 熟悉 Batch 解决方案的基本工作流后，接下来可以深入了解 Batch 服务的其他功能。\r \r - 如果对 Batch 服务不熟悉，建议查看 [Azure Batch 功能概述](batch-api-basics.md) 一文。\r - 从[批处理学习路径][batch_learning_path]中**有关开发的深度知识**下面列出的其他批处理开发文章着手。\r - 通过 [TopNWords][github_topnwords] 示例了解有关使用批处理服务处理“前 N 个单词”工作负荷的不同实现方式。\r - 查看 Batch .NET [发行说明](https://github.com/Azure/azure-sdk-for-net/blob/psSdkJson6/src/SDKs/Batch/DataPlane/changelog.md#azurebatch-release-notes)，了解库中的最新更改。\r \r [azure_batch]: /batch/\r [azure_free_account]: https://www.azure.cn/pricing/1rmb-trial/\r [azure_portal]: https://portal.azure.cn\r [batch_learning_path]: https://azure.microsoft.com/documentation/learning-paths/batch/\r [github_batchlabs]: https://azure.github.io/BatchLabs/\r [github_dotnettutorial]: https://github.com/Azure/azure-batch-samples/tree/master/CSharp/ArticleProjects/DotNetTutorial\r [github_samples]: https://github.com/Azure/azure-batch-samples\r [github_samples_common]: https://github.com/Azure/azure-batch-samples/tree/master/CSharp/Common\r [github_samples_zip]: https://github.com/Azure/azure-batch-samples/archive/master.zip\r [github_topnwords]: https://github.com/Azure/azure-batch-samples/tree/master/CSharp/TopNWords\r [net_api]: http://msdn.microsoft.com/library/azure/mt348682.aspx\r [net_api_storage]: https://msdn.microsoft.com/library/azure/mt347887.aspx\r [net_batchclient]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.aspx\r [net_cloudblobclient]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.blob.cloudblobclient.aspx\r [net_cloudblobcontainer]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.blob.cloudblobcontainer.aspx\r [net_cloudstorageaccount]: https://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.cloudstorageaccount.aspx\r [net_cloudserviceconfiguration]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudserviceconfiguration.aspx\r [net_container_delete]: https://msdn.microsoft.com/library/microsoft.windowsazure.storage.blob.cloudblobcontainer.deleteifexistsasync.aspx\r [net_job]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudjob.aspx\r [net_job_poolinfo]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.protocol.models.cloudjob.poolinformation.aspx\r [net_joboperations]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.joboperations\r [net_joboperations_terminatejob]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.joboperations.terminatejobasync.aspx\r [net_jobpreptask]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudjob.jobpreparationtask.aspx\r [net_jobreltask]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudjob.jobreleasetask.aspx\r [net_node]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.computenode.aspx\r [net_odatadetaillevel]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.odatadetaillevel.aspx\r [net_pool]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.aspx\r [net_pool_create]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.createpool.aspx\r [net_pool_starttask]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.starttask.aspx\r [net_pooloperations]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.pooloperations\r [net_resourcefile]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.resourcefile.aspx\r [net_resourcefile_blobsource]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.resourcefile.blobsource.aspx\r [net_sas_blob]: https://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.blob.cloudblob.getsharedaccesssignature.aspx\r [net_sas_container]: https://msdn.microsoft.com/library/azure/microsoft.windowsazure.storage.blob.cloudblobcontainer.getsharedaccesssignature.aspx\r [net_starttask]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.starttask.aspx\r [net_starttask_resourcefiles]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.starttask.resourcefiles.aspx\r [net_task]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudtask.aspx\r [net_task_resourcefiles]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudtask.resourcefiles.aspx\r [net_taskstate]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.common.taskstate.aspx\r [net_taskstatemonitor]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.taskstatemonitor.aspx\r [net_thread_sleep]: https://msdn.microsoft.com/library/274eh01d(v=vs.110).aspx\r [net_virtualmachineconfiguration]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.virtualmachineconfiguration.aspx\r [nuget_packagemgr]: https://docs.nuget.org/consume/installing-nuget\r [nuget_restore]: https://docs.nuget.org/consume/package-restore/msbuild-integrated#enabling-package-restore-during-build\r [storage_explorers]: http://storageexplorer.com/\r [visual_studio]: https://www.visualstudio.com/vs/\r [vm_marketplace]: https://azure.microsoft.com/marketplace/virtual-machines/\r \r [1]: ./media/batch-dotnet-get-started/batch_workflow_01_sm.png \"在 Azure 存储中创建容器\"\r [2]: ./media/batch-dotnet-get-started/batch_workflow_02_sm.png \"将任务应用程序和输入（数据）文件上传到容器\"\r [3]: ./media/batch-dotnet-get-started/batch_workflow_03_sm.png \"创建 Batch 池\"\r [4]: ./media/batch-dotnet-get-started/batch_workflow_04_sm.png \"创建 Batch 作业\"\r [5]: ./media/batch-dotnet-get-started/batch_workflow_05_sm.png \"将任务添加到作业\"\r [6]: ./media/batch-dotnet-get-started/batch_workflow_06_sm.png \"监视任务\"\r [7]: ./media/batch-dotnet-get-started/batch_workflow_07_sm.png \"从存储空间下载任务输出\"\r [8]: ./media/batch-dotnet-get-started/batch_workflow_sm.png \"Batch 解决方案工作流（完整流程图）\"\r [9]: ./media/batch-dotnet-get-started/credentials_batch_sm.png \"门户中的 Batch 凭据\"\r [10]: ./media/batch-dotnet-get-started/credentials_storage_sm.png \"门户中的存储空间凭据\"\r [11]: ./media/batch-dotnet-get-started/batch_workflow_minimal_sm.png \"Batch 解决方案工作流（精简流程图）\"\r \r <!-- Update_Description: wording update -->\r "}