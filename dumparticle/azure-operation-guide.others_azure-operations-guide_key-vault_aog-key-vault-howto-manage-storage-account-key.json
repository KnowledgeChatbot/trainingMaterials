{"Title":"Azure Key Vault 管理存储帐户密钥","Description":"Azure Key Vault 管理存储帐户密钥","Content":"# Azure Key Vault 管理存储帐户密钥\r \r 在 Azure Key Vault 存储帐户密钥推出之前，开发人员必须管理其自己的 Azure 存储帐户 (ASA) 密钥，并手动或通过外部自动化功能轮换这些密钥。 现在，通过 Key Vault 存储帐户密钥已实现为 Azure 存储帐户进行身份验证的功能。本文主要介绍如何使用 Azure Powershell 创建基于 Key Vault 的存储账户 SAS 信息，然后结合 C# 基于 AD Application 认证的方式使用 Key Vault 获取存储对应的 SAS，进而创建 StorageClient。\r \r ## Powershell 脚本\r \r ```PowerShell\r # 参数设置\r $subscriptionId = 'e0fbea86-6cf2-4b2d-81e2-9c59f4f96bcb'\r $keyVaultName = 'newtest'\r $resourceGroupName = 'yuvmtest'\r $keyVaultObjectId = '3be6a1e9-8a8a-4613-8e4e-b974593d011e'\r $location = 'china north'\r $adApplicationId = '16a94c84-c6ba-4f19-aa48-3353f8ffe18e' # 通过后面：获取 Key Vault 的 ObjectId 脚本获取\r $storageAccountName = 'yunewstoragetest'\r # Scope 参数获取：Protal -> 对应的存储账户 -> 设置 -> 属性 -> 资源 ID\r $scope = '/subscriptions/e0fbea86-6cf2-4b2d-81e2-9c59f4f96bcb/resourceGroups/yuvmtest/providers/Microsoft.Storage/storageAccounts/yunewstoragetest' \r # 使用用户名和密码登录到订阅\r $cred = New-Object System.Management.Automation.PSCredential(\"cietest03@microsoftinternal.partner.onmschina.cn\",(ConvertTo-SecureString \"DEV@!321\" -AsPlainText -Force))\r \r Add-AzureRmAccount -EnvironmentName AzureChinaCloud -Credential $cred\r \r Get-AzureRmSubscription | select SubscriptionName,SubscriptionID | sort SubscriptionName,SubscriptionID\r \r Set-AzureRmContext -SubscriptionId  $subscriptionId\r \r Get-AzureRmStorageAccount -Name yutest\r \r # 获取 Key Vault 的 ObjectId：\r \r Get-AzureRmADServicePrincipal -SearchString \"Azure Key Vault\"\r \r # 创建密钥保管库\r \r New-AzureRmKeyVault -VaultName $keyVaultName -ResourceGroupName $resourceGroupName -Location $location\r \r Get-AzureRmKeyVault -VaultName $keyVaultName\r \r # 根据获取的 ObjectId 将存储密钥操作员角色分配给 Azure Key Vault 标识        \r \r New-AzureRmRoleAssignment -ObjectId $keyVaultObjectId -RoleDefinitionName Owner -Scope $scope\r \r # 为 key-vault 分配操作 storage 的权限范围\r \r Set-AzureRmKeyVaultAccessPolicy -VaultName $keyVaultName -ObjectId $keyVaultObjectId -PermissionsToStorage all\r \r # 授权 AD 应用程序使用密钥或机密，关于 AD 应用程序的创建请参考链接：http://arui.me/index.php/archives/114/\r Set-AzureRmKeyVaultAccessPolicy -VaultName $keyVaultName -ServicePrincipalName $adApplicationId -PermissionsToSecrets all -PermissionsToStorage all -PermissionsToCertificates all\r \r # 添加 storage Account\r \r $regenerationPeriod = [System.Timespan]::FromDays(90)\r Add-AzureKeyVaultManagedStorageAccount -AccountName $keyVaultName -VaultName $keyVaultName -AccountResourceId $scope -ActiveKeyName 'key1' -RegenerationPeriod $regenerationPeriod\r \r # 获取 Secret URL 对应 secret id\r \r Set-AzureKeyVaultManagedStorageSasDefinition -Service Blob -ResourceType Container,Service -VaultName $keyVaultName -AccountName $keyVaultName -Name blobsas111 -Protocol HttpsOnly -ValidityPeriod ([System.Timespan]::FromDays(1)) -Permission Read,List,Write,Delete\r ```\r \r **获取的 Secret URL :**\r \r ![powershell](media/aog-key-vault-howto-manage-storage-account-key/powershell.png)\r \r ## C# 代码\r \r ```C#\r using Microsoft.Azure.KeyVault;\r using Microsoft.IdentityModel.Clients.ActiveDirectory;\r using Microsoft.WindowsAzure.Storage;\r using Microsoft.WindowsAzure.Storage.Auth;\r using Microsoft.WindowsAzure.Storage.Blob;\r using System;\r using System.Net.Http;\r using System.Threading;\r using System.Threading.Tasks;\r \r namespace storagekeyvault\r {\r     class Program\r     {\r         static KeyVaultClient kv;\r         static void Main(string[] args)\r         {\r             AsyncMethod();\r             Console.WriteLine(\"success!\");\r             Console.ReadKey(true);\r         }\r \r         static async void AsyncMethod()\r         {\r             kv = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback((authority, resource, scope) => GetToken(authority, resource, scope)), new InjectHostHeaderHttpMessageHandler());\r \r             var secret1 = await kv.GetSecretAsync(\"https://newtest.vault.azure.cn/secrets/newtest-blobsas111\");\r             var accountSasCredential = new StorageCredentials(secret1.Value);\r \r             // Use credentials and the Blob storage endpoint to create a new Blob service client.\r             var accountWithSas = new CloudStorageAccount(accountSasCredential, new Uri(\"https://yutest.blob.core.chinacloudapi.cn/\"), null, null, null);\r             var blobClientWithSas = accountWithSas.CreateCloudBlobClient();\r \r             // Retrieve a reference to a container.\r             CloudBlobContainer container1 = blobClientWithSas.GetContainerReference(\"aaa111\");\r \r             // Create the container if it doesn't already exist.\r             container1.CreateIfNotExists();\r             Console.WriteLine(container1.Properties);\r             Console.WriteLine(\"----------------------------------------------------------------\");\r             Console.ReadKey(true);\r         }\r \r         /// <summary>\r         /// 获取认证 token\r         /// </summary>\r         /// <param name=\"authority\"></param>\r         /// <param name=\"resource\"></param>\r         /// <param name=\"scope\"></param>\r         /// <returns></returns>\r         private static async Task<string> GetToken(string authority, string resource, string scope)\r         {\r             var authContext = new AuthenticationContext(authority);\r             //对应 AD Application 的信息\r             ClientCredential clientCred = new ClientCredential(\"16a94c84-c6ba-4f19-aa48-3353f8ffe18e\", \"123456\");\r             var result = await authContext.AcquireTokenAsync(resource, clientCred);\r \r             if (result == null)\r                 throw new InvalidOperationException(\"Failed to obtain the JWT token\");\r \r             return result.AccessToken;\r         }\r     }\r     public class InjectHostHeaderHttpMessageHandler : DelegatingHandler\r     {\r         protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request,\r             CancellationToken cancellationToken)\r         {\r             var requestUri = request.RequestUri;\r             var authority = string.Empty;\r             var targetUri = requestUri;\r             string networkUrl = \"\";\r \r             if (!string.IsNullOrEmpty(networkUrl))\r             {\r                 authority = targetUri.Authority;\r                 targetUri = new Uri(new Uri(networkUrl), targetUri.PathAndQuery);\r \r                 request.Headers.Add(\"Host\", authority);\r                 request.RequestUri = targetUri;\r             }\r \r             return base.SendAsync(request, cancellationToken).ContinueWith<HttpResponseMessage>(response =>\r             {\r                 return response.Result;\r             });\r         }\r     }\r }\r ```\r \r ## 参考链接\r \r - [Azure Key Vault 存储帐户密钥](https://docs.azure.cn/zh-cn/key-vault/key-vault-ovw-storage-keys)\r \r - [Azure 密钥保管库入门](https://docs.azure.cn/zh-cn/key-vault/key-vault-get-started#authorize)\r \r - [AzureRM.KeyVault](https://docs.microsoft.com/zh-cn/powershell/module/azurerm.keyvault/?view=azurermps-4.3.1)\r "}