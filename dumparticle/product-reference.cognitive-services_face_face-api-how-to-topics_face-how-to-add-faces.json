{"Title":"使用人脸 API 添加人脸","Description":"使用认知服务中的人脸 API 在图像中添加人脸。","Content":"# <a name=\"how-to-add-faces\"></a>如何添加人脸\r \r 本指南演示有关在人员组（也适用于人脸列表）中添加大量人员和人脸的最佳做法。 这些示例是使用人脸 API 客户端库以 C# 语言编写的。\r \r ## <a name=\"step1\"></a>步骤 1：初始化\r \r 声明多个变量并实现帮助器函数来计划请求。\r \r - `PersonCount` 是人员总数。\r - `CallLimitPerSecond` 是与订阅层相关的每秒最大调用次数。\r - `_timeStampQueue` 是一个队列，用于记录请求时间戳。\r - `await WaitCallLimitPerSecondAsync()` 将会等到能够有效地将发送下一个请求。\r \r ```CSharp\r const int PersonCount = 10000;\r const int CallLimitPerSecond = 10;\r static Queue<DateTime> _timeStampQueue = new Queue<DateTime>(CallLimitPerSecond);\r \r static async Task WaitCallLimitPerSecondAsync()\r {\r     Monitor.Enter(_timeStampQueue);\r     try\r     {\r         if (_timeStampQueue.Count >= CallLimitPerSecond)\r         {\r             TimeSpan timeInterval = DateTime.UtcNow - _timeStampQueue.Peek();\r             if (timeInterval < TimeSpan.FromSeconds(1))\r             {\r                 await Task.Delay(TimeSpan.FromSeconds(1) - timeInterval);\r             }\r             _timeStampQueue.Dequeue();\r         }\r         _timeStampQueue.Enqueue(DateTime.UtcNow);\r     }\r     finally\r     {\r         Monitor.Exit(_timeStampQueue);\r     }\r }\r ```\r \r ## <a name=\"step2\"></a>步骤 2：授权 API 调用\r \r 使用客户端库时，订阅密钥通过 FaceServiceClient 类的构造函数传入。 例如：\r \r ```CSharp\r FaceServiceClient faceServiceClient = new FaceServiceClient(\"Your subscription key\");\r ```\r \r 可以从 Azure 门户的“Marketplace”页获取订阅密钥。 请参阅[订阅](https://www.microsoft.com/cognitive-services/en-us/sign-up)。\r \r ## <a name=\"step3\"></a>步骤 3：创建人员组\r \r 创建名为“MyPersonGroup”的人员组用于保存人员。\r 还要将请求时间排队到 `_timeStampQueue`，确保执行整体验证。\r \r ```CSharp\r const string personGroupId = \"mypersongroupid\";\r const string personGroupName = \"MyPersonGroup\";\r _timeStampQueue.Enqueue(DateTime.UtcNow);\r await faceServiceClient.CreatePersonGroupAsync(personGroupId, personGroupName);\r ```\r \r ## <a name=\"step4\"></a>步骤 4：在人员组中创建人员\r \r 以并发方式创建人员，另外还要应用 `await WaitCallLimitPerSecondAsync()` 以避免超出调用限制。\r \r ```CSharp\r CreatePersonResult[] persons = new CreatePersonResult[PersonCount];\r Parallel.For(0, PersonCount, async i =>\r {\r     await WaitCallLimitPerSecondAsync();\r \r     string personName = $\"PersonName#{i}\";\r     persons[i] = await faceServiceClient.CreatePersonAsync(personGroupId, personName);\r });\r ```\r \r ## <a name=\"step5\"></a>步骤 5：将人脸添加到人员\r \r 将人脸添加到不同人员的操作将以并发方式进行处理，不过，我们建议按顺序将人脸添加到一个特定的人员。\r 同样，应调用 `await WaitCallLimitPerSecondAsync()` 来确保请求频率始终在限制范围内。\r \r ```CSharp\r Parallel.For(0, PersonCount, async i =>\r {\r     Guid personId = persons[i].PersonId;\r     string personImageDir = @\"/path/to/person/i/images\";\r \r     foreach (string imagePath in Directory.GetFiles(personImageDir, \"*.jpg\"))\r     {\r         await WaitCallLimitPerSecondAsync();\r \r         using (Stream stream = File.OpenRead(imagePath))\r         {\r             await faceServiceClient.AddPersonFaceAsync(personGroupId, personId, stream);\r         }\r     }\r });\r ```\r \r ## <a name=\"summary\"></a>摘要\r \r 本指南介绍了创建一个包含大量人员和人脸的人员组的过程。 几条提醒事项：\r \r - 此策略也适用于将人脸添加到人脸列表。 可以并发方式处理在不同人脸列表中添加/删除人脸的操作，对一个特定的人脸列表执行相同的操作应按顺序进行。\r - 为了保持简洁，本指南省略了潜在异常的处理方法。 如果想要增强可靠性，应该应用适当的重试策略。\r \r 下面是前面解释和演示的功能的简要提醒：\r \r - 使用[人员组 - 创建人员组](https://dev.cognitive.azure.cn/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) API 创建人员组\r - 使用[人员 - 创建人员](https://dev.cognitive.azure.cn/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c) API 创建人员\r - 使用[人员 - 添加人员人脸](https://dev.cognitive.azure.cn/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523b) API 将人脸添加到人员\r \r ## <a name=\"related\"></a> 后续步骤\r - [如何识别图像中的人脸](HowtoIdentifyFacesinImage.md)\r - [如何检测图像中的人脸](HowtoDetectFacesinImage.md)\r \r "}