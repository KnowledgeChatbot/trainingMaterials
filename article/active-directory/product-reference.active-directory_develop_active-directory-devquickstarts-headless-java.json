{"Title":"Azure AD Java 命令行入门","Description":"如何生成使用户登录以访问 API 的 Java 命令行应用。","Content":"\r\n# 通过 Azure AD 使用 Java 命令行应用访问 API\r\n\r\n[!INCLUDE [active-directory-devguide](../../../includes/active-directory-devguide.md)]\r\n\r\n使用 Azure AD，只需编写几行代码，就能简单直接地外包 Web 应用的标识管理，提供单一登录和注销。在 Java Web 应用中，你可以使用社区驱动 ADAL4J 的 Microsoft 实现来达到此目的。\r\n\r\n  现在，我们将使用 ADAL4J 来执行以下操作：\r\n- 使用 Azure AD 作为标识提供者程序将用户登录到应用。\r\n- 显示有关用户的一些信息。\r\n- 从应用中注销用户。\r\n\r\n为此，你需要：\r\n\r\n1. 将一个应用程序注册到 Azure AD\r\n2. 将应用设置为使用 ADAL4J 库。\r\n3. 使用 ADAL4J 库向 Azure AD 发出登录和注销请求。\r\n4. 列显有关用户的数据。\r\n\r\n若要开始，请[下载应用程序框架](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/skeleton.zip)或[下载已完成的示例](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect\\\\/archive/complete.zip)。你还需要一个用于注册应用程序的 Azure AD 租户。如果你没有此租户，请[了解如何获取租户](./active-directory-howto-tenant.md)。\r\n\r\n## 1\\.将一个应用程序注册到 Azure AD\r\n若要使应用程序对用户进行身份验证，你首先需要在租户中注册新的应用程序。\r\n\r\n- 登录到 Azure 管理门户。\r\n- 在左侧的导航栏中单击“Active Directory”。\r\n- 选择你要在其中注册应用程序的租户。\r\n- 单击“应用程序”选项卡，然后在底部抽屉中单击“添加”。\r\n- 根据提示创建一个新的 **Web 应用程序和/或 WebAPI**。\r\n    - 应用程序的**名称**向最终用户描述你的应用程序\r\n    - “登录 URL”是应用的基本 URL。框架的默认值为 `http://localhost:8080/adal4jsample/`。\r\n    - “应用 ID URI”是应用程序的唯一标识符。约定是使用 `https://<tenant-domain>/<app-name>`，例如 `http://localhost:8080/adal4jsample/`\r\n- 完成注册后，AAD 将为应用分配唯一的客户端标识符。在后面的部分中将会用到此值，因此，请从“配置”选项卡复制此值。\r\n\r\n进入门户后，为你的应用创建一个**应用程序机密**并复制该机密。稍后将需要它。\r\n\r\n## 2\\.使用 Maven 将应用设置为使用 ADAL4J 库和必备组件\r\n在这里，我们要将 ADAL4J 配置为使用 OpenID Connect 身份验证协议。ADAL4J 将用于发出登录和注销请求、管理用户的会话、获取有关用户的信息，等等。\r\n\r\n- 在项目的根目录中，打开/创建 `pom.xml`，找到 `// TODO: provide dependencies for Maven` 并替换为以下代码：\r\n\r\n    ```Java\r\n        <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n            <modelVersion>4.0.0</modelVersion>\r\n            <groupId>com.microsoft.azure</groupId>\r\n            <artifactId>public-client-adal4j-sample</artifactId>\r\n            <packaging>jar</packaging>\r\n            <version>0.0.1-SNAPSHOT</version>\r\n            <name>public-client-adal4j-sample</name>\r\n            <url>http://maven.apache.org</url>\r\n            <properties>\r\n                <spring.version>3.0.5.RELEASE</spring.version>\r\n            </properties>\r\n\r\n            <dependencies>\r\n                <dependency>\r\n                    <groupId>com.microsoft.azure</groupId>\r\n                    <artifactId>adal4j</artifactId>\r\n                    <version>1.1.2</version>\r\n                </dependency>\r\n                <dependency>\r\n                    <groupId>com.nimbusds</groupId>\r\n                    <artifactId>oauth2-oidc-sdk</artifactId>\r\n                    <version>4.5</version>\r\n                </dependency>\r\n                <dependency>\r\n                    <groupId>org.json</groupId>\r\n                    <artifactId>json</artifactId>\r\n                    <version>20090211</version>\r\n                </dependency>\r\n                <dependency>\r\n                    <groupId>javax.servlet</groupId>\r\n                    <artifactId>javax.servlet-api</artifactId>\r\n                    <version>3.0.1</version>\r\n                    <scope>provided</scope>\r\n                </dependency>\r\n                <dependency>\r\n                    <groupId>org.slf4j</groupId>\r\n                    <artifactId>slf4j-log4j12</artifactId>\r\n                    <version>1.7.5</version>\r\n                </dependency>\r\n        </dependencies>\r\n            <build>\r\n                <finalName>public-client-adal4j-sample</finalName>\r\n                <plugins>\r\n                        <plugin>\r\n                    <groupId>org.codehaus.mojo</groupId>\r\n                    <artifactId>exec-maven-plugin</artifactId>\r\n                    <version>1.2.1</version>\r\n                    <configuration>\r\n                        <mainClass>PublicClient</mainClass>\r\n                    </configuration>\r\n                </plugin>\r\n                    <plugin>\r\n                        <groupId>org.apache.maven.plugins</groupId>\r\n                        <artifactId>maven-compiler-plugin</artifactId>\r\n                        <configuration>\r\n                            <source>1.7</source>\r\n                            <target>1.7</target>\r\n                            <encoding>UTF-8</encoding>\r\n                        </configuration>\r\n                    </plugin>\r\n                    <plugin>\r\n                        <groupId>org.apache.maven.plugins</groupId>\r\n                        <artifactId>maven-dependency-plugin</artifactId>\r\n                        <executions>\r\n                            <execution>\r\n                                <id>install</id>\r\n                                <phase>install</phase>\r\n                                <goals>\r\n                                    <goal>sources</goal>\r\n                                </goals>\r\n                            </execution>\r\n                        </executions>\r\n                    </plugin>\r\n                    <plugin>\r\n                        <groupId>org.apache.maven.plugins</groupId>\r\n                        <artifactId>maven-resources-plugin</artifactId>\r\n                        <version>2.5</version>\r\n                        <configuration>\r\n                            <encoding>UTF-8</encoding>\r\n                        </configuration>\r\n                    </plugin>\r\n                    <plugin>\r\n                <artifactId>maven-assembly-plugin</artifactId>\r\n                <executions>\r\n                  <execution>\r\n                    <phase>package</phase>\r\n                    <goals>\r\n                      <goal>single</goal>\r\n                    </goals>\r\n                  </execution>\r\n                </executions>\r\n                <configuration>\r\n                  <descriptorRefs>\r\n                    <descriptorRef>jar-with-dependencies</descriptorRef>\r\n                  </descriptorRefs>\r\n                </configuration>\r\n              </plugin>\r\n              <plugin>\r\n          <groupId>org.apache.maven.plugins</groupId>\r\n          <artifactId>maven-assembly-plugin</artifactId>\r\n          <configuration>\r\n            <archive>\r\n              <manifest>\r\n                <mainClass>PublicClient</mainClass>\r\n              </manifest>\r\n            </archive>\r\n          </configuration>\r\n        </plugin>\r\n                </plugins>\r\n            </build>\r\n\r\n        </project>\r\n    ```\r\n\r\n## 3\\.创建 Java PublicClient 文件\r\n如上所述，我们将使用图形 API 来获取有关已登录的用户的数据。为了顺利进行，我们应该创建一个表示**目录对象**的文件以及一个表示**用户**的单独文件，如此便可以使用 Java 的 OO 模式。\r\n\r\n- 创建一个名为 `DirectoryObject.java` 的文件，我们将用它来存储有关任何 DirectoryObject 的基本数据（你稍后可以随意使用它来执行任何其他图形查询）。可以从以下内容中剪切/粘贴此信息：\r\n\r\n    ```Java\r\n        import java.io.BufferedReader;\r\n        import java.io.InputStreamReader;\r\n        import java.util.concurrent.ExecutorService;\r\n        import java.util.concurrent.Executors;\r\n        import java.util.concurrent.Future;\r\n\r\n        import javax.naming.ServiceUnavailableException;\r\n\r\n        import com.microsoft.aad.adal4j.AuthenticationContext;\r\n        import com.microsoft.aad.adal4j.AuthenticationResult;\r\n\r\n        public class PublicClient {\r\n\r\n            private final static String AUTHORITY = \"https://login.microsoftonline.com/common/\";\r\n            private final static String CLIENT_ID = \"2a4da06c-ff07-410d-af8a-542a512f5092\";\r\n\r\n            public static void main(String args[]) throws Exception {\r\n\r\n                try (BufferedReader br = new BufferedReader(new InputStreamReader(\r\n                        System.in))) {\r\n                    System.out.print(\"Enter username: \");\r\n                    String username = br.readLine();\r\n                    System.out.print(\"Enter password: \");\r\n                    String password = br.readLine();\r\n\r\n                    AuthenticationResult result = getAccessTokenFromUserCredentials(\r\n                            username, password);\r\n                    System.out.println(\"Access Token - \" + result.getAccessToken());\r\n                    System.out.println(\"Refresh Token - \" + result.getRefreshToken());\r\n                    System.out.println(\"ID Token - \" + result.getIdToken());\r\n                }\r\n            }\r\n\r\n            private static AuthenticationResult getAccessTokenFromUserCredentials(\r\n                    String username, String password) throws Exception {\r\n                AuthenticationContext context = null;\r\n                AuthenticationResult result = null;\r\n                ExecutorService service = null;\r\n                try {\r\n                    service = Executors.newFixedThreadPool(1);\r\n                    context = new AuthenticationContext(AUTHORITY, false, service);\r\n                    Future<AuthenticationResult> future = context.acquireToken(\r\n                            \"https://graph.chinacloudapi.cn\", CLIENT_ID, username, password,\r\n                            null);\r\n                    result = future.get();\r\n                } finally {\r\n                    service.shutdown();\r\n                }\r\n\r\n                if (result == null) {\r\n                    throw new ServiceUnavailableException(\r\n                            \"authentication result was null\");\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n    ```\r\n\r\n## 编译并运行示例\r\n更改回根目录，并运行下列命令来生成你刚刚使用 `maven` 组成的示例。这会使用你针对依赖项编写的 `pom.xml` 文件。\r\n\r\n`$ mvn package`\r\n\r\n你的 `/targets` 目录中现在应包含 `adal4jsample.war` 文件。你可以在 Tomcat 容器中部署该文件并访问 URL\r\n\r\n`http://localhost:8080/adal4jsample/`\r\n\r\n> [!NOTE]\r\n使用最新的 Tomcat 服务器部署 WAR 非常容易。只要导航到 `http://localhost:8080/manager/` 并遵循有关上载 ``adal4jsample.war` 文件的说明即可。它会为你自动部署正确的终结点。\r\n> \r\n> \r\n\r\n## 后续步骤\r\n祝贺你！ 现在，你已创建一个有效的 Java 应用程序，它可以对用户进行身份验证，使用 OAuth 2.0 安全调用 Web API，并获取有关用户的基本信息。如果你尚未这样做，可以在租户中填充一些用户。\r\n\r\n[此处以 .zip 格式提供了](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/complete.zip)完整示例（不包括配置值），你也可以从 GitHub 克隆该示例：\r\n\r\n```\r\ngit clone --branch complete https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect.git\r\n```\r\n\r\n<!---HONumber=Mooncake_0306_2017-->\r\n<!---Update_Description: wording update -->"}