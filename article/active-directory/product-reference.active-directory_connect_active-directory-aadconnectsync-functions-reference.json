{"Title":"Azure AD Connect 同步：函数引用","Description":"在 Azure AD Connect 同步中引用声明性设置表达式。","Content":"\r\n# Azure AD Connect 同步：函数引用\r\n在 Azure AD Connect 中，函数用于在同步期间操作属性值。函数的语法使用以下格式表示：`<output type> FunctionName(<input type> <position name>, ..)`\r\n\r\n如果函数被重载并接受多个语法，则会列出所有的有效语法。该函数为强类型函数，并会验证传递的类型是否匹配记录的类型。如果类型不匹配，将引发错误。\r\n\r\n类型使用以下语法表示：\r\n\r\n- **bin** — 二进制\r\n- **bool** — 布尔值\r\n- **dt** — UTC 日期/时间\r\n- **enum** — 已知常量的枚举\r\n- **exp** — 表达式，计算结果预计为布尔值\r\n- **mvbin** — 多值二进制\r\n- **mvstr** — 多值字符串\r\n- **mvref** — 多值引用\r\n- **num** — 数值\r\n- **ref** — 引用\r\n- **str** — 字符串\r\n- **var** —（几乎）任何其他类型的变体\r\n- **void** — 不返回值\r\n\r\n**mvbin**、**mvstr** 和 **mvref** 类型的函数只适用于多值属性。**bin**、**str** 和 **ref** 类型的函数只适用于单值和多值属性。\r\n\r\n## 函数引用\r\n| 函数列表 | | | | |\r\n| --- | --- | --- | --- | --- | --- |\r\n| **转换** | | | | |\r\n| [CBool](#cbool) |[CDate](#cdate) |[CGuid](#cguid) |[ConvertFromBase64](#convertfrombase64) | |\r\n| [ConvertToBase64](#converttobase64) |[ConvertFromUTF8Hex](#convertfromutf8hex) |[ConvertToUTF8Hex](#converttoutf8hex) |[CNum](#cnum) | |\r\n| [CRef](#cref) |[CStr](#cstr) |[StringFromGuid](#StringFromGuid) |[StringFromSid](#stringfromsid) | |\r\n| **日期/时间** | | | | |\r\n| [DateAdd](#dateadd) |[DateFromNum](#datefromnum) |[FormatDateTime](#formatdatetime) |[Now](#now) | |\r\n| [NumFromDate](#numfromdate) | | | | |\r\n| **Directory** | | | | |\r\n| [DNComponent](#dncomponent) |[DNComponentRev](#dncomponentrev) |[EscapeDNComponent](#escapedncomponent) | | |\r\n| **计算** | | | | |\r\n| [IsBitSet](#isbitset) |[IsDate](#isdate) |[IsEmpty](#isempty) |[IsGuid](#isguid) | |\r\n| [IsNull](#isnull) |[IsNullOrEmpty](#isnullorempty) |[IsNumeric](#isnumeric) |[IsPresent](#ispresent) | |\r\n| [IsString](#isstring) | | | | |\r\n| **数学** | | | | |\r\n| [BitAnd](#bitand) |[BitOr](#bitor) |[RandomNum](#randomnum) | | |\r\n| **多值** | | | | |\r\n| [Contains](#contains) |[Count](#count) |[Item](#item) |[ItemOrNull](#itemornull) | |\r\n| [Join](#join) |[RemoveDuplicates](#removeduplicates) |[Split](#split) | | |\r\n| **程序流** | | | | |\r\n| [错误](#error) |[IIF](#iif) |[Switch](#switch) | | |\r\n| **文本** | | | | |\r\n| [GUID](#guid) |[InStr](#instr) |[InStrRev](#instrrev) |[LCase](#lcase) | |\r\n| [Left](#left) |[Len](#len) |[LTrim](#ltrim) |[Mid](#mid) | |\r\n| [PadLeft](#padleft) |[PadRight](#padright) |[PCase](#pcase) |[Replace](#replace) | |\r\n| [ReplaceChars](#replacechars) |[Right](#right) |[RTrim](#rtrim) |[Trim](#trim) | |\r\n| [UCase](#ucase) |[Word](#word) | | | |\r\n\r\n- - -\r\n### BitAnd <a name=\"bitand\"></a>\r\n**说明：**\r\nBitAnd 函数设置值的指定位。\r\n\r\n**语法：** \r\n`num BitAnd(num value1, num value2)`\r\n\r\n- value1、value2：应该使用 AND 联接在一起的数字值\r\n\r\n**备注：**\r\n此函数将两个参数转换为二进制表示形式，并将位设置为：\r\n\r\n- 0 - 如果*掩码*和*标志*中相应位的其中一个或两个均为 0\r\n- 1 - 如果两个相应位均为 1。\r\n\r\n换而言之，除了当两个参数的相应位均为 1 时之外，所有情况下均返回 0。\r\n\r\n**示例：**\r\n`BitAnd(&HF, &HF7)`返回 7，因为十六进制 \"F\" AND \"F7\" 的计算结果为此值。\r\n\r\n- - -\r\n### BitOr <a name=\"bitor\"></a>\r\n**说明：**BitOr 函数设置值的指定位。\r\n\r\n**语法：** \r\n`num BitOr(num value1, num value2)`\r\n\r\n- value1、value2：应该使用 OR 联接在一起的数字值\r\n\r\n**备注：**\r\n此函数将两个参数转换为二进制表示形式，当掩码和标志中相应位的其中一个或两个均为 1 时，将位设置为 1，当两个相应位均为 0 时，设置为 0。换而言之，除了当两个参数的相应位均为 0 时之外，所有情况下均返回 1。\r\n\r\n- - -\r\n### CBool <a name=\"cbool\"></a>\r\n**说明：**\r\nCBool 函数基于计算的表达式返回布尔值\r\n\r\n**语法：** \r\n`bool CBool(exp Expression)`\r\n\r\n**备注：**\r\n如果表达式的计算结果为非零值，则 CBool 返回 True，否则返回 False。\r\n\r\n**示例：** \r\n`CBool([attrib1] = [attrib2])`\r\n\r\n如果两个属性具有相同的值，则返回 True。\r\n\r\n- - -\r\n### CDate <a name=\"cdate\"></a>\r\n**说明：**\r\nCDate 函数通过字符串返回 UTC DateTime。DateTime 不是 Sync 中的原生属性类型，但被某些函数使用。\r\n\r\n**语法：** \r\n`dt CDate(str value)`\r\n\r\n- Value：具有日期、时间和可选时区的字符串\r\n\r\n**备注：**\r\n返回的字符串始终采用 UTC 格式。\r\n\r\n**示例：**\r\n`CDate([employeeStartTime])`基于员工的开始时间返回 DateTime\r\n\r\n`CDate(\"2013-01-10 4:00 PM -8\")` \r\n返回表示 \"2013-01-11 12:00 AM\" 的 DateTime\r\n\r\n- - -\r\n### CGuid <a name=\"cguid\"></a>\r\n**说明：**\r\nCGuid 函数将 GUID 的字符串表示转换为其二进制表示形式。\r\n\r\n**语法：** \r\n`bin CGuid(str GUID)`\r\n\r\n- 采用如下模式设置格式的字符串：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 或 {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\r\n\r\n- - -\r\n### Contains <a name=\"contains\"></a>\r\n**说明：**\r\nContains 函数查找多值属性内的字符串\r\n\r\n**语法：**\r\n`num Contains (mvstring attribute, str search)` - 区分大小写 \r\n`num Contains (mvstring attribute, str search, enum Casetype)` \r\n`num Contains (mvref attribute, str search)` - 区分大小写\r\n\r\n- attribute：要搜索的多值属性。\r\n- search：在属性中查找的字符串。\r\n- Casetype：CaseInsensitive 或 CaseSensitive。\r\n\r\n返回找到字符串的多值属性中的索引。如果未找到字符串，则返回 0。\r\n\r\n**备注：**\r\n对于多值字符串属性，搜索将在值中查找子字符串。对于引用属性，搜索的字符串必须与视为匹配的值完全匹配。\r\n\r\n**示例：**\r\n`IIF(Contains([proxyAddresses],\"SMTP:\")>0,[proxyAddresses],Error(\"No primary SMTP address found.\"))` 如果 proxyAddresses 属性具有主电子邮件地址（由大写 \"SMTP:\" 表示），则返回 proxyAddress 属性，否则返回错误。\r\n\r\n- - -\r\n### ConvertFromBase64 <a name=\"convertfrombase64\"></a>\r\n**说明：**\r\nConvertFromBase64 函数将指定的 base64 编码值转换为规则的字符串。\r\n\r\n**语法：**\r\n`str ConvertFromBase64(str source)` - 假设采用 Unicode 编码 `str ConvertFromBase64(str source, enum Encoding)`\r\n\r\n- source：Base64 编码的字符串\r\n- Encoding：Unicode、ASCII、UTF8\r\n\r\n**示例** \r\n`ConvertFromBase64(\"SABlAGwAbABvACAAdwBvAHIAbABkACEA\")` `ConvertFromBase64(\"SGVsbG8gd29ybGQh\", UTF8)`\r\n\r\n这两个示例均返回 \"*Hello world!*\"\r\n\r\n- - -\r\n### ConvertFromUTF8Hex <a name=\"convertfromutf8hex\"></a>\r\n**说明：**\r\nConvertFromUTF8Hex 函数将指定的 UTF8 Hex 编码值转换为字符串。\r\n\r\n**语法：** \r\n`str ConvertFromUTF8Hex(str source)`\r\n\r\n- source：UTF8 2 字节编码的字符串\r\n\r\n**备注：**\r\n该结果中此函数和 ConvertFromBase64 (,UTF8) 之间的差异对 DN 属性是友好的。此格式被 Azure Active Directory 用作 DN。\r\n\r\n**示例：**\r\n`ConvertFromUTF8Hex(\"48656C6C6F20776F726C6421\")` 返回 \"*Hello world!*\"\r\n\r\n- - -\r\n### ConvertToBase64 <a name=\"converttobase64\"></a>\r\n**说明：**\r\nConvertToBase64 函数将字符串转换为 Unicode base64 字符串。将整数数组的值转换为其等效字符串表示形式，该表示形式使用 base 64 数字编码。\r\n\r\n**语法：** \r\n`str ConvertToBase64(str source)`\r\n\r\n**示例：** \r\n`ConvertToBase64(\"Hello world!\")` 返回 \"SABlAGwAbABvACAAdwBvAHIAbABkACEA\"\r\n\r\n- - -\r\n### ConvertToUTF8Hex <a name=\"converttoutf8hex\"></a>\r\n**说明：**\r\nConvertToUTF8Hex 函数将字符串转换为 UTF8 Hex 编码的值。\r\n\r\n**语法：** \r\n`str ConvertToUTF8Hex(str source)`\r\n\r\n**备注：**\r\n此函数的输出格式被 Azure Active Directory 用作 DN 属性。\r\n\r\n**示例：** \r\n`ConvertToUTF8Hex(\"Hello world!\")` 返回 48656C6C6F20776F726C6421\r\n\r\n- - -\r\n### Count <a name=\"count\"></a>\r\n**说明：**\r\nCount 函数返回多值属性中的元素数量\r\n\r\n**语法：** \r\n`num Count(mvstr attribute)`\r\n\r\n- - -\r\n### CNum <a name=\"cnum\"></a>\r\n**说明：**\r\nCNum 函数使用字符串并返回数值数据类型。\r\n\r\n**语法：** \r\n`num CNum(str value)`\r\n\r\n- - -\r\n### CRef <a name=\"cref\"></a>\r\n**说明：**\r\n将字符串转换为引用属性\r\n\r\n**语法：** \r\n`ref CRef(str value)`\r\n\r\n**示例：** \r\n`CRef(\"CN=LC Services,CN=Microsoft,CN=lcspool01,CN=Pools,CN=RTC Service,\" & %Forest.LDAP%)`\r\n\r\n- - -\r\n### CStr <a name=\"cstr\"></a>\r\n**说明：**\r\nCStr 函数转换为字符串数据类型。\r\n\r\n**语法：** \r\n`str CStr(num value)` \r\n`str CStr(ref value)` \r\n`str CStr(bool value)`\r\n\r\n- value：可以是数字值、引用属性或布尔值。\r\n\r\n**示例：** \r\n`CStr([dn])` \r\n可能返回 \"cn=Joe,dc=contoso,dc=com\"\r\n\r\n- - -\r\n### DateAdd <a name=\"dateadd\"></a>\r\n**说明：**\r\n返回日期，其中包含已添加制定时间间隔的日期。\r\n\r\n**语法：** \r\n`dt DateAdd(str interval, num value, dt date)`\r\n\r\n- interval：字符串表达式，即你想要添加的时间间隔。字符串必须具有下列值之一：\r\n  - yyyy Year\r\n  - q Quarter\r\n  - m Month\r\n  - y Day of year\r\n  - d Day\r\n  - w Weekday\r\n  - ww Week\r\n  - h Hour\r\n  - n Minute\r\n  - s Second\r\n- value：你想要添加的单元数。它可以是正值（以获取将来的日期）或负值（以获取过去的日期）。\r\n- date：表示间隔添加到其中的日期的 DateTime。\r\n\r\n**示例：**\r\n`DateAdd(\"m\", 3, CDate(\"2001-01-01\"))` \r\n添加 3 个月，并返回表示 \"2001-04-01\" 的 DateTime\r\n\r\n- - -\r\n### DateFromNum <a name=\"datefromnum\"></a>\r\n**说明：**\r\nDateFromNum 函数将 AD 的日期格式的值转换为 DateTime 类型。\r\n\r\n**语法：** \r\n`dt DateFromNum(num value)`\r\n\r\n**示例：** \r\n`DateFromNum([lastLogonTimestamp])` \r\n`DateFromNum(129699324000000000)` \r\n返回表示 2012-01-01 23:00:00 的 DateTime\r\n\r\n- - -\r\n### DNComponent <a name=\"dncomponent\"></a>\r\n**说明：**\r\nDNComponent 函数返回从左边起的指定 DN 组件的值。\r\n\r\n**语法：** \r\n`str DNComponent(ref dn, num ComponentNumber)`\r\n\r\n- dn：要解释的引用属性\r\n- ComponentNumber：要返回的 DN 中的组件\r\n\r\n**示例：** \r\n`DNComponent([dn],1)` 如果 dn 为 \"cn=Joe,ou=…,\"，则返回 Joe\r\n\r\n- - -\r\n### DNComponentRev <a name=\"dncomponentrev\"></a>\r\n**说明：**\r\nDNComponentRev 函数返回从右边起（末尾）的指定 DN 组件的值。\r\n\r\n**语法：** \r\n`str DNComponentRev(ref dn, num ComponentNumber)` `str DNComponentRev(ref dn, num ComponentNumber, enum Options)`\r\n\r\n- dn：要解释的引用属性\r\n- ComponentNumber - 要返回的 DN 中的组件\r\n- Options：DC — 忽略具有“dc=”的所有组件\r\n\r\n**示例：**\r\n如果 dn 为 \"cn=Joe,ou=Atlanta,ou=GA,ou=US, dc=contoso,dc=com\"，则 `DNComponentRev([dn],3)` `DNComponentRev([dn],1,\"DC\")` 两者都返回 US。\r\n\r\n- - -\r\n### Error <a name=\"error\"></a>\r\n**说明：**\r\nError 函数用于返回自定义错误。\r\n\r\n**语法：** \r\n`void Error(str ErrorMessage)`\r\n\r\n**示例：** \r\n`IIF(IsPresent([accountName]),[accountName],Error(\"AccountName is required\"))`如果属性 accountName 不存在，则对象上引发错误。\r\n\r\n- - -\r\n### EscapeDNComponent <a name=\"escapedncomponent\"></a>\r\n**说明：**\r\nEscapeDNComponent 函数使用 DN 的一个组件，并对其进行转义，以便它可以在 LDAP 中表示。\r\n\r\n**语法：** \r\n`str EscapeDNComponent(str value)`\r\n\r\n**示例：**\r\n`EscapeDNComponent(\"cn=\" & [displayName]) & \",\" & %ForestLDAP%)` 即使 displayName 属性具有必须在 LDAP 中转义的字符，请确保可以在 LDAP 目录中创建对象。\r\n\r\n- - -\r\n### FormatDateTime <a name=\"formatdatetime\"></a>\r\n**说明：**\r\nFormatDateTime 函数用于为具有指定格式的字符串设置 DateTime 格式\r\n\r\n**语法：** \r\n`str FormatDateTime(dt value, str format)`\r\n\r\n- value：DateTime 格式的值\r\n- format：表示要转换为的格式的字符串。\r\n\r\n**备注：**\r\n格式的可能值可以在此处找到：[用户定义的日期/时间格式（Format 函数）](http://msdn2.microsoft.com/library/73ctwf33(VS.90).aspx)\r\n\r\n**示例：**\r\n\r\n`FormatDateTime(CDate(\"12/25/2007\"),\"yyyy-mm-dd\")` \r\n结果是 \"2007-12-25\"。\r\n\r\n`FormatDateTime(DateFromNum([pwdLastSet]),\"yyyyMMddHHmmss.0Z\")` \r\n结果可能是 \"20140905081453.0Z\"\r\n\r\n- - -\r\n### GUID <a name=\"guid\"></a>\r\n**说明：**\r\n函数 GUID 生成新的随机 GUID\r\n\r\n**语法：** \r\n`str GUID()`\r\n\r\n- - -\r\n### IIF <a name=\"iif\"></a>\r\n**说明：**\r\nIIF 函数基于指定的条件返回一组可能值中的其中一个值。\r\n\r\n**语法：** \r\n`var IIF(exp condition, var valueIfTrue, var valueIfFalse)`\r\n\r\n- condition：计算结果可能为 true 或 false 的任何值或表达式。\r\n- valueIfTrue：如果条件计算结果为 true，则为返回值。\r\n- valueIfFalse：如果条件计算结果为 false，则为返回值。\r\n\r\n**示例：** \r\n`IIF([employeeType]=\"Intern\",\"t-\" & [alias],[alias])` \r\n如果用户是实习生，则返回用户的别名，同时将 \"t-\" 添加到其开头，否则按原样返回用户的别名。\r\n\r\n- - -\r\n### InStr <a name=\"instr\"></a>\r\n**说明：**\r\nInStr 函数查找字符串中第一次出现的子字符串\r\n\r\n**语法：**\r\n\r\n`num InStr(str stringcheck, str stringmatch)` \r\n`num InStr(str stringcheck, str stringmatch, num start)` \r\n`num InStr(str stringcheck, str stringmatch, num start , enum compare)`\r\n\r\n- stringcheck：要搜索的字符串\r\n- stringmatch：要查找的字符串\r\n- start：查找子字符串的起始位置\r\n- compare：vbTextCompare 或 vbBinaryCompare\r\n\r\n**备注：**\r\n返回其中已找到子字符串的位置，如果未找到，则返回 0。\r\n\r\n**示例：** \r\n`InStr(\"The quick brown fox\",\"quick\")` 计算结果为 5\r\n\r\n`InStr(\"repEated\",\"e\",3,vbBinaryCompare)` \r\n计算结果为 7\r\n\r\n- - -\r\n### InStrRev <a name=\"instrrev\"></a>\r\n**说明：**\r\nInStrRev 函数查找字符串中最后一次出现的子字符串\r\n\r\n**语法：** \r\n`num InstrRev(str stringcheck, str stringmatch)` \r\n`num InstrRev(str stringcheck, str stringmatch, num start)` \r\n`num InstrRev(str stringcheck, str stringmatch, num start, enum compare)`\r\n\r\n- stringcheck：要搜索的字符串\r\n- stringmatch：要查找的字符串\r\n- start：查找子字符串的起始位置\r\n- compare：vbTextCompare 或 vbBinaryCompare\r\n\r\n**备注：**\r\n返回其中已找到子字符串的位置，如果未找到，则返回 0。\r\n\r\n**示例：** \r\n`InStrRev(\"abbcdbbbef\",\"bb\")` 返回 7\r\n\r\n- - -\r\n### IsBitSet <a name=\"isbitset\"></a>\r\n**说明：**\r\n函数 IsBitSet 测试是否设置了位\r\n\r\n**语法：** \r\n`bool IsBitSet(num value, num flag)`\r\n\r\n- value：计算的数字值。flag：表示具有要计算的位的数字值\r\n\r\n**示例：**\r\n`IsBitSet(&HF,4)` 返回 True，因为位 \"4\" 在十六进制值 \"F\" 中设置\r\n\r\n- - -\r\n### IsDate <a name=\"isdate\"></a>\r\n**说明：**\r\n如果表达式可以计算为 DateTime 类型，则 IsDate 函数计算结果为 True。\r\n\r\n**语法：** \r\n`bool IsDate(var Expression)`\r\n\r\n**备注：**\r\n用来确定 CDate() 是否成功。\r\n\r\n- - -\r\n### IsEmpty <a name=\"isempty\"></a>\r\n**说明：**\r\n如果属性出现在 CS 或 MV 中，但计算结果为空字符串，则 IsEmpty 函数计算结果为 True。\r\n\r\n**语法：** \r\n`bool IsEmpty(var Expression)`\r\n\r\n- - -\r\n### IsGuid <a name=\"isguid\"></a>\r\n**说明：**\r\n如果字符串可以转换为 GUID，则 IsGuid 函数计算结果为 true。\r\n\r\n**语法：** \r\n`bool IsGuid(str GUID)`\r\n\r\n**备注：**\r\nGUID 定义为遵循以下其中一种模式的字符串：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 或 {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\r\n\r\n用来确定 CGuid() 是否成功。\r\n\r\n**示例：** \r\n`IIF(IsGuid([strAttribute]),CGuid([strAttribute]),NULL)` 如果 StrAttribute 具有 GUID 格式，则返回二进制表示形式，否则返回 Null。\r\n\r\n- - -\r\n### IsNull <a name=\"isnull\"></a>\r\n**说明：**\r\n如果表达式的计算结果为 Null，则 IsNull 函数返回 true。\r\n\r\n**语法：** \r\n`bool IsNull(var Expression)`\r\n\r\n**备注：**\r\n对于属性，Null 表示缺少属性。\r\n\r\n**示例：** \r\n`IsNull([displayName])` 如果属性没有在 CS 或 MV 中出现，则返回 True。\r\n\r\n- - -\r\n### IsNullOrEmpty <a name=\"isnullorempty\"></a>\r\n**说明：**\r\n如果表达式为 null 或空字符串，则 IsNullOrEmpty 函数返回 true。\r\n\r\n**语法：** \r\n`bool IsNullOrEmpty(var Expression)`\r\n\r\n**备注：**\r\n对于属性，如果属性不存在，或存在但为空字符串，此语法计算结果则为 True。此函数的逆函数命名为 IsPresent。\r\n\r\n**示例：** \r\n`IsNullOrEmpty([displayName])` 如果属性在 CS 或 MV 中没有出现或为空字符串，则返回 True。\r\n\r\n- - -\r\n### IsNumeric <a name=\"isnumeric\"></a>\r\n**说明：**\r\nIsNumeric 函数返回布尔值，该值指示表达式是否可以计算为数字类型。\r\n\r\n**语法：** \r\n`bool IsNumeric(var Expression)`\r\n\r\n**备注：**\r\n用来确定 CNum() 是否能成功分析表达式。\r\n\r\n- - -\r\n### IsString <a name=\"isstring\"></a>\r\n**说明：**\r\n如果表达式可以计算为字符串类型，则 IsString 函数计算结果为 True。\r\n\r\n**语法：** \r\n`bool IsString(var expression)`\r\n\r\n**备注：**\r\n用来确定 CStr() 是否能成功分析表达式。\r\n\r\n- - -\r\n### IsPresent <a name=\"ispresent\"></a>\r\n**说明：**\r\n如果表达式的计算结果为字符串，该字符串不是 Null 且不为空，则 IsPresent 函数返回 true。\r\n\r\n**语法：** \r\n`bool IsPresent(var expression)`\r\n\r\n**备注：**\r\n此函数的逆函数被命名为 IsNullOrEmpty。\r\n\r\n**示例：** \r\n`Switch(IsPresent([directManager]),[directManager], IsPresent([skiplevelManager]),[skiplevelManager], IsPresent([director]),[director])`\r\n\r\n- - -\r\n### Item <a name=\"item\"></a>\r\n**说明：**\r\nItem 函数返回多值字符串/属性中的一个项。\r\n\r\n**语法：** \r\n`var Item(mvstr attribute, num index)`\r\n\r\n- attribute：多值属性\r\n- index：对多值字符串中某个项的索引。\r\n\r\n**备注：**\r\nItem 函数与 Contains 函数一起使用很有利，因为后一函数返回对多值属性中某个项的索引。\r\n\r\n如果索引超出界限，则引发错误。\r\n\r\n**示例：** \r\n`Mid(Item([proxyAddress],Contains([proxyAddress], \"SMTP:\")),6)` 返回主电子邮件地址。\r\n\r\n- - -\r\n### ItemOrNull <a name=\"itemornull\"></a>\r\n**说明：**\r\nItemOrNull 函数返回多值字符串/属性中的一个项。\r\n\r\n**语法：** \r\n`var ItemOrNull(mvstr attribute, num index)`\r\n\r\n- attribute：多值属性\r\n- index：对多值字符串中某个项的索引。\r\n\r\n**备注：**\r\nItemOrNull 函数与 Contains 函数一起使用很有利，因为后一函数返回对多值属性中某个项的索引。\r\n\r\n如果索引超出界限，则返回 Null 值。\r\n\r\n- - -\r\n### Join <a name=\"join\"></a>\r\n**说明：**\r\nJoin 函数使用多值字符串，并返回每个项之间插入指定分隔符的单值字符串。\r\n\r\n**语法：** \r\n`str Join(mvstr attribute)` `str Join(mvstr attribute, str Delimiter)`\r\n\r\n- attribute：包含要联接的字符串的多值属性。\r\n- delimiter：任意字符串，用于分隔返回的字符串中的子字符串。如果省略，则使用空格字符（“ ”）。如果分隔符为零长度字符串（“”）或零，则列表中的所有项都不使用分隔符连接。\r\n\r\n**备注：**\r\nJoin 和 Split 函数之间没有奇偶校验。Join 函数使用字符串数组，并使用分隔符字符串将它们联接起来，以返回单个字符串。Split 函数使用字符串并以分隔符分隔，以返回字符串数组。但是，主要区别是 Join 可以使用任何分隔符字符串将字符串连接起来，而 Split 仅可以使用单个字符分隔符分隔字符串。\r\n\r\n**示例：** \r\n`Join([proxyAddresses],\",\")` 可能返回：\"SMTP:john.doe@contoso.com,smtp:jd@contoso.com\"\r\n\r\n- - -\r\n### LCase <a name=\"lcase\"></a>\r\n**说明：**\r\nLCase 函数将字符串中的所有字符都转换为小写。\r\n\r\n**语法：** \r\n`str LCase(str value)`\r\n\r\n**示例：** \r\n`LCase(\"TeSt\")` 返回 \"test\"。\r\n\r\n- - -\r\n### Left <a name=\"left\"></a>\r\n**说明：**\r\nLeft 函数从字符串左侧起返回指定的字符数。\r\n\r\n**语法：** \r\n`str Left(str string, num NumChars)`\r\n\r\n- string：从中返回字符的字符串\r\n- NumChar：标识从字符串开头（左侧）起返回的字符数的数字\r\n\r\n**备注：**\r\n包含字符串中第一个 numChars 字符的字符串：\r\n\r\n- 如果 numChar = 0，则返回空字符串。\r\n- 如果 numChar < 0，则返回输入字符串。\r\n- 如果字符串为 null，则返回空字符串。\r\n\r\n如果字符串包含的字符数比 numChars 中指定的数量少，则返回与该字符串相同的字符串（即，包含参数 1 中的所有字符）。\r\n\r\n**示例：** \r\n`Left(\"John Doe\", 3)` 返回 “Joh”。\r\n\r\n- - -\r\n### Len <a name=\"len\"></a>\r\n**说明：**\r\nLen 函数返回字符串中的字符数。\r\n\r\n**语法：** \r\n`num Len(str value)`\r\n\r\n**示例：** \r\n`Len(\"John Doe\")` 返回 8\r\n\r\n- - -\r\n### LTrim <a name=\"ltrim\"></a>\r\n**说明：**\r\nLTrim 函数从字符串中删除前导空格。\r\n\r\n**语法：** \r\n`str LTrim(str value)`\r\n\r\n**示例：** \r\n`LTrim(\" Test \")` 返回 \"Test\"\r\n\r\n- - -\r\n### Mid <a name=\"mid\"></a>\r\n**说明：**\r\nMid 函数从字符串指定位置起返回指定的字符数。\r\n\r\n**语法：** \r\n`str Mid(str string, num start, num NumChars)`\r\n\r\n- string：从中返回字符的字符串\r\n- start：标识从中返回字符的字符串中起始位置的数字\r\n- NumChar：标识从字符串中的位置返回的字符数的数字\r\n\r\n**备注：**\r\n从字符串中的开始位置开始返回 numChars 字符。包含字符串中开始位置的 numChar 字符的字符串：\r\n\r\n- 如果 numChar = 0，则返回空字符串。\r\n- 如果 numChar < 0，则返回输入字符串。\r\n- 如果 start > 字符串的长度，则返回输入字符串。\r\n- 如果 start <= 0，则返回输入字符串。\r\n- 如果字符串为 null，则返回空字符串。\r\n\r\n如果字符串中开始位置没有保留的 numChar 字符，则返回尽可能多的字符。\r\n\r\n**示例：** \r\n`Mid(\"John Doe\", 3, 5)` 返回 \"hn Do\"。\r\n\r\n`Mid(\"John Doe\", 6, 999)` 返回 \"Doe\"\r\n\r\n- - -\r\n### Now <a name=\"now\"></a>\r\n**说明：**\r\nNow 函数根据计算机的系统日期和时间返回指定当前日期和时间的 DateTime。\r\n\r\n**语法：** \r\n`dt Now()`\r\n\r\n- - -\r\n### NumFromDate <a name=\"numfromdate\"></a>\r\n**说明：**\r\nNumFromDate 函数返回 AD 的日期格式的日期。\r\n\r\n**语法：** \r\n`num NumFromDate(dt value)`\r\n\r\n**示例：** \r\n`NumFromDate(CDate(\"2012-01-01 23:00:00\"))` 返回 129699324000000000\r\n\r\n- - -\r\n### PadLeft <a name=\"padleft\"></a>\r\n**说明：**\r\nPadLeft 函数使用提供的填充字符将字符串从左侧填充到指定长度。\r\n\r\n**语法：** \r\n`str PadLeft(str string, num length, str padCharacter)`\r\n\r\n- string：要填充的字符串。\r\n- length：表示所需字符串长度的整数。\r\n- padCharacter：包含用作填充字符的单个字符的字符串\r\n\r\n**备注：**\r\n\r\n- 如果字符串的长度小于 length，则 padCharacter 会重复追加到字符串的开头（左侧），直到其长度等于 length。\r\n- PadCharacter 可以是空格字符，但不能为 null 值。\r\n- 如果字符串的长度等于或大于 length，则返回不变的字符串。\r\n- 如果字符串的长度大于或等于 length，则返回与 string 相同的字符串。\r\n- 如果字符串的长度小于 length，则返回具有所需长度的新字符串，其中包含用 padCharacter 填充的字符串。\r\n- 如果字符串为 null，该函数则返回空字符串。\r\n\r\n**示例：** \r\n`PadLeft(\"User\", 10, \"0\")` 返回 \"000000User\"。\r\n\r\n- - -\r\n### PadRight <a name=\"padright\"></a>\r\n**说明：**\r\nPadRight 函数使用提供的填充字符将字符串从右侧填充到指定长度。\r\n\r\n**语法：** \r\n`str PadRight(str string, num length, str padCharacter)`\r\n\r\n- string：要填充的字符串。\r\n- length：表示所需字符串长度的整数。\r\n- padCharacter：包含用作填充字符的单个字符的字符串\r\n\r\n**备注：**\r\n\r\n- 如果字符串的长度小于 length，则 padCharacter 会重复追加到字符串的末尾（右侧），直到其长度等于 length。\r\n- padCharacter 可以是空格字符，但不能为 null 值。\r\n- 如果字符串的长度等于或大于 length，则返回不变的字符串。\r\n- 如果字符串的长度大于或等于 length，则返回与 string 相同的字符串。\r\n- 如果字符串的长度小于 length，则返回具有所需长度的新字符串，其中包含用 padCharacter 填充的字符串。\r\n- 如果字符串为 null，该函数则返回空字符串。\r\n\r\n**示例：** \r\n`PadRight(\"User\", 10, \"0\")` 返回 \"User000000\"。\r\n\r\n- - -\r\n### PCase <a name=\"pcase\"></a>\r\n**说明：**\r\nPCase 函数将字符串中每个空格分隔词的第一个字符转换为大写形式，并将所有其他字符都转换为小写形式。\r\n\r\n**语法：** \r\n`String PCase(string)`\r\n\r\n**备注：**\r\n\r\n- 此函数目前无法正常转换全大写单词（例如首字母缩写词）的大小写。\r\n\r\n**示例：** \r\n`PCase(\"TEsT\")` \r\n返回 \"Test\"。\r\n\r\n`PCase(LCase(\"TEST\"))` \r\n返回 \"Test\"\r\n\r\n- - -\r\n### RandomNum <a name=\"randomnum\"></a>\r\n**说明：**\r\nRandomNum 函数返回指定间隔之间的随机数字。\r\n\r\n**语法：** \r\n`num RandomNum(num start, num end)`\r\n\r\n- start：标识要生成的随机值的下限的数字\r\n- end：标识要生成的随机值的上限的数字\r\n\r\n**示例：** \r\n`Random(100,999)` 可以返回 734。\r\n\r\n- - -\r\n### RemoveDuplicates <a name=\"removeduplicates\"></a>\r\n**说明：**\r\nRemoveDuplicates 函数使用多值字符串，并确保每个值都是唯一值。\r\n\r\n**语法：** \r\n`mvstr RemoveDuplicates(mvstr attribute)`\r\n\r\n**示例：** \r\n`RemoveDuplicates([proxyAddresses])` 返回净化的 proxyAddress 属性，其中所有重复值已被删除。\r\n\r\n- - -\r\n### Replace <a name=\"replace\"></a>\r\n**说明：**\r\nReplace 函数将所有出现的某一字符串替换为另一个字符串。\r\n\r\n**语法：** \r\n`str Replace(str string, str OldValue, str NewValue)`\r\n\r\n- string：替换其中的值的字符串。\r\n- OldValue：要搜索和替换的字符串。\r\n- NewValue：要替换的字符串。\r\n\r\n**备注：**\r\n该函数可以识别以下特殊 moniker：\r\n\r\n- \\\\n — 新行\r\n- \\\\r — 回车符\r\n- \\\\t — 制表符\r\n\r\n**示例：**\r\n`Replace([address],\"\\r\\n\",\", \")` 将 CRLF 替换为逗号和空格，可能导致出现 \"One Microsoft Way, Redmond, WA, USA\"\r\n\r\n- - -\r\n### ReplaceChars <a name=\"replacechars\"></a>\r\n**说明：**\r\nReplaceChars 函数替换 ReplacePattern 字符串中找到的所有出现的字符。\r\n\r\n**语法：** \r\n`str ReplaceChars(str string, str ReplacePattern)`\r\n\r\n- string：替换其中值的字符串。\r\n- ReplacePattern：包含具有要替换字符的字典的字符串。\r\n\r\n格式为 {source1}:{target1},{source2}:{target2},{sourceN},{targetN}，其中源是要查找并确定要替换的目标字符串的字符。\r\n\r\n**备注：**\r\n\r\n- 该函数使用每次出现的定义的源，并使用目标替换它们。\r\n- 源必须正好是一个 (unicode) 字符。\r\n- 源不能为空或长度超过一个字符（分析错误）。\r\n- 目标可以具有多个字符，例如 ö:oe、β:ss。\r\n- 目标可以为空，该值指示应删除字符。\r\n- 源区分大小写，并且必须是完全匹配。\r\n- 逗号 (,) 和冒号 (:) 是保留的字符，不能使用此函数进行替换。\r\n- 空格和 ReplacePattern 字符串中的其他空白字符被忽略。\r\n\r\n**示例：** \r\n`%ReplaceString% = ’:,Å:A,Ä:A,Ö:O,å:a,ä:a,ö,o`\r\n\r\n`ReplaceChars(\"Räksmörgås\",%ReplaceString%)` \r\n返回 Raksmorgas\r\n\r\n`ReplaceChars(\"O’Neil\",%ReplaceString%)` \r\n返回 \"ONeil\"，定义要删除单次勾选。\r\n\r\n- - -\r\n### Right <a name=\"right\"></a>\r\n**说明：**Right 函数从字符串右侧（末尾）起返回指定的字符数。\r\n\r\n**语法：** \r\n`str Right(str string, num NumChars)`\r\n\r\n- string：从中返回字符的字符串\r\n- NumChar：标识从字符串末尾（右侧）起返回的字符数的数字\r\n\r\n**备注：**\r\nNumChars 字符从字符串的最后位置返回。\r\n\r\n包含字符串中最后的 numChar 字符的字符串：\r\n\r\n- 如果 numChar = 0，则返回空字符串。\r\n- 如果 numChar < 0，则返回输入字符串。\r\n- 如果字符串为 null，则返回空字符串。\r\n\r\n如果字符串包含的字符数比 NumChar 中指定的数量少，则返回与该字符串相同的字符串。\r\n\r\n**示例：** \r\n`Right(\"John Doe\", 3)` 返回 \"Doe\"。\r\n\r\n- - -\r\n### RTrim <a name=\"rtrim\"></a>\r\n**说明：**\r\nRTrim 函数从字符串中删除尾随空格。\r\n\r\n**语法：** \r\n`str RTrim(str value)`\r\n\r\n**示例：** \r\n`RTrim(\" Test \")` 返回 \"Test\"。\r\n\r\n- - -\r\n### Split <a name=\"split\"></a>\r\n**说明：**\r\nSplit 函数使用采用分隔符分隔的字符串，并使其成为多值字符串。\r\n\r\n**语法：** \r\n`mvstr Split(str value, str delimiter)` `mvstr Split(str value, str delimiter, num limit)`\r\n\r\n- value：用分隔符字符来分隔的字符串。\r\n- delimiter：用作分隔符的单个字符。\r\n- limit：可返回的最大数目的值。\r\n\r\n**示例：** \r\n`Split(\"SMTP:john.doe@contoso.com,smtp:jd@contoso.com\",\",\")` 返回多值字符串，其中 2 个元素对 proxyAddress 属性有用。\r\n\r\n- - -\r\n### StringFromGuid <a name=\"StringFromGuid\"></a>\r\n**说明：**\r\nStringFromGuid 函数使用二进制 GUID，并将其转换为字符串\r\n\r\n**语法：** \r\n`str StringFromGuid(bin GUID)`\r\n\r\n- - -\r\n### StringFromSid <a name=\"stringfromsid\"></a>\r\n**说明：**\r\nStringFromSid 函数将包含安全标识符的字节数组转换为字符串。\r\n\r\n**语法：** \r\n`str StringFromSid(bin ObjectSID)`\r\n\r\n- - -\r\n### Switch <a name=\"switch\"></a>\r\n**说明：**\r\nSwitch 函数用于基于计算的条件返回单个值。\r\n\r\n**语法：** \r\n`var Switch(exp expr1, var value1[, exp expr2, var value … [, exp expr, var valueN]])`\r\n\r\n- expr：想要计算结果的变体表达式。\r\n- value：当相应表达式为 True 时要返回的值。\r\n\r\n**备注：**\r\nSwitch 函数参数列表包含表达式和值对。表达式从左到右计算结果，并返回与计算结果为 True 的第一个表达式相关联的值。如果没有正确配对部件，则会发生运行时错误。\r\n\r\n例如，如果 expr1 为 True，则 Switch 返回 value1。如果 expr-1 为 False，但 expr-2 为 True，则 Switch 返回 value-2，依此类推。\r\n\r\n如果满足以下条件，Switch 将返回 Nothing：\r\n\r\n- 没有任何表达式求值为 True。\r\n- 第一个 True 表达式的相应值为 Null。\r\n\r\nSwitch 对所有表达式求值，即使它只返回其中一个结果。为此，你应监视非预期的负面影响。例如，如果任何表达式的计算结果导致除数为零的错误，则会出现错误。\r\n\r\n值还可以是将返回自定义字符串的错误函数。\r\n\r\n**示例：** \r\n`Switch([city] = \"London\", \"English\", [city] = \"Rome\", \"Italian\", [city] = \"Paris\", \"French\", True, Error(\"Unknown city\"))`返回某些主要城市所使用的语言，否则返回错误。\r\n\r\n- - -\r\n### Trim <a name=\"trim\"></a>\r\n**说明：**\r\nTrim 函数从字符串中删除前导空格和尾随空格。\r\n\r\n**语法：** \r\n`str Trim(str value)`\r\n\r\n**示例：** \r\n`Trim(\" Test \")` \r\n返回 \"Test\"。\r\n\r\n`Trim([proxyAddresses])` \r\n删除 proxyAddress 属性中每个值的前导空格和尾随空格。\r\n\r\n- - -\r\n### UCase <a name=\"ucase\"></a>\r\n**说明：**UCase 函数将字符串中的所有字符都转换为大写形式。\r\n\r\n**语法：** \r\n`str UCase(str string)`\r\n\r\n**示例：** \r\n`UCase(\"TeSt\")` 返回 \"TEST\"。\r\n\r\n- - -\r\n### Word <a name=\"word\"></a>\r\n**说明：**\r\n基于描述要使用的分隔符与要返回的单词数的参数，Word 函数返回字符串中包含的单词。\r\n\r\n**语法：** \r\n`str Word(str string, num WordNumber, str delimiters)`\r\n\r\n- string：从中返回单词的字符串。\r\n- WordNumber：标识应返回单词数的数字。\r\n- delimiter：表示应该用于标识单词的分隔符的字符串\r\n\r\n**备注：**\r\n字符串中的字符由分隔符中其中一个字符分隔的每个字符串被标识为单词：\r\n\r\n- 如果数字 < 1，则返回空字符串。\r\n- 如果字符串为 null，则返回空字符串。\r\n\r\n如果字符串包含的单词少于应返回数字或字符串不包含由分隔符标识的任何单词，则返回空字符串。\r\n\r\n**示例：** \r\n`Word(\"The quick brown fox\",3,\" \")` 返回 \"brown\"\r\n\r\n`Word(\"This,string!has&many separators\",3,\",!&#\")` \r\n返回 \"has\"\r\n\r\n## 其他资源\r\n- [了解声明性设置表达式](./active-directory-aadconnectsync-understanding-declarative-provisioning-expressions.md)\r\n- [Azure AD Connect Sync：自定义同步选项](./active-directory-aadconnectsync-whatis.md)\r\n- [将本地标识与 Azure Active Directory 集成](./active-directory-aadconnect.md)\r\n\r\n<!---HONumber=Mooncake_0306_2017-->\r\n<!---Update_Description: wording update -->"}