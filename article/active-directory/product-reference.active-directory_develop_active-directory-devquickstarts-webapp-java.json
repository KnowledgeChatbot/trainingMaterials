{"Title":"Azure AD Java Web 应用入门","Description":"生成可让用户使用工作或学校帐户登录的 Java Web 应用。","Content":"\r\n# 通过 Azure AD 实现 Java Web 应用登录和注销\r\n[!INCLUDE [active-directory-devguide](../../../includes/active-directory-devguide.md)]\r\n\r\n使用 Azure Active Directory (Azure AD)，只需通过编写几行代码来提供单一登录和注销，就能简单外包 Web 应用的标识管理。可通过使用社区驱动的、用于 Java 的 Azure Active Directory 身份验证库 (ADAL4J) 的 Microsoft 实现，将用户登入和登出 Java Web 应用。\r\n\r\n本文演示如何使用 ADAL4J 执行以下操作：\r\n\r\n- 使用 Azure AD 作为标识提供者将用户登录到 Web 应用。\r\n- 显示某些用户信息。\r\n- 将用户从应用中注销。\r\n\r\n## 准备工作\r\n\r\n- 下载[应用框架](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/skeleton.zip)或下载[已完成的示例](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect\\\\/archive/complete.zip)。\r\n- 还需要一个用于注册应用的 Azure AD 租户。如果还没有 Azure AD 租户，请[了解如何获取租户](./active-directory-howto-tenant.md)。\r\n\r\n准备好后，请按照以下 9 个部分中的步骤操作。\r\n\r\n## 步骤 1：向 Azure AD 注册新应用\r\n若要设置应用以便对用户进行身份验证，请先通过执行以下操作在租户中对其进行注册：\r\n\r\n- 登录到 Azure 管理门户。\r\n- 在左侧的导航栏中单击“Active Directory”。\r\n- 选择你要在其中注册应用程序的租户。\r\n- 单击“应用程序”选项卡，然后在底部抽屉中单击“添加”。\r\n- 根据提示创建一个新的 **Web 应用程序和/或 WebAPI**。\r\n    - 应用程序的**名称**向最终用户描述你的应用程序\r\n    - “登录 URL”是应用的基本 URL。框架的默认值为 `http://localhost:8080/adal4jsample/`。\r\n    - “应用 ID URI”是应用程序的唯一标识符。约定是使用 `https://<tenant-domain>/<app-name>`，例如 `http://localhost:8080/adal4jsample/`\r\n- 完成注册后，AAD 将为应用分配唯一的客户端标识符。在后面的部分中将会用到此值，因此，请从“配置”选项卡复制此值。\r\n\r\n进入应用门户后，为应用程序创建一个**密钥**并复制该密钥。稍后将需要它。\r\n\r\n## 步骤2：使用 Maven 将应用设置为使用 ADAL4J 和先决条件\r\n在此步骤中，将 ADAL4J 配置为使用 OpenID Connect 身份验证协议。使用 ADAL4J 发出登录和注销请求、管理用户会话以及获取用户信息等。\r\n\r\n在项目的根目录中，打开/创建 `pom.xml`，找到 `// TODO: provide dependencies for Maven` 并替换为以下代码：\r\n\r\n```Java\r\n    <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n        <modelVersion>4.0.0</modelVersion>\r\n        <groupId>com.microsoft.azure</groupId>\r\n        <artifactId>adal4jsample</artifactId>\r\n        <packaging>war</packaging>\r\n        <version>0.0.1-SNAPSHOT</version>\r\n        <name>adal4jsample</name>\r\n        <url>http://maven.apache.org</url>\r\n        <properties>\r\n            <spring.version>3.0.5.RELEASE</spring.version>\r\n        </properties>\r\n\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>com.microsoft.azure</groupId>\r\n                <artifactId>adal4j</artifactId>\r\n                <version>1.1.1</version>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>com.nimbusds</groupId>\r\n                <artifactId>oauth2-oidc-sdk</artifactId>\r\n                <version>4.5</version>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>org.json</groupId>\r\n                <artifactId>json</artifactId>\r\n                <version>20090211</version>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>javax.servlet</groupId>\r\n                <artifactId>javax.servlet-api</artifactId>\r\n                <version>3.0.1</version>\r\n                <scope>provided</scope>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>org.slf4j</groupId>\r\n                <artifactId>slf4j-log4j12</artifactId>\r\n                <version>1.7.5</version>\r\n            </dependency>\r\n            <!-- Spring 3 dependencies -->\r\n            <dependency>\r\n                <groupId>org.springframework</groupId>\r\n                <artifactId>spring-core</artifactId>\r\n                <version>${spring.version}</version>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>org.springframework</groupId>\r\n                <artifactId>spring-web</artifactId>\r\n                <version>${spring.version}</version>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>org.springframework</groupId>\r\n                <artifactId>spring-webmvc</artifactId>\r\n                <version>${spring.version}</version>\r\n            </dependency>\r\n        </dependencies>\r\n\r\n        <build>\r\n            <finalName>sample-for-adal4j</finalName>\r\n            <plugins>\r\n                <plugin>\r\n                    <groupId>org.apache.maven.plugins</groupId>\r\n                    <artifactId>maven-compiler-plugin</artifactId>\r\n                    <configuration>\r\n                        <source>1.7</source>\r\n                        <target>1.7</target>\r\n                        <encoding>UTF-8</encoding>\r\n                    </configuration>\r\n                </plugin>\r\n                <plugin>\r\n                    <groupId>org.apache.maven.plugins</groupId>\r\n                    <artifactId>maven-war-plugin</artifactId>\r\n                    <version>2.4</version>\r\n                    <configuration>\r\n                        <warName>${project.artifactId}</warName>\r\n                        <source>${project.basedir}\\src</source>\r\n                        <target>${maven.compiler.target}</target>\r\n                        <encoding>utf-8</encoding>\r\n                    </configuration>\r\n                </plugin>\r\n                <plugin>\r\n                    <groupId>org.apache.maven.plugins</groupId>\r\n                    <artifactId>maven-dependency-plugin</artifactId>\r\n                    <executions>\r\n                        <execution>\r\n                            <id>install</id>\r\n                            <phase>install</phase>\r\n                            <goals>\r\n                                <goal>sources</goal>\r\n                            </goals>\r\n                        </execution>\r\n                    </executions>\r\n                </plugin>\r\n                <plugin>\r\n                    <groupId>org.apache.maven.plugins</groupId>\r\n                    <artifactId>maven-resources-plugin</artifactId>\r\n                    <version>2.5</version>\r\n                    <configuration>\r\n                        <encoding>UTF-8</encoding>\r\n                    </configuration>\r\n                </plugin>\r\n            </plugins>\r\n        </build>\r\n\r\n    </project>\r\n```\r\n\r\n## 步骤 3：创建 Java Web 应用文件 (WEB-INF)\r\n在此步骤中，将 Java Web 应用配置为使用 OpenID Connect 身份验证协议。使用 ADAL4J 发出登录和注销请求、管理用户会话以及获取用户信息等。\r\n\r\n1. 打开位于 \\\\webapp\\\\WEB-INF\\\\ 下的 web.xml 文件，然后在 XML 中输入应用配置值。XML 文件应包含以下代码：\r\n\r\n    ```xml\r\n    <?xml version=\"1.0\"?>\r\n    <web-app id=\"WebApp_ID\" version=\"2.4\"\r\n        xmlns=\"http://java.sun.com/xml/ns/j2ee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee \r\n        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\r\n        <display-name>Archetype Created Web Application</display-name>\r\n        <context-param>\r\n            <param-name>authority</param-name>\r\n            <param-value>https://login.chinacloudapi.cn/</param-value>\r\n        </context-param>\r\n        <context-param>\r\n            <param-name>tenant</param-name>\r\n            <param-value>YOUR_TENANT_NAME</param-value>\r\n        </context-param>\r\n\r\n        <filter>\r\n            <filter-name>BasicFilter</filter-name>\r\n            <filter-class>com.microsoft.aad.adal4jsample.BasicFilter</filter-class>\r\n            <init-param>\r\n                <param-name>client_id</param-name>\r\n                <param-value>YOUR_CLIENT_ID</param-value>\r\n            </init-param>\r\n            <init-param>\r\n                <param-name>secret_key</param-name>\r\n                <param-value>YOUR_CLIENT_SECRET</param-value>\r\n            </init-param>\r\n        </filter>\r\n        <filter-mapping>\r\n            <filter-name>BasicFilter</filter-name>\r\n            <url-pattern>/secure/*</url-pattern>\r\n        </filter-mapping>\r\n\r\n        <servlet>\r\n            <servlet-name>mvc-dispatcher</servlet-name>\r\n            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n            <load-on-startup>1</load-on-startup>\r\n        </servlet>\r\n\r\n        <servlet-mapping>\r\n            <servlet-name>mvc-dispatcher</servlet-name>\r\n            <url-pattern>/</url-pattern>\r\n        </servlet-mapping>\r\n\r\n        <context-param>\r\n            <param-name>contextConfigLocation</param-name>\r\n            <param-value>/WEB-INF/mvc-dispatcher-servlet.xml</param-value>\r\n        </context-param>\r\n\r\n        <listener>\r\n            <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n        </listener>\r\n    </web-app>\r\n    ```\r\n\r\n    -    YOUR\\_CLIENT\\_ID 是在注册门户中为应用分配的**应用程序 ID**。\r\n    -    YOUR\\_CLIENT\\_SECRET 是在门户中创建的**密钥**。\r\n    -    YOUR\\_TENANT\\_NAME 是应用的**租户名称**，例如“contoso.partner.onmschina.cn”\r\n\r\n 正如在 XML 文件中所见，其中正在编写名为 mvc-dispatcher 的 JavaServer Pages (JSP) 或 Java Servlet Web 应用，它会在用户每次访问 /secure URL 时使用 BasicFilter。在相同的代码中，使用 /secure 作为受保护内容的位置，并强制向 Azure AD 进行身份验证。\r\n\r\n2. 在 \\\\webapp\\\\WEB-INF\\\\ 下创建 mvc-dispatcher-servlet.xml 文件，然后输入以下代码：\r\n\r\n    ```xml\r\n    <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n        xmlns:context=\"http://www.springframework.org/schema/context\"\r\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n        xsi:schemaLocation=\"\r\n            http://www.springframework.org/schema/beans     \r\n            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n            http://www.springframework.org/schema/context \r\n            http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\r\n\r\n        <context:component-scan base-package=\"com.microsoft.aad.adal4jsample\" />\r\n\r\n        <bean\r\n            class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n            <property name=\"prefix\">\r\n                <value>/</value>\r\n            </property>\r\n            <property name=\"suffix\">\r\n                <value>.jsp</value>\r\n            </property>\r\n        </bean>\r\n\r\n    </beans>\r\n    ```\r\n\r\n 此代码让 Web 应用使用 Spring，并指示用于查找 JSP 文件（在下一部分中编写）的位置。\r\n\r\n## 步骤 4：创建 JSP 视图文件（适用于 BasicFilter MVC）\r\n在 WEB-INF 中设置 Web 应用这一操作已完成一半。接下来，创建用于 BasicFilter 模型视图控制器 (MVC) 的 JSP 文件，Web 应用会执行该文件。之前曾提示过在配置期间创建文件。\r\n\r\n之前，在 XML 配置文件中，曾告知 Java 有一个用于加载 JSP 文件的 `/` 资源，还有一个会通过筛选器的名为 BasicFilter 的 `/secure` 资源。\r\n\r\n若要创建 JSP 文件，请执行以下操作：\r\n\r\n1. 创建 index.jsp 文件（位于 \\\\webapp 下），然后粘贴以下代码：\r\n\r\n    ```jsp\r\n    <html>\r\n    <body>\r\n        <h2>Hello World!</h2>\r\n        <ul>\r\n        <li><a href=\"secure/aad\">Secure Page</a></li>\r\n        </ul>\r\n    </body>\r\n    </html>\r\n    ```\r\n\r\n    此代码仅重定向到筛选器保护的安全页。\r\n\r\n2. 在同一个目录中创建 error.jsp 文件，用于捕获可能发生的任何错误：\r\n\r\n    ```jsp\r\n    <html>\r\n    <body>\r\n        <h2>ERROR PAGE!</h2>\r\n        <p>\r\n            Exception -\r\n            <%=request.getAttribute(\"error\")%></p>\r\n        <ul>\r\n            <li><a href=\"<%=request.getContextPath()%>/index.jsp\">Go Home</a></li>\r\n        </ul>\r\n    </body>\r\n    </html>\r\n    ```\r\n\r\n3. 若要让其成为安全网页，请在 \\\\webapp 下创建名为 \\\\secure 的文件夹，以使目录变为 \\\\webapp\\\\secure。\r\n4. 在 \\\\webapp\\\\secure 目录中，创建 aad.jsp 文件，然后粘贴以下代码：\r\n\r\n    ```jsp\r\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n    <html>\r\n    <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n    <title>AAD Secure Page</title>\r\n    </head>\r\n    <body>\r\n\r\n        <h1>Directory - Users List</h1>\r\n        <p>${users}</p>\r\n\r\n        <ul>\r\n            <li><a href=\"<%=request.getContextPath()%>/secure/aad?cc=1\">Get\r\n                    new Access Token via Client Credentials</a></li>\r\n        </ul>\r\n        <ul>\r\n            <li><a href=\"<%=request.getContextPath()%>/secure/aad?refresh=1\">Get\r\n                    new Access Token via Refresh Token</a></li>\r\n        </ul>\r\n        <ul>\r\n            <li><a href=\"<%=request.getContextPath()%>/index.jsp\">Go Home</a></li>\r\n        </ul>\r\n    </body>\r\n    </html>\r\n    ```\r\n\r\n    此页会重定向到特定请求，BasicFilter servlet 使用 ADAJ4J 读取并执行这些请求。\r\n\r\n现在需要设置 Java 文件，以便 servlet 可以执行其工作。\r\n\r\n## 步骤 5：创建一些 Java 帮助程序文件（适用于 BasicFilter MVC）\r\n在此步骤中，我们的目标是创建 Java 文件，用于：\r\n\r\n- 允许用户登录和注销。\r\n- 获取有关用户的一些数据。\r\n\r\n    > [!NOTE]\r\n    > 若要获取用户数据，请使用 Azure AD 的图形 API。图形 API 是安全的 Web 服务，可用于检索有关组织（包括个人用户）的数据。这种方法相较在令牌中预填充敏感数据更好，因为它可确保：\r\n    > * 授权给请求数据的用户。\r\n    > * 任何碰巧（例如，从越狱手机或桌面上的 Web 浏览器缓存中）持有令牌的用户都无法获取有关用户或组织的重要详细信息。\r\n\r\n编写一些用于此工作的 Java 文件：\r\n\r\n1. 在名为“adal4jsample”的根目录中创建一个文件夹用于存储所有 Java 文件。\r\n\r\n    本示例中，将在 Java 文件中使用命名空间 com.microsoft.aad.adal4jsample。为此，大多数 IDE 会创建嵌套文件夹结构（例如 /com/microsoft/aad/adal4jsample）。可执行此操作（但并非必要）。\r\n\r\n2. 在此文件夹中，创建名为 JSONHelper.java 的文件，该文件将用于帮助分析来自令牌的 JSON 数据。若要创建该文件，请粘贴以下代码：\r\n\r\n    ```Java\r\n    package com.microsoft.aad.adal4jsample;\r\n\r\n    import java.lang.reflect.Field;\r\n    import java.util.Arrays;\r\n    import java.util.Enumeration;\r\n    import java.util.List;\r\n\r\n    import javax.servlet.http.HttpServletRequest;\r\n\r\n    import org.apache.commons.lang3.text.WordUtils;\r\n    import org.apache.log4j.Logger;\r\n    import org.json.JSONArray;\r\n    import org.json.JSONException;\r\n    import org.json.JSONObject;\r\n\r\n    /**\r\n     * This class provides the methods to parse JSON Data from a JSON Formatted\r\n     * String.\r\n     * \r\n     * @author Azure Active Directory Contributor\r\n     * \r\n     */\r\n    public class JSONHelper {\r\n\r\n        private static Logger logger = Logger.getLogger(JSONHelper.class);\r\n\r\n        JSONHelper() {\r\n            // PropertyConfigurator.configure(\"log4j.properties\");\r\n        }\r\n\r\n        /**\r\n         * This method parses an JSON Array out of a collection of JSON Objects\r\n         * within a string.\r\n         * \r\n         * @param jSonData\r\n         *            The JSON String that holds the collection.\r\n         * @return An JSON Array that would contains all the collection object.\r\n         * @throws Exception\r\n         */\r\n        public static JSONArray fetchDirectoryObjectJSONArray(JSONObject jsonObject) throws Exception {\r\n            JSONArray jsonArray = new JSONArray();\r\n            jsonArray = jsonObject.optJSONObject(\"responseMsg\").optJSONArray(\"value\");\r\n            return jsonArray;\r\n        }\r\n\r\n        /**\r\n         * This method parses an JSON Object out of a collection of JSON Objects\r\n         * within a string\r\n         * \r\n         * @param jsonObject\r\n         * @return An JSON Object that would contains the DirectoryObject.\r\n         * @throws Exception\r\n         */\r\n        public static JSONObject fetchDirectoryObjectJSONObject(JSONObject jsonObject) throws Exception {\r\n            JSONObject jObj = new JSONObject();\r\n            jObj = jsonObject.optJSONObject(\"responseMsg\");\r\n            return jObj;\r\n        }\r\n\r\n        /**\r\n         * This method parses the skip token from a json formatted string.\r\n         * \r\n         * @param jsonData\r\n         *            The JSON Formatted String.\r\n         * @return The skipToken.\r\n         * @throws Exception\r\n         */\r\n        public static String fetchNextSkiptoken(JSONObject jsonObject) throws Exception {\r\n            String skipToken = \"\";\r\n            // Parse the skip token out of the string.\r\n            skipToken = jsonObject.optJSONObject(\"responseMsg\").optString(\"odata.nextLink\");\r\n\r\n            if (!skipToken.equalsIgnoreCase(\"\")) {\r\n                // Remove the unnecessary prefix from the skip token.\r\n                int index = skipToken.indexOf(\"$skiptoken=\") + (new String(\"$skiptoken=\")).length();\r\n                skipToken = skipToken.substring(index);\r\n            }\r\n            return skipToken;\r\n        }\r\n\r\n        /**\r\n         * @param jsonObject\r\n         * @return\r\n         * @throws Exception\r\n         */\r\n        public static String fetchDeltaLink(JSONObject jsonObject) throws Exception {\r\n            String deltaLink = \"\";\r\n            // Parse the skip token out of the string.\r\n            deltaLink = jsonObject.optJSONObject(\"responseMsg\").optString(\"aad.deltaLink\");\r\n            if (deltaLink == null || deltaLink.length() == 0) {\r\n                deltaLink = jsonObject.optJSONObject(\"responseMsg\").optString(\"aad.nextLink\");\r\n                logger.info(\"deltaLink empty, nextLink ->\" + deltaLink);\r\n\r\n            }\r\n            if (!deltaLink.equalsIgnoreCase(\"\")) {\r\n                // Remove the unnecessary prefix from the skip token.\r\n                int index = deltaLink.indexOf(\"deltaLink=\") + (new String(\"deltaLink=\")).length();\r\n                deltaLink = deltaLink.substring(index);\r\n            }\r\n            return deltaLink;\r\n        }\r\n\r\n        /**\r\n         * This method would create a string consisting of a JSON document with all\r\n         * the necessary elements set from the HttpServletRequest request.\r\n         * \r\n         * @param request\r\n         *            The HttpServletRequest\r\n         * @return the string containing the JSON document.\r\n         * @throws Exception\r\n         *             If there is any error processing the request.\r\n         */\r\n        public static String createJSONString(HttpServletRequest request, String controller) throws Exception {\r\n            JSONObject obj = new JSONObject();\r\n            try {\r\n                Field[] allFields = Class.forName(\r\n                        \"com.microsoft.windowsazure.activedirectory.sdk.graph.models.\" + controller).getDeclaredFields();\r\n                String[] allFieldStr = new String[allFields.length];\r\n                for (int i = 0; i < allFields.length; i++) {\r\n                    allFieldStr[i] = allFields[i].getName();\r\n                }\r\n                List<String> allFieldStringList = Arrays.asList(allFieldStr);\r\n                Enumeration<String> fields = request.getParameterNames();\r\n\r\n                while (fields.hasMoreElements()) {\r\n\r\n                    String fieldName = fields.nextElement();\r\n                    String param = request.getParameter(fieldName);\r\n                    if (allFieldStringList.contains(fieldName)) {\r\n                        if (param == null || param.length() == 0) {\r\n                            if (!fieldName.equalsIgnoreCase(\"password\")) {\r\n                                obj.put(fieldName, JSONObject.NULL);\r\n                            }\r\n                        } else {\r\n                            if (fieldName.equalsIgnoreCase(\"password\")) {\r\n                                obj.put(\"passwordProfile\", new JSONObject(\"{\"password\": \"\" + param + \"\"}\"));\r\n                            } else {\r\n                                obj.put(fieldName, param);\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            } catch (SecurityException e) {\r\n                e.printStackTrace();\r\n            } catch (ClassNotFoundException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return obj.toString();\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @param key\r\n         * @param value\r\n         * @return string format of this JSON obje\r\n         * @throws Exception\r\n         */\r\n        public static String createJSONString(String key, String value) throws Exception {\r\n\r\n            JSONObject obj = new JSONObject();\r\n            try {\r\n                obj.put(key, value);\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            return obj.toString();\r\n        }\r\n\r\n        /**\r\n         * This is a generic method that copies the simple attribute values from an\r\n         * argument jsonObject to an argument generic object.\r\n         * \r\n         * @param jsonObject\r\n         *            The jsonObject from where the attributes are to be copied.\r\n         * @param destObject\r\n         *            The object where the attributes should be copied into.\r\n         * @throws Exception\r\n         *             Throws a Exception when the operation are unsuccessful.\r\n         */\r\n        public static <T> void convertJSONObjectToDirectoryObject(JSONObject jsonObject, T destObject) throws Exception {\r\n\r\n            // Get the list of all the field names.\r\n            Field[] fieldList = destObject.getClass().getDeclaredFields();\r\n\r\n            // For all the declared field.\r\n            for (int i = 0; i < fieldList.length; i++) {\r\n                // If the field is of type String, that is\r\n                // if it is a simple attribute.\r\n                if (fieldList[i].getType().equals(String.class)) {\r\n                    // Invoke the corresponding set method of the destObject using\r\n                    // the argument taken from the jsonObject.\r\n                    destObject\r\n                            .getClass()\r\n                            .getMethod(String.format(\"set%s\", WordUtils.capitalize(fieldList[i].getName())),\r\n                                    new Class[] { String.class })\r\n                            .invoke(destObject, new Object[] { jsonObject.optString(fieldList[i].getName()) });\r\n                }\r\n            }\r\n        }\r\n\r\n        public static JSONArray joinJSONArrays(JSONArray a, JSONArray b) {\r\n            JSONArray comb = new JSONArray();\r\n            for (int i = 0; i < a.length(); i++) {\r\n                comb.put(a.optJSONObject(i));\r\n            }\r\n            for (int i = 0; i < b.length(); i++) {\r\n                comb.put(b.optJSONObject(i));\r\n            }\r\n            return comb;\r\n        }\r\n\r\n    }\r\n    ```\r\n\r\n3. 创建名为 HttpClientHelper.java 的文件，该文件将用于帮助分析来自 Azure AD 终结点的 HTTP 数据。若要创建该文件，请粘贴以下代码：\r\n\r\n    ```Java\r\n    package com.microsoft.aad.adal4jsample;\r\n\r\n    import java.io.BufferedReader;\r\n    import java.io.ByteArrayOutputStream;\r\n    import java.io.IOException;\r\n    import java.io.InputStream;\r\n    import java.io.InputStreamReader;\r\n    import java.io.OutputStreamWriter;\r\n    import java.net.HttpURLConnection;\r\n\r\n    import org.json.JSONException;\r\n    import org.json.JSONObject;\r\n\r\n    /**\r\n     * This is Helper class for all RestClient class.\r\n     * \r\n     * @author Azure Active Directory Contributor\r\n     * \r\n     */\r\n    public class HttpClientHelper {\r\n\r\n        public HttpClientHelper() {\r\n            super();\r\n        }\r\n\r\n        public static String getResponseStringFromConn(HttpURLConnection conn, boolean isSuccess) throws IOException {\r\n\r\n            BufferedReader reader = null;\r\n            if (isSuccess) {\r\n                reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\r\n            } else {\r\n                reader = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\r\n            }\r\n            StringBuffer stringBuffer = new StringBuffer();\r\n            String line = \"\";\r\n            while ((line = reader.readLine()) != null) {\r\n                stringBuffer.append(line);\r\n            }\r\n\r\n            return stringBuffer.toString();\r\n        }\r\n\r\n        public static String getResponseStringFromConn(HttpURLConnection conn, String payLoad) throws IOException {\r\n\r\n            // Send the http message payload to the server.\r\n            if (payLoad != null) {\r\n                conn.setDoOutput(true);\r\n                OutputStreamWriter osw = new OutputStreamWriter(conn.getOutputStream());\r\n                osw.write(payLoad);\r\n                osw.flush();\r\n                osw.close();\r\n            }\r\n\r\n            // Get the message response from the server.\r\n            BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\r\n            String line = \"\";\r\n            StringBuffer stringBuffer = new StringBuffer();\r\n            while ((line = br.readLine()) != null) {\r\n                stringBuffer.append(line);\r\n            }\r\n\r\n            br.close();\r\n\r\n            return stringBuffer.toString();\r\n        }\r\n\r\n        public static byte[] getByteaArrayFromConn(HttpURLConnection conn, boolean isSuccess) throws IOException {\r\n\r\n            InputStream is = conn.getInputStream();\r\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n            byte[] buff = new byte[1024];\r\n            int bytesRead = 0;\r\n\r\n            while ((bytesRead = is.read(buff, 0, buff.length)) != -1) {\r\n                baos.write(buff, 0, bytesRead);\r\n            }\r\n\r\n            byte[] bytes = baos.toByteArray();\r\n            baos.close();\r\n            return bytes;\r\n        }\r\n\r\n        /**\r\n         * for bad response, whose responseCode is not 200 level\r\n         * \r\n         * @param responseCode\r\n         * @param errorCode\r\n         * @param errorMsg\r\n         * @return\r\n         * @throws JSONException\r\n         */\r\n        public static JSONObject processResponse(int responseCode, String errorCode, String errorMsg) throws JSONException {\r\n            JSONObject response = new JSONObject();\r\n            response.put(\"responseCode\", responseCode);\r\n            response.put(\"errorCode\", errorCode);\r\n            response.put(\"errorMsg\", errorMsg);\r\n\r\n            return response;\r\n        }\r\n\r\n        /**\r\n         * for bad response, whose responseCode is not 200 level\r\n         * \r\n         * @param responseCode\r\n         * @param errorCode\r\n         * @param errorMsg\r\n         * @return\r\n         * @throws JSONException\r\n         */\r\n        public static JSONObject processGoodRespStr(int responseCode, String goodRespStr) throws JSONException {\r\n            JSONObject response = new JSONObject();\r\n            response.put(\"responseCode\", responseCode);\r\n            if (goodRespStr.equalsIgnoreCase(\"\")) {\r\n                response.put(\"responseMsg\", \"\");\r\n            } else {\r\n                response.put(\"responseMsg\", new JSONObject(goodRespStr));\r\n            }\r\n\r\n            return response;\r\n        }\r\n\r\n        /**\r\n         * for good response\r\n         * \r\n         * @param responseCode\r\n         * @param responseMsg\r\n         * @return\r\n         * @throws JSONException\r\n         */\r\n        public static JSONObject processBadRespStr(int responseCode, String responseMsg) throws JSONException {\r\n\r\n            JSONObject response = new JSONObject();\r\n            response.put(\"responseCode\", responseCode);\r\n            if (responseMsg.equalsIgnoreCase(\"\")) { // good response is empty string\r\n                response.put(\"responseMsg\", \"\");\r\n            } else { // bad response is json string\r\n                JSONObject errorObject = new JSONObject(responseMsg).optJSONObject(\"odata.error\");\r\n\r\n                String errorCode = errorObject.optString(\"code\");\r\n                String errorMsg = errorObject.optJSONObject(\"message\").optString(\"value\");\r\n                response.put(\"responseCode\", responseCode);\r\n                response.put(\"errorCode\", errorCode);\r\n                response.put(\"errorMsg\", errorMsg);\r\n            }\r\n\r\n            return response;\r\n        }\r\n\r\n    }\r\n    ```\r\n\r\n## 步骤 6：创建 Java 图形 API 模型文件（适用于 BasicFilter MVC）\r\n如前所述，使用图形 API 获取有关登录用户的数据。为了让此过程用于执行，请同时创建一个表示目录对象的文件以及一个表示用户的文件，如此便可以使用 Java 的 OO 模式。\r\n\r\n1. 创建名为 DirectoryObject.java 的文件，该文件将用于存储有关任何目录对象的基本数据。可在以后将此文件用于可能执行的任何其他图形查询。若要创建该文件，请粘贴以下代码：\r\n\r\n    ```Java\r\n    package com.microsoft.aad.adal4jsample;\r\n\r\n    /**\r\n     * @author Azure Active Directory Contributor\r\n     *\r\n     */\r\n    public abstract class DirectoryObject {\r\n\r\n        public DirectoryObject() {\r\n            super();\r\n        }\r\n\r\n        /**\r\n         * \r\n         * @return\r\n         */\r\n        public abstract String getObjectId();\r\n\r\n        /**\r\n         * @param objectId\r\n         */\r\n        public abstract void setObjectId(String objectId);\r\n\r\n        /**\r\n         * \r\n         * @return\r\n         */\r\n        public abstract String getObjectType();\r\n\r\n        /**\r\n         * \r\n         * @param objectType\r\n         */\r\n        public abstract void setObjectType(String objectType);\r\n\r\n        /**\r\n         * \r\n         * @return\r\n         */\r\n        public abstract String getDisplayName();\r\n\r\n        /**\r\n         * \r\n         * @param displayName\r\n         */\r\n        public abstract void setDisplayName(String displayName);\r\n\r\n    }\r\n    ```\r\n\r\n2. 创建名为 User.java 的文件，该文件将用于存储有关目录中任何用户的基本数据。这些是用于目录数据的基本 getter 和 setter 方法，可粘贴以下代码：\r\n\r\n    ```Java\r\n    package com.microsoft.aad.adal4jsample;\r\n\r\n    import java.security.acl.Group;\r\n    import java.util.ArrayList;\r\n\r\n    import javax.xml.bind.annotation.XmlRootElement;\r\n\r\n    import org.json.JSONObject;\r\n\r\n    /**\r\n     *  The User Class holds together all the members of a WAAD User entity and all the access methods and set methods\r\n     *  @author Azure Active Directory Contributor\r\n     */\r\n    @XmlRootElement\r\n    public class User extends DirectoryObject{\r\n\r\n        // The following are the individual private members of a User object that holds\r\n        // a particular simple attribute of an User object.\r\n        protected String objectId;\r\n        protected String objectType;\r\n        protected String accountEnabled;\r\n        protected String city;\r\n        protected String country;\r\n        protected String department;\r\n        protected String dirSyncEnabled;\r\n        protected String displayName;\r\n        protected String facsimileTelephoneNumber;\r\n        protected String givenName;\r\n        protected String jobTitle;\r\n        protected String lastDirSyncTime;\r\n        protected String mail;\r\n        protected String mailNickname;\r\n        protected String mobile;\r\n        protected String password;\r\n        protected String passwordPolicies;\r\n        protected String physicalDeliveryOfficeName;\r\n        protected String postalCode;\r\n        protected String preferredLanguage;\r\n        protected String state;\r\n        protected String streetAddress;\r\n        protected String surname;\r\n        protected String telephoneNumber;\r\n        protected String usageLocation;\r\n        protected String userPrincipalName;\r\n        protected boolean isDeleted;  // this will move to dto\r\n\r\n        /**\r\n         * below 4 properties are for future use\r\n         */\r\n        // managerDisplayname of this user\r\n        protected String managerDisplayname;\r\n\r\n        // The directReports holds a list of directReports\r\n        private ArrayList<User> directReports;\r\n\r\n        // The groups holds a list of group entity this user belongs to. \r\n        private ArrayList<Group> groups;\r\n\r\n        // The roles holds a list of role entity this user belongs to. \r\n        private ArrayList<Group> roles;\r\n\r\n        /**\r\n         * The constructor for the User class. Initializes the dynamic lists and managerDisplayname variables.\r\n         */\r\n        public User(){\r\n            directReports = null;\r\n            groups = new ArrayList<Group>();\r\n            roles = new ArrayList<Group>();\r\n            managerDisplayname = null;\r\n        }\r\n    //\t\r\n    //\tpublic User(String displayName, String objectId){\r\n    //\t\tsetDisplayName(displayName);\r\n    //\t\tsetObjectId(objectId);\r\n    //\t}\r\n    //\t\r\n    //\tpublic User(String displayName, String objectId, String userPrincipalName, String accountEnabled){\r\n    //\t\tsetDisplayName(displayName);\r\n    //\t\tsetObjectId(objectId);\r\n    //\t\tsetUserPrincipalName(userPrincipalName);\r\n    //\t\tsetAccountEnabled(accountEnabled);\r\n    //\t}\r\n    //\t\r\n\r\n        /**\r\n         * @return The objectId of this user.\r\n         */\r\n        public String getObjectId() {\r\n            return objectId;\r\n        }\r\n\r\n        /**\r\n         * @param objectId The objectId to set to this User object.\r\n         */\r\n        public void setObjectId(String objectId) {\r\n            this.objectId = objectId;\r\n        }\r\n\r\n        /**\r\n         * @return The objectType of this User.\r\n         */\r\n        public String getObjectType() {\r\n            return objectType;\r\n        }\r\n\r\n        /**\r\n         * @param objectType The objectType to set to this User object.\r\n         */\r\n        public void setObjectType(String objectType) {\r\n            this.objectType = objectType;\r\n        }\r\n\r\n        /**\r\n         * @return The userPrincipalName of this User.\r\n         */\r\n        public String getUserPrincipalName() {\r\n            return userPrincipalName;\r\n        }\r\n\r\n        /**\r\n         * @param userPrincipalName The userPrincipalName to set to this User object.\r\n         */\r\n        public void setUserPrincipalName(String userPrincipalName) {\r\n            this.userPrincipalName = userPrincipalName;\r\n        }\r\n\r\n        /**\r\n         * @return The usageLocation of this User.\r\n         */\r\n        public String getUsageLocation() {\r\n            return usageLocation;\r\n        }\r\n\r\n        /**\r\n         * @param usageLocation The usageLocation to set to this User object.\r\n         */\r\n        public void setUsageLocation(String usageLocation) {\r\n            this.usageLocation = usageLocation;\r\n        }\r\n\r\n        /**\r\n         * @return The telephoneNumber of this User.\r\n         */\r\n        public String getTelephoneNumber() {\r\n            return telephoneNumber;\r\n        }\r\n\r\n        /**\r\n         * @param telephoneNumber The telephoneNumber to set to this User object.\r\n         */\r\n        public void setTelephoneNumber(String telephoneNumber) {\r\n            this.telephoneNumber = telephoneNumber;\r\n        }\r\n\r\n        /**\r\n         * @return The surname of this User.\r\n         */\r\n        public String getSurname() {\r\n            return surname;\r\n        }\r\n\r\n        /**\r\n         * @param surname The surname to set to this User Object.\r\n         */\r\n        public void setSurname(String surname) {\r\n            this.surname = surname;\r\n        }\r\n\r\n        /**\r\n         * @return The streetAddress of this User.\r\n         */\r\n        public String getStreetAddress() {\r\n            return streetAddress;\r\n        }\r\n\r\n        /**\r\n         * @param streetAddress The streetAddress to set to this User.\r\n         */\r\n        public void setStreetAddress(String streetAddress) {\r\n            this.streetAddress = streetAddress;\r\n        }\r\n\r\n        /**\r\n         * @return The state of this User.\r\n         */\r\n        public String getState() {\r\n            return state;\r\n        }\r\n\r\n        /**\r\n         * @param state The state to set to this User object.\r\n         */\r\n        public void setState(String state) {\r\n            this.state = state;\r\n        }\r\n\r\n        /**\r\n         * @return The preferredLanguage of this User.\r\n         */\r\n        public String getPreferredLanguage() {\r\n            return preferredLanguage;\r\n        }\r\n\r\n        /**\r\n         * @param preferredLanguage The preferredLanguage to set to this User.\r\n         */\r\n        public void setPreferredLanguage(String preferredLanguage) {\r\n            this.preferredLanguage = preferredLanguage;\r\n        }\r\n\r\n        /**\r\n         * @return The postalCode of this User.\r\n         */\r\n        public String getPostalCode() {\r\n            return postalCode;\r\n        }\r\n\r\n        /**\r\n         * @param postalCode The postalCode to set to this User.\r\n         */\r\n        public void setPostalCode(String postalCode) {\r\n            this.postalCode = postalCode;\r\n        }\r\n\r\n        /**\r\n         * @return The physicalDeliveryOfficeName of this User.\r\n         */\r\n        public String getPhysicalDeliveryOfficeName() {\r\n            return physicalDeliveryOfficeName;\r\n        }\r\n\r\n        /**\r\n         * @param physicalDeliveryOfficeName The physicalDeliveryOfficeName to set to this User Object.\r\n         */\r\n        public void setPhysicalDeliveryOfficeName(String physicalDeliveryOfficeName) {\r\n            this.physicalDeliveryOfficeName = physicalDeliveryOfficeName;\r\n        }\r\n\r\n        /**\r\n         * @return The passwordPolicies of this User.\r\n         */\r\n        public String getPasswordPolicies() {\r\n            return passwordPolicies;\r\n        }\r\n\r\n        /**\r\n         * @param passwordPolicies The passwordPolicies to set to this User object.\r\n         */\r\n        public void setPasswordPolicies(String passwordPolicies) {\r\n            this.passwordPolicies = passwordPolicies;\r\n        }\r\n\r\n        /**\r\n         * @return The mobile of this User.\r\n         */\r\n        public String getMobile() {\r\n            return mobile;\r\n        }\r\n\r\n        /**\r\n         * @param mobile The mobile to set to this User object.\r\n         */\r\n        public void setMobile(String mobile) {\r\n            this.mobile = mobile;\r\n        }\r\n\r\n        /**\r\n         * @return The Password of this User.\r\n         */\r\n        public String getPassword() {\r\n            return password;\r\n        }\r\n\r\n        /**\r\n         * @param password The mobile to set to this User object.\r\n         */\r\n        public void setPassword(String password) {\r\n            this.password = password;\r\n        }\r\n\r\n        /**\r\n         * @return The mail of this User.\r\n         */\r\n        public String getMail() {\r\n            return mail;\r\n        }\r\n\r\n        /**\r\n         * @param mail The mail to set to this User object.\r\n         */\r\n        public void setMail(String mail) {\r\n            this.mail = mail;\r\n        }\r\n\r\n        /**\r\n         * @return The MailNickname of this User.\r\n         */\r\n        public String getMailNickname() {\r\n            return mailNickname;\r\n        }\r\n\r\n        /**\r\n         * @param mail The MailNickname to set to this User object.\r\n         */\r\n        public void setMailNickname(String mailNickname) {\r\n            this.mailNickname = mailNickname;\r\n        }\r\n\r\n        /**\r\n         * @return The jobTitle of this User.\r\n         */\r\n        public String getJobTitle() {\r\n            return jobTitle;\r\n        }\r\n\r\n        /**\r\n         * @param jobTitle The jobTitle to set to this User Object.\r\n         */\r\n        public void setJobTitle(String jobTitle) {\r\n            this.jobTitle = jobTitle;\r\n        }\r\n\r\n        /**\r\n         * @return The givenName of this User.\r\n         */\r\n        public String getGivenName() {\r\n            return givenName;\r\n        }\r\n\r\n        /**\r\n         * @param givenName The givenName to set to this User.\r\n         */\r\n        public void setGivenName(String givenName) {\r\n            this.givenName = givenName;\r\n        }\r\n\r\n        /**\r\n         * @return The facsimileTelephoneNumber of this User.\r\n         */\r\n        public String getFacsimileTelephoneNumber() {\r\n            return facsimileTelephoneNumber;\r\n        }\r\n\r\n        /**\r\n         * @param facsimileTelephoneNumber The facsimileTelephoneNumber to set to this User Object.\r\n         */\r\n        public void setFacsimileTelephoneNumber(String facsimileTelephoneNumber) {\r\n            this.facsimileTelephoneNumber = facsimileTelephoneNumber;\r\n        }\r\n\r\n        /**\r\n         * @return The displayName of this User.\r\n         */\r\n        public String getDisplayName() {\r\n            return displayName;\r\n        }\r\n\r\n        /**\r\n         * @param displayName The displayName to set to this User Object.\r\n         */\r\n        public void setDisplayName(String displayName) {\r\n            this.displayName = displayName;\r\n        }\r\n\r\n        /**\r\n         * @return The dirSyncEnabled of this User.\r\n         */\r\n        public String getDirSyncEnabled() {\r\n            return dirSyncEnabled;\r\n        }\r\n\r\n        /**\r\n         * @param dirSyncEnabled The dirSyncEnabled to set to this User.\r\n         */\r\n        public void setDirSyncEnabled(String dirSyncEnabled) {\r\n            this.dirSyncEnabled = dirSyncEnabled;\r\n        }\r\n\r\n        /**\r\n         * @return The department of this User.\r\n         */\r\n        public String getDepartment() {\r\n            return department;\r\n        }\r\n\r\n        /**\r\n         * @param department The department to set to this User.\r\n         */\r\n        public void setDepartment(String department) {\r\n            this.department = department;\r\n        }\r\n\r\n        /**\r\n         * @return The lastDirSyncTime of this User.\r\n         */\r\n        public String getLastDirSyncTime() {\r\n            return lastDirSyncTime;\r\n        }\r\n\r\n        /**\r\n         * @param lastDirSyncTime The lastDirSyncTime to set to this User.\r\n         */\r\n        public void setLastDirSyncTime(String lastDirSyncTime) {\r\n            this.lastDirSyncTime = lastDirSyncTime;\r\n        }\r\n\r\n        /**\r\n         * @return The country of this User.\r\n         */\r\n        public String getCountry() {\r\n            return country;\r\n        }\r\n\r\n        /**\r\n         * @param country The country to set to this User.\r\n         */\r\n        public void setCountry(String country) {\r\n            this.country = country;\r\n        }\r\n\r\n        /**\r\n         * @return The city of this User.\r\n         */\r\n        public String getCity() {\r\n            return city;\r\n        }\r\n\r\n        /**\r\n         * @param city The city to set to this User.\r\n         */\r\n        public void setCity(String city) {\r\n            this.city = city;\r\n        }\r\n\r\n        /**\r\n         * @return The accountEnabled attribute of this User.\r\n         */\r\n        public String getAccountEnabled() {\r\n            return accountEnabled;\r\n        }\r\n\r\n        /**\r\n         * @param accountEnabled The accountEnabled to set to this User.\r\n         */\r\n        public void setAccountEnabled(String accountEnabled) {\r\n            this.accountEnabled = accountEnabled;\r\n        }\r\n\r\n        public boolean isIsDeleted() {\r\n            return this.isDeleted;\r\n        }\r\n\r\n        public void setIsDeleted(boolean isDeleted) {\r\n            this.isDeleted = isDeleted;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return new JSONObject(this).toString();\r\n        }\r\n\r\n        public String getManagerDisplayname(){\r\n            return managerDisplayname;\r\n        }\r\n\r\n        public void setManagerDisplayname(String managerDisplayname){\r\n            this.managerDisplayname = managerDisplayname;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The Class DirectReports Holds the essential data for a single DirectReport entry. Namely,\r\n     * it holds the displayName and the objectId of the direct entry. Furthermore, it provides the\r\n     * access methods to set or get the displayName and the ObjectId of this entry.\r\n     */\r\n    //class DirectReport extends User{\r\n    //\r\n    //\tprivate String displayName;\r\n    //\tprivate String objectId;\r\n    //\t \r\n    //\t/**\r\n    //\t * Two arguments Constructor for the DirectReport Class.\r\n    //\t * @param displayName\r\n    //\t * @param objectId\r\n    //\t */\r\n    //\tpublic DirectReport(String displayName, String objectId){\r\n    //\t\tthis.displayName = displayName;\r\n    //\t\tthis.objectId = objectId;\r\n    //\t}\r\n    //\r\n    //\t/**\r\n    //\t * @return The diaplayName of this direct report entry.\r\n    //\t */\r\n    //\tpublic String getDisplayName() {\r\n    //\t\treturn displayName;\r\n    //\t}\r\n    //\r\n    //\t\r\n    //\t/**\r\n    //\t *  @return The objectId of this direct report entry. \r\n    //\t */\r\n    //\tpublic String getObjectId() {\r\n    //\t\treturn objectId;\r\n    //\t}\r\n    //\r\n    //}\r\n    ```\r\n\r\n## 步骤 7：创建身份验证模型和控制器文件（适用于 BasicFilter）\r\nJava 确实可能比较冗长，但就快完成了。在编写用于处理请求的 BasicFilter servlet 之前，需要再编写一些 ADAL4J 所需的帮助器文件。\r\n\r\n1. 创建名为 AuthHelper.java 的文件，该文件提供用于确定已登录用户状态的方法。方法包括：\r\n\r\n - **isAuthenticated()**：返回用户是否登录。\r\n - **containsAuthenticationData()**：返回令牌是否具有数据。\r\n - **isAuthenticationSuccessful()**：返回用户身份验证是否成功。\r\n\r\n     若要创建 AuthHelper.java 文件，请粘贴以下代码：\r\n\r\n    ```Java\r\n    package com.microsoft.aad.adal4jsample;\r\n\r\n    import java.util.Map;\r\n\r\n    import javax.servlet.http.HttpServletRequest;\r\n\r\n    import com.microsoft.aad.adal4j.AuthenticationResult;\r\n    import com.nimbusds.openid.connect.sdk.AuthenticationResponse;\r\n    import com.nimbusds.openid.connect.sdk.AuthenticationResponseParser;\r\n    import com.nimbusds.openid.connect.sdk.AuthenticationSuccessResponse;\r\n\r\n    public final class AuthHelper {\r\n\r\n        public static final String PRINCIPAL_SESSION_NAME = \"principal\";\r\n\r\n        private AuthHelper() {\r\n        }\r\n\r\n        public static boolean isAuthenticated(HttpServletRequest request) {\r\n            return request.getSession().getAttribute(PRINCIPAL_SESSION_NAME) != null;\r\n        }\r\n\r\n        public static AuthenticationResult getAuthSessionObject(\r\n                HttpServletRequest request) {\r\n            return (AuthenticationResult) request.getSession().getAttribute(\r\n                    PRINCIPAL_SESSION_NAME);\r\n        }\r\n\r\n        public static boolean containsAuthenticationData(\r\n                HttpServletRequest httpRequest) {\r\n            Map<String, String[]> map = httpRequest.getParameterMap();\r\n            return httpRequest.getMethod().equalsIgnoreCase(\"POST\") && (httpRequest.getParameterMap().containsKey(\r\n                            AuthParameterNames.ERROR)\r\n                            || httpRequest.getParameterMap().containsKey(\r\n                                    AuthParameterNames.ID_TOKEN) || httpRequest\r\n                            .getParameterMap().containsKey(AuthParameterNames.CODE));\r\n        }\r\n\r\n        public static boolean isAuthenticationSuccessful(\r\n                AuthenticationResponse authResponse) {\r\n            return authResponse instanceof AuthenticationSuccessResponse;\r\n        }\r\n    }\r\n    ```\r\n\r\n2. 创建名为 AuthParameterNames.java 的文件，该文件提供 ADAL4J 所需的某些不可变变量。若要创建该文件，请粘贴以下代码：\r\n\r\n    ```Java\r\n    package com.microsoft.aad.adal4jsample;\r\n\r\n    public final class AuthParameterNames {\r\n\r\n        private AuthParameterNames() {\r\n        }\r\n\r\n        public static String ERROR = \"error\";\r\n        public static String ERROR_DESCRIPTION = \"error_description\";\r\n        public static String ERROR_URI = \"error_uri\";\r\n        public static String ID_TOKEN = \"id_token\";\r\n        public static String CODE = \"code\";\r\n    }\r\n    ```\r\n\r\n3. 创建名为 AadController.java 的文件，该文件是 MVC 模式的控制器。该文件提供 JSP 控制器，并公开应用的 secure/aad URL 终结点。该文件还包括图形查询。若要创建该文件，请粘贴以下代码：\r\n\r\n    ```Java\r\n    package com.microsoft.aad.adal4jsample;\r\n\r\n    import java.net.HttpURLConnection;\r\n    import java.net.URL;\r\n\r\n    import javax.servlet.http.HttpServletRequest;\r\n    import javax.servlet.http.HttpSession;\r\n\r\n    import org.json.JSONArray;\r\n    import org.json.JSONObject;\r\n    import org.springframework.stereotype.Controller;\r\n    import org.springframework.ui.ModelMap;\r\n    import org.springframework.web.bind.annotation.RequestMapping;\r\n    import org.springframework.web.bind.annotation.RequestMethod;\r\n\r\n    import com.microsoft.aad.adal4j.AuthenticationResult;\r\n\r\n    @Controller\r\n    @RequestMapping(\"/secure/aad\")\r\n    public class AadController {\r\n\r\n        @RequestMapping(method = { RequestMethod.GET, RequestMethod.POST })\r\n        public String getDirectoryObjects(ModelMap model, HttpServletRequest httpRequest) {\r\n            HttpSession session = httpRequest.getSession();\r\n            AuthenticationResult result = (AuthenticationResult) session.getAttribute(AuthHelper.PRINCIPAL_SESSION_NAME);\r\n            if (result == null) {\r\n                model.addAttribute(\"error\", new Exception(\"AuthenticationResult not found in session.\"));\r\n                return \"/error\";\r\n            } else {\r\n                String data;\r\n                try {\r\n                    data = this.getUsernamesFromGraph(result.getAccessToken(), session.getServletContext()\r\n                            .getInitParameter(\"tenant\"));\r\n                    model.addAttribute(\"users\", data);\r\n                } catch (Exception e) {\r\n                    model.addAttribute(\"error\", e);\r\n                    return \"/error\";\r\n                }\r\n            }\r\n            return \"/secure/aad\";\r\n        }\r\n\r\n        private String getUsernamesFromGraph(String accessToken, String tenant) throws Exception {\r\n            URL url = new URL(String.format(\"https://graph.chinacloudapi.cn/%s/users?api-version=2013-04-05\", tenant,\r\n                    accessToken));\r\n\r\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\r\n            // Set the appropriate header fields in the request header.\r\n            conn.setRequestProperty(\"api-version\", \"2013-04-05\");\r\n            conn.setRequestProperty(\"Authorization\", accessToken);\r\n            conn.setRequestProperty(\"Accept\", \"application/json;odata=minimalmetadata\");\r\n            String goodRespStr = HttpClientHelper.getResponseStringFromConn(conn, true);\r\n            // logger.info(\"goodRespStr ->\" + goodRespStr);\r\n            int responseCode = conn.getResponseCode();\r\n            JSONObject response = HttpClientHelper.processGoodRespStr(responseCode, goodRespStr);\r\n            JSONArray users = new JSONArray();\r\n\r\n            users = JSONHelper.fetchDirectoryObjectJSONArray(response);\r\n\r\n            StringBuilder builder = new StringBuilder();\r\n            User user = null;\r\n            for (int i = 0; i < users.length(); i++) {\r\n                JSONObject thisUserJSONObject = users.optJSONObject(i);\r\n                user = new User();\r\n                JSONHelper.convertJSONObjectToDirectoryObject(thisUserJSONObject, user);\r\n                builder.append(user.getUserPrincipalName() + \"<br/>\");\r\n            }\r\n            return builder.toString();\r\n        }\r\n\r\n    }\r\n    ```\r\n\r\n## 步骤 8：创建 BasicFilter 文件（适用于 BasicFilter MVC）\r\n现在可以创建 BasicFilter.java 文件，它处理来自 JSP 视图文件的请求。若要创建该文件，请粘贴以下代码：\r\n\r\n```Java\r\npackage com.microsoft.aad.adal4jsample;\r\n\r\nimport java.io.IOException;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.net.URI;\r\nimport java.net.URLEncoder;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.UUID;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\nimport javax.naming.ServiceUnavailableException;\r\nimport javax.servlet.Filter;\r\nimport javax.servlet.FilterChain;\r\nimport javax.servlet.FilterConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.ServletRequest;\r\nimport javax.servlet.ServletResponse;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport com.microsoft.aad.adal4j.AuthenticationContext;\r\nimport com.microsoft.aad.adal4j.AuthenticationResult;\r\nimport com.microsoft.aad.adal4j.ClientCredential;\r\nimport com.nimbusds.oauth2.sdk.AuthorizationCode;\r\nimport com.nimbusds.openid.connect.sdk.AuthenticationErrorResponse;\r\nimport com.nimbusds.openid.connect.sdk.AuthenticationResponse;\r\nimport com.nimbusds.openid.connect.sdk.AuthenticationResponseParser;\r\nimport com.nimbusds.openid.connect.sdk.AuthenticationSuccessResponse;\r\n\r\npublic class BasicFilter implements Filter {\r\n\r\n    private String clientId = \"\";\r\n    private String clientSecret = \"\";\r\n    private String tenant = \"\";\r\n    private String authority;\r\n\r\n    public void destroy() {\r\n\r\n    }\r\n\r\n    public void doFilter(ServletRequest request, ServletResponse response,\r\n            FilterChain chain) throws IOException, ServletException {\r\n\r\n        if (request instanceof HttpServletRequest) {\r\n            HttpServletRequest httpRequest = (HttpServletRequest) request;\r\n            HttpServletResponse httpResponse = (HttpServletResponse) response;\r\n            try {\r\n\r\n                String currentUri = request.getScheme()\r\n                        + \"://\"\r\n                        + request.getServerName()\r\n                        + (\"http\".equals(request.getScheme())\r\n                                && request.getServerPort() == 80\r\n                                || \"https\".equals(request.getScheme())\r\n                                && request.getServerPort() == 443 ? \"\" : \":\"\r\n                                + request.getServerPort())\r\n                        + httpRequest.getRequestURI();\r\n                String fullUrl = currentUri\r\n                        + (httpRequest.getQueryString() != null ? \"?\"\r\n                                + httpRequest.getQueryString() : \"\");\r\n                // check if user has a session\r\n                if (!AuthHelper.isAuthenticated(httpRequest)) {\r\n                    if (AuthHelper.containsAuthenticationData(httpRequest)) {\r\n                        Map<String, String> params = new HashMap<String, String>();\r\n                        for (String key : request.getParameterMap().keySet()) {\r\n                            params.put(key,\r\n                                    request.getParameterMap().get(key)[0]);\r\n                        }\r\n                        AuthenticationResponse authResponse = AuthenticationResponseParser\r\n                                .parse(new URI(fullUrl), params);\r\n                        if (AuthHelper.isAuthenticationSuccessful(authResponse)) {\r\n\r\n                            AuthenticationSuccessResponse oidcResponse = (AuthenticationSuccessResponse) authResponse;\r\n                            AuthenticationResult result = getAccessToken(\r\n                                    oidcResponse.getAuthorizationCode(),\r\n                                    currentUri);\r\n                            createSessionPrincipal(httpRequest, result);\r\n                        } else {\r\n                            AuthenticationErrorResponse oidcResponse = (AuthenticationErrorResponse) authResponse;\r\n                            throw new Exception(String.format(\r\n                                    \"Request for auth code failed: %s - %s\",\r\n                                    oidcResponse.getErrorObject().getCode(),\r\n                                    oidcResponse.getErrorObject()\r\n                                            .getDescription()));\r\n                        }\r\n                    } else {\r\n                            // not authenticated\r\n                            httpResponse.setStatus(302);\r\n                            httpResponse\r\n                                    .sendRedirect(getRedirectUrl(currentUri));\r\n                            return;\r\n                    }\r\n                } else {\r\n                    // if authenticated, how to check for valid session?\r\n                    AuthenticationResult result = AuthHelper\r\n                            .getAuthSessionObject(httpRequest);\r\n\r\n                    if (httpRequest.getParameter(\"refresh\") != null) {\r\n                        result = getAccessTokenFromRefreshToken(\r\n                                result.getRefreshToken(), currentUri);\r\n                    } else {\r\n                        if (httpRequest.getParameter(\"cc\") != null) {\r\n                            result = getAccessTokenFromClientCredentials();\r\n                        } else {\r\n                            if (result.getExpiresOnDate().before(new Date())) {\r\n                                result = getAccessTokenFromRefreshToken(\r\n                                        result.getRefreshToken(), currentUri);\r\n                            }\r\n                        }\r\n                    }\r\n                    createSessionPrincipal(httpRequest, result);\r\n                }\r\n            } catch (Throwable exc) {\r\n                httpResponse.setStatus(500);\r\n                request.setAttribute(\"error\", exc.getMessage());\r\n                httpResponse.sendRedirect(((HttpServletRequest) request)\r\n                        .getContextPath() + \"/error.jsp\");\r\n            }\r\n        }\r\n        chain.doFilter(request, response);\r\n    }\r\n\r\n    private AuthenticationResult getAccessTokenFromClientCredentials()\r\n            throws Throwable {\r\n        AuthenticationContext context = null;\r\n        AuthenticationResult result = null;\r\n        ExecutorService service = null;\r\n        try {\r\n            service = Executors.newFixedThreadPool(1);\r\n            context = new AuthenticationContext(authority + tenant + \"/\", true,\r\n                    service);\r\n            Future<AuthenticationResult> future = context.acquireToken(\r\n                    \"https://graph.chinacloudapi.cn\", new ClientCredential(clientId,\r\n                            clientSecret), null);\r\n            result = future.get();\r\n        } catch (ExecutionException e) {\r\n            throw e.getCause();\r\n        } finally {\r\n            service.shutdown();\r\n        }\r\n\r\n        if (result == null) {\r\n            throw new ServiceUnavailableException(\r\n                    \"authentication result was null\");\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private AuthenticationResult getAccessTokenFromRefreshToken(\r\n            String refreshToken, String currentUri) throws Throwable {\r\n        AuthenticationContext context = null;\r\n        AuthenticationResult result = null;\r\n        ExecutorService service = null;\r\n        try {\r\n            service = Executors.newFixedThreadPool(1);\r\n            context = new AuthenticationContext(authority + tenant + \"/\", true,\r\n                    service);\r\n            Future<AuthenticationResult> future = context\r\n                    .acquireTokenByRefreshToken(refreshToken,\r\n                            new ClientCredential(clientId, clientSecret), null,\r\n                            null);\r\n            result = future.get();\r\n        } catch (ExecutionException e) {\r\n            throw e.getCause();\r\n        } finally {\r\n            service.shutdown();\r\n        }\r\n\r\n        if (result == null) {\r\n            throw new ServiceUnavailableException(\r\n                    \"authentication result was null\");\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n    private AuthenticationResult getAccessToken(\r\n            AuthorizationCode authorizationCode, String currentUri)\r\n            throws Throwable {\r\n        String authCode = authorizationCode.getValue();\r\n        ClientCredential credential = new ClientCredential(clientId,\r\n                clientSecret);\r\n        AuthenticationContext context = null;\r\n        AuthenticationResult result = null;\r\n        ExecutorService service = null;\r\n        try {\r\n            service = Executors.newFixedThreadPool(1);\r\n            context = new AuthenticationContext(authority + tenant + \"/\", true,\r\n                    service);\r\n            Future<AuthenticationResult> future = context\r\n                    .acquireTokenByAuthorizationCode(authCode, new URI(\r\n                            currentUri), credential, null);\r\n            result = future.get();\r\n        } catch (ExecutionException e) {\r\n            throw e.getCause();\r\n        } finally {\r\n            service.shutdown();\r\n        }\r\n\r\n        if (result == null) {\r\n            throw new ServiceUnavailableException(\r\n                    \"authentication result was null\");\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private void createSessionPrincipal(HttpServletRequest httpRequest,\r\n            AuthenticationResult result) throws Exception {\r\n        httpRequest.getSession().setAttribute(\r\n                AuthHelper.PRINCIPAL_SESSION_NAME, result);\r\n    }\r\n\r\n    private String getRedirectUrl(String currentUri)\r\n            throws UnsupportedEncodingException {\r\n        String redirectUrl = authority\r\n                + this.tenant\r\n                + \"/oauth2/authorize?response_type=code%20id_token&scope=openid&response_mode=form_post&redirect_uri=\"\r\n                + URLEncoder.encode(currentUri, \"UTF-8\") + \"&client_id=\"\r\n                + clientId + \"&resource=https%3a%2f%2fgraph.chinacloudapi.cn\"\r\n                + \"&nonce=\" + UUID.randomUUID() + \"&site_id=500879\";\r\n        return redirectUrl;\r\n    }\r\n\r\n    public void init(FilterConfig config) throws ServletException {\r\n        clientId = config.getInitParameter(\"client_id\");\r\n        authority = config.getServletContext().getInitParameter(\"authority\");\r\n        tenant = config.getServletContext().getInitParameter(\"tenant\");\r\n        clientSecret = config.getInitParameter(\"secret_key\");\r\n    }\r\n\r\n}\r\n```\r\n\r\n此 servlet 公开 ADAL4J 预期应用会运行的所有方法。方法包括：\r\n\r\n- **getAccessTokenFromClientCredentials()**：从密钥中获取访问令牌。\r\n- **getAccessTokenFromRefreshToken()**：从刷新令牌中获取访问令牌。\r\n- **getAccessToken()**：从所使用的 OpenID Connect 流中获取访问令牌。\r\n- **createSessionPrincipal()**：创建用于图形 API 访问的会话主体。\r\n- **getRedirectUrl()**：获取 redirectURL，以将它与在门户中输入的值进行比较。\r\n\r\n## 步骤 9：在 Tomcat 中编译并运行示例\r\n\r\n1. 更改为根目录。\r\n2. 若要生成刚才通过使用 `maven` 组合成的示例，请运行以下命令：\r\n\r\n    `$ mvn package`  \r\n\r\n 此命令使用为依赖项编写的 pom.xml 文件。\r\n\r\n现在，/targets 目录中应具有 adal4jsample.war 文件。可以在 Tomcat 容器中部署该文件并访问 http://localhost:8080/adal4jsample/ URL。\r\n\r\n> [!NOTE]\r\n可使用最新的 Tomcat 服务器轻松部署 .war 文件。转到 http://localhost:8080/manager/ ，并按照相关说明上传 adal4jsample.war 文件。它会为你自动部署正确的终结点。\r\n\r\n## 后续步骤\r\n现在，已创建一个有效的 Java 应用，它可以对用户进行身份验证，使用 OAuth 2.0 安全调用 Web API，并获取有关用户的基本信息。如果尚未将用户填充到租户，现在正是执行此操作的最佳时机。\r\n\r\n如需更多参考信息，可以使用以下两种方法之一获取已完成的示例（无需配置值）：\r\n\r\n- 将其下载为 [.zip 文件](https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect/archive/complete.zip)。\r\n- 通过输入以下命令，从 GitHub 克隆文件：\r\n\r\n    git clone --branch complete https://github.com/Azure-Samples/active-directory-java-webapp-openidconnect.git\r\n\r\n<!---HONumber=Mooncake_0306_2017-->\r\n<!---Update_Description: wording update -->"}