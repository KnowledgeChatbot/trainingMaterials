{"Title":"如何自动化添加默认用户代理权限","Description":"如何自动化添加默认用户代理权限","Content":"# 如何自动化添加默认用户代理权限\r\n\r\n在认证链的场景中，最简单的一种是用户登录 Web Client，而 Web Client 代表用户去访问 Web API，然后返回结果显示。如果使用 AAD 来实现，我们得这么做：\r\n\r\n1. 将 Web Client 和 Web API 都注册在同一个租户里面。\r\n2. 配置 Web API 公开最基本的用户代理权限（user_impersonation）。\r\n3. 赋予 Web Client 访问 Web API 的用户代理权限。\r\n\r\n其中让用户感觉比较痛苦的是第二步，因为其他两步可以通过 UI 界面操作或者简单 PowerShell 命令就可以完成，但第二步需要去下载 Manifest，然后添加 oauth2Permissions 这个元素，再上传。所以我们首先需要了解什么是 [oauth2Permissions](https://msdn.microsoft.com/Library/Azure/Ad/Graph/api/entity-and-complex-type-reference#oauth2permission-type)？ 还得担心有没有写错，毕竟手写 Json 文件是很容易出错的。当然，考虑到 user_impersonation 是个最普遍常用的权限，最好是服务端能默认自动创建。好消息是微软已经这么做了，但坏消息是中国区暂时还没有部署到，那么在这之前，我们有什么好的办法来自动添加这个默认的用户代理权限呢？\r\n\r\n是的，我们可以用 PowerShell 来自动化这个过程。\r\n\r\n此处提供两种方案，一种是使用 [Azure AD PowerShell 模块](https://docs.microsoft.com/en-us/powershell/module/azuread/?view=azureadps-2.0)，但需要额外下载，因为它是独立的，没有内置在 Azure PowerShell 里面；另一种是用 PowerShell 来调用 [AAD Graph API](https://docs.azure.cn/zh-cn/active-directory/develop/active-directory-graph-api)。请参考以下脚本：\r\n\r\n## 方法一：使用 Azure AD PowerShell 模块\r\n\r\n```PowerShell\r\nparam (\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$DisplayName,\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$HomePage,\r\n    [Parameter(Mandatory=$true)]\r\n    [string[]]$IdentifierUris,\r\n    [Parameter(Mandatory=$true)]\r\n    [string[]]$ReplyUrls,\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$Password\r\n)\r\n\r\n# use below command to install AzureAD module if needed\r\n#Install-Module AzureAD\r\n\r\nConnect-AzureAD -AzureEnvironmentName AzureChinaCloud | Out-Null\r\n\r\n$defaultOAuth2Permission = [Microsoft.Open.AzureAD.Model.OAuth2Permission]::new()\r\n$defaultOAuth2Permission.AdminConsentDescription = \"Allow the application to access $DisplayName on behalf of the signed-in user.\"\r\n$defaultOAuth2Permission.AdminConsentDisplayName = \"Access $DisplayName\"\r\n$defaultOAuth2Permission.Id = New-Guid\r\n$defaultOAuth2Permission.IsEnabled = $true\r\n$defaultOAuth2Permission.Type = \"User\"\r\n$defaultOAuth2Permission.UserConsentDescription = \"Allow the application to access $DisplayName on your behalf.\"\r\n$defaultOAuth2Permission.UserConsentDisplayName = \"Access $DisplayName\"\r\n$defaultOAuth2Permission.Value = \"user_impersonation\"\r\n\r\n$newAadApp = New-AzureADApplication -DisplayName $DisplayName -Homepage $HomePage -IdentifierUris $IdentifierUris -ReplyUrls $ReplyUrls -Oauth2Permissions @($defaultOAuth2Permission)\r\n$appId = $newAadApp.AppId\r\n\r\n# create client secret with provided password\r\nNew-AzureADApplicationPasswordCredential -ObjectId ($newAadApp.ObjectId) -Value $Password | Out-Null\r\n\r\n$newSp = New-AzureADServicePrincipal -AppId $appId -Tags @(\"WindowsAzureActiveDirectoryIntegratedApp\") -AccountEnabled $true\r\n$spId = $newSp.ObjectId\r\n\r\n# output\r\nWrite-Host \"\"\r\nWrite-Host \"Client Name:         $DisplayName\" -ForegroundColor Green\r\nWrite-Host \"Client Id:           $appId\" -ForegroundColor Green\r\nWrite-Host \"Client Secret:       $Password\" -ForegroundColor Green\r\nWrite-Host \"ServicePrincipal Id: $spId\" -ForegroundColor Green \r\n```\r\n\r\n脚本中最关键的地方就是创建了 `user_impersonation` 这个 oauth2Permission 对象，并添加在应用程序对象里面。另外需要注意的是，除了创建应用程序对象之外，脚本中还一起创建了对应的服务主体对象，关于两者之间的关系，请查看[Azure Active Directory (Azure AD) 中的应用程序对象和服务主体对象](https://docs.azure.cn/zh-cn/active-directory/develop/active-directory-application-objects?toc=%2factive-directory%2fdevelop%2ftoc.json)。而且我们还给服务主体对象加了标签 “WindowsAzureActiveDirectoryIntegratedApp”，这是必须的，否则无法作为资源被其他应用访问。\r\n\r\n运行示例如下，验证结果可以通过门户网站上去下载 manifest 查看 oauth2Permission 的配置。\r\n\r\n![powershell-result-1](media/aog-active-directory-howto-automate-add-user-agent-permisson/powershell-result-1.png)\r\n\r\n## 方法二：用 PowerShell 来调用 AAD Graph API\r\n\r\n```PowerShell\r\nparam (\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$TenantId,\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$DisplayName,\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$HomePage,\r\n    [Parameter(Mandatory=$true)]\r\n    [string[]]$IdentifierUris,\r\n    [Parameter(Mandatory=$true)]\r\n    [string[]]$ReplyUrls,\r\n    [Parameter(Mandatory=$true)]\r\n    [string]$Password,\r\n    [bool]$IsMooncake = $true\r\n)\r\n\r\nfunction Get-AuthToken\r\n{\r\n       param\r\n       (\r\n              [Parameter(Mandatory=$true)]\r\n              [string]$TenantId,\r\n              [bool]$IsMooncake\r\n       )\r\n\r\n       $adal = \"${env:ProgramFiles(x86)}\\Microsoft SDKs\\Azure\\PowerShell\\ServiceManagement\\Azure\\Services\\Microsoft.IdentityModel.Clients.ActiveDirectory.dll\"\r\n       $adalforms = \"${env:ProgramFiles(x86)}\\Microsoft SDKs\\Azure\\PowerShell\\ServiceManagement\\Azure\\Services\\Microsoft.IdentityModel.Clients.ActiveDirectory.WindowsForms.dll\"\r\n       [System.Reflection.Assembly]::LoadFrom($adal) | Out-Null\r\n       [System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null\r\n\r\n       $clientId = \"1950a258-227b-4e31-a9cf-717495945fc2\" \r\n       $redirectUri = [System.Uri]::new(\"urn:ietf:wg:oauth:2.0:oob\")\r\n       $resourceUri = \"https://graph.windows.net/\"\r\n       $aadInstance = \"https://login.windows.net\"\r\n\r\n       if($IsMooncake) {\r\n            $resourceUri = \"https://graph.chinacloudapi.cn/\"\r\n            $aadInstance = \"https://login.chinacloudapi.cn\"\r\n       }\r\n\r\n       $authority = \"$aadInstance/$TenantId\"\r\n       $authContext = New-Object \"Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext\" -ArgumentList $authority\r\n       $promptBehavior = [Microsoft.IdentityModel.Clients.ActiveDirectory.PromptBehavior]::Auto\r\n       $platformParameter = New-Object \"Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters\" -ArgumentList $promptBehavior\r\n       $authResult = $authContext.AcquireTokenAsync($resourceUri, $clientId, $redirectUri, $platformParameter).Result\r\n       return $authResult.AccessToken\r\n}\r\n\r\n$accessToken = Get-AuthToken $TenantId $IsMooncake\r\n\r\n$headers = @{\r\n    'Content-Type'='application/json';\r\n    'Authorization'=\"Bearer $accessToken\"\r\n}\r\n\r\n$passwordCred = @{\r\n    'keyId'= New-Guid;\r\n    'endDate'=[DateTime]::UtcNow.AddYears(1).ToString('u').Replace(' ', 'T');    \r\n    'startDate'=[DateTime]::UtcNow.ToString('u').Replace(' ', 'T');  \r\n    'value'=$Password\r\n}\r\n\r\n$oauth2Permission = @{\r\n    \"adminConsentDescription\" = \"Allow the application to access $DisplayName on behalf of the signed-in user.\";\r\n    \"adminConsentDisplayName\" = \"Access $DisplayName\";\r\n    \"id\" = New-Guid;\r\n    \"isEnabled\" =  $true;\r\n    \"type\" = \"User\";\r\n    \"userConsentDescription\" = \"Allow the application to access $DisplayName on your behalf.\";\r\n    \"userConsentDisplayName\" = \"Access $DisplayName\";\r\n    \"value\" = \"user_impersonation\"\r\n}\r\n\r\n$payload = @{\r\n    'displayName' = $DisplayName;\r\n    'homepage'= $HomePage;\r\n    'identifierUris'= $IdentifierUris;\r\n    'replyUrls'= $ReplyUrls;\r\n    'passwordCredentials'= @($passwordCred);\r\n    'oauth2Permissions' = @($oauth2Permission)\r\n}\r\n$payloadJson = ConvertTo-Json $payload\r\n$resourceBaseUri = \"https://graph.windows.net\"\r\nif($IsMooncake) {\r\n    $resourceBaseUri = \"https://graph.chinacloudapi.cn\"\r\n}\r\n$requestUri = \"$resourceBaseUri/$TenantId/applications?api-version=1.6\"\r\n$result = Invoke-RestMethod -Uri $requestUri -Headers $headers -Body $payloadJson -Method POST\r\n$appId = $result.appId\r\n\r\n$spPayload = @{\r\n    'appId' = $appId;\r\n    'accountEnabled'= $true;\r\n    'tags'= @(\"WindowsAzureActiveDirectoryIntegratedApp\")\r\n}\r\n$spPayloadJson = ConvertTo-Json $spPayload\r\n$spRequestUri = \"$resourceBaseUri/$TenantId/servicePrincipals?api-version=1.6\"\r\n$spResult = Invoke-RestMethod -Uri $spRequestUri -Headers $headers -Body $spPayloadJson -Method POST\r\n$spId = $spResult.objectId\r\n\r\n# output\r\nWrite-Host \"\"\r\nWrite-Host \"Client Name:         $DisplayName\" -ForegroundColor Green\r\nWrite-Host \"Client Id:           $appId\" -ForegroundColor Green\r\nWrite-Host \"Client Secret:       $Password\" -ForegroundColor Green\r\nWrite-Host \"ServicePrincipal Id: $spId\" -ForegroundColor Green\r\n```\r\n\r\n这个脚本也做了同样的事情，创建应用程序对象，设置 user_impersonation 默认权限，创建带有特定标签的服务主体对象，只不过是通过调用 AAD Graph API 来做到的。更多 AAD Graph API 的详细信息，可查看[Azure Active Directory 图形 API](https://docs.azure.cn/zh-cn/active-directory/develop/active-directory-graph-api)。\r\n使用示例如下，验证结果可以通过门户网站上去下载 manifest 查看 oauth2Permission 的配置。\r\n\r\n![powershell-result-2](media/aog-active-directory-howto-automate-add-user-agent-permisson/powershell-result-2.png)\r\n\r\n更多 PowerShell 自动化内容，可参考我的[博客](https://school.azure.cn/blog/477)。"}