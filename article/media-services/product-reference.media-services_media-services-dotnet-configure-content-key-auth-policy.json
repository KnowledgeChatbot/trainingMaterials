{"Title":"使用媒体服务 .NET SDK 配置内容密钥授权策略","Description":"了解如何使用适用于 .NET 的媒体服务 SDK 配置内容密钥的授权策略。","Content":"# <a name=\"dynamic-encryption-configure-content-key-authorization-policy\"></a>动态加密：配置内容密钥授权策略\r\n\r\n[!INCLUDE [media-services-selector-content-key-auth-policy](../../includes/media-services-selector-content-key-auth-policy.md)] \r\n\r\n## <a name=\"overview\"></a>概述\r\nAzure 媒体服务允许传送受高级加密标准 (AES)（使用 128 位加密密钥）或受 [Microsoft PlayReady DRM](https://www.microsoft.com/playready/overview/) 保护的 MPEG-DASH 流、平滑流式处理流和 HTTP-Live-Streaming (HLS) 流。 PlayReady 是按通用加密 (ISO/IEC 23001-7 CENC) 规范加密的。 \r\n\r\n媒体服务还提供了一个密钥/许可证传送服务，客户端可从中获取 AES 密钥或 PlayReady 许可证，以用于播放加密的内容。 \r\n\r\n如果希望媒体服务加密资产，需要将加密密钥（CommonEncryption 或 EnvelopeEncryption）与资产相关联（如[此处](media-services-dotnet-create-contentkey.md)所述），并配置密钥授权策略（如本文所述）。\r\n\r\n播放器请求流时，媒体服务会使用指定的密钥通过 AES 或 DRM 加密来动态加密内容。 为了解密流，播放器会从密钥传送服务请求密钥。 为了确定用户是否有权获取密钥，服务会评估为密钥指定的授权策略。\r\n\r\n媒体服务支持通过多种方式对发出密钥请求的用户进行身份验证。 内容密钥授权策略可能受到一种或多种授权限制：开放或令牌限制。 令牌限制策略必须附带由安全令牌服务 (STS) 颁发的令牌。 媒体服务支持采用**简单 Web 令牌** ([SWT](https://msdn.microsoft.com/library/gg185950.aspx#BKMK_2)) 格式和 **JSON Web 令牌** ([JWT](https://msdn.microsoft.com/library/gg185950.aspx#BKMK_3)) 格式的令牌。\r\n\r\n媒体服务不提供安全令牌服务。 可以创建自定义 STS 或利用 Microsoft Azure ACS 颁发令牌。 必须将 STS 配置为创建令牌，该令牌使用指定密钥以及你在令牌限制配置中指定的颁发声明进行签名（如本文所述）。 如果令牌有效，而且令牌中的声明与为内容密钥配置的声明相匹配，则媒体服务密钥传送服务会将加密密钥返回到客户端。\r\n\r\n有关详细信息，请参阅 \r\n\r\n[JWT 令牌身份验证](http://www.gtrifonov.com/2015/01/03/jwt-token-authentication-in-azure-media-services-and-dynamic-encryption/)\r\n\r\n[将基于 Azure 媒体服务 OWIN MVC 的应用与 Azure Active Directory 相集成，并基于 JWT 声明限制内容密钥传送](http://www.gtrifonov.com/2015/01/24/mvc-owin-azure-media-services-ad-integration/)。\r\n\r\n[使用 Azure ACS 颁发令牌](http://mingfeiy.com/acs-with-key-services)。\r\n\r\n### <a name=\"some-considerations-apply\"></a>请注意以下事项：\r\n* 创建 AMS 帐户后，会将一个处于“已停止”状态的默认流式处理终结点添加到帐户。 若要开始流式传输内容并利用动态打包和动态加密，流式处理终结点必须处于“正在运行”状态。 \r\n* 资产必须包含一组自适应比特率 MP4 或自适应比特率平滑流式处理文件。 有关详细信息，请参阅[对资产进行编码](media-services-encode-asset.md)。\r\n* 使用 **AssetCreationOptions.StorageEncrypted** 选项上传资产并对其进行编码。\r\n* 如果打算创建需要相同策略配置的多个内容密钥，我们强烈建议创建单个授权策略，并将其重复用于多个内容密钥。\r\n* 密钥传送服务将 ContentKeyAuthorizationPolicy 及其相关对象（策略选项和限制）缓存 15 分钟。  如果创建 ContentKeyAuthorizationPolicy 并指定使用“令牌”限制，并对其进行测试，再将策略更新为“开放”限制，则现有策略切换到“开放”版本的策略需要大约 15 分钟。\r\n* 如果添加或更新资产的传送策略，则必须删除现有定位符（如果有）并创建新定位符。\r\n* 目前，无法加密渐进式下载。\r\n\r\n## <a name=\"aes-128-dynamic-encryption\"></a>AES-128 动态加密\r\n### <a name=\"open-restriction\"></a>开放限制\r\n开放限制意味着系统会将密钥传送到发出密钥请求的任何用户。 此限制可能适用于测试用途。\r\n\r\n以下示例创建开放授权策略，并将其添加到内容密钥。\r\n\r\n    static public void AddOpenAuthorizationPolicy(IContentKey contentKey)\r\n    {\r\n        // Create ContentKeyAuthorizationPolicy with Open restrictions\r\n        // and create authorization policy\r\n        IContentKeyAuthorizationPolicy policy = _context.\r\n        ContentKeyAuthorizationPolicies.\r\n        CreateAsync(\"Open Authorization Policy\").Result;\r\n        \r\n        List<ContentKeyAuthorizationPolicyRestriction> restrictions =\r\n            new List<ContentKeyAuthorizationPolicyRestriction>();\r\n\r\n        ContentKeyAuthorizationPolicyRestriction restriction =\r\n            new ContentKeyAuthorizationPolicyRestriction\r\n            {\r\n                Name = \"HLS Open Authorization Policy\",\r\n                KeyRestrictionType = (int)ContentKeyRestrictionType.Open,\r\n                Requirements = null // no requirements needed for HLS\r\n            };\r\n\r\n        restrictions.Add(restriction);\r\n\r\n        IContentKeyAuthorizationPolicyOption policyOption =\r\n            _context.ContentKeyAuthorizationPolicyOptions.Create(\r\n            \"policy\", \r\n            ContentKeyDeliveryType.BaselineHttp, \r\n            restrictions, \r\n            \"\");\r\n\r\n        policy.Options.Add(policyOption);\r\n\r\n        // Add ContentKeyAutorizationPolicy to ContentKey\r\n        contentKey.AuthorizationPolicyId = policy.Id;\r\n        IContentKey updatedKey = contentKey.UpdateAsync().Result;\r\n        Console.WriteLine(\"Adding Key to Asset: Key ID is \" + updatedKey.Id);\r\n    }\r\n\r\n\r\n### <a name=\"token-restriction\"></a>令牌限制\r\n本部分介绍如何创建内容密钥授权策略，以及如何将其与内容密钥相关联。 授权策略描述了必须达到什么授权要求才能确定用户是否有权接收密钥（例如，“验证密钥”列表是否包含令牌签名时使用的密钥）。\r\n\r\n要配置令牌限制选项，需要使用 XML 描述令牌的授权要求。 令牌限制配置 XML 必须符合以下 XML 架构。\r\n\r\n#### <a id=\"schema\"></a>令牌限制架构\r\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <xs:schema xmlns:tns=\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\" elementFormDefault=\"qualified\" targetNamespace=\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n      <xs:complexType name=\"TokenClaim\">\r\n        <xs:sequence>\r\n          <xs:element name=\"ClaimType\" nillable=\"true\" type=\"xs:string\" />\r\n          <xs:element minOccurs=\"0\" name=\"ClaimValue\" nillable=\"true\" type=\"xs:string\" />\r\n        </xs:sequence>\r\n      </xs:complexType>\r\n      <xs:element name=\"TokenClaim\" nillable=\"true\" type=\"tns:TokenClaim\" />\r\n      <xs:complexType name=\"TokenRestrictionTemplate\">\r\n        <xs:sequence>\r\n          <xs:element minOccurs=\"0\" name=\"AlternateVerificationKeys\" nillable=\"true\" type=\"tns:ArrayOfTokenVerificationKey\" />\r\n          <xs:element name=\"Audience\" nillable=\"true\" type=\"xs:anyURI\" />\r\n          <xs:element name=\"Issuer\" nillable=\"true\" type=\"xs:anyURI\" />\r\n          <xs:element name=\"PrimaryVerificationKey\" nillable=\"true\" type=\"tns:TokenVerificationKey\" />\r\n          <xs:element minOccurs=\"0\" name=\"RequiredClaims\" nillable=\"true\" type=\"tns:ArrayOfTokenClaim\" />\r\n        </xs:sequence>\r\n      </xs:complexType>\r\n      <xs:element name=\"TokenRestrictionTemplate\" nillable=\"true\" type=\"tns:TokenRestrictionTemplate\" />\r\n      <xs:complexType name=\"ArrayOfTokenVerificationKey\">\r\n        <xs:sequence>\r\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"TokenVerificationKey\" nillable=\"true\" type=\"tns:TokenVerificationKey\" />\r\n        </xs:sequence>\r\n      </xs:complexType>\r\n      <xs:element name=\"ArrayOfTokenVerificationKey\" nillable=\"true\" type=\"tns:ArrayOfTokenVerificationKey\" />\r\n      <xs:complexType name=\"TokenVerificationKey\">\r\n        <xs:sequence />\r\n      </xs:complexType>\r\n      <xs:element name=\"TokenVerificationKey\" nillable=\"true\" type=\"tns:TokenVerificationKey\" />\r\n      <xs:complexType name=\"ArrayOfTokenClaim\">\r\n        <xs:sequence>\r\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"TokenClaim\" nillable=\"true\" type=\"tns:TokenClaim\" />\r\n        </xs:sequence>\r\n      </xs:complexType>\r\n      <xs:element name=\"ArrayOfTokenClaim\" nillable=\"true\" type=\"tns:ArrayOfTokenClaim\" />\r\n      <xs:complexType name=\"SymmetricVerificationKey\">\r\n        <xs:complexContent mixed=\"false\">\r\n          <xs:extension base=\"tns:TokenVerificationKey\">\r\n            <xs:sequence>\r\n              <xs:element name=\"KeyValue\" nillable=\"true\" type=\"xs:base64Binary\" />\r\n            </xs:sequence>\r\n          </xs:extension>\r\n        </xs:complexContent>\r\n      </xs:complexType>\r\n      <xs:element name=\"SymmetricVerificationKey\" nillable=\"true\" type=\"tns:SymmetricVerificationKey\" />\r\n    </xs:schema>\r\n\r\n配置令牌限制策略时，必须指定主验证密钥、颁发者和受众参数。 主验证密钥包含用于为令牌签名的密钥，颁发者是颁发令牌的安全令牌服务。 受众（有时称为范围）描述该令牌的意图，或者令牌授权访问的资源。 媒体服务密钥传送服务验证令牌中的这些值是否与模板中的值匹配。 \r\n\r\n使用适用于 .NET 的媒体服务 SDK 时，可以使用 TokenRestrictionTemplate 类来生成限制令牌。\r\n以下示例创建包含令牌限制的授权策略。 在此示例中，客户端必须出示令牌，其中包含：签名密钥 (VerificationKey)、令牌颁发者和必需的声明。\r\n\r\n    public static string AddTokenRestrictedAuthorizationPolicy(IContentKey contentKey)\r\n    {\r\n        string tokenTemplateString = GenerateTokenRequirements();\r\n\r\n        IContentKeyAuthorizationPolicy policy = _context.\r\n                                ContentKeyAuthorizationPolicies.\r\n                                CreateAsync(\"HLS token restricted authorization policy\").Result;\r\n\r\n        List<ContentKeyAuthorizationPolicyRestriction> restrictions =\r\n                new List<ContentKeyAuthorizationPolicyRestriction>();\r\n\r\n        ContentKeyAuthorizationPolicyRestriction restriction =\r\n                new ContentKeyAuthorizationPolicyRestriction\r\n                {\r\n                    Name = \"Token Authorization Policy\",\r\n                    KeyRestrictionType = (int)ContentKeyRestrictionType.TokenRestricted,\r\n                    Requirements = tokenTemplateString\r\n                };\r\n\r\n        restrictions.Add(restriction);\r\n\r\n        //You could have multiple options \r\n        IContentKeyAuthorizationPolicyOption policyOption =\r\n            _context.ContentKeyAuthorizationPolicyOptions.Create(\r\n                \"Token option for HLS\",\r\n                ContentKeyDeliveryType.BaselineHttp,\r\n                restrictions,\r\n                null  // no key delivery data is needed for HLS\r\n                );\r\n\r\n        policy.Options.Add(policyOption);\r\n\r\n        // Add ContentKeyAutorizationPolicy to ContentKey\r\n        contentKey.AuthorizationPolicyId = policy.Id;\r\n        IContentKey updatedKey = contentKey.UpdateAsync().Result;\r\n        Console.WriteLine(\"Adding Key to Asset: Key ID is \" + updatedKey.Id);\r\n\r\n        return tokenTemplateString;\r\n    }\r\n\r\n    static private string GenerateTokenRequirements()\r\n    {\r\n        TokenRestrictionTemplate template = new TokenRestrictionTemplate(TokenType.SWT);\r\n\r\n        template.PrimaryVerificationKey = new SymmetricVerificationKey();\r\n        template.AlternateVerificationKeys.Add(new SymmetricVerificationKey());\r\n            template.Audience = _sampleAudience.ToString();\r\n            template.Issuer = _sampleIssuer.ToString();\r\n\r\n        template.RequiredClaims.Add(TokenClaim.ContentKeyIdentifierClaim);\r\n\r\n        return TokenRestrictionTemplateSerializer.Serialize(template);\r\n    }\r\n\r\n#### <a id=\"test\"></a>测试令牌\r\n若要获取用于密钥授权策略，基于令牌限制的测试令牌，请执行以下操作。\r\n\r\n    // Deserializes a string containing an Xml representation of a TokenRestrictionTemplate\r\n    // back into a TokenRestrictionTemplate class instance.\r\n    TokenRestrictionTemplate tokenTemplate =\r\n        TokenRestrictionTemplateSerializer.Deserialize(tokenTemplateString);\r\n\r\n    // Generate a test token based on the the data in the given TokenRestrictionTemplate.\r\n    // Note, you need to pass the key id Guid because we specified \r\n    // TokenClaim.ContentKeyIdentifierClaim in during the creation of TokenRestrictionTemplate.\r\n    Guid rawkey = EncryptionUtils.GetKeyIdAsGuid(key.Id);\r\n\r\n    //The GenerateTestToken method returns the token without the word “Bearer” in front\r\n    //so you have to add it in front of the token string. \r\n    string testToken = TokenRestrictionTemplateSerializer.GenerateTestToken(tokenTemplate, null, rawkey);\r\n    Console.WriteLine(\"The authorization token is:\\nBearer {0}\", testToken);\r\n    Console.WriteLine();\r\n\r\n\r\n## <a name=\"playready-dynamic-encryption\"></a>PlayReady 动态加密\r\n媒体服务允许配置相应的权限和限制，以便在用户尝试播放受保护的内容时，PlayReady DRM 运行时会强制实施这些权限和限制。 \r\n\r\n使用 PlayReady 保护内容时，需要在授权策略中指定的项目之一是用于定义 [PlayReady 许可证模板](media-services-playready-license-template-overview.md)的 XML 字符串。 在适用于 .NET 的媒体服务 SDK 中，PlayReadyLicenseResponseTemplate 和 PlayReadyLicenseTemplate 类有助于定义 PlayReady 许可证模板。\r\n\r\n[本主题](media-services-protect-with-drm.md)演示如何使用 PlayReady 加密内容。\r\n\r\n### <a name=\"open-restriction\"></a>开放限制\r\n开放限制意味着系统会将密钥传送到发出密钥请求的任何用户。 此限制可能适用于测试用途。\r\n\r\n以下示例创建开放授权策略，并将其添加到内容密钥。\r\n\r\n    static public void AddOpenAuthorizationPolicy(IContentKey contentKey)\r\n    {\r\n\r\n        // Create ContentKeyAuthorizationPolicy with Open restrictions \r\n        // and create authorization policy          \r\n\r\n        List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\r\n        {\r\n            new ContentKeyAuthorizationPolicyRestriction \r\n            { \r\n                Name = \"Open\", \r\n                KeyRestrictionType = (int)ContentKeyRestrictionType.Open, \r\n                Requirements = null\r\n            }\r\n        };\r\n\r\n        // Configure PlayReady license template.\r\n        string newLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r\n\r\n        IContentKeyAuthorizationPolicyOption policyOption =\r\n            _context.ContentKeyAuthorizationPolicyOptions.Create(\"\",\r\n                ContentKeyDeliveryType.PlayReadyLicense,\r\n                    restrictions, newLicenseTemplate);\r\n\r\n        IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r\n                    ContentKeyAuthorizationPolicies.\r\n                    CreateAsync(\"Deliver Common Content Key with no restrictions\").\r\n                    Result;\r\n\r\n        contentKeyAuthorizationPolicy.Options.Add(policyOption);\r\n\r\n        // Associate the content key authorization policy with the content key.\r\n        contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r\n        contentKey = contentKey.UpdateAsync().Result;\r\n    }\r\n\r\n### <a name=\"token-restriction\"></a>令牌限制\r\n要配置令牌限制选项，需要使用 XML 描述令牌的授权要求。 令牌限制配置 XML 必须符合 [此](#schema) 部分中所示的 XML 架构。\r\n\r\n    public static string AddTokenRestrictedAuthorizationPolicy(IContentKey contentKey)\r\n    {\r\n        string tokenTemplateString = GenerateTokenRequirements();\r\n\r\n        IContentKeyAuthorizationPolicy policy = _context.\r\n                                ContentKeyAuthorizationPolicies.\r\n                                CreateAsync(\"HLS token restricted authorization policy\").Result;\r\n\r\n        List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\r\n        {\r\n            new ContentKeyAuthorizationPolicyRestriction \r\n            { \r\n                Name = \"Token Authorization Policy\", \r\n                KeyRestrictionType = (int)ContentKeyRestrictionType.TokenRestricted,\r\n                Requirements = tokenTemplateString, \r\n            }\r\n        };\r\n\r\n        // Configure PlayReady license template.\r\n        string newLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r\n\r\n        IContentKeyAuthorizationPolicyOption policyOption =\r\n            _context.ContentKeyAuthorizationPolicyOptions.Create(\"Token option\",\r\n                ContentKeyDeliveryType.PlayReadyLicense,\r\n                    restrictions, newLicenseTemplate);\r\n\r\n        IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r\n                    ContentKeyAuthorizationPolicies.\r\n                    CreateAsync(\"Deliver Common Content Key with no restrictions\").\r\n                    Result;\r\n\r\n        policy.Options.Add(policyOption);\r\n\r\n        // Add ContentKeyAutorizationPolicy to ContentKey\r\n        contentKeyAuthorizationPolicy.Options.Add(policyOption);\r\n\r\n        // Associate the content key authorization policy with the content key\r\n        contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r\n        contentKey = contentKey.UpdateAsync().Result;\r\n\r\n        return tokenTemplateString;\r\n    }\r\n\r\n    static private string GenerateTokenRequirements()\r\n    {\r\n\r\n        TokenRestrictionTemplate template = new TokenRestrictionTemplate(TokenType.SWT);\r\n\r\n        template.PrimaryVerificationKey = new SymmetricVerificationKey();\r\n        template.AlternateVerificationKeys.Add(new SymmetricVerificationKey());\r\n            template.Audience = _sampleAudience.ToString();\r\n            template.Issuer = _sampleIssuer.ToString();\r\n\r\n        template.RequiredClaims.Add(TokenClaim.ContentKeyIdentifierClaim);\r\n\r\n        return TokenRestrictionTemplateSerializer.Serialize(template);\r\n    } \r\n\r\n    static private string ConfigurePlayReadyLicenseTemplate()\r\n    {\r\n        // The following code configures PlayReady License Template using .NET classes\r\n        // and returns the XML string.\r\n\r\n        //The PlayReadyLicenseResponseTemplate class represents the template for the response sent back to the end user. \r\n        //It contains a field for a custom data string between the license server and the application \r\n        //(may be useful for custom app logic) as well as a list of one or more license templates.\r\n        PlayReadyLicenseResponseTemplate responseTemplate = new PlayReadyLicenseResponseTemplate();\r\n\r\n        // The PlayReadyLicenseTemplate class represents a license template for creating PlayReady licenses\r\n        // to be returned to the end users. \r\n        //It contains the data on the content key in the license and any rights or restrictions to be \r\n        //enforced by the PlayReady DRM runtime when using the content key.\r\n        PlayReadyLicenseTemplate licenseTemplate = new PlayReadyLicenseTemplate();\r\n        //Configure whether the license is persistent (saved in persistent storage on the client) \r\n        //or non-persistent (only held in memory while the player is using the license).  \r\n        licenseTemplate.LicenseType = PlayReadyLicenseType.Nonpersistent;\r\n\r\n        // AllowTestDevices controls whether test devices can use the license or not.  \r\n        // If true, the MinimumSecurityLevel property of the license\r\n        // is set to 150.  If false (the default), the MinimumSecurityLevel property of the license is set to 2000.\r\n        licenseTemplate.AllowTestDevices = true;\r\n\r\n        // You can also configure the Play Right in the PlayReady license by using the PlayReadyPlayRight class. \r\n        // It grants the user the ability to playback the content subject to the zero or more restrictions \r\n        // configured in the license and on the PlayRight itself (for playback specific policy). \r\n        // Much of the policy on the PlayRight has to do with output restrictions \r\n        // which control the types of outputs that the content can be played over and \r\n        // any restrictions that must be put in place when using a given output.\r\n        // For example, if the DigitalVideoOnlyContentRestriction is enabled, \r\n        //then the DRM runtime will only allow the video to be displayed over digital outputs \r\n        //(analog video outputs won’t be allowed to pass the content).\r\n\r\n        //IMPORTANT: These types of restrictions can be very powerful but can also affect the consumer experience. \r\n        // If the output protections are configured too restrictive, \r\n        // the content might be unplayable on some clients. For more information, see the PlayReady Compliance Rules document.\r\n\r\n        // For example:\r\n        //licenseTemplate.PlayRight.AgcAndColorStripeRestriction = new AgcAndColorStripeRestriction(1);\r\n\r\n        responseTemplate.LicenseTemplates.Add(licenseTemplate);\r\n\r\n        return MediaServicesLicenseTemplateSerializer.Serialize(responseTemplate);\r\n    }\r\n\r\n\r\n若要获取用于密钥授权策略，基于令牌限制的测试令牌，请参阅 [此](#test) 部分。 \r\n\r\n## <a id=\"types\"></a>定义 ContentKeyAuthorizationPolicy 时使用的类型\r\n### <a id=\"ContentKeyRestrictionType\"></a>ContentKeyRestrictionType\r\n    public enum ContentKeyRestrictionType\r\n    {\r\n        Open = 0,\r\n        TokenRestricted = 1,\r\n        IPRestricted = 2,\r\n    }\r\n\r\n### <a id=\"ContentKeyDeliveryType\"></a>ContentKeyDeliveryType\r\n    public enum ContentKeyDeliveryType\r\n    {\r\n      None = 0,\r\n      PlayReadyLicense = 1,\r\n      BaselineHttp = 2,\r\n      Widevine = 3\r\n    }\r\n\r\n### <a id=\"TokenType\"></a>TokenType\r\n    public enum TokenType\r\n    {\r\n        Undefined = 0,\r\n        SWT = 1,\r\n        JWT = 2,\r\n    }\r\n\r\n\r\n## <a name=\"next-step\"></a>后续步骤\r\n现在已配置内容密钥的授权策略，请转到[如何配置资产传送策略](media-services-dotnet-configure-asset-delivery-policy.md)主题。\r\n\r\n"}