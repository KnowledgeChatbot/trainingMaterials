{"Title":"使用 Azure 媒体视频缩略图创建视频摘要","Description":"视频摘要可通过自动选择来自源视频的有趣片段帮助你创建长视频的摘要。 要提供有关长视频内容的快速概述时，这很有用。","Content":"# <a name=\"use-azure-media-video-thumbnails-to-create-a-video-summarization\"></a>使用 Azure 媒体视频缩略图创建视频摘要\r\n## <a name=\"overview\"></a>概述\r\n通过 Azure Media Video Thumbnails 媒体处理器 (MP)，可创建视频摘要，这对于要预览长视频摘要的客户来说很有用。 例如，当客户将鼠标悬停在缩略图上时，他们可能希望看到一小段“摘要视频”。 使用配置预设值稍稍调整 **Azure 媒体视频缩略图** 的参数，就可使用 MP 的强大镜头检测和串联技术，以算法形式生成描述性子剪辑。  \r\n\r\n**Azure 媒体视频缩略图** MP 目前处于预览状态。\r\n\r\n此主题提供有关 Azure Media Video Thumbnail 的详细信息，并演示如何将它与用于 .NET 的媒体服务 SDK 配合使用。\r\n\r\n## <a name=\"limitations\"></a>限制\r\n\r\n在某些情况下，如果视频不是由不同的场景构成，则输出仅为单张快照。\r\n\r\n## <a name=\"video-summary-example\"></a>视频摘要示例\r\n下面是 Azure 媒体视频缩略图媒体处理器可以执行的操作的一些示例：\r\n\r\n### <a name=\"original-video\"></a>原始视频\r\n[原始视频](http://ampdemo.azureedge.net/azuremediaplayer.html?url=https%3A%2F%2Fnimbuscdn-nimbuspm.streaming.mediaservices.chinacloudapi.cn%2Faed33834-ec2d-4788-88b5-a4505b3d032c%2FMicrosoft%27s%20HoloLens%20Live%20Demonstration.ism%2Fmanifest)\r\n\r\n### <a name=\"video-thumbnail-result\"></a>视频缩略图结果\r\n[视频缩略图结果](http://ampdemo.azureedge.net/azuremediaplayer.html?url=http%3A%2F%2Fnimbuscdn-nimbuspm.streaming.mediaservices.chinacloudapi.cn%2Ff5c91052-4232-41d4-b531-062e07b6a9ae%2FHololens%2520Demo_VideoThumbnails_MotionThumbnail.mp4)\r\n\r\n## <a name=\"task-configuration-preset\"></a>任务配置（预设）\r\n使用 **Azure 媒体视频缩略图**创建视频缩略图时，必须指定配置预设值。 以上缩略图示例使用以下 JSON 基本配置创建：\r\n\r\n```\r\n{\"version\":\"1.0\"}\r\n```\r\n\r\n当前你可更改以下参数：\r\n\r\n| Param | 说明 |\r\n| --- | --- |\r\n| outputAudio |指定生成的视频是否包含音频。 <br/>允许的值为：True 或 False。 默认值为 True。 |\r\n| fadeInFadeOut |指定单独动态缩略图之间是否使用淡入淡出转换。  <br/>允许的值为：True 或 False。  默认值为 True。 |\r\n| maxMotionThumbnailDurationInSecs |指定生成的整个视频的时长的整数。  默认值取决于原始视频的持续时间。 |\r\n\r\n下表描述了当 **maxMotionThumbnailInSecs** 未使用时的默认持续时间。\r\n\r\n|  |  |  |\r\n| --- | --- | --- | --- | --- |\r\n| 视频持续时间 |d < 3 分钟 |3 分钟 < d < 15 分钟 |\r\n| 缩略图持续时间 |15 秒（2-3 个场景） |30 秒（3-5 个场景） |\r\n\r\n下面的 JSON 设置可用的参数。\r\n\r\n```\r\n{\r\n    \"version\": \"1.0\",\r\n    \"options\": {\r\n        \"outputAudio\": \"true\",\r\n        \"maxMotionThumbnailDurationInSecs\": \"10\",\r\n        \"fadeInFadeOut\": \"true\"\r\n    }\r\n}\r\n```\r\n\r\n## <a name=\"net-sample-code\"></a>.NET 示例代码\r\n\r\n以下程序演示如何：\r\n\r\n1. 创建资产并将媒体文件上传到资产。\r\n2. 使用基于包含以下 json 预设值的配置文件的视频缩略图任务，创建一个作业。 \r\n\r\n    ```\r\n    {               \r\n        \"version\": \"1.0\",\r\n        \"options\": {\r\n            \"outputAudio\": \"true\",\r\n            \"maxMotionThumbnailDurationInSecs\": \"30\",\r\n            \"fadeInFadeOut\": \"false\"\r\n        }\r\n    }\r\n    ```\r\n\r\n3. 下载输出文件。 \r\n\r\n#### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r\n\r\n设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r\n\r\n#### <a name=\"example\"></a>示例\r\n\r\n    using System;\r\n    using System.Configuration;\r\n    using System.IO;\r\n    using System.Linq;\r\n    using Microsoft.WindowsAzure.MediaServices.Client;\r\n    using System.Threading;\r\n    using System.Threading.Tasks;\r\n\r\n    namespace VideoSummarization\r\n    {\r\n        class Program\r\n        {\r\n            // Read values from the App.config file.\r\n            private static readonly string _AADTenantDomain =\r\n                ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r\n            private static readonly string _RESTAPIEndpoint =\r\n                ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r\n\r\n            // Field for service context.\r\n            private static CloudMediaContext _context = null;\r\n\r\n            static void Main(string[] args)\r\n            {\r\n                var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n                var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r\n\r\n                _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r\n\r\n\r\n                // Run the thumbnail job.\r\n                var asset = RunVideoThumbnailJob(@\"C:\\supportFiles\\VideoThumbnail\\BigBuckBunny.mp4\",\r\n                                            @\"C:\\supportFiles\\VideoThumbnail\\config.json\");\r\n\r\n                // Download the job output asset.\r\n                DownloadAsset(asset, @\"C:\\supportFiles\\VideoThumbnail\\Output\");\r\n            }\r\n\r\n            static IAsset RunVideoThumbnailJob(string inputMediaFilePath, string configurationFile)\r\n            {\r\n                // Create an asset and upload the input media file to storage.\r\n                IAsset asset = CreateAssetAndUploadSingleFile(inputMediaFilePath,\r\n                    \"My Video Thumbnail Input Asset\",\r\n                    AssetCreationOptions.None);\r\n\r\n                // Declare a new job.\r\n                IJob job = _context.Jobs.Create(\"My Video Thumbnail Job\");\r\n\r\n                // Get a reference to Azure Media Video Thumbnails.\r\n                string MediaProcessorName = \"Azure Media Video Thumbnails\";\r\n\r\n                var processor = GetLatestMediaProcessorByName(MediaProcessorName);\r\n\r\n                // Read configuration from the specified file.\r\n                string configuration = File.ReadAllText(configurationFile);\r\n\r\n                // Create a task with the encoding details, using a string preset.\r\n                ITask task = job.Tasks.AddNew(\"My Video Thumbnail Task\",\r\n                    processor,\r\n                    configuration,\r\n                    TaskOptions.None);\r\n\r\n                // Specify the input asset.\r\n                task.InputAssets.Add(asset);\r\n\r\n                // Add an output asset to contain the results of the job.\r\n                task.OutputAssets.AddNew(\"My Video Thumbnail Output Asset\", AssetCreationOptions.None);\r\n\r\n                // Use the following event handler to check job progress.  \r\n                job.StateChanged += new EventHandler<JobStateChangedEventArgs>(StateChanged);\r\n\r\n                // Launch the job.\r\n                job.Submit();\r\n\r\n                // Check job execution and wait for job to finish.\r\n                Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\r\n\r\n                progressJobTask.Wait();\r\n\r\n                // If job state is Error, the event handling\r\n                // method for job progress should log errors.  Here we check\r\n                // for error state and exit if needed.\r\n                if (job.State == JobState.Error)\r\n                {\r\n                    ErrorDetail error = job.Tasks.First().ErrorDetails.First();\r\n                    Console.WriteLine(string.Format(\"Error: {0}. {1}\",\r\n                                                    error.Code,\r\n                                                    error.Message));\r\n                    return null;\r\n                }\r\n\r\n                return job.OutputMediaAssets[0];\r\n            }\r\n\r\n            static IAsset CreateAssetAndUploadSingleFile(string filePath, string assetName, AssetCreationOptions options)\r\n            {\r\n                IAsset asset = _context.Assets.Create(assetName, options);\r\n\r\n                var assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath));\r\n                assetFile.Upload(filePath);\r\n\r\n                return asset;\r\n            }\r\n\r\n            static void DownloadAsset(IAsset asset, string outputDirectory)\r\n            {\r\n                foreach (IAssetFile file in asset.AssetFiles)\r\n                {\r\n                    file.Download(Path.Combine(outputDirectory, file.Name));\r\n                }\r\n            }\r\n\r\n            static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r\n            {\r\n                var processor = _context.MediaProcessors\r\n                    .Where(p => p.Name == mediaProcessorName)\r\n                    .ToList()\r\n                    .OrderBy(p => new Version(p.Version))\r\n                    .LastOrDefault();\r\n\r\n                if (processor == null)\r\n                    throw new ArgumentException(string.Format(\"Unknown media processor\",\r\n                                                               mediaProcessorName));\r\n\r\n                return processor;\r\n            }\r\n\r\n            static private void StateChanged(object sender, JobStateChangedEventArgs e)\r\n            {\r\n                Console.WriteLine(\"Job state changed event:\");\r\n                Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r\n                Console.WriteLine(\"  Current state: \" + e.CurrentState);\r\n\r\n                switch (e.CurrentState)\r\n                {\r\n                    case JobState.Finished:\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\"Job is finished.\");\r\n                        Console.WriteLine();\r\n                        break;\r\n                    case JobState.Canceling:\r\n                    case JobState.Queued:\r\n                    case JobState.Scheduled:\r\n                    case JobState.Processing:\r\n                        Console.WriteLine(\"Please wait...\\n\");\r\n                        break;\r\n                    case JobState.Canceled:\r\n                    case JobState.Error:\r\n                        // Cast sender as a job.\r\n                        IJob job = (IJob)sender;\r\n                        // Display or log error details as needed.\r\n                        // LogJobStop(job.Id);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n### <a name=\"video-thumbnail-output\"></a>视频缩略图输出\r\n\r\n[视频缩略图输出](http://ampdemo.azureedge.net/azuremediaplayer.html?url=http%3A%2F%2Fnimbuscdn-nimbuspm.streaming.mediaservices.chinacloudapi.cn%2Fd06f24dc-bc81-488e-a8d0-348b7dc41b56%2FHololens%2520Demo_VideoThumbnails_MotionThumbnail.mp4)\r\n\r\n## <a name=\"related-links\"></a>相关链接\r\n[Azure 媒体服务分析概述](media-services-analytics-overview.md)\r\n\r\n[Azure Media Analytics demos（Azure 媒体分析演示）](http://azuremedialabs.azurewebsites.net/demos/Analytics.html)\r\n<!--Update_Description: update code to use AAD token instead of ACS-->"}