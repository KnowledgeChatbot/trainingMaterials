{"Title":"平滑流式处理 Windows 应用商店应用教程","Description":"了解如何使用 Azure 媒体服务来创建一个 C# Windows 应用商店应用程序，该应用程序包含一个用于播放平滑流内容的 XML MediaElement 控件。","Content":"# <a name=\"how-to-build-a-smooth-streaming-windows-store-application\"></a>如何生成平滑流式处理 Windows 应用商店应用程序\r\n\r\n借助适用于 Windows 8 的平滑流式处理客户端 SDK，开发人员可以生成支持点播付费、实时平滑流式处理内容的 Windows 应用商店应用程序。 除了播放平滑流式处理内容这一基本功能以外，该 SDK 还提供其他丰富功能，例如 Microsoft PlayReady 保护、质量级别限制、实时 DVR、音频流切换、收听状态更新（如质量级别更改）和错误事件，等等。 有关支持的功能的详细信息，请参阅 [发行说明](http://www.iis.net/learn/media/smooth-streaming/smooth-streaming-client-sdk-for-windows-8-release-notes)。 有关详细信息，请参阅 [适用于 Windows 8 的播放器框架](http://playerframework.codeplex.com/)。 \r\n\r\n本教程包含四个课时：\r\n\r\n1. 创建基本的平滑流式处理应用商店应用程序\r\n2. 添加滚动条以控制媒体进度\r\n3. 选择平滑流式处理流\r\n4. 选择平滑流式处理曲目\r\n\r\n## <a name=\"prerequisites\"></a>先决条件\r\n> [!NOTE]\r\n> Visual Studio 2017 不支持 Windows 应用商店项目 8.1 版及更早的版本。  有关详细信息，请参阅 [Visual Studio 2017 平台目标以及兼容性](https://www.visualstudio.com/en-us/productinfo/vs2017-compatibility-vs)。\r\n\r\n* Windows 8 32 位或 64 位。\r\n* Visual Studio 版本 2012 到 2015。\r\n* [适用于 Windows 8 的 Microsoft 平滑流式处理客户端 SDK](http://visualstudiogallery.msdn.microsoft.com/04423d13-3b3e-4741-a01c-1ae29e84fea6?SRC=Homehttp://visualstudiogallery.msdn.microsoft.com/04423d13-3b3e-4741-a01c-1ae29e84fea6?SRC=Home)。\r\n\r\n可从 MSDN 开发人员代码示例（代码库）下载每一课后生成的解决方案： \r\n\r\n* [第 1 课](http://code.msdn.microsoft.com/Smooth-Streaming-Client-0bb1471f) - 简单的 Windows 8 平滑流式处理媒体播放器， \r\n* [第 2 课](http://code.msdn.microsoft.com/A-simple-Windows-8-Smooth-ee98f63a) - 带滚动条控件的简单 Windows 8 平滑流式处理媒体播放器， \r\n* [第 3 课](http://code.msdn.microsoft.com/A-Windows-8-Smooth-883c3b44) - 支持流选择的 Windows 8 平滑流式处理媒体播放器，  \r\n* [第 4 课](http://code.msdn.microsoft.com/A-Windows-8-Smooth-aa9e4907) - 支持轨迹选择的 Windows 8 平滑流式处理媒体播放器。\r\n\r\n## <a name=\"lesson-1-create-a-basic-smooth-streaming-store-application\"></a>第 1 课：创建基本的平滑流式处理应用商店应用程序\r\n\r\n本课涉及使用 MediaElement 控件创建一个 Windows 应用商店应用程序，以播放平滑流内容。  运行的应用程序如下所示：\r\n\r\n![平滑流式处理 Windows 应用商店应用程序示例][PlayerApplication]\r\n\r\n有关开发 Windows 应用商店应用程序的详细信息，请参阅 [开发适用于 Windows 8 的极佳应用](http://msdn.microsoft.com/windows/apps/br229512.aspx)。 本课包含以下过程：\r\n\r\n1. 创建 Windows 应用商店项目\r\n2. 设计用户界面 (XAML)\r\n3. 修改代码隐藏文件\r\n4. 编译和测试应用程序\r\n\r\n**创建 Windows 应用商店项目**\r\n\r\n1. 运行 Visual Studio；支持版本 2012 到 2015。\r\n2. 在“文件”菜单中，单击“新建”，并单击“项目”。\r\n3. 在“新建项目”对话框中，键入或选择以下值：\r\n\r\n| 名称 | 值 |\r\n| --- | --- |\r\n| 模板组 |已安装/模板/Visual C#/Windows 应用商店 |\r\n| 模板 |空白应用 (XAML) |\r\n| 名称 |SSPlayer |\r\n| 位置 |C:\\SSTutorials |\r\n| 解决方案名称 |SSPlayer |\r\n| 创建解决方案的目录 |（选定） |\r\n\r\n1. 单击 **“确定”**。\r\n\r\n**添加对平滑流式处理客户端 SDK 的引用**\r\n\r\n1. 在解决方案资源管理器中，右键单击“SSPlayer”，并单击“添加引用”。\r\n2. 键入或选择以下值：\r\n\r\n| 名称 | 值 |\r\n| --- | --- |\r\n| 引用组 |Windows/扩展 |\r\n| 引用 |选择适用于 Windows 8 和 Microsoft Visual C++ 运行时程序包的 Microsoft 平滑流式处理客户端 SDK |\r\n\r\n1. 单击 **“确定”**。 \r\n\r\n添加引用后，必须选择目标平台（x64 或 x86），添加引用对于任何 CPU 平台配置都不起作用。  在解决方案资源管理器中，会看到这些添加的引用出现了对应的黄色警告标记。\r\n\r\n**设计播放器用户界面**\r\n\r\n1. 在解决方案资源管理器中，双击“MainPage.xaml”以在设计视图中将它打开。\r\n2. 在该 XAML 文件中找到 &lt;Grid&gt; 和 &lt;/Grid&gt; 标记，并在这两个标记之间粘贴以下代码：\r\n\r\n         <Grid.RowDefinitions>\r\n\r\n            <RowDefinition Height=\"20\"/>    <!-- spacer -->\r\n            <RowDefinition Height=\"50\"/>    <!-- media controls -->\r\n            <RowDefinition Height=\"100*\"/>  <!-- media element -->\r\n            <RowDefinition Height=\"80*\"/>   <!-- media stream and track selection -->\r\n            <RowDefinition Height=\"50\"/>    <!-- status bar -->\r\n         </Grid.RowDefinitions>\r\n\r\n         <StackPanel Name=\"spMediaControl\" Grid.Row=\"1\" Orientation=\"Horizontal\">\r\n            <TextBlock x:Name=\"tbSource\" Text=\"Source :  \" FontSize=\"16\" FontWeight=\"Bold\" VerticalAlignment=\"Center\" />\r\n            <TextBox x:Name=\"txtMediaSource\" Text=\"http://ecn.channel9.msdn.com/o9/content/smf/smoothcontent/elephantsdream/Elephants_Dream_1024-h264-st-aac.ism/manifest\" FontSize=\"10\" Width=\"700\" Margin=\"0,4,0,10\" />\r\n            <Button x:Name=\"btnSetSource\" Content=\"Set Source\" Width=\"111\" Height=\"43\" Click=\"btnSetSource_Click\"/>\r\n            <Button x:Name=\"btnPlay\" Content=\"Play\" Width=\"111\" Height=\"43\" Click=\"btnPlay_Click\"/>\r\n            <Button x:Name=\"btnPause\" Content=\"Pause\"  Width=\"111\" Height=\"43\" Click=\"btnPause_Click\"/>\r\n            <Button x:Name=\"btnStop\" Content=\"Stop\"  Width=\"111\" Height=\"43\" Click=\"btnStop_Click\"/>\r\n            <CheckBox x:Name=\"chkAutoPlay\" Content=\"Auto Play\" Height=\"55\" Width=\"Auto\" IsChecked=\"{Binding AutoPlay, ElementName=mediaElement, Mode=TwoWay}\"/>\r\n            <CheckBox x:Name=\"chkMute\" Content=\"Mute\" Height=\"55\" Width=\"67\" IsChecked=\"{Binding IsMuted, ElementName=mediaElement, Mode=TwoWay}\"/>\r\n         </StackPanel>\r\n\r\n         <StackPanel Name=\"spMediaElement\" Grid.Row=\"2\" Height=\"435\" Width=\"1072\"\r\n                    HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\r\n            <MediaElement x:Name=\"mediaElement\" Height=\"356\" Width=\"924\" MinHeight=\"225\"\r\n                          HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" \r\n                          AudioCategory=\"BackgroundCapableMedia\" />\r\n            <StackPanel Orientation=\"Horizontal\">\r\n                <Slider x:Name=\"sliderProgress\" Width=\"924\" Height=\"44\"\r\n                        HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"\r\n                        PointerPressed=\"sliderProgress_PointerPressed\"/>\r\n                <Slider x:Name=\"sliderVolume\" \r\n                        HorizontalAlignment=\"Right\" VerticalAlignment=\"Center\" Orientation=\"Vertical\" \r\n                        Height=\"79\" Width=\"148\" Minimum=\"0\" Maximum=\"1\" StepFrequency=\"0.1\" \r\n                        Value=\"{Binding Volume, ElementName=mediaElement, Mode=TwoWay}\" \r\n                        ToolTipService.ToolTip=\"{Binding Value, RelativeSource={RelativeSource Mode=Self}}\"/>\r\n            </StackPanel>\r\n         </StackPanel>\r\n\r\n         <StackPanel Name=\"spStatus\" Grid.Row=\"4\" Orientation=\"Horizontal\">\r\n            <TextBlock x:Name=\"tbStatus\" Text=\"Status :  \" \r\n               FontSize=\"16\" FontWeight=\"Bold\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\" />\r\n            <TextBox x:Name=\"txtStatus\" FontSize=\"10\" Width=\"700\" VerticalAlignment=\"Center\"/>\r\n         </StackPanel>\r\n   \r\n   MediaElement 控件用于播放媒体。 在下一课，我们将使用名为 sliderProgress 的滚动条控件来控制媒体进度。\r\n\r\n3. 按 **CTRL+S** 保存文件。\r\n\r\nMediaElement 控件并非原本就支持平滑流式处理内容。 若要启用平滑流式处理支持，必须按文件扩展名和 MIME 类型注册平滑流式处理字节流处理程序。  若要注册，可以使用 Windows.Media 命名空间的 MediaExtensionManager.RegisterByteStremHandler 方法。\r\n\r\n在此 XAML 文件中，某些事件处理程序与控件关联。  必须定义这些事件处理程序。\r\n\r\n**修改代码隐藏文件**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看代码”。\r\n2. 在该文件的顶部，添加以下 using 语句：\r\n   \r\n        using Windows.Media;\r\n    \r\n3. 在 **MainPage** 类的开头，添加以下数据成员：\r\n   \r\n        private MediaExtensionManager extensions = new MediaExtensionManager();\r\n    \r\n4. 在 **MainPage** 构造函数的末尾，添加以下两行：\r\n   \r\n        extensions.RegisterByteStreamHandler(\"Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler\", \".ism\", \"text/xml\");\r\n        extensions.RegisterByteStreamHandler(\"Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler\", \".ism\", \"application/vnd.ms-sstr+xml\");\r\n\r\n5. 在 MainPage 类的末尾，粘贴以下代码：\r\n   \r\n         # region UI Button Click Events\r\n         private void btnPlay_Click(object sender, RoutedEventArgs e)\r\n         {\r\n\r\n         mediaElement.Play();\r\n         txtStatus.Text = \"MediaElement is playing ...\";\r\n         }\r\n         private void btnPause_Click(object sender, RoutedEventArgs e)\r\n         {\r\n\r\n         mediaElement.Pause();\r\n         txtStatus.Text = \"MediaElement is paused\";\r\n         }\r\n         private void btnSetSource_Click(object sender, RoutedEventArgs e)\r\n         {\r\n\r\n         sliderProgress.Value = 0;\r\n         mediaElement.Source = new Uri(txtMediaSource.Text);\r\n\r\n         if (chkAutoPlay.IsChecked == true)\r\n         {\r\n             txtStatus.Text = \"MediaElement is playing ...\";\r\n         }\r\n         else\r\n         {\r\n             txtStatus.Text = \"Click the Play button to play the media source.\";\r\n         }\r\n         }\r\n         private void btnStop_Click(object sender, RoutedEventArgs e)\r\n         {\r\n\r\n         mediaElement.Stop();\r\n         txtStatus.Text = \"MediaElement is stopped\";\r\n         }\r\n         private void sliderProgress_PointerPressed(object sender, PointerRoutedEventArgs e)\r\n         {\r\n\r\n         txtStatus.Text = \"Seek to position \" + sliderProgress.Value;\r\n         mediaElement.Position = new TimeSpan(0, 0, (int)(sliderProgress.Value));\r\n         }\r\n         # endregion\r\n\r\n    现已定义 sliderProgress_PointerPressed 事件处理程序。  要使它正常工作，还需要执行其他操作，本教程的下一课会进行介绍。\r\n\r\n6. 按 **CTRL+S** 保存文件。\r\n\r\n完成的代码隐藏文件应如下所示：\r\n\r\n![创建平滑流式处理 Windows 应用商店应用程序时 Visual Studio 中的代码视图][CodeViewPic]\r\n\r\n**编译和测试应用程序**\r\n\r\n1. 在“生成”菜单中，单击“配置管理器”。\r\n2. 更改“活动解决方案平台”  以匹配开发平台。\r\n3. 按 **F6** 编译项目。 \r\n4. 按 **F5** 运行应用程序。\r\n5. 在应用程序的顶部，可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。 \r\n6. 单击“设置源” 。 由于已按默认启用“自动播放”  ，因此媒体会自动播放。  可以使用“播放”、“暂停”和“停止”按钮控制媒体。  可以使用垂直滚动条控制媒体音量。  但是，用于控制媒体进度的水平滚动条功能尚未完全实现。 \r\n\r\n第 1 课到此结束。  在本课中，已学习如何使用 MediaElement 控件来播放平滑流式处理内容。  在下一课中，需要要添加滚动条，以控制平滑流式处理内容的进度。\r\n\r\n## <a name=\"lesson-2-add-a-slider-bar-to-control-the-media-progress\"></a>第2 课：添加滚动条以控制媒体进度\r\n\r\n在第 1 课，已使用 MediaElement XAML 控件创建了一个 Windows 应用商店应用程序，用于播放平滑流式处理媒体内容。  该应用程序带有基本的媒体功能，例如开始、停止和暂停。  本课涉及在该应用程序中添加一个滚动条控件。\r\n\r\n在本教程中，我们将使用一个计时器，基于 MediaElement 控件的当前位置更新该滚动条的位置。  播放实况内容时，滚动条开始时间和结束时间也需要更新。  可以在自适应源更新事件中更好地处理此操作。\r\n\r\n媒体源是生成媒体数据的对象。  源解析程序采用 URL 或字节流，并为该内容创建相应的媒体源。  源解析程序是应用程序创建媒体源的标准途径。 \r\n\r\n本课包含以下过程：\r\n\r\n1. 注册平滑流式处理处理程序 \r\n2. 添加自适应源管理器级别事件处理程序\r\n3. 添加自适应源级别事件处理程序\r\n4. 添加 MediaElement 事件处理程序\r\n5. 添加滚动条相关的代码\r\n6. 编译和测试应用程序\r\n\r\n**注册平滑流式处理字节流处理程序并传递属性集**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看代码”。\r\n2. 在该文件的开头，添加以下 using 语句：\r\n\r\n        using Microsoft.Media.AdaptiveStreaming;\r\n    \r\n3. 在 MainPage 类的开头，添加以下数据成员：\r\n\r\n    private Windows.Foundation.Collections.PropertySet propertySet = new Windows.Foundation.Collections.PropertySet();             \r\n        private IAdaptiveSourceManager adaptiveSourceManager;\r\n\r\n4. 在 MainPage 构造函数中的 this.Initialize Components(); 行以及在上一课编写的注册代码行的后面添加以下代码：\r\n\r\n        // Gets the default instance of AdaptiveSourceManager which manages Smooth \r\n        //Streaming media sources.\r\n        adaptiveSourceManager = AdaptiveSourceManager.GetDefault();\r\n        // Sets property key value to AdaptiveSourceManager default instance.\r\n        // {A5CE1DE8-1D00-427B-ACEF-FB9A3C93DE2D}\" must be hardcoded.\r\n        propertySet[\"{A5CE1DE8-1D00-427B-ACEF-FB9A3C93DE2D}\"] = adaptiveSourceManager;\r\n\r\n5. 在 **MainPage** 构造函数中，修改两个 RegisterByteStreamHandler 方法以添加第四个参数：\r\n\r\n         // Registers Smooth Streaming byte-stream handler for \".ism\" extension and, \r\n         // \"text/xml\" and \"application/vnd.ms-ss\" mime-types and pass the propertyset. \r\n         // http://*.ism/manifest URI resources will be resolved by Byte-stream handler.\r\n         extensions.RegisterByteStreamHandler(\r\n\r\n            \"Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler\", \r\n            \".ism\", \r\n            \"text/xml\", \r\n            propertySet );\r\n         extensions.RegisterByteStreamHandler(\r\n\r\n            \"Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler\", \r\n            \".ism\", \r\n            \"application/vnd.ms-sstr+xml\", \r\n         propertySet);\r\n\r\n6. 按 **CTRL+S** 保存文件。\r\n\r\n**添加自适应源管理器级别事件处理程序**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看代码”。\r\n2. 在 **MainPage** 类中，添加以下数据成员：\r\n\r\n     private AdaptiveSource adaptiveSource = null;\r\n\r\n3. 在 **MainPage** 类的末尾，添加以下事件处理程序：\r\n\r\n         # region Adaptive Source Manager Level Events\r\n         private void mediaElement_AdaptiveSourceOpened(AdaptiveSource sender, AdaptiveSourceOpenedEventArgs args)\r\n         {\r\n\r\n            adaptiveSource = args.AdaptiveSource;\r\n         }\r\n\r\n         # endregion Adaptive Source Manager Level Events\r\n\r\n4. 在 **MainPage** 构造函数的末尾，添加以下行以订阅自适应源打开事件：\r\n\r\n        adaptiveSourceManager.AdaptiveSourceOpenedEvent += \r\n            new AdaptiveSourceOpenedEventHandler(mediaElement_AdaptiveSourceOpened);\r\n\r\n5. 按 **CTRL+S** 保存文件。\r\n\r\n**添加自适应源级别事件处理程序**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看代码”。\r\n2. 在 **MainPage** 类中，添加以下数据成员：\r\n\r\n        private AdaptiveSourceStatusUpdatedEventArgs adaptiveSourceStatusUpdate; \r\n        private Manifest manifestObject;\r\n\r\n3. 在 **MainPage** 类的末尾，添加以下事件处理程序：\r\n\r\n         # region Adaptive Source Level Events\r\n         private void mediaElement_ManifestReady(AdaptiveSource sender, ManifestReadyEventArgs args)\r\n         {\r\n\r\n            adaptiveSource = args.AdaptiveSource;\r\n            manifestObject = args.AdaptiveSource.Manifest;\r\n         }\r\n\r\n         private void mediaElement_AdaptiveSourceStatusUpdated(AdaptiveSource sender, AdaptiveSourceStatusUpdatedEventArgs args)\r\n         {\r\n\r\n            adaptiveSourceStatusUpdate = args;\r\n         }\r\n\r\n         private void mediaElement_AdaptiveSourceFailed(AdaptiveSource sender, AdaptiveSourceFailedEventArgs args)\r\n         {\r\n\r\n            txtStatus.Text = \"Error: \" + args.HttpResponse;\r\n         }\r\n\r\n         # endregion Adaptive Source Level Events\r\n\r\n4. 在 **mediaElement AdaptiveSourceOpened** 方法的末尾，添加以下代码以订阅事件：\r\n\r\n         adaptiveSource.ManifestReadyEvent +=\r\n\r\n                    mediaElement_ManifestReady;\r\n         adaptiveSource.AdaptiveSourceStatusUpdatedEvent += \r\n\r\n            mediaElement_AdaptiveSourceStatusUpdated;\r\n         adaptiveSource.AdaptiveSourceFailedEvent += \r\n\r\n            mediaElement_AdaptiveSourceFailed;\r\n\r\n5. 按 **CTRL+S** 保存文件。\r\n\r\n相同的事件也可以在自适应源管理器级别使用，因此可用于处理应用中所有媒体元素通用的功能。 每个 AdaptiveSource 包含其自身的事件，所有 AdaptiveSource 事件将级联在 AdaptiveSourceManager 下面。\r\n\r\n**添加媒体元素事件处理程序**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看代码”。\r\n2. 在 **MainPage** 类的末尾，添加以下事件处理程序：\r\n\r\n         # region Media Element Event Handlers\r\n         private void MediaOpened(object sender, RoutedEventArgs e)\r\n         {\r\n\r\n            txtStatus.Text = \"MediaElement opened\";\r\n         }\r\n\r\n         private void MediaFailed(object sender, ExceptionRoutedEventArgs e)\r\n         {\r\n\r\n            txtStatus.Text= \"MediaElement failed: \" + e.ErrorMessage;\r\n         }\r\n\r\n         private void MediaEnded(object sender, RoutedEventArgs e)\r\n         {\r\n\r\n            txtStatus.Text =\"MediaElement ended.\";\r\n         }\r\n\r\n         # endregion Media Element Event Handlers\r\n\r\n3. 在 **MainPage** 构造函数的末尾，添加以下代码以订阅事件：\r\n\r\n         mediaElement.MediaOpened += MediaOpened;\r\n         mediaElement.MediaEnded += MediaEnded;\r\n         mediaElement.MediaFailed += MediaFailed;\r\n\r\n4. 按 **CTRL+S** 保存文件。\r\n\r\n**添加滚动条相关的代码**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看代码”。\r\n2. 在该文件的开头，添加以下 using 语句：\r\n\r\n        using Windows.UI.Core;\r\n\r\n3. 在 **MainPage** 类中，添加以下数据成员：\r\n\r\n         public static CoreDispatcher _dispatcher;\r\n         private DispatcherTimer sliderPositionUpdateDispatcher;\r\n\r\n4. 在 **MainPage** 构造函数的末尾，添加以下代码：\r\n\r\n         _dispatcher = Window.Current.Dispatcher;\r\n         PointerEventHandler pointerpressedhandler = new PointerEventHandler(sliderProgress_PointerPressed);\r\n         sliderProgress.AddHandler(Control.PointerPressedEvent, pointerpressedhandler, true);    \r\n\r\n5. 在 **MainPage** 类的末尾，添加以下代码：\r\n\r\n         # region sliderMediaPlayer\r\n         private double SliderFrequency(TimeSpan timevalue)\r\n         {\r\n\r\n            long absvalue = 0;\r\n            double stepfrequency = -1;\r\n\r\n            if (manifestObject != null)\r\n            {\r\n                absvalue = manifestObject.Duration - (long)manifestObject.StartTime;\r\n            }\r\n            else\r\n            {\r\n                absvalue = mediaElement.NaturalDuration.TimeSpan.Ticks;\r\n            }\r\n\r\n            TimeSpan totalDVRDuration = new TimeSpan(absvalue);\r\n\r\n            if (totalDVRDuration.TotalMinutes >= 10 && totalDVRDuration.TotalMinutes < 30)\r\n            {\r\n               stepfrequency = 10;\r\n            }\r\n            else if (totalDVRDuration.TotalMinutes >= 30 \r\n                     && totalDVRDuration.TotalMinutes < 60)\r\n            {\r\n                stepfrequency = 30;\r\n            }\r\n            else if (totalDVRDuration.TotalHours >= 1)\r\n            {\r\n                stepfrequency = 60;\r\n            }\r\n\r\n            return stepfrequency;\r\n         }\r\n\r\n         void updateSliderPositionoNTicks(object sender, object e)\r\n         {\r\n\r\n            sliderProgress.Value = mediaElement.Position.TotalSeconds;\r\n         }\r\n\r\n         public void setupTimer()\r\n         {\r\n\r\n            sliderPositionUpdateDispatcher = new DispatcherTimer();\r\n            sliderPositionUpdateDispatcher.Interval = new TimeSpan(0, 0, 0, 0, 300);\r\n            startTimer();\r\n         }\r\n\r\n         public void startTimer()\r\n         {\r\n\r\n            sliderPositionUpdateDispatcher.Tick += updateSliderPositionoNTicks;\r\n            sliderPositionUpdateDispatcher.Start();\r\n         }\r\n\r\n         // Slider start and end time must be updated in case of live content\r\n         public async void setSliderStartTime(long startTime)\r\n         {\r\n\r\n            await _dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\r\n            {\r\n                TimeSpan timespan = new TimeSpan(adaptiveSourceStatusUpdate.StartTime);\r\n                double absvalue = (int)Math.Round(timespan.TotalSeconds, MidpointRounding.AwayFromZero);\r\n                sliderProgress.Minimum = absvalue;\r\n            });\r\n         }\r\n\r\n         // Slider start and end time must be updated in case of live content\r\n         public async void setSliderEndTime(long startTime)\r\n         {\r\n\r\n            await _dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\r\n            {\r\n                TimeSpan timespan = new TimeSpan(adaptiveSourceStatusUpdate.EndTime);\r\n                double absvalue = (int)Math.Round(timespan.TotalSeconds, MidpointRounding.AwayFromZero);\r\n                sliderProgress.Maximum = absvalue;\r\n            });\r\n         }\r\n\r\n         # endregion sliderMediaPlayer\r\n      \r\n    >[!NOTE]\r\n    >CoreDispatcher 用于从非 UI 线程对 UI 线程进行更改。 如果调度程序线程出现瓶颈，开发人员可以选择使用他（她）想要更新的 UI 元素提供的调度程序。  例如：\r\n   \r\n         await sliderProgress.Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () => { TimeSpan \r\n\r\n         timespan = new TimeSpan(adaptiveSourceStatusUpdate.EndTime); \r\n         double absvalue  = (int)Math.Round(timespan.TotalSeconds, MidpointRounding.AwayFromZero); \r\n\r\n         sliderProgress.Maximum = absvalue; }); \r\n     \r\n6. 在 mediaElement_AdaptiveSourceStatusUpdated 方法的末尾，添加以下代码：\r\n\r\n         setSliderStartTime(args.StartTime);\r\n         setSliderEndTime(args.EndTime);\r\n\r\n7. 在 **MediaOpened** 方法的末尾，添加以下代码：\r\n\r\n         sliderProgress.StepFrequency = SliderFrequency(mediaElement.NaturalDuration.TimeSpan);\r\n         sliderProgress.Width = mediaElement.Width;\r\n         setupTimer();\r\n\r\n8. 按 **CTRL+S** 保存文件。\r\n\r\n**编译和测试应用程序**\r\n\r\n1. 按 **F6** 编译项目。 \r\n2. 按 **F5** 运行应用程序。\r\n3. 在应用程序的顶部，可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。 \r\n4. 单击“设置源” 。 \r\n5. 测试滚动条。\r\n\r\n已完成第 2 课。  在本课中，已将一个滑块添加到应用程序。 \r\n\r\n## <a name=\"lesson-3-select-smooth-streaming-streams\"></a>第 3 课：选择平滑流式处理流\r\n平滑流式处理可以使用可由观看者选择的多个语言音轨来流式传输内容。  在本课中，你将要学习如何使观看者能够选择流。 本课包含以下过程：\r\n\r\n1. 修改 XAML 文件\r\n2. 修改代码隐藏文件\r\n3. 编译和测试应用程序\r\n\r\n**修改 XAML 文件**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看设计器”。\r\n2. 找到 &lt;Grid.RowDefinitions&gt;，并按如下所示修改 RowDefinitions：\r\n\r\n         <Grid.RowDefinitions>            \r\n            <RowDefinition Height=\"20\"/>\r\n            <RowDefinition Height=\"50\"/>\r\n            <RowDefinition Height=\"100\"/>\r\n            <RowDefinition Height=\"80\"/>\r\n            <RowDefinition Height=\"50\"/>\r\n         </Grid.RowDefinitions>\r\n\r\n3. 在 &lt;Grid&gt;&lt;/Grid&gt; 标记中，添加以下代码以定义一个列表框控件，使用户能够看到可用流的列表及选择流：\r\n\r\n         <Grid Name=\"gridStreamAndBitrateSelection\" Grid.Row=\"3\">\r\n            <Grid.RowDefinitions>\r\n                <RowDefinition Height=\"300\"/>\r\n            </Grid.RowDefinitions>\r\n            <Grid.ColumnDefinitions>\r\n                <ColumnDefinition Width=\"250*\"/>\r\n                <ColumnDefinition Width=\"250*\"/>\r\n            </Grid.ColumnDefinitions>\r\n            <StackPanel Name=\"spStreamSelection\" Grid.Row=\"1\" Grid.Column=\"0\">\r\n                <StackPanel Orientation=\"Horizontal\">\r\n                    <TextBlock Name=\"tbAvailableStreams\" Text=\"Available Streams:\" FontSize=\"16\" VerticalAlignment=\"Center\"></TextBlock>\r\n                    <Button Name=\"btnChangeStreams\" Content=\"Submit\" Click=\"btnChangeStream_Click\"/>\r\n                </StackPanel>\r\n                <ListBox x:Name=\"lbAvailableStreams\" Height=\"200\" Width=\"200\" Background=\"Transparent\" HorizontalAlignment=\"Left\" \r\n                    ScrollViewer.VerticalScrollMode=\"Enabled\" ScrollViewer.VerticalScrollBarVisibility=\"Visible\">\r\n                    <ListBox.ItemTemplate>\r\n                        <DataTemplate>\r\n                            <CheckBox Content=\"{Binding Name}\" IsChecked=\"{Binding isChecked, Mode=TwoWay}\" />\r\n                        </DataTemplate>\r\n                    </ListBox.ItemTemplate>\r\n                </ListBox>\r\n            </StackPanel>\r\n         </Grid>\r\n\r\n4. 按 **CTRL+S** 保存更改。\r\n\r\n**修改代码隐藏文件**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看代码”。\r\n2. 在 SSPlayer 命名空间中添加一个新类：\r\n        #region class Stream\r\n   \r\n        public class Stream\r\n        {\r\n            private IManifestStream stream;\r\n            public bool isCheckedValue;\r\n            public string name;\r\n   \r\n            public string Name\r\n            {\r\n                get { return name; }\r\n                set { name = value; }\r\n            }\r\n   \r\n            public IManifestStream ManifestStream\r\n            {\r\n                get { return stream; }\r\n                set { stream = value; }\r\n            }\r\n   \r\n            public bool isChecked\r\n            {\r\n                get { return isCheckedValue; }\r\n                set\r\n                {\r\n                    // mMke the video stream always checked.\r\n                    if (stream.Type == MediaStreamType.Video)\r\n                    {\r\n                        isCheckedValue = true;\r\n                    }\r\n                    else\r\n                    {\r\n                        isCheckedValue = value;\r\n                    }\r\n                }\r\n            }\r\n   \r\n            public Stream(IManifestStream streamIn)\r\n            {\r\n                stream = streamIn;\r\n                name = stream.Name;\r\n            }\r\n        }\r\n        #endregion class Stream\r\n    \r\n3. 在 MainPage 类的开头，添加以下变量定义：\r\n\r\n         private List<Stream> availableStreams;\r\n         private List<Stream> availableAudioStreams;\r\n         private List<Stream> availableTextStreams;\r\n         private List<Stream> availableVideoStreams;\r\n\r\n4. 在 MainPage 类中，添加以下区域：\r\n\r\n        #region stream selection\r\n        ///<summary>\r\n        ///Functionality to select streams from IManifestStream available streams\r\n        /// </summary>\r\n   \r\n        // This function is called from the mediaElement_ManifestReady event handler \r\n        // to retrieve the streams and populate them to the local data members.\r\n        public void getStreams(Manifest manifestObject)\r\n        {\r\n            availableStreams = new List<Stream>();\r\n            availableVideoStreams = new List<Stream>();\r\n            availableAudioStreams = new List<Stream>();\r\n            availableTextStreams = new List<Stream>();\r\n   \r\n            try\r\n            {\r\n                for (int i = 0; i<manifestObject.AvailableStreams.Count; i++)\r\n                {\r\n                    Stream newStream = new Stream(manifestObject.AvailableStreams[i]);\r\n                    newStream.isChecked = false;\r\n   \r\n                    //populate the stream lists based on the types\r\n                    availableStreams.Add(newStream);\r\n   \r\n                    switch (newStream.ManifestStream.Type)\r\n                    {\r\n                        case MediaStreamType.Video:\r\n                            availableVideoStreams.Add(newStream);\r\n                            break;\r\n                        case MediaStreamType.Audio:\r\n                            availableAudioStreams.Add(newStream);\r\n                            break;\r\n                        case MediaStreamType.Text:\r\n                            availableTextStreams.Add(newStream);\r\n                            break;\r\n                    }\r\n   \r\n                    // Select the default selected streams from the manifest.\r\n                    for (int j = 0; j<manifestObject.SelectedStreams.Count; j++)\r\n                    {\r\n                        string selectedStreamName = manifestObject.SelectedStreams[j].Name;\r\n                        if (selectedStreamName.Equals(newStream.Name))\r\n                        {\r\n                            newStream.isChecked = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                txtStatus.Text = \"Error: \" + e.Message;\r\n            }\r\n        }\r\n   \r\n        // This function set the list box ItemSource\r\n        private async void refreshAvailableStreamsListBoxItemSource()\r\n        {\r\n            try\r\n            {\r\n                //update the stream check box list on the UI\r\n                await _dispatcher.RunAsync(CoreDispatcherPriority.Normal, ()\r\n                    => { lbAvailableStreams.ItemsSource = availableStreams; });\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                txtStatus.Text = \"Error: \" + e.Message;\r\n            }\r\n        }\r\n   \r\n        // This function creates a selected streams list\r\n        private void createSelectedStreamsList(List<IManifestStream> selectedStreams)\r\n        {\r\n            bool isOneVideoSelected = false;\r\n            bool isOneAudioSelected = false;\r\n   \r\n            // Only one video stream can be selected\r\n            for (int j = 0; j<availableVideoStreams.Count; j++)\r\n            {\r\n                if (availableVideoStreams[j].isChecked && (!isOneVideoSelected))\r\n                {\r\n                    selectedStreams.Add(availableVideoStreams[j].ManifestStream);\r\n                    isOneVideoSelected = true;\r\n                }\r\n            }\r\n   \r\n            // Select the frist video stream from the list if no video stream is selected\r\n            if (!isOneVideoSelected)\r\n            {\r\n                availableVideoStreams[0].isChecked = true;\r\n                selectedStreams.Add(availableVideoStreams[0].ManifestStream);\r\n            }\r\n   \r\n            // Only one audio stream can be selected\r\n            for (int j = 0; j<availableAudioStreams.Count; j++)\r\n            {\r\n                if (availableAudioStreams[j].isChecked && (!isOneAudioSelected))\r\n                {\r\n                    selectedStreams.Add(availableAudioStreams[j].ManifestStream);\r\n                    isOneAudioSelected = true;\r\n                    txtStatus.Text = \"The audio stream is changed to \" + availableAudioStreams[j].ManifestStream.Name;\r\n                }\r\n            }\r\n   \r\n            // Select the frist audio stream from the list if no audio steam is selected.\r\n            if (!isOneAudioSelected)\r\n            {\r\n                availableAudioStreams[0].isChecked = true;\r\n                selectedStreams.Add(availableAudioStreams[0].ManifestStream);\r\n            }\r\n   \r\n            // Multiple text streams are supported.\r\n            for (int j = 0; j < availableTextStreams.Count; j++)\r\n            {\r\n                if (availableTextStreams[j].isChecked)\r\n                {\r\n                    selectedStreams.Add(availableTextStreams[j].ManifestStream);\r\n                }\r\n            }\r\n        }\r\n   \r\n        // Change streams on a smooth streaming presentation with multiple video streams.\r\n        private async void changeStreams(List<IManifestStream> selectStreams)\r\n        {\r\n            try\r\n            {\r\n                IReadOnlyList<IStreamChangedResult> returnArgs =\r\n                    await manifestObject.SelectStreamsAsync(selectStreams);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                txtStatus.Text = \"Error: \" + e.Message;\r\n            }\r\n        }\r\n        #endregion stream selection\r\n\r\n5. 找到 mediaElement_ManifestReady 方法，并在函数的末尾追加以下代码：\r\n\r\n        getStreams(manifestObject);\r\n        refreshAvailableStreamsListBoxItemSource();\r\n   \r\n\r\n    因此，当 MediaElement 清单准备就绪时，该代码将获取可用流的列表，并将该列表的内容填充到 UI 列表框。\r\n\r\n6. 在 MainPage 类中，找到 UI 按钮单击事件区域，并添加以下函数定义：\r\n\r\n        private void btnChangeStream_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            List<IManifestStream> selectedStreams = new List<IManifestStream>();\r\n   \r\n            // Create a list of the selected streams\r\n            createSelectedStreamsList(selectedStreams);\r\n   \r\n            // Change streams on the presentation\r\n            changeStreams(selectedStreams);\r\n        }\r\n\r\n**编译和测试应用程序**\r\n\r\n1. 按 **F6** 编译项目。 \r\n2. 按 **F5** 运行应用程序。\r\n3. 在应用程序的顶部，可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。 \r\n4. 单击“设置源” 。 \r\n5. 默认语言为 audio_eng。 尝试在 audio_eng 和 audio_es 之间切换。 每次选择一个新流时，都必须单击“提交”按钮。\r\n\r\n已完成第 3 课。  本课中添加了用于选择流的功能。\r\n\r\n## <a name=\"lesson-4-select-smooth-streaming-tracks\"></a>第 4 课：选择平滑流式处理曲目\r\n平滑流式处理演播内容可能包含以不同质量级别（比特率）和分辨率编码的多个视频文件。 在本课中，将要学习如何使用户能够选择曲目。 本课包含以下过程：\r\n\r\n1. 修改 XAML 文件\r\n2. 修改代码隐藏文件\r\n3. 编译和测试应用程序\r\n\r\n**修改 XAML 文件**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看设计器”。\r\n2. 找到名为 gridStreamAndBitrateSelection 的 &lt;Grid&gt; 标记，并在该标记的末尾追加以下代码：\r\n\r\n         <StackPanel Name=\"spBitRateSelection\" Grid.Row=\"1\" Grid.Column=\"1\">\r\n         <StackPanel Orientation=\"Horizontal\">\r\n             <TextBlock Name=\"tbBitRate\" Text=\"Available Bitrates:\" FontSize=\"16\" VerticalAlignment=\"Center\"/>\r\n             <Button Name=\"btnChangeTracks\" Content=\"Submit\" Click=\"btnChangeTrack_Click\" />\r\n         </StackPanel>\r\n         <ListBox x:Name=\"lbAvailableVideoTracks\" Height=\"200\" Width=\"200\" Background=\"Transparent\" HorizontalAlignment=\"Left\" \r\n                  ScrollViewer.VerticalScrollMode=\"Enabled\" ScrollViewer.VerticalScrollBarVisibility=\"Visible\">\r\n             <ListBox.ItemTemplate>\r\n                 <DataTemplate>\r\n                     <CheckBox Content=\"{Binding Bitrate}\" IsChecked=\"{Binding isChecked, Mode=TwoWay}\"/>\r\n                 </DataTemplate>\r\n             </ListBox.ItemTemplate>\r\n         </ListBox>\r\n         </StackPanel>\r\n\r\n3. 按 **CTRL+S** 保存更改\r\n\r\n**修改代码隐藏文件**\r\n\r\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，并单击“查看代码”。\r\n2. 在 SSPlayer 命名空间中添加一个新类：\r\n\r\n        #region class Track\r\n        public class Track\r\n        {\r\n            private IManifestTrack trackInfo;\r\n            public string _bitrate;\r\n            public bool isCheckedValue;\r\n   \r\n            public IManifestTrack TrackInfo\r\n            {\r\n                get { return trackInfo; }\r\n                set { trackInfo = value; }\r\n            }\r\n   \r\n            public string Bitrate\r\n            {\r\n                get { return _bitrate; }\r\n                set { _bitrate = value; }\r\n            }\r\n   \r\n            public bool isChecked\r\n            {\r\n                get { return isCheckedValue; }\r\n                set\r\n                {\r\n                    isCheckedValue = value;\r\n                }\r\n            }\r\n   \r\n            public Track(IManifestTrack trackInfoIn)\r\n            {\r\n                trackInfo = trackInfoIn;\r\n                _bitrate = trackInfoIn.Bitrate.ToString();\r\n            }\r\n            //public Track() { }\r\n        }\r\n        #endregion class Track\r\n\r\n3. 在 MainPage 类的开头，添加以下变量定义：\r\n\r\n        private List<Track> availableTracks;\r\n\r\n4. 在 MainPage 类中，添加以下区域：\r\n\r\n        #region track selection\r\n        /// <summary>\r\n        /// Functionality to select video streams\r\n        /// </summary>\r\n   \r\n        /// This Function gets the tracks for the selected video stream\r\n        public void getTracks(Manifest manifestObject)\r\n        {\r\n            availableTracks = new List<Track>();\r\n   \r\n            IManifestStream videoStream = getVideoStream();\r\n            IReadOnlyList<IManifestTrack> availableTracksLocal = videoStream.AvailableTracks;\r\n            IReadOnlyList<IManifestTrack> selectedTracksLocal = videoStream.SelectedTracks;\r\n   \r\n            try\r\n            {\r\n                for (int i = 0; i < availableTracksLocal.Count; i++)\r\n                {\r\n                    Track thisTrack = new Track(availableTracksLocal[i]);\r\n                    thisTrack.isChecked = true;\r\n   \r\n                    for (int j = 0; j < selectedTracksLocal.Count; j++)\r\n                    {\r\n                        string selectedTrackName = selectedTracksLocal[j].Bitrate.ToString();\r\n                        if (selectedTrackName.Equals(thisTrack.Bitrate))\r\n                        {\r\n                            thisTrack.isChecked = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    availableTracks.Add(thisTrack);\r\n                }\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                txtStatus.Text = e.Message;\r\n            }\r\n        }\r\n   \r\n        // This function gets the video stream that is playing\r\n        private IManifestStream getVideoStream()\r\n        {\r\n            IManifestStream videoStream = null;\r\n            for (int i = 0; i < manifestObject.SelectedStreams.Count; i++)\r\n            {\r\n                if (manifestObject.SelectedStreams[i].Type == MediaStreamType.Video)\r\n                {\r\n                    videoStream = manifestObject.SelectedStreams[i];\r\n                    break;\r\n                }\r\n            }\r\n            return videoStream;\r\n        }\r\n   \r\n        // This function set the UI list box control ItemSource\r\n        private async void refreshAvailableTracksListBoxItemSource()\r\n        {\r\n            try\r\n            {\r\n                // Update the track check box list on the UI \r\n                await _dispatcher.RunAsync(CoreDispatcherPriority.Normal, ()\r\n                    => { lbAvailableVideoTracks.ItemsSource = availableTracks; });\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                txtStatus.Text = \"Error: \" + e.Message;\r\n            }        \r\n        }\r\n   \r\n        // This function creates a list of the selected tracks.\r\n        private void createSelectedTracksList(List<IManifestTrack> selectedTracks)\r\n        {\r\n            // Create a list of selected tracks\r\n            for (int j = 0; j < availableTracks.Count; j++)\r\n            {\r\n                if (availableTracks[j].isCheckedValue == true)\r\n                {\r\n                    selectedTracks.Add(availableTracks[j].TrackInfo);\r\n                }\r\n            }\r\n        }\r\n   \r\n        // This function selects the tracks based on user selection \r\n        private void changeTracks(List<IManifestTrack> selectedTracks)\r\n        {\r\n            IManifestStream videoStream = getVideoStream();\r\n            try\r\n            {\r\n                videoStream.SelectTracks(selectedTracks);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                txtStatus.Text = ex.Message;\r\n            }\r\n        }\r\n        #endregion track selection\r\n\r\n5. 找到 mediaElement_ManifestReady 方法，并在函数的末尾追加以下代码：\r\n\r\n         getTracks(manifestObject);\r\n         refreshAvailableTracksListBoxItemSource();\r\n\r\n6. 在 MainPage 类中，找到 UI 按钮单击事件区域，并添加以下函数定义：\r\n   \r\n         private void btnChangeStream_Click(object sender, RoutedEventArgs e)\r\n         {\r\n            List<IManifestStream> selectedStreams = new List<IManifestStream>();\r\n\r\n            // Create a list of the selected streams\r\n            createSelectedStreamsList(selectedStreams);\r\n\r\n            // Change streams on the presentation\r\n            changeStreams(selectedStreams);\r\n         }\r\n\r\n**编译和测试应用程序**\r\n\r\n1. 按 **F6** 编译项目。 \r\n2. 按 **F5** 运行应用程序。\r\n3. 在应用程序的顶部，可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。 \r\n4. 单击“设置源” 。 \r\n5. 默认情况下，已选中视频流的所有曲目。 如果要体验比特率的变化，可以先选择最低的可用比特率，再选择最高的可用比特率。 每次更改后都必须单击“提交”。  可以看到视频质量的变化。\r\n\r\n已完成第 4 课。  在本课中，已添加了用于选择曲目的功能。\r\n\r\n## <a name=\"other-resources\"></a>其他资源：\r\n* [如何生成具有高级功能的平滑流式处理 Windows 8 JavaScript 应用程序](http://blogs.iis.net/cenkd/archive/2012/08/10/how-to-build-a-smooth-streaming-windows-8-javascript-application-with-advanced-features.aspx)\r\n* [平滑流式处理技术概述](http://www.iis.net/learn/media/on-demand-smooth-streaming/smooth-streaming-technical-overview)\r\n\r\n[PlayerApplication]: ./media/media-services-build-smooth-streaming-apps/SSClientWin8-1.png\r\n[CodeViewPic]: ./media/media-services-build-smooth-streaming-apps/SSClientWin8-2.png\r\n<!--Update_Description: update Prerequisites, support Visual Studio 2015-->"}