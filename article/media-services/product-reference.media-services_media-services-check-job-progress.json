{"Title":"使用 .NET 监视作业进度","Description":"了解如何使用事件处理程序代码来跟踪作业进度并发送状态更新。 代码示例用 C# 编写，并使用用于 .NET 的媒体服务 SDK。","Content":"# <a name=\"monitor-job-progress-using-net\"></a>使用 .NET 监视作业进度\r\n> [!div class=\"op_single_selector\"]\r\n> * [门户](media-services-portal-check-job-progress.md)\r\n> * [.NET](media-services-check-job-progress.md)\r\n> * [REST](media-services-rest-check-job-progress.md)\r\n> \r\n> \r\n\r\n运行作业时，通常需要采用某种方式跟踪作业进度。 可以通过定义 StateChanged 事件处理程序（如本主题中所述）或使用 Azure 队列存储监视媒体服务作业通知（如[此主题](media-services-dotnet-check-job-progress-with-queues.md)中所述）来检查进度。\r\n\r\n##<a id=\"statechange_event_handler\"></a>定义 StateChanged 事件处理程序以监视作业进度\r\n\r\n以下代码示例定义了 StateChanged 事件处理程序。 此事件处理程序跟踪作业进度，并根据现状提供更新的状态。 该代码还定义了 LogJobStop 方法。 此 helper 方法记录错误详细信息。\r\n\r\n```\r\nprivate static void StateChanged(object sender, JobStateChangedEventArgs e)\r\n{\r\n    Console.WriteLine(\"Job state changed event:\");\r\n    Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r\n    Console.WriteLine(\"  Current state: \" + e.CurrentState);\r\n\r\n    switch (e.CurrentState)\r\n    {\r\n        case JobState.Finished:\r\n            Console.WriteLine();\r\n            Console.WriteLine(\"********************\");\r\n            Console.WriteLine(\"Job is finished.\");\r\n            Console.WriteLine(\"Please wait while local tasks or downloads complete...\");\r\n            Console.WriteLine(\"********************\");\r\n            Console.WriteLine();\r\n            Console.WriteLine();\r\n            break;\r\n        case JobState.Canceling:\r\n        case JobState.Queued:\r\n        case JobState.Scheduled:\r\n        case JobState.Processing:\r\n            Console.WriteLine(\"Please wait...\\n\");\r\n            break;\r\n        case JobState.Canceled:\r\n        case JobState.Error:\r\n            // Cast sender as a job.\r\n            IJob job = (IJob)sender;\r\n            // Display or log error details as needed.\r\n            LogJobStop(job.Id);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nprivate static void LogJobStop(string jobId)\r\n{\r\n    StringBuilder builder = new StringBuilder();\r\n    IJob job = GetJob(jobId);\r\n\r\n    builder.AppendLine(\"\\nThe job stopped due to cancellation or an error.\");\r\n    builder.AppendLine(\"***************************\");\r\n    builder.AppendLine(\"Job ID: \" + job.Id);\r\n    builder.AppendLine(\"Job Name: \" + job.Name);\r\n    builder.AppendLine(\"Job State: \" + job.State.ToString());\r\n    builder.AppendLine(\"Job started (server UTC time): \" + job.StartTime.ToString());\r\n    builder.AppendLine(\"Media Services account name: \" + _accountName);\r\n    builder.AppendLine(\"Media Services account location: \" + _accountLocation);\r\n    // Log job errors if they exist.  \r\n    if (job.State == JobState.Error)\r\n    {\r\n        builder.Append(\"Error Details: \\n\");\r\n        foreach (ITask task in job.Tasks)\r\n        {\r\n            foreach (ErrorDetail detail in task.ErrorDetails)\r\n            {\r\n                builder.AppendLine(\"  Task Id: \" + task.Id);\r\n                builder.AppendLine(\"    Error Code: \" + detail.Code);\r\n                builder.AppendLine(\"    Error Message: \" + detail.Message + \"\\n\");\r\n            }\r\n        }\r\n    }\r\n    builder.AppendLine(\"***************************\\n\");\r\n    // Write the output to a local file and to the console. The template \r\n    // for an error output file is:  JobStop-{JobId}.txt\r\n    string outputFile = _outputFilesFolder + @\"\\JobStop-\" + JobIdAsFileName(job.Id) + \".txt\";\r\n    WriteToFile(outputFile, builder.ToString());\r\n    Console.Write(builder.ToString());\r\n}\r\n\r\nprivate static string JobIdAsFileName(string jobID)\r\n{\r\n    return jobID.Replace(\":\", \"_\");\r\n}\r\n```\r\n"}