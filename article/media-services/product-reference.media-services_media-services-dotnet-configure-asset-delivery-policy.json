{"Title":"使用 .NET SDK 配置资产传送策略","Description":"本主题说明如何通过 Azure 媒体服务 .NET SDK 配置不同的资产传送策略。","Content":"# <a name=\"configure-asset-delivery-policies-with-net-sdk\"></a>使用 .NET SDK 配置资产传送策略\r\n[!INCLUDE [media-services-selector-asset-delivery-policy](../../includes/media-services-selector-asset-delivery-policy.md)]\r\n\r\n## <a name=\"overview\"></a>概述\r\n如果打算传送加密资产，媒体服务内容传送工作流中的步骤之一是为资产配置传送策略。 资产传送策略告知媒体服务希望如何传送资产：应该将资产动态打包成哪种流式处理协议（例如 MPEG DASH、HLS、平滑流或全部），是否要动态加密资产以及如何加密（信封或常用加密）。\r\n\r\n本主题介绍创建和配置资产传送策略的原因和方式。\r\n\r\n>[!NOTE]\r\n>创建 AMS 帐户后，会将一个处于“已停止”状态的**默认**流式处理终结点添加到帐户。 若要开始流式传输内容并利用动态打包和动态加密，要从中流式传输内容的流式处理终结点必须处于“正在运行”状态。 \r\n>\r\n>此外，若要使用动态打包和动态加密，用户的资产必须包含一组自适应比特率 MP4 或自适应比特率平滑流式处理文件。\r\n\r\n可以将不同的策略应用到同一个资产。 例如，可以将 PlayReady 加密应用到平滑流式处理，将 AES 信封加密应用到 MPEG DASH 和 HLS。 将阻止流式处理传送策略中未定义的任何协议（例如，添加仅将 HLS 指定为协议的单个策略）。 如果根本没有定义任何传送策略，则情况不是这样。 此时，所有协议都可以通过。\r\n\r\n如果要传送存储加密资产，则必须配置资产的传送策略。 在流式传输资产之前，流式处理服务器会删除存储加密，再使用指定的传送策略流式传输用户的内容。 例如，若要传送使用高级加密标准 (AES) 信封加密密钥加密的资产，请将策略类型设为“DynamicEnvelopeEncryption”。 要删除存储加密并以明文的形式流式传输资产，请将策略类型设置为 **NoDynamicEncryption**。 下面是演示如何配置这些策略类型的示例。\r\n\r\n根据配置资产传送策略的方式，可以动态打包、动态加密和流式传输以下流式传输协议：平滑流式处理、HLS和 MPEG DASH 流。\r\n\r\n以下列表显示了用于流式传输平滑流、HLS 和 DASH。\r\n\r\n平滑流式处理：\r\n\r\n```\r\n{streaming endpoint name-media services account name}.streaming.mediaservices.chinacloudapi.cn/{locator ID}/{filename}.ism/Manifest\r\n```\r\n\r\nHLS：\r\n\r\n```\r\n{streaming endpoint name-media services account name}.streaming.mediaservices.chinacloudapi.cn/{locator ID}/{filename}.ism/Manifest(format=m3u8-aapl)\r\n```\r\n\r\nMPEG DASH\r\n\r\n```\r\n{streaming endpoint name-media services account name}.streaming.mediaservices.chinacloudapi.cn/{locator ID}/{filename}.ism/Manifest(format=mpd-time-csf) \r\n```\r\n\r\n## <a name=\"considerations\"></a>注意事项\r\n* 如果某个资产存在 OnDemand（流式处理）定位符，则不能删除与该资产关联的 AssetDeliveryPolicy。 在删除策略之前，建议先从资产中删除该策略。\r\n* 如果未设置资产传送策略，则无法在存储加密的资产上创建流式处理定位符。  如果资产未经过存储加密，则即使未设置资产传送策略，系统也可让你以明文形式创建定位符和流式处理资产。\r\n* 可将多个资产传送策略关联到单个资产，但只能指定一种方法来处理给定的 AssetDeliveryProtocol。  也就是说，如果尝试链接两个指定 AssetDeliveryProtocol.SmoothStreaming 协议的传送策略，则会导致出错，因为当客户端发出平滑流式处理请求时，系统不知道要应用哪个策略。\r\n* 如果资产包含现有的流式处理定位符，则不能将新策略链接到该资产（可以取消现有策略与资产的链接，或者更新与该资产关联的传送策略）。  必须先删除流式处理定位符，调整策略，再重新创建流式处理定位符。  在重新创建流式处理定位符时可以使用同一个 locatorId，但应确保该操作不会导致客户端出现问题，因为内容可能已由来源或下游 CDN 缓存。\r\n\r\n## <a name=\"clear-asset-delivery-policy\"></a>清除资产传送策略 \r\n\r\n以下“ConfigureClearAssetDeliveryPolicy”方法会指定不应用动态加密，而是使用以下任一协议传送流：MPEG DASH、HLS 和平滑流协议。 可能需要对存储加密资产应用此策略。\r\n\r\n有关创建 AssetDeliveryPolicy 时可以指定哪些值的信息，请参阅 [定义 AssetDeliveryPolicy 时使用的类型](#types) 部分。 \r\n\r\n```\r\nstatic public void ConfigureClearAssetDeliveryPolicy(IAsset asset)\r\n{\r\n    IAssetDeliveryPolicy policy =\r\n        _context.AssetDeliveryPolicies.Create(\"Clear Policy\",\r\n        AssetDeliveryPolicyType.NoDynamicEncryption, \r\n        AssetDeliveryProtocol.HLS | AssetDeliveryProtocol.SmoothStreaming | AssetDeliveryProtocol.Dash, null);\r\n\r\n    asset.DeliveryPolicies.Add(policy);\r\n}\r\n```\r\n\r\n## <a name=\"dynamiccommonencryption-asset-delivery-policy\"></a>DynamicCommonEncryption 资产传送策略 \r\n\r\n以下“CreateAssetDeliveryPolicy”方法将创建“AssetDeliveryPolicy”，该策略配置为将动态常用加密 (“DynamicCommonEncryption”) 应用到平滑流式处理协议（将阻止流式处理其他协议）。 该方法采用以下两种参数：Asset（要应用传送策略的资产）和 IContentKey（CommonEncryption 类型的内容密钥，有关详细信息，请参阅：[创建内容密钥](./media-services-dotnet-create-contentkey.md#common_contentkey)）。\r\n\r\n有关创建 AssetDeliveryPolicy 时可以指定哪些值的信息，请参阅 [定义 AssetDeliveryPolicy 时使用的类型](#types) 部分。 \r\n\r\n```\r\nstatic public void CreateAssetDeliveryPolicy(IAsset asset, IContentKey key)\r\n{\r\n    Uri acquisitionUrl = key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense);\r\n\r\n    Dictionary<AssetDeliveryPolicyConfigurationKey, string> assetDeliveryPolicyConfiguration =\r\n        new Dictionary<AssetDeliveryPolicyConfigurationKey, string>\r\n    {\r\n        {AssetDeliveryPolicyConfigurationKey.PlayReadyLicenseAcquisitionUrl, acquisitionUrl.ToString()},\r\n    };\r\n\r\n    var assetDeliveryPolicy = _context.AssetDeliveryPolicies.Create(\r\n            \"AssetDeliveryPolicy\",\r\n        AssetDeliveryPolicyType.DynamicCommonEncryption,\r\n        AssetDeliveryProtocol.SmoothStreaming,\r\n        assetDeliveryPolicyConfiguration);\r\n\r\n    // Add AssetDelivery Policy to the asset\r\n    asset.DeliveryPolicies.Add(assetDeliveryPolicy);\r\n\r\n    Console.WriteLine();\r\n    Console.WriteLine(\"Adding Asset Delivery Policy: \" +\r\n        assetDeliveryPolicy.AssetDeliveryPolicyType);\r\n}\r\n```\r\n\r\n下例演示将 PlayReady 添加到资产传送策略。\r\n\r\n```\r\nstatic public void CreateAssetDeliveryPolicy(IAsset asset, IContentKey key)\r\n{\r\n    // Get the PlayReady license service URL.\r\n    Uri acquisitionUrl = key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense);\r\n\r\n    Dictionary<AssetDeliveryPolicyConfigurationKey, string> assetDeliveryPolicyConfiguration =\r\n        new Dictionary<AssetDeliveryPolicyConfigurationKey, string>\r\n    {\r\n        {AssetDeliveryPolicyConfigurationKey.PlayReadyLicenseAcquisitionUrl, acquisitionUrl.ToString()}\r\n\r\n    };\r\n\r\n    var assetDeliveryPolicy = _context.AssetDeliveryPolicies.Create(\r\n            \"AssetDeliveryPolicy\",\r\n        AssetDeliveryPolicyType.DynamicCommonEncryption,\r\n        AssetDeliveryProtocol.Dash,\r\n        assetDeliveryPolicyConfiguration);\r\n\r\n    // Add AssetDelivery Policy to the asset\r\n    asset.DeliveryPolicies.Add(assetDeliveryPolicy);\r\n\r\n}\r\n```\r\n\r\n## <a name=\"dynamicenvelopeencryption-asset-delivery-policy\"></a>DynamicEnvelopeEncryption 资产传送策略 \r\n\r\n以下“CreateAssetDeliveryPolicy”方法将创建“AssetDeliveryPolicy”，该策略配置为将动态信封加密 (“DynamicEnvelopeEncryption”) 应用到平滑流式处理、HLS 和 DASH 协议（如果不指定协议，则将阻止对这些协议进行流式处理）。 该方法采用以下两种参数：Asset（要应用传送策略的资产）和 IContentKey（EnvelopeEncryption 类型的内容密钥。有关详细信息，请参阅：[创建内容密钥](./media-services-dotnet-create-contentkey.md#envelope_contentkey)）。\r\n\r\n有关创建 AssetDeliveryPolicy 时可以指定哪些值的信息，请参阅 [定义 AssetDeliveryPolicy 时使用的类型](#types) 部分。   \r\n\r\n```\r\nprivate static void CreateAssetDeliveryPolicy(IAsset asset, IContentKey key)\r\n{\r\n\r\n    //  Get the Key Delivery Base Url by removing the Query parameter.  The Dynamic Encryption service will\r\n    //  automatically add the correct key identifier to the url when it generates the Envelope encrypted content\r\n    //  manifest.  Omitting the IV will also cause the Dynamice Encryption service to generate a deterministic\r\n    //  IV for the content automatically.  By using the EnvelopeBaseKeyAcquisitionUrl and omitting the IV, this\r\n    //  allows the AssetDelivery policy to be reused by more than one asset.\r\n    //\r\n    Uri keyAcquisitionUri = key.GetKeyDeliveryUrl(ContentKeyDeliveryType.BaselineHttp);\r\n    UriBuilder uriBuilder = new UriBuilder(keyAcquisitionUri);\r\n    uriBuilder.Query = String.Empty;\r\n    keyAcquisitionUri = uriBuilder.Uri;\r\n\r\n    // The following policy configuration specifies: \r\n    //   key url that will have KID=<Guid> appended to the envelope and\r\n    //   the Initialization Vector (IV) to use for the envelope encryption.\r\n    Dictionary<AssetDeliveryPolicyConfigurationKey, string> assetDeliveryPolicyConfiguration =\r\n        new Dictionary<AssetDeliveryPolicyConfigurationKey, string> \r\n    {\r\n        {AssetDeliveryPolicyConfigurationKey.EnvelopeBaseKeyAcquisitionUrl, keyAcquisitionUri.ToString()},\r\n    };\r\n\r\n    IAssetDeliveryPolicy assetDeliveryPolicy =\r\n        _context.AssetDeliveryPolicies.Create(\r\n                    \"AssetDeliveryPolicy\",\r\n                    AssetDeliveryPolicyType.DynamicEnvelopeEncryption,\r\n                    AssetDeliveryProtocol.SmoothStreaming | AssetDeliveryProtocol.HLS | AssetDeliveryProtocol.Dash,\r\n                    assetDeliveryPolicyConfiguration);\r\n\r\n    // Add AssetDelivery Policy to the asset\r\n    asset.DeliveryPolicies.Add(assetDeliveryPolicy);\r\n\r\n    Console.WriteLine();\r\n    Console.WriteLine(\"Adding Asset Delivery Policy: \" + assetDeliveryPolicy.AssetDeliveryPolicyType);\r\n}\r\n```\r\n\r\n## <a id=\"types\"></a>定义 AssetDeliveryPolicy 时使用的类型\r\n\r\n### <a id=\"AssetDeliveryProtocol\"></a>AssetDeliveryProtocol\r\n\r\n以下枚举说明可以为资产传送协议设置的值。\r\n```\r\n[Flags]\r\npublic enum AssetDeliveryProtocol\r\n{\r\n    /// <summary>\r\n    /// No protocols.\r\n    /// </summary>\r\n    None = 0x0,\r\n\r\n    /// <summary>\r\n    /// Smooth streaming protocol.\r\n    /// </summary>\r\n    SmoothStreaming = 0x1,\r\n\r\n    /// <summary>\r\n    /// MPEG Dynamic Adaptive Streaming over HTTP (DASH)\r\n    /// </summary>\r\n    Dash = 0x2,\r\n\r\n    /// <summary>\r\n    /// Apple HTTP Live Streaming protocol.\r\n    /// </summary>\r\n    HLS = 0x4,\r\n\r\n        ProgressiveDownload = 0x10, \r\n\r\n    /// <summary>\r\n    /// Include all protocols.\r\n    /// </summary>\r\n    All = 0xFFFF\r\n}\r\n```\r\n\r\n### <a id=\"AssetDeliveryPolicyType\"></a>AssetDeliveryPolicyType\r\n\r\n以下枚举说明可以为资产传送策略类型设置的值。  \r\n\r\n```\r\npublic enum AssetDeliveryPolicyType\r\n{\r\n    /// <summary>\r\n    /// Delivery Policy Type not set.  An invalid value.\r\n    /// </summary>\r\n    None,\r\n\r\n    /// <summary>\r\n    /// The Asset should not be delivered via this AssetDeliveryProtocol. \r\n    /// </summary>\r\n    Blocked, \r\n\r\n    /// <summary>\r\n    /// Do not apply dynamic encryption to the asset.\r\n    /// </summary>\r\n    /// \r\n    NoDynamicEncryption,  \r\n\r\n    /// <summary>\r\n    /// Apply Dynamic Envelope encryption.\r\n    /// </summary>\r\n    DynamicEnvelopeEncryption,\r\n\r\n    /// <summary>\r\n    /// Apply Dynamic Common encryption.\r\n    /// </summary>\r\n    DynamicCommonEncryption\r\n}\r\n```\r\n\r\n### <a id=\"ContentKeyDeliveryType\"></a>ContentKeyDeliveryType\r\n\r\n以下枚举说明可用于配置将内容密钥传送到客户端的方法的值。\r\n\r\n```\r\npublic enum ContentKeyDeliveryType\r\n{\r\n    /// <summary>\r\n    /// None.\r\n    ///</summary>\r\n    None = 0,\r\n\r\n    /// <summary>\r\n    /// Use PlayReady License acquistion protocol\r\n    /// </summary>\r\n    PlayReadyLicense = 1,\r\n\r\n    /// <summary>\r\n    /// Use MPEG Baseline HTTP key protocol.\r\n    /// </summary>\r\n    BaselineHttp = 2\r\n\r\n}\r\n```\r\n\r\n### <a id=\"AssetDeliveryPolicyConfigurationKey\"></a>AssetDeliveryPolicyConfigurationKey\r\n\r\n以下枚举说明为配置用于获取资产传送策略的特定配置的密钥可以设置的值。\r\n\r\n```\r\npublic enum AssetDeliveryPolicyConfigurationKey\r\n{\r\n    /// <summary>\r\n    /// No policies.\r\n    /// </summary>\r\n    None,\r\n\r\n    /// <summary>\r\n    /// Exact Envelope key URL.\r\n    /// </summary>\r\n    EnvelopeKeyAcquisitionUrl,\r\n\r\n    /// <summary>\r\n    /// Base key url that will have KID=<Guid> appended for Envelope.\r\n    /// </summary>\r\n    EnvelopeBaseKeyAcquisitionUrl,\r\n\r\n    /// <summary>\r\n    /// The initialization vector to use for envelope encryption in Base64 format.\r\n    /// </summary>\r\n    EnvelopeEncryptionIVAsBase64,\r\n\r\n    /// <summary>\r\n    /// The PlayReady License Acquisition Url to use for common encryption.\r\n    /// </summary>\r\n    PlayReadyLicenseAcquisitionUrl,\r\n\r\n    /// <summary>\r\n    /// The PlayReady Custom Attributes to add to the PlayReady Content Header\r\n    /// </summary>\r\n    PlayReadyCustomAttributes,\r\n\r\n    /// <summary>\r\n    /// The initialization vector to use for envelope encryption.\r\n    /// </summary>\r\n    EnvelopeEncryptionIV\r\n}\r\n```\r\n\r\n<!--Update_Description: update code-->"}