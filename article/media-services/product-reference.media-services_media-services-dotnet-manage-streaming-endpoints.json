{"Title":"使用 .NET SDK 管理流式处理终结点","Description":"本主题说明如何使用 Azure 门户管理流式处理终结点。","Content":"# <a name=\"manage-streaming-endpoints-with-net-sdk\"></a>使用 .NET SDK 管理流式处理终结点\r\n\r\n>[!NOTE]\r\n>请确保查看[概述](media-services-streaming-endpoints-overview.md)主题。 另请查看 [StreamingEndpoint](https://docs.microsoft.com/rest/api/media/operations/streamingendpoint)。\r\n\r\n本主题中的代码演示如何使用 Azure 媒体服务 .NET SDK 执行以下任务：\r\n\r\n- 检查默认的流式处理终结点。\r\n- 创建/添加新的流式处理终结点。\r\n\r\n    如果计划使用不同的 CDN 或者使用一个 CDN 和直接访问，则可能需要多个流式处理终结点。\r\n\r\n    > [!NOTE]\r\n    > 仅当流式处理终结点处于运行状态时才进行计费。\r\n    \r\n- 更新流式处理终结点。\r\n    \r\n    请确保调用 Update() 函数。\r\n\r\n- 删除流式处理终结点。\r\n\r\n    >[!NOTE]\r\n    >无法删除默认流式处理终结点。\r\n\r\n有关如何缩放流式处理终结点的信息，请参阅[此](media-services-portal-scale-streaming-endpoints.md)主题。\r\n\r\n## <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r\n\r\n设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r\n\r\n## <a name=\"add-code-that-manages-streaming-endpoints\"></a>添加管理流式处理终结点的代码\r\n    \r\n将 Program.cs 中的代码替换为以下代码：\r\n\r\n    using System;\r\n    using System.Configuration;\r\n    using System.Linq;\r\n    using Microsoft.WindowsAzure.MediaServices.Client;\r\n    using Microsoft.WindowsAzure.MediaServices.Client.Live;\r\n\r\n    namespace AMSStreamingEndpoint\r\n    {\r\n        class Program\r\n        {\r\n        // Read values from the App.config file.\r\n        private static readonly string _AADTenantDomain =\r\n        ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r\n        private static readonly string _RESTAPIEndpoint =\r\n        ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r\n\r\n        private static CloudMediaContext _context = null;\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n            var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r\n\r\n            _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r\n\r\n            var defaultStreamingEndpoint = _context.StreamingEndpoints.Where(s => s.Name.Contains(\"default\")).FirstOrDefault();\r\n            ExamineStreamingEndpoint(defaultStreamingEndpoint);\r\n\r\n            IStreamingEndpoint newStreamingEndpoint = AddStreamingEndpoint();\r\n            UpdateStreamingEndpoint(newStreamingEndpoint);\r\n            DeleteStreamingEndpoint(newStreamingEndpoint);\r\n        }\r\n\r\n        static public void ExamineStreamingEndpoint(IStreamingEndpoint streamingEndpoint)\r\n        {\r\n            Console.WriteLine(streamingEndpoint.Name);\r\n            Console.WriteLine(streamingEndpoint.StreamingEndpointVersion);\r\n            Console.WriteLine(streamingEndpoint.FreeTrialEndTime);\r\n            Console.WriteLine(streamingEndpoint.ScaleUnits);\r\n            Console.WriteLine(streamingEndpoint.CdnProvider);\r\n            Console.WriteLine(streamingEndpoint.CdnProfile);\r\n            Console.WriteLine(streamingEndpoint.CdnEnabled);\r\n        }\r\n\r\n        static public IStreamingEndpoint AddStreamingEndpoint()\r\n        {\r\n            var name = \"StreamingEndpoint\" + DateTime.UtcNow.ToString(\"hhmmss\");\r\n            var option = new StreamingEndpointCreationOptions(name, 1)\r\n            {\r\n            StreamingEndpointVersion = new Version(\"2.0\"),\r\n            CdnEnabled = true,\r\n            CdnProfile = \"CdnProfile\",\r\n            CdnProvider = CdnProviderType.PremiumVerizon\r\n            };\r\n\r\n            var streamingEndpoint = _context.StreamingEndpoints.Create(option);\r\n\r\n            return streamingEndpoint;\r\n        }\r\n\r\n        static public void UpdateStreamingEndpoint(IStreamingEndpoint streamingEndpoint)\r\n        {\r\n            if (streamingEndpoint.StreamingEndpointVersion == \"1.0\")\r\n            streamingEndpoint.StreamingEndpointVersion = \"2.0\";\r\n\r\n            streamingEndpoint.CdnEnabled = false;\r\n            streamingEndpoint.Update();\r\n        }\r\n\r\n        static public void DeleteStreamingEndpoint(IStreamingEndpoint streamingEndpoint)\r\n        {\r\n            streamingEndpoint.Delete();\r\n        }\r\n        }\r\n    }\r\n\r\n\r\n"}