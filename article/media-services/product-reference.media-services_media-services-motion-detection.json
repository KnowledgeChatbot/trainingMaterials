{"Title":"使用 Azure 媒体分析检测动作","Description":"Azure 媒体动作检测器媒体处理器 (MP) 可让你在冗长且平淡的视频中有效识别出你感兴趣的部分。","Content":"# <a name=\"detect-motions-with-azure-media-analytics\"></a>使用 Azure 媒体分析检测动作\r\n## <a name=\"overview\"></a>概述\r\n借助“Azure Media Motion Detector”媒体处理器 (MP)，用户可在冗长且平淡的视频中有效识别出感兴趣的部分。 可以对静态相机数据片段使用动作检测，以识别视频中有动作的部分。 它会生成 JSON 文件，其中包含带时间戳的元数据，以及发生事件的边界区域。\r\n\r\n此技术面向安全视频提要，它可以将动作分类为相关事件和误报（例如阴影或光源变化）。 这样，便可以在无需查看无止境的不相关事件的情况下，从相机输出生成安全警报，并从长时间的监控视频中提取感兴趣的片段。\r\n\r\n**Azure 媒体动作检测器** MP 目前以预览版提供。\r\n\r\n本主题提供有关“Azure Media Motion Detector”的详细信息，并演示如何通过适用于 .NET 的媒体服务 SDK 使用它\r\n\r\n## <a name=\"motion-detector-input-files\"></a>动作检测器输入文件\r\n视频文件。 目前支持以下格式：MP4、MOV 和 WMV。\r\n\r\n## <a name=\"task-configuration-preset\"></a>任务配置（预设）\r\n在使用 **Azure 媒体动作检测器**创建任务时，必须指定配置预设。 \r\n\r\n### <a name=\"parameters\"></a>Parameters\r\n可以使用以下参数：\r\n\r\n| 名称 | 选项 | 说明 | 默认 |\r\n| --- | --- | --- | --- |\r\n| sensitivityLevel |字符串：'low'、'medium'、'high' |设置报告动作情况的敏感度级别。 调整此项是为了调整误报数量。 |'medium' |\r\n| frameSamplingValue |正整数 |设置算法的运行频率。 1 等于每个帧，2 是指每隔一个帧，如此类推。 |1 |\r\n| detectLightChange |布尔值：'true'、'false' |设置是否在结果中报告轻微的更改 |'False' |\r\n| mergeTimeThreshold |Xs-time: Hh:mm:ss<br/>示例：00:00:03 |指定动作事件之间的时间窗口，其中的 2 个事件将组合成 1 个事件进行报告。 |00:00:00 |\r\n| detectionZones |检测区域数组：<br/>- 检测区域是一个包含 3 个或 3 个以上点的数组<br/>- 点是指由从 0 到 1 的 x 和 y 组成的坐标。 |描述要使用的多边形检测区域列表。<br/>报告结果时将报告以 ID 表示的区域，其中第一个是 ‘id’:0 |单个区域，涵盖整个帧。 |\r\n\r\n### <a name=\"json-example\"></a>JSON 示例\r\n    {\r\n      \"version\": \"1.0\",\r\n      \"options\": {\r\n        \"sensitivityLevel\": \"medium\",\r\n        \"frameSamplingValue\": 1,\r\n        \"detectLightChange\": \"False\",\r\n        \"mergeTimeThreshold\":\r\n        \"00:00:02\",\r\n        \"detectionZones\": [\r\n          [\r\n            {\"x\": 0, \"y\": 0},\r\n            {\"x\": 0.5, \"y\": 0},\r\n            {\"x\": 0, \"y\": 1}\r\n           ],\r\n          [\r\n            {\"x\": 0.3, \"y\": 0.3},\r\n            {\"x\": 0.55, \"y\": 0.3},\r\n            {\"x\": 0.8, \"y\": 0.3},\r\n            {\"x\": 0.8, \"y\": 0.55},\r\n            {\"x\": 0.8, \"y\": 0.8},\r\n            {\"x\": 0.55, \"y\": 0.8},\r\n            {\"x\": 0.3, \"y\": 0.8},\r\n            {\"x\": 0.3, \"y\": 0.55}\r\n          ]\r\n        ]\r\n      }\r\n    }\r\n\r\n\r\n## <a name=\"motion-detector-output-files\"></a>动作检测器输出文件\r\n动作检测作业会在输出资产中返回 JSON 文件，该文件描述视频中的动作警报和类别。 该文件包含有关在视频中检测到的动作的时间和持续时间的信息。\r\n\r\n一旦固定背景视频（例如监控视频）中出现运动对象，动作检测器 API 将提供指示器。 动作检测器经过训练可减少误报（例如光源和阴影变化）。 当前算法限制包括夜视视频、半透明对象和小对象。\r\n\r\n### <a id=\"output_elements\"></a>输出 JSON 文件中的元素\r\n> [!NOTE]\r\n> 在最新版本中，输出 JSON 格式已更改，对某些客户来说可以说是重大更改。\r\n> \r\n> \r\n\r\n下表描述了输出 JSON 文件的元素。\r\n\r\n| 元素 | 说明 |\r\n| --- | --- |\r\n| 版本 |这是指视频 API 的版本。 当前版本为 2。 |\r\n| 时间刻度 |视频每秒的“刻度”数。 |\r\n| Offset |时间戳的时间偏移量（以“刻度”为单位）。 在版本 1.0 的视频 API 中，此属性始终为 0。 在我们将来支持的方案中，此值可能会更改。 |\r\n| Framerate |视频的每秒帧数。 |\r\n| Width, Height |表示视频的宽度和高度（以像素为单位）。 |\r\n| 开始 |开始时间戳（以“刻度”为单位）。 |\r\n| 持续时间 |事件的长度（以“刻度”为单位）。 |\r\n| 时间间隔 |事件中每个条目的间隔（以“刻度”为单位）。 |\r\n| 事件 |每个事件片段包含在该持续时间内检测到的动作。 |\r\n| 类型 |在当前版本中，对于一般动作，该属性始终为“2”。 此标签可让视频 API 在将来的版本中灵活地为动作分类。 |\r\n| RegionID |如上所述，在此版本中此属性始终为 0。 此标签可让视频 API 在将来的版本中灵活地查找各区域中的动作。 |\r\n| 区域 |表示你关注的动作在视频中的区域。 <br/><br/>-“id”表示区域面积 - 且在此版本中只有一个，ID 0。 <br/>-“type”代表你关注其动作的区域的形状。 目前支持“矩形”和“多边形”。<br/> 如果指定了“矩形”，则区域具有以 X、Y表示宽度及高度的维度。 X 和 Y 坐标表示规范化 0.0 到 1.0 比例中的区域的左上角 XY 坐标。 宽度和高度表示规范化 0.0 到 1.0 比例中的区域的大小。 在当前版本中，X、Y、宽度和高度始终固定为 0、0 和 1、1。 <br/>如果指定了“多边形”，则区域的维度以点来表示。 <br/> |\r\n| Fragments |元数据划分成称为“片段”的不同段。 每个片段包含开始时间、持续时间、间隔数字和事件。 没有事件的片段表示在该开始时间和持续时间内没有检测到任何动作。 |\r\n| 括号 [] |每个括号表示事件中的单个间隔。 如果该间隔显示空括号，则表示没有检测到动作。 |\r\n| 位置 |事件下的此新项列出发生动作的位置。 这比检测区域更具体。 |\r\n\r\n下面是 JSON 输出示例\r\n\r\n    {\r\n      \"version\": 2,\r\n      \"timescale\": 23976,\r\n      \"offset\": 0,\r\n      \"framerate\": 24,\r\n      \"width\": 1280,\r\n      \"height\": 720,\r\n      \"regions\": [\r\n        {\r\n          \"id\": 0,\r\n          \"type\": \"polygon\",\r\n          \"points\": [{'x': 0, 'y': 0},\r\n            {'x': 0.5, 'y': 0},\r\n            {'x': 0, 'y': 1}]\r\n        }\r\n      ],\r\n      \"fragments\": [\r\n        {\r\n          \"start\": 0,\r\n          \"duration\": 226765\r\n        },\r\n        {\r\n          \"start\": 226765,\r\n          \"duration\": 47952,\r\n          \"interval\": 999,\r\n          \"events\": [\r\n            [\r\n              {\r\n                \"type\": 2,\r\n                \"typeName\": \"motion\",\r\n                \"locations\": [\r\n                  {\r\n                    \"x\": 0.004184,\r\n                    \"y\": 0.007463,\r\n                    \"width\": 0.991667,\r\n                    \"height\": 0.985185\r\n                  }\r\n                ],\r\n                \"regionId\": 0\r\n              }\r\n            ],\r\n\r\n    …\r\n## <a name=\"limitations\"></a>限制\r\n* 支持的输入视频格式包括 MP4、MOV 和 WMV。\r\n* 动作检测已针对固定背景视频优化。 算法专注于降低误报，例如光源变化和阴影。\r\n* 某些动作可能因技术难题而无法检测到，例如夜视视频、半透明对象和小对象。\r\n\r\n## <a name=\"net-sample-code\"></a>.NET 示例代码\r\n\r\n以下程序演示如何：\r\n\r\n1. 创建资产并将媒体文件上传到资产。\r\n2. 基于包含以下 json 预设的配置文件，使用视频动作检测任务创建作业。 \r\n   \r\n        {\r\n          \"Version\": \"1.0\",\r\n          \"Options\": {\r\n            \"SensitivityLevel\": \"medium\",\r\n            \"FrameSamplingValue\": 1,\r\n            \"DetectLightChange\": \"False\",\r\n            \"MergeTimeThreshold\":\r\n            \"00:00:02\",\r\n            \"DetectionZones\": [\r\n              [\r\n                {\"x\": 0, \"y\": 0},\r\n                {\"x\": 0.5, \"y\": 0},\r\n                {\"x\": 0, \"y\": 1}\r\n               ],\r\n              [\r\n                {\"x\": 0.3, \"y\": 0.3},\r\n                {\"x\": 0.55, \"y\": 0.3},\r\n                {\"x\": 0.8, \"y\": 0.3},\r\n                {\"x\": 0.8, \"y\": 0.55},\r\n                {\"x\": 0.8, \"y\": 0.8},\r\n                {\"x\": 0.55, \"y\": 0.8},\r\n                {\"x\": 0.3, \"y\": 0.8},\r\n                {\"x\": 0.3, \"y\": 0.55}\r\n              ]\r\n            ]\r\n          }\r\n        }\r\n3. 下载输出 JSON 文件。 \r\n\r\n#### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r\n\r\n设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r\n\r\n#### <a name=\"example\"></a>示例\r\n\r\n\r\n    using System;\r\n    using System.Configuration;\r\n    using System.IO;\r\n    using System.Linq;\r\n    using Microsoft.WindowsAzure.MediaServices.Client;\r\n    using System.Threading;\r\n    using System.Threading.Tasks;\r\n\r\n    namespace VideoMotionDetection\r\n    {\r\n        class Program\r\n        {\r\n            // Read values from the App.config file.\r\n            private static readonly string _AADTenantDomain =\r\n                ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r\n            private static readonly string _RESTAPIEndpoint =\r\n                ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r\n\r\n            // Field for service context.\r\n            private static CloudMediaContext _context = null;\r\n\r\n            static void Main(string[] args)\r\n            {\r\n                var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n                var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r\n\r\n                _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r\n\r\n                // Run the VideoMotionDetection job.\r\n                var asset = RunVideoMotionDetectionJob(@\"C:\\supportFiles\\VideoMotionDetection\\BigBuckBunny.mp4\",\r\n                                            @\"C:\\supportFiles\\VideoMotionDetection\\config.json\");\r\n\r\n                // Download the job output asset.\r\n                DownloadAsset(asset, @\"C:\\supportFiles\\VideoMotionDetection\\Output\");\r\n            }\r\n\r\n            static IAsset RunVideoMotionDetectionJob(string inputMediaFilePath, string configurationFile)\r\n            {\r\n                // Create an asset and upload the input media file to storage.\r\n                IAsset asset = CreateAssetAndUploadSingleFile(inputMediaFilePath,\r\n                    \"My Video Motion Detection Input Asset\",\r\n                    AssetCreationOptions.None);\r\n\r\n                // Declare a new job.\r\n                IJob job = _context.Jobs.Create(\"My Video Motion Detection Job\");\r\n\r\n                // Get a reference to Azure Media Motion Detector.\r\n                string MediaProcessorName = \"Azure Media Motion Detector\";\r\n\r\n                var processor = GetLatestMediaProcessorByName(MediaProcessorName);\r\n\r\n                // Read configuration from the specified file.\r\n                string configuration = File.ReadAllText(configurationFile);\r\n\r\n                // Create a task with the encoding details, using a string preset.\r\n                ITask task = job.Tasks.AddNew(\"My Video Motion Detection Task\",\r\n                    processor,\r\n                    configuration,\r\n                    TaskOptions.None);\r\n\r\n                // Specify the input asset.\r\n                task.InputAssets.Add(asset);\r\n\r\n                // Add an output asset to contain the results of the job.\r\n                task.OutputAssets.AddNew(\"My Video Motion Detectoion Output Asset\", AssetCreationOptions.None);\r\n\r\n                // Use the following event handler to check job progress.  \r\n                job.StateChanged += new EventHandler<JobStateChangedEventArgs>(StateChanged);\r\n\r\n                // Launch the job.\r\n                job.Submit();\r\n\r\n                // Check job execution and wait for job to finish.\r\n                Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\r\n\r\n                progressJobTask.Wait();\r\n\r\n                // If job state is Error, the event handling\r\n                // method for job progress should log errors.  Here we check\r\n                // for error state and exit if needed.\r\n                if (job.State == JobState.Error)\r\n                {\r\n                    ErrorDetail error = job.Tasks.First().ErrorDetails.First();\r\n                    Console.WriteLine(string.Format(\"Error: {0}. {1}\",\r\n                                                    error.Code,\r\n                                                    error.Message));\r\n                    return null;\r\n                }\r\n\r\n                return job.OutputMediaAssets[0];\r\n            }\r\n\r\n            static IAsset CreateAssetAndUploadSingleFile(string filePath, string assetName, AssetCreationOptions options)\r\n            {\r\n                IAsset asset = _context.Assets.Create(assetName, options);\r\n\r\n                var assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath));\r\n                assetFile.Upload(filePath);\r\n\r\n                return asset;\r\n            }\r\n\r\n            static void DownloadAsset(IAsset asset, string outputDirectory)\r\n            {\r\n                foreach (IAssetFile file in asset.AssetFiles)\r\n                {\r\n                    file.Download(Path.Combine(outputDirectory, file.Name));\r\n                }\r\n            }\r\n\r\n            static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r\n            {\r\n                var processor = _context.MediaProcessors\r\n                    .Where(p => p.Name == mediaProcessorName)\r\n                    .ToList()\r\n                    .OrderBy(p => new Version(p.Version))\r\n                    .LastOrDefault();\r\n\r\n                if (processor == null)\r\n                    throw new ArgumentException(string.Format(\"Unknown media processor\",\r\n                                                               mediaProcessorName));\r\n\r\n                return processor;\r\n            }\r\n\r\n            static private void StateChanged(object sender, JobStateChangedEventArgs e)\r\n            {\r\n                Console.WriteLine(\"Job state changed event:\");\r\n                Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r\n                Console.WriteLine(\"  Current state: \" + e.CurrentState);\r\n\r\n                switch (e.CurrentState)\r\n                {\r\n                    case JobState.Finished:\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\"Job is finished.\");\r\n                        Console.WriteLine();\r\n                        break;\r\n                    case JobState.Canceling:\r\n                    case JobState.Queued:\r\n                    case JobState.Scheduled:\r\n                    case JobState.Processing:\r\n                        Console.WriteLine(\"Please wait...\\n\");\r\n                        break;\r\n                    case JobState.Canceled:\r\n                    case JobState.Error:\r\n                        // Cast sender as a job.\r\n                        IJob job = (IJob)sender;\r\n                        // Display or log error details as needed.\r\n                        // LogJobStop(job.Id);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n## <a name=\"related-links\"></a>相关链接\r\n[Azure 媒体服务动作检测器博客](https://azure.microsoft.com/blog/motion-detector-update/)\r\n\r\n[Azure 媒体服务分析概述](media-services-analytics-overview.md)\r\n\r\n[Azure Media Analytics demos（Azure 媒体分析演示）](http://azuremedialabs.azurewebsites.net/demos/Analytics.html)\r\n<!--Update_Description: update code to use AAD token instead of ACS-->"}