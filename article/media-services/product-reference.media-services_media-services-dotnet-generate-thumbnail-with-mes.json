{"Title":"如何使用 Media Encoder Standard 通过 .NET 来生成缩略图","Description":"本主题介绍如何使用 .NET 通过 Media Encoder Standard 同时对资产进行编码和生成缩略图。","Content":"# <a name=\"how-to-generate-thumbnails-using-media-encoder-standard-with-net\"></a>如何使用 Media Encoder Standard 通过 .NET 来生成缩略图\r\n\r\n可以使用 Media Encoder Standard 以 [JPEG](https://en.wikipedia.org/wiki/JPEG)、[PNG](https://en.wikipedia.org/wiki/Portable_Network_Graphics) 或 [BMP](https://en.wikipedia.org/wiki/BMP_file_format) 图像文件格式从输入视频生成一个或多个缩略图。 可以提交仅生成图像的任务，或者合并缩略图的生成与编码功能。 本主题针对此类方案提供一些示例 XML 和 JSON 缩略图预设。 本主题的末尾提供了一段[示例代码](#code_sample)，演示如何使用媒体服务 .NET SDK 来完成编码任务。\r\n\r\n有关示例预设中使用的元素的更多详细信息，请查看 [Media Encoder Standard 架构](media-services-mes-schema.md)。\r\n\r\n请务必仔细阅读 [注意事项](media-services-dotnet-generate-thumbnail-with-mes.md#considerations) 部分。\r\n    \r\n## <a name=\"example-of-a-single-png-file-preset\"></a>“单个 PNG 文件”预设示例\r\n\r\n使用以下 JSON 和 XML 预设可以基于输入视频的前几秒内容生成单个输出 PNG 文件，其中的编码器会尽力尝试查找“相关的”帧。 请注意，输出图像尺寸已设置为 100%，这意味着，这些尺寸将与输入视频的尺寸匹配。 另请注意需要如何指定“Outputs”中“Format”设置，以匹配“Codecs”节中“PngLayers”的用法。 \r\n\r\n### <a name=\"json-preset\"></a>JSON 预设\r\n\r\n    {\r\n      \"Version\": 1.0,\r\n      \"Codecs\": [\r\n        {\r\n          \"PngLayers\": [\r\n            {\r\n              \"Type\": \"PngLayer\",\r\n              \"Width\": \"100%\",\r\n              \"Height\": \"100%\"\r\n            }\r\n          ],\r\n          \"Start\": \"{Best}\",\r\n          \"Type\": \"PngImage\"\r\n        }\r\n      ],\r\n      \"Outputs\": [\r\n        {\r\n          \"FileName\": \"{Basename}_{Index}{Extension}\",\r\n          \"Format\": {\r\n            \"Type\": \"PngFormat\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n\r\n### <a name=\"xml-preset\"></a>XML 预设\r\n\r\n    <?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n    <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r\n      <Encoding>\r\n        <PngImage Start=\"{Best}\">\r\n          <PngLayers>\r\n            <PngLayer>\r\n              <Width>100%</Width>\r\n              <Height>100%</Height>\r\n            </PngLayer>\r\n          </PngLayers>\r\n        </PngImage>\r\n      </Encoding>\r\n      <Outputs>\r\n        <Output FileName=\"{Basename}_{Index}{Extension}\">\r\n          <PngFormat />\r\n        </Output>\r\n      </Outputs>\r\n    </Preset>\r\n\r\n## <a name=\"example-of-a-series-of-jpeg-images-preset\"></a>“一系列 JPEG 图像”预设的示例\r\n\r\n可以使用以下 JSON 和 XML 预设在输入时间线的 5%、15% ... 95% 时间戳处生成一组 10 幅图像，其中的图像大小指定为输入视频的四分之一。\r\n\r\n### <a name=\"json-preset\"></a>JSON 预设\r\n\r\n    {\r\n      \"Version\": 1.0,\r\n      \"Codecs\": [\r\n        {\r\n          \"JpgLayers\": [\r\n            {\r\n              \"Quality\": 90,\r\n              \"Type\": \"JpgLayer\",\r\n              \"Width\": \"25%\",\r\n              \"Height\": \"25%\"\r\n            }\r\n          ],\r\n          \"Start\": \"5%\",\r\n          \"Step\": \"10%\",\r\n          \"Range\": \"96%\",\r\n          \"Type\": \"JpgImage\"\r\n        }\r\n      ],\r\n      \"Outputs\": [\r\n        {\r\n          \"FileName\": \"{Basename}_{Index}{Extension}\",\r\n          \"Format\": {\r\n            \"Type\": \"JpgFormat\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n\r\n### <a name=\"xml-preset\"></a>XML 预设\r\n\r\n    <?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n    <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r\n      <Encoding>\r\n        <JpgImage Start=\"5%\" Step=\"10%\" Range=\"96%\">\r\n          <JpgLayers>\r\n            <JpgLayer>\r\n              <Width>25%</Width>\r\n              <Height>25%</Height>\r\n              <Quality>90</Quality>\r\n            </JpgLayer>\r\n          </JpgLayers>\r\n        </JpgImage>\r\n      </Encoding>\r\n      <Outputs>\r\n        <Output FileName=\"{Basename}_{Index}{Extension}\">\r\n          <JpgFormat />\r\n        </Output>\r\n      </Outputs>\r\n    </Preset>\r\n\r\n## <a name=\"example-of-a-one-image-at-a-specific-timestamp-preset\"></a>“在特定时间戳处生成一个图像”预设示例\r\n\r\n可以使用以下 JSON 和 XML 预设在输入视频的 30 秒标记处生成单个 JPEG 图像。 此预设预期输入视频的持续时间超过 30 秒（否则作业会失败）。\r\n\r\n### <a name=\"json-preset\"></a>JSON 预设\r\n\r\n    {\r\n      \"Version\": 1.0,\r\n      \"Codecs\": [\r\n        {\r\n          \"JpgLayers\": [\r\n            {\r\n              \"Quality\": 90,\r\n              \"Type\": \"JpgLayer\",\r\n              \"Width\": \"25%\",\r\n              \"Height\": \"25%\"\r\n            }\r\n          ],\r\n          \"Start\": \"00:00:30\",\r\n          \"Step\": \"1\",\r\n          \"Range\": \"1\",\r\n          \"Type\": \"JpgImage\"\r\n        }\r\n      ],\r\n      \"Outputs\": [\r\n        {\r\n          \"FileName\": \"{Basename}_{Index}{Extension}\",\r\n          \"Format\": {\r\n            \"Type\": \"JpgFormat\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n\r\n### <a name=\"xml-preset\"></a>XML 预设\r\n\r\n    <?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n    <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r\n      <Encoding>\r\n        <JpgImage Start=\"00:00:30\" Step=\"00:00:01\" Range=\"00:00:01\">\r\n          <JpgLayers>\r\n            <JpgLayer>\r\n              <Width>25%</Width>\r\n              <Height>25%</Height>\r\n              <Quality>90</Quality>\r\n            </JpgLayer>\r\n          </JpgLayers>\r\n        </JpgImage>\r\n      </Encoding>\r\n      <Outputs>\r\n        <Output FileName=\"{Basename}_{Index}{Extension}\">\r\n          <JpgFormat />\r\n        </Output>\r\n      </Outputs>\r\n    </Preset>\r\n    \r\n## <a name=\"example-of-a-thumbnails-at-different-resolutions-preset\"></a>“不同分辨率的缩略图”预设示例\r\n\r\n可使用以下预设在同一个任务中的不同解决方案下生成缩略图。 在该示例中，当输入时间线位于 5%、15%、…、95% 时，编码器将在两个时点各生成一个图像 - 一个是输入视频分辨率的 100% 处，一个是 50% 处。\r\n\r\n请注意 FileName 中 {Resolution} 宏的使用；它指示在生成输出图像的文件名时，编码器要使用在预设的“编码”部分中所指定的宽度和高度。 这还能够帮助轻松区分不同图像\r\n\r\n### <a name=\"json-preset\"></a>JSON 预设\r\n\r\n    {\r\n      \"Version\": 1.0,\r\n      \"Codecs\": [\r\n        {\r\n          \"JpgLayers\": [\r\n        {\r\n          \"Quality\": 90,\r\n          \"Type\": \"JpgLayer\",\r\n          \"Width\": \"100%\",\r\n          \"Height\": \"100%\"\r\n        },\r\n        {\r\n          \"Quality\": 90,\r\n          \"Type\": \"JpgLayer\",\r\n          \"Width\": \"50%\",\r\n          \"Height\": \"50%\"\r\n        }\r\n\r\n          ],\r\n          \"Start\": \"5%\",\r\n          \"Step\": \"10%\",\r\n          \"Range\": \"96%\",\r\n          \"Type\": \"JpgImage\"\r\n        }\r\n      ],\r\n      \"Outputs\": [\r\n        {\r\n          \"FileName\": \"{Basename}_{Resolution}_{Index}{Extension}\",\r\n          \"Format\": {\r\n        \"Type\": \"JpgFormat\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n\r\n### <a name=\"xml-preset\"></a>XML 预设\r\n\r\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r\n    <Encoding>\r\n    <JpgImage Start=\"5%\" Step=\"10%\" Range=\"96%\"><JpgImage Start=\"00:00:01\" Step=\"00:00:15\">\r\n      <JpgLayers>\r\n       <JpgLayer>\r\n        <Width>100%</Width>\r\n        <Height>100%</Height>\r\n        <Quality>90</Quality>\r\n       </JpgLayer>\r\n       <JpgLayer>\r\n        <Width>50%</Width>\r\n        <Height>50%</Height>\r\n        <Quality>90</Quality>\r\n       </JpgLayer>\r\n      </JpgLayers>\r\n    </JpgImage>\r\n    </Encoding>\r\n    <Outputs>\r\n      <Output FileName=\"{Basename}_{Resolution}_{Index}{Extension}\">\r\n        <JpgFormat/>\r\n      </Output>\r\n    </Outputs>\r\n    </Preset>\r\n    \r\n## <a name=\"example-of-generating-a-thumbnail-while-encoding\"></a>在编码时生成缩略图的示例\r\n\r\n上述所有示例都在讨论如何提交仅生成图像的编码任务，但还可以将视频/音频编码与缩略图生成结合起来。 以下的 JSON 和 XML 预设指示 Media Encoder Standard 在编码过程中生成一个缩略图。\r\n\r\n### <a id=\"json\"></a>JSON 预设\r\n有关架构的信息，请参阅[此](media-services-mes-schema.md)主题。\r\n\r\n    {\r\n      \"Version\": 1.0,\r\n      \"Codecs\": [\r\n        {\r\n          \"KeyFrameInterval\": \"00:00:02\",\r\n          \"SceneChangeDetection\": \"true\",\r\n          \"H264Layers\": [\r\n            {\r\n              \"Profile\": \"Auto\",\r\n              \"Level\": \"auto\",\r\n              \"Bitrate\": 4500,\r\n              \"MaxBitrate\": 4500,\r\n              \"BufferWindow\": \"00:00:05\",\r\n              \"Width\": 1280,\r\n              \"Height\": 720,\r\n              \"ReferenceFrames\": 3,\r\n              \"EntropyMode\": \"Cabac\",\r\n              \"AdaptiveBFrame\": true,\r\n              \"Type\": \"H264Layer\",\r\n              \"FrameRate\": \"0/1\"\r\n    \r\n            }\r\n          ],\r\n          \"Type\": \"H264Video\"\r\n        },\r\n        {\r\n          \"JpgLayers\": [\r\n            {\r\n              \"Quality\": 90,\r\n              \"Type\": \"JpgLayer\",\r\n              \"Width\": \"100%\",\r\n              \"Height\": \"100%\"\r\n            }\r\n          ],\r\n          \"Start\": \"{Best}\",\r\n          \"Type\": \"JpgImage\"\r\n        },\r\n        {\r\n          \"Channels\": 2,\r\n          \"SamplingRate\": 48000,\r\n          \"Bitrate\": 128,\r\n          \"Type\": \"AACAudio\"\r\n        }\r\n      ],\r\n      \"Outputs\": [\r\n        {\r\n          \"FileName\": \"{Basename}_{Index}{Extension}\",\r\n          \"Format\": {\r\n            \"Type\": \"JpgFormat\"\r\n          }\r\n        },\r\n        {\r\n          \"FileName\": \"{Basename}_{Resolution}_{VideoBitrate}.mp4\",\r\n          \"Format\": {\r\n            \"Type\": \"MP4Format\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n\r\n### <a id=\"xml\"></a>XML 预设\r\n有关架构的信息，请参阅[此](media-services-mes-schema.md)主题。\r\n    \r\n    <?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n    <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\r\n      <Encoding>\r\n        <H264Video>\r\n          <KeyFrameInterval>00:00:02</KeyFrameInterval>\r\n          <SceneChangeDetection>true</SceneChangeDetection>\r\n          <H264Layers>\r\n            <H264Layer>\r\n              <Bitrate>4500</Bitrate>\r\n              <Width>1280</Width>\r\n              <Height>720</Height>\r\n              <FrameRate>0/1</FrameRate>\r\n              <Profile>Auto</Profile>\r\n              <Level>auto</Level>\r\n              <BFrames>3</BFrames>\r\n              <ReferenceFrames>3</ReferenceFrames>\r\n              <Slices>0</Slices>\r\n              <AdaptiveBFrame>true</AdaptiveBFrame>\r\n              <EntropyMode>Cabac</EntropyMode>\r\n              <BufferWindow>00:00:05</BufferWindow>\r\n              <MaxBitrate>4500</MaxBitrate>\r\n            </H264Layer>\r\n          </H264Layers>\r\n        </H264Video>\r\n        <AACAudio>\r\n          <Profile>AACLC</Profile>\r\n          <Channels>2</Channels>\r\n          <SamplingRate>48000</SamplingRate>\r\n          <Bitrate>128</Bitrate>\r\n        </AACAudio>\r\n        <JpgImage Start=\"{Best}\">\r\n          <JpgLayers>\r\n            <JpgLayer>\r\n              <Width>100%</Width>\r\n              <Height>100%/Height>\r\n              <Quality>90</Quality>\r\n            </JpgLayer>\r\n          </JpgLayers>\r\n        </JpgImage>\r\n      </Encoding>\r\n      <Outputs>\r\n        <Output FileName=\"{Basename}_{Resolution}_{VideoBitrate}.mp4\">\r\n          <MP4Format />\r\n        </Output>\r\n        <Output FileName=\"{Basename}_{Index}{Extension}\">\r\n          <JpgFormat />\r\n        </Output>\r\n      </Outputs>\r\n    </Preset>   \r\n\r\n## <a id=\"code_sample\"></a>编码视频并使用 .NET 生成缩略图\r\n\r\n以下代码示例使用媒体服务 .NET SDK 执行下列任务：\r\n\r\n* 创建编码作业。\r\n* 获取对 Media Encoder Standard 编码器的引用。\r\n* 加载预设 [XML](media-services-dotnet-generate-thumbnail-with-mes.md#xml) 或 [JSON](media-services-dotnet-generate-thumbnail-with-mes.md#json)，包含有编码预设以及生成缩略图所需的信息。 可以在某一文件中保存此 [XML](media-services-dotnet-generate-thumbnail-with-mes.md#xml) 或 [JSON](media-services-dotnet-generate-thumbnail-with-mes.md#json)，并使用以下代码来加载该文件。\r\n\r\n    ```\r\n    // Load the XML (or JSON) from the local file.\r\n    string configuration = File.ReadAllText(fileName);  \r\n    ```\r\n* 将一个编码任务添加到该作业。 \r\n* 指定要编码的输入资产。\r\n* 创建要包含所编码资产的输出资产。\r\n* 添加事件处理程序以检查作业进度。\r\n* 提交作业。\r\n\r\n有关如何设置开发环境的指导，请参阅[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)主题。\r\n\r\n    using System;\r\n    using System.Configuration;\r\n    using System.IO;\r\n    using System.Linq;\r\n    using Microsoft.WindowsAzure.MediaServices.Client;\r\n    using System.Threading;\r\n\r\n    namespace EncodeAndGenerateThumbnails\r\n    {\r\n        class Program\r\n        {\r\n            // Read values from the App.config file.\r\n            private static readonly string _AADTenantDomain = ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r\n            private static readonly string _RESTAPIEndpoint = ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r\n\r\n            private static CloudMediaContext _context = null;\r\n\r\n            private static readonly string _mediaFiles =\r\n                Path.GetFullPath(@\"../..\\Media\");\r\n\r\n            private static readonly string _singleMP4File =\r\n                Path.Combine(_mediaFiles, @\"BigBuckBunny.mp4\");\r\n\r\n            static void Main(string[] args)\r\n            {\r\n                var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n                var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r\n\r\n                _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r\n\r\n                // Get an uploaded asset.\r\n                var asset = _context.Assets.FirstOrDefault();\r\n\r\n                // Encode and generate the thumbnails.\r\n                EncodeToAdaptiveBitrateMP4Set(asset);\r\n\r\n                Console.ReadLine();\r\n            }\r\n\r\n            static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\r\n            {\r\n                // Declare a new job.\r\n                IJob job = _context.Jobs.Create(\"Media Encoder Standard Thumbnail Job\");\r\n                // Get a media processor reference, and pass to it the name of the \r\n                // processor to use for the specific task.\r\n                IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\r\n\r\n                // Load the XML (or JSON) from the local file.\r\n                string configuration = File.ReadAllText(\"ThumbnailPreset_JSON.json\");\r\n\r\n                // Create a task\r\n                ITask task = job.Tasks.AddNew(\"Media Encoder Standard Thumbnail task\",\r\n                    processor,\r\n                    configuration,\r\n                    TaskOptions.None);\r\n\r\n                // Specify the input asset to be encoded.\r\n                task.InputAssets.Add(asset);\r\n                // Add an output asset to contain the results of the job. \r\n                // This output is specified as AssetCreationOptions.None, which \r\n                // means the output asset is not encrypted. \r\n                task.OutputAssets.AddNew(\"Output asset\",\r\n                    AssetCreationOptions.None);\r\n\r\n                job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\r\n                job.Submit();\r\n                job.GetExecutionProgressTask(CancellationToken.None).Wait();\r\n\r\n                return job.OutputMediaAssets[0];\r\n            }\r\n\r\n            private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\r\n            {\r\n                Console.WriteLine(\"Job state changed event:\");\r\n                Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r\n                Console.WriteLine(\"  Current state: \" + e.CurrentState);\r\n                switch (e.CurrentState)\r\n                {\r\n                    case JobState.Finished:\r\n                        Console.WriteLine();\r\n                        Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\r\n                        break;\r\n                    case JobState.Canceling:\r\n                    case JobState.Queued:\r\n                    case JobState.Scheduled:\r\n                    case JobState.Processing:\r\n                        Console.WriteLine(\"Please wait...\\n\");\r\n                        break;\r\n                    case JobState.Canceled:\r\n                    case JobState.Error:\r\n\r\n                        // Cast sender as a job.\r\n                        IJob job = (IJob)sender;\r\n\r\n                        // Display or log error details as needed.\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r\n            {\r\n                var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\r\n                ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\r\n\r\n                if (processor == null)\r\n                    throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\r\n\r\n                return processor;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n## <a name=\"considerations\"></a>注意事项\r\n\r\n请注意以下事项：\r\n\r\n- 为 Start/Step/Range 使用的显式时间戳假设输入源的长度至少为 1 分钟。\r\n- Jpg/Png/BmpImage 元素包含 Start、Step 和 Range 字符串属性 – 这些属性解释如下：\r\n  - 帧数（如果为非负整数），例如： \"Start\": \"120\"，\r\n  - 相对于源持续时间（如果以 % 后缀表示），例如： \"Start\": \"15%\"，或者\r\n  - 时间戳（如果以 HH:MM:SS... 格式表示）。 例如 \"Start\" : \"00:01:00\"  \r\n    可以随意混搭使用表示法。  \r\n    此外，Start 还支持特殊的宏 {Best}，它会尝试判断第一个“有意义”的内容帧。注意：（Start 设置为 {Best} 时，将忽略 Step 与 Range）\r\n  - 默认值：Start:{Best}\r\n- 需要显式提供每个图像格式的输出格式：Jpg/Png/BmpFormat。 提供时，MES 会将 JpgVideo 与 JpgFormat 进行匹配，依此类推。 OutputFormat 引入了新的图像编解码器特定宏 {Index}，需要为图像输出格式提供该宏一次（且只需一次）。\r\n\r\n## <a name=\"see-also\"></a>另请参阅\r\n[媒体服务编码概述](media-services-encode-asset.md)\r\n\r\n<!--Update_Description: preset configuration update-->"}