{"Title":"创建生成 fMP4 区块的 Azure 媒体服务编码任务","Description":"本主题介绍如何创建生成 fMP4 区块的编码任务。 将此任务用于 Media Encoder Standard 编码器时，输出资产会包含 fMP4 区块而非 ISO MP4 文件。","Content":"#  <a name=\"create-an-encoding-task-that-generates-fmp4-chunks\"></a>创建生成 fMP4 区块的编码任务\n\n## <a name=\"overview\"></a>概述\n\n本主题介绍如何创建一个编码任务，以便生成分片的 MP4 (fMP4) 区块而非 ISO MP4 文件。 若要生成 fMP4 区块，请使用 **Media Encoder Standard** 编码器创建一个编码任务，并请指定 **AssetFormatOption.AdaptiveStreaming** 选项，如以下代码片段所示：  \n    \n    task.OutputAssets.AddNew(@\"Output Asset containing fMP4 chunks\", \n            options: AssetCreationOptions.None, \n            formatOption: AssetFormatOption.AdaptiveStreaming);\n\n\n## <a id=\"encoding_with_dotnet\"></a>使用媒体服务 .NET SDK 进行编码\n\n以下代码示例使用媒体服务 .NET SDK 执行下列任务：\n\n- 创建编码作业。\n- 获取对 **Media Encoder Standard** 编码器的引用。\n- 向作业添加一个编码任务，指定使用“自适应流式处理”预设。 \n- 创建一个输出资产，其中包含 fMP4 区块和 .ism 文件。\n- 添加事件处理程序以检查作业进度。\n- 提交作业。\n\n#### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\n\n设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \n\n#### <a name=\"example\"></a>示例\n\n    using System;\n    using System.Configuration;\n    using System.Linq;\n    using Microsoft.WindowsAzure.MediaServices.Client;\n    using System.Threading;\n\n    namespace AdaptiveStreaming\n    {\n        class Program\n        {\n        // Read values from the App.config file.\n        private static readonly string _AADTenantDomain =\n            ConfigurationManager.AppSettings[\"AADTenantDomain\"];\n        private static readonly string _RESTAPIEndpoint =\n            ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\n\n        // Field for service context.\n        private static CloudMediaContext _context = null;\n\n        static void Main(string[] args)\n        {\n            var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\n            var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\n\n            _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\n\n            // Get an uploaded asset.\n            var asset = _context.Assets.FirstOrDefault();\n\n            // Encode and generate the output using the \"Adaptive Streaming\" preset.\n            EncodeToAdaptiveBitrateMP4Set(asset);\n\n            Console.ReadLine();\n        }\n        static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\n        {\n            // Declare a new job.\n            IJob job = _context.Jobs.Create(\"Media Encoder Standard Job\");\n\n            // Get a media processor reference, and pass to it the name of the \n            // processor to use for the specific task.\n            IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\n\n            // Create a task\n            ITask task = job.Tasks.AddNew(\"Media Encoder Standard encoding task\",\n            processor,\n            \"Adaptive Streaming\",\n            TaskOptions.None);\n\n            // Specify the input asset to be encoded.\n            task.InputAssets.Add(asset);\n\n            // Add an output asset to contain the results of the job. \n\n            // This output is specified as AssetCreationOptions.None, which \n            // means the output asset is not encrypted. \n            // It is also specified to use AssetFormatOption.AdaptiveStreaming, \n            // which means the output asset will contain fMP4 chunks.\n\n            task.OutputAssets.AddNew(@\"Output Asset containing fMP4 chunks\",\n            options: AssetCreationOptions.None,\n            formatOption: AssetFormatOption.AdaptiveStreaming);\n\n            job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\n            job.Submit();\n            job.GetExecutionProgressTask(CancellationToken.None).Wait();\n\n            return job.OutputMediaAssets[0];\n        }\n        private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\n        {\n            Console.WriteLine(\"Job state changed event:\");\n            Console.WriteLine(\"  Previous state: \" + e.PreviousState);\n            Console.WriteLine(\"  Current state: \" + e.CurrentState);\n            switch (e.CurrentState)\n            {\n            case JobState.Finished:\n                Console.WriteLine();\n                Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\n                break;\n            case JobState.Canceling:\n            case JobState.Queued:\n            case JobState.Scheduled:\n            case JobState.Processing:\n                Console.WriteLine(\"Please wait...\\n\");\n                break;\n            case JobState.Canceled:\n            case JobState.Error:\n\n                // Cast sender as a job.\n                IJob job = (IJob)sender;\n\n                // Display or log error details as needed.\n                break;\n            default:\n                break;\n            }\n        }\n        private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n        {\n            var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\n            ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\n\n            if (processor == null)\n            throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\n\n            return processor;\n        }\n        }\n    }\n\n\n\n## <a name=\"see-also\"></a>另请参阅\n[媒体服务编码概述](media-services-encode-asset.md)\n<!--Update_Description: update code to use AAD token instead of ACS-->\n"}