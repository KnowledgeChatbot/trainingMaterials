{"Title":"使用 .NET 创建内容密钥","Description":"了解如何创建提供对资产进行安全访问的内容密钥。","Content":"# <a name=\"create-contentkeys-with-net\"></a>使用 .NET 创建内容密钥\r\n> [!div class=\"op_single_selector\"]\r\n> * [REST](media-services-rest-create-contentkey.md)\r\n> * [.NET](media-services-dotnet-create-contentkey.md)\r\n> \r\n> \r\n\r\n媒体服务允许创建资产和传送加密的资产。 “ContentKey”提供对“资产”的安全访问。 \r\n\r\n创建新资产时（例如，[上传文件](media-services-dotnet-upload-files.md)之前），可以指定以下加密选项：“StorageEncrypted”、“CommonEncryptionProtected”或“EnvelopeEncryptionProtected”。 \r\n\r\n将资产传送到客户端时，可以使用以下两个加密选项之一 [将资产配置为动态加密](media-services-dotnet-configure-asset-delivery-policy.md)：“DynamicEnvelopeEncryption”或“DynamicCommonEncryption”。\r\n\r\n加密的资产必须与 **ContentKey**关联。 本文介绍如何创建内容密钥。\r\n\r\n> [!NOTE]\r\n> 使用媒体服务 .NET SDK 创建新的“StorageEncrypted”资产时，会自动创建“ContentKey”并将其链接到资产。\r\n> \r\n> \r\n\r\n## <a name=\"contentkeytype\"></a>ContentKeyType\r\n创建内容密钥时必须设置的值之一是内容密钥类型。 选择以下值之一。 \r\n\r\n    public enum ContentKeyType\r\n    {\r\n        /// <summary>\r\n        /// Specifies a content key for common encryption.\r\n        /// </summary>\r\n        /// <remarks>This is the default value.</remarks>\r\n        CommonEncryption = 0,\r\n\r\n        /// <summary>\r\n        /// Specifies a content key for storage encryption.\r\n        /// </summary>\r\n        StorageEncryption = 1,\r\n\r\n        /// <summary>\r\n        /// Specifies a content key for configuration encryption.\r\n        /// </summary>\r\n        ConfigurationEncryption = 2,\r\n\r\n        /// <summary>\r\n        /// Specifies a content key for Envelope encryption.  Only used internally.\r\n        /// </summary>\r\n        EnvelopeEncryption = 4\r\n    }\r\n\r\n## <a id=\"envelope_contentkey\"></a>创建信封类型 ContentKey\r\n以下代码段创建信封加密类型的内容密钥。 然后，它会将密钥与指定的资产关联。\r\n\r\n    static public IContentKey CreateEnvelopeTypeContentKey(IAsset asset)\r\n    {\r\n        // Create envelope encryption content key\r\n        Guid keyId = Guid.NewGuid();\r\n        byte[] contentKey = GetRandomBuffer(16);\r\n\r\n        IContentKey key = _context.ContentKeys.Create(\r\n                                keyId,\r\n                                contentKey,\r\n                                \"ContentKey\",\r\n                                ContentKeyType.EnvelopeEncryption);\r\n\r\n        asset.ContentKeys.Add(key);\r\n\r\n        return key;\r\n    }\r\n\r\n    static private byte[] GetRandomBuffer(int size)\r\n    {\r\n        byte[] randomBytes = new byte[size];\r\n        using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider())\r\n        {\r\n            rng.GetBytes(randomBytes);\r\n        }\r\n\r\n        return randomBytes;\r\n    }\r\n\r\ncall\r\n\r\n    IContentKey key = CreateEnvelopeTypeContentKey(encryptedsset);\r\n\r\n\r\n\r\n## <a id=\"common_contentkey\"></a>创建公共类型 ContentKey\r\n以下代码段创建公共加密类型的内容密钥。 然后，它会将密钥与指定的资产关联。\r\n\r\n    static public IContentKey CreateCommonTypeContentKey(IAsset asset)\r\n    {\r\n        // Create common encryption content key\r\n        Guid keyId = Guid.NewGuid();\r\n        byte[] contentKey = GetRandomBuffer(16);\r\n\r\n        IContentKey key = _context.ContentKeys.Create(\r\n                                keyId,\r\n                                contentKey,\r\n                                \"ContentKey\",\r\n                                ContentKeyType.CommonEncryption);\r\n\r\n        // Associate the key with the asset.\r\n        asset.ContentKeys.Add(key);\r\n\r\n        return key;\r\n    }\r\n\r\n    static private byte[] GetRandomBuffer(int length)\r\n    {\r\n        var returnValue = new byte[length];\r\n\r\n        using (var rng =\r\n            new System.Security.Cryptography.RNGCryptoServiceProvider())\r\n        {\r\n            rng.GetBytes(returnValue);\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n    \r\ncall\r\n\r\n    IContentKey key = CreateCommonTypeContentKey(encryptedsset); \r\n"}