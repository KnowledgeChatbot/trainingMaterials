{"Title":"将 Blob 从存储帐户复制到 Azure 媒体服务资产中","Description":"本主题说明如何将现有 blob 复制到媒体服务资产。 示例使用 Azure 媒体服务 .NET SDK 扩展。","Content":"# <a name=\"copying-existing-blobs-into-a-media-services-asset\"></a>将现有 Blob 复制到媒体服务资产\r\n本主题说明如何使用 [Azure 媒体服务 .NET SDK 扩展](https://github.com/Azure/azure-sdk-for-media-services-extensions/)将 Blob 从存储帐户复制到新的 Azure 媒体服务 (AMS) 资产中。\r\n\r\n扩展方法适用于：\r\n\r\n- 常规资产。\r\n- 实时存档资产（FragBlob 格式）。\r\n- 属于不同媒体服务帐户（甚至跨不同数据中心）的源和目标资产。 但是，这样做可能会产生费用。 有关定价的详细信息，请参阅[数据传输](https://www.azure.cn/pricing/details/data-transfer/)。\r\n\r\n> [!NOTE]\r\n> 在不使用媒体服务 API 的情况下，不应该尝试更改媒体服务生成的 blob 容器内容。\r\n> \r\n\r\n本主题介绍两个代码示例：\r\n\r\n1. 将 Blob 从一个 AMS 帐户中的资产复制到另一个 AMS 帐户中的新资产。\r\n2. 将 Blob 从某个存储帐户复制到一个 AMS 帐户中的新资产。\r\n\r\n## <a name=\"copy-blobs-between-two-ams-accounts\"></a>在两个 AMS 帐户之间复制 Blob  \r\n\r\n### <a name=\"prerequisites\"></a>先决条件\r\n\r\n两个媒体服务帐户。 请参阅主题[如何创建媒体服务帐户](media-services-portal-create-account.md)。\r\n\r\n### <a name=\"download-sample\"></a>下载示例\r\n用户可以执行本文中的步骤，也可以单击 [此处](https://azure.microsoft.com/documentation/samples/media-services-dotnet-copy-blob-into-asset/)下载包含本文所述代码的示例。\r\n\r\n### <a name=\"set-up-your-project\"></a>设置项目\r\n\r\n1. 按照[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述来设置开发环境。 \r\n2. 添加此项目所需的其他引用：System.Configuration。\r\n3. 将 appSettings 节添加到 .config 文件，并根据媒体服务帐户、目标存储帐户和源资产 ID 更新值。  \r\n\r\n```   \r\n<appSettings>\r\n    <add key=\"AMSSourceAADTenantDomain\" value=\"AADTenantDomain\"/>\r\n    <add key=\"AMSSourceRESTAPIEndpoint\" value=\"RESTAPIEndpoint\"/>\r\n    <add key=\"AMSDestAADTenantDomain\" value=\"AADTenantDomain\"/>\r\n    <add key=\"AMSDestRESTAPIEndpoint\" value=\"RESTAPIEndpoint\"/>\r\n    <add key=\"DestStorageAccountName\" value=\"name\"/>\r\n    <add key=\"DestStorageAccountKey\" value=\"key\"/>\r\n    <add key=\"SourceAssetID\" value=\"nb:cid:UUID:assetID\"/>\r\n</appSettings>\r\n```\r\n\r\n### <a name=\"copy-blobs-from-an-asset-in-one-ams-account-into-an-asset-in-another-ams-account\"></a>将 Blob 从一个 AMS 帐户中的资产复制到另一个 AMS 帐户中的资产\r\n\r\n以下代码使用单个扩展通过扩展的 **IAsset.Copy** 方法将源资产中的所有文件复制到目标资产。\r\n\r\n```\r\nusing System;\r\nusing Microsoft.WindowsAzure.MediaServices.Client;\r\nusing System.Linq;\r\nusing System.Configuration;\r\nusing Microsoft.WindowsAzure.Storage.Auth;\r\n\r\nnamespace CopyExistingBlobsIntoAsset\r\n{\r\n    class Program\r\n    {\r\n        static string _sourceAADTenantDomain = ConfigurationManager.AppSettings[\"AMSSourceAADTenantDomain\"];\r\n        static string _sourceRESTAPIEndpoint = ConfigurationManager.AppSettings[\"AMSSourceRESTAPIEndpoint\"];\r\n        static string _destAADTenantDomain = ConfigurationManager.AppSettings[\"AMSDestAADTenantDomain\"];\r\n        static string _destRESTAPIEndpoint = ConfigurationManager.AppSettings[\"AMSDestRESTAPIEndpoint\"];\r\n        static string _destStorageAccountName = ConfigurationManager.AppSettings[\"DestStorageAccountName\"];\r\n        static string _destStorageAccountKey = ConfigurationManager.AppSettings[\"DestStorageAccountKey\"];\r\n        static string _sourceAssetID = ConfigurationManager.AppSettings[\"SourceAssetID\"];\r\n\r\n        private static CloudMediaContext _sourceContext = null;\r\n        private static CloudMediaContext _destContext = null;\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var tokenCredentials1 = new AzureAdTokenCredentials(_sourceAADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n            var tokenProvider1 = new AzureAdTokenProvider(tokenCredentials1);\r\n            var tokenCredentials2 = new AzureAdTokenCredentials(_destAADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n            var tokenProvider2 = new AzureAdTokenProvider(tokenCredentials2);\r\n\r\n            // Create the context for your source Media Services account.\r\n            _sourceContext = new CloudMediaContext(new Uri(_sourceRESTAPIEndpoint), tokenProvider1);\r\n\r\n            // Create the context for your destination Media Services account.\r\n            _destContext = new CloudMediaContext(new Uri(_destRESTAPIEndpoint), tokenProvider2);\r\n\r\n            // Get the credentials of the default Storage account bound to your destination Media Services account.\r\n            StorageCredentials destinationStorageCredentials =\r\n                new StorageCredentials(_destStorageAccountName, _destStorageAccountKey);\r\n\r\n            // Get a reference to the source asset in the source context.\r\n            IAsset sourceAsset = _sourceContext.Assets.Where(a => a.Id == _sourceAssetID).First();\r\n\r\n            // Create an empty destination asset in the destination context.\r\n            IAsset destinationAsset = _destContext.Assets.Create(sourceAsset.Name, AssetCreationOptions.None);\r\n\r\n            // Copy the files in the source asset instance into the destination asset instance.\r\n            sourceAsset.Copy(destinationAsset, destinationStorageCredentials);\r\n\r\n            Console.WriteLine(\"Done\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## <a name=\"copy-blobs-from-a-storage-account-into-an-ams-account\"></a>将 Blob 从存储帐户复制到 AMS 帐户 \r\n\r\n### <a name=\"prerequisites\"></a>先决条件\r\n\r\n- 一个需要从其中复制 Blob 的存储帐户。\r\n- 一个需要将 Blob 复制到其中的 AMS 帐户。\r\n\r\n### <a name=\"set-up-your-project\"></a>设置项目\r\n\r\n1. 按照[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述来设置开发环境。 \r\n2. 添加此项目所需的其他引用：System.Configuration。\r\n3. 将 appSettings 节添加到 .config 文件，并根据源存储和目标 AMS 帐户更新值。\r\n\r\n```\r\n<appSettings>\r\n  <add key=\"SourceStorageAccountName\" value=\"name\" />\r\n  <add key=\"SourceStorageAccountKey\" value=\"key\" />\r\n  <add key=\"AMSAADTenantDomain\" value=\"tenant\"/>\r\n  <add key=\"AMSESTAPIEndpoint\" value=\"endpoint\"/>\r\n  <add key=\"AMSStorageAccountName\" value=\"name\" />\r\n  <add key=\"AMSStorageAccountKey\" value=\"key\" />\r\n</appSettings>\r\n```\r\n\r\n### <a name=\"copy-blobs-from-some-storage-account-into-a-new-asset-in-a-ams-account\"></a>将 Blob 从某个存储帐户复制到一个 AMS 帐户中的新资产\r\n\r\n以下代码将存储帐户中的 Blob 复制到媒体服务资产中。 \r\n\r\n>[!NOTE]\r\n>不同 AMS 策略的策略限制为 1,000,000 个（例如，对于定位器策略或 ContentKeyAuthorizationPolicy）。 如果始终使用相同的日期/访问权限，则应使用相同的策略 ID，例如，用于要长期就地保留的定位符的策略（非上传策略）。 有关详细信息，请参阅[此](media-services-dotnet-manage-entities.md#limit-access-policies)主题。\r\n\r\n```\r\nusing System;\r\nusing System.Configuration;\r\nusing System.Linq;\r\nusing Microsoft.WindowsAzure.MediaServices.Client;\r\nusing Microsoft.WindowsAzure.Storage.Auth;\r\nusing Microsoft.WindowsAzure.Storage;\r\nusing Microsoft.WindowsAzure.Storage.Blob;\r\n    \r\nnamespace CopyExistingBlobsIntoAsset\r\n{\r\n    class Program\r\n    {\r\n        // Read values from the App.config file.\r\n        private static readonly string _AMSAADTenantDomain =\r\n            ConfigurationManager.AppSettings[\"AMSAADTenantDomain\"];\r\n        private static readonly string _AMSRESTAPIEndpoint =\r\n            ConfigurationManager.AppSettings[\"AMSESTAPIEndpoint\"];\r\n        private static readonly string _AMSStorageAccountName =\r\n            ConfigurationManager.AppSettings[\"AMSStorageAccountName\"];\r\n        private static readonly string _AMSStorageAccountKey =\r\n            ConfigurationManager.AppSettings[\"AMSStorageAccountKey\"];\r\n        private static readonly string _sourceStorageAccountName =\r\n            ConfigurationManager.AppSettings[\"SourceStorageAccountName\"];\r\n        private static readonly string _sourceStorageAccountKey =\r\n            ConfigurationManager.AppSettings[\"SourceStorageAccountKey\"];\r\n\r\n        // Field for service context.\r\n        private static CloudMediaContext _context = null;\r\n        private static CloudStorageAccount _sourceStorageAccount = null;\r\n        private static CloudStorageAccount _destinationStorageAccount = null;\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var tokenCredentials = new AzureAdTokenCredentials(_AMSAADTenantDomain, \r\n                AzureEnvironments.AzureChinaCloudEnvironment);\r\n            var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r\n\r\n            // Create the context for your source Media Services account.\r\n            _context = new CloudMediaContext(new Uri(_AMSRESTAPIEndpoint), tokenProvider);\r\n            \r\n            _sourceStorageAccount =\r\n                new CloudStorageAccount(new StorageCredentials(_sourceStorageAccountName,\r\n                    _sourceStorageAccountKey), true);\r\n\r\n            _destinationStorageAccount =\r\n                new CloudStorageAccount(new StorageCredentials(_AMSStorageAccountName,\r\n                    _AMSStorageAccountKey), true);\r\n\r\n            CloudBlobClient sourceCloudBlobClient =\r\n                _sourceStorageAccount.CreateCloudBlobClient();\r\n            CloudBlobContainer sourceContainer =\r\n                sourceCloudBlobClient.GetContainerReference(\"NameOfBlobContainerYouWantToCopy\");\r\n\r\n            CreateAssetFromExistingBlobs(sourceContainer);\r\n\r\n            Console.WriteLine(\"Done\");\r\n        }\r\n\r\n        static public IAsset CreateAssetFromExistingBlobs(CloudBlobContainer sourceBlobContainer)\r\n        {\r\n            CloudBlobClient destBlobStorage = _destinationStorageAccount.CreateCloudBlobClient();\r\n\r\n            // Create a new asset. \r\n            IAsset asset = _context.Assets.Create(\"NewAsset_\" + Guid.NewGuid(), AssetCreationOptions.None);\r\n\r\n            IAccessPolicy writePolicy = _context.AccessPolicies.Create(\"writePolicy\",\r\n                TimeSpan.FromHours(24), AccessPermissions.Write);\r\n\r\n            ILocator destinationLocator =\r\n                _context.Locators.CreateLocator(LocatorType.Sas, asset, writePolicy);\r\n\r\n            // Get the asset container URI and Blob copy from mediaContainer to assetContainer. \r\n            CloudBlobContainer destAssetContainer =\r\n                destBlobStorage.GetContainerReference((new Uri(destinationLocator.Path)).Segments[1]);\r\n\r\n            if (destAssetContainer.CreateIfNotExists())\r\n            {\r\n                destAssetContainer.SetPermissions(new BlobContainerPermissions\r\n                {\r\n                    PublicAccess = BlobContainerPublicAccessType.Blob\r\n                });\r\n            }\r\n\r\n            var blobList = sourceBlobContainer.ListBlobs();\r\n\r\n            foreach (var sourceBlob in blobList)\r\n            {\r\n                var assetFile = asset.AssetFiles.Create((sourceBlob as ICloudBlob).Name);\r\n\r\n                ICloudBlob destinationBlob = destAssetContainer.GetBlockBlobReference(assetFile.Name);\r\n\r\n                CopyBlob(sourceBlob as ICloudBlob, destAssetContainer);\r\n\r\n                assetFile.ContentFileSize = (sourceBlob as ICloudBlob).Properties.Length;\r\n                assetFile.Update();\r\n                Console.WriteLine(\"File {0} is of {1} size\", assetFile.Name, assetFile.ContentFileSize);\r\n            }\r\n\r\n            asset.Update();\r\n\r\n            destinationLocator.Delete();\r\n            writePolicy.Delete();\r\n\r\n            // Set the primary asset file.\r\n            // If, for example, we copied a set of Smooth Streaming files, \r\n            // set the .ism file to be the primary file. \r\n            // If we, for example, copied an .mp4, then the mp4 would be the primary file. \r\n            var ismAssetFile = asset.AssetFiles.ToList().\r\n                Where(f => f.Name.EndsWith(\".ism\", StringComparison.OrdinalIgnoreCase)).ToArray().FirstOrDefault();\r\n\r\n            // The following code assigns the first .ism file as the primary file in the asset.\r\n            // An asset should have one .ism file.  \r\n            if (ismAssetFile != null)\r\n            {\r\n                ismAssetFile.IsPrimary = true;\r\n                ismAssetFile.Update();\r\n            }\r\n\r\n            return asset;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Copies the specified blob into the specified container.\r\n        /// </summary>\r\n        /// <param name=\"sourceBlob\">The source container.</param>\r\n        /// <param name=\"destinationContainer\">The destination container.</param>\r\n        static private void CopyBlob(ICloudBlob sourceBlob, CloudBlobContainer destinationContainer)\r\n        {\r\n            var signature = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy\r\n            {\r\n                Permissions = SharedAccessBlobPermissions.Read,\r\n                SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24)\r\n            });\r\n\r\n            ICloudBlob destinationBlob = destinationContainer.GetBlockBlobReference(sourceBlob.Name);\r\n\r\n            if (destinationBlob.Exists())\r\n            {\r\n                Console.WriteLine(string.Format(\"Destination blob '{0}' already exists. Skipping.\", destinationBlob.Uri));\r\n            }\r\n            else\r\n            {\r\n\r\n                // Display the size of the source blob.\r\n                Console.WriteLine(sourceBlob.Properties.Length);\r\n\r\n                Console.WriteLine(string.Format(\"Copy blob '{0}' to '{1}'\", sourceBlob.Uri, destinationBlob.Uri));\r\n                destinationBlob.StartCopyFromBlob(new Uri(sourceBlob.Uri.AbsoluteUri + signature));\r\n\r\n                while (true)\r\n                {\r\n                    // The StartCopyFromBlob is an async operation, \r\n                    // so we want to check if the copy operation is completed before proceeding. \r\n                    // To do that, we call FetchAttributes on the blob and check the CopyStatus. \r\n                    destinationBlob.FetchAttributes();\r\n                    if (destinationBlob.CopyState.Status != CopyStatus.Pending)\r\n                    {\r\n                        break;\r\n                    }\r\n                    //It's still not completed. So wait for some time.\r\n                    System.Threading.Thread.Sleep(1000);\r\n                }\r\n\r\n                // Display the size of the destination blob.\r\n                Console.WriteLine(destinationBlob.Properties.Length);\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n## <a name=\"next-steps\"></a>后续步骤\r\n\r\n现即可编码已上传的资产。 有关详细信息，请参阅[对资产进行编码](media-services-portal-encode.md)。\r\n<!--Update_Description: update code to use AAD token instead of ACS-->"}