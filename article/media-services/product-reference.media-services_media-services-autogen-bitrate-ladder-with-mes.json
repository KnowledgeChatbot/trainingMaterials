{"Title":"使用 Azure Media Encoder Standard 自动生成比特率阶梯","Description":"本主题介绍如何使用 Media Encoder Standard (MES) 根据输入分辨率和比特率自动生成比特率阶梯。 不会超过输入分辨率和比特率。 例如，如果输入在 3Mbps 时为 720p，则输出最多会保持 720p，并且会以低于 3Mbps 的速率开始。","Content":"#  <a name=\"use-azure-media-encoder-standard-to-auto-generate-a-bitrate-ladder\"></a>使用 Azure Media Encoder Standard 自动生成比特率阶梯\n\n## <a name=\"overview\"></a>概述\n\n本主题介绍如何使用 Media Encoder Standard (MES) 根据输入分辨率和比特率自动生成比特率阶梯（比特率-分辨率对）。 自动生成的预设不会超过输入分辨率和比特率。 例如，如果输入在 3Mbps 时为 720p，则输出最多会保持 720p，并且会以低于 3Mbps 的速率开始。\n\n### <a name=\"encoding-for-streaming-only\"></a>编码为仅流式处理\n\n如果打算将源视频编码为仅流式处理，则应在创建编码任务时使用“自适应流式处理”预设。 使用“自适应流式处理”预设时，MES 编码器会以智能方式为比特率阶梯设置一个上限。 但是，用户无法控制编码成本，因为是由服务确定要使用的层数和分辨率。 可以在本主题末尾看到 MES 生成的输出层示例，这些示例是使用“自适应流式处理”预设进行编码得来的。 该输出资包含无音频和视频交错的 MP4 文件。\n\n### <a name=\"encoding-for-streaming-and-progressive-download\"></a>编码为流式处理和渐进式下载\n\n如果打算将源视频编码为流式处理以及生成可供渐进式下载的 MP4 文件，则应在创建编码任务时使用“内容自适应多比特率 MP4”预设。 使用“内容自适应多比特率 MP4”预设时，MES 编码器将应用与上述相同的编码逻辑，但现在输出资产将包含音频和视频交错的 MP4 文件。 可使用其中一个 MP4 文件（例如，最高比特率版本）作为渐进式下载文件。\n\n## <a id=\"encoding_with_dotnet\"></a>使用媒体服务 .NET SDK 进行编码\n\n以下代码示例使用媒体服务 .NET SDK 执行下列任务：\n\n- 创建编码作业。\n- 获取对 Media Encoder Standard 编码器的引用。\n- 向作业添加一个编码任务，指定使用“自适应流式处理”预设。 \n- 创建要包含所编码资产的输出资产。\n- 添加事件处理程序以检查作业进度。\n- 提交作业。\n\n#### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\n\n设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \n\n#### <a name=\"example\"></a>示例\n\n    using System;\n    using System.Configuration;\n    using System.Linq;\n    using Microsoft.WindowsAzure.MediaServices.Client;\n    using System.Threading;\n\n    namespace AdaptiveStreamingMESPresest\n    {\n        class Program\n        {\n        // Read values from the App.config file.\n        private static readonly string _AADTenantDomain =\n        ConfigurationManager.AppSettings[\"AADTenantDomain\"];\n        private static readonly string _RESTAPIEndpoint =\n        ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\n\n        // Field for service context.\n        private static CloudMediaContext _context = null;\n\n        static void Main(string[] args)\n        {\n            var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\n            var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\n\n            _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\n\n            // Get an uploaded asset.\n            var asset = _context.Assets.FirstOrDefault();\n\n            // Encode and generate the output using the \"Adaptive Streaming\" preset.\n            EncodeToAdaptiveBitrateMP4Set(asset);\n\n            Console.ReadLine();\n        }\n\n        static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\n        {\n            // Declare a new job.\n            IJob job = _context.Jobs.Create(\"Media Encoder Standard Job\");\n\n            // Get a media processor reference, and pass to it the name of the \n            // processor to use for the specific task.\n            IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\n\n            // Create a task\n            ITask task = job.Tasks.AddNew(\"Media Encoder Standard encoding task\",\n            processor,\n            \"Adaptive Streaming\",\n            TaskOptions.None);\n\n            // Specify the input asset to be encoded.\n            task.InputAssets.Add(asset);\n            // Add an output asset to contain the results of the job. \n            // This output is specified as AssetCreationOptions.None, which \n            // means the output asset is not encrypted. \n            task.OutputAssets.AddNew(\"Output asset\",\n            AssetCreationOptions.None);\n\n            job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\n            job.Submit();\n            job.GetExecutionProgressTask(CancellationToken.None).Wait();\n\n            return job.OutputMediaAssets[0];\n        }\n        private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\n        {\n            Console.WriteLine(\"Job state changed event:\");\n            Console.WriteLine(\"  Previous state: \" + e.PreviousState);\n            Console.WriteLine(\"  Current state: \" + e.CurrentState);\n            switch (e.CurrentState)\n            {\n            case JobState.Finished:\n                Console.WriteLine();\n                Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\n                break;\n            case JobState.Canceling:\n            case JobState.Queued:\n            case JobState.Scheduled:\n            case JobState.Processing:\n                Console.WriteLine(\"Please wait...\\n\");\n                break;\n            case JobState.Canceled:\n            case JobState.Error:\n\n                // Cast sender as a job.\n                IJob job = (IJob)sender;\n\n                // Display or log error details as needed.\n                break;\n            default:\n                break;\n            }\n        }\n        private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n        {\n            var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\n            ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\n\n            if (processor == null)\n            throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\n\n            return processor;\n        }\n        }\n    }\n\n## <a id=\"output\"></a>输出\n\n此部分显示 MES 生成的输出层的三个示例，是使用“自适应流式处理”预设进行编码得来的。 \n\n### <a name=\"example-1\"></a>示例 1\n高度为“1080”，帧速率为“29.970”的源生成 6 个视频层：\n\n|层|高度|宽度|比特率 (kbps)|\n|---|---|---|---|\n|1|1080|1920|6780|\n|2|720|1280|3520|\n|3|540|960|2210|\n|4|360|640|1150|\n|5|270|480|720|\n|6|180|320|380|\n\n### <a name=\"example-2\"></a>示例 2\n高度为“720”，帧速率为“23.970”的源生成 5 个视频层：\n\n|层|高度|宽度|比特率 (kbps)|\n|---|---|---|---|\n|1|720|1280|2940|\n|2|540|960|1850|\n|3|360|640|960|\n|4|270|480|600|\n|5|180|320|320|\n\n### <a name=\"example-3\"></a>示例 3\n高度为“360”，帧速率为“29.970”的源生成 3 个视频层：\n\n|层|高度|宽度|比特率 (kbps)|\n|---|---|---|---|\n|1|360|640|700|\n|2|270|480|440|\n|3|180|320|230|\n\n\n## <a name=\"see-also\"></a>另请参阅\n[媒体服务编码概述](media-services-encode-asset.md)\n<!--Update_Description: update code to use AAD token instead of ACS-->\n"}