{"Title":"将媒体服务资产下载到计算机 - Azure","Description":"了解如何将资产下载到计算机。 代码示例用 C# 编写且使用适用于 .NET 的媒体服务 SDK。","Content":"# <a name=\"how-to-deliver-an-asset-by-download\"></a>如何：通过下载交付资产\r\n本主题介绍已上传到媒体服务的媒体资产交付选项。 可以采用众多的应用程序方案来交付媒体服务内容。 可以下载媒体资产，或使用定位符访问媒体资产。 还可以将媒体内容发送到其他应用程序或其他内容提供商。 为了提高性能和伸缩性，用户还可以使用内容传送网络 (CDN) 来传送内容。\r\n\r\n此示例演示如何将媒体资产从媒体服务下载到本地计算机。 该代码将按作业 ID 查询与媒体服务帐户关联的作业，并访问其 OutputMediaAssets 集合（即运行作业后生成的、包含一个或多个输出媒体资产的集）。 此示例演示如何通过作业下载输出媒体资产，但也可运用相同的方法下载其他资产。\r\n\r\n>[!NOTE]\r\n>不同 AMS 策略的策略限制为 1,000,000 个（例如，对于定位器策略或 ContentKeyAuthorizationPolicy）。 如果始终使用相同的日期/访问权限，则应使用相同的策略 ID，例如，用于要长期就地保留的定位符的策略（非上传策略）。 有关详细信息，请参阅[此](media-services-dotnet-manage-entities.md#limit-access-policies)主题。\r\n\r\n    // Download the output asset of the specified job to a local folder.\r\n    static IAsset DownloadAssetToLocal( string jobId, string outputFolder)\r\n    {\r\n        // This method illustrates how to download a single asset. \r\n        // However, you can iterate through the OutputAssets\r\n        // collection, and download all assets if there are many. \r\n\r\n        // Get a reference to the job. \r\n        IJob job = GetJob(jobId);\r\n\r\n        // Get a reference to the first output asset. If there were multiple \r\n        // output media assets you could iterate and handle each one.\r\n        IAsset outputAsset = job.OutputMediaAssets[0];\r\n\r\n        // Create a SAS locator to download the asset\r\n        IAccessPolicy accessPolicy = _context.AccessPolicies.Create(\"File Download Policy\", TimeSpan.FromDays(30), AccessPermissions.Read);\r\n        ILocator locator = _context.Locators.CreateLocator(LocatorType.Sas, outputAsset, accessPolicy);\r\n\r\n        BlobTransferClient blobTransfer = new BlobTransferClient\r\n        {\r\n            NumberOfConcurrentTransfers = 20,\r\n            ParallelTransferThreadCount = 20\r\n        };\r\n\r\n        var downloadTasks = new List<Task>();\r\n        foreach (IAssetFile outputFile in outputAsset.AssetFiles)\r\n        {\r\n            // Use the following event handler to check download progress.\r\n            outputFile.DownloadProgressChanged += DownloadProgress;\r\n\r\n            string localDownloadPath = Path.Combine(outputFolder, outputFile.Name);\r\n\r\n            Console.WriteLine(\"File download path:  \" + localDownloadPath);\r\n\r\n            downloadTasks.Add(outputFile.DownloadAsync(Path.GetFullPath(localDownloadPath), blobTransfer, locator, CancellationToken.None));\r\n\r\n            outputFile.DownloadProgressChanged -= DownloadProgress;\r\n        }\r\n\r\n        Task.WaitAll(downloadTasks.ToArray());\r\n\r\n        return outputAsset;\r\n    }\r\n\r\n    static void DownloadProgress(object sender, DownloadProgressChangedEventArgs e)\r\n    {\r\n        Console.WriteLine(string.Format(\"{0} % download progress. \", e.Progress));\r\n    }\r\n\r\n\r\n## <a name=\"see-also\"></a>另请参阅\r\n[交付流内容](media-services-deliver-streaming-content.md)\r\n\r\n"}