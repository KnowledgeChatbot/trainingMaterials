{"Title":"Hyperlapse 媒体文件与 Azure Media Hyperlapse","Description":"Azure Media Hyperlapse 可以使用第一人称视角或运动相机内容创建流畅缩时视频。 本主题说明如何使用 Media Indexer。","Content":"# <a name=\"hyperlapse-media-files-with-azure-media-hyperlapse\"></a>Hyperlapse 媒体文件与 Azure Media Hyperlapse\nAzure Media Hyperlapse 是可以使用第一人称视角或运动相机内容创建流畅缩时视频的媒体处理器 (MP)。  Azure 媒体服务的基于云的 Microsoft Hyperlapse 与 [Microsoft Research 的桌面 Hyperlapse Pro 和手机版 Hyperlapse Mobile](http://aka.ms/hyperlapse) 相似，它运用大规模的 Azure 媒体服务媒体处理平台来实现水平缩放，以及并行化批量 Hyperlapse 处理。\n\n> [!IMPORTANT]\n> Microsoft Hyperlapse 最适合用于通过移动相机拍摄第一人称视角内容。  尽管静态相机镜头仍可运行，但 Azure 媒体 Hyperlapse 媒体处理器无法保证其他类型内容的性能及质量。  若要深入了解 Azure 媒体服务的 Microsoft Hyperlapse 并观看一些示例视频，请查看公开预览版的[简介博客文章](http://aka.ms/azurehyperlapseblog)。\n> \n> \n\nAzure Media Hyperlapse 作业接受输入 MP4、MOV 或 WMV 资产文件以及配置文件，以指定视频中要缩时的帧及其速度（例如前 10,000 帧的速度为 2x）。  输出是输入视频经过稳定和缩时转译的结果。\n\n有关最新的 Azure Media Hyperlapse 更新，请参阅 [媒体服务博客](https://azure.microsoft.com/blog/topics/media-services/)。\n\n## <a name=\"hyperlapse-an-asset\"></a>将资产进行 Hyperlapse 处理\n\n首先，请将所需的输入文件上传到 Azure 媒体服务。 \n\n### <a id=\"configuration\"></a>Hyperlapse 的配置预设\n内容上传到媒体服务帐户后，需要构造配置预设。  下表说明了用户指定的字段：\n\n| 字段 | 说明 |\n| --- | --- |\n| StartFrame |应开始 Microsoft Hyperlapse 处理时所在的帧。 |\n| NumFrames |要处理的帧数 |\n| Speed |用于加速输入视频的倍数。 |\n\n下面是采用 JSON 和 XML 格式且符合要求的配置文件示例：\n\n**XML 预设：**\n\n    <?xml version=\"1.0\" encoding=\"utf-16\"?>\n    <Preset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\n        <Sources>\n            <Source StartFrame=\"0\" NumFrames=\"10000\" />\n        </Sources>\n        <Options>\n            <Speed>12</Speed>\n        </Options>\n    </Preset>\n\n**JSON 预设：**\n\n    {\n        \"Version\":1.0,\n        \"Sources\": [\n            {\n                \"StartFrame\":0,\n                \"NumFrames\":2147483647\n            }\n        ],\n        \"Options\": {\n            \"Speed\":1,\n            \"Stabilize\":false\n        }\n    }\n\n### <a id=\"sample_code\"></a> 包含 AMS .NET SDK 的 Microsoft Hyperlapse\n以下方法将媒体文件上传为资产，然后使用 Azure Media Hyperlapse 媒体处理器来创建作业。\n\n> [!NOTE]\n> 为了使代码正常工作，应该事先在名为“context”的作用域中创建 CloudMediaContext。  若要了解详细信息，请阅读[内容管理文章](media-services-dotnet-get-started.md)。\n> \n> [!NOTE]\n> 字符串参数“hyperConfig”应是上述采用 JSON 或 XML 格式且符合要求的配置预设。\n> \n> \n\n        static bool RunHyperlapseJob(string input, string output, string hyperConfig)\n        {\n            // create asset with input file\n            IAsset asset = context\n            .Assets\n            .CreateAssetAndUploadSingleFile(input, \"My Hyperlapse Input\", AssetCreationOptions.None);\n\n            // grab instances of Azure Media Hyperlapse MP\n            IMediaProcessor mp = context\n            .MediaProcessors\n            .GetLatestMediaProcessorByName(\"Azure Media Hyperlapse\");\n\n            // create Job with Hyperlapse task\n            IJob job = context\n            .Jobs\n            .Create(String.Format(\"Hyperlapse {0}\", input));\n\n            if (String.IsNullOrEmpty(hyperConfig))\n            {\n            // config cannot be empty\n            return false;\n            }\n\n            hyperConfig = File.ReadAllText(hyperConfig);\n\n            ITask hyperlapseTask = job.Tasks.AddNew(\"Hyperlapse task\",\n            mp,\n            hyperConfig,\n            TaskOptions.None);\n            hyperlapseTask.InputAssets.Add(asset);\n            hyperlapseTask.OutputAssets.AddNew(\"Hyperlapse output\",\n            AssetCreationOptions.None);\n\n            job.Submit();\n\n            // Create progress printing and querying tasks\n            Task progressPrintTask = new Task(() =>\n            {\n\n            IJob jobQuery = null;\n            do\n            {\n                var progressContext = context;\n                jobQuery = progressContext.Jobs\n                .Where(j => j.Id == job.Id)\n                .First();\n                Console.WriteLine(string.Format(\"{0}\\t{1}\\t{2}\",\n                DateTime.Now,\n                jobQuery.State,\n                jobQuery.Tasks[0].Progress));\n                Thread.Sleep(10000);\n            }\n            while (jobQuery.State != JobState.Finished &&\n                                   jobQuery.State != JobState.Error &&\n                                   jobQuery.State != JobState.Canceled);\n                });\n                \n            progressPrintTask.Start();\n\n            Task progressJobTask = job.GetExecutionProgressTask(\n                                                 CancellationToken.None);\n            progressJobTask.Wait();\n\n            // If job state is Error, the event handling\n            // method for job progress should log errors.  Here we check\n            // for error state and exit if needed.\n            if (job.State == JobState.Error)\n            {\n                ErrorDetail error = job.Tasks.First().ErrorDetails.First();\n                Console.WriteLine(string.Format(\"Error: {0}. {1}\",\n                                                error.Code,\n                                                error.Message));  \n                return false;                  \n            }\n\n        DownloadAsset(job.OutputMediaAssets.First(), output);\n        return true;\n    }\n\n    static void DownloadAsset(IAsset asset, string outputDirectory)\n    {\n        foreach (IAssetFile file in asset.AssetFiles)\n        {\n            file.Download(Path.Combine(outputDirectory, file.Name));\n        }\n    }\n\n\n    static IAsset CreateAssetAndUploadSingleFile(string filePath, string assetName, AssetCreationOptions options)\n    {\n        IAsset asset = context.Assets.Create(assetName, options);\n\n        var assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath));\n        assetFile.Upload(filePath);\n\n        return asset;\n    }\n\n    static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n    {\n        var processor = context.MediaProcessors\n        .Where(p => p.Name == mediaProcessorName)\n        .ToList()\n        .OrderBy(p => new Version(p.Version))\n        .LastOrDefault();\n\n        if (processor == null)\n            throw new ArgumentException(string.Format(\"Unknown media processor\",\n                                                       mediaProcessorName));\n\n        return processor;\n    }\n\n### <a id=\"file_types\"></a>支持的文件类型\n* MP4\n* MOV\n* WMV\n\n## <a name=\"related-links\"></a>相关链接\n[Azure 媒体服务分析概述](media-services-analytics-overview.md)\n\n[Azure Media Analytics demos（Azure 媒体分析演示）](http://azuremedialabs.azurewebsites.net/demos/Analytics.html)"}