{"Title":"使用 .NET 配置 Azure 媒体服务遥测","Description":"本文说明如何通过 .NET SDK 使用 Azure 媒体服务遥测。","Content":"# <a name=\"configuring-azure-media-services-telemetry-with-net\"></a>使用 .NET 配置 Azure 媒体服务遥测\r\n\r\n本主题介绍了使用 .NET SDK 配置 Azure 媒体服务 (AMS) 遥测时可采取的常规步骤。 \r\n\r\n>[!NOTE]\r\n>有关 AMS 遥测定义和使用方法的详细介绍，请参阅[概述](media-services-telemetry-overview.md)主题。\r\n\r\n可通过以下方式之一使用遥测数据：\r\n\r\n- 直接从 Azure 表存储中读取数据（例如使用存储 SDK）。 有关遥测存储表的说明，请参阅 **此主题** 中的 [使用遥测信息](https://msdn.microsoft.com/library/mt742089.aspx) 。\r\n\r\n或\r\n\r\n- 使用媒体服务 .NET SDK 中支持的内容来读取存储数据。 本主题说明如何为指定的 AMS 帐户启用遥测，以及如何使用 Azure 媒体服务 .NET SDK 查询度量值。  \r\n\r\n## <a name=\"configuring-telemetry-for-a-media-services-account\"></a>为媒体服务帐户配置遥测\r\n\r\n启用遥测需要执行以下步骤：\r\n\r\n- 获取已附加到媒体服务帐户的存储帐户的凭据。 \r\n- 创建一个通知终结点，将其 EndPointType 设置为 AzureTable，并使 endPontAddress 指向存储表。\r\n\r\n    ```\r\n    INotificationEndPoint notificationEndPoint = \r\n                  _context.NotificationEndPoints.Create(\"monitoring\", \r\n                  NotificationEndPointType.AzureTable,\r\n                  \"https://\" + _mediaServicesStorageAccountName + \".table.core.chinacloudapi.cn/\");\r\n    ```\r\n\r\n- 为要监视的服务创建监视配置设置。 最多允许一个监视配置设置。 \r\n\r\n    ```\r\n    IMonitoringConfiguration monitoringConfiguration = _context.MonitoringConfigurations.Create(notificationEndPoint.Id,\r\n        new List<ComponentMonitoringSetting>()\r\n        {\r\n            new ComponentMonitoringSetting(MonitoringComponent.Channel, MonitoringLevel.Normal),\r\n            new ComponentMonitoringSetting(MonitoringComponent.StreamingEndpoint, MonitoringLevel.Normal)\r\n        });\r\n    ```\r\n\r\n## <a name=\"consuming-telemetry-information\"></a>此主题\r\n\r\n有关使用遥测信息的信息，请参阅 [此主题](media-services-telemetry-overview.md)。\r\n\r\n## <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r\n\r\n1. 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r\n\r\n2. 将以下元素添加到 app.config 文件中定义的 **appSettings**：\r\n\r\n    <add key=\"StorageAccountName\" value=\"storage_name\" />\r\n \r\n## <a name=\"example\"></a>示例  \r\n    \r\n以下示例说明如何为指定的 AMS 帐户启用遥测，以及如何使用 Azure 媒体服务 .NET SDK 查询度量值。  \r\n\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.Configuration;\r\n    using System.Linq;\r\n    using Microsoft.WindowsAzure.MediaServices.Client;\r\n\r\n    namespace AMSMetrics\r\n    {\r\n        class Program\r\n        {\r\n        private static readonly string _AADTenantDomain =\r\n            ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r\n        private static readonly string _RESTAPIEndpoint =\r\n            ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r\n\r\n        private static readonly string _mediaServicesStorageAccountName =\r\n            ConfigurationManager.AppSettings[\"StorageAccountName\"];\r\n\r\n        // Field for service context.\r\n        private static CloudMediaContext _context = null;\r\n\r\n        private static IStreamingEndpoint _streamingEndpoint = null;\r\n        private static IChannel _channel = null;\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n            var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r\n\r\n            _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r\n\r\n            _streamingEndpoint = _context.StreamingEndpoints.FirstOrDefault();\r\n            _channel = _context.Channels.FirstOrDefault();\r\n\r\n            var monitoringConfigurations = _context.MonitoringConfigurations;\r\n            IMonitoringConfiguration monitoringConfiguration = null;\r\n\r\n            // No more than one monitoring configuration settings is allowed.\r\n            if (monitoringConfigurations.ToArray().Length != 0)\r\n            {\r\n            monitoringConfiguration = _context.MonitoringConfigurations.FirstOrDefault();\r\n            }\r\n            else\r\n            {\r\n            INotificationEndPoint notificationEndPoint =\r\n                      _context.NotificationEndPoints.Create(\"monitoring\",\r\n                      NotificationEndPointType.AzureTable, GetTableEndPoint());\r\n\r\n            monitoringConfiguration = _context.MonitoringConfigurations.Create(notificationEndPoint.Id,\r\n                new List<ComponentMonitoringSetting>()\r\n                {\r\n                    new ComponentMonitoringSetting(MonitoringComponent.Channel, MonitoringLevel.Normal),\r\n                    new ComponentMonitoringSetting(MonitoringComponent.StreamingEndpoint, MonitoringLevel.Normal)\r\n\r\n                });\r\n            }\r\n\r\n            //Print metrics for a Streaming Endpoint.\r\n            PrintStreamingEndpointMetrics();\r\n\r\n            Console.ReadLine();\r\n        }\r\n\r\n        private static string GetTableEndPoint()\r\n        {\r\n            return \"https://\" + _mediaServicesStorageAccountName + \".table.core.chinacloudapi.cn/\";\r\n        }\r\n\r\n        private static void PrintStreamingEndpointMetrics()\r\n        {\r\n            Console.WriteLine(string.Format(\"Telemetry for streaming endpoint '{0}'\", _streamingEndpoint.Name));\r\n\r\n            DateTime timerangeEnd = DateTime.UtcNow;\r\n            DateTime timerangeStart = DateTime.UtcNow.AddHours(-5);\r\n\r\n            // Get some streaming endpoint metrics.\r\n            var telemetry = _streamingEndpoint.GetTelemetry();\r\n\r\n            var res = telemetry.GetStreamingEndpointRequestLogs(timerangeStart, timerangeEnd);\r\n\r\n            Console.Title = \"Streaming endpoint metrics:\";\r\n\r\n            foreach (var log in res)\r\n            {\r\n            Console.WriteLine(\"AccountId: {0}\", log.AccountId);\r\n            Console.WriteLine(\"BytesSent: {0}\", log.BytesSent);\r\n            Console.WriteLine(\"EndToEndLatency: {0}\", log.EndToEndLatency);\r\n            Console.WriteLine(\"HostName: {0}\", log.HostName);\r\n            Console.WriteLine(\"ObservedTime: {0}\", log.ObservedTime);\r\n            Console.WriteLine(\"PartitionKey: {0}\", log.PartitionKey);\r\n            Console.WriteLine(\"RequestCount: {0}\", log.RequestCount);\r\n            Console.WriteLine(\"ResultCode: {0}\", log.ResultCode);\r\n            Console.WriteLine(\"RowKey: {0}\", log.RowKey);\r\n            Console.WriteLine(\"ServerLatency: {0}\", log.ServerLatency);\r\n            Console.WriteLine(\"StatusCode: {0}\", log.StatusCode);\r\n            Console.WriteLine(\"StreamingEndpointId: {0}\", log.StreamingEndpointId);\r\n            Console.WriteLine();\r\n            }\r\n\r\n            Console.WriteLine();\r\n        }\r\n\r\n        private static void PrintChannelMetrics()\r\n        {\r\n            if (_channel == null)\r\n            {\r\n            Console.WriteLine(\"There are no channels in this AMS account\");\r\n            return;\r\n            }\r\n\r\n            Console.WriteLine(string.Format(\"Telemetry for channel '{0}'\", _channel.Name));\r\n\r\n            DateTime timerangeEnd = DateTime.UtcNow; \r\n            DateTime timerangeStart = DateTime.UtcNow.AddHours(-5);\r\n\r\n            // Get some channel metrics.\r\n            var telemetry = _channel.GetTelemetry();\r\n\r\n            var channelMetrics = telemetry.GetChannelHeartbeats(timerangeStart, timerangeEnd);\r\n\r\n            // Print the channel metrics.\r\n            Console.WriteLine(\"Channel metrics:\");\r\n\r\n            foreach (var channelHeartbeat in channelMetrics.OrderBy(x => x.ObservedTime))\r\n            {\r\n            Console.WriteLine(\r\n                \"    Observed time: {0}, Last timestamp: {1}, Incoming bitrate: {2}\",\r\n                channelHeartbeat.ObservedTime,\r\n                channelHeartbeat.LastTimestamp,\r\n                channelHeartbeat.IncomingBitrate);\r\n            }\r\n\r\n            Console.WriteLine();\r\n        }\r\n        }\r\n    }\r\n\r\n\r\n<!--Update_Description: update code to use AAD token instead of ACS-->"}