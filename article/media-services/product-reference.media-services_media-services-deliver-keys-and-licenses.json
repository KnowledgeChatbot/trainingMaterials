{"Title":"使用 Azure 媒体服务传送 DRM 许可证或 AES 密钥","Description":"本文介绍如何使用 Azure 媒体服务 (AMS) 来传送 PlayReady 许可证和 AES 密钥，但使用本地服务器完成余下的操作（编码、加密、流式传输）。","Content":"# <a name=\"use-azure-media-services-to-deliver-drm-licenses-or-aes-keys\"></a>使用 Azure 媒体服务传送 DRM 许可证或 AES 密钥\r\nAzure 媒体服务 (AMS) 可让你引入、编码、添加内容保护，以及流式传输内容（有关详细信息，请参阅[此文章](media-services-protect-with-drm.md)）。 但是，有些客户只想使用 AMS 来传送许可证和/或密钥，并使用他们的本地服务器来进行编码、加密和流式传输。 本文说明如何使用 AMS 来传送 PlayReady 许可证，但使用本地服务器完成余下的操作。 \r\n\r\n## <a name=\"overview\"></a>概述\r\n媒体服务提供传送 PlayReady DRM 许可证及 AES-128 密钥的服务。 媒体服务还提供用于配置所需权限和限制的 API，这样当用户播放 DRM 保护的内容时，DRM 运行时便会强制实施这些权限和限制。 当用户请求受保护的内容时，播放器应用程序将从 AMS 许可证服务请求许可证。 AMS 许可证服务将向播放器颁发许可证（如果播放器已获授权）。 PlayReady 许可证包含客户端播放器用来对内容进行解密和流式传输的解密密钥。\r\n\r\n媒体服务支持通过多种方式对发出许可证或密钥请求的用户进行授权。 可以配置内容密钥的授权策略，该策略可以包含一种或多种限制：开放或令牌限制。 令牌限制策略必须附带由安全令牌服务 (STS) 颁发的令牌。 媒体服务支持采用简单 Web 令牌 (SWT) 格式和 JSON Web 令牌 (JWT) 格式的令牌。\r\n\r\n下图显示了使用 AMS 传送 PlayReady 许可证，但使用本地服务器完成其余部分所要执行的主要步骤。\r\n\r\n![使用 PlayReady 进行保护](./media/media-services-deliver-keys-and-licenses/media-services-diagram1.png)\r\n\r\n## <a name=\"download-sample\"></a>下载示例\r\n可以从 [此处](https://github.com/Azure/media-services-dotnet-deliver-drm-licenses)下载本文所述的示例。\r\n\r\n## <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r\n\r\n1. 设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r\n2. 将以下元素添加到 app.config 文件中定义的 **appSettings**：\r\n\r\n    <add key=\"Issuer\" value=\"http://testacs.com\"/> <add key=\"Audience\" value=\"urn:test\"/>\r\n\r\n## <a name=\"net-code-example\"></a>.NET 代码示例\r\n以下代码示例演示如何创建通用内容密钥，并获取 PlayReady 许可证获取 URL。 需要从 AMS 获取一下信息片段并配置本地服务器：内容密钥、 密钥 ID、 许可证获取 URL。 配置本地服务器后，可以从自己的流服务器进行流式传输。 由于加密的流指向 AMS 许可证服务器，播放器将从 AMS 请求许可证。 如果选择令牌身份验证，AMS 许可证服务器将验证通过 HTTPS 发送的令牌，然后（如果有效）将许可证传回给播放器。 （代码示例仅演示了如何创建通用内容密钥，并获取 PlayReady 许可证获取 URL。 如果想要传送 AES-128 密钥，则需要创建信封内容密钥，并获取密钥获取 URL，[此文章](media-services-protect-with-aes128.md)介绍了具体的操作）。\r\n\r\n    using System;\r\n    using System.Collections.Generic;\r\n    using System.Configuration;\r\n    using Microsoft.WindowsAzure.MediaServices.Client;\r\n    using Microsoft.WindowsAzure.MediaServices.Client.ContentKeyAuthorization;\r\n    using Microsoft.WindowsAzure.MediaServices.Client.Widevine;\r\n    using Newtonsoft.Json;\r\n\r\n    namespace DeliverDRMLicenses\r\n    {\r\n        class Program\r\n        {\r\n            // Read values from the App.config file.\r\n            private static readonly string _AADTenantDomain =\r\n                ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r\n            private static readonly string _RESTAPIEndpoint =\r\n                ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r\n\r\n            private static readonly Uri _sampleIssuer =\r\n                new Uri(ConfigurationManager.AppSettings[\"Issuer\"]);\r\n            private static readonly Uri _sampleAudience =\r\n                new Uri(ConfigurationManager.AppSettings[\"Audience\"]);\r\n\r\n            // Field for service context.\r\n            private static CloudMediaContext _context = null;\r\n\r\n            static void Main(string[] args)\r\n            {\r\n                var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n                var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r\n\r\n                _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r\n\r\n                bool tokenRestriction = true;\r\n                string tokenTemplateString = null;\r\n\r\n\r\n                IContentKey key = CreateCommonTypeContentKey();\r\n\r\n                // Print out the key ID and Key in base64 string format\r\n                Console.WriteLine(\"Created key {0} with key value {1} \",\r\n                    key.Id, System.Convert.ToBase64String(key.GetClearKeyValue()));\r\n\r\n                Console.WriteLine(\"PlayReady License Key delivery URL: {0}\",\r\n                    key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense));\r\n\r\n                if (tokenRestriction)\r\n                    tokenTemplateString = AddTokenRestrictedAuthorizationPolicy(key);\r\n                else\r\n                    AddOpenAuthorizationPolicy(key);\r\n\r\n                Console.WriteLine(\"Added authorization policy: {0}\",\r\n                    key.AuthorizationPolicyId);\r\n                Console.WriteLine();\r\n                Console.ReadLine();\r\n            }\r\n\r\n            static public void AddOpenAuthorizationPolicy(IContentKey contentKey)\r\n            {\r\n\r\n                // Create ContentKeyAuthorizationPolicy with Open restrictions \r\n                // and create authorization policy          \r\n\r\n                List<ContentKeyAuthorizationPolicyRestriction> restrictions =\r\n                    new List<ContentKeyAuthorizationPolicyRestriction>\r\n                {\r\n                        new ContentKeyAuthorizationPolicyRestriction\r\n                        {\r\n                            Name = \"Open\",\r\n                            KeyRestrictionType = (int)ContentKeyRestrictionType.Open,\r\n                            Requirements = null\r\n                        }\r\n                };\r\n\r\n                // Configure PlayReady license templates.\r\n                string PlayReadyLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r\n\r\n                IContentKeyAuthorizationPolicyOption PlayReadyPolicy =\r\n                    _context.ContentKeyAuthorizationPolicyOptions.Create(\"\",\r\n                        ContentKeyDeliveryType.PlayReadyLicense,\r\n                            restrictions, PlayReadyLicenseTemplate);\r\n\r\n                IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r\n                            ContentKeyAuthorizationPolicies.\r\n                            CreateAsync(\"Deliver Common Content Key with no restrictions\").\r\n                            Result;\r\n\r\n\r\n                contentKeyAuthorizationPolicy.Options.Add(PlayReadyPolicy);\r\n                // Associate the content key authorization policy with the content key.\r\n                contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r\n                contentKey = contentKey.UpdateAsync().Result;\r\n            }\r\n\r\n            public static string AddTokenRestrictedAuthorizationPolicy(IContentKey contentKey)\r\n            {\r\n                string tokenTemplateString = GenerateTokenRequirements();\r\n\r\n                List<ContentKeyAuthorizationPolicyRestriction> restrictions =\r\n                    new List<ContentKeyAuthorizationPolicyRestriction>\r\n                {\r\n                        new ContentKeyAuthorizationPolicyRestriction\r\n                        {\r\n                            Name = \"Token Authorization Policy\",\r\n                            KeyRestrictionType = (int)ContentKeyRestrictionType.TokenRestricted,\r\n                            Requirements = tokenTemplateString,\r\n                        }\r\n                };\r\n\r\n                // Configure PlayReady license templates.\r\n                string PlayReadyLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\r\n                IContentKeyAuthorizationPolicyOption PlayReadyPolicy =\r\n                    _context.ContentKeyAuthorizationPolicyOptions.Create(\"Token option\",\r\n                        ContentKeyDeliveryType.PlayReadyLicense,\r\n                            restrictions, PlayReadyLicenseTemplate);\r\n                IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\r\n                            ContentKeyAuthorizationPolicies.\r\n                            CreateAsync(\"Deliver Common Content Key with token restrictions\").\r\n                            Result;\r\n\r\n                contentKeyAuthorizationPolicy.Options.Add(PlayReadyPolicy);\r\n                // Associate the content key authorization policy with the content key\r\n                contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\r\n                contentKey = contentKey.UpdateAsync().Result;\r\n\r\n                return tokenTemplateString;\r\n            }\r\n\r\n            static private string GenerateTokenRequirements()\r\n            {\r\n                TokenRestrictionTemplate template = new TokenRestrictionTemplate(TokenType.SWT);\r\n\r\n                template.PrimaryVerificationKey = new SymmetricVerificationKey();\r\n                template.AlternateVerificationKeys.Add(new SymmetricVerificationKey());\r\n                template.Audience = _sampleAudience.ToString();\r\n                template.Issuer = _sampleIssuer.ToString();\r\n                template.RequiredClaims.Add(TokenClaim.ContentKeyIdentifierClaim);\r\n\r\n                return TokenRestrictionTemplateSerializer.Serialize(template);\r\n            }\r\n\r\n            static private string ConfigurePlayReadyLicenseTemplate()\r\n            {\r\n                // The following code configures PlayReady License Template using .NET classes\r\n                // and returns the XML string.\r\n\r\n                //The PlayReadyLicenseResponseTemplate class represents the template \r\n                //for the response sent back to the end user. \r\n                //It contains a field for a custom data string between the license server \r\n                //and the application (may be useful for custom app logic) \r\n                //as well as a list of one or more license templates.\r\n\r\n                PlayReadyLicenseResponseTemplate responseTemplate =\r\n                    new PlayReadyLicenseResponseTemplate();\r\n\r\n                // The PlayReadyLicenseTemplate class represents a license template \r\n                // for creating PlayReady licenses\r\n                // to be returned to the end users. \r\n                // It contains the data on the content key in the license \r\n                // and any rights or restrictions to be \r\n                // enforced by the PlayReady DRM runtime when using the content key.\r\n                PlayReadyLicenseTemplate licenseTemplate = new PlayReadyLicenseTemplate();\r\n\r\n                // Configure whether the license is persistent \r\n                // (saved in persistent storage on the client) \r\n                // or non-persistent (only held in memory while the player is using the license).  \r\n                licenseTemplate.LicenseType = PlayReadyLicenseType.Nonpersistent;\r\n\r\n                // AllowTestDevices controls whether test devices can use the license or not.  \r\n                // If true, the MinimumSecurityLevel property of the license\r\n                // is set to 150.  If false (the default), \r\n                // the MinimumSecurityLevel property of the license is set to 2000.\r\n                licenseTemplate.AllowTestDevices = true;\r\n\r\n                // You can also configure the Play Right in the PlayReady license by using the PlayReadyPlayRight class. \r\n                // It grants the user the ability to playback the content subject to the zero or more restrictions \r\n                // configured in the license and on the PlayRight itself (for playback specific policy). \r\n                // Much of the policy on the PlayRight has to do with output restrictions \r\n                // which control the types of outputs that the content can be played over and \r\n                // any restrictions that must be put in place when using a given output.\r\n                // For example, if the DigitalVideoOnlyContentRestriction is enabled, \r\n                //then the DRM runtime will only allow the video to be displayed over digital outputs \r\n                //(analog video outputs won’t be allowed to pass the content).\r\n\r\n                // IMPORTANT: These types of restrictions can be very powerful \r\n                // but can also affect the consumer experience. \r\n                // If the output protections are configured too restrictive, \r\n                // the content might be unplayable on some clients. \r\n                // For more information, see the PlayReady Compliance Rules document.\r\n\r\n                // For example:\r\n                //licenseTemplate.PlayRight.AgcAndColorStripeRestriction = new AgcAndColorStripeRestriction(1);\r\n\r\n                responseTemplate.LicenseTemplates.Add(licenseTemplate);\r\n\r\n                return MediaServicesLicenseTemplateSerializer.Serialize(responseTemplate);\r\n            }\r\n\r\n\r\n            static public IContentKey CreateCommonTypeContentKey()\r\n            {\r\n                // Create envelope encryption content key\r\n                Guid keyId = Guid.NewGuid();\r\n                byte[] contentKey = GetRandomBuffer(16);\r\n\r\n                IContentKey key = _context.ContentKeys.Create(\r\n                                        keyId,\r\n                                        contentKey,\r\n                                        \"ContentKey\",\r\n                                        ContentKeyType.CommonEncryption);\r\n\r\n                return key;\r\n            }\r\n\r\n            static private byte[] GetRandomBuffer(int length)\r\n            {\r\n                var returnValue = new byte[length];\r\n\r\n                using (var rng =\r\n                    new System.Security.Cryptography.RNGCryptoServiceProvider())\r\n                {\r\n                    rng.GetBytes(returnValue);\r\n                }\r\n\r\n                return returnValue;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n## <a name=\"see-also\"></a>另请参阅\r\n[使用 PlayReady 动态通用加密](media-services-protect-with-drm.md)\r\n\r\n[使用 AES-128 动态加密和密钥传送服务](media-services-protect-with-aes128.md)\r\n<!--Update_Description:update code to use AAD token instead of ACS-->"}