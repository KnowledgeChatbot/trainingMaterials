{"Title":"自定义 Media Encoder Standard 预设","Description":"本主题说明如何通过自定义 Media Encoder Standard 任务预设执行高级编码。 本主题说明如何使用媒体服务 .NET SDK 创建编码任务和作业。 此外，还说明如何向编码作业提供自定义预设。","Content":"# <a name=\"customizing-media-encoder-standard-presets\"></a>自定义 Media Encoder Standard 预设\r\n\r\n## <a name=\"overview\"></a>概述\r\n\r\n本主题演示如何通过使用自定义预设的 Media Encoder Standard (MES) 执行高级编码。 本主题使用 .NET 创建编码任务和执行此任务的作业。  \r\n\r\n本主题介绍如何使用 [H264 多比特率 720p](media-services-mes-preset-H264-Multiple-Bitrate-720p.md) 预设和减少层数来进行自定义预设。 [自定义 Media Encoder Standard 预设](media-services-advanced-encoding-with-mes.md)主题演示了可用于执行高级编码任务的自定义预设。\r\n\r\n## <a id=\"customizing_presets\"></a> 自定义 MES 预设\r\n\r\n### <a name=\"original-preset\"></a>原始预设\r\n\r\n将 [H264 多比特率 720p](media-services-mes-preset-H264-Multiple-Bitrate-720p.md) 主题中定义的 JSON 保存到某个具有 .json 扩展名的文件。 例如，CustomPreset_JSON.json。\r\n\r\n### <a name=\"customized-preset\"></a>自定义的预设\r\n\r\n打开“CustomPreset_JSON.json”文件，删除“H264Layers” 中的前三层，使文件如下所示。\r\n\r\n    \r\n    {  \r\n      \"Version\": 1.0,  \r\n      \"Codecs\": [  \r\n        {  \r\n          \"KeyFrameInterval\": \"00:00:02\",  \r\n          \"H264Layers\": [  \r\n            {  \r\n              \"Profile\": \"Auto\",  \r\n              \"Level\": \"auto\",  \r\n              \"Bitrate\": 1000,  \r\n              \"MaxBitrate\": 1000,  \r\n              \"BufferWindow\": \"00:00:05\",  \r\n              \"Width\": 640,  \r\n              \"Height\": 360,  \r\n              \"BFrames\": 3,  \r\n              \"ReferenceFrames\": 3,  \r\n              \"AdaptiveBFrame\": true,  \r\n              \"Type\": \"H264Layer\",  \r\n              \"FrameRate\": \"0/1\"  \r\n            },  \r\n            {  \r\n              \"Profile\": \"Auto\",  \r\n              \"Level\": \"auto\",  \r\n              \"Bitrate\": 650,  \r\n              \"MaxBitrate\": 650,  \r\n              \"BufferWindow\": \"00:00:05\",  \r\n              \"Width\": 640,  \r\n              \"Height\": 360,  \r\n              \"BFrames\": 3,  \r\n              \"ReferenceFrames\": 3,  \r\n              \"AdaptiveBFrame\": true,  \r\n              \"Type\": \"H264Layer\",  \r\n              \"FrameRate\": \"0/1\"  \r\n            },  \r\n            {  \r\n              \"Profile\": \"Auto\",  \r\n              \"Level\": \"auto\",  \r\n              \"Bitrate\": 400,  \r\n              \"MaxBitrate\": 400,  \r\n              \"BufferWindow\": \"00:00:05\",  \r\n              \"Width\": 320,  \r\n              \"Height\": 180,  \r\n              \"BFrames\": 3,  \r\n              \"ReferenceFrames\": 3,  \r\n              \"AdaptiveBFrame\": true,  \r\n              \"Type\": \"H264Layer\",  \r\n              \"FrameRate\": \"0/1\"  \r\n            }  \r\n          ],  \r\n          \"Type\": \"H264Video\"  \r\n        },  \r\n        {  \r\n          \"Profile\": \"AACLC\",  \r\n          \"Channels\": 2,  \r\n          \"SamplingRate\": 48000,  \r\n          \"Bitrate\": 128,  \r\n          \"Type\": \"AACAudio\"  \r\n        }  \r\n      ],  \r\n      \"Outputs\": [  \r\n        {  \r\n          \"FileName\": \"{Basename}_{Width}x{Height}_{VideoBitrate}.mp4\",  \r\n          \"Format\": {  \r\n            \"Type\": \"MP4Format\"  \r\n          }  \r\n        }  \r\n      ]  \r\n    }  \r\n    \r\n\r\n## <a id=\"encoding_with_dotnet\"></a>使用媒体服务 .NET SDK 进行编码\r\n\r\n以下代码示例使用媒体服务 .NET SDK 执行下列任务：\r\n\r\n- 创建编码作业。\r\n- 获取对 Media Encoder Standard 编码器的引用。\r\n- 加载前面部分中创建的自定义 JSON 预设。\r\n\r\n    ```.net\r\n    // Load the JSON from the local file.\r\n    string configuration = File.ReadAllText(fileName);\r\n    ```\r\n\r\n- 将编码任务添加到作业。\r\n- 指定要编码的输入资产。\r\n- 创建要包含所编码资产的输出资产。\r\n- 添加事件处理程序以检查作业进度。\r\n- 提交作业。\r\n   \r\n#### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r\n\r\n设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r\n\r\n#### <a name=\"example\"></a>示例   \r\n\r\n    using System;\r\n    using System.Configuration;\r\n    using System.IO;\r\n    using System.Linq;\r\n    using Microsoft.WindowsAzure.MediaServices.Client;\r\n    using System.Threading;\r\n\r\n    namespace CustomizeMESPresests\r\n    {\r\n        class Program\r\n        {\r\n        // Read values from the App.config file.\r\n        private static readonly string _AADTenantDomain =\r\n        ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r\n        private static readonly string _RESTAPIEndpoint =\r\n        ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r\n\r\n        // Field for service context.\r\n        private static CloudMediaContext _context = null;\r\n\r\n        private static readonly string _mediaFiles =\r\n            Path.GetFullPath(@\"../..\\Media\");\r\n\r\n        private static readonly string _singleMP4File =\r\n            Path.Combine(_mediaFiles, @\"BigBuckBunny.mp4\");\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n            var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r\n\r\n            _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r\n\r\n            // Get an uploaded asset.\r\n            var asset = _context.Assets.FirstOrDefault();\r\n\r\n            // Encode and generate the output using custom presets.\r\n            EncodeToAdaptiveBitrateMP4Set(asset);\r\n\r\n            Console.ReadLine();\r\n        }\r\n\r\n        static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\r\n        {\r\n            // Declare a new job.\r\n            IJob job = _context.Jobs.Create(\"Media Encoder Standard Job\");\r\n            // Get a media processor reference, and pass to it the name of the \r\n            // processor to use for the specific task.\r\n            IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\r\n\r\n            // Load the XML (or JSON) from the local file.\r\n            string configuration = File.ReadAllText(\"CustomPreset_JSON.json\");\r\n\r\n            // Create a task\r\n            ITask task = job.Tasks.AddNew(\"Media Encoder Standard encoding task\",\r\n            processor,\r\n            configuration,\r\n            TaskOptions.None);\r\n\r\n            // Specify the input asset to be encoded.\r\n            task.InputAssets.Add(asset);\r\n            // Add an output asset to contain the results of the job. \r\n            // This output is specified as AssetCreationOptions.None, which \r\n            // means the output asset is not encrypted. \r\n            task.OutputAssets.AddNew(\"Output asset\",\r\n            AssetCreationOptions.None);\r\n\r\n            job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\r\n            job.Submit();\r\n            job.GetExecutionProgressTask(CancellationToken.None).Wait();\r\n\r\n            return job.OutputMediaAssets[0];\r\n        }\r\n\r\n        private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\r\n        {\r\n            Console.WriteLine(\"Job state changed event:\");\r\n            Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r\n            Console.WriteLine(\"  Current state: \" + e.CurrentState);\r\n            switch (e.CurrentState)\r\n            {\r\n            case JobState.Finished:\r\n                Console.WriteLine();\r\n                Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\r\n                break;\r\n            case JobState.Canceling:\r\n            case JobState.Queued:\r\n            case JobState.Scheduled:\r\n            case JobState.Processing:\r\n                Console.WriteLine(\"Please wait...\\n\");\r\n                break;\r\n            case JobState.Canceled:\r\n            case JobState.Error:\r\n\r\n                // Cast sender as a job.\r\n                IJob job = (IJob)sender;\r\n\r\n                // Display or log error details as needed.\r\n                break;\r\n            default:\r\n                break;\r\n            }\r\n        }\r\n\r\n        private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r\n        {\r\n            var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\r\n            ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\r\n\r\n            if (processor == null)\r\n            throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\r\n\r\n            return processor;\r\n        }\r\n\r\n        }\r\n    }\r\n\r\n## <a name=\"see-also\"></a>另请参阅\r\n[媒体服务编码概述](media-services-encode-asset.md)\r\n\r\n<!--Update_Description: update code to use AAD token instead of ACS-->"}