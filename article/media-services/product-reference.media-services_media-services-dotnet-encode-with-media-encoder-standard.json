{"Title":"使用 .NET 通过 Media Encoder Standard 对资产进行编码","Description":"本主题介绍如何使用 .NET 通过 Media Encoder Standard 对资产进行编码。","Content":"# <a name=\"encode-an-asset-with-media-encoder-standard-using-net\"></a>使用 .NET 通过 Media Encoder Standard 对资产进行编码\r\n编码作业是媒体服务中最常见的处理操作之一。 可通过创建编码作业将媒体文件从一种编码转换为另一种编码。 进行编码时，可以使用媒体服务内置的 Media Encoder。 也可以使用媒体服务合作伙伴提供的编码器；可通过 Azure 应用商店获取第三方编码器。 \r\n\r\n本主题介绍如何使用 .NET 通过媒体编码器标准 (MES) 对资产进行编码。 Media Encoder Standard 使用[此处](media-services-mes-presets-overview.md)所述的编码器预设之一进行配置。\r\n\r\n建议始终将源文件编码为自适应比特率 MP4 集，然后使用[动态打包](media-services-dynamic-packaging-overview.md)将该集转换为所需的格式。 \r\n\r\n如果输出资产已经过存储加密，则必须配置资产传送策略。 有关详细信息，请参阅[配置资产传送策略](media-services-dotnet-configure-asset-delivery-policy.md)。\r\n\r\n> [!NOTE]\r\n> MES 会生成一个输出文件，其名称包含输入文件名的前 32 个字符。 该名称基于预设文件中指定的内容。 例如，\"FileName\": \"{Basename}_{Index}{Extension}\"。 {Basename} 替换为输入文件名的前 32 个字符。\r\n> \r\n> \r\n\r\n### <a name=\"mes-formats\"></a>MES 格式\r\n[格式和编解码器](media-services-media-encoder-standard-formats.md)\r\n\r\n### <a name=\"mes-presets\"></a>MES 预设\r\nMedia Encoder Standard 使用[此处](media-services-mes-presets-overview.md)所述的编码器预设之一进行配置。\r\n\r\n### <a name=\"input-and-output-metadata\"></a>输入和输出元数据\r\n如果使用 MES 为输入资产（或资产）编码，在该编码任务成功完成时，便能获取输出资产。 输出资产包含视频、音频、缩略图、清单等等，具体视你使用的编码预设而定。\r\n\r\n输出资产还包含提供输入资产相关元数据的文件。 元数据 XML 文件的名称采用下列格式：<asset_id>_metadata.xml（例如，41114ad3-eb5e-4c57-8d92-5354e2b7d4a4_metadata.xml），其中 <asset_id> 是输入资产的 AssetId 值。 [此处](media-services-input-metadata-schema.md)描述了此输入元数据 XML 的架构。\r\n\r\n输出资产还包含提供输出资产相关元数据的文件。 元数据 XML 文件的名称采用下列格式：<source_file_name>_manifest.xml（例如，BigBuckBunny_manifest.xml）。 [此处](media-services-output-metadata-schema.md)描述了此输出元数据 XML 的架构。\r\n\r\n如果想要检查这两个元数据文件中的任意一个，可以创建 SAS 定位器并将文件下载到本地计算机。 可以就如何创建 SAS 定位器并下载使用媒体服务 .NET SDK 扩展的文件找到相关示例。\r\n\r\n## <a name=\"download-sample\"></a>下载示例\r\n可从[此处](https://azure.microsoft.com/documentation/samples/media-services-dotnet-on-demand-encoding-with-media-encoder-standard/)获取并运行说明如何使用 MES 进行编码的示例。\r\n\r\n## <a name=\"net-sample-code\"></a>.NET 示例代码\r\n\r\n以下代码示例使用媒体服务 .NET SDK 执行下列任务：\r\n\r\n* 创建编码作业。\r\n* 获取对 Media Encoder Standard 编码器的引用。\r\n* 指定使用[自适应流式处理](media-services-autogen-bitrate-ladder-with-mes.md)预设。 \r\n* 将一个编码任务添加到该作业。 \r\n* 指定要编码的输入资产。\r\n* 创建要包含所编码资产的输出资产。\r\n* 添加事件处理程序以检查作业进度。\r\n* 提交作业。\r\n\r\n#### <a name=\"create-and-configure-a-visual-studio-project\"></a>创建和配置 Visual Studio 项目\r\n\r\n设置开发环境，并在 app.config 文件中填充连接信息，如[使用 .NET 进行媒体服务开发](media-services-dotnet-how-to-use.md)中所述。 \r\n\r\n#### <a name=\"example\"></a>示例 \r\n```C#\r\nusing System;\r\nusing System.Linq;\r\nusing System.Configuration;\r\nusing System.IO;\r\nusing System.Threading;\r\nusing Microsoft.WindowsAzure.MediaServices.Client;\r\n\r\nnamespace MediaEncoderStandardSample\r\n{\r\n    class Program\r\n    {\r\n        private static readonly string _AADTenantDomain =\r\n            ConfigurationManager.AppSettings[\"AADTenantDomain\"];\r\n        private static readonly string _RESTAPIEndpoint =\r\n            ConfigurationManager.AppSettings[\"MediaServiceRESTAPIEndpoint\"];\r\n\r\n        // Field for service context.\r\n        private static CloudMediaContext _context = null;\r\n\r\n        private static readonly string _supportFiles =\r\n            Path.GetFullPath(@\"../..\\Media\");\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var tokenCredentials = new AzureAdTokenCredentials(_AADTenantDomain, AzureEnvironments.AzureChinaCloudEnvironment);\r\n            var tokenProvider = new AzureAdTokenProvider(tokenCredentials);\r\n\r\n            _context = new CloudMediaContext(new Uri(_RESTAPIEndpoint), tokenProvider);\r\n\r\n            // Get an uploaded asset.\r\n            var asset = _context.Assets.FirstOrDefault();\r\n\r\n            // Encode and generate the output using the \"Adaptive Streaming\" preset.\r\n            EncodeToAdaptiveBitrateMP4Set(asset);\r\n\r\n            Console.ReadLine();\r\n        }\r\n\r\n        static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\r\n        {\r\n            // Declare a new job.\r\n            IJob job = _context.Jobs.Create(\"Media Encoder Standard Job\");\r\n            // Get a media processor reference, and pass to it the name of the \r\n            // processor to use for the specific task.\r\n            IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\r\n\r\n            // Create a task with the encoding details, using a string preset.\r\n            // In this case \"Adaptive Streaming\" preset is used.\r\n            ITask task = job.Tasks.AddNew(\"My encoding task\",\r\n                processor,\r\n                \"Adaptive Streaming\",\r\n                TaskOptions.None);\r\n\r\n            // Specify the input asset to be encoded.\r\n            task.InputAssets.Add(asset);\r\n            // Add an output asset to contain the results of the job. \r\n            // This output is specified as AssetCreationOptions.None, which \r\n            // means the output asset is not encrypted. \r\n            task.OutputAssets.AddNew(\"Output asset\",\r\n                AssetCreationOptions.None);\r\n\r\n            job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\r\n            job.Submit();\r\n            job.GetExecutionProgressTask(CancellationToken.None).Wait();\r\n\r\n            return job.OutputMediaAssets[0];\r\n        }\r\n\r\n        private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\r\n        {\r\n            Console.WriteLine(\"Job state changed event:\");\r\n            Console.WriteLine(\"  Previous state: \" + e.PreviousState);\r\n            Console.WriteLine(\"  Current state: \" + e.CurrentState);\r\n            switch (e.CurrentState)\r\n            {\r\n                case JobState.Finished:\r\n                    Console.WriteLine();\r\n                    Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\r\n                    break;\r\n                case JobState.Canceling:\r\n                case JobState.Queued:\r\n                case JobState.Scheduled:\r\n                case JobState.Processing:\r\n                    Console.WriteLine(\"Please wait...\\n\");\r\n                    break;\r\n                case JobState.Canceled:\r\n                case JobState.Error:\r\n\r\n                    // Cast sender as a job.\r\n                    IJob job = (IJob)sender;\r\n\r\n                    // Display or log error details as needed.\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r\n        {\r\n            var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\r\n            ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\r\n\r\n            if (processor == null)\r\n                throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\r\n\r\n            return processor;\r\n        }\r\n    }\r\n}\r\n```\r\n## <a name=\"next-steps\"></a>后续步骤\r\n[如何使用 Media Encoder Standard 通过 .NET 来生成缩略图](media-services-dotnet-generate-thumbnail-with-mes.md)\r\n[媒体服务编码概述](media-services-encode-asset.md)\r\n<!--Update_Description: update code to use AAD token instead of ACS-->\r\n"}