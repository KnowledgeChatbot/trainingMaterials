{"Title":"开始使用 Java 传送点播内容","Description":"本教程引导用户完成相关步骤，利用 Java 和 Azure 媒体服务 (AMS) 应用程序实现基本的点播视频 (VoD) 内容传送服务。","Content":"# <a name=\"get-started-with-the-java-client-sdk-for-azure-media-services\"></a>用于 Azure 媒体服务的 Java 客户端 SDK 入门\r\n[!INCLUDE [media-services-selector-get-started](../../includes/media-services-selector-get-started.md)]\r\n\r\n本教程介绍了通过 Java 客户端 SDK 在 Azure 媒体服务中实施基本的视频内容传送服务的步骤。\r\n\r\n## <a name=\"prerequisites\"></a>先决条件\r\n\r\n以下是完成本教程所要做好的准备：\r\n\r\n* 一个 Azure 帐户。 有关详细信息，请参阅 [Azure 试用](https://www.azure.cn/pricing/1rmb-trial/)。 \r\n* 一个媒体服务帐户。 若要创建媒体服务帐户，请参阅[如何创建媒体服务帐户](media-services-portal-create-account.md)。\r\n* 当前的 [Azure 媒体服务 Java SDK](https://mvnrepository.com/artifact/com.microsoft.azure/azure-media/latest)\r\n\r\n## <a name=\"how-to-import-the-azure-media-services-java-client-sdk-package\"></a>如何：导入 Azure 媒体服务 Java 客户端 SDK 包\r\n\r\n若要开始使用用于 Java 的媒体服务 SDK，请添加 [Azure 媒体服务 Java SDK](https://mvnrepository.com/artifact/com.microsoft.azure/azure-media/latest) 提供的 `azure-media` 包的当前版本 (0.9.8) 的引用。\r\n\r\n例如，如果生成工具为 `gradle`，请向 `build.gradle` 文件添加以下依赖项：\r\n\r\n    compile group: 'com.microsoft.azure', name: 'azure-media', version: '0.9.8'\r\n\r\n>[!IMPORTANT]\r\n>自 `azure-media` 包的版本 `0.9.8` 开始，SDK 添加了对 Auzre Active Directory (AAD) 身份验证的支持，删除了对 Azure 访问控制服务 (ACS) 身份验证的支持。 ACS 服务将在 2018 年 6 月 1 日弃用。 建议尽快迁移到 Azure AD 身份验证模型。 有关迁移的详细信息，请阅读[通过 Azure AD 身份验证访问 Azure 媒体服务 API](media-services-use-aad-auth-to-access-ams-api.md) 一文。\r\n\r\n>[!NOTE]\r\n>可以在 [GitHub 存储库](https://github.com/Azure/azure-sdk-for-java/tree/0.9/services/azure-media)中找到 Azure 媒体服务的源代码。 请确保切换到 0.9 分支而非主分支。 \r\n\r\n## <a name=\"how-to-use-azure-media-services-with-java\"></a>如何：将 Azure 媒体服务与 Java 配合使用\r\n\r\n>[!NOTE]\r\n>创建媒体服务帐户后，会将一个处于“已停止”状态的**默认**流式处理终结点添加到帐户。  若要开始对内容进行流式处理并利用动态打包和动态加密功能，必须确保要从其流式获取内容的流式处理终结点处于“正在运行”状态。\r\n\r\n以下代码演示了如何创建资产、如何将媒体文件上传到该资产、如何使用任务运行作业以转换资产，以及如何创建定位符来流式传输视频。\r\n\r\n在使用此代码之前，设置一个媒体服务帐户。 有关设置帐户的信息，请参阅[如何创建媒体服务帐户](media-services-portal-create-account.md)。\r\n\r\n此代码使用 Azure AD 服务主体身份验证连接到 Azure 媒体服务 API。 创建一个 Azure AD 应用程序，在代码中为以下变量指定值：\r\n* `tenant`：Azure AD 应用程序所在的 Azure AD 租户域\r\n* `clientId`：Azure AD 应用程序的客户端 ID\r\n* `clientKey`：Azure AD 应用程序的客户端密钥\r\n* `restApiEndpoint`：Azure 媒体服务帐户的 REST API 终结点\r\n\r\n可以创建一个 Azure AD 应用程序，然后从 Azure 门户获取前面的配置值。 有关详细信息，请参阅[使用 Azure 门户进行 Azure AD 身份验证入门](https://docs.microsoft.com/azure/media-services/media-services-portal-get-started-with-aad)的“服务主体身份验证”部分。\r\n\r\n该代码还依赖于本地存储的视频文件。 必须编辑代码，提供自己的要上传的本地文件。\r\n\r\n    import java.io.*;\r\n    import java.net.URI;\r\n    import java.security.NoSuchAlgorithmException;\r\n    import java.util.EnumSet;\r\n    import java.util.concurrent.ExecutorService;\r\n    import java.util.concurrent.Executors;\r\n\r\n    import com.microsoft.windowsazure.Configuration;\r\n    import com.microsoft.windowsazure.exception.ServiceException;\r\n    import com.microsoft.windowsazure.services.media.MediaConfiguration;\r\n    import com.microsoft.windowsazure.services.media.MediaContract;\r\n    import com.microsoft.windowsazure.services.media.MediaService;\r\n    import com.microsoft.windowsazure.services.media.WritableBlobContainerContract;\r\n    import com.microsoft.windowsazure.services.media.authentication.AzureAdClientSymmetricKey;\r\n    import com.microsoft.windowsazure.services.media.authentication.AzureAdTokenCredentials;\r\n    import com.microsoft.windowsazure.services.media.authentication.AzureAdTokenProvider;\r\n    import com.microsoft.windowsazure.services.media.authentication.AzureEnvironments;\r\n    import com.microsoft.windowsazure.services.media.models.AccessPolicy;\r\n    import com.microsoft.windowsazure.services.media.models.AccessPolicyInfo;\r\n    import com.microsoft.windowsazure.services.media.models.AccessPolicyPermission;\r\n    import com.microsoft.windowsazure.services.media.models.Asset;\r\n    import com.microsoft.windowsazure.services.media.models.AssetFile;\r\n    import com.microsoft.windowsazure.services.media.models.AssetFileInfo;\r\n    import com.microsoft.windowsazure.services.media.models.AssetInfo;\r\n    import com.microsoft.windowsazure.services.media.models.Job;\r\n    import com.microsoft.windowsazure.services.media.models.JobInfo;\r\n    import com.microsoft.windowsazure.services.media.models.JobState;\r\n    import com.microsoft.windowsazure.services.media.models.ListResult;\r\n    import com.microsoft.windowsazure.services.media.models.Locator;\r\n    import com.microsoft.windowsazure.services.media.models.LocatorInfo;\r\n    import com.microsoft.windowsazure.services.media.models.LocatorType;\r\n    import com.microsoft.windowsazure.services.media.models.MediaProcessor;\r\n    import com.microsoft.windowsazure.services.media.models.MediaProcessorInfo;\r\n    import com.microsoft.windowsazure.services.media.models.Task;\r\n\r\n    public class Program\r\n    {\r\n        // Media Services account credentials configuration\r\n        private static String tenant = \"tenant.partner.onmschina.cn\";\r\n        private static String clientId = \"<client id>\";\r\n        private static String clientKey = \"<client key>\";\r\n        private static String restApiEndpoint = \"https://account_name.restv2.region_name.media.chinacloudapi.cn/api/\";\r\n\r\n        // Media Services API\r\n        private static MediaContract mediaService;\r\n\r\n        // Encoder configuration\r\n        // This is using the default Adaptive Streaming encoding preset. \r\n        // You can choose to use a custom preset, or any other sample defined preset. \r\n        // In addition you can use other processors, like Speech Analyzer, or Redactor if desired.\r\n        private static String preferedEncoder = \"Media Encoder Standard\";\r\n        private static String encodingPreset = \"Adaptive Streaming\";\r\n\r\n        public static void main(String[] args)\r\n        {\r\n            ExecutorService executorService = Executors.newFixedThreadPool(1);\r\n\r\n            try {\r\n                // Setup Azure AD Service Principal Symmetric Key Credentials\r\n                AzureAdTokenCredentials credentials = new AzureAdTokenCredentials(\r\n                        tenant,\r\n                        new AzureAdClientSymmetricKey(clientId, clientKey),\r\n                        AzureEnvironments.AzureChinaCloudEnvironment);\r\n\r\n                AzureAdTokenProvider provider = new AzureAdTokenProvider(credentials, executorService);\r\n\r\n                // Create a new configuration with the credentials\r\n                Configuration configuration = MediaConfiguration.configureWithAzureAdTokenProvider(\r\n                        new URI(restApiEndpoint),\r\n                        provider);\r\n\r\n                // Create the media service provisioned with the new configuration\r\n                mediaService = MediaService.create(configuration);\r\n\r\n                // Upload a local file to an Asset\r\n                AssetInfo uploadAsset = uploadFileAndCreateAsset(\"Video Name\", \"C:/path/to/video.mp4\");\r\n                System.out.println(\"Uploaded Asset Id: \" + uploadAsset.getId());\r\n\r\n                // Transform the Asset\r\n                AssetInfo encodedAsset = encode(uploadAsset);\r\n                System.out.println(\"Encoded Asset Id: \" + encodedAsset.getId());\r\n\r\n                // Create the Streaming Origin Locator\r\n                String url = getStreamingOriginLocator(encodedAsset);\r\n\r\n                System.out.println(\"Origin Locator URL: \" + url);\r\n                System.out.println(\"Sample completed!\");\r\n\r\n            } catch (ServiceException se) {\r\n                System.out.println(\"ServiceException encountered.\");\r\n                System.out.println(se.toString());\r\n            } catch (Exception e) {\r\n                System.out.println(\"Exception encountered.\");\r\n                System.out.println(e.toString());\r\n            } finally {\r\n                executorService.shutdown();\r\n            }\r\n        }\r\n\r\n        private static AssetInfo uploadFileAndCreateAsset(String assetName, String fileName)\r\n            throws ServiceException, FileNotFoundException, NoSuchAlgorithmException {\r\n\r\n            WritableBlobContainerContract uploader;\r\n            AssetInfo resultAsset;\r\n            AccessPolicyInfo uploadAccessPolicy;\r\n            LocatorInfo uploadLocator = null;\r\n\r\n            // Create an Asset\r\n            resultAsset = mediaService.create(Asset.create().setName(assetName).setAlternateId(\"altId\"));\r\n            System.out.println(\"Created Asset \" + fileName);\r\n\r\n            // Create an AccessPolicy that provides Write access for 15 minutes\r\n            uploadAccessPolicy = mediaService\r\n                .create(AccessPolicy.create(\"uploadAccessPolicy\", 15.0, EnumSet.of(AccessPolicyPermission.WRITE)));\r\n\r\n            // Create a Locator using the AccessPolicy and Asset\r\n            uploadLocator = mediaService\r\n                .create(Locator.create(uploadAccessPolicy.getId(), resultAsset.getId(), LocatorType.SAS));\r\n\r\n            // Create the Blob Writer using the Locator\r\n            uploader = mediaService.createBlobWriter(uploadLocator);\r\n\r\n            File file = new File(fileName);\r\n\r\n            // The local file that will be uploaded to your Media Services account\r\n            InputStream input = new FileInputStream(file);\r\n\r\n            System.out.println(\"Uploading \" + fileName);\r\n\r\n            // Upload the local file to the media asset\r\n            uploader.createBlockBlob(file.getName(), input);\r\n\r\n            // Inform Media Services about the uploaded files\r\n            mediaService.action(AssetFile.createFileInfos(resultAsset.getId()));\r\n            System.out.println(\"Uploaded Asset File \" + fileName);\r\n\r\n            mediaService.delete(Locator.delete(uploadLocator.getId()));\r\n            mediaService.delete(AccessPolicy.delete(uploadAccessPolicy.getId()));\r\n\r\n            return resultAsset;\r\n        }\r\n\r\n        // Create a Job that contains a Task to transform the Asset\r\n        private static AssetInfo encode(AssetInfo assetToEncode)\r\n            throws ServiceException, InterruptedException {\r\n\r\n            // Retrieve the list of Media Processors that match the name\r\n            ListResult<MediaProcessorInfo> mediaProcessors = mediaService\r\n                            .list(MediaProcessor.list().set(\"$filter\", String.format(\"Name eq '%s'\", preferedEncoder)));\r\n\r\n            // Use the latest version of the Media Processor\r\n            MediaProcessorInfo mediaProcessor = null;\r\n            for (MediaProcessorInfo info : mediaProcessors) {\r\n                if (null == mediaProcessor || info.getVersion().compareTo(mediaProcessor.getVersion()) > 0) {\r\n                    mediaProcessor = info;\r\n                }\r\n            }\r\n\r\n            System.out.println(\"Using Media Processor: \" + mediaProcessor.getName() + \" \" + mediaProcessor.getVersion());\r\n\r\n            // Create a task with the specified Media Processor\r\n            String outputAssetName = String.format(\"%s as %s\", assetToEncode.getName(), encodingPreset);\r\n            String taskXml = \"<taskBody><inputAsset>JobInputAsset(0)</inputAsset>\"\r\n                    + \"<outputAsset assetCreationOptions=\\\"0\\\"\" // AssetCreationOptions.None\r\n                    + \" assetName=\\\"\" + outputAssetName + \"\\\">JobOutputAsset(0)</outputAsset></taskBody>\";\r\n\r\n            Task.CreateBatchOperation task = Task.create(mediaProcessor.getId(), taskXml)\r\n                    .setConfiguration(encodingPreset).setName(\"Encoding\");\r\n\r\n            // Create the Job; this automatically schedules and runs it.\r\n            Job.Creator jobCreator = Job.create()\r\n                    .setName(String.format(\"Encoding %s to %s\", assetToEncode.getName(), encodingPreset))\r\n                    .addInputMediaAsset(assetToEncode.getId()).setPriority(2).addTaskCreator(task);\r\n            JobInfo job = mediaService.create(jobCreator);\r\n\r\n            String jobId = job.getId();\r\n            System.out.println(\"Created Job with Id: \" + jobId);\r\n\r\n            // Check to see if the Job has completed\r\n            checkJobStatus(jobId);\r\n            // Done with the Job\r\n\r\n            // Retrieve the output Asset\r\n            ListResult<AssetInfo> outputAssets = mediaService.list(Asset.list(job.getOutputAssetsLink()));\r\n            return outputAssets.get(0);\r\n        }\r\n\r\n\r\n        public static String getStreamingOriginLocator(AssetInfo asset) throws ServiceException {\r\n            // Get the .ISM AssetFile\r\n            ListResult<AssetFileInfo> assetFiles = mediaService.list(AssetFile.list(asset.getAssetFilesLink()));\r\n            AssetFileInfo streamingAssetFile = null;\r\n            for (AssetFileInfo file : assetFiles) {\r\n                if (file.getName().toLowerCase().endsWith(\".ism\")) {\r\n                    streamingAssetFile = file;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            AccessPolicyInfo originAccessPolicy;\r\n            LocatorInfo originLocator = null;\r\n\r\n            // Create a 30-day read only AccessPolicy\r\n            double durationInMinutes = 60 * 24 * 30;\r\n            originAccessPolicy = mediaService.create(\r\n                    AccessPolicy.create(\"Streaming policy\", durationInMinutes, EnumSet.of(AccessPolicyPermission.READ)));\r\n\r\n            // Create a Locator using the AccessPolicy and Asset\r\n            originLocator = mediaService\r\n                    .create(Locator.create(originAccessPolicy.getId(), asset.getId(), LocatorType.OnDemandOrigin));\r\n\r\n            // Create a Smooth Streaming base URL\r\n            return originLocator.getPath() + streamingAssetFile.getName() + \"/manifest\";\r\n        }\r\n\r\n        private static void checkJobStatus(String jobId) throws InterruptedException, ServiceException {\r\n            boolean done = false;\r\n            JobState jobState = null;\r\n            while (!done) {\r\n                // Sleep for 5 seconds\r\n                Thread.sleep(5000);\r\n\r\n                // Query the updated Job state\r\n                jobState = mediaService.get(Job.get(jobId)).getState();\r\n                System.out.println(\"Job state: \" + jobState);\r\n\r\n                if (jobState == JobState.Finished || jobState == JobState.Canceled || jobState == JobState.Error) {\r\n                    done = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n## <a name=\"additional-resources\"></a>其他资源\r\n有关如何在 Azure 中开发 Java 应用的详细信息，请参阅 [Java 开发中心][Azure Java Developer Center]和[面向 Java 开发人员的 Azure][Azure for Java developers]。\r\n\r\n\r\n有关媒体服务 Javadoc 文档，请参阅[适用于 Java 的 Azure 库文档][适用于 Java 的 Azure 库文档]。\r\n<!--Update_Description:update two links;add one note about AMS policy limitations-->\r\n<!-- URLs. -->\r\n\r\n  [Azure Media Services SDK Maven Package]: https://mvnrepository.com/artifact/com.microsoft.azure/azure-media/latest\r\n  [Azure Java Developer Center]: /develop/java/\r\n  [Azure for Java developers]: https://docs.microsoft.com/java/azure/\r\n  [Media Services Client Development]: ./media-services-develop-video-players.md"}