{"Title":"Azure Resource Manager 模板的结构和语法","Description":"使用声明性 JSON 语法描述 Azure Resource Manager 模板的结构和属性。","Content":"# <a name=\"understand-the-structure-and-syntax-of-azure-resource-manager-templates\"></a>了解 Azure Resource Manager 模板的结构和语法\r\n本文介绍 Azure 资源管理器模板的结构。 演示了模板的不同部分，以及可在相应部分使用的属性。 模板中包含可用于为部署构造值的 JSON 和表达式。 有关创建模板的分步教程，请参阅[创建第一个 Azure Resource Manager 模板](resource-manager-create-first-template.md)。\r\n\r\n## <a name=\"template-format\"></a>模板格式\r\n使用最简单的结构时，模板包含以下元素：\r\n\r\n```json\r\n{\r\n    \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"\",\r\n    \"parameters\": {  },\r\n    \"variables\": {  },\r\n    \"resources\": [  ],\r\n    \"outputs\": {  }\r\n}\r\n```\r\n<!-- the schema link is correct to download the http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json# -->\r\n\r\n| 元素名称 | 必选 | 说明 |\r\n|:--- |:--- |:--- |\r\n| $schema |是 |描述模板语言版本的 JSON 架构文件所在的位置。 使用前面的示例中显示的 URL。 |\r\n| contentVersion |是 |模板的版本（例如 1.0.0.0）。 可为此元素提供任意值。 使用模板部署资源时，此值可用于确保使用正确的模板。 |\r\n| 参数 |否 |执行部署以自定义资源部署时提供的值。 |\r\n| variables |否 |在模板中用作 JSON 片段以简化模板语言表达式的值。 |\r\n| 资源 |是 |已在资源组中部署或更新的资源类型。 |\r\n| outputs |否 |部署后返回的值。 |\r\n\r\n每个元素均包含可设置的属性。 下例包含一个模板的完整语法：\r\n\r\n```json\r\n{\r\n    \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"\",\r\n    \"parameters\": {  \r\n        \"<parameter-name>\" : {\r\n            \"type\" : \"<type-of-parameter-value>\",\r\n            \"defaultValue\": \"<default-value-of-parameter>\",\r\n            \"allowedValues\": [ \"<array-of-allowed-values>\" ],\r\n            \"minValue\": <minimum-value-for-int>,\r\n            \"maxValue\": <maximum-value-for-int>,\r\n            \"minLength\": <minimum-length-for-string-or-array>,\r\n            \"maxLength\": <maximum-length-for-string-or-array-parameters>,\r\n            \"metadata\": {\r\n                \"description\": \"<description-of-the parameter>\" \r\n            }\r\n        }\r\n    },\r\n    \"variables\": {\r\n        \"<variable-name>\": \"<variable-value>\",\r\n        \"<variable-object-name>\": {\r\n            <variable-complex-type-value>\r\n        },\r\n        \"<variable-object-name>\": {\r\n            \"copy\": [\r\n                {\r\n                    \"name\": \"<name-of-array-property>\",\r\n                    \"count\": <number-of-iterations>,\r\n                    \"input\": {\r\n                        <properties-to-repeat>\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n        \"copy\": [\r\n            {\r\n                \"name\": \"<variable-array-name>\",\r\n                \"count\": <number-of-iterations>,\r\n                \"input\": {\r\n                    <properties-to-repeat>\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"resources\": [\r\n      {\r\n          \"condition\": \"<boolean-value-whether-to-deploy>\",\r\n          \"apiVersion\": \"<api-version-of-resource>\",\r\n          \"type\": \"<resource-provider-namespace/resource-type-name>\",\r\n          \"name\": \"<name-of-the-resource>\",\r\n          \"location\": \"<location-of-resource>\",\r\n          \"tags\": {\r\n              \"<tag-name1>\": \"<tag-value1>\",\r\n              \"<tag-name2>\": \"<tag-value2>\"\r\n          },\r\n          \"comments\": \"<your-reference-notes>\",\r\n          \"copy\": {\r\n              \"name\": \"<name-of-copy-loop>\",\r\n              \"count\": \"<number-of-iterations>\",\r\n              \"mode\": \"<serial-or-parallel>\",\r\n              \"batchSize\": \"<number-to-deploy-serially>\"\r\n          },\r\n          \"dependsOn\": [\r\n              \"<array-of-related-resource-names>\"\r\n          ],\r\n          \"properties\": {\r\n              \"<settings-for-the-resource>\",\r\n              \"copy\": [\r\n                  {\r\n                      \"name\": ,\r\n                      \"count\": ,\r\n                      \"input\": {}\r\n                  }\r\n              ]\r\n          },\r\n          \"resources\": [\r\n              \"<array-of-child-resources>\"\r\n          ]\r\n      }\r\n    ],\r\n    \"outputs\": {\r\n        \"<outputName>\" : {\r\n            \"type\" : \"<type-of-output-value>\",\r\n            \"value\": \"<output-value-expression>\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n本文稍后将更详细地介绍模板的各个节。\r\n\r\n## <a name=\"expressions-and-functions\"></a>表达式和函数\r\n模板的基本语法为 JSON。 但是，表达式和函数扩展了模板中可用的 JSON 值。  表达式在 JSON 字符串文本中编写，其中第一个和最后一个字符分别是 `[` 和 `]` 括号。 部署模板时会计算表达式的值。 尽管编写为字符串文本，但表达式的计算结果可以是不同的 JSON 类型，例如数组或整数，具体取决于实际的表达式。  要使用一个括号 `[` 在开头括住文本字符串但不将其解释为表达式，请额外添加一个括号，使字符串以 `[[` 开头。\r\n\r\n通常，会将表达式与函数一起使用，以执行用于配置部署的操作。 如同在 JavaScript 中一样，函数调用的格式为 `functionName(arg1,arg2,arg3)`。 使用点和 [index] 运算符引用属性。\r\n\r\n以下示例演示如何在构造值时使用一些函数：\r\n\r\n```json\r\n\"variables\": {\r\n    \"location\": \"[resourceGroup().location]\",\r\n    \"usernameAndPassword\": \"[concat(parameters('username'), ':', parameters('password'))]\",\r\n    \"authorizationHeader\": \"[concat('Basic ', base64(variables('usernameAndPassword')))]\"\r\n}\r\n```\r\n\r\n有关模板函数的完整列表，请参阅 [Azure Resource Manager 模板函数](resource-group-template-functions.md)。 \r\n\r\n## <a name=\"parameters\"></a>参数\r\n在模板的 parameters 节中，可以指定在部署资源时能够输入的值。 提供针对特定环境（例如开发、测试和生产环境）定制的参数值可以自定义部署。 无需在模板中提供参数，但如果没有参数，模板始终部署具有相同名称、位置和属性的相同资源。\r\n\r\n使用以下结构定义参数：\r\n\r\n```json\r\n\"parameters\": {\r\n    \"<parameter-name>\" : {\r\n        \"type\" : \"<type-of-parameter-value>\",\r\n        \"defaultValue\": \"<default-value-of-parameter>\",\r\n        \"allowedValues\": [ \"<array-of-allowed-values>\" ],\r\n        \"minValue\": <minimum-value-for-int>,\r\n        \"maxValue\": <maximum-value-for-int>,\r\n        \"minLength\": <minimum-length-for-string-or-array>,\r\n        \"maxLength\": <maximum-length-for-string-or-array-parameters>,\r\n        \"metadata\": {\r\n            \"description\": \"<description-of-the parameter>\" \r\n        }\r\n    }\r\n}\r\n```\r\n\r\n| 元素名称 | 必选 | 说明 |\r\n|:--- |:--- |:--- |\r\n| parameterName |是 |参数的名称。 必须是有效的 JavaScript 标识符。 |\r\n| type |是 |参数值的类型。 请参阅允许类型的列表（此表后面）。 |\r\n| defaultValue |否 |参数的默认值，如果没有为参数提供任何值。 |\r\n| allowedValues |否 |用来确保提供正确值的参数的允许值数组。 |\r\n| minValue |否 |int 类型参数的最小值，此值是包容性的。 |\r\n| maxValue |否 |int 类型参数的最大值，此值是包容性的。 |\r\n| minLength |否 |字符串、secureString 和数组类型参数的最小长度（含）。 |\r\n| maxLength |否 |字符串、secureString 和数组类型参数的最大长度（含）。 |\r\n| 说明 |否 |通过门户向用户显示的参数的说明。 |\r\n\r\n允许的类型和值是：\r\n\r\n* **字符串**\r\n* **secureString**\r\n* **int**\r\n* **bool**\r\n* **对象** \r\n* **secureObject**\r\n* **array**\r\n\r\n要将某个参数指定为可选，请提供 defaultValue（可以为空字符串）。 \r\n\r\n如果在模板中指定的参数名称与部署模板时所用命令中的参数匹配，则可能会对提供的值造成混淆。 Resource Manager 解决此混淆问题的方式是将后缀 **FromTemplate** 添加到模板参数。 例如，如果在模板中包括名为 **ResourceGroupName** 的参数，则该参数会与 [New-AzureRmResourceGroupDeployment](https://docs.microsoft.com/powershell/module/azurerm.resources/new-azurermresourcegroupdeployment) cmdlet 中的 **ResourceGroupName** 参数冲突。 在部署期间，系统会提示用户提供 **ResourceGroupNameFromTemplate** 的值。 通常，为避免此类混乱，不应按部署操作所用的参数名称命令参数。\r\n\r\n> [!NOTE]\r\n> 所有密码、密钥和其他机密信息应使用 **secureString** 类型。 要将敏感数据传入 JSON 对象，请使用 **secureObject** 类型。 部署资源后，无法读取 secureString 或 secureObject 类型的模板参数。 \r\n> \r\n> 例如，部署历史记录中的以下条目会显示字符串和对象的值，但不会显示 secureString 和 secureObject 的值。\r\n>\r\n> ![显示部署值](./media/resource-group-authoring-templates/show-parameters.png)  \r\n>\r\n\r\n以下示例演示如何定义参数：\r\n\r\n```json\r\n\"parameters\": {\r\n    \"siteName\": {\r\n        \"type\": \"string\",\r\n        \"defaultValue\": \"[concat('site', uniqueString(resourceGroup().id))]\"\r\n    },\r\n    \"hostingPlanName\": {\r\n        \"type\": \"string\",\r\n        \"defaultValue\": \"[concat(parameters('siteName'),'-plan')]\"\r\n    },\r\n    \"skuName\": {\r\n        \"type\": \"string\",\r\n        \"defaultValue\": \"F1\",\r\n        \"allowedValues\": [\r\n          \"F1\",\r\n          \"D1\",\r\n          \"B1\",\r\n          \"B2\",\r\n          \"B3\",\r\n          \"S1\",\r\n          \"S2\",\r\n          \"S3\",\r\n          \"P1\",\r\n          \"P2\",\r\n          \"P3\",\r\n          \"P4\"\r\n        ]\r\n    },\r\n    \"skuCapacity\": {\r\n        \"type\": \"int\",\r\n        \"defaultValue\": 1,\r\n        \"minValue\": 1\r\n    }\r\n}\r\n```\r\n\r\n若要了解如何在部署过程中输入参数值，请参阅 [Deploy an application with Azure Resource Manager template](resource-group-template-deploy.md)（使用 Azure Resource Manager 模板部署应用程序）。 \r\n\r\n## <a name=\"variables\"></a>变量\r\n在 variables 节中构造可在整个模板中使用的值。 不需要定义变量，但使用变量可以减少复杂的表达式，从而简化模板。\r\n\r\n使用以下结构定义变量：\r\n\r\n```json\r\n\"variables\": {\r\n    \"<variable-name>\": \"<variable-value>\",\r\n    \"<variable-name>\": { \r\n        <variable-complex-type-value> \r\n    }\r\n}\r\n```\r\n\r\n以下示例演示如何定义从两个参数值构造出的变量：\r\n\r\n```json\r\n\"variables\": {\r\n    \"connectionString\": \"[concat('Name=', parameters('username'), ';Password=', parameters('password'))]\"\r\n}\r\n```\r\n\r\n下一个示例演示一个属于复杂的 JSON 类型的变量，以及从其他变量构造出的变量：\r\n\r\n```json\r\n\"parameters\": {\r\n    \"environmentName\": {\r\n        \"type\": \"string\",\r\n        \"allowedValues\": [\r\n          \"test\",\r\n          \"prod\"\r\n        ]\r\n    }\r\n},\r\n\"variables\": {\r\n    \"environmentSettings\": {\r\n        \"test\": {\r\n            \"instancesSize\": \"Small\",\r\n            \"instancesCount\": 1\r\n        },\r\n        \"prod\": {\r\n            \"instancesSize\": \"Large\",\r\n            \"instancesCount\": 4\r\n        }\r\n    },\r\n    \"currentEnvironmentSettings\": \"[variables('environmentSettings')[parameters('environmentName')]]\",\r\n    \"instancesSize\": \"[variables('currentEnvironmentSettings').instancesSize]\",\r\n    \"instancesCount\": \"[variables('currentEnvironmentSettings').instancesCount]\"\r\n}\r\n```\r\n\r\n你可以使用 copy 语法创建带有多个元素数组的变量。 为元素数量提供一个数字。 每个元素的属性都包含在 input 对象中。 你可以在变量中使用 copy，或用其创建变量。 下例说明了这两种方法：\r\n\r\n```json\r\n{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {},\r\n  \"variables\": {\r\n    \"disk-array-on-object\": {\r\n      \"copy\": [\r\n        {\r\n          \"name\": \"disks\",\r\n          \"count\": 5,\r\n          \"input\": {\r\n            \"name\": \"[concat('myDataDisk', copyIndex('disks', 1))]\",\r\n            \"diskSizeGB\": \"1\",\r\n            \"diskIndex\": \"[copyIndex('disks')]\"\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"copy\": [\r\n      {\r\n        \"name\": \"disks-top-level-array\",\r\n        \"count\": 5,\r\n        \"input\": {\r\n          \"name\": \"[concat('myDataDisk', copyIndex('disks-top-level-array', 1))]\",\r\n          \"diskSizeGB\": \"1\",\r\n          \"diskIndex\": \"[copyIndex('disks-top-level-array')]\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \"resources\": [],\r\n  \"outputs\": {\r\n    \"exampleObject\": {\r\n      \"value\": \"[variables('disk-array-on-object')]\",\r\n      \"type\": \"object\"\r\n    },\r\n    \"exampleArrayOnObject\": {\r\n      \"value\": \"[variables('disk-array-on-object').disks]\",\r\n      \"type\" : \"array\"\r\n    },\r\n    \"exampleArray\": {\r\n      \"value\": \"[variables('disks-top-level-array')]\",\r\n      \"type\" : \"array\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n使用 copy 创建变量时，还可以指定多个对象。 以下示例将两个数组定义为变量。 一个数组名为 **disks-top-level-array**，包含五个元素。 另一个数组名为 **a-different-array**，包含三个元素。\r\n\r\n```json\r\n\"variables\": {\r\n    \"copy\": [\r\n        {\r\n            \"name\": \"disks-top-level-array\",\r\n            \"count\": 5,\r\n            \"input\": {\r\n                \"name\": \"[concat('oneDataDisk', copyIndex('disks-top-level-array', 1))]\",\r\n                \"diskSizeGB\": \"1\",\r\n                \"diskIndex\": \"[copyIndex('disks-top-level-array')]\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"a-different-array\",\r\n            \"count\": 3,\r\n            \"input\": {\r\n                \"name\": \"[concat('twoDataDisk', copyIndex('a-different-array', 1))]\",\r\n                \"diskSizeGB\": \"1\",\r\n                \"diskIndex\": \"[copyIndex('a-different-array')]\"\r\n            }\r\n        }\r\n    ]\r\n},\r\n```\r\n\r\n## <a name=\"resources\"></a>资源\r\n在 resources 节，可以定义部署或更新的资源。 此节可能比较复杂，因为用户必须了解要部署哪些类型才能提供正确的值。 有关需要设置的资源特定值（apiVersion、type 和 properties），请参阅[在 Azure Resource Manager 模板中定义资源](https://docs.microsoft.com/en-us/azure/templates/)。 \r\n\r\n使用以下结构定义资源：\r\n\r\n```json\r\n\"resources\": [\r\n  {\r\n      \"condition\": \"<boolean-value-whether-to-deploy>\",\r\n      \"apiVersion\": \"<api-version-of-resource>\",\r\n      \"type\": \"<resource-provider-namespace/resource-type-name>\",\r\n      \"name\": \"<name-of-the-resource>\",\r\n      \"location\": \"<location-of-resource>\",\r\n      \"tags\": {\r\n          \"<tag-name1>\": \"<tag-value1>\",\r\n          \"<tag-name2>\": \"<tag-value2>\"\r\n      },\r\n      \"comments\": \"<your-reference-notes>\",\r\n      \"copy\": {\r\n          \"name\": \"<name-of-copy-loop>\",\r\n          \"count\": \"<number-of-iterations>\",\r\n          \"mode\": \"<serial-or-parallel>\",\r\n          \"batchSize\": \"<number-to-deploy-serially>\"\r\n      },\r\n      \"dependsOn\": [\r\n          \"<array-of-related-resource-names>\"\r\n      ],\r\n      \"properties\": {\r\n          \"<settings-for-the-resource>\",\r\n          \"copy\": [\r\n              {\r\n                  \"name\": ,\r\n                  \"count\": ,\r\n                  \"input\": {}\r\n              }\r\n          ]\r\n      },\r\n      \"resources\": [\r\n          \"<array-of-child-resources>\"\r\n      ]\r\n  }\r\n]\r\n```\r\n\r\n| 元素名称 | 必选 | 说明 |\r\n|:--- |:--- |:--- |\r\n| 条件 | 否 | 指示是否部署资源的布尔值。 |\r\n| apiVersion |是 |用于创建资源的 REST API 版本。 |\r\n| type |是 |资源的类型。 此值是资源提供程序的命名空间和资源类型（例如 **Microsoft.Storage/storageAccounts**）的组合。 |\r\n| 名称 |是 |资源的名称。 该名称必须遵循 RFC3986 中定义的 URI 构成部分限制。 此外，向第三方公开资源名称的 Azure 服务将验证名称，以确保它不是尝试窃取另一个身份。 |\r\n| location |多种多样 |提供的资源支持的地理位置。 可以选择任何可用位置，但通常选取靠近用户的位置。 通常，在同一区域放置彼此交互的资源也很有用。 大多数资源类型需要一个位置，但某些类型 （如角色分配）不需要位置。 请参阅[在 Azure Resource Manager 模板中设置资源位置](resource-manager-template-location.md)。 |\r\n| 标记 |否 |与资源关联的标记。 请参阅[标记 Azure Resource Manager 模板中的资源](resource-manager-template-tags.md)。 |\r\n| 注释 |否 |用于描述模板中资源的注释 |\r\n| 复制 |否 |如果需要多个实例，则为要创建的资源数。 默认模式为并行。 如果你不希望同时部署所有资源，请指定串行模式。 有关详细信息，请参阅[在 Azure Resource Manager 中创建多个资源实例](resource-group-create-multiple.md)。 |\r\n| dependsOn |否 |部署此资源之前必须部署的资源。 Resource Manager 评估资源之间的依赖关系，并根据正确顺序进行部署。 如果资源不相互依赖，则可并行部署资源。 该值可以是资源名称或资源唯一标识符的逗号分隔列表。 在此模板中仅部署列出的资源。 此模板中未定义的资源必须已存在。 避免添加不必要的依赖项，因为这些依赖项可能会降低部署速度并创建循环依赖项。 有关设置依赖项的指导，请参阅[在 Azure Resource Manager 模板中定义依赖项](resource-group-define-dependencies.md)。 |\r\n| 属性 |否 |特定于资源的配置设置。 properties 的值与创建资源时，在 REST API 操作（PUT 方法）的请求正文中提供的值相同。 还可以指定 copy 数组来创建属性的多个实例。 有关详细信息，请参阅[在 Azure Resource Manager 中创建多个资源实例](resource-group-create-multiple.md)。 |\r\n| 资源 |否 |依赖于所定义的资源的子资源。 只能提供父资源的架构允许的资源类型。 子资源的完全限定类型包含父资源类型，例如 **Microsoft.Web/sites/extensions**。 不隐式表示对父资源的依赖。 必须显式定义该依赖关系。 |\r\n\r\nresources 节包含要部署的资源数组。 在每个资源内，还可以定义子资源数组。 因此，resources 节的结构可能类似于：\r\n\r\n```json\r\n\"resources\": [\r\n  {\r\n      \"name\": \"resourceA\",\r\n  },\r\n  {\r\n      \"name\": \"resourceB\",\r\n      \"resources\": [\r\n        {\r\n            \"name\": \"firstChildResourceB\",\r\n        },\r\n        {   \r\n            \"name\": \"secondChildResourceB\",\r\n        }\r\n      ]\r\n  },\r\n  {\r\n      \"name\": \"resourceC\",\r\n  }\r\n]\r\n```      \r\n\r\n有关定义子资源的详细信息，请参阅[在 Resource Manager 模板中设置子资源的名称和类型](resource-manager-template-child-resource.md)。\r\n\r\n**condition** 元素指定是否部署资源。 此元素的值将解析为 true 或 false。 例如，若要指定是否部署新存储帐户，请使用：\r\n\r\n```json\r\n{\r\n    \"condition\": \"[equals(parameters('newOrExisting'),'new')]\",\r\n    \"type\": \"Microsoft.Storage/storageAccounts\",\r\n    \"name\": \"[variables('storageAccountName')]\",\r\n    \"apiVersion\": \"2017-06-01\",\r\n    \"location\": \"[resourceGroup().location]\",\r\n    \"sku\": {\r\n        \"name\": \"[variables('storageAccountType')]\"\r\n    },\r\n    \"kind\": \"Storage\",\r\n    \"properties\": {}\r\n}\r\n```\r\n\r\n有关使用新资源或现有资源的示例，请参阅[新的或现有的条件模板](https://github.com/rjmax/Build2017/blob/master/Act1.TemplateEnhancements/Chapter05.ConditionalResources.NewOrExisting.json)。\r\n\r\n若要指定是否使用密码或 SSH 密钥部署虚拟机，请在模板中定义虚拟机的两个版本，并使用 **condition** 来区分用法。 传递一个参数用于指定要部署的方案。\r\n\r\n```json\r\n{\r\n    \"condition\": \"[equals(parameters('passwordOrSshKey'),'password')]\",\r\n    \"apiVersion\": \"2016-03-30\",\r\n    \"type\": \"Microsoft.Compute/virtualMachines\",\r\n    \"name\": \"[concat(variables('vmName'),'password')]\",\r\n    \"properties\": {\r\n        \"osProfile\": {\r\n            \"computerName\": \"[variables('vmName')]\",\r\n            \"adminUsername\": \"[parameters('adminUsername')]\",\r\n            \"adminPassword\": \"[parameters('adminPassword')]\"\r\n        },\r\n        ...\r\n    },\r\n    ...\r\n},\r\n{\r\n    \"condition\": \"[equals(parameters('passwordOrSshKey'),'sshKey')]\",\r\n    \"apiVersion\": \"2016-03-30\",\r\n    \"type\": \"Microsoft.Compute/virtualMachines\",\r\n    \"name\": \"[concat(variables('vmName'),'ssh')]\",\r\n    \"properties\": {\r\n        \"osProfile\": {\r\n            \"linuxConfiguration\": {\r\n                \"disablePasswordAuthentication\": \"true\",\r\n                \"ssh\": {\r\n                    \"publicKeys\": [\r\n                        {\r\n                            \"path\": \"[variables('sshKeyPath')]\",\r\n                            \"keyData\": \"[parameters('adminSshKey')]\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        ...\r\n    },\r\n    ...\r\n}\r\n``` \r\n\r\n有关使用密码或 SSH 密钥部署虚拟机的示例，请参阅[用户名或 SSH 条件模板](https://github.com/rjmax/Build2017/blob/master/Act1.TemplateEnhancements/Chapter05.ConditionalResourcesUsernameOrSsh.json)。\r\n\r\n## <a name=\"outputs\"></a>Outputs\r\n在 Outputs 节中，可以指定从部署返回的值。 例如，可能会返回用于访问已部署资源的 URI。\r\n\r\n以下示例演示了输出定义的结构：\r\n\r\n```json\r\n\"outputs\": {\r\n    \"<outputName>\" : {\r\n        \"type\" : \"<type-of-output-value>\",\r\n        \"value\": \"<output-value-expression>\"\r\n    }\r\n}\r\n```\r\n\r\n| 元素名称 | 必选 | 说明 |\r\n|:--- |:--- |:--- |\r\n| outputName |是 |输出值的名称。 必须是有效的 JavaScript 标识符。 |\r\n| type |是 |输出值的类型。 输出值支持的类型与模板输入参数相同。 |\r\n| value |是 |要求值并作为输出值返回的模板语言表达式。 |\r\n\r\n以下示例演示了 Outputs 节中返回的值。\r\n\r\n```json\r\n\"outputs\": {\r\n    \"siteUri\" : {\r\n        \"type\" : \"string\",\r\n        \"value\": \"[concat('http://',reference(resourceId('Microsoft.Web/sites', parameters('siteName'))).hostNames[0])]\"\r\n    }\r\n}\r\n```\r\n\r\n有关如何处理输出的详细信息，请参阅 [Sharing state in Azure Resource Manager templates](best-practices-resource-manager-state.md)（在 Azure Resource Manager 模板中共享状态）。\r\n\r\n## <a name=\"template-limits\"></a>模板限制\r\n\r\n将模板大小限制为 1 MB 以内，每个参数文件大小限制为 64 KB 以内。 通过迭代资源定义及变量和参数的值扩展模板后，1 MB 的限制适用于模板的最终状态。 \r\n\r\n此外，还存在以下限制：\r\n\r\n* 256 个参数\r\n* 256 个变量\r\n* 800 个资源（包括副本计数）\r\n* 64 个输出值\r\n* 模板表达式中不超过 24,576 个字符\r\n\r\n通过使用嵌套模板，可超出某些模板限制。 有关详细信息，请参阅[部署 Azure 资源时使用链接的模板](resource-group-linked-templates.md)。 若要减少参数、变量或输出的数量，可以将几个值合并为一个对象。 有关详细信息，请参阅[对象即参数](http://docs.microsoft.com/zh-cn/azure/architecture/building-blocks/extending-templates/objects-as-parameters)。\r\n<!-- [Objects as parameters](resource-manager-objects-as-parameters.md) redirect to /azure/architecture/building-blocks/extending-templates/objects-as-parameters -->\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n* 若要查看许多不同类型的解决方案的完整模型，请参阅 [Azure Quickstart Templates](https://github.com/Azure/azure-quickstart-templates/)（Azure 快速入门模板）。\r\n* 有关用户可以使用的来自模板中的函数的详细信息，请参阅 [Azure Resource Manager Template Functions](resource-group-template-functions.md)（Azure Resource Manager 模板函数）。\r\n* 要在部署期间合并多个模板，请参阅[将已链接的模板与 Azure 资源管理器配合使用](resource-group-linked-templates.md)。\r\n* 可能需要使用不同资源组中的资源。 使用跨多个资源组共享的存储帐户或虚拟网络时，此方案很常见。 有关详细信息，请参阅 [resourceId 函数](resource-group-template-functions-resource.md#resourceid)。\r\n\r\n<!--Update_Description: wording update, add the copy index usage in templates, update link -->"}