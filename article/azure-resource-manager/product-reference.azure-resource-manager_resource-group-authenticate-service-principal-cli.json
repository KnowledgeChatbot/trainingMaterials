{"Title":"使用 Azure CLI 创建 Azure 应用标识","Description":"介绍如何使用 Azure CLI 创建 Azure Active Directory 应用程序和服务主体，并通过基于角色的访问控制授予其对资源的访问权限。 它演示如何使用密码或证书对应用程序进行身份验证。","Content":"# <a name=\"use-azure-cli-to-create-a-service-principal-to-access-resources\"></a>使用 Azure CLI 创建服务主体来访问资源\r\n\r\n当某个应用或脚本需要访问资源时，用户可以为该应用设置一个标识，并使用其自身的凭据进行身份验证。 此标识称为服务主体。 使用此方法可实现以下目的：\r\n\r\n* 将不同于自己的权限的权限分配给应用标识。 通常情况下，这些权限仅限于应用需执行的操作。\r\n* 执行无人参与的脚本时，使用证书进行身份验证。\r\n\r\n本文介绍如何通过 [Azure CLI 1.0](../cli-install-nodejs.md) 设置应用程序，使之能够使用自己的凭据和标识运行。 安装最新版的 [Azure CLI 1.0](../cli-install-nodejs.md)，确保环境符合本文中示例的要求。\r\n\r\n## <a name=\"required-permissions\"></a>所需的权限\r\n若要完成本主题，必须在 Azure Active Directory 和 Azure 订阅中均具有足够的权限。 具体而言，必须能够在 Azure Active Directory 中创建应用并向角色分配服务主体。 \r\n\r\n检查帐户是否有足够权限的最简方法是使用门户。 请参阅[在门户中检查所需的权限](resource-group-create-service-principal-portal.md#required-permissions)。\r\n\r\n现在转到[密码](#create-service-principal-with-password)或[证书](#create-service-principal-with-certificate)身份验证部分。\r\n\r\n## <a name=\"create-service-principal-with-password\"></a> 使用密码创建服务主体\r\n在本部分中，会执行相关步骤，使用密码创建 AD 应用程序，并将读取者角色分配给服务主体。\r\n\r\n1. 登录到帐户。\r\n\r\n    ```azurecli\r\n    azure login -e AzureChinaCloud\r\n    ```\r\n2. 若要创建应用标识，请提供应用名称和密码，如以下命令所示：\r\n\r\n    ```azurecli\r\n    azure ad sp create -n exampleapp -p {your-password}\r\n    ```\r\n\r\n    随后返回新的服务主体。 授权时需要使用对象 ID。 登录时需要提供随服务主体名称列出的 GUID。 此 GUID 与 AppId 的值一样。在示例应用程序中，此值称为 `Client ID`。 \r\n\r\n    ```azurecli\r\n    info:    Executing command ad sp create\r\n\r\n    Creating application exampleapp\r\n      / Creating service principal for application 7132aca4-1bdb-4238-ad81-996ff91d8db+\r\n      data:    Object Id:               ff863613-e5e2-4a6b-af07-fff6f2de3f4e\r\n      data:    Display Name:            exampleapp\r\n      data:    Service Principal Names:\r\n      data:                             7132aca4-1bdb-4238-ad81-996ff91d8db4\r\n      data:                             https://www.contoso.org/example\r\n      info:    ad sp create command OK\r\n    ```\r\n\r\n3. 向服务主体授予对订阅的权限。 在此示例中，向“读取者”角色（授予读取订阅中所有资源的权限）添加服务主体。 对于其他角色，请参阅 [RBAC：内置角色](../active-directory/role-based-access-built-in-roles.md)。 对于 objectid 参数，请提供创建应用程序时使用的 Object ID。 运行此命令之前，必须留出一些时间让新服务主体传遍 Azure Active Directory。 手动运行这些命令时，任务之间通常已经过足够的时间。 在脚本中，应在命令间添加休眠步骤（如 `sleep 15`）。 如果看到错误称主体不存在于目录中，请重新运行该命令。\r\n\r\n    ```azurecli\r\n    azure role assignment create --objectId ff863613-e5e2-4a6b-af07-fff6f2de3f4e -o Reader -c /subscriptions/{subscriptionId}/\r\n    ```\r\n\r\n    就这么简单！ AD 应用程序和服务主体设置完毕。 下一部分演示如何通过 Azure CLI 使用凭据进行登录。 如果想在代码应用程序中使用凭据，则不需要继续了解本主题。 可以跳到 [示例应用程序](#sample-applications) ，获取使用应用程序 ID 和密码登录的示例。 \r\n\r\n### <a name=\"provide-credentials-through-azure-cli\"></a>通过 Azure CLI 提供凭据\r\n现在，需要以应用程序方式登录以执行相应操作。\r\n\r\n1. 以服务主体方式登录时，需提供 AD 应用所在目录的租户 ID。 租户是 Azure Active Directory 的实例。 若要检索当前已经过身份验证的订阅的租户 ID，请使用：\r\n\r\n    ```azurecli\r\n    azure account show\r\n    ```\r\n\r\n    返回：\r\n\r\n    ```azurecli\r\n    info:    Executing command account show\r\n    data:    Name                        : Windows Azure MSDN - Visual Studio Ultimate\r\n    data:    ID                          : {guid}\r\n    data:    State                       : Enabled\r\n    data:    Tenant ID                   : {guid}\r\n    data:    Is Default                  : true\r\n    ...\r\n    ```\r\n\r\n    如果需要获取另一个订阅的租户 ID，请使用以下命令：\r\n\r\n    ```azurecli\r\n    azure account show -s {subscription-id}\r\n    ```\r\n2. 如果需要检索用于登录的客户端 ID，请使用以下命令：\r\n\r\n    ```azurecli\r\n    azure ad sp show -c exampleapp --json\r\n    ```\r\n\r\n    用于登录的值是服务主体名称中列出的 GUID。\r\n\r\n    ```azurecli\r\n    [\r\n        {\r\n           \"objectId\": \"ff863613-e5e2-4a6b-af07-fff6f2de3f4e\",\r\n           \"objectType\": \"ServicePrincipal\",\r\n           \"displayName\": \"exampleapp\",\r\n           \"appId\": \"7132aca4-1bdb-4238-ad81-996ff91d8db4\",\r\n           \"servicePrincipalNames\": [\r\n               \"https://www.contoso.org/example\",\r\n               \"7132aca4-1bdb-4238-ad81-996ff91d8db4\"\r\n           ]\r\n        }\r\n    ]\r\n    ```\r\n3. 以服务主体方式登录。\r\n\r\n    ```azurecli\r\n    azure login -e AzureChinaCloud -u 7132aca4-1bdb-4238-ad81-996ff91d8db4 --service-principal --tenant {tenant-id}\r\n    ```\r\n\r\n    系统会提示输入密码。 提供在创建 AD 应用程序时指定的密码。\r\n\r\n    ```azurecli\r\n    info:    Executing command login\r\n    Password: ********\r\n    ```\r\n\r\n现在，用户已作为所创建服务主体的服务主体进行身份验证。\r\n\r\n也可从要登录的命令行调用 REST 操作。 可以从身份验证响应中检索访问令牌，将其用于其他操作。 若要通过示例来了解如何通过调用 REST 操作来检索访问令牌，请参阅[生成访问令牌](resource-manager-rest-api.md#generating-an-access-token)。\r\n\r\n## <a name=\"create-service-principal-with-certificate\"></a>使用证书创建服务主体\r\n本部分会执行步骤以：\r\n\r\n* 创建自签名证书\r\n* 使用证书创建 AD 应用程序，并创建服务主体\r\n* 向服务主体分配“读取者”角色\r\n\r\n若要完成这些步骤，必须已安装 [OpenSSL](http://www.openssl.org/) 。\r\n\r\n1. 创建自签名证书。\r\n\r\n    ```\r\n    openssl req -x509 -days 3650 -newkey rsa:2048 -out cert.pem -nodes -subj '/CN=exampleapp'\r\n    ```\r\n\r\n2. 前述步骤创建了两个文件 - privkey.pem 和 cert.pem。 将公钥和私钥组合成一个文件。\r\n\r\n    ```\r\n    cat privkey.pem cert.pem > examplecert.pem\r\n    ```\r\n\r\n3. 打开 **examplecert.pem** 文件并找到 **-----BEGIN CERTIFICATE-----** 与 **-----END CERTIFICATE-----** 之间的长字符序列。 复制证书数据。 创建服务主体时将此数据作为参数传递。\r\n\r\n4. 登录到帐户。\r\n\r\n    ```azurecli\r\n    azure login -e AzureChinaCloud\r\n    ```\r\n5. 若要创建服务主体，请提供应用名称和证书数据，如以下命令所示：\r\n     \r\n    ```azurecli\r\n    azure ad sp create -n exampleapp --cert-value {certificate data}\r\n    ```\r\n\r\n    随后返回新的服务主体。 授权时需要使用对象 ID。 登录时需要提供随服务主体名称列出的 GUID。 此 GUID 与 AppId 的值一样。在示例应用程序中，此值称为“客户端 ID”。 \r\n     \r\n    ```azurecli\r\n    info:    Executing command ad sp create\r\n\r\n    Creating service principal for application 4fd39843-c338-417d-b549-a545f584a74+\r\n        data:    Object Id:        7dbc8265-51ed-4038-8e13-31948c7f4ce7\r\n        data:    Display Name:     exampleapp\r\n        data:    Service Principal Names:\r\n        data:                      4fd39843-c338-417d-b549-a545f584a745\r\n        data:                      https://www.contoso.org/example\r\n        info:    ad sp create command OK\r\n    ```\r\n6. 向服务主体授予对订阅的权限。 在此示例中，向“读取者”角色（授予读取订阅中所有资源的权限）添加服务主体。 对于其他角色，请参阅 [RBAC：内置角色](../active-directory/role-based-access-built-in-roles.md)。 对于 objectid 参数，请提供创建应用程序时使用的 Object ID。 运行此命令之前，必须留出一些时间让新服务主体传遍 Azure Active Directory。 手动运行这些命令时，任务之间通常已经过足够的时间。 在脚本中，应在命令间添加休眠步骤（如 `sleep 15`）。 如果看到错误称主体不存在于目录中，请重新运行该命令。\r\n   \r\n    ```azurecli\r\n    azure role assignment create --objectId 7dbc8265-51ed-4038-8e13-31948c7f4ce7 -o Reader -c /subscriptions/{subscriptionId}/\r\n    ```\r\n  \r\n### <a name=\"provide-certificate-through-automated-azure-cli-script\"></a>通过自动执行的 Azure CLI 脚本提供证书\r\n现在，需要以应用程序方式登录以执行相应操作。\r\n\r\n1. 以服务主体方式登录时，需提供 AD 应用所在目录的租户 ID。 租户是 Azure Active Directory 的实例。 若要检索当前已经过身份验证的订阅的租户 ID，请使用：\r\n\r\n    ```azurecli\r\n    azure account show\r\n    ```\r\n\r\n    返回：\r\n\r\n    ```azurecli\r\n    info:    Executing command account show\r\n    data:    Name                        : Windows Azure MSDN - Visual Studio Ultimate\r\n    data:    ID                          : {guid}\r\n    data:    State                       : Enabled\r\n    data:    Tenant ID                   : {guid}\r\n    data:    Is Default                  : true\r\n    ...\r\n    ```\r\n\r\n    如果需要获取另一个订阅的租户 ID，请使用以下命令：\r\n\r\n    ```azurecli\r\n    azure account show -s {subscription-id}\r\n    ```\r\n2. 若要检索证书指纹并删除不需要的字符，请使用：\r\n\r\n    ```\r\n    openssl x509 -in \"C:\\certificates\\examplecert.pem\" -fingerprint -noout | sed 's/SHA1 Fingerprint=//g'  | sed 's/://g'\r\n    ```\r\n\r\n    它返回的指纹值类似于：\r\n\r\n    ```\r\n    30996D9CE48A0B6E0CD49DBB9A48059BF9355851\r\n    ```\r\n\r\n3. 如果需要检索用于登录的客户端 ID，请使用以下命令：\r\n\r\n    ```azurecli\r\n    azure ad sp show -c exampleapp\r\n    ```\r\n\r\n    用于登录的值是服务主体名称中列出的 GUID。\r\n\r\n    ```azurecli\r\n    [\r\n        {\r\n            \"objectId\": \"7dbc8265-51ed-4038-8e13-31948c7f4ce7\",\r\n            \"objectType\": \"ServicePrincipal\",\r\n            \"displayName\": \"exampleapp\",\r\n            \"appId\": \"4fd39843-c338-417d-b549-a545f584a745\",\r\n            \"servicePrincipalNames\": [\r\n                \"https://www.contoso.org/example\",\r\n                \"4fd39843-c338-417d-b549-a545f584a745\"\r\n            ]\r\n        }\r\n    ]\r\n    ```\r\n4. 以服务主体方式登录。\r\n\r\n    ```azurecli\r\n    azure login -e AzureChinaCloud --service-principal --tenant {tenant-id} -u 4fd39843-c338-417d-b549-a545f584a745 --certificate-file C:\\certificates\\examplecert.pem --thumbprint {thumbprint}\r\n    ```\r\n\r\n现在，你已作为所创建 Azure Active Directory 应用程序的服务主体进行身份验证。\r\n\r\n## <a name=\"change-credentials\"></a>更改凭据\r\n\r\n为了保障安全或由于凭据过期，若要更改 AD 应用的凭据，请使用 `azure ad app set`。\r\n\r\n若要更改密码，请使用：\r\n\r\n```azurecli\r\nazure ad app set --applicationId 4fd39843-c338-417d-b549-a545f584a745 --password p@ssword\r\n```\r\n\r\n若要更改证书值，请使用：\r\n\r\n```azurecli\r\nazure ad app set --applicationId 4fd39843-c338-417d-b549-a545f584a745 --cert-value {certificate data}\r\n```\r\n\r\n## <a name=\"debug\"></a>调试\r\n\r\n创建服务主体时，可能会遇到以下错误：\r\n\r\n* “Authentication_Unauthorized”或“在上下文中找不到订阅”。 - 如果帐户不具有在 Azure Active Directory 上注册应用[所需的权限](#required-permissions)，会收到此错误。 通常，当仅 Azure Active Directory 中的管理员用户可注册应用且帐户不是管理员帐户时，会看到此错误。可要求管理员分配管理员角色，或者允许用户注册应用。\r\n\r\n* 帐户“无权对作用域 '/subscriptions/{guid}' 执行 'Microsoft.Authorization/roleAssignments/write' 操作。”- 当帐户没有足够权限，无法为标识分配角色时，会出现此错误。 可要求订阅管理员将你添加到“用户访问管理员”角色。\r\n\r\n## <a name=\"sample-applications\"></a>示例应用程序\r\n以下示例应用程序演示如何以服务主体身份登录。\r\n\r\n**.NET**\r\n\r\n* [在 .NET 中使用模板部署启用 SSH 的 VM](https://github.com/Azure-Samples/resource-manager-dotnet-template-deployment/)\r\n* [使用 .NET 管理 Azure 资源和资源组](https://github.com/Azure-Samples/resource-manager-dotnet-resources-and-groups/)\r\n\r\n**Java**\r\n\r\n* [资源入门 - 在 Java 中使用 Azure Resource Manager 模板部署资源](https://github.com/Azure-Samples/resources-java-deploy-using-arm-template/)\r\n* [资源入门 - 在 Java 中管理资源组](https://github.com/Azure-Samples/resources-java-manage-resource-group/)\r\n* [Java](https://docs.azure.cn/java/java-sdk-azure-authenticate)\r\n\r\n**Python**\r\n\r\n* [在 Python 中使用模板部署启用 SSH 的 VM](https://github.com/Azure-Samples/resource-manager-python-template-deployment/)\r\n* [使用 Python 管理 Azure 资源和资源组](https://github.com/Azure-Samples/resource-manager-python-resources-and-groups/)\r\n* [Python](https://docs.microsoft.com/python/azure/python-sdk-azure-authenticate?view=azure-python)\r\n\r\n**Node.js**\r\n\r\n* [在 Node.js 中使用模板部署启用 SSH 的 VM](https://github.com/Azure-Samples/resource-manager-node-template-deployment/)\r\n* [使用 Node.js 管理 Azure 资源和资源组](https://github.com/Azure-Samples/resource-manager-node-resources-and-groups/)\r\n* [Node.js](https://docs.microsoft.com/nodejs/azure/node-sdk-azure-get-started?view=azure-node-2.0.0)\r\n\r\n**Ruby**\r\n\r\n* [在 Ruby 中使用模板部署启用 SSH 的 VM](https://github.com/Azure-Samples/resource-manager-ruby-template-deployment/)\r\n* [使用 Ruby 管理 Azure 资源和资源组](https://github.com/Azure-Samples/resource-manager-ruby-resources-and-groups/)\r\n* [Ruby](https://github.com/Azure-Samples/resource-manager-ruby-resources-and-groups/)\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n* 有关将应用程序集成到 Azure 以管理资源的详细步骤，请参阅 [Developer's guide to authorization with the Azure Resource Manager API](resource-manager-api-authentication.md)（使用 Azure 资源管理器 API 进行授权的开发人员指南）。\r\n* 若要获取有关使用证书和 Azure CLI 的详细信息，请参阅 [Certificate-based authentication with Azure Service Principals from Linux command line](http://blogs.msdn.com/b/arsen/archive/2015/09/18/certificate-based-auth-with-azure-service-principals-from-linux-command-line.aspx)（从 Linux 命令行对 Azure 服务主体进行基于证书的身份验证）。\r\n* 有关可对用户授予或拒绝的可用操作的列表，请参阅 [Azure Resource Manager 资源提供程序操作](../active-directory/role-based-access-control-resource-provider-operations.md)。"}