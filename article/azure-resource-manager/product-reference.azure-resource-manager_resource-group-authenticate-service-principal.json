{"Title":"使用 PowerShell 创建 Azure 应用标识","Description":"介绍如何使用 Azure PowerShell 创建 Azure Active Directory 应用程序和服务主体，并通过基于角色的访问控制向其授予资源访问权限。 它演示如何使用密码或证书对应用程序进行身份验证。","Content":"# <a name=\"use-azure-powershell-to-create-a-service-principal-to-access-resources\"></a>使用 Azure PowerShell 创建服务主体来访问资源\r\n\r\n当某个应用或脚本需要访问资源时，用户可以为该应用设置一个标识，并使用其自身的凭据进行身份验证。 此标识称为服务主体。 使用此方法可实现以下目的：\r\n\r\n* 将不同于自己的权限的权限分配给应用标识。 通常情况下，这些权限仅限于应用需执行的操作。\r\n* 执行无人参与的脚本时，使用证书进行身份验证。\r\n\r\n本主题介绍如何通过 [Azure PowerShell](https://docs.microsoft.com/powershell/azure/overview) 为应用程序进行一切所需设置，使之能够使用自己的凭据和标识运行。\r\n\r\n## <a name=\"required-permissions\"></a>所需的权限\r\n若要完成本主题，必须在 Azure Active Directory 和 Azure 订阅中均具有足够的权限。 具体而言，必须能够在 Azure Active Directory 中创建应用并向角色分配服务主体。 \r\n\r\n检查帐户是否有足够权限的最简方法是使用门户。 请参阅[检查所需的权限](resource-group-create-service-principal-portal.md#required-permissions)。\r\n\r\n现在，继续完成进行身份验证的部分：\r\n\r\n* [password](#create-service-principal-with-password)\r\n* [自签名证书](#create-service-principal-with-self-signed-certificate)\r\n* [证书颁发机构的证书](#create-service-principal-with-certificate-from-certificate-authority)\r\n\r\n## <a name=\"powershell-commands\"></a>PowerShell 命令\r\n\r\n若要设置服务主体，请使用：\r\n\r\n| 命令 | 说明 |\r\n| ------- | ----------- | \r\n| [New-AzureRmADServicePrincipal](https://docs.microsoft.com/powershell/module/azurerm.resources/new-azurermadserviceprincipal) | 创建 Azure Active Directory 服务主体 |\r\n| [New-AzureRmRoleAssignment](https://docs.microsoft.com/powershell/module/azurerm.resources/new-azurermroleassignment) | 在指定范围内将指定的 RBAC 角色分配给指定的主体。 |\r\n\r\n## <a name=\"create-service-principal-with-password\"></a>使用密码创建服务主体\r\n\r\n若要使用订阅的参与者角色创建服务主体，请使用： \r\n\r\n```powershell\r\nLogin-AzureRmAccount -EnvironmentName AzureChinaCloud\r\n$password = convertto-securestring {provide-password} -asplaintext -force\r\n$sp = New-AzureRmADServicePrincipal -DisplayName exampleapp -Password $password\r\nSleep 20\r\nNew-AzureRmRoleAssignment -RoleDefinitionName Contributor -ServicePrincipalName $sp.ApplicationId\r\n```\r\n\r\n该示例休眠 20 秒，让新的服务主体有时间传遍 Azure Active Directory。 如果脚本等待时长不足，会显示错误：“PrincipalNotFound: 主体 {ID} 不存在于目录中”。\r\n\r\n使用以下脚本可以指定默认订阅以外的范围，并在出错时重试角色分配：\r\n\r\n```powershell\r\nParam (\r\n\r\n # Use to set scope to resource group. If no value is provided, scope is set to subscription.\r\n [Parameter(Mandatory=$false)]\r\n [String] $ResourceGroup,\r\n\r\n # Use to set subscription. If no value is provided, default subscription is used. \r\n [Parameter(Mandatory=$false)]\r\n [String] $SubscriptionId,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $ApplicationDisplayName,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $Password\r\n)\r\n\r\n Login-AzureRmAccount -EnvironmentName AzureChinaCloud\r\n Import-Module AzureRM.Resources\r\n\r\n if ($SubscriptionId -eq \"\") \r\n {\r\n    $SubscriptionId = (Get-AzureRmContext).Subscription.Id\r\n }\r\n else\r\n {\r\n    Set-AzureRmContext -SubscriptionId $SubscriptionId\r\n }\r\n\r\n if ($ResourceGroup -eq \"\")\r\n {\r\n    $Scope = \"/subscriptions/\" + $SubscriptionId\r\n }\r\n else\r\n {\r\n    $Scope = (Get-AzureRmResourceGroup -Name $ResourceGroup -ErrorAction Stop).ResourceId\r\n }\r\n\r\n # Create Service Principal for the AD app\r\n $ServicePrincipal = New-AzureRMADServicePrincipal -DisplayName $ApplicationDisplayName -Password $Password\r\n Get-AzureRmADServicePrincipal -ObjectId $ServicePrincipal.Id \r\n\r\n $NewRole = $null\r\n $Retries = 0;\r\n While ($NewRole -eq $null -and $Retries -le 6)\r\n {\r\n    # Sleep here for a few seconds to allow the service principal application to become active (should only take a couple of seconds normally)\r\n    Sleep 15\r\n    New-AzureRMRoleAssignment -RoleDefinitionName Contributor -ServicePrincipalName $ServicePrincipal.ApplicationId -Scope $Scope | Write-Verbose -ErrorAction SilentlyContinue\r\n    $NewRole = Get-AzureRMRoleAssignment -ObjectId $ServicePrincipal.Id -ErrorAction SilentlyContinue\r\n    $Retries++;\r\n }\r\n```\r\n\r\n有关该脚本的几个注意事项：\r\n\r\n* 若要向标识授予对默认订阅的访问权限，不需要提供 ResourceGroup 或 SubscriptionId 参数。\r\n* 仅当希望将角色分配范围限定为某个资源组时指定 ResourceGroup 参数。\r\n*  在此示例中，将服务主体添加到“参与者”角色。 对于其他角色，请参阅 [RBAC：内置角色](../active-directory/role-based-access-built-in-roles.md)。\r\n* 该脚本休眠 15 秒，让新的服务主体有时间传遍 Azure Active Directory。 如果脚本等待时长不足，会显示错误：“PrincipalNotFound: 主体 {ID} 不存在于目录中”。\r\n* 如果需要向服务主体授予对其他订阅或资源组的访问权限，请使用不同的范围再次运行 `New-AzureRMRoleAssignment` cmdlet。\r\n\r\n### <a name=\"provide-credentials-through-powershell\"></a>通过 PowerShell 提供凭据\r\n现在，需要以应用程序方式登录以执行相应操作。 对于用户名，请使用针对应用程序创建的 `ApplicationId`。 对于密码，请使用在创建帐户时指定的密码。 \r\n\r\n```powershell   \r\n$creds = Get-Credential\r\nLogin-AzureRmAccount -EnvironmentName AzureChinaCloud -Credential $creds -ServicePrincipal -TenantId {tenant-ID}\r\n```\r\n\r\n租户 ID 不敏感，因此可以直接将其嵌入脚本中。 如果需要检索租户 ID，请使用：\r\n\r\n```powershell\r\n(Get-AzureRmSubscription -SubscriptionName \"Contoso Default\").TenantId\r\n```\r\n\r\n## <a name=\"create-service-principal-with-self-signed-certificate\"></a>使用自签名证书创建服务主体\r\n\r\n若要使用自签名证书和订阅的参与者角色创建服务主体，请使用： \r\n\r\n```powershell\r\nLogin-AzureRmAccount -EnvironmentName AzureChinaCloud\r\n$cert = New-SelfSignedCertificate -CertStoreLocation \"cert:\\CurrentUser\\My\" -Subject \"CN=exampleappScriptCert\" -KeySpec KeyExchange\r\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\r\n\r\n$sp = New-AzureRMADServicePrincipal -DisplayName exampleapp -CertValue $keyValue -EndDate $cert.NotAfter -StartDate $cert.NotBefore\r\nSleep 20\r\nNew-AzureRmRoleAssignment -RoleDefinitionName Contributor -ServicePrincipalName $sp.ApplicationId\r\n```\r\n\r\n该示例休眠 20 秒，让新的服务主体有时间传遍 Azure Active Directory。 如果脚本等待时长不足，会显示错误：“PrincipalNotFound: 主体 {ID} 不存在于目录中”。\r\n\r\n使用以下脚本可以指定默认订阅以外的范围，并在出错时重试角色分配。 必须在 Windows 10 或 Windows Server 2016 上使用 Azure PowerShell 2.0。\r\n\r\n```powershell\r\nParam (\r\n\r\n # Use to set scope to resource group. If no value is provided, scope is set to subscription.\r\n [Parameter(Mandatory=$false)]\r\n [String] $ResourceGroup,\r\n\r\n # Use to set subscription. If no value is provided, default subscription is used. \r\n [Parameter(Mandatory=$false)]\r\n [String] $SubscriptionId,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $ApplicationDisplayName\r\n )\r\n\r\n Login-AzureRmAccount -EnvironmentName AzureChinaCloud\r\n Import-Module AzureRM.Resources\r\n\r\n if ($SubscriptionId -eq \"\") \r\n {\r\n    $SubscriptionId = (Get-AzureRmContext).Subscription.Id\r\n }\r\n else\r\n {\r\n    Set-AzureRmContext -SubscriptionId $SubscriptionId\r\n }\r\n\r\n if ($ResourceGroup -eq \"\")\r\n {\r\n    $Scope = \"/subscriptions/\" + $SubscriptionId\r\n }\r\n else\r\n {\r\n    $Scope = (Get-AzureRmResourceGroup -Name $ResourceGroup -ErrorAction Stop).ResourceId\r\n }\r\n\r\n $cert = New-SelfSignedCertificate -CertStoreLocation \"cert:\\CurrentUser\\My\" -Subject \"CN=exampleappScriptCert\" -KeySpec KeyExchange\r\n $keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\r\n\r\n $ServicePrincipal = New-AzureRMADServicePrincipal -DisplayName $ApplicationDisplayName -CertValue $keyValue -EndDate $cert.NotAfter -StartDate $cert.NotBefore\r\n Get-AzureRmADServicePrincipal -ObjectId $ServicePrincipal.Id \r\n\r\n $NewRole = $null\r\n $Retries = 0;\r\n While ($NewRole -eq $null -and $Retries -le 6)\r\n {\r\n    # Sleep here for a few seconds to allow the service principal application to become active (should only take a couple of seconds normally)\r\n    Sleep 15\r\n    New-AzureRMRoleAssignment -RoleDefinitionName Contributor -ServicePrincipalName $ServicePrincipal.ApplicationId -Scope $Scope | Write-Verbose -ErrorAction SilentlyContinue\r\n    $NewRole = Get-AzureRMRoleAssignment -ObjectId $ServicePrincipal.Id -ErrorAction SilentlyContinue\r\n    $Retries++;\r\n }\r\n```\r\n\r\n有关该脚本的几个注意事项：\r\n\r\n* 若要向标识授予对默认订阅的访问权限，不需要提供 ResourceGroup 或 SubscriptionId 参数。\r\n* 仅当希望将角色分配范围限定为某个资源组时指定 ResourceGroup 参数。\r\n* 在此示例中，将服务主体添加到“参与者”角色。 对于其他角色，请参阅 [RBAC：内置角色](../active-directory/role-based-access-built-in-roles.md)。\r\n* 该脚本休眠 15 秒，让新的服务主体有时间传遍 Azure Active Directory。 如果脚本等待时长不足，会显示错误：“PrincipalNotFound: 主体 {ID} 不存在于目录中”。\r\n* 如果需要向服务主体授予对其他订阅或资源组的访问权限，请使用不同的范围再次运行 `New-AzureRMRoleAssignment` cmdlet。\r\n\r\n如果未使用 **Windows 10 或 Windows Server 2016 Technical Preview**，需要从 Microsoft 脚本中心下载 [自签名证书生成器](https://gallery.technet.microsoft.com/scriptcenter/Self-signed-certificate-5920a7c6/) 。 解压其内容，并导入所需的 cmdlet。\r\n\r\n```powershell  \r\n# Only run if you could not use New-SelfSignedCertificate\r\nImport-Module -Name c:\\ExtractedModule\\New-SelfSignedCertificateEx.ps1\r\n```\r\n\r\n在脚本中替换以下两行代码以生成证书。\r\n\r\n```powershell\r\nNew-SelfSignedCertificateEx  -StoreLocation CurrentUser -StoreName My -Subject \"CN=exampleapp\" -KeySpec \"Exchange\" -FriendlyName \"exampleapp\"\r\n$cert = Get-ChildItem -path Cert:\\CurrentUser\\my | where {$PSitem.Subject -eq 'CN=exampleapp' }\r\n```\r\n\r\n### <a name=\"provide-certificate-through-automated-powershell-script\"></a>通过自动执行的 PowerShell 脚本提供证书\r\n以服务主体方式登录时，需提供 AD 应用所在目录的租户 ID。 租户是 Azure Active Directory 的实例。 如果只有一个订阅，可以使用：\r\n\r\n```powershell\r\nParam (\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $CertSubject,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $ApplicationId,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $TenantId\r\n )\r\n\r\n $Thumbprint = (Get-ChildItem cert:\\CurrentUser\\My\\ | Where-Object {$_.Subject -match $CertSubject }).Thumbprint\r\n Login-AzureRmAccount -EnvironmentName AzureChinaCloud -ServicePrincipal -CertificateThumbprint $Thumbprint -ApplicationId $ApplicationId -TenantId $TenantId\r\n```\r\n\r\n应用程序 ID 和租户 ID 不敏感，因此可以直接将它们嵌入脚本中。 如果需要检索租户 ID，请使用：\r\n\r\n```powershell\r\n(Get-AzureRmSubscription -SubscriptionName \"Contoso Default\").TenantId\r\n```\r\n\r\n如果需要检索应用程序 ID，请使用：\r\n\r\n```powershell\r\n(Get-AzureRmADApplication -DisplayNameStartWith {display-name}).ApplicationId\r\n```\r\n\r\n## <a name=\"create-service-principal-with-certificate-from-certificate-authority\"></a>使用证书颁发机构提供的证书创建服务主体\r\n若要使用证书颁发机构颁发的证书创建服务主体，请使用以下脚本：\r\n\r\n```powershell\r\nParam (\r\n [Parameter(Mandatory=$true)]\r\n [String] $ApplicationDisplayName,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $SubscriptionId,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $CertPath,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $CertPlainPassword\r\n )\r\n\r\n Login-AzureRmAccount -EnvironmentName AzureChinaCloud\r\n Import-Module AzureRM.Resources\r\n Set-AzureRmContext -SubscriptionId $SubscriptionId\r\n\r\n $CertPassword = ConvertTo-SecureString $CertPlainPassword -AsPlainText -Force\r\n\r\n $PFXCert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2 -ArgumentList @($CertPath, $CertPassword)\r\n $KeyValue = [System.Convert]::ToBase64String($PFXCert.GetRawCertData())\r\n\r\n $ServicePrincipal = New-AzureRMADServicePrincipal -DisplayName $ApplicationDisplayName\r\n New-AzureRmADSpCredential -ObjectId $ServicePrincipal.Id -CertValue $KeyValue -StartDate $PFXCert.NotBefore -EndDate $PFXCert.NotAfter\r\n Get-AzureRmADServicePrincipal -ObjectId $ServicePrincipal.Id \r\n\r\n $NewRole = $null\r\n $Retries = 0;\r\n While ($NewRole -eq $null -and $Retries -le 6)\r\n {\r\n    # Sleep here for a few seconds to allow the service principal application to become active (should only take a couple of seconds normally)\r\n    Sleep 15\r\n    New-AzureRMRoleAssignment -RoleDefinitionName Contributor -ServicePrincipalName $ServicePrincipal.ApplicationId | Write-Verbose -ErrorAction SilentlyContinue\r\n    $NewRole = Get-AzureRMRoleAssignment -ObjectId $ServicePrincipal.Id -ErrorAction SilentlyContinue\r\n    $Retries++;\r\n }\r\n\r\n $NewRole\r\n```\r\n\r\n有关该脚本的几个注意事项：\r\n\r\n* 访问范围限定于订阅。\r\n* 在此示例中，将服务主体添加到“参与者”角色。 对于其他角色，请参阅 [RBAC：内置角色](../active-directory/role-based-access-built-in-roles.md)。\r\n* 该脚本休眠 15 秒，让新的服务主体有时间传遍 Azure Active Directory。 如果脚本等待时长不足，会显示错误：“PrincipalNotFound: 主体 {ID} 不存在于目录中”。\r\n* 如果需要向服务主体授予对其他订阅或资源组的访问权限，请使用不同的范围再次运行 `New-AzureRMRoleAssignment` cmdlet。\r\n\r\n### <a name=\"provide-certificate-through-automated-powershell-script\"></a>通过自动执行的 PowerShell 脚本提供证书\r\n以服务主体方式登录时，需提供 AD 应用所在目录的租户 ID。 租户是 Azure Active Directory 的实例。\r\n\r\n```powershell\r\nParam (\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $CertPath,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $CertPlainPassword,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $ApplicationId,\r\n\r\n [Parameter(Mandatory=$true)]\r\n [String] $TenantId\r\n )\r\n\r\n $CertPassword = ConvertTo-SecureString $CertPlainPassword -AsPlainText -Force\r\n $PFXCert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2 -ArgumentList @($CertPath, $CertPassword)\r\n $Thumbprint = $PFXCert.Thumbprint\r\n\r\n Login-AzureRmAccount -EnvironmentName AzureChinaCloud -ServicePrincipal -CertificateThumbprint $Thumbprint -ApplicationId $ApplicationId -TenantId $TenantId\r\n```\r\n\r\n应用程序 ID 和租户 ID 不敏感，因此可以直接将它们嵌入脚本中。 如果需要检索租户 ID，请使用：\r\n\r\n```powershell\r\n(Get-AzureRmSubscription -SubscriptionName \"Contoso Default\").TenantId\r\n```\r\n\r\n如果需要检索应用程序 ID，请使用：\r\n\r\n```powershell\r\n(Get-AzureRmADApplication -DisplayNameStartWith {display-name}).ApplicationId\r\n```\r\n\r\n## <a name=\"change-credentials\"></a>更改凭据\r\n\r\n若要更改 AD 应用的凭据（为了保障安全或由于凭据过期的缘故），请使用 [Remove-AzureRmADAppCredential](https://docs.microsoft.com/powershell/resourcemanager/azurerm.resources/v3.3.0/remove-azurermadappcredential) 和 [New-AzureRmADAppCredential](https://docs.microsoft.com/powershell/module/azurerm.resources/new-azurermadappcredential) cmdlet。\r\n\r\n若要删除应用程序的所有凭据，请使用：\r\n\r\n```powershell\r\nRemove-AzureRmADAppCredential -ApplicationId 8bc80782-a916-47c8-a47e-4d76ed755275 -All\r\n```\r\n\r\n若要添加密码，请使用：\r\n\r\n```powershell\r\nNew-AzureRmADAppCredential -ApplicationId 8bc80782-a916-47c8-a47e-4d76ed755275 -Password p@ssword!\r\n```\r\n\r\n若要添加证书值，请按本主题所示创建自签名证书。 然后，使用：\r\n\r\n```powershell\r\nNew-AzureRmADAppCredential -ApplicationId 8bc80782-a916-47c8-a47e-4d76ed755275 -CertValue $keyValue -EndDate $cert.NotAfter -StartDate $cert.NotBefore\r\n```\r\n\r\n## <a name=\"save-access-token-to-simplify-log-in\"></a>保存访问令牌来简化登录\r\n若要避免每次登录时都需要提供服务主体凭据，可保存访问令牌。\r\n\r\n若要在以后的会话中使用当前访问令牌，请保存该配置文件。\r\n\r\n```powershell\r\nSave-AzureRmProfile -Path c:\\Users\\exampleuser\\profile\\exampleSP.json\r\n```\r\n\r\n打开该配置文件，并检查其内容。 请注意，它包含访问令牌。 无需再次手动登录，只需加载配置文件。\r\n\r\n```powershell\r\nSelect-AzureRmProfile -Path c:\\Users\\exampleuser\\profile\\exampleSP.json\r\n```\r\n\r\n> [!NOTE]\r\n> 访问令牌会过期，因此使用保存的配置文件仅适合在令牌有效期间使用。\r\n>  \r\n\r\n也可从要登录的 PowerShell 调用 REST 操作。 可以从身份验证响应中检索访问令牌，将其用于其他操作。 若要通过示例来了解如何通过调用 REST 操作来检索访问令牌，请参阅[生成访问令牌](resource-manager-rest-api.md#generating-an-access-token)。\r\n\r\n## <a name=\"debug\"></a>调试\r\n\r\n创建服务主体时，可能会遇到以下错误：\r\n\r\n* “Authentication_Unauthorized”或“在上下文中找不到订阅”。 - 如果帐户不具有在 Azure Active Directory 上注册应用[所需的权限](#required-permissions)，会收到此错误。 通常，当仅 Azure Active Directory 中的管理员用户可注册应用且帐户不是管理员帐户时，会看到此错误。可要求管理员分配管理员角色，或者允许用户注册应用。\r\n\r\n* 帐户“无权对作用域 '/subscriptions/{guid}' 执行 'Microsoft.Authorization/roleAssignments/write' 操作。”- 当帐户没有足够权限，无法为标识分配角色时，会出现此错误。 可要求订阅管理员将你添加到“用户访问管理员”角色。\r\n\r\n## <a name=\"sample-applications\"></a>示例应用程序\r\n有关在不同平台上通过应用程序登录的信息，请参阅：\r\n\r\n* [.NET](https://docs.microsoft.com/dotnet/azure/dotnet-sdk-azure-authenticate?view=azure-dotnet)\r\n* [Java](https://docs.azure.cn/java/java-sdk-azure-authenticate)\r\n* [Node.js](/nodejs/azure/node-sdk-azure-get-started?view=azure-node-2.0.0)\r\n* [Python](https://docs.microsoft.com/python/azure/python-sdk-azure-authenticate?view=azure-python)\r\n* [Ruby](https://github.com/Azure-Samples/resource-manager-ruby-resources-and-groups/)\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n* 有关将应用程序集成到 Azure 以管理资源的详细步骤，请参阅[使用 Azure 资源管理器 API 进行授权的开发人员指南](resource-manager-api-authentication.md)。\r\n* 有关应用程序和服务主体的详细说明，请参阅 [Application Objects and Service Principal Objects](../active-directory/develop/active-directory-application-objects.md)（应用程序对象和服务主体对象）。 \r\n* 有关 Azure Active Directory 身份验证的详细信息，请参阅 [Authentication Scenarios for Azure AD](../active-directory/develop/active-directory-authentication-scenarios.md)（Azure AD 的身份验证方案）。\r\n<!-- Notice: active-directory/develop/ is correct-->\r\n* 有关可对用户授予或拒绝的可用操作的列表，请参阅 [Azure 资源管理器资源提供程序操作](../active-directory/role-based-access-control-resource-provider-operations.md)。\r\n\r\n<!--Update_Description: wording update， update link-->"}