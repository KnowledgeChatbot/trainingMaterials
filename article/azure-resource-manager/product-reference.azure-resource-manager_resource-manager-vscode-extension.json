{"Title":"带 VS Code 扩展的 Azure 资源管理器模板","Description":"使用可在资源管理器模板上运行的 Azure 资源管理器工具扩展。","Content":"# <a name=\"use-visual-studio-code-extension-to-create-azure-resource-manager-template\"></a>使用 Visual Studio Code 扩展创建 Azure 资源管理器模板\r\n本文介绍在 Visual Studio Code 中安装和使用 Azure 资源管理器工具扩展有哪些好处。 可以在 VS Code 中创建不带扩展的资源管理器模板，但是该扩展提供自动完成选项，可以简化模板开发。 它会为用户建议可以在模板中使用的模板函数、参数和变量。\r\n\r\n若要完成本文的操作，需安装 [Visual Studio Code](https://code.visualstudio.com/)。\r\n\r\n若要了解与部署和管理 Azure 解决方案相关联的概念，请参阅 [Azure Resource Manager 概述](resource-group-overview.md)。\r\n\r\n## <a name=\"create-the-template\"></a>创建模板\r\n\r\n本文基于在[创建和部署第一个 Azure 资源管理器模板](resource-manager-create-first-template.md)中创建的模板。 如果已有该模板，则可跳过此部分。\r\n\r\n1. 如需创建该模板，请启动 VS Code。 选择“文件” > “新建文件”。 \r\n\r\n    ![新建文件](./media/resource-manager-vscode-extension/new-file.png)\r\n\r\n2. 将以下 JSON 语法复制并粘贴到该文件中：\r\n\r\n   ```json\r\n   {\r\n     \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n     \"contentVersion\": \"1.0.0.0\",\r\n     \"parameters\": {\r\n       \"storageSKU\": {\r\n         \"type\": \"string\",\r\n         \"allowedValues\": [\r\n           \"Standard_LRS\",\r\n           \"Standard_ZRS\",\r\n           \"Standard_GRS\",\r\n           \"Standard_RAGRS\",\r\n           \"Premium_LRS\"\r\n         ],\r\n         \"defaultValue\": \"Standard_LRS\",\r\n         \"metadata\": {\r\n           \"description\": \"The type of replication to use for the storage account.\"\r\n         }\r\n       },   \r\n       \"storageNamePrefix\": {\r\n         \"type\": \"string\",\r\n         \"maxLength\": 11,\r\n         \"defaultValue\": \"storage\",\r\n         \"metadata\": {\r\n           \"description\": \"The value to use for starting the storage account name. Use only lowercase letters and numbers.\"\r\n         }\r\n       }\r\n     },\r\n     \"variables\": {\r\n       \"storageName\": \"[concat(toLower(parameters('storageNamePrefix')), uniqueString(resourceGroup().id))]\"\r\n     },\r\n     \"resources\": [\r\n       {\r\n         \"name\": \"[variables('storageName')]\",\r\n         \"type\": \"Microsoft.Storage/storageAccounts\",\r\n         \"apiVersion\": \"2016-01-01\",\r\n         \"sku\": {\r\n           \"name\": \"[parameters('storageSKU')]\"\r\n         },\r\n         \"kind\": \"Storage\",\r\n         \"location\": \"[resourceGroup().location]\",\r\n         \"tags\": {},\r\n         \"properties\": {\r\n           \"encryption\":{\r\n             \"services\":{\r\n               \"blob\":{\r\n                 \"enabled\":true\r\n               }\r\n             },\r\n             \"keySource\":\"Microsoft.Storage\"\r\n           }\r\n         }\r\n       }\r\n     ],\r\n     \"outputs\": {  }\r\n   }\r\n   ```\r\n\r\n3. 在本地文件夹中将该文件另存为 azuredeploy.json。\r\n\r\n    ![保存模板](./media/resource-manager-vscode-extension/save-template.png)\r\n\r\n## <a name=\"install-the-extension\"></a>安装扩展\r\n\r\n1. 在 VS Code 中选择“扩展”。\r\n\r\n    ![选择扩展](./media/resource-manager-vscode-extension/select-extensions.png)\r\n\r\n2. 搜索“Azure 资源管理器工具”，然后选择“安装”。\r\n\r\n    ![安装扩展](./media/resource-manager-vscode-extension/install-extension.png)\r\n\r\n3. 若要完成扩展的安装，请选择“重新加载”。\r\n\r\n## <a name=\"edit-the-template\"></a>编辑模板\r\n\r\n1. 打开 azuredeploy.json 文件。\r\n\r\n2. 扩展会检索所有可用的[模板函数](resource-group-template-functions.md)， 并且会读取在模板中定义的参数和变量。 若要查看此功能，请向 outputs 节添加两个值。 在模板中，将 outputs 节替换为：\r\n\r\n   ```json\r\n   \"outputs\": { \r\n       \"groupLocation\": {\r\n         \"type\": \"string\",\r\n         \"value\": \"\"\r\n       },\r\n       \"storageUri\": {\r\n         \"type\": \"string\",\r\n         \"value\": \"\"\r\n       }\r\n   }\r\n   ```\r\n\r\n3. 将光标置于 groupLocation 中值的引号内。 键入左方括号 (`[`)。 注意，扩展会立即建议可用的模板函数。\r\n\r\n    ![显示可用函数](./media/resource-manager-vscode-extension/available-functions.png)\r\n\r\n4. 开始键入 resourceGroup。 显示 `resourceGroup()` 函数时，按 Tab 或 Enter。\r\n\r\n    ![选择 resourceGroup 函数](./media/resource-manager-vscode-extension/show-resourcegroup.png)\r\n\r\n5. 该扩展会填充函数语法。 [resourceGroup](resource-group-template-functions-resource.md#resourcegroup) 函数不接受参数。 在右圆括号后添加句点。 该扩展提供的属性适用于 `resourceGroup()` 函数返回的对象。 选择 `location`。\r\n\r\n    ![选择属性](./media/resource-manager-vscode-extension/resourcegroup-properties.png)\r\n\r\n6. 在 location 后添加右方括号。\r\n\r\n   ```json\r\n   \"outputs\": { \r\n       \"groupLocation\": {\r\n         \"type\": \"string\",\r\n         \"value\": \"[resourceGroup().location]\"\r\n       },\r\n       \"storageUri\": {\r\n         \"type\": \"string\",\r\n         \"value\": \"\"\r\n       }\r\n   }\r\n   ```\r\n\r\n7. 现在，请将光标置于 storageUri 的引号内。 再次键入左方括号。 开始键入 reference。 选定该函数后，按 Tab 或 Enter。\r\n\r\n    ![选择 reference](./media/resource-manager-vscode-extension/add-reference.png)\r\n\r\n8. [reference](resource-group-template-functions-resource.md#reference) 接受资源 ID 或资源名称作为参数。 变量中已经有了存储帐户的名称。 键入 var，然后选择 Ctrl+space。 该扩展会建议 variables 函数。\r\n\r\n    ![选择变量](./media/resource-manager-vscode-extension/add-variable.png)\r\n\r\n    按 Tab 或 Enter。\r\n\r\n9. [variables](resource-group-template-functions-deployment.md#variables) 函数需要变量的名称。 在圆括号内添加单引号。 该扩展提供在模板中定义的变量的名称。\r\n\r\n    ![显示变量](./media/resource-manager-vscode-extension/show-variables.png) \r\n\r\n10. 选择 storageName 变量。 添加右方括号。 以下示例显示 outputs 节：\r\n\r\n   ```json\r\n   \"outputs\": { \r\n       \"groupLocation\": {\r\n         \"type\": \"string\",\r\n         \"value\": \"[resourceGroup().location]\"\r\n       },\r\n       \"storageUri\": {\r\n         \"type\": \"string\",\r\n         \"value\": \"[reference(variables('storageName'))]\"\r\n       }\r\n   }\r\n   ```\r\n\r\n最终模板为：\r\n\r\n```json\r\n{\r\n  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"storageSKU\": {\r\n      \"type\": \"string\",\r\n      \"allowedValues\": [\r\n        \"Standard_LRS\",\r\n        \"Standard_ZRS\",\r\n        \"Standard_GRS\",\r\n        \"Standard_RAGRS\",\r\n        \"Premium_LRS\"\r\n      ],\r\n      \"defaultValue\": \"Standard_LRS\",\r\n      \"metadata\": {\r\n        \"description\": \"The type of replication to use for the storage account.\"\r\n      }\r\n    },   \r\n    \"storageNamePrefix\": {\r\n      \"type\": \"string\",\r\n      \"maxLength\": 11,\r\n      \"defaultValue\": \"storage\",\r\n      \"metadata\": {\r\n        \"description\": \"The value to use for starting the storage account name. Use only lowercase letters and numbers.\"\r\n      }\r\n    }\r\n  },\r\n  \"variables\": {\r\n    \"storageName\": \"[concat(toLower(parameters('storageNamePrefix')), uniqueString(resourceGroup().id))]\"\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"name\": \"[variables('storageName')]\",\r\n      \"type\": \"Microsoft.Storage/storageAccounts\",\r\n      \"apiVersion\": \"2016-01-01\",\r\n      \"sku\": {\r\n        \"name\": \"[parameters('storageSKU')]\"\r\n      },\r\n      \"kind\": \"Storage\",\r\n      \"location\": \"[resourceGroup().location]\",\r\n      \"tags\": {},\r\n      \"properties\": {\r\n        \"encryption\":{\r\n          \"services\":{\r\n            \"blob\":{\r\n              \"enabled\":true\r\n            }\r\n          },\r\n          \"keySource\":\"Microsoft.Storage\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": { \r\n    \"groupLocation\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[resourceGroup().location]\"\r\n    },\r\n    \"storageUri\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[reference(variables('storageName'))]\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## <a name=\"deploy-template\"></a>部署模板\r\n\r\n已做好部署此模板的准备。 请使用 PowerShell 或 Azure CLI 创建一个资源组。 然后，将存储帐户部署到该资源组。\r\n\r\n* 对于 PowerShell，请在包含模板的文件夹中使用以下命令：\r\n\r\n   ```powershell\r\n   Login-AzureRmAccount -EnvironmentName AzureChinaCloud\r\n\r\n   New-AzureRmResourceGroup -Name examplegroup -Location \"China East\"\r\n   New-AzureRmResourceGroupDeployment -ResourceGroupName examplegroup -TemplateFile azuredeploy.json\r\n   ```\r\n\r\n* 若要在本地安装 Azure CLI，请在包含模板的文件夹中使用以下命令：\r\n\r\n   ```azurecli\r\n   az cloud set -n AzureChinaCloud\r\naz login\r\n#az cloud set -n AzureCloud\r\n#return to global azure\r\n\r\n   az group create --name examplegroup --location \"China East\"\r\n   az group deployment create --resource-group examplegroup --template-file azuredeploy.json\r\n   ```\r\n\r\n当部署完成后，会返回输出值。\r\n\r\n## <a name=\"clean-up-resources\"></a>清理资源\r\n\r\n不再需要时，请通过删除资源组来清理部署的资源。\r\n\r\n对于 PowerShell，请使用：\r\n\r\n```powershell\r\nRemove-AzureRmResourceGroup -Name examplegroup\r\n```\r\n\r\n对于 Azure CLI，请使用：\r\n\r\n```azurecli\r\naz group delete --name examplegroup\r\n```\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n* 若要详细了解模板的结构，请参阅 [Authoring Azure Resource Manager templates](resource-group-authoring-templates.md)（创作 Azure Resource Manager 模板）。\r\n<!-- Not Avaialble (/templates/microsoft.storage/storageaccounts).-->\r\n* 若要查看许多不同类型的解决方案的完整模型，请参阅 [Azure Quickstart Templates](https://github.com/Azure/azure-quickstart-templates/)（Azure 快速入门模板）。\r\n\r\n<!--Update_Description: new articles about VS code extension in Azure Resource Manager -->\r\n"}