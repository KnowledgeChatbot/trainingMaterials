{"Title":"创建第一个 Azure Resource Manager 模板","Description":"分步指南：创建第一个 Azure Resource Manager 模板。 本指南介绍如何使用存储帐户的模板参考来创建模板。","Content":"# <a name=\"create-and-deploy-your-first-azure-resource-manager-template\"></a>创建和部署第一个 Azure 资源管理器模板\r\n本主题介绍如何通过相关步骤创建第一个 Azure Resource Manager 模板。 Resource Manager 模板为 JSON 文件，用于定义针对解决方案进行部署时所需的资源。 若要了解与部署和管理 Azure 解决方案相关联的概念，请参阅 [Azure Resource Manager 概述](resource-group-overview.md)。 如果有现成的资源，需要为这些资源获取模板，请参阅[从现有资源导出 Azure Resource Manager 模板](resource-manager-export-template.md)。\r\n\r\n若要创建和修改模板，需要 JSON 编辑器。 [Visual Studio Code](https://code.visualstudio.com/) 是轻量型开源跨平台代码编辑器。 强烈建议使用 Visual Studio Code 来创建资源管理器模板。 本文假定你使用 VS Code。 如果有其他 JSON 编辑器（例如 Visual Studio），可以使用该编辑器。\r\n\r\n## <a name=\"prerequisites\"></a>先决条件\r\n\r\n* Visual Studio Code。 根据需要从 [https://code.visualstudio.com/](https://code.visualstudio.com/) 安装。\r\n* Azure 订阅。 如果没有 Azure 订阅，可在开始前创建一个[试用帐户](https://www.azure.cn/pricing/1rmb-trial/)。\r\n\r\n## <a name=\"create-template\"></a>创建模板\r\n\r\n一开始请使用简单的模板将存储帐户部署到订阅。\r\n\r\n1. 选择“文件” > “新建文件”。 \r\n\r\n   ![新建文件](./media/resource-manager-create-first-template/new-file.png)\r\n\r\n2. 将以下 JSON 语法复制并粘贴到文件中：\r\n\r\n   ```json\r\n   {\r\n     \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n     \"contentVersion\": \"1.0.0.0\",\r\n     \"parameters\": {\r\n     },\r\n     \"variables\": {\r\n     },\r\n     \"resources\": [\r\n       {\r\n         \"name\": \"[concat('storage', uniqueString(resourceGroup().id))]\",\r\n         \"type\": \"Microsoft.Storage/storageAccounts\",\r\n         \"apiVersion\": \"2016-01-01\",\r\n         \"sku\": {\r\n           \"name\": \"Standard_LRS\"\r\n         },\r\n         \"kind\": \"Storage\",\r\n         \"location\": \"China East\",\r\n         \"tags\": {},\r\n         \"properties\": {}\r\n       }\r\n     ],\r\n     \"outputs\": {  }\r\n   }\r\n   ```\r\n\r\n   存储帐户名称有多种限制，因此难以设置。 该名称必须为 3 到 24 个字符，只能使用数字和小写字母，而且必需唯一。 前述模板使用 [uniqueString](resource-group-template-functions-string.md#uniquestring) 函数生成哈希值。 此模板通过添加前缀 storage 扩展了该哈希值的含义。 \r\n\r\n3. 在本地文件夹中将该文件另存为 azuredeploy.json。\r\n\r\n   ![保存模板](./media/resource-manager-create-first-template/save-template.png)\r\n\r\n## <a name=\"deploy-template\"></a>部署模板\r\n\r\n已做好部署此模板的准备。 请使用 PowerShell 或 Azure CLI 创建一个资源组。 然后，将存储帐户部署到该资源组。\r\n\r\n* 对于 PowerShell，请在包含模板的文件夹中使用以下命令：\r\n\r\n   ```powershell\r\n   Login-AzureRmAccount -EnvironmentName AzureChinaCloud\r\n\r\n   New-AzureRmResourceGroup -Name examplegroup -Location \"China East\"\r\n   New-AzureRmResourceGroupDeployment -ResourceGroupName examplegroup -TemplateFile azuredeploy.json\r\n   ```\r\n\r\n* 若要在本地安装 Azure CLI，请在包含模板的文件夹中使用以下命令：\r\n\r\n    ```azurecli\r\n    az cloud set -n AzureChinaCloud\r\n    az login\r\n    #az cloud set -n AzureCloud\r\n    #return to global azure\r\n\r\n    az group create --name examplegroup --location \"China East\"\r\n    az group deployment create --resource-group examplegroup --template-file azuredeploy.json\r\n    ```\r\n\r\n部署完成后，存储帐户就会存在于资源组中。\r\n\r\n<!-- Not Available ## Deploy template from Cloud Shell -->\r\n## <a name=\"customize-the-template\"></a>自定义模板\r\n\r\n该模板可以正常使用，但不灵活。 它始终将本地冗余存储部署到中国东部。 名称始终为 *storage* 后跟哈希值。 若要允许将模板用于不同的方案，请向模板添加参数。\r\n\r\n以下示例显示带两个参数的 parameters 节。 第一个参数 `storageSKU` 用于指定冗余类型。 它将可以传入的值限制为适用于存储帐户的值。 它还指定默认值。 第二个参数 `storageNamePrefix` 设置为最多允许 11 个字符。 它指定默认值。\r\n\r\n```json\r\n\"parameters\": {\r\n  \"storageSKU\": {\r\n    \"type\": \"string\",\r\n    \"allowedValues\": [\r\n      \"Standard_LRS\",\r\n      \"Standard_ZRS\",\r\n      \"Standard_GRS\",\r\n      \"Standard_RAGRS\",\r\n      \"Premium_LRS\"\r\n    ],\r\n    \"defaultValue\": \"Standard_LRS\",\r\n    \"metadata\": {\r\n      \"description\": \"The type of replication to use for the storage account.\"\r\n    }\r\n  },\r\n  \"storageNamePrefix\": {\r\n    \"type\": \"string\",\r\n    \"maxLength\": 11,\r\n    \"defaultValue\": \"storage\",\r\n    \"metadata\": {\r\n      \"description\": \"The value to use for starting the storage account name. Use only lowercase letters and numbers.\"\r\n    }\r\n  }\r\n},\r\n```\r\n\r\n在 variables 节，请添加名为 `storageName` 的变量。 它组合了来自变量的前缀值和来自 [uniqueString](resource-group-template-functions-string.md#uniquestring) 函数的哈希值。 它使用 [toLower](resource-group-template-functions-string.md#tolower) 函数将所有字符转换为小写。\r\n\r\n```json\r\n\"variables\": {\r\n  \"storageName\": \"[concat(toLower(parameters('storageNamePrefix')), uniqueString(resourceGroup().id))]\"\r\n},\r\n```\r\n\r\n若要将这些新值用于存储帐户，请更改资源定义：\r\n\r\n```json\r\n\"resources\": [\r\n  {\r\n    \"name\": \"[variables('storageName')]\",\r\n    \"type\": \"Microsoft.Storage/storageAccounts\",\r\n    \"apiVersion\": \"2016-01-01\",\r\n    \"sku\": {\r\n      \"name\": \"[parameters('storageSKU')]\"\r\n    },\r\n    \"kind\": \"Storage\",\r\n    \"location\": \"[resourceGroup().location]\",\r\n    \"tags\": {},\r\n    \"properties\": {}\r\n  }\r\n],\r\n```\r\n\r\n请注意，存储帐户的名称现在设置为已添加的变量。 SKU 名称设置为参数的值。 位置设置为资源组所在的位置。\r\n\r\n保存文件。 \r\n\r\n模板现在如下所示：\r\n\r\n```json\r\n{\r\n  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"storageSKU\": {\r\n      \"type\": \"string\",\r\n      \"allowedValues\": [\r\n        \"Standard_LRS\",\r\n        \"Standard_ZRS\",\r\n        \"Standard_GRS\",\r\n        \"Standard_RAGRS\",\r\n        \"Premium_LRS\"\r\n      ],\r\n      \"defaultValue\": \"Standard_LRS\",\r\n      \"metadata\": {\r\n        \"description\": \"The type of replication to use for the storage account.\"\r\n      }\r\n    },   \r\n    \"storageNamePrefix\": {\r\n      \"type\": \"string\",\r\n      \"maxLength\": 11,\r\n      \"defaultValue\": \"storage\",\r\n      \"metadata\": {\r\n        \"description\": \"The value to use for starting the storage account name. Use only lowercase letters and numbers.\"\r\n      }\r\n    }\r\n  },\r\n  \"variables\": {\r\n    \"storageName\": \"[concat(toLower(parameters('storageNamePrefix')), uniqueString(resourceGroup().id))]\"\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"name\": \"[variables('storageName')]\",\r\n      \"type\": \"Microsoft.Storage/storageAccounts\",\r\n      \"apiVersion\": \"2016-01-01\",\r\n      \"sku\": {\r\n        \"name\": \"[parameters('storageSKU')]\"\r\n      },\r\n      \"kind\": \"Storage\",\r\n      \"location\": \"[resourceGroup().location]\",\r\n      \"tags\": {},\r\n      \"properties\": {}\r\n    }\r\n  ],\r\n  \"outputs\": {  }\r\n}\r\n```\r\n\r\n## <a name=\"redeploy-template\"></a>重新部署模板\r\n\r\n请使用不同的值重新部署模板。\r\n\r\n对于 PowerShell，请使用：\r\n\r\n```powershell\r\nNew-AzureRmResourceGroupDeployment -ResourceGroupName examplegroup -TemplateFile azuredeploy.json -storageNamePrefix newstore -storageSKU Standard_RAGRS\r\n```\r\n\r\n对于 Azure CLI，请使用：\r\n\r\n```azurecli\r\naz group deployment create --resource-group examplegroup --template-file azuredeploy.json --parameters storageSKU=Standard_RAGRS storageNamePrefix=newstore\r\n```\r\n\r\n对于 Cloud Shell，请将更改的模板上传到文件共享。 覆盖现有文件。 然后，使用以下命令：\r\n\r\n```azurecli\r\naz group deployment create --resource-group examplegroup --template-file clouddrive/templates/azuredeploy.json --parameters storageSKU=Standard_RAGRS storageNamePrefix=newstore\r\n```\r\n\r\n## <a name=\"use-autocomplete\"></a>使用自动完成功能\r\n\r\n目前为止，你在模板上所做的工作只是从本文复制并粘贴 JSON。 但在开发自己的模板时，需查找并指定适用于资源类型的属性和值。 VS Code 读取资源类型的架构，并建议属性和值。 若要查看自动完成功能，请转到模板的属性元素处，然后添加新的一行。 键入一个引号，此时你会注意到，VS Code 立即建议可以在属性元素中使用的名称。\r\n\r\n![显示可用属性](./media/resource-manager-create-first-template/show-properties.png)\r\n\r\n选择“加密”。 键入冒号 (:)，VS Code 会建议添加新对象。\r\n\r\n![添加对象](./media/resource-manager-create-first-template/add-object.png)\r\n\r\n若要添加对象，请按 Tab 或 Enter。\r\n\r\n再次键入引号，此时会看到 VS Code 建议适用于加密的属性。\r\n\r\n![显示加密属性](./media/resource-manager-create-first-template/show-encryption-properties.png)\r\n\r\n选择“服务”，然后根据 VS Code 扩展继续添加值，直到：\r\n\r\n```json\r\n\"properties\": {\r\n    \"encryption\":{\r\n        \"services\":{\r\n            \"blob\":{\r\n              \"enabled\":true\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n为存储帐户启用 Blob 加密。 但是，VS Code 发现了一个问题。 请注意，加密有一个警告。\r\n\r\n![加密警告](./media/resource-manager-create-first-template/encryption-warning.png)\r\n\r\n若要查看警告，请将鼠标悬停在绿线上。\r\n\r\n![缺少属性](./media/resource-manager-create-first-template/missing-property.png)\r\n\r\n可以看到，加密元素需要 keySource 属性。 在服务对象后添加一个逗号，然后添加 keySource 属性。 VS Code 建议使用 \"Microsoft.Storage\" 作为有效值。 完成后，属性元素为：\r\n\r\n```json\r\n\"properties\": {\r\n    \"encryption\":{\r\n        \"services\":{\r\n            \"blob\":{\r\n              \"enabled\":true\r\n            }\r\n        },\r\n        \"keySource\":\"Microsoft.Storage\"\r\n    }\r\n}\r\n```\r\n\r\n最终模板为：\r\n\r\n```json\r\n{\r\n  \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"storageSKU\": {\r\n      \"type\": \"string\",\r\n      \"allowedValues\": [\r\n        \"Standard_LRS\",\r\n        \"Standard_ZRS\",\r\n        \"Standard_GRS\",\r\n        \"Standard_RAGRS\",\r\n        \"Premium_LRS\"\r\n      ],\r\n      \"defaultValue\": \"Standard_LRS\",\r\n      \"metadata\": {\r\n        \"description\": \"The type of replication to use for the storage account.\"\r\n      }\r\n    },   \r\n    \"storageNamePrefix\": {\r\n      \"type\": \"string\",\r\n      \"maxLength\": 11,\r\n      \"defaultValue\": \"storage\",\r\n      \"metadata\": {\r\n        \"description\": \"The value to use for starting the storage account name. Use only lowercase letters and numbers.\"\r\n      }\r\n    }\r\n  },\r\n  \"variables\": {\r\n    \"storageName\": \"[concat(toLower(parameters('storageNamePrefix')), uniqueString(resourceGroup().id))]\"\r\n  },\r\n  \"resources\": [\r\n    {\r\n      \"name\": \"[variables('storageName')]\",\r\n      \"type\": \"Microsoft.Storage/storageAccounts\",\r\n      \"apiVersion\": \"2016-01-01\",\r\n      \"sku\": {\r\n        \"name\": \"[parameters('storageSKU')]\"\r\n      },\r\n      \"kind\": \"Storage\",\r\n      \"location\": \"[resourceGroup().location]\",\r\n      \"tags\": {},\r\n      \"properties\": {\r\n        \"encryption\":{\r\n          \"services\":{\r\n            \"blob\":{\r\n              \"enabled\":true\r\n            }\r\n          },\r\n          \"keySource\":\"Microsoft.Storage\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"outputs\": {}\r\n}\r\n```\r\n\r\n## <a name=\"deploy-encrypted-storage\"></a>部署加密的存储\r\n\r\n再次部署模板并提供新的存储帐户名称。\r\n\r\n对于 PowerShell，请使用：\r\n\r\n```powershell\r\nNew-AzureRmResourceGroupDeployment -ResourceGroupName examplegroup -TemplateFile azuredeploy.json -storageNamePrefix storesecure\r\n```\r\n\r\n对于 Azure CLI，请使用：\r\n\r\n```azurecli\r\naz group deployment create --resource-group examplegroup --template-file azuredeploy.json --parameters storageNamePrefix=storesecure\r\n```\r\n\r\n对于 Cloud Shell，请将更改的模板上传到文件共享。 覆盖现有文件。 然后，使用以下命令：\r\n\r\n```azurecli\r\naz group deployment create --resource-group examplegroup --template-file clouddrive/templates/azuredeploy.json --parameters storageNamePrefix=storesecure\r\n```\r\n\r\n## <a name=\"clean-up-resources\"></a>清理资源\r\n\r\n不再需要时，请通过删除资源组来清理部署的资源。\r\n\r\n对于 PowerShell，请使用：\r\n\r\n```powershell\r\nRemove-AzureRmResourceGroup -Name examplegroup\r\n```\r\n\r\n对于 Azure CLI，请使用：\r\n\r\n```azurecli\r\naz group delete --name examplegroup\r\n```\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n* 若要获得模板开发方面的更大帮助，可以安装 VS Code 扩展。 有关详细信息，请参阅[使用 Visual Studio Code 扩展创建 Azure 资源管理器模板](resource-manager-vscode-extension.md)\r\n* 若要详细了解模板的结构，请参阅 [Authoring Azure Resource Manager templates](resource-group-authoring-templates.md)（创作 Azure Resource Manager 模板）。\r\n<!-- Not Available (/templates/microsoft.storage/storageaccounts)-->\r\n* 若要查看许多不同类型的解决方案的完整模型，请参阅 [Azure Quickstart Templates](https://github.com/Azure/azure-quickstart-templates/)（Azure 快速入门模板）。\r\n\r\n<!--Update_Description: update meta properties, wording update -->"}