{"Title":"Azure China CDN API doc-signature","Description":"Learn How to create Live Streaming acceleration type CDN on Azure Management Portal and default caching rules for Live Streaming CDN","Content":"\r\n# CDN API签名机制\r\n\r\n> [!div class=\"op_single_selector\"]\r\n> * [中文](https://docs.azure.cn/zh-cn/cdn/cdn-api-signature)\r\n> * [英文](https://docs.azure.cn/en-us/cdn/cdn-api-signature)\r\n\r\n## 授权头计算方法\r\nAzure CDN restful API的每个请求都要进行身份验证，需要在请求中包含身份验证信息，协议为HTTPS。\r\n\r\n身份验证信息以Authorization请求头发送，格式为\"AzureCDN {Key ID}:{HMAC-SHA256 signature using Key Value}\"。\r\n\r\nKey ID和Key Value可以到[Azure CDN新版管理门户](./cdn-management-v2-portal-how-to-use.md)的密钥管理处申请和管理。签名参数部分包括：请求绝对路径，用 \", \"连接起来的按字母序从小到大排序的查询参数对，请求的UTC时间(与请求头中的x-azurecdn-request-date一样)，大写的请求方法。以上几部分用回车换行连接后用Key Value进行HMAC-SHA256签名。\r\n\r\n\r\n## Authorization请求头生成示例\r\n\r\n### Python\r\n```\r\ndef calculate_authorization_header(request_url, request_time, key_id, key_value, http_method):\r\n    \"\"\" Calculate the authorization header.\r\n    @request_url: Complete request URL with scheme, host, path and queries\r\n    @request_time: UTC request time with format yyyy-MM-dd hh:mm:ss\r\n    @key_id: API key ID\r\n    @key_value: API key value\r\n    @http_method: Http method in upper case\r\n\r\n    \"\"\"\r\n    urlparts = urllib.parse.urlparse(request_url)\r\n    queries = urllib.parse.parse_qs(urlparts.query)\r\n    ordered_queries = OrderedDict(sorted(queries.items()))\r\n    message = \"%s\\r\\n%s\\r\\n%s\\r\\n%s\" % (urlparts.path, \", \".join(['%s:%s' % (key, value[0]) for (key, value) in ordered_queries.items()]), request_time, http_method)\r\n    digest = hmac.new(bytearray(key_value, \"utf-8\"), bytearray(message, \"utf-8\"), hashlib.sha256).hexdigest().upper()\r\n    return \"AzureCDN %s:%s\" % (key_id, digest)\r\n```\r\n\r\n### Java\r\n```\r\n/**\r\n * Calculate the authorization header\r\n *\r\n * @param  requestURL Complete request URL with scheme, host, path and queries\r\n * @param  requestTime UTC request time with format \"yyyy-MM-dd hh:mm:ss\"\r\n * @param  keyID API key ID\r\n * @param  keyValue API key value\r\n * @param  httpMethod HTTP method in upper case \r\n * @return Calculated authorization header\r\n */\r\npublic static String calculateAuthorizationHeader(String requestURL, String requestTime, String keyID, String keyValue, String httpMethod) throws Exception {\r\n              URL url = new URL(requestURL);\r\n              String path = url.getPath();\r\n\r\n              // Get query parameters\r\n              String query = url.getQuery();      \r\n              String[] params = query.split(\"&\");\r\n              Map<String, String> paramMap = new TreeMap<String, String>();\r\n              for(String param: params) {\r\n                    String[] paramterParts = param.split(\"=\");\r\n                    if(paramterParts.length != 2) {\r\n                          continue;\r\n                    }\r\n\r\n                    paramMap.put(paramterParts[0], paramterParts[1]);\r\n              }\r\n\r\n              String orderedQueries = paramMap.entrySet()\r\n                                              .stream()\r\n                                              .map(entry -> entry.getKey() + \":\" + entry.getValue())\r\n                                              .collect(Collectors.joining(\", \"));\r\n\r\n              String content = String.format(\"%s\\r\\n%s\\r\\n%s\\r\\n%s\", path, orderedQueries, requestTime, httpMethod);        \r\n              Mac sha256HMAC = Mac.getInstance(\"HmacSHA256\");\r\n              SecretKeySpec secret_key = new SecretKeySpec(keyValue.getBytes(), \"HmacSHA256\");\r\n              sha256HMAC.init(secret_key);\r\n              byte[] bytes = sha256HMAC.doFinal(content.getBytes());\r\n\r\n              StringBuffer hash = new StringBuffer();\r\n              for (int i = 0; i < bytes.length; i++) {\r\n                  String hex = Integer.toHexString(0xFF & bytes[i]);\r\n                  if (hex.length() == 1) {\r\n                    hash.append('0');\r\n                  }\r\n                  hash.append(hex);\r\n              }\r\n\r\n              return String.format(\"AzureCDN %s:%s\", keyID, hash.toString().toUpperCase());\r\n}\r\n```\r\n### Go\r\n```\r\nfunc calculateAuthorizationHeader(requestURL, requestTime, keyID, keyValue, httpMethod string) string {\r\n            u, err := url.Parse(requestURL)\r\n            if err != nil {\r\n                panic(err)\r\n            }\r\n\r\n            var path = u.Path\r\n            m, _ := url.ParseQuery(u.RawQuery)\r\n\r\n            var keys []string\r\n            for k := range m {\r\n                            keys = append(keys, k)\r\n            }\r\n            sort.Strings(keys)\r\n            var orderedQueries []string\r\n            for _, k := range keys {\r\n                            orderedQueries = append(orderedQueries, fmt.Sprintf(\"%s:%s\", k, m[k][0]))\r\n            }\r\n\r\n            var queries = strings.Join(orderedQueries, \", \")\r\n            content := fmt.Sprintf(\"%s\\r\\n%s\\r\\n%s\\r\\n%s\", path, queries, requestTime, httpMethod)\r\n            hash := hmac.New(sha256.New, []byte(keyValue))\r\n            hash.Write([]byte(content))\r\n            digest := strings.ToUpper(hex.EncodeToString(hash.Sum(nil)))\r\n            return fmt.Sprintf(\"AzureCDN %s:%s\", keyID, digest)\r\n }\r\n```\r\n\r\n### C Sharp\r\n```\r\n/// <summary>\r\n/// Calculate the authorization header.\r\n/// </summary>\r\n/// <param name=\"requestUrl\">Complete request URL with scheme, host, path and queries</param>\r\n/// <param name=\"requestTime\">UTC request time with format yyyy-MM-dd hh:mm:ss.</param>\r\n/// <param name=\"keyID\">The API key ID.</param>\r\n/// <param name=\"keyValue\">The API key value.</param>\r\n/// <param name=\"httpMethod\">Http method in upper case</param>\r\n/// <returns>Calculated authorization header</returns>\r\npublic static string CalculateAuthorizationHeader(string requestUrl, string requestTime, string keyID, string keyValue, string httpMethod)\r\n{\r\n          Uri requestUri = new Uri(requestUrl);\r\n\r\n          StringBuilder hashContentBuilder = new StringBuilder();\r\n          hashContentBuilder.Append(requestUri.AbsolutePath.ToLowerInvariant());\r\n          hashContentBuilder.Append(\"\\r\\n\");\r\n\r\n          var queryStrings = HttpUtility.ParseQueryString(requestUri.Query);\r\n          var sortedParameterNames = queryStrings.AllKeys.ToList();\r\n          sortedParameterNames.Sort((q1, q2) => string.Compare(q1, q2));\r\n          var result = string.Join(\", \", sortedParameterNames.Select(p => string.Format(\"{0}:{1}\", p, queryStrings[p])).ToArray());\r\n          if (!string.IsNullOrEmpty(result))\r\n          {\r\n              hashContentBuilder.Append(result);\r\n              hashContentBuilder.Append(\"\\r\\n\");\r\n          }\r\n\r\n          hashContentBuilder.Append(requestTime);\r\n          hashContentBuilder.Append(\"\\r\\n\");\r\n          hashContentBuilder.Append(httpMethod.ToUpper());\r\n          string hashContent = hashContentBuilder.ToString();\r\n\r\n          using (HMACSHA256 myhmacsha256 = new HMACSHA256(Encoding.UTF8.GetBytes(keyValue)))\r\n          {\r\n              byte[] byteArray = Encoding.UTF8.GetBytes(hashContent);\r\n              byte[] hashedValue = myhmacsha256.ComputeHash(byteArray);\r\n\r\n              string sbinary = string.Empty;\r\n              for (int i = 0; i < hashedValue.Length; i++)\r\n              {\r\n                  sbinary += hashedValue[i].ToString(\"X2\");\r\n              }\r\n\r\n              return string.Format(\"AzureCDN {0}:{1}\", keyID, sbinary);\r\n          }\r\n}\r\n```\r\n"}