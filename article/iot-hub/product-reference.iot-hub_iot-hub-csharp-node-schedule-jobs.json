{"Title":"通过 Azure IoT 中心 (.NET/Node) 安排作业","Description":"如何安排 Azure IoT 中心作业实现多台设备上的直接方法调用。 使用适用于 Node.js 的 Azure IoT 设备 SDK 实现模拟设备应用，并使用适用于 .NET 的 Azure IoT 服务 SDK 实现用于运行作业的服务应用。","Content":"# <a name=\"schedule-and-broadcast-jobs-netnodejs\"></a>计划和广播作业 (.NET/Node.js)\r\n\r\n[!INCLUDE [iot-hub-selector-schedule-jobs](../../includes/iot-hub-selector-schedule-jobs.md)]\r\n\r\n使用 Azure IoT 中心来计划和跟踪可更新数百万台设备的作业。 使用作业可以：\r\n\r\n* 更新所需属性\r\n* 更新标记\r\n* 调用直接方法\r\n\r\n作业包装上述操作之一，并跟踪针对一组设备（由设备孪生查询定义）的执行情况。 例如，后端应用可以使用作业在 10,000 台设备上调用直接方法来重启设备。 使用设备孪生查询指定设备集，并将作业计划为在以后运行。 每个设备接收和执行 reboot 直接方法时，该作业会跟踪进度。\r\n\r\n若要详细了解其中的每项功能，请参阅：\r\n\r\n* 设备孪生和属性：[设备孪生入门][lnk-get-started-twin]和[教程：如何使用设备孪生属性][lnk-twin-props]\r\n* 直接方法：[IoT 中心开发人员指南 - 直接方法][lnk-dev-methods]和[教程：使用直接方法][lnk-c2d-methods]\r\n\r\n本教程演示如何：\r\n\r\n* 创建一个设备应用，用于实现名为 **lockDoor**、可由后端应用调用的直接方法。 该设备应用还从后端应用接收所需的属性更改。\r\n* 创建一个后端应用，该应用创建一个作业以在多台设备上调用 **lockDoor** 直接方法。 另一个作业将所需的属性更新发送到多台设备。\r\n\r\n本教程结束时，用户会有一个 Node.js 控制台设备应用，以及一个 .NET (C#) 控制台后端应用：\r\n\r\n**simDevice.js**：用于连接到 IoT 中心，实现 **lockDoor** 直接方法，并处理所需的属性更改。\r\n\r\n**ScheduleJob**：使用作业来调用 **lockDoor** 直接方法，并在多台设备上更新设备孪生所需的属性。\r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* Visual Studio 2015 或 Visual Studio 2017。\r\n* Node.js 版本 4.0.x 或更高版本。 [准备开发环境][lnk-dev-setup]一文介绍了如何在 Windows 或 Linux 上安装本教程所用的 Node.js。\r\n* 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r\n\r\n## <a name=\"schedule-jobs-for-calling-a-direct-method-and-sending-device-twin-updates\"></a>计划用于调用直接方法和发送设备孪生更新的作业\r\n\r\n本部分创建一个 .NET 控制台应用（使用 C#），该应用使用作业来调用 **lockDoor** 直接方法，并将所需属性更新发送到多台设备。\r\n\r\n1. 在 Visual Studio 中，使用“**控制台应用程序**”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 **ScheduleJob**。\r\n\r\n    ![新的 Visual C# Windows 经典桌面项目][img-createapp]\r\n\r\n1. 在“解决方案资源管理器”中，右键单击“ScheduleJob”项目，并单击“管理 NuGet 包...”。\r\n1. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索 **microsoft.azure.devices**，选择“安装”以安装 **Microsoft.Azure.Devices** 包，并接受使用条款。 此步骤将下载、安装 [Azure IoT 服务 SDK][lnk-nuget-service-sdk] NuGet 包及其依赖项并添加对它的引用。\r\n\r\n    ![“NuGet 包管理器”窗口][img-servicenuget]\r\n1. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r\n    \r\n    ```csharp\r\n    using Microsoft.Azure.Devices;\r\n    using Microsoft.Azure.Devices.Shared;\r\n    ```\r\n\r\n1. 如果默认语句中不存在下面的 `using` 语句，请添加该语句。\r\n\r\n    ```csharp\r\n    using System.Threading.Tasks;\r\n    ```\r\n\r\n1. 将以下字段添加到 **Program** 类。 将占位符替换为上一部分中为中心创建的 IoT 中心连接字符串。\r\n\r\n    ```csharp\r\n    static string connString = \"{iot hub connection string}\";\r\n    static ServiceClient client;\r\n    static JobClient jobClient;\r\n    ```\r\n\r\n1. 将以下方法添加到 **Program** 类：\r\n\r\n    ```csharp\r\n    public static async Task MonitorJob(string jobId)\r\n    {\r\n        JobResponse result;\r\n        do\r\n        {\r\n            result = await jobClient.GetJobAsync(jobId);\r\n            Console.WriteLine(\"Job Status : \" + result.Status.ToString());\r\n            Thread.Sleep(2000);\r\n        } while ((result.Status != JobStatus.Completed) && (result.Status != JobStatus.Failed));\r\n    }\r\n    ```\r\n\r\n1. 将以下方法添加到 **Program** 类：\r\n\r\n    ```csharp\r\n    public static async Task StartMethodJob(string jobId)\r\n    {\r\n        CloudToDeviceMethod directMethod = new CloudToDeviceMethod(\"lockDoor\", TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));\r\n\r\n        JobResponse result = await jobClient.ScheduleDeviceMethodAsync(jobId,\r\n            \"deviceId='myDeviceId'\",\r\n            directMethod,\r\n            DateTime.Now,\r\n            10);\r\n\r\n        Console.WriteLine(\"Started Method Job\");\r\n    }\r\n    ```\r\n\r\n1. 将以下方法添加到 **Program** 类：\r\n\r\n    ```csharp\r\n    public static async Task StartTwinUpdateJob(string jobId)\r\n    {\r\n        var twin = new Twin();\r\n        twin.Properties.Desired[\"Building\"] = \"43\";\r\n        twin.Properties.Desired[\"Floor\"] = \"3\";\r\n        twin.ETag = \"*\";\r\n\r\n        JobResponse result = await jobClient.ScheduleTwinUpdateAsync(jobId,\r\n            \"deviceId='myDeviceId'\",\r\n            twin,\r\n            DateTime.Now,\r\n            10);\r\n\r\n        Console.WriteLine(\"Started Twin Update Job\");\r\n    }\r\n    ```\r\n\r\n1. 最后，在 **Main** 方法中添加以下行：\r\n\r\n    ```csharp\r\n    jobClient = JobClient.CreateFromConnectionString(connString);\r\n\r\n    string methodJobId = Guid.NewGuid().ToString();\r\n\r\n    StartMethodJob(methodJobId);\r\n    MonitorJob(methodJobId).Wait();\r\n    Console.WriteLine(\"Press ENTER to run the next job.\");\r\n    Console.ReadLine();\r\n\r\n    string twinUpdateJobId = Guid.NewGuid().ToString();\r\n\r\n    StartTwinUpdateJob(twinUpdateJobId);\r\n    MonitorJob(twinUpdateJobId).Wait();\r\n    Console.WriteLine(\"Press ENTER to exit.\");\r\n    Console.ReadLine();\r\n    ```\r\n\r\n1. 在“解决方案资源管理器”中，打开“设置启动项目...”，并确保 **ScheduleJob** 项目的“操作”为“启动”。 生成解决方案。\r\n\r\n## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r\n\r\n在本部分中，创建响应云调用的直接方法的 Node.js 控制台应用，这会触发模拟的设备重新启动并使用报告属性启用设备孪生查询，以标识设备和及其上次重新启动的时间。\r\n\r\n1. 新建名为 **simDevice**的空文件夹。  在 **simDevice** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。  接受所有默认值：\r\n\r\n    ```cmd/sh\r\n    npm init\r\n    ```\r\n1. 在 **simDevice** 文件夹的命令提示符处，运行下述命令以安装 **azure-iot-device** 和 **azure-iot-device-mqtt** 包：\r\n\r\n    ```cmd/sh\r\n    npm install azure-iot-device azure-iot-device-mqtt --save\r\n    ```\r\n\r\n1. 在 **simDevice.js** 文件夹中，利用文本编辑器创建新的 **simDevice** 文件。\r\n\r\n1. 在 **simDevice.js** 文件的开头添加以下“require”语句：\r\n\r\n    ```nodejs\r\n    'use strict';\r\n\r\n    var Client = require('azure-iot-device').Client;\r\n    var Protocol = require('azure-iot-device-mqtt').Mqtt;\r\n    ```\r\n1. 添加 **connectionString** 变量，并使用它创建一个**客户端**实例。 请确保使用适合的值替换占位符。\r\n\r\n    ```nodejs\r\n    var connectionString = 'HostName={youriothostname};DeviceId={yourdeviceid};SharedAccessKey={yourdevicekey}';\r\n    var client = Client.fromConnectionString(connectionString, Protocol);\r\n    ```\r\n\r\n1. 添加以下函数以处理 **lockDoor** 方法。\r\n\r\n    ```nodejs\r\n    var onLockDoor = function(request, response) {\r\n\r\n        // Respond the cloud app for the direct method\r\n        response.send(200, function(err) {\r\n            if (!err) {\r\n                console.error('An error occured when sending a method response:\\n' + err.toString());\r\n            } else {\r\n                console.log('Response to method \\'' + request.methodName + '\\' sent successfully.');\r\n            }\r\n        });\r\n\r\n        console.log('Locking Door!');\r\n    };\r\n    ```\r\n\r\n1. 添加以下代码以注册 **lockDoor** 方法的处理程序。\r\n\r\n    ```nodejs\r\n    client.open(function(err) {\r\n        if (err) {\r\n            console.error('Could not connect to IotHub client.');\r\n        }  else {\r\n            console.log('Client connected to IoT Hub.  Waiting for lockDoor direct method.');\r\n            client.onDeviceMethod('lockDoor', onLockDoor);\r\n        }\r\n    });\r\n    ```\r\n\r\n1. 保存并关闭 **simDevice.js** 文件。\r\n\r\n> [!NOTE]\r\n> 为简单起见，本教程不实现任何重试策略。 在生产代码中，应该按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r\n\r\n## <a name=\"run-the-apps\"></a>运行应用\r\n现在，已准备就绪，可以运行应用。\r\n\r\n1. 在 simDevice 文件夹的命令提示符处，运行以下命令以开始侦听重启直接方法。\r\n\r\n    ```cmd/sh\r\n    node simDevice.js\r\n    ```\r\n1. 通过右键单击“ScheduleJob”项目，并依次选择“调试”和“启动新实例”，运行 C# 控制台应用 **ScheduleJob**。\r\n\r\n1. 会出现设备和后端应用的输出。\r\n\r\n    ![运行应用以计划作业][img-schedulejobs]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n在本教程中，使用了作业来安排用于设备的直接方法以及设备孪生属性的更新。\r\n\r\n若要继续完成 IoT 中心和设备管理模式（如远程无线固件更新）的入门内容，请参阅[教程：如何更新固件][lnk-fwupdate]。\r\n\r\n要了解如何将 AI 部署到具有 Azure IoT Edge 的边缘设备，请参阅 [IoT Edge 入门][lnk-iot-edge]。\r\n\r\n<!-- images -->\r\n[img-servicenuget]: ./media/iot-hub-csharp-node-schedule-jobs/servicesdknuget.png\r\n[img-createapp]: ./media/iot-hub-csharp-node-schedule-jobs/createnetapp.png\r\n[img-schedulejobs]: ./media/iot-hub-csharp-node-schedule-jobs/schedulejobs.png\r\n\r\n[lnk-get-started-twin]: ./iot-hub-node-node-twin-getstarted.md\r\n[lnk-twin-props]: ./iot-hub-node-node-twin-how-to-configure.md\r\n[lnk-c2d-methods]: ./iot-hub-node-node-direct-methods.md\r\n[lnk-dev-methods]: ./iot-hub-devguide-direct-methods.md\r\n[lnk-fwupdate]: ./iot-hub-node-node-firmware-update.md\r\n[lnk-iot-edge]: ./iot-hub-linux-iot-edge-get-started.md\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/blob/master/doc/node-devbox-setup.md\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-transient-faults]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r\n[lnk-nuget-service-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\r\n\r\n<!--Update_Description: update wording-->"}