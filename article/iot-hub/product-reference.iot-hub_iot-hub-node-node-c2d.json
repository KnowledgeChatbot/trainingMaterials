{"Title":"Azure IoT 中心的云到设备消息 (Node)","Description":"如何使用 Azure IoT SDK for Node.js 将云到设备消息从 Azure IoT 中心发送到设备。 修改模拟设备应用以接收云到设备消息，并修改后端应用以发送云到设备消息。","Content":"# <a name=\"send-cloud-to-device-messages-with-iot-hub-node\"></a>使用 IoT 中心发送云到设备消息 (Node)\r\n\r\n[!INCLUDE [iot-hub-selector-c2d](../../includes/iot-hub-selector-c2d.md)]\r\n\r\n## <a name=\"introduction\"></a>介绍\r\nAzure IoT 中心是一项完全托管的服务，有助于在数百万台设备和单个解决方案后端之间实现安全可靠的双向通信。 [Get started with IoT Hub] 教程介绍了如何创建 IoT 中心和在其中预配设备标识，并介绍了如何编写用于发送设备到云消息的模拟设备应用。\r\n\r\n本教程是在 [Get started with IoT Hub]（IoT 中心入门）的基础上编写的。 其中了说明了如何：\r\n\r\n* 通过 IoT 中心，将云到设备的消息从解决方案后端发送到单个设备。\r\n* 在设备上接收云到设备的消息。\r\n* 通过解决方案后端，请求确认收到从 IoT 中心发送到设备的消息（反馈）。\r\n\r\n可以在 [IoT 中心开发人员指南][IoT Hub developer guide - C2D]中找到有关云到设备消息的详细信息。\r\n\r\n在本教程结束时，会运行两个 Node.js 控制台应用：\r\n\r\n* **SimulatedDevice**，这是在 [Get started with IoT Hub]（IoT 中心入门）中创建的应用的修改版本，可连接到 IoT 中心并接收云到设备的消息。\r\n* **SendCloudToDeviceMessage**，它将云到设备消息通过 IoT 中心发送到模拟设备应用，然后接收其传送确认。\r\n\r\n> [!NOTE]\r\n> IoT 中心通过 Azure IoT 设备 SDK 对许多设备平台和语言（包括 C、Java 和 Javascript）提供 SDK 支持。 有关如何将设备连接到本教程的代码以及通常如何连接到 Azure IoT 中心的分步说明，请参阅 [Azure IoT 开发人员中心]。\r\n> \r\n> \r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* Node.js 版本 4.0.x 或更高版本。\r\n\r\n+ 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r\n\r\n## <a name=\"receive-messages-in-the-simulated-device-app\"></a>在模拟设备应用上接收消息\r\n本部分介绍如何修改在 [Get started with IoT Hub]中创建的模拟设备应用，以接收来自 IoT 中心的“云到设备”消息。\r\n\r\n1. 使用文本编辑器打开 SimulatedDevice.js 文件。\r\n2. 修改 **connectCallback** 函数以处理 IoT 中心发来的消息。 在本示例中，设备始终调用 **complete** 函数，以通知 IoT 中心它已处理消息。 **connectCallback** 函数的新版本类似于以下代码片段：\r\n   \r\n    ```javascript\r\n    var connectCallback = function (err) {\r\n      if (err) {\r\n        console.log('Could not connect: ' + err);\r\n      } else {\r\n        console.log('Client connected');\r\n        client.on('message', function (msg) {\r\n          console.log('Id: ' + msg.messageId + ' Body: ' + msg.data);\r\n          client.complete(msg, printResultFor('completed'));\r\n        });\r\n        // Create a message and send it to the IoT Hub every second\r\n        setInterval(function(){\r\n            var temperature = 20 + (Math.random() * 15);\r\n            var humidity = 60 + (Math.random() * 20);            \r\n            var data = JSON.stringify({ deviceId: 'myFirstNodeDevice', temperature: temperature, humidity: humidity });\r\n            var message = new Message(data);\r\n            message.properties.add('temperatureAlert', (temperature > 30) ? 'true' : 'false');\r\n            console.log(\"Sending message: \" + message.getData());\r\n            client.sendEvent(message, printResultFor('send'));\r\n        }, 1000);\r\n      }\r\n    };\r\n    ```\r\n\r\n   > [!NOTE]\r\n   > 如果使用 HTTPS（而不使用 MQTT 或 AMQP）作为传输，则 DeviceClient 实例将不会频繁（频率低于每 25 分钟一次）检查 IoT 中心发来的消息。 有关 MQTT、AMQP 和 HTTPS 支持之间的差异，以及 IoT 中心限制的详细信息，请参阅 [IoT 中心开发人员指南][IoT Hub developer guide - C2D]。\r\n   > \r\n   > \r\n\r\n## <a name=\"send-a-cloud-to-device-message\"></a>发送云到设备的消息\r\n在本部分中，你创建一个 Node.js 控制台应用，用于将云到设备的消息发送到模拟设备应用。 需要使用 [Get started with IoT Hub]教程中添加的设备的设备 ID。 还需要中心的 IoT 中心连接字符串（位于 [Azure 门户]）。\r\n\r\n1. 创建名为 **sendcloudtodevicemessage**的空文件夹。 在命令提示符处，使用以下命令在 **sendcloudtodevicemessage** 文件夹中创建一个 package.json 文件。 接受所有默认值：\r\n   \r\n    ```shell\r\n    npm init\r\n    ```\r\n2. 在命令提示符处，运行以下命令在 **sendcloudtodevicemessage** 文件夹中安装 **azure-iothub** 包：\r\n   \r\n    ```shell\r\n    npm install azure-iothub --save\r\n    ```\r\n3. 通过文本编辑器，在 **sendcloudtodevicemessage** 文件夹中创建一个 **SendCloudToDeviceMessage.js** 文件。\r\n4. 在 **SendCloudToDeviceMessage.js** 文件的开头添加以下 `require` 语句：\r\n   \r\n    ```javascript\r\n    'use strict';\r\n\r\n    var Client = require('azure-iothub').Client;\r\n    var Message = require('azure-iot-common').Message;\r\n    ```\r\n5. 将以下代码添加到 **SendCloudToDeviceMessage.js** 文件。 将“{iot hub connection string}”占位符值替换为在 [Get started with IoT Hub]教程中创建的中心的 IoT 中心连接字符串。 将“{device id}”占位符替换为在 [Get started with IoT Hub]教程中添加的设备的设备 ID：\r\n   \r\n    ```javascript\r\n    var connectionString = '{iot hub connection string}';\r\n    var targetDevice = '{device id}';\r\n\r\n    var serviceClient = Client.fromConnectionString(connectionString);\r\n    ```\r\n6. 添加以下函数，以便在控制台中列显操作结果：\r\n   \r\n    ```javascript\r\n    function printResultFor(op) {\r\n      return function printResult(err, res) {\r\n        if (err) console.log(op + ' error: ' + err.toString());\r\n        if (res) console.log(op + ' status: ' + res.constructor.name);\r\n      };\r\n    }\r\n    ```\r\n7. 添加以下函数，以便在控制台中列显送达反馈消息：\r\n   \r\n    ```javascript\r\n    function receiveFeedback(err, receiver){\r\n      receiver.on('message', function (msg) {\r\n        console.log('Feedback message:')\r\n        console.log(msg.getData().toString('utf-8'));\r\n      });\r\n    }\r\n    ```\r\n8. 添加以下代码，以便将消息发送到设备并在设备确认收到云到设备的消息时处理反馈消息：\r\n   \r\n    ```javascript\r\n    serviceClient.open(function (err) {\r\n      if (err) {\r\n        console.error('Could not connect: ' + err.message);\r\n      } else {\r\n        console.log('Service client connected');\r\n        serviceClient.getFeedbackReceiver(receiveFeedback);\r\n        var message = new Message('Cloud to device message.');\r\n        message.ack = 'full';\r\n        message.messageId = \"My Message ID\";\r\n        console.log('Sending message: ' + message.getData());\r\n        serviceClient.send(targetDevice, message, printResultFor('send'));\r\n      }\r\n    });\r\n    ```\r\n9. 保存并关闭 **SendCloudToDeviceMessage.js** 文件。\r\n\r\n## <a name=\"run-the-applications\"></a>运行应用程序\r\n现在，已准备就绪，可以运行应用程序了。\r\n\r\n1. 在 **simulateddevice** 文件夹的命令提示符下，运行以下命令将遥测发送到 IoT 中心，并侦听云到设备消息：\r\n   \r\n    ```shell\r\n    node SimulatedDevice.js \r\n    ```\r\n\r\n    ![运行模拟设备应用][img-simulated-device]\r\n2. 在 **sendcloudtodevicemessage** 文件夹的命令提示符下，运行以下命令发送云到设备消息，并等待确认反馈：\r\n   \r\n    ```shell\r\n    node SendCloudToDeviceMessage.js \r\n    ```\r\n\r\n    ![运行应用以发送云到设备的命令][img-send-command]\r\n   \r\n   > [!NOTE]\r\n   > 为简单起见，本教程不实现任何重试策略。 在生产代码中，应按 MSDN 文章 [Transient Fault Handling]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r\n   > \r\n   > \r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n在本教程中，已学习如何发送和接收云到设备的消息。 \r\n\r\n若要查看使用 IoT 中心完成端到端解决方案的示例，请参阅 [Azure IoT 套件]。\r\n\r\n若要了解有关使用 IoT 中心开发解决方案的详细信息，请参阅 [IoT 中心开发人员指南]。\r\n\r\n<!-- Images -->\r\n[img-simulated-device]: ./media/iot-hub-node-node-c2d/receivec2d.png\r\n[img-send-command]:  ./media/iot-hub-node-node-c2d/sendc2d.png\r\n\r\n<!-- Links -->\r\n\r\n[Get started with IoT Hub]: ./iot-hub-node-node-getstarted.md\r\n[IoT Hub Developer Guide - C2D]: ./iot-hub-devguide-messaging.md\r\n[IoT 中心开发人员指南]: ./iot-hub-devguide.md\r\n[Azure IoT 开发人员中心]: https://www.azure.cn/develop/iot/\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/tree/master/doc/node-devbox-setup.md\r\n[Transient Fault Handling]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r\n[Azure 门户]: https://portal.azure.cn\r\n[Azure IoT 套件]: /iot-suite/\r\n\r\n\r\n<!--Update_Description:update meta properties and wording-->"}