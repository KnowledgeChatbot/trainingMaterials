{"Title":"通过 Azure IoT 中心安排作业 (Node)","Description":"如何安排 Azure IoT 中心作业实现多台设备上的直接方法调用。 使用 Azure IoT SDK for Node.js 实现模拟设备应用以及用于运行作业的服务应用。","Content":"# <a name=\"schedule-and-broadcast-jobs-node\"></a>计划和广播作业 (Node)\r\n\r\n[!INCLUDE [iot-hub-selector-schedule-jobs](../../includes/iot-hub-selector-schedule-jobs.md)]\r\n\r\nAzure IoT 中心是一项完全托管的服务，允许后端应用创建和跟踪用于计划和更新数百万台设备的作业。  作业可以用于以下操作：\r\n\r\n* 更新所需属性\r\n* 更新标记\r\n* 调用直接方法\r\n\r\n从概念上讲，作业包装这些操作之一，并跟踪针对一组设备执行（由设备孪生查询定义）的进度。  例如，后端应用可使用作业重启 10,000 台设备（由设备孪生查询指定并计划在将来执行）。  该应用程序随后可以在其中每个设备接收和执行重新启动方法时跟踪进度。\r\n\r\n可在以下文章中了解有关所有这些功能的详细信息：\r\n\r\n* 设备孪生和属性：[设备孪生入门][lnk-get-started-twin]和[教程：如何使用设备孪生属性][lnk-twin-props]\r\n* 直接方法：[IoT 中心开发人员指南 - 直接方法][lnk-dev-methods]和[教程：直接方法][lnk-c2d-methods]\r\n\r\n本教程演示如何：\r\n\r\n* 创建一个具有直接方法的 Node.js 模拟设备应用，启用可由解决方案后端进行调用的 lockDoor。\r\n* 创建一个 Node.js 控制台应用，该应用使用作业调用模拟设备应用中的 **lockDoor** 直接方法，并使用设备作业更新所需属性。\r\n\r\n在本教程结束时，会创建两个 Node.js 应用：\r\n\r\n**simDevice.js**，它使用设备标识连接到 IoT 中心，并接收 **lockDoor** 直接方法。\r\n\r\nscheduleJobService.js，它调用模拟设备应用中的直接方法，并通过作业更新设备孪生的所需属性。\r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* Node.js 版本 4.0.x 或更高版本； <br/>  [准备开发环境][lnk-dev-setup]介绍了如何在 Windows 或 Linux 上安装本教程所用的 Node.js。\r\n* 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r\n\r\n## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r\n本部分将创建一个 Node.js 控制台应用，用于响应通过云调用的方法，这会触发模拟 lockDoor 方法。\r\n\r\n1. 新建名为 **simDevice**的空文件夹。  在 **simDevice** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。  接受所有默认值：\r\n\r\n    ```\r\n    npm init\r\n    ```\r\n2. 在 **simDevice** 文件夹的命令提示符处，运行下述命令以安装 **azure-iot-device** 设备 SDK 包和 **azure-iot-device-mqtt** 包：\r\n\r\n    ```\r\n    npm install azure-iot-device azure-iot-device-mqtt --save\r\n    ```\r\n3. 在 **simDevice.js** 文件夹中，利用文本编辑器创建新的 **simDevice** 文件。\r\n4. 在 **simDevice.js** 文件的开头添加以下“require”语句：\r\n\r\n    ```\r\n    'use strict';\r\n\r\n    var Client = require('azure-iot-device').Client;\r\n    var Protocol = require('azure-iot-device-mqtt').Mqtt;\r\n    ```\r\n5. 添加 **connectionString** 变量，并使用它创建一个**客户端**实例。  \r\n\r\n    ```\r\n    var connectionString = 'HostName={youriothostname};DeviceId={yourdeviceid};SharedAccessKey={yourdevicekey}';\r\n    var client = Client.fromConnectionString(connectionString, Protocol);\r\n    ```\r\n6. 添加以下函数以处理 **lockDoor** 方法。\r\n\r\n    ```\r\n    var onLockDoor = function(request, response) {\r\n\r\n        // Respond the cloud app for the direct method\r\n        response.send(200, function(err) {\r\n            if (!err) {\r\n                console.error('An error occured when sending a method response:\\n' + err.toString());\r\n            } else {\r\n                console.log('Response to method \\'' + request.methodName + '\\' sent successfully.');\r\n            }\r\n        });\r\n\r\n        console.log('Locking Door!');\r\n    };\r\n    ```\r\n7. 添加以下代码以注册 **lockDoor** 方法的处理程序。\r\n\r\n    ```\r\n    client.open(function(err) {\r\n        if (err) {\r\n            console.error('Could not connect to IotHub client.');\r\n        }  else {\r\n            console.log('Client connected to IoT Hub. Register handler for lockDoor direct method.');\r\n            client.onDeviceMethod('lockDoor', onLockDoor);\r\n        }\r\n    });\r\n    ```\r\n8. 保存并关闭 **simDevice.js** 文件。\r\n\r\n> [!NOTE]\r\n> 为简单起见，本教程不实现任何重试策略。 在生产代码中，应该按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r\n> \r\n> \r\n\r\n## <a name=\"schedule-jobs-for-calling-a-direct-method-and-updating-a-device-twins-properties\"></a>安排作业，用于调用直接方法和更新设备孪生的属性\r\n在此部分中，会创建一个 Node.js 控制台应用，它使用直接方法对设备启动远程 **lockDoor** 并更新设备孪生的属性。\r\n\r\n1. 新建名为 **scheduleJobService**的空文件夹。  在 **scheduleJobService** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。  接受所有默认值：\r\n\r\n    ```\r\n    npm init\r\n    ```\r\n2. 在 scheduleJobService 文件夹的命令提示符处，运行以下命令安装 azure-iothub 设备 SDK 包和 azure-iot-device-mqtt 包：\r\n   \r\n    ```\r\n    npm install azure-iothub uuid --save\r\n    ```\r\n3. 在 **scheduleJobService** 文件夹中，利用文本编辑器创建新的 **scheduleJobService.js** 文件。\r\n4. 在 **dmpatterns_gscheduleJobServiceetstarted_service.js** 文件开头添加以下“require”语句：\r\n\r\n    ```\r\n    'use strict';\r\n\r\n    var uuid = require('uuid');\r\n    var JobClient = require('azure-iothub').JobClient;\r\n    ```\r\n5. 添加以下变量声明并替换占位符值：\r\n\r\n    ```\r\n    var connectionString = '{iothubconnectionstring}';\r\n    var queryCondition = \"deviceId IN ['myDeviceId']\";\r\n    var startTime = new Date();\r\n    var maxExecutionTimeInSeconds =  300;\r\n    var jobClient = JobClient.fromConnectionString(connectionString);\r\n    ```\r\n6. 添加以下用于监视作业执行的函数：\r\n   \r\n    ```\r\n    function monitorJob (jobId, callback) {\r\n        var jobMonitorInterval = setInterval(function() {\r\n            jobClient.getJob(jobId, function(err, result) {\r\n            if (err) {\r\n                console.error('Could not get job status: ' + err.message);\r\n            } else {\r\n                console.log('Job: ' + jobId + ' - status: ' + result.status);\r\n                if (result.status === 'completed' || result.status === 'failed' || result.status === 'cancelled') {\r\n                clearInterval(jobMonitorInterval);\r\n                callback(null, result);\r\n                }\r\n            }\r\n            });\r\n        }, 5000);\r\n    }\r\n    ```\r\n7. 添加以下代码以安排调用设备方法的作业：\r\n\r\n    ```\r\n    var methodParams = {\r\n        methodName: 'lockDoor',\r\n        payload: null,\r\n        responseTimeoutInSeconds: 15 // Timeout after 15 seconds if device is unable to process method\r\n    };\r\n\r\n    var methodJobId = uuid.v4();\r\n    console.log('scheduling Device Method job with id: ' + methodJobId);\r\n    jobClient.scheduleDeviceMethod(methodJobId,\r\n                                queryCondition,\r\n                                methodParams,\r\n                                startTime,\r\n                                maxExecutionTimeInSeconds,\r\n                                function(err) {\r\n        if (err) {\r\n            console.error('Could not schedule device method job: ' + err.message);\r\n        } else {\r\n            monitorJob(methodJobId, function(err, result) {\r\n                if (err) {\r\n                    console.error('Could not monitor device method job: ' + err.message);\r\n                } else {\r\n                    console.log(JSON.stringify(result, null, 2));\r\n                }\r\n            });\r\n        }\r\n    });\r\n    ```\r\n8. 添加以下代码以安排更新设备孪生的作业：\r\n   \r\n    ```\r\n    var twinPatch = {\r\n       etag: '*', \r\n       properties: {\r\n           desired: {\r\n               building: '43', \r\n               floor: 3\r\n           }\r\n       }\r\n    };\r\n\r\n    var twinJobId = uuid.v4();\r\n\r\n    console.log('scheduling Twin Update job with id: ' + twinJobId);\r\n    jobClient.scheduleTwinUpdate(twinJobId,\r\n                                queryCondition,\r\n                                twinPatch,\r\n                                startTime,\r\n                                maxExecutionTimeInSeconds,\r\n                                function(err) {\r\n        if (err) {\r\n            console.error('Could not schedule twin update job: ' + err.message);\r\n        } else {\r\n            monitorJob(twinJobId, function(err, result) {\r\n                if (err) {\r\n                    console.error('Could not monitor twin update job: ' + err.message);\r\n                } else {\r\n                    console.log(JSON.stringify(result, null, 2));\r\n                }\r\n            });\r\n        }\r\n    });\r\n    ```\r\n9. 保存并关闭 **scheduleJobService.js** 文件。\r\n\r\n## <a name=\"run-the-applications\"></a>运行应用程序\r\n现在，已准备就绪，可以运行应用程序了。\r\n\r\n1. 在 simDevice 文件夹的命令提示符处，运行以下命令以开始侦听重启直接方法。\r\n   \r\n    ```\r\n    node simDevice.js\r\n    ```\r\n2. 在 **scheduleJobService** 文件夹的命令提示符处运行以下命令，以便触发作业进行锁门和孪生项的更新\r\n\r\n    ```\r\n    node scheduleJobService.js\r\n    ```\r\n3. 可以在控制台中看到设备对直接方法的响应。\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n在本教程中，使用了作业来安排用于设备的直接方法以及设备孪生属性的更新。\r\n\r\n若要继续完成 IoT 中心和设备管理模式（如远程无线固件更新）的入门内容，请参阅：\r\n\r\n[教程：如何进行固件更新][lnk-fwupdate]\r\n\r\n若要继续完成 IoT 中心入门内容，请参阅 [Azure IoT Edge 入门][lnk-iot-edge]。\r\n\r\n[lnk-get-started-twin]: ./iot-hub-node-node-twin-getstarted.md\r\n[lnk-twin-props]: ./iot-hub-node-node-twin-how-to-configure.md\r\n[lnk-c2d-methods]: ./iot-hub-node-node-direct-methods.md\r\n[lnk-dev-methods]: ./iot-hub-devguide-direct-methods.md\r\n[lnk-fwupdate]: ./iot-hub-node-node-firmware-update.md\r\n[lnk-iot-edge]: ./iot-hub-linux-iot-edge-get-started.md\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/tree/master/doc/node-devbox-setup.md\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-transient-faults]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r\n\r\n<!--Update_Description:update wording and code-->\r\n"}