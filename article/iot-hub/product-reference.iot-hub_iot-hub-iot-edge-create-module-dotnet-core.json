{"Title":"使用 C# 创建 Azure IoT Edge 模块","Description":"本教程演示如何使用最新的 Azure IoT Edge NuGet 包、Visual Studio Code 和 C# 编写 BLE 数据转换器模块。","Content":"# <a name=\"create-an-azure-iot-edge-module-with-cx23\"></a>使用 C&#x23; 创建 Azure IoT Edge 模块\r\n\r\n本教程演示如何使用 `Visual Studio Code` 和 `C#` 为 `Azure IoT Edge` 创建模块。\r\n\r\n本教程演练环境设置，以及如何使用最新的 `Azure IoT Edge NuGet` 包编写 [BLE](https://en.wikipedia.org/wiki/Bluetooth_Low_Energy) 数据转换器模块。 \r\n\r\n>[!NOTE]\r\n本教程使用支持跨平台兼容性的 `.NET Core SDK`。 以下教程是使用 `Windows 10` 操作系统编写的。 根据所用的 `development environment`，本教程中的某些命令可能不同。 \r\n\r\n## <a name=\"prerequisites\"></a>先决条件\r\n\r\n本部分设置 `Azure IoT Edge` 模块开发环境。 内容适用于 **64 位 Windows** 和 **64 位 Linux (Ubuntu/Debian 8)** 操作系统。\r\n\r\n需要以下软件：\r\n\r\n- [Git 客户端](https://git-scm.com/downloads)\r\n- [.NET Core SDK](https://www.microsoft.com/net/core#windowscmd)\r\n- [Visual Studio Code](https://code.visualstudio.com/)\r\n\r\n不需要克隆本示例的存储库，但是，以下存储库中已提供本教程所述的所有示例代码：\r\n\r\n- `git clone https://github.com/Azure-Samples/iot-edge-samples.git`。\r\n- `cd iot-edge-samples/dotnetcore/simulated_ble`\r\n\r\n## <a name=\"getting-started\"></a>入门\r\n\r\n1. 安装 `.NET Core SDK`。\r\n2. 从 Visual Studio Code Marketplace 安装 `Visual Studio Code` 和 `C# extension`。\r\n\r\n\r\n\r\n## <a name=\"creating-the-azure-iot-edge-converter-module\"></a>创建 Azure IoT Edge 转换器模块\r\n\r\n1. 初始化新的 `.NET Core` 类库 C# 项目：\r\n    - 打开命令提示符 (`Windows + R` -> `cmd` -> `enter`)。\r\n    - 导航到要在其中创建 `C#` 项目的文件夹。\r\n    - 键入 **dotnet new classlib -o IoTEdgeConverterModule -f netstandard1.3**。 \r\n    - 此命令在 projects 目录中创建名为 `Class1.cs` 的空类。\r\n2. 键入 **cd IoTEdgeConverterModule**，导航到在其中创建了类库项目的文件夹。\r\n3. 键入 **code** 在 `Visual Studio Code` 中打开该项目。\r\n4. 在 `Visual Studio Code` 中打开项目后，请单击“IoTEdgeConverterModule.csproj”打开下图所示的文件：\r\n\r\n    ![Visual Studio Code 编辑窗口](./media/iot-hub-iot-edge-create-module/vscode-edit-csproj.png)\r\n\r\n5. 在 `PropertyGroup` 结束标记与 `Project` 结束标记之间插入以下代码片段中所示的 `XML` Blob（注意上图中的第六行），然后按 `Ctrl` + `S` 保存文件。\r\n\r\n   ```xml\r\n     <ItemGroup>\r\n       <PackageReference Include=\"Microsoft.Azure.Devices.Gateway.Module.NetStandard\" Version=\"1.0.5\" />\r\n       <PackageReference Include=\"System.Threading.Thread\" Version=\"4.3.0\" />\r\n       <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.2\" />\r\n     </ItemGroup> \r\n   ```\r\n\r\n6. 保存 `.csproj` 文件后，`Visual Studio Code` 应会通过一个 `unresolved dependencies` 对话框予以提示，如下图所示： \r\n\r\n    ![Visual Studio Code 中的还原依赖项对话框](./media/iot-hub-iot-edge-create-module/vscode-restore.png)\r\n\r\n    a) 单击 `Restore` 还原项目 `.csproj` 文件中的所有引用，包括我们添加的 `PackageReferences`。 \r\n\r\n    b) `Visual Studio Code` 会自动在项目的 `obj` 文件夹中创建 `project.assets.json` 文件。 此文件包含项目中用于加速后续还原速度的依赖项的相关信息。\r\n \r\n    >[!NOTE]\r\n    `.NET Core Tools` 现在基于 MSBuild。 这意味着，将会创建 `.csproj` 项目文件而不是 `project.json`。\r\n\r\n    - 如果 `Visual Studio Code` 未提示已成功创建该文件，我们可以手动执行此操作。 按 `Ctrl` + `backtick` 键或使用菜单 `View` -> `Integrated Terminal` 打开 `Visual Studio Code` 集成终端窗口。\r\n    - 在 `Integrated Terminal` 窗口中键入 **dotnet restore**。\r\n    \r\n7. 将 `Class1.cs` 文件重命名为 `BleConverterModule.cs`。 \r\n\r\n    a) 若要重命名文件，请先单击该文件，然后按 `F2` 键。\r\n    \r\n    b) 键入新名称 **BleConverterModule**，如下图所示：\r\n\r\n    ![在 Visual Studio Code 中重命名类](./media/iot-hub-iot-edge-create-module/vscode-rename.png)\r\n\r\n8. 通过将以下代码片段复制并粘贴到 `BleConverterModule.cs` 文件来替换 `BleConverterModule.cs` 文件中的现有代码。\r\n\r\n   ```csharp\r\n   using System;\r\n   using System.Collections.Generic;\r\n   using System.Globalization;\r\n   using System.Linq;\r\n   using System.Text;\r\n   using System.Threading;\r\n   using System.Threading.Tasks;\r\n   using Microsoft.Azure.Devices.Gateway;\r\n   using Newtonsoft.Json;\r\n   \r\n   namespace IoTEdgeConverterModule\r\n   {\r\n       public class BleConverterModule : IGatewayModule, IGatewayModuleStart\r\n       {\r\n           private Broker broker;\r\n           private string configuration;\r\n           private int messageCount;\r\n\r\n           public void Create(Broker broker, byte[] configuration)\r\n           {\r\n               this.broker = broker;\r\n               this.configuration = System.Text.Encoding.UTF8.GetString(configuration);\r\n           }\r\n   \r\n           public void Start()\r\n           {\r\n           }\r\n\r\n           public void Destroy()\r\n           {\r\n           }\r\n\r\n           public void Receive(Message received_message)\r\n           {\r\n               string recMsg = Encoding.UTF8.GetString(received_message.Content, 0, received_message.Content.Length);\r\n               BleData receivedData = JsonConvert.DeserializeObject<BleData>(recMsg);\r\n\r\n               float temperature = float.Parse(receivedData.Temperature, CultureInfo.InvariantCulture.NumberFormat); \r\n               Dictionary<string, string> receivedProperties = received_message.Properties;\r\n            \r\n               Dictionary<string, string> properties = new Dictionary<string, string>();\r\n               properties.Add(\"source\", receivedProperties[\"source\"]);\r\n               properties.Add(\"macAddress\", receivedProperties[\"macAddress\"]);\r\n               properties.Add(\"temperatureAlert\", temperature > 30 ? \"true\" : \"false\");\r\n   \r\n               String content = String.Format(\"{0} \\\"deviceId\\\": \\\"Intel NUC Gateway\\\", \\\"messageId\\\": {1}, \\\"temperature\\\": {2} {3}\", \"{\", ++this.messageCount, temperature, \"}\");\r\n               Message messageToPublish = new Message(content, properties);\r\n   \r\n               this.broker.Publish(messageToPublish);\r\n           }\r\n       }\r\n   }\r\n   ```\r\n\r\n9. 按 `Ctrl` + `S` 保存文件。\r\n\r\n10. 按 `Ctrl` + `N` 键创建名为 `Untitled-1` 的新文件，如下图所示：\r\n\r\n    ![在 Visual Studio Code 中新建文件](./media/iot-hub-iot-edge-create-module/vscode-new-file.png)\r\n\r\n11. 若要反序列化从 `BLE` 模拟设备收到的 `JSON` 对象，请将以下代码复制到 `Untitled-1` 文件代码编辑器窗口。 \r\n\r\n   ```csharp\r\n   using System;\r\n   using Newtonsoft.Json;\r\n\r\n   namespace IoTEdgeConverterModule\r\n   {\r\n       public class BleData\r\n       {\r\n           [JsonProperty(PropertyName = \"temperature\")]\r\n           public string Temperature { get; set; }\r\n       }\r\n   }\r\n   ```\r\n\r\n12. 按 `Ctrl` + `Shift` + `S` 键将文件另存为 `BleData.cs`。\r\n    - 在“另存为”对话框中的 `Save as Type` 下拉菜单内，选择 `C# (*.cs;*.csx)`，如下图所示：\r\n\r\n    ![Visual Studio Code 中的“另存为”对话框](./media/iot-hub-iot-edge-create-module/vscode-save-as.png)\r\n\r\n13. 按 `Ctrl` + `N` 键创建名为 `Untitled-1` 的新文件。\r\n\r\n14. 将以下代码片段复制并粘贴到 `Untitled-1` 文件中。 此类是一个 `Azure IoT Edge` 模块，我们将使用它来输出从 `BleConverterModule` 收到的数据。\r\n\r\n   ```csharp\r\n   using System;\r\n   using System.Collections.Generic;\r\n   using System.Linq;\r\n   using System.Text;\r\n   using System.Threading.Tasks;\r\n   using Microsoft.Azure.Devices.Gateway;\r\n   using Newtonsoft.Json;\r\n   \r\n   namespace PrinterModule\r\n   {\r\n       public class DotNetPrinterModule : IGatewayModule\r\n       {\r\n           private string configuration;\r\n           public void Create(Broker broker, byte[] configuration)\r\n           {\r\n               this.configuration = System.Text.Encoding.UTF8.GetString(configuration);\r\n           }\r\n   \r\n           public void Destroy()\r\n           {\r\n           }\r\n   \r\n           public void Receive(Message received_message)\r\n           {\r\n               string recMsg = System.Text.Encoding.UTF8.GetString(received_message.Content, 0, received_message.Content.Length);\r\n               Dictionary<string, string> receivedProperties = received_message.Properties;\r\n               \r\n               BleConverterData receivedData = JsonConvert.DeserializeObject<BleConverterData>(recMsg);\r\n   \r\n               Console.WriteLine();\r\n               Console.WriteLine(\"Module           : [DotNetPrinterModule]\");\r\n               Console.WriteLine(\"received_message : {0}\", recMsg);\r\n   \r\n               if(received_message.Properties[\"source\"] == \"bleTelemetry\")\r\n               {\r\n                   Console.WriteLine(\"Source           : {0}\", receivedProperties[\"source\"]);\r\n                   Console.WriteLine(\"MAC address      : {0}\", receivedProperties[\"macAddress\"]);\r\n                   Console.WriteLine(\"Temperature Alert: {0}\", receivedProperties[\"temperatureAlert\"]);\r\n                   Console.WriteLine(\"Deserialized Obj : [BleConverterData]\");\r\n                   Console.WriteLine(\"  DeviceId       : {0}\", receivedData.DeviceId);\r\n                   Console.WriteLine(\"  MessageId      : {0}\", receivedData.MessageId);\r\n                   Console.WriteLine(\"  Temperature    : {0}\", receivedData.Temperature);\r\n               }\r\n   \r\n               Console.WriteLine();\r\n           }\r\n       }\r\n   }\r\n   ```\r\n\r\n15. 按 `Ctrl` + `Shift` + `S` 将文件另存为 `DotNetPrinterModule.cs`。\r\n    - 在“另存为”对话框中的 `Save as Type` 下拉菜单内，选择 `C# (*.cs;*.csx)`。\r\n\r\n16. 按 `Ctrl` + `N` 键创建名为 `Untitled-1` 的新文件。\r\n\r\n17. 若要反序列化从 `BleConverterModule` 收到的 `JSON` 对象，请将以下代码片段复制并粘贴到 `Untitled-1` 文件。 \r\n\r\n   ```csharp\r\n   using System;\r\n   using Newtonsoft.Json;\r\n\r\n   namespace PrinterModule\r\n   {\r\n       public class BleConverterData\r\n       {\r\n           [JsonProperty(PropertyName = \"deviceId\")]\r\n           public string DeviceId { get; set; }\r\n   \r\n           [JsonProperty(PropertyName = \"messageId\")]\r\n           public string MessageId { get; set; }\r\n   \r\n           [JsonProperty(PropertyName = \"temperature\")]\r\n           public string Temperature { get; set; }\r\n       }\r\n   }\r\n   ```\r\n\r\n18. 按 `Ctrl` + `Shift` + `S` 将文件另存为 `BleConverterData.cs`。\r\n    - 在“另存为”对话框中的 `Save as Type` 下拉菜单内，选择 `C# (*.cs;*.csx)`。\r\n\r\n19. 按 `Ctrl` + `N` 键创建名为 `Untitled-1` 的新文件。\r\n\r\n20. 将以下代码片段复制并粘贴到 `Untitled-1` 文件中。\r\n\r\n   ```json\r\n   {\r\n       \"loaders\": [\r\n           {\r\n               \"type\": \"dotnetcore\",\r\n               \"name\": \"dotnetcore\",\r\n               \"configuration\": {\r\n                   \"binding.path\": \"dotnetcore.dll\",\r\n                   \"binding.coreclrpath\": \"C:\\\\Program Files\\\\dotnet\\\\shared\\\\Microsoft.NETCore.App\\\\1.1.1\\\\coreclr.dll\",\r\n                   \"binding.trustedplatformassemblieslocation\": \"C:\\\\Program Files\\\\dotnet\\\\shared\\\\Microsoft.NETCore.App\\\\1.1.1\\\\\"\r\n               }\r\n           }\r\n       ],\r\n          \"modules\": [\r\n           {\r\n               \"name\": \"simulated_device\",\r\n               \"loader\": {\r\n                   \"name\": \"native\",\r\n                   \"entrypoint\": {\r\n                       \"module.path\": \"simulated_device.dll\"\r\n                   }\r\n               },\r\n               \"args\": {\r\n                   \"macAddress\": \"01:02:03:03:02:01\",\r\n                   \"messagePeriod\": 500\r\n               }\r\n           },\r\n           {\r\n               \"name\": \"ble_converter_module\",\r\n               \"loader\": {\r\n                   \"name\": \"dotnetcore\",\r\n                   \"entrypoint\": {\r\n                       \"assembly.name\": \"IoTEdgeConverterModule\",\r\n                       \"entry.type\": \"IoTEdgeConverterModule.BleConverterModule\"\r\n                   }\r\n               },\r\n               \"args\": \"\"\r\n           },\r\n           {\r\n               \"name\": \"printer_module\",\r\n               \"loader\": {\r\n                   \"name\": \"dotnetcore\",\r\n                   \"entrypoint\": {\r\n                       \"assembly.name\": \"IoTEdgeConverterModule\",\r\n                       \"entry.type\": \"PrinterModule.DotNetPrinterModule\"\r\n                   }\r\n               },\r\n               \"args\": \"\"\r\n           }\r\n       ],\r\n       \"links\": [\r\n           {\r\n               \"source\": \"simulated_device\", \"sink\": \"ble_converter_module\"\r\n           },\r\n           {\r\n               \"source\": \"ble_converter_module\", \"sink\": \"printer_module\"\r\n           }\r\n   ]\r\n   }\r\n   ```\r\n\r\n21. 按 `Ctrl` + `Shift` + `S` 将文件另存为 `gw-config.json`。\r\n    - 在“另存为”对话框中的 `Save as Type` 下拉菜单内，选择 `JSON (*.json;*.bowerrc;*.jshintrc;*.jscsrc;*.eslintrc;*.babelrc;*webmanifest)`。\r\n\r\n22. 若要启用向输出目录复制配置文件，请使用以下 XML Blob 更新 `IoTEdgeConverterModule.csproj`：\r\n\r\n   ```xml\r\n     <ItemGroup>\r\n       <None Update=\"gw-config.json\" CopyToOutputDirectory=\"PreserveNewest\" />\r\n     </ItemGroup>\r\n   ```\r\n    \r\n   - 更新的 `IoTEdgeConverterModule.csproj` 应如下图所示：\r\n\r\n    ![Visual Studio Code 中已更新的 .csproj 文件](./media/iot-hub-iot-edge-create-module/vscode-update-csproj.png)\r\n\r\n23. 按 `Ctrl` + `N` 键创建名为 `Untitled-1` 的新文件。\r\n\r\n24. 将以下代码片段复制并粘贴到 `Untitled-1` 文件中。\r\n\r\n   ```powershell\r\n   Copy-Item -Path $env:userprofile\\.nuget\\packages\\microsoft.azure.devices.gateway.native.windows.x64\\1.1.3\\runtimes\\win-x64\\native\\* -Destination .\\bin\\Debug\\netstandard1.3\r\n   Copy-Item -Path $env:userprofile\\.nuget\\packages\\system.runtime.serialization.formatters\\4.3.0\\lib\\netstandard1.4\\* -Destination .\\bin\\Debug\\netstandard1.3\r\n   Copy-Item -Path $env:userprofile\\.nuget\\packages\\system.runtime.serialization.primitives\\4.3.0\\lib\\netstandard1.3\\* -Destination .\\bin\\Debug\\netstandard1.3\r\n   Copy-Item -Path $env:userprofile\\.nuget\\packages\\newtonsoft.json\\10.0.2\\lib\\netstandard1.3\\* -Destination .\\bin\\Debug\\netstandard1.3\r\n   Copy-Item -Path $env:userprofile\\.nuget\\packages\\system.componentmodel.typeconverter\\4.3.0\\lib\\netstandard1.5\\* -Destination .\\bin\\Debug\\netstandard1.3\r\n   Copy-Item -Path $env:userprofile\\.nuget\\packages\\system.collections.nongeneric\\4.3.0\\lib\\netstandard1.3\\* -Destination .\\bin\\Debug\\netstandard1.3\r\n   Copy-Item -Path $env:userprofile\\.nuget\\packages\\system.collections.specialized\\4.3.0\\lib\\netstandard1.3\\* -Destination .\\bin\\Debug\\netstandard1.3\r\n   ```\r\n\r\n25. 按 `Ctrl` + `Shift` + `S` 将文件另存为 `binplace.ps1`。\r\n    - 在“另存为”对话框中的 `Save as Type` 下拉菜单内，选择 `PowerShell (*.ps1;*.psm1;*.psd1;*.pssc;*.psrc)`。\r\n\r\n26. 按 `Ctrl` + `Shift` + `B` 键生成项目。 首次生成项目时，`Visual Studio Code` 会使用 `No build task defined.` 对话框做出提示，如下图所示：\r\n\r\n    ![Visual Studio Code 中的生成任务对话框](./media/iot-hub-iot-edge-create-module/vscode-build-task.png)\r\n\r\n    a) 单击 `Configure Build Task` 按钮。\r\n\r\n    b) 在 `Select a Task Runner` 对话框下拉菜单中， 选择 `.NET Core`，如下图所示： \r\n\r\n    ![Visual Studio Code 中的选择任务对话框](./media/iot-hub-iot-edge-create-module/vscode-build-task-runner.png)\r\n\r\n    c) 单击 `.NET Core` 项在 `.vscode` 目录中创建 `tasks.json` 文件，然后在 `code editor` 窗口中打开该文件。 不需要修改此文件，因此请关闭选项卡。\r\n\r\n27.  按 `Ctrl` + `backtick` 键或使用菜单 `View` -> `Integrated Terminal` 打开 `Visual Studio Code` 集成终端窗口，然后在 `PowerShell` 命令提示符中键入 **.\\binplace.ps1**。 此命令将我们的所有依赖项复制到输出目录。\r\n\r\n28. 键入 **cd .\\bin\\Debug\\netstandard1.3**，在 `Integrated Terminal` 窗口中导航到 projects 输出目录。\r\n\r\n29. 在 `Integrated Terminal` 窗口提示符中键入 **.\\gw.exe gw-config.json** 运行示例项目。 \r\n    - 如果已严格遵照本教程中的步骤，则现在应已运行 `Azure IoT Edge BLE Data Converter Module` 示例项目，如下图所示：\r\n    \r\n        ![在 Visual Studio Code 中运行的模拟设备示例](./media/iot-hub-iot-edge-create-module/vscode-run.png)\r\n    \r\n    - 若要终止应用程序，请按 `<Enter>` 键。\r\n\r\n>[!IMPORTANT]\r\n不建议使用 `Ctrl` + `C` 终止 `IoT Edge` 网关应用程序（即 **gw.exe**）， 因为此操作可能会导致该进程异常终止。\r\n\r\n"}