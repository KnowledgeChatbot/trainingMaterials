{"Title":"使用 Azure IoT 中心更新设备固件 (Java/Java)","Description":"如何使用 Azure IoT 中心上的设备管理进行设备固件更新。 使用用于 Java 的 Azure IoT 设备 SDK 来实现模拟设备应用，以及实现可触发固件更新的服务应用。","Content":"# <a name=\"use-device-management-to-initiate-a-device-firmware-update-javajava\"></a>使用设备管理启动设备固件更新 (Java/Java)\r\n[!INCLUDE [iot-hub-selector-firmware-update](../../includes/iot-hub-selector-firmware-update.md)]\r\n\r\n在[设备管理入门][lnk-dm-getstarted]教程中，已了解如何使用[设备孪生][lnk-devtwin]和[直接方法][lnk-c2dmethod]基元来远程重新启动设备。 本教程使用相同的 IoT 中心基元，并演示如何进行端到端模拟固件更新。  此模式在用于 [Raspberry Pi device implementation sample][lnk-rpi-implementation]（Raspberry Pi 设备实现示例）的固件更新实现中使用。\r\n\r\n本教程演示如何：\r\n\r\n* 创建一个 Java 控制台应用，用于通过 IoT 中心调用模拟设备应用中的 **firmwareUpdate** 直接方法。\r\n* 创建一个 Java 控制台应用，用于模拟设备并实现 **firmwareUpdate** 直接方法。 该方法会启动等待下载固件映像、下载固件映像以及最后应用固件映像的多阶段过程。 在更新的每个阶段，设备都使用报告的属性来报告进度。\r\n\r\n本教程结束时，可获得两个 Java 控制台应用：\r\n\r\n**firmware-update**：在模拟设备中调用直接方法，显示响应，并定期显示报告属性的更新\r\n\r\n**simulated-device**：使用先前创建的设备标识连接到 IoT 中心，接收 firmwareUpdate 直接方法调用，并运行整个固件更新模拟过程\r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* 最新的 [Java SE 开发工具包 8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) \r\n* [Maven 3](https://maven.apache.org/install.html) \r\n* 有效的 Azure 帐户。 （如果没有帐户，只需花费几分钟就能创建一个[试用帐户][lnk-free-trial]。）\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity-portal](../../includes/iot-hub-get-started-create-device-identity-portal.md)]\r\n\r\n## <a name=\"trigger-a-remote-firmware-update-on-the-device-using-a-direct-method\"></a>使用直接方法在设备上触发远程固件更新\r\n本部分创建一个 Java 控制台应用以启动设备上的远程固件更新。 该应用使用直接方法来启动更新，并使用设备孪生查询定期获取活动固件更新的状态。\r\n\r\n1. 创建一个名为 fw-get-started 的空文件夹。\r\n\r\n1. 在命令提示符下使用以下命令，在 fw-get-started 文件夹中创建一个名为 **firmware-update** 的 Maven 项目。 请注意，这是一条很长的命令：\r\n\r\n    `mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=firmware-update -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false`\r\n\r\n1. 在命令提示符下，导航到 firmware-update 文件夹。\r\n\r\n1. 使用文本编辑器打开 firmware-update 文件夹中的 pom.xml 文件，并在 **dependencies** 节点中添加以下依赖项。 此依赖项使得你可以使用应用中的 iot-service-client 包来与 IoT 中心进行通信：\r\n\r\n    ```xml\r\n    <dependency>\r\n      <groupId>com.microsoft.azure.sdk.iot</groupId>\r\n      <artifactId>iot-service-client</artifactId>\r\n      <version>1.5.22</version>\r\n      <type>jar</type>\r\n    </dependency>\r\n    ```\r\n\r\n    > [!NOTE]\r\n    > 可以使用 [Maven 搜索](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22iot-service-client%22%20g%3A%22com.microsoft.azure.sdk.iot%22)检查是否有最新版本的 **iot-service-client**。\r\n\r\n1. 在 **dependencies** 节点后添加以下 **build** 节点。 此配置指示 Maven 使用 Java 1.8 来生成应用：\r\n\r\n    ```xml\r\n    <build>\r\n      <plugins>\r\n        <plugin>\r\n          <groupId>org.apache.maven.plugins</groupId>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.3</version>\r\n          <configuration>\r\n            <source>1.8</source>\r\n            <target>1.8</target>\r\n          </configuration>\r\n        </plugin>\r\n      </plugins>\r\n    </build>\r\n    ```\r\n\r\n1. 保存并关闭 pom.xml 文件。\r\n\r\n1. 使用文本编辑器打开 firmware-update\\src\\main\\java\\com\\mycompany\\app\\App.java 源文件。\r\n\r\n1. 在该文件中添加以下 **import** 语句：\r\n\r\n    ```java\r\n    import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceMethod;\r\n    import com.microsoft.azure.sdk.iot.service.devicetwin.MethodResult;\r\n    import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\r\n    import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\r\n    import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\r\n\r\n    import java.io.IOException;\r\n    import java.util.concurrent.TimeUnit;\r\n    ```\r\n\r\n1. 将以下类级变量添加到 **App** 类。 将 {youriothubconnectionstring} 替换为在“创建 IoT 中心”部分记下的 IoT 中心连接字符串：\r\n\r\n    ```java\r\n    public static final String iotHubConnectionString = \"{youriothubconnectionstring}\";\r\n    public static final String deviceId = \"myDeviceId\";\r\n\r\n    private static final String methodName = \"firmwareUpdate\";\r\n    private static final Long responseTimeout = TimeUnit.SECONDS.toSeconds(30);\r\n    private static final Long connectTimeout = TimeUnit.SECONDS.toSeconds(5);\r\n    ```\r\n\r\n1. 若要实现一个从设备孪生读取报告属性的方法，请将以下代码添加到 **App** 类：\r\n\r\n    ```java\r\n    public static void ShowReportedProperties() \r\n    {\r\n        try \r\n        {\r\n          DeviceTwin deviceTwins = DeviceTwin.createFromConnectionString(iotHubConnectionString);\r\n          DeviceTwinDevice twinDevice = new DeviceTwinDevice(deviceId);\r\n          \r\n          Boolean firmwareUpdated = false;\r\n          Integer timeoutCycle = 0;\r\n    \r\n          while (!firmwareUpdated)\r\n          {\r\n            if (timeoutCycle > 5)\r\n            {\r\n              System.out.println(\"Operation timed out\");\r\n              break;\r\n            }\r\n    \r\n            Thread.sleep(1000);\r\n              \r\n            deviceTwins.getTwin(twinDevice);\r\n    \r\n            String reportedProperties = twinDevice.reportedPropertiesToString();\r\n              \r\n            if(reportedProperties.contains(\"status=waiting\"))\r\n            {\r\n              System.out.println(\"Waiting on device...\");\r\n            }\r\n            else if(reportedProperties.contains(\"status=downloadComplete\"))\r\n            {\r\n              System.out.println(\"Download complete, applying firmware...\");\r\n            }\r\n            else if (reportedProperties.contains(\"status=applyComplete\"))\r\n            {\r\n              System.out.println(\"Firmware applied\");\r\n              System.out.println(\"Get reported properties from device twin\");\r\n              System.out.println(twinDevice.reportedPropertiesToString());\r\n              firmwareUpdated = true;\r\n            }\r\n            else\r\n            {\r\n              timeoutCycle++;\r\n            }\r\n          }\r\n        } catch (Exception ex) {\r\n            System.out.println(\"Exception reading reported properties: \" + ex.getMessage());\r\n        }\r\n    }\r\n    ```\r\n\r\n1. 修改 main 方法的签名，引发以下异常：\r\n\r\n    ```java\r\n    public static void main( String[] args ) throws IOException\r\n    ```\r\n\r\n1. 若要在模拟设备上调用 firmwareUpdate 直接方法，请将以下代码添加到 **main** 方法：\r\n\r\n    ```java\r\n    DeviceMethod methodClient = DeviceMethod.createFromConnectionString(iotHubConnectionString);\r\n\r\n    try\r\n    {\r\n      String payload = \"https://someurl\";\r\n      \r\n      System.out.println(\"Invoked firmware update on device.\");\r\n      System.out.println(\"Sent URL: \" + payload);\r\n      \r\n      MethodResult result = methodClient.invoke(deviceId, methodName, responseTimeout, connectTimeout, payload);\r\n\r\n      if(result == null)\r\n      {\r\n        throw new IOException(\"Invoke direct method reboot returns null\");\r\n      }\r\n\r\n      System.out.println(\"Status for device:   \" + result.getStatus());\r\n      System.out.println(\"Message from device: \" + result.getPayload());\r\n    }\r\n    catch (IotHubException e)\r\n    {\r\n      System.out.println(e.getMessage());\r\n    }\r\n    ```\r\n\r\n1. 若要从模拟设备轮询报告属性，请将以下代码添加到 **main** 方法：\r\n\r\n    ```java\r\n    ShowReportedProperties();\r\n    ```\r\n\r\n1. 若要允许停止应用，请在“main”方法中添加以下代码：\r\n\r\n    ```java\r\n    System.out.println(\"Press ENTER to exit.\");\r\n    System.in.read();\r\n    System.out.println(\"Shutting down sample...\");\r\n    ```\r\n\r\n1. 保存并关闭 firmware-update\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。\r\n\r\n1. 生成 **firmware-update** 后端应用并更正任何错误。 在命令提示符下，导航到 firmware-update 文件夹并运行以下命令：\r\n\r\n    `mvn clean package -DskipTests`\r\n\r\n## <a name=\"simulate-a-device-to-handle-direct-method-calls\"></a>模拟某个设备来处理直接方法调用\r\n本部分创建一个可以接收 firmwareUpdate 直接方法的 Java 控制台模拟设备应用。 该应用随后会运行整个多状态过程，并使用 reportedProperties 来传递状态，从而模拟固件更新。\r\n\r\n1. 在命令提示符下使用以下命令，在 fw-get-started 文件夹中创建名为 **simulated-device** 的 Maven 项目。 请注意，这是一条很长的命令：\r\n\r\n    `mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=simulated-device -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false`\r\n\r\n1. 在命令提示符下，浏览到 simulated-device 文件夹。\r\n\r\n1. 使用文本编辑器打开 firmware-update 文件夹中的 pom.xml 文件，并在 **dependencies** 节点中添加以下依赖项。 此依赖项使得你可以使用应用中的 iot-service-client 包来与 IoT 中心进行通信：\r\n\r\n    ```xml\r\n    <dependency>\r\n      <groupId>com.microsoft.azure.sdk.iot</groupId>\r\n      <artifactId>iot-device-client</artifactId>\r\n      <version>1.3.32</version>\r\n      <type>jar</type>\r\n    </dependency>\r\n    ```\r\n\r\n    > [!NOTE]\r\n    > 可以使用 [Maven 搜索](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22iot-device-client%22%20g%3A%22com.microsoft.azure.sdk.iot%22)检查是否有最新版本的 **iot-device-client**。\r\n\r\n1. 在 **dependencies** 节点后添加以下 **build** 节点。 此配置指示 Maven 使用 Java 1.8 来生成应用：\r\n\r\n    ```xml\r\n    <build>\r\n      <plugins>\r\n        <plugin>\r\n          <groupId>org.apache.maven.plugins</groupId>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.3</version>\r\n          <configuration>\r\n            <source>1.8</source>\r\n            <target>1.8</target>\r\n          </configuration>\r\n        </plugin>\r\n      </plugins>\r\n    </build>\r\n    ```\r\n\r\n1. 保存并关闭 pom.xml 文件。\r\n\r\n1. 使用文本编辑器打开 simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java 源文件。\r\n\r\n1. 在该文件中添加以下 **import** 语句：\r\n\r\n    ```java\r\n    import com.microsoft.azure.sdk.iot.device.*;\r\n    import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\r\n\r\n    import java.io.IOException;\r\n    import java.net.URISyntaxException;\r\n    import java.time.LocalDateTime;\r\n    import java.util.Scanner;\r\n    import java.util.Set;\r\n    import java.util.HashSet;\r\n    import java.util.HashMap;\r\n    ```\r\n\r\n1. 将以下类级变量添加到 **App** 类。 使用“创建设备标识”部分所述的设备连接字符串替换 **{yourdeviceconnectionstring}**：\r\n\r\n    ```java\r\n    private static final int METHOD_SUCCESS = 200;\r\n    private static final int METHOD_NOT_DEFINED = 404;\r\n\r\n    private static IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\r\n    private static String connString = \"{yourdeviceconnectionstring\";\r\n    private static DeviceClient client;\r\n\r\n    private static String downloadURL = \"unknown\";\r\n    ```\r\n\r\n1. 若要实现直接方法功能，请通过将以下嵌套类添加到 **App** 类来提供回调：\r\n\r\n    ```java\r\n    protected static class DirectMethodStatusCallback implements IotHubEventCallback\r\n    {\r\n      public void execute(IotHubStatusCode status, Object context)\r\n      {\r\n        System.out.println(\"IoT Hub responded to device method operation with status \" + status.name());\r\n      }\r\n    }\r\n    protected static class DirectMethodCallback implements com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback\r\n    {\r\n      @Override\r\n      public DeviceMethodData call(String methodName, Object methodData, Object context)\r\n      {\r\n        DeviceMethodData deviceMethodData;\r\n        switch (methodName)\r\n        {\r\n          case \"firmwareUpdate\" :\r\n          {\r\n            System.out.println(\"Response to method '\" + methodName + \"' sent successfully\");\r\n    \r\n            downloadURL = new String((byte[])methodData);\r\n    \r\n            int status = METHOD_SUCCESS;\r\n            System.out.println(\"Starting firmware update\");\r\n            deviceMethodData = new DeviceMethodData(status, \"Started firmware update\");\r\n            FirmwareUpdateThread firmwareUpdateThread = new FirmwareUpdateThread();\r\n            Thread t = new Thread(firmwareUpdateThread);\r\n            t.start();\r\n            break;\r\n          }\r\n          default:\r\n          {\r\n            int status = METHOD_NOT_DEFINED;\r\n            deviceMethodData = new DeviceMethodData(status, \"Not defined direct method \" + methodName);\r\n          }\r\n        }\r\n        return deviceMethodData;\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 若要实现设备孪生功能，请通过将以下嵌套类添加到 **App** 类来提供回调：\r\n\r\n    ```java\r\n    protected static class DeviceTwinStatusCallback implements IotHubEventCallback\r\n    {\r\n      public void execute(IotHubStatusCode status, Object context)\r\n      {\r\n        System.out.println(\"IoT Hub responded to device twin operation with status \" + status.name());\r\n      }\r\n    }\r\n    protected static class PropertyCallback implements PropertyCallBack<String, String>\r\n    {\r\n      public void PropertyCall(String propertyKey, String propertyValue, Object context)\r\n      {\r\n        System.out.println(\"PropertyKey:     \" + propertyKey);\r\n        System.out.println(\"PropertyKvalue:  \" + propertyKey);\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 若要实现固件更新，请将以下嵌套类添加到 **App** 类：\r\n\r\n    ```java\r\n    protected static class FirmwareUpdateThread implements Runnable {\r\n      public void run() {\r\n        try {      \r\n          HashMap initialUpdate = new HashMap();\r\n          Property sentProperty = new Property(\"firmwareUpdate\", initialUpdate);\r\n          Set<Property> sentPackage = new HashSet<Property>();\r\n          \r\n          System.out.println(\"Downloading from \" + downloadURL);\r\n    \r\n          initialUpdate.put(\"status\", \"waiting\");\r\n          initialUpdate.put(\"fwPackageUri\", downloadURL);\r\n          initialUpdate.put(\"startedWaitingTime\", LocalDateTime.now().toString());   \r\n          sentPackage.add(sentProperty);\r\n    \r\n          client.sendReportedProperties(sentPackage);\r\n    \r\n          Thread.sleep(5000);\r\n    \r\n          System.out.println(\"Download complete\");\r\n    \r\n          HashMap downloadUpdate = new HashMap();\r\n          downloadUpdate.put(\"status\",\"downloadComplete\");\r\n          downloadUpdate.put(\"downloadCompleteTime\", LocalDateTime.now().toString());\r\n          downloadUpdate.put(\"startedApplyingImage\", LocalDateTime.now().toString());\r\n          sentProperty.setValue(downloadUpdate);\r\n    \r\n          client.sendReportedProperties(sentPackage);\r\n    \r\n          Thread.sleep(5000);\r\n    \r\n          System.out.println(\"Apply complete\");\r\n    \r\n          HashMap applyUpdate = new HashMap();\r\n          applyUpdate.put(\"status\",\"applyComplete\");\r\n          applyUpdate.put(\"lastFirmwareUpdate\", LocalDateTime.now().toString());\r\n          sentProperty.setValue(applyUpdate);\r\n    \r\n          client.sendReportedProperties(sentPackage);\r\n    \r\n          Thread.sleep(5000);\r\n    \r\n          HashMap resetUpdate = new HashMap();\r\n          applyUpdate.put(\"status\",\"reset\");\r\n          sentProperty.setValue(resetUpdate);\r\n    \r\n          client.sendReportedProperties(sentPackage);\r\n        }\r\n        catch (Exception ex) {\r\n          System.out.println(\"Exception in reboot thread: \" + ex.getMessage());\r\n        }\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 修改 main 方法的签名，引发以下异常：\r\n\r\n    ```java\r\n    public static void main(String[] args) throws IOException, URISyntaxException\r\n    ```\r\n\r\n1. 若要启动直接方法和设备孪生例程，请将以下代码添加到 **main** 方法：\r\n\r\n    ```java\r\n    client = new DeviceClient(connString, protocol);\r\n\r\n    try\r\n    {\r\n      client.open();\r\n      client.subscribeToDeviceMethod(new DirectMethodCallback(), null, new DirectMethodStatusCallback(), null);\r\n      client.startDeviceTwin(new DeviceTwinStatusCallback(), null, new PropertyCallback(), null);\r\n      System.out.println(\"Client connected to IoT Hub.  Waiting for firmwareUpdate direct method.\");\r\n    }\r\n    catch (Exception e)\r\n    {\r\n      System.out.println(\"On exception, shutting down \\n\" + \" Cause: \" + e.getCause() + \" \\n\" +  e.getMessage());\r\n      client.close();\r\n      System.out.println(\"Shutting down...\");\r\n    }\r\n    ```\r\n\r\n1. 若要能够停止应用，请将以下代码添加到 **main** 方法的末尾：\r\n\r\n    ```java\r\n    System.out.println(\"Press any key to exit...\");\r\n    Scanner scanner = new Scanner(System.in);\r\n    scanner.nextLine();\r\n    scanner.close();\r\n    client.close();\r\n    System.out.println(\"Shutting down...\");\r\n    ```\r\n\r\n1. 保存并关闭 simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。\r\n\r\n1. 生成 **simulated-device** 应用并更正任何错误。 在命令提示符下，导航到 simulated-device 文件夹并运行以下命令：\r\n\r\n    `mvn clean package -DskipTests`\r\n\r\n## <a name=\"run-the-apps\"></a>运行应用\r\n现在，已准备就绪，可以运行应用。\r\n\r\n1. 在命令提示符下，在 **simulated-device** 文件夹中运行以下命令，开始侦听固件更新直接方法。\r\n   \r\n    `mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"`\r\n\r\n1. 在命令提示符下，在 **firmware-update** 文件夹中运行以下命令，从 IoT 中心调用固件更新并查询模拟设备上的设备孪生：\r\n\r\n    `mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"`\r\n\r\n3. 可在控制台中看到对应于直接方法的模拟设备。\r\n\r\n    ![已成功更新固件][img-fwupdate]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n在本教程中，直接触发了设备的远程固件更新，并使用了报告属性跟踪固件更新的进度。\r\n\r\n若要了解如何扩展 IoT 解决方案并在多个设备上计划方法调用，请参阅 [Schedule and broadcast jobs][lnk-tutorial-jobs] （计划和广播作业）教程。\r\n\r\n<!-- images -->\r\n[img-fwupdate]: ./media/iot-hub-java-java-firmware-update/firmwareUpdated.png\r\n\r\n[lnk-devtwin]: iot-hub-devguide-device-twins.md\r\n[lnk-c2dmethod]: iot-hub-devguide-direct-methods.md\r\n[lnk-dm-getstarted]: iot-hub-java-java-device-management-getstarted.md\r\n[lnk-tutorial-jobs]: iot-hub-java-java-schedule-jobs.md\r\n\r\n[lnk-free-trial]: http://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-transient-faults]: https://msdn.microsoft.com/library/hh680901(v=pandp.50).aspx\r\n[lnk-rpi-implementation]: https://github.com/Azure/azure-iot-sdk-c/tree/master/iothub_client/samples/iothub_client_sample_mqtt_dm/pi_device"}