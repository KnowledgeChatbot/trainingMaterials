{"Title":"使用 Azure IoT 中心的直接方法 (.NET/Node)","Description":"如何使用 Azure IoT 中心直接方法。 使用适用于 Node.js 的 Azure IoT 设备 SDK 实现包含直接方法的模拟设备应用，并使用适用于 .NET 的 Azure IoT 服务 SDK 实现调用直接方法的服务应用。","Content":"# <a name=\"use-direct-methods-netnode\"></a>使用直接方法(.NET/Node)\r\n[!INCLUDE [iot-hub-selector-c2d-methods](../../includes/iot-hub-selector-c2d-methods.md)]\r\n\r\n在本教程中，我们开发 .NET 和 Node.js 控制台应用：\r\n\r\n* **CallMethodOnDevice.sln**：一个 .NET 后端应用，可调用模拟设备应用上的方法并显示响应。\r\n* **SimulatedDevice.js**：一个 Node.js 应用，可模拟使用早先创建的设备标识连接到 IoT 中心的设备，并响应通过云调用的方法。\r\n\r\n> [!NOTE]\r\n> [Azure IoT SDK][lnk-hub-sdks] 一文提供了各种 Azure IoT SDK 的相关信息，用户可以使用这些 SDK 构建可在设备和解决方案后端上运行的应用程序。\r\n> \r\n> \r\n\r\n要完成本教程，需要：\r\n\r\n* Visual Studio 2015 或 Visual Studio 2017。\r\n* Node.js 版本 4.0.x 或更高版本。\r\n* 有效的 Azure 帐户。 （如果没有帐户，只需花费几分钟就能创建一个[试用帐户][lnk-free-trial]。）\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r\n\r\n## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r\n在本部分，用户需创建一个 Node.js 控制台应用，用于响应解决方案后端调用的方法。\r\n\r\n1. 新建名为 **simulateddevice**的空文件夹。 在 **simulateddevice** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。 接受所有默认值：\r\n\r\n    ```\r\n    npm init\r\n    ```\r\n2. 在 **simulateddevice** 文件夹的命令提示符处，运行下述命令以安装 **azure-iot-device** 和 **azure-iot-device-mqtt** 包：\r\n\r\n    ```\r\n    npm install azure-iot-device azure-iot-device-mqtt --save\r\n    ```\r\n3. 使用文本编辑器在 **simulateddevice** 文件夹中创建一个文件，并将其命名为 **SimulatedDevice.js**。\r\n4. 在 **SimulatedDevice.js** 文件的开头添加以下 `require` 语句：\r\n\r\n    ```\r\n    'use strict';\r\n\r\n    var Mqtt = require('azure-iot-device-mqtt').Mqtt;\r\n    var DeviceClient = require('azure-iot-device').Client;\r\n    ```\r\n5. 添加 **connectionString** 变量，并使用它创建 **DeviceClient** 实例。 将 **{device connection string}** 替换为在“创建设备标识”部分生成的设备连接字符串：\r\n\r\n    ```\r\n    var connectionString = '{device connection string}';\r\n    var client = DeviceClient.fromConnectionString(connectionString, Mqtt);\r\n    ```\r\n6. 添加以下函数，实现设备上的直接方法：\r\n\r\n    ```\r\n    function onWriteLine(request, response) {\r\n        console.log(request.payload);\r\n\r\n        response.send(200, 'Input was written to log.', function(err) {\r\n            if(err) {\r\n                console.error('An error occurred when sending a method response:\\n' + err.toString());\r\n            } else {\r\n                console.log('Response to method \\'' + request.methodName + '\\' sent successfully.' );\r\n            }\r\n        });\r\n    }\r\n    ```\r\n7. 打开与 IoT 中心的连接并初始化方法侦听器：\r\n\r\n    ```\r\n    client.open(function(err) {\r\n        if (err) {\r\n            console.error('could not open IotHub client');\r\n        }  else {\r\n            console.log('client opened');\r\n            client.onDeviceMethod('writeLine', onWriteLine);\r\n        }\r\n    });\r\n    ```\r\n8. 保存并关闭 **SimulatedDevice.js** 文件。\r\n\r\n> [!NOTE]\r\n> 为简单起见，本教程不实现任何重试策略。 在生产代码中，应按 MSDN 文章 [暂时性故障处理][lnk-transient-faults]中所述实施重试策略（例如连接重试）。\r\n> \r\n> \r\n\r\n## <a name=\"call-a-direct-method-on-a-device\"></a>在设备上调用直接方法\r\n在本部分中，用户需创建一个 .NET 控制台应用，以便调用模拟设备应用中的方法，并显示响应。\r\n\r\n1. 在 Visual Studio 中，使用“**控制台应用程序**”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 确保 .NET Framework 版本为 4.5.1 或更高。 将项目命名为 **CallMethodOnDevice**。\r\n\r\n    ![新的 Visual C# Windows 经典桌面项目][10]\r\n2. 在“解决方案资源管理器”中，右键单击“CallMethodOnDevice”项目，并单击“管理 NuGet 包...”。\r\n3. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索 **microsoft.azure.devices**，选择“安装”以安装 **Microsoft.Azure.Devices** 包，并接受使用条款。 此过程会下载、安装 [Azure IoT 服务 SDK][lnk-nuget-service-sdk] NuGet 包及其依赖项并添加对它的引用。\r\n\r\n    ![“NuGet 包管理器”窗口][11]\r\n\r\n4. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r\n\r\n    ```\r\n    using System.Threading.Tasks;\r\n    using Microsoft.Azure.Devices;\r\n    ```\r\n5. 将以下字段添加到 **Program** 类。 将占位符值替换为在上一部分中为中心创建的 IoT 中心连接字符串。\r\n\r\n    ```\r\n    static ServiceClient serviceClient;\r\n    static string connectionString = \"{iot hub connection string}\";\r\n    ```\r\n6. 将以下方法添加到 **Program** 类：\r\n\r\n    ```\r\n    private static async Task InvokeMethod()\r\n    {\r\n        var methodInvocation = new CloudToDeviceMethod(\"writeLine\") { ResponseTimeout = TimeSpan.FromSeconds(30) };\r\n        methodInvocation.SetPayloadJson(\"'a line to be written'\");\r\n\r\n        var response = await serviceClient.InvokeDeviceMethodAsync(\"myDeviceId\", methodInvocation);\r\n\r\n        Console.WriteLine(\"Response status: {0}, payload:\", response.Status);\r\n        Console.WriteLine(response.GetPayloadAsJson());\r\n    }\r\n    ```\r\n\r\n    此方法在 `myDeviceId` 设备上调用名为 `writeLine` 的直接方法。 然后将设备提供的响应写入到控制台。 请注意，如何指定设备响应的超时值。\r\n7. 最后，在 **Main** 方法中添加以下行：\r\n\r\n    ```\r\n    serviceClient = ServiceClient.CreateFromConnectionString(connectionString);\r\n    InvokeMethod().Wait();\r\n    Console.WriteLine(\"Press Enter to exit.\");\r\n    Console.ReadLine();\r\n    ```\r\n\r\n## <a name=\"run-the-applications\"></a>运行应用程序\r\n现在，已准备就绪，可以运行应用程序了。\r\n\r\n1. 在 Visual Studio 的“解决方案资源管理器”中右键单击解决方案，并单击“设置启动项目...”。选择“单个启动项目”，并在下拉菜单中选择“CallMethodOnDevice”项目。\r\n\r\n2. 在 **simulateddevice** 文件夹的命令提示符处运行以下命令，开始侦听向从 IoT 中心发出的方法调用：\r\n\r\n    ```\r\n    node SimulatedDevice.js\r\n    ```\r\n   等待模拟设备打开： ![][7]\r\n2. 设备已连接，正在等待方法调用，此时可运行 .NET **CallMethodOnDevice** 应用，调用模拟设备应用中的方法。 此时会看到写入控制台的设备响应。\r\n\r\n    ![][8]\r\n4. 然后，该设备通过输出此消息来响应该方法：\r\n\r\n    ![][9]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n本教程中，在 Azure 门户中配置了新的 IoT 中心，并在 IoT 中心的标识注册表中创建了设备标识。 已通过此设备标识启用模拟设备应用的相关功能，使之能够响应通过云调用的方法。 还创建了一个应用，用于调用设备上的方法并显示来自设备的响应。 \r\n\r\n若要继续了解 IoT 中心入门知识并浏览其他 IoT 方案，请参阅：\r\n\r\n* [IoT 中心入门]\r\n* [Schedule jobs on multiple devices（在多台设备上计划作业）][lnk-devguide-jobs]\r\n\r\n若要了解如何扩展 IoT 解决方案并在多个设备上计划方法调用，请参阅 [Schedule and broadcast jobs][lnk-tutorial-jobs] （计划和广播作业）教程。\r\n\r\n<!-- Images. -->\r\n[7]: ./media/iot-hub-csharp-node-direct-methods/run-simulated-device.png\r\n[8]: ./media/iot-hub-csharp-node-direct-methods/netserviceapp.png\r\n[9]: ./media/iot-hub-csharp-node-direct-methods/methods-output.png\r\n\r\n[10]: ./media/iot-hub-csharp-node-direct-methods/direct-methods-csharp1.png\r\n[11]: ./media/iot-hub-csharp-node-direct-methods/direct-methods-csharp2.png\r\n\r\n<!-- Links -->\r\n[lnk-transient-faults]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r\n\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/blob/master/doc/node-devbox-setup.md\r\n\r\n[lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-portal]: https://portal.azure.cn/\r\n[lnk-nuget-service-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\r\n\r\n[lnk-devguide-jobs]: ./iot-hub-devguide-jobs.md\r\n[lnk-tutorial-jobs]: ./iot-hub-node-node-schedule-jobs.md\r\n[lnk-devguide-methods]: ./iot-hub-devguide-direct-methods.md\r\n[lnk-devguide-mqtt]: ./iot-hub-mqtt-support.md\r\n\r\n[Send Cloud-to-Device messages with IoT Hub]: ./iot-hub-csharp-csharp-c2d.md\r\n[Process Device-to-Cloud messages]: ./iot-hub-csharp-csharp-process-d2c.md\r\n[IoT 中心入门]: ./iot-hub-node-node-getstarted.md\r\n\r\n\r\n<!--Update_Description: update wording-->"}