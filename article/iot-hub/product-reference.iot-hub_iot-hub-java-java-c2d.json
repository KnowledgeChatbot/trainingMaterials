{"Title":"Azure IoT 中心的云到设备的消息 (Java)","Description":"如何使用 Azure IoT SDK for Java 将云到设备的消息从 Azure IoT 中心发送到设备。 修改模拟设备应用以接收云到设备消息，并修改后端应用以发送云到设备消息。","Content":"# <a name=\"send-cloud-to-device-messages-with-iot-hub-java\"></a>使用 IoT 中心发送云到设备的消息 (Java)\r\n\r\n[!INCLUDE [iot-hub-selector-c2d](../../includes/iot-hub-selector-c2d.md)]\r\n\r\nAzure IoT 中心是一项完全托管的服务，有助于在数百万台设备和单个解决方案后端之间实现安全可靠的双向通信。 [Get started with IoT Hub] 教程介绍了如何创建 IoT 中心和在其中预配设备标识，并介绍了如何编写用于发送设备到云消息的模拟设备应用。\r\n\r\n本教程是在 [Get started with IoT Hub]（IoT 中心入门）的基础上编写的。 其中了说明了如何：\r\n\r\n* 通过 IoT 中心，将云到设备的消息从解决方案后端发送到单个设备。\r\n* 在设备上接收云到设备的消息。\r\n* 通过解决方案后端，请求确认收到从 IoT 中心发送到设备的消息（反馈）。\r\n\r\n可以在 [IoT 中心开发人员指南][IoT Hub developer guide - C2D]中找到有关云到设备消息的详细信息。\r\n\r\n在本教程的最后，会运行两个 Java 控制台应用：\r\n\r\n* **simulated-device**，这是在 [Get started with IoT Hub]中创建的应用的修改版本，可连接到 IoT 中心并接收云到设备的消息。\r\n* **send-c2d-messages**，它将“云到设备”消息通过 IoT 中心发送到模拟设备应用，并接收 IoT 中心的送达确认。\r\n\r\n> [!NOTE]\r\n> IoT 中心通过 Azure IoT 设备 SDK 对许多设备平台和语言（包括 C、Java 和 Javascript）提供 SDK 支持。 有关如何将设备连接到本教程的代码以及通常如何连接到 Azure IoT 中心的分步说明，请参阅 [Azure IoT 开发人员中心]。\r\n> \r\n> \r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* [IoT 中心入门](./iot-hub-java-java-getstarted.md)或[处理 IoT 中心设备到云的消息](./iot-hub-java-java-process-d2c.md)教程的完整有效版。\r\n* 最新的 [Java SE 开发工具包 8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\r\n* [Maven 3](https://maven.apache.org/install.html)\r\n+ 有效的 Azure 帐户。 （如果没有帐户，只需花费几分钟就能创建一个[帐户][lnk-free-trial]。）\r\n\r\n## <a name=\"receive-messages-in-the-simulated-device-app\"></a>在模拟设备应用上接收消息\r\n本部分介绍如何修改在 [Get started with IoT Hub]中创建的模拟设备应用，以接收来自 IoT 中心的“云到设备”消息。\r\n\r\n1. 使用文本编辑器打开 simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。\r\n2. 在 **App** 类中添加以下 **MessageCallback** 类作为嵌套类。 设备从 IoT 中心接收消息时，将调用 **execute** 方法。 在本示例中，设备始终通知 IoT 中心它已完成消息：\r\n\r\n    ```java\r\n    private static class AppMessageCallback implements MessageCallback {\r\n      public IotHubMessageResult execute(Message msg, Object context) {\r\n        System.out.println(\"Received message from hub: \"\r\n          + new String(msg.getBytes(), Message.DEFAULT_IOTHUB_MESSAGE_CHARSET));\r\n\r\n        return IotHubMessageResult.COMPLETE;\r\n      }\r\n    }\r\n    ```\r\n3. 修改 **main** 方法，以创建 **AppMessageCallback** 实例，并在打开客户端之前调用 **setMessageCallback** 方法，如下所示：\r\n\r\n    ```java\r\n    client = new DeviceClient(connString, protocol);\r\n\r\n    MessageCallback callback = new AppMessageCallback();\r\n    client.setMessageCallback(callback, null);\r\n    client.open();\r\n    ```\r\n\r\n   > [!NOTE]\r\n   > 如果使用 HTTPS（而不使用 MQTT 或 AMQP）作为传输，则 DeviceClient 实例将不会频繁（频率低于每 25 分钟一次）检查 IoT 中心发来的消息。 有关 MQTT、AMQP 和 HTTPS 支持之间的差异，以及 IoT 中心限制的详细信息，请参阅 [IoT 中心开发人员指南][IoT Hub developer guide - C2D]。\r\n   >\r\n   >\r\n   \r\n4. 若要使用 Maven 构建 **simulated-device** 应用，请在 simulated-device 文件夹的命令提示符处执行以下命令：\r\n\r\n    ```cmd/sh\r\n    mvn clean package -DskipTests\r\n    ```\r\n\r\n## <a name=\"send-a-cloud-to-device-message\"></a>发送云到设备的消息\r\n在本部分中，会创建 Java 控制台应用，用于向模拟设备应用发送“云到设备”消息。 需要使用 [Get started with IoT Hub]教程中添加的设备的设备 ID。 还需要中心的 IoT 中心连接字符串（位于 [Azure 门户]）。\r\n\r\n1. 在命令提示符处使用以下命令，创建名为 **send-c2d-messages** 的 Maven 项目。 请注意，此命令是一条很长的命令：\r\n\r\n    ```cmd/sh\r\n    mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=send-c2d-messages -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\r\n    ```\r\n2. 在命令提示符下，导航到新的 send-c2d-messages 文件夹。\r\n3. 使用文本编辑器，打开 send-c2d-messages 文件夹中的 pom.xml 文件，并在 **dependencies** 节点中添加以下依赖项。 这样即可使用应用程序中的 **iothub-java-service-client** 包来与 IoT 中心服务通信：\r\n\r\n    ```xml\r\n    <dependency>\r\n      <groupId>com.microsoft.azure.sdk.iot</groupId>\r\n      <artifactId>iot-service-client</artifactId>\r\n      <version>1.7.23</version>\r\n    </dependency>\r\n    ```\r\n\r\n    > [!NOTE]\r\n    > 可以使用 [Maven 搜索][lnk-maven-service-search]检查是否有最新版本的 **iot-service-client**。\r\n\r\n4. 保存并关闭 pom.xml 文件。\r\n5. 使用文本编辑器打开 send-c2d-messages\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。\r\n6. 在该文件中添加以下 **import** 语句：\r\n\r\n    ```java\r\n    import com.microsoft.azure.sdk.iot.service.*;\r\n    import java.io.IOException;\r\n    import java.net.URISyntaxException;\r\n    ```\r\n7. 将以下类级变量添加到 **App** 类，并将 **{yourhubconnectionstring}** 和 **{yourdeviceid}** 替换为前面记下的值：\r\n\r\n    ```java\r\n    private static final String connectionString = \"{yourhubconnectionstring}\";\r\n    private static final String deviceId = \"{yourdeviceid}\";\r\n    private static final IotHubServiceClientProtocol protocol = IotHubServiceClientProtocol.AMQPS;\r\n    ```\r\n8. 将 **main**方法替换为以下代码。 此代码用于连接到 IoT 中心，将消息发送到设备，并等待设备已接收并处理消息的通知：\r\n   \r\n    ```java\r\n    public static void main(String[] args) throws IOException,\r\n        URISyntaxException, Exception {\r\n      ServiceClient serviceClient = ServiceClient.createFromConnectionString(\r\n        connectionString, protocol);\r\n\r\n      if (serviceClient != null) {\r\n        serviceClient.open();\r\n        FeedbackReceiver feedbackReceiver = serviceClient\r\n          .getFeedbackReceiver();\r\n        if (feedbackReceiver != null) feedbackReceiver.open();\r\n\r\n        Message messageToSend = new Message(\"Cloud to device message.\");\r\n        messageToSend.setDeliveryAcknowledgement(DeliveryAcknowledgement.Full);\r\n\r\n        serviceClient.send(deviceId, messageToSend);\r\n        System.out.println(\"Message sent to device\");\r\n\r\n        FeedbackBatch feedbackBatch = feedbackReceiver.receive(10000);\r\n        if (feedbackBatch != null) {\r\n          System.out.println(\"Message feedback received, feedback time: \"\r\n            + feedbackBatch.getEnqueuedTimeUtc().toString());\r\n        }\r\n\r\n        if (feedbackReceiver != null) feedbackReceiver.close();\r\n        serviceClient.close();\r\n      }\r\n    }\r\n    ```\r\n\r\n   > [!NOTE]\r\n   > 为简单起见，本教程不实现任何重试策略。 在生产代码中，应按 MSDN 文章 [Transient Fault Handling]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r\n   > \r\n   > \r\n9. 若要使用 Maven 构建 **simulated-device** 应用，请在 simulated-device 文件夹的命令提示符处执行以下命令：\r\n\r\n    ```cmd/sh\r\n    mvn clean package -DskipTests\r\n    ```\r\n## <a name=\"run-the-applications\"></a>运行应用程序\r\n现在，已准备就绪，可以运行应用程序了。\r\n\r\n1. 在 simulated-device 文件夹的命令提示符处，运行以下命令以发送遥测数据至 IoT 中心并侦听中心发出的云到设备消息：\r\n\r\n    ```cmd/sh\r\n    mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\" \r\n    ```\r\n\r\n    ![运行模拟设备应用][img-simulated-device]\r\n2. 在 send-c2d-messages 文件夹的命令提示符处，运行以下命令以发送云到设备的消息并等待反馈确认：\r\n\r\n    ```cmd/sh\r\n    mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"\r\n    ```\r\n\r\n    ![运行命令以发送“云到设备”消息][img-send-command]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n在本教程中，已学习如何发送和接收云到设备的消息。 \r\n\r\n若要查看使用 IoT 中心完成端到端解决方案的示例，请参阅 [Azure IoT 套件]。\r\n\r\n若要了解有关使用 IoT 中心开发解决方案的详细信息，请参阅 [IoT 中心开发人员指南]。\r\n\r\n<!-- Images -->\r\n[img-simulated-device]: ./media/iot-hub-java-java-c2d/receivec2d.png\r\n[img-send-command]:  ./media/iot-hub-java-java-c2d/sendc2d.png\r\n<!-- Links -->\r\n\r\n[Get started with IoT Hub]: ./iot-hub-java-java-getstarted.md\r\n[IoT Hub Developer Guide - C2D]: ./iot-hub-devguide-messaging.md\r\n[IoT 中心开发人员指南]: ./iot-hub-devguide.md\r\n[Azure IoT 开发人员中心]: https://www.azure.cn/develop/iot\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-java\r\n[Transient Fault Handling]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r\n[Azure 门户]: https://portal.azure.cn\r\n[Azure IoT 套件]: /iot-suite/\r\n[lnk-maven-service-search]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22iot-service-client%22%20g%3A%22com.microsoft.azure.sdk.iot%22\r\n\r\n<!--Update_Description:update wording-->\r\n\r\n"}