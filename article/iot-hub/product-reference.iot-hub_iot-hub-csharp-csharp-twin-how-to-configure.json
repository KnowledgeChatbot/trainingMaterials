{"Title":"使用 Azure IoT 中心设备孪生属性 (.NET/.NET)","Description":"如何使用 Azure IoT 中心设备孪生配置设备。 使用用于 .NET 的 Azure IoT 设备 SDK 实现模拟设备应用，并使用用于 .NET 的 Azure IoT 服务 SDK 实现可使用设备孪生更改设备配置的服务应用。","Content":"# <a name=\"use-desired-properties-to-configure-devices\"></a>使用所需属性配置设备\r\n[!INCLUDE [iot-hub-selector-twin-how-to-configure](../../includes/iot-hub-selector-twin-how-to-configure.md)]\r\n\r\n在本教程结束时，会创建两个 .NET 控制台应用：\r\n\r\n* **SimulateDeviceConfiguration**，一个模拟设备应用，它等待所需配置更新并报告模拟配置更新过程的状态。\r\n* **SetDesiredConfigurationAndQuery**，一个后端应用，用于在设备上设置所需配置并查询配置更新过程。\r\n\r\n> [!NOTE]\r\n> [Azure IoT SDK][lnk-hub-sdks] 文章介绍了可用于构建设备和后端应用的 Azure IoT SDK。\r\n> \r\n> \r\n\r\n若要完成本教程，需要满足以下条件：\r\n\r\n* Visual Studio 2015 或 Visual Studio 2017。\r\n* 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r\n\r\n如果已按照[设备孪生入门][lnk-twin-tutorial]教程执行了操作，则现在已有一个 IoT 中心和一个名为 **myDeviceId** 的设备标识。 在这种情况下，可以跳到[创建模拟设备应用][lnk-how-to-configure-createapp]部分。\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity-portal.md)]\r\n\r\n<a id=\"#create-the-simulated-device-app\"></a>\r\n## <a name=\"create-the-simulated-device-app\"></a>创建模拟设备应用\r\n本部分创建一个 .NET 控制台应用，它作为 **myDeviceId** 连接到中心，等待所需配置更新，然后对模拟配置更新过程报告更新。\r\n\r\n1. 在 Visual Studio 中，使用“控制台应用程序”项目模板创建新的 Visual C# Windows 经典桌面项目。 将项目命名为 **SimulateDeviceConfiguration**。\r\n   \r\n    ![新的 Visual C# Windows 经典设备应用][img-createdeviceapp]\r\n\r\n1. 在解决方案资源管理器中，右键单击“SimulateDeviceConfiguration”项目，单击“管理 NuGet 包...”。\r\n1. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索“microsoft.azure.devices.client”。 选择“安装”，安装“microsoft.azure.devices.client”包，并接受使用条款。 该过程将下载、安装 [Azure IoT 设备 SDK][lnk-nuget-client-sdk] NuGet 包及其依赖项并添加对它的引用。\r\n   \r\n    ![“NuGet 包管理器”窗口客户端应用][img-clientnuget]\r\n1. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r\n   \r\n        using Microsoft.Azure.Devices.Client;\r\n        using Microsoft.Azure.Devices.Shared;\r\n        using Newtonsoft.Json;\r\n\r\n1. 将以下字段添加到 **Program** 类。 将占位符值替换为在上一部分中记下的设备连接字符串。\r\n   \r\n        static string DeviceConnectionString = \"HostName=<yourIotHubName>.azure-devices.cn;DeviceId=<yourIotDeviceName>;SharedAccessKey=<yourIotDeviceAccessKey>\";\r\n        static DeviceClient Client = null;\r\n        static TwinCollection reportedProperties = new TwinCollection();\r\n\r\n1. 将以下方法添加到 **Program** 类：\r\n \r\n        public static void InitClient()\r\n        {\r\n            try\r\n            {\r\n                Console.WriteLine(\"Connecting to hub\");\r\n                Client = DeviceClient.CreateFromConnectionString(DeviceConnectionString, TransportType.Mqtt);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine();\r\n                Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r\n            }\r\n        }\r\n    **Client** 对象公开从该设备与设备孪生交互所需的所有方法。 上述代码会初始化“客户端”对象，然后检索 myDeviceId设备孪生。\r\n\r\n1. 将以下方法添加到 **Program** 类。 此方法在本地设备上设置遥测初始值，然后更新设备孪生。\r\n\r\n        public static async void InitTelemetry()\r\n        {\r\n            try\r\n            {\r\n                Console.WriteLine(\"Report initial telemetry config:\");\r\n                TwinCollection telemetryConfig = new TwinCollection();\r\n                \r\n                telemetryConfig[\"configId\"] = \"0\";\r\n                telemetryConfig[\"sendFrequency\"] = \"24h\";\r\n                reportedProperties[\"telemetryConfig\"] = telemetryConfig;\r\n                Console.WriteLine(JsonConvert.SerializeObject(reportedProperties));\r\n\r\n                await Client.UpdateReportedPropertiesAsync(reportedProperties);\r\n            }\r\n            catch (AggregateException ex)\r\n            {\r\n                foreach (Exception exception in ex.InnerExceptions)\r\n                {\r\n                    Console.WriteLine();\r\n                    Console.WriteLine(\"Error in sample: {0}\", exception);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine();\r\n                Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r\n            }\r\n        }\r\n\r\n1. 将以下方法添加到 **Program** 类。 这是一个回调，用于检测设备孪生的“所需属性”中的更改。\r\n\r\n        private static async Task OnDesiredPropertyChanged(TwinCollection desiredProperties, object userContext)\r\n        {\r\n            try\r\n            {\r\n                Console.WriteLine(\"Desired property change:\");\r\n                Console.WriteLine(JsonConvert.SerializeObject(desiredProperties));\r\n\r\n                var currentTelemetryConfig = reportedProperties[\"telemetryConfig\"];\r\n                var desiredTelemetryConfig = desiredProperties[\"telemetryConfig\"];\r\n\r\n                if ((desiredTelemetryConfig != null) && (desiredTelemetryConfig[\"configId\"] != currentTelemetryConfig[\"configId\"]))\r\n                {\r\n                    Console.WriteLine(\"\\nInitiating config change\");\r\n                    currentTelemetryConfig[\"status\"] = \"Pending\";\r\n                    currentTelemetryConfig[\"pendingConfig\"] = desiredTelemetryConfig;\r\n\r\n                    await Client.UpdateReportedPropertiesAsync(reportedProperties);\r\n\r\n                    CompleteConfigChange();\r\n                }\r\n            }\r\n            catch (AggregateException ex)\r\n            {\r\n                foreach (Exception exception in ex.InnerExceptions)\r\n                {\r\n                    Console.WriteLine();\r\n                    Console.WriteLine(\"Error in sample: {0}\", exception);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine();\r\n                Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r\n            }\r\n        }\r\n\r\n    此方法使用配置更新请求更新本地设备孪生对象的报告属性，将状态设置为 **Pending**，然后更新服务的设备孪生。 成功更新设备孪生后，它会通过调用下一要点中所述的方法 `CompleteConfigChange` 来完成配置更改。\r\n\r\n1. 将以下方法添加到 **Program** 类。 此方法模拟设备重置，更新将状态设置为 **Success** 的本地报告属性，并删除 **pendingConfig** 元素。 然后，它会更新服务的设备孪生。 \r\n\r\n        public static async void CompleteConfigChange()\r\n        {\r\n            try\r\n            {\r\n                var currentTelemetryConfig = reportedProperties[\"telemetryConfig\"];\r\n\r\n                Console.WriteLine(\"\\nSimulating device reset\");\r\n                await Task.Delay(30000); \r\n\r\n                Console.WriteLine(\"\\nCompleting config change\");\r\n                currentTelemetryConfig[\"configId\"] = currentTelemetryConfig[\"pendingConfig\"][\"configId\"];\r\n                currentTelemetryConfig[\"sendFrequency\"] = currentTelemetryConfig[\"pendingConfig\"][\"sendFrequency\"];\r\n                currentTelemetryConfig[\"status\"] = \"Success\";\r\n                currentTelemetryConfig[\"pendingConfig\"] = null;\r\n\r\n                await Client.UpdateReportedPropertiesAsync(reportedProperties);\r\n                Console.WriteLine(\"Config change complete \\nPress any key to exit.\");\r\n            }\r\n            catch (AggregateException ex)\r\n            {\r\n                foreach (Exception exception in ex.InnerExceptions)\r\n                {\r\n                    Console.WriteLine();\r\n                    Console.WriteLine(\"Error in sample: {0}\", exception);\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine();\r\n                Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r\n            }\r\n        }\r\n\r\n1. 最后，在 **Main** 方法中添加以下行：\r\n\r\n        try\r\n        {\r\n            InitClient();\r\n            InitTelemetry();\r\n\r\n            Console.WriteLine(\"Wait for desired telemetry...\");\r\n            Client.SetDesiredPropertyUpdateCallbackAsync(OnDesiredPropertyChanged, null).Wait();\r\n            Console.ReadKey();\r\n        }\r\n        catch (AggregateException ex)\r\n        {\r\n            foreach (Exception exception in ex.InnerExceptions)\r\n            {\r\n                Console.WriteLine();\r\n                Console.WriteLine(\"Error in sample: {0}\", exception);\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine();\r\n            Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r\n        }\r\n\r\n   > [!NOTE]\r\n   > 本教程不模拟并发配置更新的任何行为。 某些配置更新进程在更新运行过程中可能能够适应目标配置的更改，某些配置更新进程则可能必须将它们排队，某些配置更新进程会拒绝它们并显示错误情况。 请确保考虑特定配置过程所需的行为，并在开始配置更改之前添加相应的逻辑。\r\n   > \r\n   > \r\n1. 生成解决方案，单击 **F5** 从 Visual Studio 运行设备应用。 在输出控制台中，应会看到消息指示模拟设备正在检索设备孪生、设置遥测，并等待所需属性发生更改。 使应用保持运行状态。\r\n\r\n## <a name=\"create-the-service-app\"></a>创建服务应用\r\n在本节中，用户需创建一个 .NET 控制台应用，以便通过新的遥测配置对象在与 *myDeviceId* 关联的设备孪生上更新 **所需属性** 。 该应用随后会查询存储在 IoT 中心的设备孪生，并显示设备的所需配置与报告配置之间的差异。\r\n\r\n1. 在 Visual Studio 中，使用“**控制台应用程序**”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 **SetDesiredConfigurationAndQuery**。\r\n   \r\n    ![新的 Visual C# Windows 经典桌面项目][img-createapp]\r\n1. 在“解决方案资源管理器”中，右键单击“SetDesiredConfigurationAndQuery”项目，并单击“管理 NuGet 包...”。\r\n1. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索 **microsoft.azure.devices**，选择“安装”以安装 **Microsoft.Azure.Devices** 包，并接受使用条款。 此过程会下载、安装 [Azure IoT 服务 SDK][lnk-nuget-service-sdk] NuGet 包及其依赖项并添加对它的引用。\r\n   \r\n    ![“NuGet 包管理器”窗口][img-servicenuget]\r\n1. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r\n   \r\n        using Microsoft.Azure.Devices;\r\n        using System.Threading;\r\n        using Newtonsoft.Json;\r\n1. 将以下字段添加到 **Program** 类。 将占位符值替换为在上一部分中为中心创建的 IoT 中心连接字符串。\r\n   \r\n        static RegistryManager registryManager;\r\n        static string connectionString = \"{iot hub connection string}\";\r\n1. 将以下方法添加到 **Program** 类：\r\n   \r\n        static private async Task SetDesiredConfigurationAndQuery()\r\n        {\r\n            var twin = await registryManager.GetTwinAsync(\"myDeviceId\");\r\n            var patch = new {\r\n                    properties = new {\r\n                        desired = new {\r\n                            telemetryConfig = new {\r\n                                configId = Guid.NewGuid().ToString(),\r\n                                sendFrequency = \"5m\"\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n   \r\n            await registryManager.UpdateTwinAsync(twin.DeviceId, JsonConvert.SerializeObject(patch), twin.ETag);\r\n            Console.WriteLine(\"Updated desired configuration\");\r\n   \r\n            while (true)\r\n            {\r\n                var query = registryManager.CreateQuery(\"SELECT * FROM devices WHERE deviceId = 'myDeviceId'\");\r\n                var results = await query.GetNextAsTwinAsync();\r\n                foreach (var result in results)\r\n                {\r\n                    Console.WriteLine(\"Config report for: {0}\", result.DeviceId);\r\n                    Console.WriteLine(\"Desired telemetryConfig: {0}\", JsonConvert.SerializeObject(result.Properties.Desired[\"telemetryConfig\"], Formatting.Indented));\r\n                    Console.WriteLine(\"Reported telemetryConfig: {0}\", JsonConvert.SerializeObject(result.Properties.Reported[\"telemetryConfig\"], Formatting.Indented));\r\n                    Console.WriteLine();\r\n                }\r\n                Thread.Sleep(10000);\r\n            }\r\n        }\r\n   \r\n    **Registry** 对象公开从服务与设备孪生进行交互所需的所有方法。 此代码将初始化 **Registry** 对象，并检索 **myDeviceId** 的设备孪生，并使用新的遥测配置对象更新其所需属性。\r\n    然后，该代码会每隔 10 秒钟查询一次存储在 IoT 中心的设备孪生，并打印所需遥测配置和报告遥测配置。 请参阅 [IoT 中心查询语言][lnk-query] 以了解如何跨所有设备生成丰富的报告。\r\n   \r\n   > [!IMPORTANT]\r\n   > 为了方便用户查看，此应用程序每 10 秒查询 IoT 中心一次。 使用查询跨多个设备生成面向用户的报表，而不检测更改。 如果解决方案需要设备事件的实时通知，请使用[孪生通知][lnk-twin-notifications]。\r\n   > \r\n   > \r\n1. 最后，在 **Main** 方法中添加以下行：\r\n   \r\n        registryManager = RegistryManager.CreateFromConnectionString(connectionString);\r\n        SetDesiredConfigurationAndQuery();\r\n        Console.WriteLine(\"Press any key to quit.\");\r\n        Console.ReadLine();\r\n1. 在“解决方案资源管理器”中，打开“设置启动项目...”，并确保 **SetDesiredConfigurationAndQuery** 项目的“操作”为“启动”。 生成解决方案。\r\n1. 在运行 **SimulateDeviceConfiguration** 设备应用的情况下，使用 **F5** 从 Visual Studio 运行服务应用。 应会看到报告的配置从 **Pending** 更改为 **Success**，此时新的活动发送频率已变为 5 分钟而不是 24 小时。\r\n\r\n ![已成功配置设备][img-deviceconfigured]\r\n   \r\n   > [!IMPORTANT]\r\n   > 设备报告操作与查询结果之间最多存在一分钟的延迟。 这是为了使查询基础结构可以采用非常大的规模来工作。 若要检索单个设备孪生的一致视图，请使用 **Registry** 类中的 **getDeviceTwin** 方法。\r\n   > \r\n   > \r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n在本教程中，已从解决方案后端将所需配置设置为“所需属性”，此外还编写了一个设备应用以检测该更改并模拟多步骤更新过程（通过报告属性报告其状态）。\r\n\r\n充分利用以下资源：\r\n\r\n* 通过 [Get started with IoT Hub][lnk-iothub-getstarted] （IoT 中心入门）教程学习如何从设备发送遥测；\r\n* 关于对大型设备集进行计划或执行操作，请参阅 [计划和广播作业][lnk-schedule-jobs] 教程。\r\n* 通过[使用直接方法][lnk-methods-tutorial]教程学习如何以交互方式控制设备（例如从用户控制的应用打开风扇）。\r\n\r\n<!-- images -->\r\n[img-servicenuget]: ./media/iot-hub-csharp-csharp-twin-how-to-configure/servicesdknuget.png\r\n[img-createapp]: ./media/iot-hub-csharp-csharp-twin-how-to-configure/createnetapp.png\r\n[img-deviceconfigured]: ./media/iot-hub-csharp-csharp-twin-how-to-configure/deviceconfigured.png\r\n[img-createdeviceapp]: ./media/iot-hub-csharp-csharp-twin-how-to-configure/createdeviceapp.png\r\n[img-clientnuget]: ./media/iot-hub-csharp-csharp-twin-how-to-configure/devicesdknuget.png\r\n[img-deviceconfigured]: ./media/iot-hub-csharp-csharp-twin-how-to-configure/deviceconfigured.png\r\n\r\n\r\n<!-- links -->\r\n[lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r\n[lnk-free-trial]: http://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-nuget-client-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices.Client/\r\n[lnk-nuget-service-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices/1.1.0/\r\n\r\n[lnk-query]: ./iot-hub-devguide-query-language.md\r\n[lnk-twin-notifications]: ./iot-hub-devguide-device-twins.md#back-end-operations\r\n[lnk-twin-tutorial]: ./iot-hub-csharp-csharp-twin-getstarted.md\r\n[lnk-schedule-jobs]: ./iot-hub-node-node-schedule-jobs.md\r\n[lnk-iothub-getstarted]: ./iot-hub-csharp-csharp-getstarted.md\r\n[lnk-methods-tutorial]: ./iot-hub-node-node-direct-methods.md\r\n[lnk-how-to-configure-createapp]: ./iot-hub-csharp-csharp-twin-how-to-configure.md#create-the-simulated-device-app\r\n\r\n\r\n<!--Update_Description: update wording and code-->"}