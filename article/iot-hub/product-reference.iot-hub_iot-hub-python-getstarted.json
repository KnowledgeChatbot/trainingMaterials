{"Title":"Azure IoT 中心入门 (Python)","Description":"了解如何通过用于 Python 的 IoT SDK 将设备到云消息发送到 Azure IoT 中心。 创建模拟的设备和服务应用，以便通过 IoT 中心注册设备、发送消息和读取消息。","Content":"# <a name=\"connect-your-simulated-device-to-your-iot-hub-using-python\"></a>使用 Python 将模拟设备连接到 IoT 中心\r\n[!INCLUDE [iot-hub-selector-get-started](../../includes/iot-hub-selector-get-started.md)]\r\n\r\n在本教程结束时，将会创建两个 Python 应用：\r\n\r\n* CreateDeviceIdentity.py，用于创建设备标识和关联的安全密钥以连接模拟设备应用。\r\n* SimulatedDevice.py，使用前面创建的设备标识连接到 IoT 中心，并使用 MQTT 协议定期发送遥测消息。\r\n\r\n> [!NOTE]\r\n> [Azure IoT SDK][lnk-hub-sdks] 文章介绍了 Azure IoT SDK，这些 SDK 可用于构建在设备和解决方案后端运行的应用程序。\r\n> \r\n> \r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* [Python 2.x 或 3.x][lnk-python-download]。 请确保根据安装程序的要求，使用 32 位或 64 位安装。 在安装过程中出现提示时，请确保将 Python 添加到特定于平台的环境变量中。 如果使用 Python 2.x，则可能需要[安装或升级 pip - Python 包管理系统][lnk-install-pip]。\r\n* 如果使用 Windows OS，则请安装 [Visual C++ 可再发行组件包][lnk-visual-c-redist]，以便使用 Python 中的本机 DLL。\r\n* [Node.js 4.0 或更高版本][lnk-node-download]。 请确保根据安装程序的要求，使用 32 位或 64 位安装。 这是安装 [IoT 中心资源管理器工具][lnk-iot-hub-explorer]所必需的。\r\n* 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r\n> [!NOTE]\r\n> 适用于 `azure-iothub-service-client` 和 `azure-iothub-device-client` 的 pip 包目前仅供 Windows OS 使用。 对于 Linux/Mac OS，请参阅[准备适用于 Python 的开发环境][lnk-python-devbox]一文中特定于 Linux 和 Mac OS 的部分。\r\n> \r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n现在已创建 IoT 中心。 请在本教程的其余部分使用 IoT 中心主机名和 IoT 中心连接字符串。\r\n\r\n> [!NOTE]\r\n> 也可使用基于 Python 或 Node.js 的 Azure CLI，在命令行中轻松创建 IoT 中心。 [使用 Azure CLI 2.0 创建 IoT 中心][lnk-azure-cli-hub]一文介绍了执行该操作的快速步骤。 \r\n> \r\n\r\n## <a name=\"create-a-device-identity\"></a>创建设备标识\r\n本部分列出了创建 Python 控制台应用的步骤，该应用可在 IoT 中心的标识注册表中创建设备标识。 设备无法连接到 IoT 中心，除非它在标识注册表中具有条目。 有关详细信息，请参阅 **IoT 中心开发人员指南** 的 [标识注册表][lnk-devguide-identity]部分。 当你运行此控制台应用时，它生成唯一的设备 ID 和密钥，当设备向 IoT 中心发送设备到云的消息时，可以用于标识设备本身。\r\n\r\n1. 打开命令提示符，然后安装用于 Python 的 Azure IoT 中心服务 SDK。 在安装 SDK 之后关闭命令提示符。\r\n\r\n    ```\r\n    pip install azure-iothub-service-client\r\n    ```\r\n\r\n2. 创建名为 CreateDeviceIdentity.py 的 Python 文件。 在[所选 Python 编辑器/IDE][lnk-python-ide-list]（例如，默认的 [IDLE][lnk-idle]）中将其打开。\r\n\r\n3. 添加以下代码，从服务 SDK 导入所需模块：\r\n\r\n    ```python\r\n    import sys\r\n    import iothub_service_client\r\n    from iothub_service_client import IoTHubRegistryManager, IoTHubRegistryManagerAuthMethod\r\n    from iothub_service_client import IoTHubDeviceStatus, IoTHubError\r\n    ```\r\n2. 添加以下代码，将 `[IoTHub Connection String]` 的占位符替换为在上一部分为 IoT 中心创建的连接字符串。 可以将任何名称用作 `DEVICE_ID`。\r\n   \r\n    ```python\r\n    CONNECTION_STRING = \"[IoTHub Connection String]\"\r\n    DEVICE_ID = \"MyFirstPythonDevice\"\r\n    ```\r\n   [!INCLUDE [iot-hub-pii-note-naming-device](../../includes/iot-hub-pii-note-naming-device.md)]\r\n\r\n3. 添加以下函数，输出部分设备信息。\r\n\r\n    ```python\r\n    def print_device_info(title, iothub_device):\r\n        print ( title + \":\" )\r\n        print ( \"iothubDevice.deviceId                    = {0}\".format(iothub_device.deviceId) )\r\n        print ( \"iothubDevice.primaryKey                  = {0}\".format(iothub_device.primaryKey) )\r\n        print ( \"iothubDevice.secondaryKey                = {0}\".format(iothub_device.secondaryKey) )\r\n        print ( \"iothubDevice.connectionState             = {0}\".format(iothub_device.connectionState) )\r\n        print ( \"iothubDevice.status                      = {0}\".format(iothub_device.status) )\r\n        print ( \"iothubDevice.lastActivityTime            = {0}\".format(iothub_device.lastActivityTime) )\r\n        print ( \"iothubDevice.cloudToDeviceMessageCount   = {0}\".format(iothub_device.cloudToDeviceMessageCount) )\r\n        print ( \"iothubDevice.isManaged                   = {0}\".format(iothub_device.isManaged) )\r\n        print ( \"iothubDevice.authMethod                  = {0}\".format(iothub_device.authMethod) )\r\n        print ( \"\" )\r\n    ```\r\n3. 添加以下函数，使用注册表管理器创建设备标识。 \r\n\r\n    ```python\r\n    def iothub_createdevice():\r\n        try:\r\n            iothub_registry_manager = IoTHubRegistryManager(CONNECTION_STRING)\r\n            auth_method = IoTHubRegistryManagerAuthMethod.SHARED_PRIVATE_KEY\r\n            new_device = iothub_registry_manager.create_device(DEVICE_ID, \"\", \"\", auth_method)\r\n            print_device_info(\"CreateDevice\", new_device)\r\n\r\n        except IoTHubError as iothub_error:\r\n            print ( \"Unexpected error {0}\".format(iothub_error) )\r\n            return\r\n        except KeyboardInterrupt:\r\n            print ( \"iothub_createdevice stopped\" )\r\n    ```\r\n4. 最后，添加 main 函数（如下所示）并保存文件。\r\n\r\n    ```python\r\n    if __name__ == '__main__':\r\n        print ( \"\" )\r\n        print ( \"Python {0}\".format(sys.version) )\r\n        print ( \"Creating device using the Azure IoT Hub Service SDK for Python\" )\r\n        print ( \"\" )\r\n        print ( \"    Connection string = {0}\".format(CONNECTION_STRING) )\r\n        print ( \"    Device ID         = {0}\".format(DEVICE_ID) )\r\n\r\n        iothub_createdevice()\r\n    ```\r\n5. 在命令提示符处运行 CreateDeviceIdentity.py，如下所示：\r\n\r\n    ```python\r\n    python CreateDeviceIdentity.py\r\n    ```\r\n6. 此时会看到系统创建模拟设备。 记下此设备的 deviceId 和 primaryKey。 稍后在创建连接到作为设备的 IoT 中心的应用程序时需要这些值。\r\n\r\n    ![创建设备成功][1]\r\n\r\n> [!NOTE]\r\n> IoT 中心标识注册表仅存储用于实现 IoT 中心安全访问的设备标识。 它存储设备 ID 和密钥作为安全凭据，以及启用或禁用标志（可用于禁用对单个设备的访问）。 如果应用程序需要存储其他特定于设备的元数据，则应使用特定于应用程序的存储。 有关详细信息，请参阅 [IoT 中心开发人员指南][lnk-devguide-identity]。\r\n> \r\n> \r\n\r\n\r\n## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r\n本部分列出了创建 Python 控制台应用的步骤，该应用可模拟设备并向 IoT 中心发送设备到云消息。\r\n\r\n1. 打开新的命令提示符，然后安装用于 Python 的 Azure IoT 中心设备 SDK，如下所示。 在安装之后关闭命令提示符。\r\n\r\n    ```\r\n    pip install azure-iothub-device-client\r\n    ```\r\n2. 创建名为 SimulatedDevice.py 的文件。 在所选 Python 编辑器/IDE（例如 IDLE）中打开该文件。\r\n\r\n3. 添加以下代码，从设备 SDK 导入所需模块。\r\n\r\n    ```python\r\n    import random\r\n    import time\r\n    import sys\r\n    import iothub_client\r\n    from iothub_client import IoTHubClient, IoTHubClientError, IoTHubTransportProvider, IoTHubClientResult\r\n    from iothub_client import IoTHubMessage, IoTHubMessageDispositionResult, IoTHubError, DeviceMethodReturnValue\r\n    ```\r\n4. 添加以下代码，将 `[IoTHub Device Connection String]` 的占位符替换为设备的连接字符串。 设备连接字符串通常采用 `HostName=<hostName>;DeviceId=<deviceId>;SharedAccessKey=<primaryKey>` 格式。 使用在上一部分创建的设备的 deviceId 和 primaryKey 分别替换 `<deviceId>` 和 `<primaryKey>`。 将 `<hostName>` 替换为 IoT 中心的主机名，通常为 `<IoT hub name>.azure-devices.cn` 格式。\r\n\r\n    ```python\r\n    # String containing Hostname, Device Id & Device Key in the format\r\n    CONNECTION_STRING = \"[IoTHub Device Connection String]\"\r\n    # choose HTTP, AMQP or MQTT as transport protocol\r\n    PROTOCOL = IoTHubTransportProvider.MQTT\r\n    MESSAGE_TIMEOUT = 10000\r\n    AVG_WIND_SPEED = 10.0\r\n    SEND_CALLBACKS = 0\r\n    MSG_TXT = \"{\\\"deviceId\\\": \\\"MyFirstPythonDevice\\\",\\\"windSpeed\\\": %.2f}\"    \r\n    ```\r\n5. 添加以下代码，定义发送确认回调。 \r\n\r\n    ```python\r\n    def send_confirmation_callback(message, result, user_context):\r\n        global SEND_CALLBACKS\r\n        print ( \"Confirmation[%d] received for message with result = %s\" % (user_context, result) )\r\n        map_properties = message.properties()\r\n        print ( \"    message_id: %s\" % message.message_id )\r\n        print ( \"    correlation_id: %s\" % message.correlation_id )\r\n        key_value_pair = map_properties.get_internals()\r\n        print ( \"    Properties: %s\" % key_value_pair )\r\n        SEND_CALLBACKS += 1\r\n        print ( \"    Total calls confirmed: %d\" % SEND_CALLBACKS )\r\n    ```\r\n6. 添加以下代码，初始化设备客户端。\r\n\r\n    ```python\r\n    def iothub_client_init():\r\n        # prepare iothub client\r\n        client = IoTHubClient(CONNECTION_STRING, PROTOCOL)\r\n        # set the time until a message times out\r\n        client.set_option(\"messageTimeout\", MESSAGE_TIMEOUT)\r\n        client.set_option(\"logtrace\", 0)\r\n        client.set_option(\"product_info\", \"HappyPath_Simulated-Python\")\r\n        return client\r\n    ```\r\n7. 添加以下函数，将消息格式化并将其从模拟设备发送到 IoT 中心。\r\n\r\n    ```python\r\n    def iothub_client_telemetry_sample_run():\r\n\r\n        try:\r\n            client = iothub_client_init()\r\n            print ( \"IoT Hub device sending periodic messages, press Ctrl-C to exit\" )\r\n            message_counter = 0\r\n\r\n            while True:\r\n                msg_txt_formatted = MSG_TXT % (AVG_WIND_SPEED + (random.random() * 4 + 2))\r\n                # messages can be encoded as string or bytearray\r\n                if (message_counter & 1) == 1:\r\n                    message = IoTHubMessage(bytearray(msg_txt_formatted, 'utf8'))\r\n                else:\r\n                    message = IoTHubMessage(msg_txt_formatted)\r\n                # optional: assign ids\r\n                message.message_id = \"message_%d\" % message_counter\r\n                message.correlation_id = \"correlation_%d\" % message_counter\r\n                # optional: assign properties\r\n                prop_map = message.properties()\r\n                prop_text = \"PropMsg_%d\" % message_counter\r\n                prop_map.add(\"Property\", prop_text)\r\n\r\n                client.send_event_async(message, send_confirmation_callback, message_counter)\r\n                print ( \"IoTHubClient.send_event_async accepted message [%d] for transmission to IoT Hub.\" % message_counter )\r\n\r\n                status = client.get_send_status()\r\n                print ( \"Send status: %s\" % status )\r\n                time.sleep(30)\r\n\r\n                status = client.get_send_status()\r\n                print ( \"Send status: %s\" % status )\r\n\r\n                message_counter += 1\r\n\r\n        except IoTHubError as iothub_error:\r\n            print ( \"Unexpected error %s from IoTHub\" % iothub_error )\r\n            return\r\n        except KeyboardInterrupt:\r\n            print ( \"IoTHubClient sample stopped\" )\r\n    ```\r\n8. 最后，添加 main 函数。 \r\n\r\n    ```python\r\n    if __name__ == '__main__':\r\n        print ( \"Simulating a device using the Azure IoT Hub Device SDK for Python\" )\r\n        print ( \"    Protocol %s\" % PROTOCOL )\r\n        print ( \"    Connection string=%s\" % CONNECTION_STRING )\r\n\r\n        iothub_client_telemetry_sample_run()\r\n    ```\r\n9. 保存并关闭 SimulatedDevice.py 文件。 现在可以运行该应用了。\r\n\r\n> [!NOTE]\r\n> 为简单起见，本教程不实现任何重试策略。 在生产代码中，应该按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r\n> \r\n> \r\n\r\n## <a name=\"receive-messages-from-your-simulated-device\"></a>从模拟设备接收消息\r\n若要从设备接收遥测消息，需使用 IoT 中心公开的与[事件中心][lnk-event-hubs-overview]兼容的终结点，以便读取设备到云消息。 阅读[事件中心入门][lnk-eventhubs-tutorial]教程，了解如何处理来自事件中心的消息，这些事件中心所对应的终结点与 IoT 中心的事件中心兼容。 在 Python 中，事件中心尚不支持遥测，因此可创建一个基于 [Node.js](./iot-hub-node-node-getstarted.md#D2C_node) 或 [.NET](./iot-hub-csharp-csharp-getstarted.md#D2C_csharp) 事件中心的控制台应用，以便从 IoT 中心读取设备到云消息。 本教程介绍如何使用 [IoT 中心资源管理器工具][lnk-iot-hub-explorer]读取这些设备消息。\r\n\r\n1. 打开命令提示符并安装 IoT 中心资源管理器。 \r\n\r\n    ```\r\n    npm install -g iothub-explorer\r\n    ```\r\n\r\n2. 在命令提示符处运行以下命令，开始监视设备发出的设备到云消息。 在 `--login` 后的占位符中使用 IoT 中心的连接字符串。\r\n\r\n    ```\r\n    iothub-explorer monitor-events MyFirstPythonDevice --login \"[IoTHub connection string]\"\r\n    ```\r\n\r\n3. 打开新的命令提示符，导航到包含 SimulatedDevice.py 文件的目录。\r\n\r\n4. 运行 SimulatedDevice.py 文件，该文件定期将遥测数据发送到 IoT 中心。 \r\n   \r\n    ```\r\n    python SimulatedDevice.py\r\n    ```\r\n5. 运行前一部分的 IoT 中心资源管理器，在命令提示符处观察设备消息。 \r\n\r\n    ![Python 设备到云消息][2]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n本教程中，在 Azure 门户中配置了新的 IoT 中心，并在 IoT 中心的标识注册表中创建了设备标识。 已使用此设备标识来让模拟设备应用向 IoT 中心发送设备到云的消息。 你已借助 IoT 中心资源管理器工具观察到 IoT 中心接收的消息。 \r\n\r\n若要深入探索用于 Azure IoT 中心的 Python SDK 的用法，请访问[此 Git 中心存储库][lnk-python-github]。 若要查看用于 Python 的 Azure IoT 中心服务 SDK 的消息传送功能，可下载并运行 [iothub_messaging_sample.py][lnk-messaging-sample]。 若要了解如何通过用于 Python 的 Azure IoT 中心设备 SDK 进行设备端模拟，可下载并运行 [iothub_client_sample.py][lnk-client-sample]。\r\n\r\n若要继续了解 IoT 中心入门知识并浏览其他 IoT 方案，请参阅：\r\n\r\n* [连接设备][lnk-connect-device]\r\n* [设备管理入门][lnk-device-management]\r\n* [使用 Azure IoT Edge 将 AI 部署到边缘设备][lnk-iot-edge]\r\n\r\n若要了解如何扩展 IoT 解决方案和如何大规模处理设备到云的消息，请参阅 [Process device-to-cloud messages][lnk-process-d2c-tutorial] （处理设备到云的消息）教程。\r\n[!INCLUDE [iot-hub-get-started-next-steps](../../includes/iot-hub-get-started-next-steps.md)]\r\n\r\n<!-- Images. -->\r\n[1]: ./media/iot-hub-python-getstarted/createdevice.png\r\n[2]: ./media/iot-hub-python-getstarted/sendd2cmessage.png\r\n\r\n<!-- Links -->\r\n[lnk-python-download]: https://www.python.org/downloads/\r\n[lnk-visual-c-redist]: http://www.microsoft.com/download/confirmation.aspx?id=48145\r\n[lnk-node-download]: https://nodejs.org/en/download/\r\n[lnk-install-pip]: https://pip.pypa.io/en/stable/installing/\r\n[lnk-azure-cli-hub]: https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-create-using-cli\r\n[lnk-transient-faults]: https://msdn.microsoft.com/library/hh680901(v=pandp.50).aspx\r\n[lnk-idle]: https://docs.python.org/3/library/idle.html\r\n[lnk-python-ide-list]: https://wiki.python.org/moin/IntegratedDevelopmentEnvironments\r\n[lnk-iot-hub-explorer]: https://github.com/Azure/iothub-explorer\r\n[lnk-python-github]: https://github.com/Azure/azure-iot-sdk-python\r\n[lnk-messaging-sample]: https://github.com/Azure/azure-iot-sdk-python/blob/master/service/samples/iothub_messaging_sample.py\r\n[lnk-client-sample]: https://github.com/Azure/azure-iot-sdk-python/blob/master/device/samples/iothub_client_sample.py\r\n\r\n[lnk-eventhubs-tutorial]: ../event-hubs/event-hubs-csharp-ephcs-getstarted.md\r\n[lnk-devguide-identity]: ./iot-hub-devguide-identity-registry.md\r\n[lnk-event-hubs-overview]: ../event-hubs/event-hubs-overview.md\r\n[lnk-python-devbox]: https://github.com/Azure/azure-iot-sdk-python/blob/master/doc/python-devbox-setup.md\r\n\r\n[lnk-process-d2c-tutorial]: ./iot-hub-csharp-csharp-process-d2c.md\r\n\r\n[lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n\r\n[lnk-device-management]: ./iot-hub-node-node-device-management-get-started.md\r\n[lnk-iot-edge]: iot-hub-linux-iot-edge-get-started.md\r\n[lnk-connect-device]: https://www.azure.cn/develop/iot/\r\n\r\n\r\n<!--Update_Description:update wording and link references-->"}