{"Title":"Azure IoT 中心操作监视","Description":"如何使用 Azure IoT 中心操作监视功能实时监视 IoT 中心上的操作状态。","Content":"# <a name=\"iot-hub-operations-monitoring\"></a>IoT 中心操作监视\r\nIoT 中心操作监视可让你实时监视其 IoT 中心上的操作状态。 IoT 中心可跨多个类别的操作跟踪事件。 可选择将一个或多个类别的事件发送到 IoT 中心终结点进行处理。 可以监视数据中是否有错误，或根据数据模式设置更复杂的处理行为。\r\n\r\n>[!NOTE]\r\n>IoT 中心操作监视已弃用，在未来将从 IoT 中心中删除。要详细了解弃用日程表，请参阅[利用 Azure Monitor 和 Azure 资源运行状况监视 Azure IoT 解决方案][lnk-blog-announcement]。\r\n>\r\n>\r\n\r\n\r\nIoT 中心监视 6 种类别的事件：\r\n\r\n* 设备标识操作\r\n* 设备遥测\r\n* 云到设备的消息\r\n* 连接\r\n* 文件上传\r\n* 消息路由\r\n\r\n> [!IMPORTANT]\r\n> IoT 中心操作监视不保证事件传送的可靠性和有序性。 某些事件可能丢失或出现传送顺序混乱，具体取决于 IoT 中心的基础结构。 使用操作监视基于错误信号生成警报，如连接尝试失败或与特定设备的连接频繁断开。 不应依赖操作监视事件为设备状态创建一致存储区，例如，跟踪设备已连接或断开连接状态的存储区。 \r\n>\r\n>\r\n\r\n## <a name=\"how-to-enable-operations-monitoring\"></a>如何启用操作监视\r\n\r\n1. 创建 IoT 中心。 有关如何创建 IoT 中心的说明，请参阅 [入门][lnk-get-started] 指南。\r\n\r\n1. 打开 IoT 中心的边栏选项卡。 在此处单击“**操作监视**”。\r\n\r\n    ![访问门户中的操作监视配置][1]\r\n\r\n1. 选择要监视的监视类别，并单击“保存”。 可以从“**监视设置**”中所列的与事件中心兼容的终结点读取事件。 IoT 中心终结点称为 `messages/operationsmonitoringevents`。\r\n\r\n    ![在 IoT 中心配置操作监视][2]\r\n\r\n> [!NOTE]\r\n> 为“连接”类别选择“详细”监视会导致 IoT 中心生成额外的诊断消息。 对于所有其他类别，“详细”设置会更改 IoT 中心在每个错误消息中包含的信息数量。\r\n\r\n## <a name=\"event-categories-and-how-to-use-them\"></a>事件类别及其用法\r\n\r\n每种操作监视类别跟踪与 IoT 中心之间进行的不同类型的交互，每一种监视类别都有一个架构用于定义如何构建该类别的事件。\r\n\r\n### <a name=\"device-identity-operations\"></a>设备标识操作\r\n\r\n设备标识操作类别跟踪你尝试在其 IoT 中心的标识注册表中创建、更新或删除条目时所发生的错误。 预配方案就很适合跟踪此类别。\r\n\r\n```json\r\n{\r\n    \"time\": \"UTC timestamp\",\r\n        \"operationName\": \"create\",\r\n        \"category\": \"DeviceIdentityOperations\",\r\n        \"level\": \"Error\",\r\n        \"statusCode\": 4XX,\r\n        \"statusDescription\": \"MessageDescription\",\r\n        \"deviceId\": \"device-ID\",\r\n        \"durationMs\": 1234,\r\n        \"userAgent\": \"userAgent\",\r\n        \"sharedAccessPolicy\": \"accessPolicy\"\r\n}\r\n```\r\n\r\n### <a name=\"device-telemetry\"></a>设备遥测\r\n\r\n设备遥测类别跟踪在 IoT 中心发生且与遥测管道相关的错误。 此类别包括发送遥测事件（例如限制）和接收遥测事件（例如未经授权的读取者）时发生的错误。 此类别无法捕捉设备本身运行的代码所造成的错误。\r\n\r\n```json\r\n{\r\n        \"messageSizeInBytes\": 1234,\r\n        \"batching\": 0,\r\n        \"protocol\": \"Amqp\",\r\n        \"authType\": \"{\\\"scope\\\":\\\"device\\\",\\\"type\\\":\\\"sas\\\",\\\"issuer\\\":\\\"iothub\\\"}\",\r\n        \"time\": \"UTC timestamp\",\r\n        \"operationName\": \"ingress\",\r\n        \"category\": \"DeviceTelemetry\",\r\n        \"level\": \"Error\",\r\n        \"statusCode\": 4XX,\r\n        \"statusType\": 4XX001,\r\n        \"statusDescription\": \"MessageDescription\",\r\n        \"deviceId\": \"device-ID\",\r\n        \"EventProcessedUtcTime\": \"UTC timestamp\",\r\n        \"PartitionId\": 1,\r\n        \"EventEnqueuedUtcTime\": \"UTC timestamp\"\r\n}\r\n```\r\n\r\n### <a name=\"cloud-to-device-commands\"></a>云到设备的命令\r\n\r\n云到设备的命令类别跟踪在 IoT 中心发生且与云到设备的消息管道相关的错误。 此类别包括下述情况下发生的错误：发送云到设备的消息（例如未经授权的发送者）、接收云到设备的消息（例如超过传递计数），以及接收云到设备的消息反馈（例如反馈已过期）。 此类别不捕捉未正确处理云到设备的消息但却将其成功传递的设备所发生的错误。\r\n\r\n```json\r\n{\r\n    \"messageSizeInBytes\": 1234,\r\n    \"authType\": \"{\\\"scope\\\":\\\"hub\\\",\\\"type\\\":\\\"sas\\\",\\\"issuer\\\":\\\"iothub\\\"}\",\r\n    \"deliveryAcknowledgement\": 0,\r\n    \"protocol\": \"Amqp\",\r\n    \"time\": \" UTC timestamp\",\r\n    \"operationName\": \"ingress\",\r\n    \"category\": \"C2DCommands\",\r\n    \"level\": \"Error\",\r\n    \"statusCode\": 4XX,\r\n    \"statusType\": 4XX001,\r\n    \"statusDescription\": \"MessageDescription\",\r\n    \"deviceId\": \"device-ID\",\r\n    \"EventProcessedUtcTime\": \"UTC timestamp\",\r\n    \"PartitionId\": 1,\r\n    \"EventEnqueuedUtcTime\": \"UTC timestamp\"\r\n}\r\n```\r\n\r\n### <a name=\"connections\"></a>连接\r\n\r\n连接类别跟踪设备与 IoT 中心连接或断开连接时发生的错误。 若要识别未经授权的连接尝试，以及在连接质量不佳的区域中的设备断开连接时进行跟踪，就很适合跟踪此类别。\r\n\r\n```json\r\n{\r\n    \"durationMs\": 1234,\r\n    \"authType\": \"{\\\"scope\\\":\\\"hub\\\",\\\"type\\\":\\\"sas\\\",\\\"issuer\\\":\\\"iothub\\\"}\",\r\n    \"protocol\": \"Amqp\",\r\n    \"time\": \" UTC timestamp\",\r\n    \"operationName\": \"deviceConnect\",\r\n    \"category\": \"Connections\",\r\n    \"level\": \"Error\",\r\n    \"statusCode\": 4XX,\r\n    \"statusType\": 4XX001,\r\n    \"statusDescription\": \"MessageDescription\",\r\n    \"deviceId\": \"device-ID\"\r\n}\r\n```\r\n\r\n### <a name=\"file-uploads\"></a>文件上传\r\n\r\n文件上传类别跟踪在 IoT 中心发生且与文件上传功能相关的错误。 此类别包括：\r\n\r\n- SAS URI 发生的错误，例如它在设备就上传完毕通知中心之前到期。\r\n- 设备报告的失败上传。\r\n- 创建 IoT 中心通知消息期间在存储中找不到文件时发生的错误。\r\n\r\n此类别不能捕获在设备将文件上传到存储时直接发生的错误。\r\n\r\n```json\r\n{\r\n    \"authType\": \"{\\\"scope\\\":\\\"hub\\\",\\\"type\\\":\\\"sas\\\",\\\"issuer\\\":\\\"iothub\\\"}\",\r\n    \"protocol\": \"HTTP\",\r\n    \"time\": \" UTC timestamp\",\r\n    \"operationName\": \"ingress\",\r\n    \"category\": \"fileUpload\",\r\n    \"level\": \"Error\",\r\n    \"statusCode\": 4XX,\r\n    \"statusType\": 4XX001,\r\n    \"statusDescription\": \"MessageDescription\",\r\n    \"deviceId\": \"device-ID\",\r\n    \"blobUri\": \"http//bloburi.com\",\r\n    \"durationMs\": 1234\r\n}\r\n```\r\n\r\n### <a name=\"message-routing\"></a>消息路由\r\n\r\n消息路由类别跟踪消息路由评估期间发生的错误以及 IoT 中心感知到的终结点运行状况。 此类别包括以下事件：规则评估为“未定义”、IoT 中心将终结点标记为“已停用”，以及从终结点中收到的任何其他错误。 此类别不包含有关消息本身的特定错误（如设备限制错误），这些错误在“设备遥测”类别下报告。\r\n\r\n```json\r\n{\r\n    \"messageSizeInBytes\": 1234,\r\n    \"time\": \"UTC timestamp\",\r\n    \"operationName\": \"ingress\",\r\n    \"category\": \"routes\",\r\n    \"level\": \"Error\",\r\n    \"deviceId\": \"device-ID\",\r\n    \"messageId\": \"ID of message\",\r\n    \"routeName\": \"myroute\",\r\n    \"endpointName\": \"myendpoint\",\r\n    \"details\": \"ExternalEndpointDisabled\"\r\n}\r\n```\r\n\r\n## <a name=\"view-events\"></a>查看事件\r\n\r\n可以使用 *iothub-explorer* 工具快速测试 IoT 中心是否正在生成监视事件。 若要安装该工具，请参阅 [iothub-explorer][lnk-iothub-explorer] GitHub 存储库中的说明。\r\n\r\n1. 请确保门户中的“连接”监视类别设置为“详细”。\r\n\r\n1. 在命令提示符下，运行以下命令以读取监视终结点：\r\n\r\n    ```\r\n    iothub-explorer monitor-ops --login {your iothubowner connection string}\r\n    ```\r\n\r\n1. 在另一个命令提示符下，运行以下命令以模拟发送设备到云消息的设备：\r\n\r\n    ```\r\n    iothub-explorer simulate-device {your device name} --send \"My test message\" --login {your iothubowner connection string}\r\n    ```\r\n\r\n1. 当模拟设备连接到 IoT 中心时，第一个命令提示符显示监视事件。\r\n\r\n## <a name=\"connect-to-the-monitoring-endpoint\"></a>连接到监视终结点\r\n\r\nIoT 中心上的监视终结点是与事件中心兼容的终结点。 可使用任何适用于事件中心的机制从此终结点读取监视消息。 以下示例创建的基本读取器不适用于高吞吐量部署。 若要深入了解如何处理来自事件中心的消息，请参阅[事件中心入门][lnk-eventhubs-tutorial]教程。\r\n\r\n若要连接到监视终结点，需要一个连接字符串和终结点名称。 以下步骤介绍如何在门户中查找必需的值：\r\n\r\n1. 在门户中，导航到 IoT 中心资源边栏选项卡。\r\n\r\n1. 选择“操作监视”，记下“与事件中心兼容的名称”和“与事件中心兼容的终结点”值：\r\n\r\n    ![“与事件中心兼容的终结点”值][img-endpoints]\r\n\r\n1. 选择“共享访问策略”，并选择“服务”。 记下“主密钥”值：\r\n\r\n    ![服务共享访问策略主密钥][img-service-key]\r\n\r\n以下 C# 代码示例取自 Visual Studio **Windows 经典桌面** C# 控制台应用。 该项目安装了 **WindowsAzure.ServiceBus** NuGet 包。\r\n\r\n* 如以下示例所示，将连接字符串占位符替换为使用之前记下的“与事件中心兼容的终结点”和服务“主密钥”值的连接字符串：\r\n\r\n    ```cs\r\n    \"Endpoint={your Event Hub-compatible endpoint};SharedAccessKeyName=service;SharedAccessKey={your service primary key value}\"\r\n    ```\r\n\r\n* 将监视终结点名称占位符替换为之前记下的“与事件中心兼容的名称”值。\r\n\r\n```cs\r\nclass Program\r\n{\r\n    static string connectionString = \"{your monitoring endpoint connection string}\";\r\n    static string monitoringEndpointName = \"{your monitoring endpoint name}\";\r\n    static EventHubClient eventHubClient;\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Monitoring. Press Enter key to exit.\\n\");\r\n\r\n        eventHubClient = EventHubClient.CreateFromConnectionString(connectionString, monitoringEndpointName);\r\n        var d2cPartitions = eventHubClient.GetRuntimeInformation().PartitionIds;\r\n        CancellationTokenSource cts = new CancellationTokenSource();\r\n        var tasks = new List<Task>();\r\n\r\n        foreach (string partition in d2cPartitions)\r\n        {\r\n            tasks.Add(ReceiveMessagesFromDeviceAsync(partition, cts.Token));\r\n        }\r\n\r\n        Console.ReadLine();\r\n        Console.WriteLine(\"Exiting...\");\r\n        cts.Cancel();\r\n        Task.WaitAll(tasks.ToArray());\r\n    }\r\n\r\n    private static async Task ReceiveMessagesFromDeviceAsync(string partition, CancellationToken ct)\r\n    {\r\n        var eventHubReceiver = eventHubClient.GetDefaultConsumerGroup().CreateReceiver(partition, DateTime.UtcNow);\r\n        while (true)\r\n        {\r\n            if (ct.IsCancellationRequested)\r\n            {\r\n                await eventHubReceiver.CloseAsync();\r\n                break;\r\n            }\r\n\r\n            EventData eventData = await eventHubReceiver.ReceiveAsync(new TimeSpan(0,0,10));\r\n\r\n            if (eventData != null)\r\n            {\r\n                string data = Encoding.UTF8.GetString(eventData.GetBytes());\r\n                Console.WriteLine(\"Message received. Partition: {0} Data: '{1}'\", partition, data);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n若要进一步探索 IoT 中心的功能，请参阅：\r\n\r\n* [IoT 中心开发人员指南][lnk-devguide]\r\n* [使用 Azure IoT Edge 将 AI 部署到边缘设备][lnk-iotedge]\r\n\r\n<!-- Links and images -->\r\n[1]: ./media/iot-hub-operations-monitoring/enable-OM-1.png\r\n[2]: ./media/iot-hub-operations-monitoring/enable-OM-2.png\r\n[img-endpoints]: media/iot-hub-operations-monitoring/monitoring-endpoint.png\r\n[img-service-key]: media/iot-hub-operations-monitoring/service-key.png\r\n\r\n[lnk-blog-announcement]: https://azure.microsoft.com/blog/monitor-your-azure-iot-solutions-with-azure-monitor-and-azure-resource-health\r\n[lnk-get-started]: ./iot-hub-csharp-csharp-getstarted.md\r\n[lnk-diagnostic-metrics]: ./iot-hub-metrics.md\r\n[lnk-scaling]: ./iot-hub-scaling.md\r\n[lnk-dr]: ./iot-hub-ha-dr.md\r\n\r\n[lnk-devguide]: ./iot-hub-devguide.md\r\n[lnk-iotedge]: ./iot-hub-linux-iot-edge-simulated-device.md\r\n[lnk-iothub-explorer]: https://github.com/azure/iothub-explorer\r\n[lnk-eventhubs-tutorial]: ../event-hubs/event-hubs-csharp-ephcs-getstarted.md\r\n\r\n<!--Update_Description:update wording and link references-->"}