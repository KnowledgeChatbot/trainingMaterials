{"Title":"Azure IoT 中心入门 (.NET)","Description":"了解如何通过用于 .NET 的 IoT SDK 将设备到云消息发送到 Azure IoT 中心。 创建模拟的设备和服务应用，以便通过 IoT 中心注册设备、发送消息和读取消息。","Content":"# <a name=\"connect-your-device-to-your-iot-hub-using-net\"></a>使用 .NET 将设备连接到 IoT 中心\r\n[!INCLUDE [iot-hub-selector-get-started](../../includes/iot-hub-selector-get-started.md)]\r\n\r\n本教程结束时，会创建三个 .NET 控制台应用：\r\n\r\n* **CreateDeviceIdentity**，用于创建设备标识和关联的安全密钥以连接设备应用。\r\n* **ReadDeviceToCloudMessages**，显示设备应用发送的遥测数据。\r\n* **SimulatedDevice**，它使用前面创建的设备标识连接到 IoT 中心，并使用 MQTT 协议每秒发送一次遥测消息。\r\n\r\n可以下载或克隆 Visual Studio 解决方案，其中包含 GitHub 提供的三个应用。\r\n\r\n```bash\r\ngit clone https://github.com/Azure-Samples/iot-hub-dotnet-simulated-device-client-app.git\r\n```\r\n\r\n> [!NOTE]\r\n> 有关可用于生成在设备和解决方案后端上运行的应用程序的 Azure IoT SDK 的信息，请参阅 [Azure IoT SDK][lnk-hub-sdks]。\r\n> \r\n> \r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* Visual Studio 2015 或 Visual Studio 2017。\r\n* 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n现已创建 IoT 中心，因此已具有完成本教程剩余部分所需的主机名和 IoT 中心连接字符串。\r\n\r\n<a id=\"DeviceIdentity_csharp\"></a>\r\n[!INCLUDE [iot-hub-get-started-create-device-identity-csharp](../../includes/iot-hub-get-started-create-device-identity-csharp.md)]\r\n\r\n<a id=\"D2C_csharp\"></a>\r\n## <a name=\"receive-device-to-cloud-messages\"></a>接收设备到云的消息\r\n本部分创建一个 .NET 控制台应用，用于从 IoT 中心读取设备到云的消息。 IoT 中心公开与 [Azure 事件中心][lnk-event-hubs-overview]兼容的终结点，以让用户读取设备到云的消息。 为了简单起见，本教程创建的基本读取器不适用于高吞吐量部署。 若要了解如何大规模处理设备到云的消息，请参阅[处理设备到云的消息][lnk-process-d2c-tutorial]教程。 若要深入了解如何处理来自事件中心的消息，请参阅[事件中心入门][lnk-eventhubs-tutorial]教程。 （本教程适用与 IoT 中心和事件中心相兼容的终结点。）\r\n\r\n> [!NOTE]\r\n> 读取设备到云消息的事件中心兼容终结点始终使用 AMQP 协议。\r\n\r\n1. 在 Visual Studio 中，使用“控制台应用(.NET Framework)”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 确保 .NET Framework 版本为 4.5.1 或更高。 将项目命名为 **ReadDeviceToCloudMessages**。\r\n\r\n    ![新的 Visual C# Windows 经典桌面项目][10a]\r\n2. 在解决方案资源管理器中，右键单击“ReadDeviceToCloudMessages”项目，并单击“管理 NuGet 包”。\r\n3. 在“NuGet 包管理器”窗口中，搜索 **WindowsAzure.ServiceBus**，选择“安装”并接受使用条款。 该过程将下载、安装 [Azure 服务总线][lnk-servicebus-nuget]及其所有依赖项并添加对它的引用。 此包可让应用程序连接到 IoT 中心上与事件中心兼容的终结点。\r\n4. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r\n   \r\n   ```csharp\r\n   using Microsoft.ServiceBus.Messaging;\r\n   using System.Threading;\r\n   ```\r\n5. 将以下字段添加到 **Program** 类。 将占位符值替换为在“创建 IoT 中心”部分中为中心创建的 IoT 中心连接字符串。\r\n   \r\n   ```csharp\r\n   static string connectionString = \"{iothub connection string}\";\r\n   static string iotHubD2cEndpoint = \"messages/events\";\r\n   static EventHubClient eventHubClient;\r\n   ```\r\n6. 将以下方法添加到 **Program** 类：\r\n   \r\n   ```csharp\r\n    private static async Task ReceiveMessagesFromDeviceAsync(string partition, CancellationToken ct)\r\n    {\r\n        var eventHubReceiver = eventHubClient.GetDefaultConsumerGroup().CreateReceiver(partition, DateTime.UtcNow);\r\n        while (true)\r\n        {\r\n            if (ct.IsCancellationRequested) break;\r\n            EventData eventData = await eventHubReceiver.ReceiveAsync();\r\n            if (eventData == null) continue;\r\n\r\n            string data = Encoding.UTF8.GetString(eventData.GetBytes());\r\n            Console.WriteLine(\"Message received. Partition: {0} Data: '{1}'\", partition, data);\r\n        }\r\n    }\r\n    ```\r\n\r\n    此方法使用 **EventHubReceiver** 实例接收来自所有 IoT 中心设备到云接收分区的消息。 请注意在创建 **EventHubReceiver** 对象时传递 `DateTime.Now` 参数的方式，使它仅接收启动后发送的消息。 此筛选器在测试环境中非常有用，因为这样可以看到当前的消息集。 在生产环境中，代码应确保处理所有消息。 有关详细信息，请参阅教程[如何处理 IoT 中心设备到云的消息][lnk-process-d2c-tutorial]。\r\n\r\n7. 最后，在 **Main** 方法中添加以下行：\r\n   \r\n   ```csharp\r\n    Console.WriteLine(\"Receive messages. Ctrl-C to exit.\\n\");\r\n    eventHubClient = EventHubClient.CreateFromConnectionString(connectionString, iotHubD2cEndpoint);\r\n\r\n    var d2cPartitions = eventHubClient.GetRuntimeInformation().PartitionIds;\r\n\r\n    CancellationTokenSource cts = new CancellationTokenSource();\r\n\r\n    System.Console.CancelKeyPress += (s, e) =>\r\n    {\r\n      e.Cancel = true;\r\n      cts.Cancel();\r\n      Console.WriteLine(\"Exiting...\");\r\n    };\r\n\r\n    var tasks = new List<Task>();\r\n    foreach (string partition in d2cPartitions)\r\n    {\r\n       tasks.Add(ReceiveMessagesFromDeviceAsync(partition, cts.Token));\r\n    }  \r\n    Task.WaitAll(tasks.ToArray());\r\n    ```\r\n\r\n## <a name=\"create-a-device-app\"></a>创建设备应用\r\n本部分创建一个 .NET 控制台应用，用于模拟向 IoT 中心发送设备到云消息的设备。\r\n\r\n1. 在 Visual Studio 中，使用“控制台应用(.NET Framework)”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 确保 .NET Framework 版本为 4.5.1 或更高。 将项目命名为 **SimulatedDevice**。\r\n\r\n    ![新的 Visual C# Windows 经典桌面项目][10b]\r\n2. 在解决方案资源管理器中，右键单击“SimulatedDevice”项目，并单击“管理 NuGet 包”。\r\n3. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索 **Microsoft.Azure.Devices.Client**，选择“安装”以安装 **Microsoft.Azure.Devices.Client** 包，并接受使用条款。 该过程将下载、安装 [Azure IoT 设备 SDK][lnk-device-nuget] NuGet 包及其依赖项并添加对它的引用。\r\n4. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r\n   \r\n   ```csharp\r\n   using Microsoft.Azure.Devices.Client;\r\n   using Newtonsoft.Json;\r\n   ```\r\n5. 将以下字段添加到 **Program** 类。 将 `{iot hub hostname}` 替换为在“创建 IoT 中心”部分检索的 IoT 中心主机名。 将 `{device key}` 替换为在“创建设备标识”部分检索的设备密钥。\r\n   \r\n   ```csharp\r\n   static DeviceClient deviceClient;\r\n   static string iotHubUri = \"{iot hub hostname}\";\r\n   static string deviceKey = \"{device key}\";\r\n   ```\r\n\r\n6. 将以下方法添加到 **Program** 类：\r\n   \r\n   ```csharp\r\n    private static async void SendDeviceToCloudMessagesAsync()\r\n    {\r\n        double minTemperature = 20;\r\n        double minHumidity = 60;\r\n        int messageId = 1;\r\n        Random rand = new Random();\r\n\r\n        while (true)\r\n        {\r\n            double currentTemperature = minTemperature + rand.NextDouble() * 15;\r\n            double currentHumidity = minHumidity + rand.NextDouble() * 20;\r\n\r\n            var telemetryDataPoint = new\r\n            {\r\n                messageId = messageId++,\r\n                deviceId = \"myFirstDevice\",\r\n                temperature = currentTemperature,\r\n                humidity = currentHumidity\r\n            };\r\n            var messageString = JsonConvert.SerializeObject(telemetryDataPoint);\r\n            var message = new Message(Encoding.ASCII.GetBytes(messageString));\r\n            message.Properties.Add(\"temperatureAlert\", (currentTemperature > 30) ? \"true\" : \"false\");\r\n\r\n            await deviceClient.SendEventAsync(message);\r\n            Console.WriteLine(\"{0} > Sending message: {1}\", DateTime.Now, messageString);\r\n\r\n            await Task.Delay(1000);\r\n        }\r\n    }\r\n   ```\r\n    此方法每隔一秒发送一条新的设备到云消息。 该消息包含一个具有设备 ID 的 JSON 序列化对象和一个随机生成的编号，用于模拟温度传感器和湿度传感器。\r\n7. 最后，在 **Main** 方法中添加以下行：\r\n   \r\n   ```csharp\r\n   Console.WriteLine(\"Simulated device\\n\");\r\n   deviceClient = DeviceClient.Create(iotHubUri, new DeviceAuthenticationWithRegistrySymmetricKey(\"myFirstDevice\", deviceKey), TransportType.Mqtt);\r\n\r\n   SendDeviceToCloudMessagesAsync();\r\n   Console.ReadLine();\r\n   ```\r\n   \r\n    默认情况下，.NET Framework 应用中的 Create 方法将创建使用 AMQP 协议来与 IoT 中心通信的 DeviceClient 实例。 若要使用 MQTT 或 HTTPS 协议，请使用 **Create** 方法的重写，它使用户能够指定协议。 UWP 和 PCL 客户端默认使用 HTTPS 协议。 如果使用 HTTPS 协议，则还应在项目中添加 **Microsoft.AspNet.WebApi.Client** NuGet 包，以包含 **System.Net.Http.Formatting** 命名空间。\r\n\r\n本教程逐步讲解如何创建 IoT 中心设备应用。 也可以使用 [Azure IoT 中心的连接服务][lnk-connected-service] Visual Studio 扩展将所需的代码添加到设备应用。\r\n\r\n> [!NOTE]\r\n> 为简单起见，本教程不实现任何重试策略。 在生产代码中，应该按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r\n> \r\n> \r\n\r\n## <a name=\"run-the-apps\"></a>运行应用\r\n现在可以运行应用了。\r\n\r\n1. 在 Visual Studio 的“解决方案资源管理器”中右键单击解决方案，并单击“设置启动项目”。 选择“多个启动项目”，并针对“ReadDeviceToCloudMessages”和“SimulatedDevice”项目选择“启动”作为操作。\r\n\r\n    ![启动项目属性][41]\r\n2. 按 **F5** 启动这两个应用，使其运行。 来自 **SimulatedDevice** 应用的控制台输出会显示设备应用发送到 IoT 中心的消息。 来自 **ReadDeviceToCloudMessages** 应用的控制台输出则会显示 IoT 中心接收的消息。\r\n   \r\n    ![来自应用的控制台输出][42]\r\n3. [Azure 门户][lnk-portal]中的“使用情况”磁贴显示发送到 IoT 中心的消息数：\r\n\r\n    ![Azure 门户的“使用情况”磁贴][43]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n在本教程中，已在 Azure 门户中配置了 IoT 中心，并在 IoT 中心的标识注册表中创建了设备标识。 已使用此设备标识来让设备应用向 IoT 中心发送设备到云的消息。 还创建了一个应用，用于显示 IoT 中心接收的消息。 \r\n\r\n若要继续了解 IoT 中心入门知识并浏览其他 IoT 方案，请参阅：\r\n\r\n* [连接设备][lnk-connect-device]\r\n* [设备管理入门][lnk-device-management]\r\n* [IoT Edge 入门][lnk-iot-edge]\r\n\r\n若要了解如何扩展 IoT 解决方案和如何大规模处理设备到云的消息，请参阅 [Process device-to-cloud messages][lnk-process-d2c-tutorial] （处理设备到云的消息）教程。\r\n\r\n[!INCLUDE [iot-hub-get-started-next-steps](../../includes/iot-hub-get-started-next-steps.md)]\r\n\r\n<!-- Images. -->\r\n[41]: ./media/iot-hub-csharp-csharp-getstarted/run-apps1.png\r\n[42]: ./media/iot-hub-csharp-csharp-getstarted/run-apps2.png\r\n[43]: ./media/iot-hub-csharp-csharp-getstarted/usage.png\r\n[10a]: ./media/iot-hub-csharp-csharp-getstarted/create-receive-csharp1.png\r\n[10b]: ./media/iot-hub-csharp-csharp-getstarted/create-device-csharp1.png\r\n\r\n\r\n<!-- Links -->\r\n[lnk-process-d2c-tutorial]: ./iot-hub-csharp-csharp-process-d2c.md\r\n\r\n[lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-portal]: https://portal.azure.cn/\r\n[lnk-eventhubs-tutorial]: ../event-hubs/event-hubs-csharp-ephcs-getstarted.md\r\n[lnk-servicebus-nuget]: https://www.nuget.org/packages/WindowsAzure.ServiceBus\r\n[lnk-event-hubs-overview]: ../event-hubs/event-hubs-overview.md\r\n\r\n[lnk-device-nuget]: https://www.nuget.org/packages/Microsoft.Azure.Devices.Client/\r\n[lnk-transient-faults]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r\n[lnk-connected-service]: https://visualstudiogallery.msdn.microsoft.com/e254a3a5-d72e-488e-9bd3-8fee8e0cd1d6\r\n[lnk-device-management]: ./iot-hub-node-node-device-management-get-started.md\r\n[lnk-iot-edge]: ./iot-hub-linux-iot-edge-get-started.md\r\n[lnk-connect-device]: https://www.azure.cn/develop/iot/\r\n\r\n<!--Update_Description: update wording-->"}