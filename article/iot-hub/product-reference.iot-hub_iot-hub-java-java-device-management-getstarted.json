{"Title":"Azure IoT 中心设备管理入门 (Java)","Description":"如何使用 Azure IoT 中心设备管理启动远程设备重启。 使用适用于 Java 的 Azure IoT 设备 SDK 实现包含直接方法的模拟设备应用，并使用适用于 Java 的 Azure IoT 服务 SDK 实现调用直接方法的服务应用。","Content":"# <a name=\"get-started-with-device-management-java\"></a>设备管理入门 (Java)\r\n\r\n[!INCLUDE [iot-hub-selector-dm-getstarted](../../includes/iot-hub-selector-dm-getstarted.md)]\r\n\r\n本教程演示如何：\r\n\r\n* 使用 Azure 门户创建 IoT 中心，以及如何在 IoT 中心创建设备标识。\r\n* 创建模拟设备应用，以便实现重新启动设备的直接方法。 直接方法是从云中调用的。\r\n* 创建一个应用，其通过 IoT 中心在模拟设备应用上调用重新启动直接方法。 随后，此应用会从设备监视报告属性，从而可查看重新启动操作何时完成。\r\n\r\n本教程结束时，可获得两个 Java 控制台应用：\r\n\r\nsimulated-device。 此应用：\r\n\r\n* 使用之前创建的设备标识连接到 IoT 中心。\r\n* 接收重新启动直接方法调用。\r\n* 模拟物理重新启动。\r\n* 报告上次通过报告属性重新启动的时间。\r\n\r\ntrigger-reboot。 此应用：\r\n\r\n* 在模拟设备应用中调用直接方法。\r\n* 显示对模拟设备发出的直接方法调用做出的响应\r\n* 显示更新的报告属性。\r\n\r\n> [!NOTE]\r\n> 有关 SDK 的信息（可以使用这些 SDK 构建在设备和解决方案后端上运行的应用程序），请参阅 [Azure IoT SDK][lnk-hub-sdks]。\r\n\r\n要完成本教程，需要：\r\n\r\n* Java SE 8。 <br/> [准备开发环境][lnk-dev-setup] 介绍了如何在 Windows 或 Linux 上安装本教程所用的 Java。\r\n* Maven 3。  <br/> [准备开发环境][lnk-dev-setup]介绍如何在 Windows 或 Linux 上安装本教程所用的 [Maven][lnk-maven]。\r\n* [Node.js 版本 0.10.0 或更高版本](http://nodejs.org)。\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r\n\r\n## <a name=\"trigger-a-remote-reboot-on-the-device-using-a-direct-method\"></a>使用直接方法在设备上触发远程重新启动\r\n\r\n本部分将创建一个进行如下操作的 Java 控制台应用：\r\n\r\n1. 在模拟设备应用中调用重启直接方法。\r\n1. 显示响应。\r\n1. 轮询设备发送的报告属性，以确定重启的完成时间。\r\n\r\n此控制台应用连接到 IoT 中心，以便调用该直接方法并读取报告属性。\r\n\r\n1. 创建名为 dm-get-started 的空文件夹。\r\n\r\n1. 使用命令提示符中的以下命令，在 dm-get-started 文件夹中创建名为 trigger-reboot 的 Maven 项目。 以下内容演示了一条很长的命令：\r\n\r\n    `mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=trigger-reboot -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false`\r\n\r\n1. 在命令提示符下，导航到 trigger-reboot 文件夹。\r\n\r\n1. 使用文本编辑器，打开 trigger-reboot 文件夹中的 pom.xml 文件，并在 dependencies 节点中添加以下依赖项。 此依赖项使得你可以使用应用中的 iot-service-client 包来与 IoT 中心进行通信：\r\n\r\n    ```xml\r\n    <dependency>\r\n      <groupId>com.microsoft.azure.sdk.iot</groupId>\r\n      <artifactId>iot-service-client</artifactId>\r\n      <version>1.7.23</version>\r\n      <type>jar</type>\r\n    </dependency>\r\n    ```\r\n\r\n    > [!NOTE]\r\n    > 可以使用 [Maven 搜索][lnk-maven-service-search]检查是否有最新版本的 **iot-service-client**。\r\n\r\n1. 在 **dependencies** 节点后添加以下 **build** 节点。 此配置指示 Maven 使用 Java 1.8 来生成应用：\r\n\r\n    ```xml\r\n    <build>\r\n      <plugins>\r\n        <plugin>\r\n          <groupId>org.apache.maven.plugins</groupId>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.3</version>\r\n          <configuration>\r\n            <source>1.8</source>\r\n            <target>1.8</target>\r\n          </configuration>\r\n        </plugin>\r\n      </plugins>\r\n    </build>\r\n    ```\r\n\r\n1. 保存并关闭 pom.xml 文件。\r\n\r\n1. 使用文本编辑器打开 trigger-reboot\\src\\main\\java\\com\\mycompany\\app\\App.java 源文件。\r\n\r\n1. 在该文件中添加以下 **import** 语句：\r\n\r\n    ```java\r\n    import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceMethod;\r\n    import com.microsoft.azure.sdk.iot.service.devicetwin.MethodResult;\r\n    import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\r\n    import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\r\n    import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\r\n\r\n    import java.io.IOException;\r\n    import java.util.concurrent.TimeUnit;\r\n    import java.util.concurrent.Executors;\r\n    import java.util.concurrent.ExecutorService;\r\n    ```\r\n\r\n1. 将以下类级变量添加到 **App** 类。 将 `{youriothubconnectionstring}` 替换为在“创建 IoT 中心”部分记下的 IoT 中心连接字符串：\r\n\r\n    ```java\r\n    public static final String iotHubConnectionString = \"{youriothubconnectionstring}\";\r\n    public static final String deviceId = \"myDeviceId\";\r\n\r\n    private static final String methodName = \"reboot\";\r\n    private static final Long responseTimeout = TimeUnit.SECONDS.toSeconds(30);\r\n    private static final Long connectTimeout = TimeUnit.SECONDS.toSeconds(5);\r\n    ```\r\n\r\n1. 若要实现每隔 10 秒从设备孪生读取报告属性的线程，请将以下嵌套类添加到“App”类：\r\n\r\n    ```java\r\n    private static class ShowReportedProperties implements Runnable {\r\n      public void run() {\r\n        try {\r\n          DeviceTwin deviceTwins = DeviceTwin.createFromConnectionString(iotHubConnectionString);\r\n          DeviceTwinDevice twinDevice = new DeviceTwinDevice(deviceId);\r\n          while (true) {\r\n            System.out.println(\"Get reported properties from device twin\");\r\n            deviceTwins.getTwin(twinDevice);\r\n            System.out.println(twinDevice.reportedPropertiesToString());\r\n            Thread.sleep(10000);\r\n          }\r\n        } catch (Exception ex) {\r\n          System.out.println(\"Exception reading reported properties: \" + ex.getMessage());\r\n        }\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 将 main 方法签名修改为抛出以下异常：\r\n\r\n    ```java\r\n    public static void main(String[] args) throws IOException\r\n    ```\r\n\r\n1. 若要在模拟设备上调用重新启动直接方法，请在“main”方法中添加以下代码：\r\n\r\n    ```java\r\n    System.out.println(\"Starting sample...\");\r\n    DeviceMethod methodClient = DeviceMethod.createFromConnectionString(iotHubConnectionString);\r\n\r\n    try\r\n    {\r\n      System.out.println(\"Invoke reboot direct method\");\r\n      MethodResult result = methodClient.invoke(deviceId, methodName, responseTimeout, connectTimeout, null);\r\n\r\n      if(result == null)\r\n      {\r\n        throw new IOException(\"Invoke direct method reboot returns null\");\r\n      }\r\n      System.out.println(\"Invoked reboot on device\");\r\n      System.out.println(\"Status for device:   \" + result.getStatus());\r\n      System.out.println(\"Message from device: \" + result.getPayload());\r\n    }\r\n    catch (IotHubException e)\r\n    {\r\n        System.out.println(e.getMessage());\r\n    }\r\n    ```\r\n\r\n1. 若要在模拟设备上启动线程，用以轮询报告属性，请在“main”方法中添加以下代码：\r\n\r\n    ```java\r\n    ShowReportedProperties showReportedProperties = new ShowReportedProperties();\r\n    ExecutorService executor = Executors.newFixedThreadPool(1);\r\n    executor.execute(showReportedProperties);\r\n    ```\r\n\r\n1. 若要允许停止应用，请在“main”方法中添加以下代码：\r\n\r\n    ```java\r\n    System.out.println(\"Press ENTER to exit.\");\r\n    System.in.read();\r\n    executor.shutdownNow();\r\n    System.out.println(\"Shutting down sample...\");\r\n    ```\r\n\r\n1. 保存并关闭 trigger-reboot\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。\r\n\r\n1. 生成 trigger-reboot 后端应用并更正任何错误。 在命令提示符下，导航到 trigger-reboot 文件夹并运行以下命令：\r\n\r\n    `mvn clean package -DskipTests`\r\n\r\n## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r\n\r\n本部分介绍如何创建模拟设备的 Java 控制台应用。 此应用侦听来自 IoT 中心的重新启动直接方法调用，并立即对该调用做出响应。 之后，此应用会休眠一段时间，以模拟重新启动过程，然后使用报告属性，通知 trigger-reboot 后端应用重新启动已完成。\r\n\r\n1. 使用命令提示符中的以下命令，在 dm-get-started 文件夹中创建名为 simulated-device 的 Maven 项目。 以下内容是一条很长的命令：\r\n\r\n    `mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=simulated-device -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false`\r\n\r\n1. 在命令提示符下，导航到 simulated-device 文件夹。\r\n\r\n1. 使用文本编辑器，打开 simulated-device 文件夹中的 pom.xml 文件，并在 dependencies 节点中添加以下依赖项。 此依赖项使得你可以使用应用中的 iot-service-client 包来与 IoT 中心进行通信：\r\n\r\n    ```xml\r\n    <dependency>\r\n      <groupId>com.microsoft.azure.sdk.iot</groupId>\r\n      <artifactId>iot-device-client</artifactId>\r\n      <version>1.3.32</version>\r\n    </dependency>\r\n    ```\r\n\r\n    > [!NOTE]\r\n    > 可以使用 [Maven 搜索][lnk-maven-device-search]检查是否有最新版本的 **iot-device-client**。\r\n\r\n1. 在 **dependencies** 节点后添加以下 **build** 节点。 此配置指示 Maven 使用 Java 1.8 来生成应用：\r\n\r\n    ```xml\r\n    <build>\r\n      <plugins>\r\n        <plugin>\r\n          <groupId>org.apache.maven.plugins</groupId>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.3</version>\r\n          <configuration>\r\n            <source>1.8</source>\r\n            <target>1.8</target>\r\n          </configuration>\r\n        </plugin>\r\n      </plugins>\r\n    </build>\r\n    ```\r\n\r\n1. 保存并关闭 pom.xml 文件。\r\n\r\n1. 使用文本编辑器打开 simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java 源文件。\r\n\r\n1. 在该文件中添加以下 **import** 语句：\r\n\r\n    ```java\r\n    import com.microsoft.azure.sdk.iot.device.*;\r\n    import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\r\n\r\n    import java.io.IOException;\r\n    import java.net.URISyntaxException;\r\n    import java.time.LocalDateTime;\r\n    import java.util.Scanner;\r\n    import java.util.Set;\r\n    import java.util.HashSet;\r\n    ```\r\n\r\n1. 将以下类级变量添加到 **App** 类。 使用“创建设备标识”部分所述的设备连接字符串替换 `{yourdeviceconnectionstring}`：\r\n\r\n    ```java\r\n    private static final int METHOD_SUCCESS = 200;\r\n    private static final int METHOD_NOT_DEFINED = 404;\r\n\r\n    private static IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\r\n    private static String connString = \"{yourdeviceconnectionstring}\";\r\n    private static DeviceClient client;\r\n    ```\r\n\r\n1. 若要为直接方法状态事件实现回调处理程序，请将以下嵌套类添加到 App 类：\r\n\r\n    ```java\r\n    protected static class DirectMethodStatusCallback implements IotHubEventCallback\r\n    {\r\n      public void execute(IotHubStatusCode status, Object context)\r\n      {\r\n        System.out.println(\"IoT Hub responded to device method operation with status \" + status.name());\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 若要实现设备孪生状态事件的回调处理程序，请将以下嵌套类添加到“App”类：\r\n\r\n    ```java\r\n    protected static class DeviceTwinStatusCallback implements IotHubEventCallback\r\n    {\r\n        public void execute(IotHubStatusCode status, Object context)\r\n        {\r\n            System.out.println(\"IoT Hub responded to device twin operation with status \" + status.name());\r\n        }\r\n    }\r\n    ```\r\n\r\n1. 若要实现属性事件的回调处理程序，请将以下嵌套类添加到“App”类：\r\n\r\n    ```java\r\n    protected static class PropertyCallback implements PropertyCallBack<String, String>\r\n    {\r\n      public void PropertyCall(String propertyKey, String propertyValue, Object context)\r\n      {\r\n        System.out.println(\"PropertyKey:     \" + propertyKey);\r\n        System.out.println(\"PropertyKvalue:  \" + propertyKey);\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 若要实现模拟设备重新启动的线程，请将以下嵌套类添加到“App”类。 线程会休眠五秒钟，然后设置 lastReboot 报告属性：\r\n\r\n    ```java\r\n    protected static class RebootDeviceThread implements Runnable {\r\n      public void run() {\r\n        try {\r\n          System.out.println(\"Rebooting...\");\r\n          Thread.sleep(5000);\r\n          Property property = new Property(\"lastReboot\", LocalDateTime.now());\r\n          Set<Property> properties = new HashSet<Property>();\r\n          properties.add(property);\r\n          client.sendReportedProperties(properties);\r\n          System.out.println(\"Rebooted\");\r\n        }\r\n        catch (Exception ex) {\r\n          System.out.println(\"Exception in reboot thread: \" + ex.getMessage());\r\n        }\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 若要实现设备上的直接方法，请将以下嵌套类添加到“App”类。 模拟应用收到对重新启动直接方法的调用时，会向调用方返回一个确认，然后启动线程，处理重新启动：\r\n\r\n    ```java\r\n    protected static class DirectMethodCallback implements com.microsoft.azure.sdk.iot.device.DeviceTwin.DeviceMethodCallback\r\n    {\r\n      @Override\r\n      public DeviceMethodData call(String methodName, Object methodData, Object context)\r\n      {\r\n        DeviceMethodData deviceMethodData;\r\n        switch (methodName)\r\n        {\r\n          case \"reboot\" :\r\n          {\r\n            int status = METHOD_SUCCESS;\r\n            System.out.println(\"Received reboot request\");\r\n            deviceMethodData = new DeviceMethodData(status, \"Started reboot\");\r\n            RebootDeviceThread rebootThread = new RebootDeviceThread();\r\n            Thread t = new Thread(rebootThread);\r\n            t.start();\r\n            break;\r\n          }\r\n          default:\r\n          {\r\n            int status = METHOD_NOT_DEFINED;\r\n            deviceMethodData = new DeviceMethodData(status, \"Not defined direct method \" + methodName);\r\n          }\r\n        }\r\n        return deviceMethodData;\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 修改 main 方法的签名以引发以下异常：\r\n\r\n    ```java\r\n    public static void main(String[] args) throws IOException, URISyntaxException\r\n    ```\r\n\r\n1. 若要实例化 DeviceClient，请将以下代码添加到 main 方法：\r\n\r\n    ```java\r\n    System.out.println(\"Starting device client sample...\");\r\n    client = new DeviceClient(connString, protocol);\r\n    ```\r\n\r\n1. 若要开始侦听直接方法调用，请将以下代码添加到 main 方法：\r\n\r\n    ```java\r\n    try\r\n    {\r\n      client.open();\r\n      client.subscribeToDeviceMethod(new DirectMethodCallback(), null, new DirectMethodStatusCallback(), null);\r\n      client.startDeviceTwin(new DeviceTwinStatusCallback(), null, new PropertyCallback(), null);\r\n      System.out.println(\"Subscribed to direct methods and polling for reported properties. Waiting...\");\r\n    }\r\n    catch (Exception e)\r\n    {\r\n      System.out.println(\"On exception, shutting down \\n\" + \" Cause: \" + e.getCause() + \" \\n\" +  e.getMessage());\r\n      client.close();\r\n      System.out.println(\"Shutting down...\");\r\n    }\r\n    ```\r\n\r\n1. 若要关闭设备模拟器，请将以下代码添加到 main 方法：\r\n\r\n    ```java\r\n    System.out.println(\"Press any key to exit...\");\r\n    Scanner scanner = new Scanner(System.in);\r\n    scanner.nextLine();\r\n    scanner.close();\r\n    client.close();\r\n    System.out.println(\"Shutting down...\");\r\n    ```\r\n\r\n1. 保存并关闭 simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java 文件。\r\n\r\n1. 生成 simulated-device 后端应用并更正任何错误。 在命令提示符下，导航到 simulated-device 文件夹并运行以下命令：\r\n\r\n    `mvn clean package -DskipTests`\r\n\r\n## <a name=\"run-the-apps\"></a>运行应用\r\n\r\n现在，已准备就绪，可以运行应用。\r\n\r\n1. 在 simulated-device 文件夹的命令提示符下，运行以下命令，开始侦听从 IoT 中心发出的重新启动方法调用：\r\n\r\n    `mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"`\r\n\r\n    ![Java IoT 中心模拟设备应用，侦听重新启动直接方法调用][1]\r\n\r\n1. 在 trigger-reboot 文件夹的命令提示符下，运行以下命令，从 IoT 中心调用模拟设备上的重新启动方法：\r\n\r\n    `mvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"`\r\n\r\n    ![用于调用重新启动直接方法的 Java IoT 中心服务应用][2]\r\n\r\n1. 模拟设备对重新启动直接方法调用做出响应：\r\n\r\n    ![Java IoT 中心模拟设备应用对直接方法调用进行响应][3]\r\n\r\n[!INCLUDE [iot-hub-dm-followup](../../includes/iot-hub-dm-followup.md)]\r\n\r\n<!-- images and links -->\r\n[1]: ./media/iot-hub-java-java-device-management-getstarted/launchsimulator.png\r\n[2]: ./media/iot-hub-java-java-device-management-getstarted/triggerreboot.png\r\n[3]: ./media/iot-hub-java-java-device-management-getstarted/respondtoreboot.png\r\n<!-- Links -->\r\n\r\n[lnk-maven]: https://maven.apache.org/what-is-maven.html\r\n\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-java/blob/master/doc/java-devbox-setup.md\r\n\r\n[lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r\n\r\n[lnk-maven-service-search]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22iot-service-client%22%20g%3A%22com.microsoft.azure.sdk.iot%22\r\n[lnk-maven-device-search]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22iot-device-client%22%20g%3A%22com.microsoft.azure.sdk.iot%22\r\n\r\n<!--Update_Description:update wording and code-->"}