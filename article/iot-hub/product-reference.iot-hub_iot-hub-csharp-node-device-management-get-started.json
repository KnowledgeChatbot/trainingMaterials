{"Title":"Azure IoT 中心设备管理入门 (.NET/Node)","Description":"如何使用 Azure IoT 中心设备管理启动远程设备重启。 使用适用于 Node.js 的 Azure IoT 设备 SDK 实现包含直接方法的模拟设备应用，并使用适用于 .NET 的 Azure IoT 服务 SDK 实现调用直接方法的服务应用。","Content":"# <a name=\"get-started-with-device-management-netnode\"></a>设备管理入门 (.NET/Node)\r\n\r\n[!INCLUDE [iot-hub-selector-dm-getstarted](../../includes/iot-hub-selector-dm-getstarted.md)]\r\n\r\n本教程演示如何：\r\n\r\n* 使用 Azure 门户创建 IoT 中心，以及如何在 IoT 中心创建设备标识。\r\n* 创建包含重新启动该设备的直接方法的模拟设备应用。 直接方法是从云中调用的。\r\n* 创建一个 .NET 控制台应用，其通过 IoT 中心在模拟设备应用上调用重新启动直接方法。\r\n\r\n本教程结束时，用户会有一个 Node.js 控制台设备应用，以及一个 .NET (C#) 控制台后端应用：\r\n\r\n**dmpatterns_getstarted_device.js**，它使用先前创建的设备标识连接到 IoT 中心，接收重新启动直接方法，模拟物理重新启动，并报告上次重新启动的时间。\r\n\r\n**TriggerReboot**，它在模拟设备应用中调用直接方法、显示响应以及显示更新的报告属性。\r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* Visual Studio 2015 或 Visual Studio 2017。\r\n* Node.js 版本 4.0.x 或更高版本； <br/>  [准备开发环境][lnk-dev-setup]介绍了如何在 Windows 或 Linux 上安装本教程所用的 Node.js。\r\n* 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r\n\r\n## <a name=\"trigger-a-remote-reboot-on-the-device-using-a-direct-method\"></a>使用直接方法在设备上触发远程重新启动\r\n在本部分中，你创建一个 .NET 控制台应用（使用 C#）以使用直接方法在设备上启动远程重新启动。 该应用使用设备孪生查询来搜索该设备的上次重新启动时间。\r\n\r\n1. 在 Visual Studio 中，使用“控制台应用(.NET Framework)”项目模板将 Visual C# Windows 经典桌面项目添加到新解决方案。 确保 .NET Framework 版本为 4.5.1 或更高。 **TriggerReboot**。\r\n\r\n    ![新的 Visual C# Windows 经典桌面项目][img-createapp]\r\n\r\n2. 在“解决方案资源管理器”中，右键单击“TriggerReboot”项目，并单击“管理 NuGet 包”。\r\n3. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索 **microsoft.azure.devices**，选择“安装”以安装 **Microsoft.Azure.Devices** 包，并接受使用条款。 此过程会下载、安装 [Azure IoT 服务 SDK][lnk-nuget-service-sdk] NuGet 包及其依赖项并添加对它的引用。\r\n\r\n    ![“NuGet 包管理器”窗口][img-servicenuget]\r\n4. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r\n   \r\n        using Microsoft.Azure.Devices;\r\n        using Microsoft.Azure.Devices.Shared;\r\n        \r\n5. 将以下字段添加到 **Program** 类。 将占位符值替换为在“创建 IoT 中心”部分中为中心创建的 IoT 中心连接字符串。 \r\n   \r\n        static RegistryManager registryManager;\r\n        static string connString = \"{iot hub connection string}\";\r\n        static ServiceClient client;\r\n        static JobClient jobClient;\r\n        static string targetDevice = \"myDeviceId\";\r\n        \r\n6. 将以下方法添加到 **Program** 类。  此代码获取重新启动设备的设备孪生并输出报告属性。\r\n\r\n    ```\r\n    public static async Task QueryTwinRebootReported()\r\n    {\r\n        Twin twin = await registryManager.GetTwinAsync(targetDevice);\r\n        Console.WriteLine(twin.Properties.Reported.ToJson());\r\n    }\r\n    ```\r\n\r\n7. 将以下方法添加到 **Program** 类。  此代码使用直接方法在设备上发起重新启动操作。\r\n\r\n    ```\r\n    public static async Task StartReboot()\r\n    {\r\n        client = ServiceClient.CreateFromConnectionString(connString);\r\n        CloudToDeviceMethod method = new CloudToDeviceMethod(\"reboot\");\r\n        method.ResponseTimeout = TimeSpan.FromSeconds(30);\r\n\r\n        CloudToDeviceMethodResult result = await client.InvokeDeviceMethodAsync(targetDevice, method);\r\n\r\n        Console.WriteLine(\"Invoked firmware update on device.\");\r\n    }\r\n    ```\r\n\r\n7. 最后，在 **Main** 方法中添加以下行：\r\n\r\n    ```\r\n    registryManager = RegistryManager.CreateFromConnectionString(connString);\r\n    StartReboot().Wait();\r\n    QueryTwinRebootReported().Wait();\r\n    Console.WriteLine(\"Press ENTER to exit.\");\r\n    Console.ReadLine();\r\n    ```\r\n\r\n8. 生成解决方案。\r\n\r\n## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r\n在本部分，用户需\r\n\r\n* 创建一个 Node.js 控制台应用，用于响应通过云调用的直接方法\r\n* 触发模拟的设备重启\r\n* 使用报告属性，允许通过设备孪生查询标识设备及其上次重启的时间\r\n\r\n1. 新建名为 **manageddevice**的空文件夹。  在 **manageddevice** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。  接受所有默认值：\r\n\r\n    ```\r\n    npm init\r\n    ```\r\n2. 在 **manageddevice** 文件夹的命令提示符处，运行下述命令以安装 **azure-iot-device** 设备 SDK 包和 **azure-iot-device-mqtt** 包：\r\n\r\n    ```\r\n    npm install azure-iot-device azure-iot-device-mqtt --save\r\n    ```\r\n3. 在 **manageddevice** 文件夹中，利用文本编辑器创建新的 **dmpatterns_getstarted_device.js** 文件。\r\n4. 在 **dmpatterns_getstarted_device.js** 文件开头添加以下“require”语句：\r\n\r\n    ```\r\n    'use strict';\r\n\r\n    var Client = require('azure-iot-device').Client;\r\n    var Protocol = require('azure-iot-device-mqtt').Mqtt;\r\n    ```\r\n5. 添加 **connectionString** 变量，并使用它创建一个**客户端**实例。  将连接字符串替换为设备连接字符串。  \r\n\r\n    ```\r\n    var connectionString = 'HostName={youriothostname};DeviceId=myDeviceId;SharedAccessKey={yourdevicekey}';\r\n    var client = Client.fromConnectionString(connectionString, Protocol);\r\n    ```\r\n6. 添加以下函数，实现设备上的直接方法\r\n\r\n    ```\r\n    var onReboot = function(request, response) {\r\n\r\n        // Respond the cloud app for the direct method\r\n        response.send(200, 'Reboot started', function(err) {\r\n            if (!err) {\r\n                console.error('An error occured when sending a method response:\\n' + err.toString());\r\n            } else {\r\n                console.log('Response to method \\'' + request.methodName + '\\' sent successfully.');\r\n            }\r\n        });\r\n\r\n        // Report the reboot before the physical restart\r\n        var date = new Date();\r\n        var patch = {\r\n            iothubDM : {\r\n                reboot : {\r\n                    lastReboot : date.toISOString(),\r\n                }\r\n            }\r\n        };\r\n\r\n        // Get device Twin\r\n        client.getTwin(function(err, twin) {\r\n            if (err) {\r\n                console.error('could not get twin');\r\n            } else {\r\n                console.log('twin acquired');\r\n                twin.properties.reported.update(patch, function(err) {\r\n                    if (err) throw err;\r\n                    console.log('Device reboot twin state reported')\r\n                });  \r\n            }\r\n        });\r\n\r\n        // Add your device's reboot API for physical restart.\r\n        console.log('Rebooting!');\r\n    };\r\n    ```\r\n7. 添加以下代码，打开与 IoT 中心的连接并启动直接方法侦听器：\r\n\r\n    ```\r\n    client.open(function(err) {\r\n        if (err) {\r\n            console.error('Could not open IotHub client');\r\n        }  else {\r\n            console.log('Client opened.  Waiting for reboot method.');\r\n            client.onDeviceMethod('reboot', onReboot);\r\n        }\r\n    });\r\n    ```\r\n8. 保存并关闭 **dmpatterns_getstarted_device.js** 文件。\r\n\r\n   >[!NOTE]\r\n   > 为简单起见，本教程不实现任何重试策略。 在生产代码中，应该按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r\n\r\n## <a name=\"run-the-apps\"></a>运行应用\r\n现在，已准备就绪，可以运行应用。\r\n\r\n1. 在 **manageddevice** 文件夹的命令提示符处，运行以下命令以开始侦听重新启动直接方法。\r\n\r\n    ```\r\n    node dmpatterns_getstarted_device.js\r\n    ```\r\n2. 运行 C# 控制台应用 **TriggerReboot**。 右键单击“TriggerReboot”项目，选择“调试”，并选择“启动新实例”。\r\n\r\n3. 可以在控制台中看到设备对直接方法的响应。\r\n\r\n[!INCLUDE [iot-hub-dm-followup](../../includes/iot-hub-dm-followup.md)]\r\n\r\n<!-- images and links -->\r\n[img-output]: ./media/iot-hub-get-started-with-dm/image6.png\r\n[img-dm-ui]: ./media/iot-hub-get-started-with-dm/dmui.png\r\n[img-servicenuget]: ./media/iot-hub-csharp-node-device-management-get-started/servicesdknuget.png\r\n[img-createapp]: ./media/iot-hub-csharp-node-device-management-get-started/createnetapp.png\r\n\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/blob/master/doc/node-devbox-setup.md\r\n\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[Azure portal]: https://portal.azure.cn/\r\n[Using resource groups to manage your Azure resources]: ../azure-portal/resource-group-portal.md\r\n[lnk-dm-github]: https://github.com/Azure/azure-iot-device-management\r\n\r\n[lnk-devtwin]: ./iot-hub-devguide-device-twins.md\r\n[lnk-c2dmethod]: ./iot-hub-devguide-direct-methods.md\r\n[lnk-transient-faults]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r\n[lnk-nuget-service-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\r\n\r\n<!--Update_Description: update wording and meta data-->"}