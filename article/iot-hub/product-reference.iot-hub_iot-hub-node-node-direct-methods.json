{"Title":"Azure IoT 中心直接方法 (Node)","Description":"如何使用 Azure IoT 中心直接方法。 使用 Azure IoT SDK for Node.js 实现包含直接方法的模拟设备应用和调用直接方法的服务应用。","Content":"# <a name=\"use-direct-methods-on-your-iot-device-with-nodejs\"></a>通过 Node.js 使用 IoT 设备上的直接方法\r\n[!INCLUDE [iot-hub-selector-c2d-methods](../../includes/iot-hub-selector-c2d-methods.md)]\r\n\r\n本教程结束时，会创建两个 Node.js 控制台应用：\r\n\r\n* **CallMethodOnDevice.js**，用于在模拟设备应用上调用方法并显示响应。\r\n* **SimulatedDevice.js**，可使用前面创建的设备标识连接到 IoT 中心，并响应通过云调用的方法。\r\n\r\n> [!NOTE]\r\n> [Azure IoT SDK][lnk-hub-sdks] 文章介绍了 Azure IoT SDK，这些 SDK 可用于构建在设备和解决方案后端运行的应用程序。\r\n> \r\n> \r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* Node.js 版本 4.0.x 或更高版本。\r\n* 有效的 Azure 帐户。 （如果没有帐户，只需花费几分钟就能创建一个[帐户][lnk-free-trial]。）\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r\n\r\n## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r\n在本部分，用户需创建一个 Node.js 控制台应用，用于响应通过云调用的方法。\r\n\r\n1. 新建名为 **simulateddevice**的空文件夹。 在命令提示符下使用以下命令，在 **simulateddevice** 文件夹中创建一个 package.json 文件。 接受所有默认值：\r\n   \r\n    ```\r\n    npm init\r\n    ```\r\n2. 在 **simulateddevice** 文件夹的命令提示符处，运行下述命令以安装 **azure-iot-device** 设备 SDK 包和 **azure-iot-device-mqtt** 包：\r\n   \r\n    ```\r\n    npm install azure-iot-device azure-iot-device-mqtt --save\r\n    ```\r\n3. 在 **SimulatedDevice.js** 文件夹中，利用文本编辑器创建新的 **simulateddevice** 文件。\r\n4. 在 **SimulatedDevice.js** 文件的开头添加以下 `require` 语句：\r\n\r\n    ```\r\n    'use strict';\r\n\r\n    var Mqtt = require('azure-iot-device-mqtt').Mqtt;\r\n    var DeviceClient = require('azure-iot-device').Client;\r\n    ```\r\n5. 添加 **connectionString** 变量，并使用它创建 **DeviceClient** 实例。 将 **{device connection string}** 替换为在“创建设备标识”部分生成的设备连接字符串：\r\n\r\n    ```\r\n    var connectionString = '{device connection string}';\r\n    var client = DeviceClient.fromConnectionString(connectionString, Mqtt);\r\n    ```\r\n6. 添加以下函数，实现设备上的方法：\r\n\r\n    ```\r\n    function onWriteLine(request, response) {\r\n        console.log(request.payload);\r\n\r\n        response.send(200, 'Input was written to log.', function(err) {\r\n            if(err) {\r\n                console.error('An error ocurred when sending a method response:\\n' + err.toString());\r\n            } else {\r\n                console.log('Response to method \\'' + request.methodName + '\\' sent successfully.' );\r\n            }\r\n        });\r\n    }\r\n    ```\r\n7. 打开与 IoT 中心的连接并开始初始化方法侦听器：\r\n\r\n    ```\r\n    client.open(function(err) {\r\n        if (err) {\r\n            console.error('could not open IotHub client');\r\n        }  else {\r\n            console.log('client opened');\r\n            client.onDeviceMethod('writeLine', onWriteLine);\r\n        }\r\n    });\r\n    ```\r\n8. 保存并关闭 **SimulatedDevice.js** 文件。\r\n\r\n> [!NOTE]\r\n> 为简单起见，本教程不实现任何重试策略。 在生产代码中，应按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如连接重试）。\r\n> \r\n> \r\n\r\n## <a name=\"call-a-method-on-a-device\"></a>调用设备上的方法\r\n在此部分中，会创建一个 Node.js 控制台应用，该应用在模拟设备应用上调用方法并随后显示响应。\r\n\r\n1. 新建名为 **callmethodondevice** 的空文件夹。 在 **callmethodondevice** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。 接受所有默认值：\r\n   \r\n    ```\r\n    npm init\r\n    ```\r\n2. 在 **callmethodondevice** 文件夹的命令提示符处，运行以下命令以安装 **azure-iothub** 包：\r\n   \r\n    ```\r\n    npm install azure-iothub --save\r\n    ```\r\n3. 使用文本编辑器，在 **callmethodondevice** 文件夹中创建 **CallMethodOnDevice.js** 文件。\r\n4. 在 **CallMethodOnDevice.js** 文件的开头添加以下 `require` 语句：\r\n\r\n    ```\r\n    'use strict';\r\n\r\n    var Client = require('azure-iothub').Client;\r\n    ```\r\n5. 添加以下变量声明，并将占位符值替换为中心的 IoT 中心连接字符串：\r\n\r\n    ```\r\n    var connectionString = '{iothub connection string}';\r\n    var methodName = 'writeLine';\r\n    var deviceId = 'myDeviceId';\r\n    ```\r\n6. 创建客户端，以便打开到 IoT 中心的连接。\r\n\r\n    ```\r\n    var client = Client.fromConnectionString(connectionString);\r\n    ```\r\n7. 添加以下函数，以便调用设备方法并将设备响应输出到控制台：\r\n\r\n    ```\r\n    var methodParams = {\r\n        methodName: methodName,\r\n        payload: 'hello world',\r\n        timeoutInSeconds: 30\r\n    };\r\n\r\n    client.invokeDeviceMethod(deviceId, methodParams, function (err, result) {\r\n        if (err) {\r\n            console.error('Failed to invoke method \\'' + methodName + '\\': ' + err.message);\r\n        } else {\r\n            console.log(methodName + ' on ' + deviceId + ':');\r\n            console.log(JSON.stringify(result, null, 2));\r\n        }\r\n    });\r\n    ```\r\n8. 保存并关闭 **CallMethodOnDevice.js** 文件。\r\n\r\n## <a name=\"run-the-apps\"></a>运行应用\r\n现在，已准备就绪，可以运行应用。\r\n\r\n1. 在 **simulateddevice** 文件夹的命令提示符处运行以下命令，开始侦听从 IoT 中心发出的方法调用：\r\n\r\n    ```\r\n    node SimulatedDevice.js\r\n    ```\r\n\r\n    ![][7]\r\n2. 在 **callmethodondevice** 文件夹的命令提示符处运行以下命令，开始监视 IoT 中心：\r\n\r\n    ```\r\n    node CallMethodOnDevice.js \r\n    ```\r\n\r\n    ![][8]\r\n3. 此时会看到设备通过输出消息对方法进行响应，而调用该方法的应用程序则会显示来自设备的响应：\r\n\r\n    ![][9]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n本教程中，在 Azure 门户中配置了新的 IoT 中心，并在 IoT 中心的标识注册表中创建了设备标识。 已通过此设备标识启用模拟设备应用的相关功能，使之能够响应通过云调用的方法。 还创建了一个应用，用于调用设备上的方法并显示来自设备的响应。 \r\n\r\n若要继续了解 IoT 中心入门知识并浏览其他 IoT 方案，请参阅：\r\n\r\n* [IoT 中心入门]\r\n* [Schedule jobs on multiple devices（在多台设备上计划作业）][lnk-devguide-jobs]\r\n\r\n若要了解如何扩展 IoT 解决方案并在多个设备上计划方法调用，请参阅 [Schedule and broadcast jobs][lnk-tutorial-jobs] （计划和广播作业）教程。\r\n\r\n<!-- Images. -->\r\n[7]: ./media/iot-hub-node-node-direct-methods/run-simulated-device.png\r\n[8]: ./media/iot-hub-node-node-direct-methods/run-callmethodondevice.png\r\n[9]: ./media/iot-hub-node-node-direct-methods/methods-output.png\r\n\r\n<!-- Links -->\r\n[lnk-transient-faults]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r\n\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/tree/master/doc/node-devbox-setup.md\r\n\r\n[lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-portal]: https://portal.azure.cn/\r\n\r\n[lnk-devguide-jobs]: ./iot-hub-devguide-jobs.md\r\n[lnk-tutorial-jobs]: ./iot-hub-node-node-schedule-jobs.md\r\n[lnk-devguide-methods]: ./iot-hub-devguide-direct-methods.md\r\n[lnk-devguide-mqtt]: ./iot-hub-mqtt-support.md\r\n\r\n[Send Cloud-to-Device messages with IoT Hub]: ./iot-hub-csharp-csharp-c2d.md\r\n[Process Device-to-Cloud messages]: ./iot-hub-csharp-csharp-process-d2c.md\r\n[IoT 中心入门]: ./iot-hub-node-node-getstarted.md\r\n\r\n\r\n<!--Update_Description:update meta data only-->"}