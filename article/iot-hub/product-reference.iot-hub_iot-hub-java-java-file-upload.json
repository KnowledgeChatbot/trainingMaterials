{"Title":"使用 Java 将文件从设备上传到 Azure IoT 中心","Description":"如何使用用于 Java 的 Azure IoT 设备 SDK 从设备将文件上传到云中。 上传的文件存储在 Azure 存储 Blob 容器中。","Content":"# <a name=\"upload-files-from-your-device-to-the-cloud-with-iot-hub\"></a>使用 IoT 中心将文件从设备上传到云\r\n\r\n[!INCLUDE [iot-hub-file-upload-language-selector](../../includes/iot-hub-file-upload-language-selector.md)]\r\n\r\n本教程的内容基于[使用 IoT 中心发送云到设备的消息](./iot-hub-java-java-c2d.md)教程中所述的代码，介绍如何使用 [IoT 中心的文件上传功能](iot-hub-devguide-file-upload.md)将文件上传到 [Azure Blob 存储](/storage/)。 本教程介绍如何：\r\n\r\n- 安全地为设备提供用于上传文件的 Azure Blob URI。\r\n- 使用 IoT 中心文件上传通知在应用后端中触发对文件的处理。\r\n\r\n[IoT 中心入门](./iot-hub-java-java-getstarted.md)和[使用 IoT 中心发送云到设备的消息](./iot-hub-java-java-c2d.md)教程介绍了 IoT 中心提供的基本的设备到云和云到设备的消息传送功能。 [处理设备到云的消息](./iot-hub-java-java-process-d2c.md)教程介绍了一种在 Azure Blob 存储中可靠存储设备到云消息的方法。 但是，在某些情况下，无法轻松地将设备发送的数据映射为 IoT 中心接受的相对较小的设备到云消息。 例如：\r\n\r\n* 包含图像的大型文件\r\n* 视频\r\n* 以高频率采样的振动数据\r\n* 某种形式的预处理数据。\r\n\r\n通常使用 [Hadoop](/hdinsight/) 堆栈等工具在云中批处理这些文件。 需要从设备上传文件时，仍可以使用 IoT 中心的安全性和可靠性。\r\n\r\n在本教程的最后，会运行两个 Java 控制台应用：\r\n\r\n* **simulated-device**，这是 [使用 IoT 中心发送云到设备的消息] 教程中创建的应用的修改版本。 该应用使用 IoT 中心提供的 SAS URI 将文件上传到存储。\r\n* **read-file-upload-notification**，它可以接收来自 IoT 中心的文件上传通知。\r\n\r\n> [!NOTE]\r\n> IoT 中心通过 Azure IoT 设备 SDK 来支持许多设备平台和语言（包括 C、.NET 和 Javascript）。 有关如何将设备连接到 Azure IoT 中心的分步说明，请参阅 [Azure IoT 开发人员中心]。\r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* 最新的 [Java SE 开发工具包 8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\r\n* [Maven 3](https://maven.apache.org/install.html)\r\n* 有效的 Azure 帐户。 （如果没有帐户，只需几分钟即可创建一个[试用帐户](http://www.azure.cn/pricing/1rmb-trial/)。）\r\n\r\n[!INCLUDE [iot-hub-associate-storage](../../includes/iot-hub-associate-storage.md)]\r\n\r\n## <a name=\"upload-a-file-from-a-device-app\"></a>从设备应用上传文件\r\n\r\n本部分中的操作将会修改在[使用 IoT 中心发送云到设备的消息](./iot-hub-java-java-c2d.md)中创建的设备应用，以便将文件上传到 IoT 中心。\r\n\r\n1. 将一个图像文件复制到 `simulated-device` 文件夹并将其重命名为 `myimage.png`。\r\n\r\n1. 使用文本编辑器打开 `simulated-device\\src\\main\\java\\com\\mycompany\\app\\App.java` 文件。\r\n\r\n1. 将变量声明添加到 **App** 类：\r\n\r\n    ```java\r\n    private static String fileName = \"myimage.png\";\r\n    ```\r\n\r\n1. 若要处理文件上传状态回调消息，请将以下嵌套类添加到 **App** 类：\r\n\r\n    ```java\r\n    // Define a callback method to print status codes from IoT Hub.\r\n    protected static class FileUploadStatusCallBack implements IotHubEventCallback {\r\n      public void execute(IotHubStatusCode status, Object context) {\r\n        System.out.println(\"IoT Hub responded to file upload for \" + fileName\r\n            + \" operation with status \" + status.name());\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 若要将图像上传到 IoT 中心，请将以下方法添加 **App** 类，以便将图像上传到 IoT 中心：\r\n\r\n    ```java\r\n    // Use IoT Hub to upload a file asynchronously to Azure blob storage.\r\n    private static void uploadFile(String fullFileName) throws FileNotFoundException, IOException\r\n    {\r\n      File file = new File(fullFileName);\r\n      InputStream inputStream = new FileInputStream(file);\r\n      long streamLength = file.length();\r\n\r\n      client.uploadToBlobAsync(fileName, inputStream, streamLength, new FileUploadStatusCallBack(), null);\r\n    }\r\n    ```\r\n\r\n1. 修改 **main** 方法以调用 **uploadFile** 方法，如以下代码片段中所示：\r\n\r\n    ```java\r\n    client.open();\r\n\r\n    try\r\n    {\r\n      // Get the filename and start the upload.\r\n      String fullFileName = System.getProperty(\"user.dir\") + File.separator + fileName;\r\n      uploadFile(fullFileName);\r\n      System.out.println(\"File upload started with success\");\r\n    }\r\n    catch (Exception e)\r\n    {\r\n      System.out.println(\"Exception uploading file: \" + e.getCause() + \" \\nERROR: \" + e.getMessage());\r\n    }\r\n\r\n    MessageSender sender = new MessageSender();\r\n    ```\r\n\r\n1. 使用以下命令生成 **simulated-device** 应用并检查错误：\r\n\r\n    ```cmd/sh\r\n    mvn clean package -DskipTests\r\n    ```\r\n\r\n## <a name=\"receive-a-file-upload-notification\"></a>接收文件上传通知\r\n\r\n本部分中的操作将创建一个 Java 控制台应用，用于接收来自 IoT 中心的文件上传通知消息。\r\n\r\n需要使用 IoT 中心的 **iothubowner** 的连接字符串才能完成本部分。 可以在 [Azure 门户](https://portal.azure.cn/)上的“共享访问策略”边栏选项卡中找到该连接字符串。\r\n\r\n1. 在命令提示符下使用以下命令，创建名为 **read-file-upload-notification** 的 Maven 项目。 请注意，此命令是一条很长的命令：\r\n\r\n    ```cmd/sh\r\n    mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=read-file-upload-notification -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\r\n    ```\r\n\r\n1. 在命令提示符下，导航到新的 `read-file-upload-notification` 文件夹。\r\n\r\n1. 使用文本编辑器打开 `read-file-upload-notification` 文件夹中的 `pom.xml` 文件，在 **dependencies** 节点中添加以下依赖项。 这样即可使用应用程序中的 **iothub-java-service-client** 包来与 IoT 中心服务通信：\r\n\r\n    ```xml\r\n    <dependency>\r\n      <groupId>com.microsoft.azure.sdk.iot</groupId>\r\n      <artifactId>iot-service-client</artifactId>\r\n      <version>1.7.23</version>\r\n    </dependency>\r\n    ```\r\n\r\n    > [!NOTE]\r\n    > 可以使用 [Maven 搜索](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22iot-service-client%22%20g%3A%22com.microsoft.azure.sdk.iot%22)检查是否有最新版本的 **iot-service-client**。\r\n\r\n1. 保存并关闭 `pom.xml` 文件。\r\n\r\n1. 使用文本编辑器打开 `read-file-upload-notification\\src\\main\\java\\com\\mycompany\\app\\App.java` 文件。\r\n\r\n1. 在该文件中添加以下 **import** 语句：\r\n\r\n    ```java\r\n    import com.microsoft.azure.sdk.iot.service.*;\r\n    import java.io.IOException;\r\n    import java.net.URISyntaxException;\r\n    import java.util.concurrent.ExecutorService;\r\n    import java.util.concurrent.Executors;\r\n    ```\r\n\r\n1. 将以下类级变量添加到 **App** 类：\r\n\r\n    ```java\r\n    private static final String connectionString = \"{Your IoT Hub connection string}\";\r\n    private static final IotHubServiceClientProtocol protocol = IotHubServiceClientProtocol.AMQPS;\r\n    private static FileUploadNotificationReceiver fileUploadNotificationReceiver = null;\r\n    ```\r\n\r\n1. 若要在控制台中列显有关文件上传的信息，请将以下嵌套类添加到 **App** 类：\r\n\r\n    ```java\r\n    // Create a thread to receive file upload notifications.\r\n    private static class ShowFileUploadNotifications implements Runnable {\r\n      public void run() {\r\n        try {\r\n          while (true) {\r\n            System.out.println(\"Recieve file upload notifications...\");\r\n            FileUploadNotification fileUploadNotification = fileUploadNotificationReceiver.receive();\r\n            if (fileUploadNotification != null) {\r\n              System.out.println(\"File Upload notification received\");\r\n              System.out.println(\"Device Id : \" + fileUploadNotification.getDeviceId());\r\n              System.out.println(\"Blob Uri: \" + fileUploadNotification.getBlobUri());\r\n              System.out.println(\"Blob Name: \" + fileUploadNotification.getBlobName());\r\n              System.out.println(\"Last Updated : \" + fileUploadNotification.getLastUpdatedTimeDate());\r\n              System.out.println(\"Blob Size (Bytes): \" + fileUploadNotification.getBlobSizeInBytes());\r\n              System.out.println(\"Enqueued Time: \" + fileUploadNotification.getEnqueuedTimeUtcDate());\r\n            }\r\n          }\r\n        } catch (Exception ex) {\r\n          System.out.println(\"Exception reading reported properties: \" + ex.getMessage());\r\n        }\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 若要启动侦听文件上传通知的线程，请将以下代码添加到 **main** 方法：\r\n\r\n    ```java\r\n    public static void main(String[] args) throws IOException, URISyntaxException, Exception {\r\n      ServiceClient serviceClient = ServiceClient.createFromConnectionString(connectionString, protocol);\r\n\r\n      if (serviceClient != null) {\r\n        serviceClient.open();\r\n\r\n        // Get a file upload notification receiver from the ServiceClient.\r\n        fileUploadNotificationReceiver = serviceClient.getFileUploadNotificationReceiver();\r\n        fileUploadNotificationReceiver.open();\r\n\r\n        // Start the thread to receive file upload notifications.\r\n        ShowFileUploadNotifications showFileUploadNotifications = new ShowFileUploadNotifications();\r\n        ExecutorService executor = Executors.newFixedThreadPool(1);\r\n        executor.execute(showFileUploadNotifications);\r\n\r\n        System.out.println(\"Press ENTER to exit.\");\r\n        System.in.read();\r\n        executor.shutdownNow();\r\n        System.out.println(\"Shutting down sample...\");\r\n        fileUploadNotificationReceiver.close();\r\n        serviceClient.close();\r\n      }\r\n    }\r\n    ```\r\n\r\n1. 保存并关闭 `read-file-upload-notification\\src\\main\\java\\com\\mycompany\\app\\App.java` 文件。\r\n\r\n1. 使用以下命令生成 **read-file-upload-notification** 应用并检查错误：\r\n\r\n    ```cmd/sh\r\n    mvn clean package -DskipTests\r\n    ```\r\n\r\n## <a name=\"run-the-applications\"></a>运行应用程序\r\n\r\n现在，已准备就绪，可以运行应用程序了。\r\n\r\n在 `read-file-upload-notification` 文件夹中的命令提示符下运行以下命令：\r\n\r\n```cmd/sh\r\nmvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"\r\n```\r\n\r\n在 `simulated-device` 文件夹中的命令提示符下运行以下命令：\r\n\r\n```cmd/sh\r\nmvn exec:java -Dexec.mainClass=\"com.mycompany.app.App\"\r\n```\r\n\r\n以下屏幕截图显示 **simulated-device** 应用的输出：\r\n\r\n![simulated-device 应用的输出](./media/iot-hub-java-java-upload/simulated-device.png)\r\n\r\n以下屏幕截图显示 **read-file-upload-notification** 应用的输出：\r\n\r\n![read-file-upload-notification 应用的输出](./media/iot-hub-java-java-upload/read-file-upload-notification.png)\r\n\r\n可以使用门户查看所配置的存储容器中上传的文件：\r\n\r\n![上传的文件](./media/iot-hub-java-java-upload/uploaded-file.png)\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n\r\n在本教程中，已学习了如何使用 IoT 中心的文件上传功能来简化从设备进行的文件上传。 可以使用以下文章继续探索 IoT 中心功能和方案：\r\n\r\n* [以编程方式创建 IoT 中心][lnk-create-hub]\r\n* [C SDK 简介][lnk-c-sdk]\r\n* [Azure IoT SDK][lnk-sdks]\r\n\r\n若要进一步探索 IoT 中心的功能，请参阅：\r\n\r\n* [使用 IoT Edge 模拟设备][lnk-iotedge]\r\n\r\n<!-- Images. -->\r\n\r\n[50]: ./media/iot-hub-csharp-csharp-file-upload/run-apps1.png\r\n[1]: ./media/iot-hub-csharp-csharp-file-upload/image-properties.png\r\n[2]: ./media/iot-hub-csharp-csharp-file-upload/file-upload-project-csharp1.png\r\n[3]: ./media/iot-hub-csharp-csharp-file-upload/enable-file-notifications.png\r\n\r\n<!-- Links -->\r\n\r\n\r\n\r\n[Azure IoT 开发人员中心]: http://www.azure.cn/develop/iot\r\n\r\n[Transient Fault Handling]: https://msdn.microsoft.com/library/hh680901(v=pandp.50).aspx\r\n[Azure Storage]: ../storage/common/storage-create-storage-account.md#create-a-storage-account\r\n[lnk-configure-upload]: ./iot-hub-configure-file-upload.md\r\n[Azure IoT service SDK NuGet package]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\r\n[lnk-free-trial]: http://www.azure.cn/pricing/1rmb-trial/\r\n\r\n[lnk-create-hub]: ./iot-hub-rm-template-powershell.md\r\n[lnk-c-sdk]: ./iot-hub-device-sdk-c-intro.md\r\n[lnk-sdks]: ./iot-hub-devguide-sdks.md\r\n\r\n[lnk-iotedge]: ./iot-hub-windows-iot-edge-simulated-device.md\r\n\r\n<!--Update_Description:update wording-->\r\n"}