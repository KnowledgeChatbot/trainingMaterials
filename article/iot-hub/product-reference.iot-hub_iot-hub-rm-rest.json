{"Title":"使用资源提供程序 REST API 创建 Azure IoT 中心","Description":"如何使用资源提供程序 REST API 创建 IoT 中心。","Content":"# <a name=\"create-an-iot-hub-using-the-resource-provider-rest-api-net\"></a>使用资源提供程序 REST API 创建 IoT 中心 (.NET)\r\n[!INCLUDE [iot-hub-resource-manager-selector](../../includes/iot-hub-resource-manager-selector.md)]\r\n\r\n可以通过编程方式使用 [IoT 中心资源提供程序 REST API][lnk-rest-api] 创建和管理 Azure IoT 中心。 本教程介绍如何使用 IoT 中心资源提供程序 REST API 通过 C# 程序创建 IoT 中心。\r\n\r\n> [!NOTE]\r\n> Azure 提供了用于创建和使用资源的两个不同部署模型：[Azure Resource Manager 模型和经典模型](../azure-resource-manager/resource-manager-deployment-model.md)。  本文介绍了如何使用 Azure Resource Manager 部署模型。\r\n> \r\n> \r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* Visual Studio 2015 或 Visual Studio 2017。\r\n- 有效的 Azure 帐户。 <br/>如果没有帐户，只需花费几分钟就能创建一个 [帐户][lnk-free-trial] 。\r\n- [Azure PowerShell 1.0][lnk-powershell-install] 或更高版本。\r\n\r\n[!INCLUDE [iot-hub-prepare-resource-manager](../../includes/iot-hub-prepare-resource-manager.md)]\r\n\r\n## <a name=\"prepare-your-visual-studio-project\"></a>准备 Visual Studio 项目\r\n1. 在 Visual Studio 中，使用“控制台应用(.NET Framework)”项目模板创建 Visual C# Windows 经典桌面项目。 将该项目命名为 **CreateIoTHubREST**。\r\n2. 在解决方案资源管理器中右键单击用户的项目，并单击“**管理 NuGet 包**”。\r\n3. 在 NuGet 包管理器中，选中“包括预发行版”，并在“浏览”页上搜索 **Microsoft.Azure.Management.ResourceManager**。 选择该包，单击“安装”，在“审阅更改”中单击“确定”，并单击“我接受”以接受许可证。\r\n4. 在 NuGet 包管理器中，搜索 **Microsoft.IdentityModel.Clients.ActiveDirectory**。  单击“**安装**”，在“**审阅更改**”中单击“**确定**”，并单击“**我接受**”以接受许可证。\r\n5. 在 Program.cs 中，将现有 **using** 语句替换为以下代码：\r\n\r\n    ```csharp\r\n    using System;\r\n    using System.Net.Http;\r\n    using System.Net.Http.Headers;\r\n    using System.Text;\r\n    using Microsoft.Azure.Management.ResourceManager;\r\n    using Microsoft.Azure.Management.ResourceManager.Models;\r\n    using Microsoft.IdentityModel.Clients.ActiveDirectory;\r\n    using Newtonsoft.Json;\r\n    using Microsoft.Rest;\r\n    using System.Linq;\r\n    using System.Threading;\r\n    ```\r\n\r\n6. 在 Program.cs 中，将占位符值替换为以下静态变量。 在本教程前面的介绍中，已记下 **ApplicationId**、**SubscriptionId**、**TenantId** 和 **Password**。 资源组名称是创建 IoT 中心时要使用的资源组名称。 可以使用现有的资源组或新资源组。 “IoT 中心名称”是你创建的 IoT 中心的名称，例如“MyIoTHub”。 IoT 中心的名称必须是全局唯一的。 **部署名称**是部署的名称，例如 **Deployment_01**。\r\n\r\n    ```csharp\r\n    static string applicationId = \"{Your ApplicationId}\";\r\n    static string subscriptionId = \"{Your SubscriptionId}\";\r\n    static string tenantId = \"{Your TenantId}\";\r\n    static string password = \"{Your application Password}\";\r\n\r\n    static string rgName = \"{Resource group name}\";\r\n    static string iotHubName = \"{IoT Hub name including your initials}\";\r\n    ```\r\n[!INCLUDE [iot-hub-pii-note-naming-hub](../../includes/iot-hub-pii-note-naming-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-access-token](../../includes/iot-hub-get-access-token.md)]\r\n\r\n## <a name=\"use-the-resource-provider-rest-api-to-create-an-iot-hub\"></a>使用资源提供程序 REST API 创建 IoT 中心\r\n在资源组中使用 [IoT 中心资源提供程序 REST API][lnk-rest-api] 创建 IoT 中心。 还可使用资源提供程序 REST API 更改现有的 IoT 中心。\r\n\r\n1. 将以下方法添加到 Program.cs：\r\n\r\n    ```csharp\r\n    static void CreateIoTHub(string token)\r\n    {\r\n\r\n    }\r\n    ```\r\n2. 将以下代码添加到 **CreateIoTHub** 方法中。 该代码创建一个 **HttpClient** 对象，在标头中使用身份验证令牌：\r\n\r\n    ```csharp\r\n    HttpClient client = new HttpClient();\r\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\r\n    ```\r\n3. 将以下代码添加到 **CreateIoTHub** 方法中。 此代码描述要创建的 IoT 中心，并生成 JSON 表示形式。 有关支持 IoT 中心的位置的最新列表，请参阅 [Azure 状态][lnk-status]：\r\n\r\n    ```csharp\r\n    var description = new\r\n    {\r\n      name = iotHubName,\r\n      location = \"China East\",\r\n      sku = new\r\n      {\r\n        name = \"S1\",\r\n        tier = \"Standard\",\r\n        capacity = 1\r\n      }\r\n    };\r\n\r\n    var json = JsonConvert.SerializeObject(description, Formatting.Indented);\r\n    ```\r\n\r\n4. 将以下代码添加到 **CreateIoTHub** 方法中。 使用此代码将 REST 请求提交到 Azure。 然后该代码会检查响应，并检索可用于监视部署任务状态的 URL：\r\n\r\n    ```csharp\r\n    var content = new StringContent(JsonConvert.SerializeObject(description), Encoding.UTF8, \"application/json\");\r\n    var requestUri = string.Format(\"https://management.chinacloudapi.cn/subscriptions/{0}/resourcegroups/{1}/providers/Microsoft.devices/IotHubs/{2}?api-version=2016-02-03\", subscriptionId, rgName, iotHubName);\r\n    var result = client.PutAsync(requestUri, content).Result;\r\n\r\n    if (!result.IsSuccessStatusCode)\r\n    {\r\n      Console.WriteLine(\"Failed {0}\", result.Content.ReadAsStringAsync().Result);\r\n      return;\r\n    }\r\n\r\n    var asyncStatusUri = result.Headers.GetValues(\"Azure-AsyncOperation\").First();\r\n    ```\r\n5. 将以下代码添加到 **CreateIoTHub** 方法的末尾。 该代码使用在上一步检索的 **asyncStatusUri** 地址等待部署完成：\r\n\r\n    ```csharp\r\n    string body;\r\n    do\r\n    {\r\n      Thread.Sleep(10000);\r\n      HttpResponseMessage deploymentstatus = client.GetAsync(asyncStatusUri).Result;\r\n      body = deploymentstatus.Content.ReadAsStringAsync().Result;\r\n    } while (body == \"{\\\"status\\\":\\\"Running\\\"}\");\r\n    ```\r\n6. 将以下代码添加到 **CreateIoTHub** 方法的末尾。 此代码检索创建的 IoT 中心的键，并将其打印到控制台：\r\n\r\n    ```csharp\r\n    var listKeysUri = string.Format(\"https://management.chinacloudapi.cn/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Devices/IotHubs/{2}/IoTHubKeys/listkeys?api-version=2016-02-03\", subscriptionId, rgName, iotHubName);\r\n    var keysresults = client.PostAsync(listKeysUri, null).Result;\r\n\r\n    Console.WriteLine(\"Keys: {0}\", keysresults.Content.ReadAsStringAsync().Result);\r\n    ```\r\n\r\n## <a name=\"complete-and-run-the-application\"></a>完成并运行应用程序\r\n现在，可以调用 **CreateIoTHub** 方法来完成应用程序，并生成并运行该应用程序。\r\n\r\n1. 将以下代码添加到 **Main** 方法末尾：\r\n\r\n    ```csharp\r\n    CreateIoTHub(token.AccessToken);\r\n    Console.ReadLine();\r\n    ```\r\n2. 单击“**生成**”，并单击“**生成解决方案**”。 更正所有错误。\r\n3. 单击“**调试**”，并单击“**开始调试**”以运行应用程序。 运行部署可能需要几分钟时间。\r\n\r\n4. 若要验证应用程序是否添加了新的 IoT 中心，请访问 [Azure 门户][lnk-azure-portal]并查看资源列表。 或者，使用 Get-azurermresource PowerShell cmdlet。\r\n\r\n> [!NOTE]\r\n> 本示例应用程序会添加用于对你计费的 S1 标准 IoT 中心。 完成操作后，可以通过 [Azure 门户][lnk-azure-portal]删除该 IoT 中心，或者在完成后使用 **Remove-AzureRmResource** PowerShell cmdlet 删除。\r\n> \r\n> \r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n现已使用资源提供程序 REST API 部署了 IoT 中心，接下来可更进一步探索：\r\n\r\n* 阅读了解 [IoT 中心资源提供程序 REST API][lnk-rest-api] 的相关功能。\r\n* 有关 Azure Resource Manager 功能的详细信息，请参阅 [Azure Resource Manager 概述][lnk-azure-rm-overview] 。\r\n\r\n若要详细了解如何开发 IoT 中心，请参阅以下文章：\r\n\r\n- [C SDK 简介][lnk-c-sdk]\r\n- [Azure IoT SDK][lnk-sdks]\r\n\r\n若要进一步探索 IoT 中心的功能，请参阅：\r\n\r\n* [使用 Azure IoT Edge 将 AI 部署到边缘设备][lnk-iotedge]\r\n\r\n<!-- Links -->\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-azure-portal]: https://portal.azure.cn/\r\n[lnk-status]: https://www.azure.cn/support/service-dashboard/\r\n[lnk-powershell-install]: ../powershell-install-configure.md\r\n[lnk-rest-api]: https://docs.microsoft.com/rest/api/iothub/iothubresource\r\n[lnk-azure-rm-overview]: ../azure-resource-manager/resource-group-overview.md\r\n\r\n[lnk-c-sdk]: ./iot-hub-device-sdk-c-intro.md\r\n[lnk-sdks]: ./iot-hub-devguide-sdks.md\r\n\r\n[lnk-iotedge]: ./iot-hub-linux-iot-edge-simulated-device.md\r\n\r\n<!--Update_Description:update wording-->"}