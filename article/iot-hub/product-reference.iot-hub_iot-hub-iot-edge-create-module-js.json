{"Title":"使用 Node.js 创建 Azure IoT Edge 模块","Description":"本教程演示如何使用最新的 Azure IoT Edge NPM 包和 Yeoman 生成器编写 BLE 数据转换器模块。","Content":"# <a name=\"create-an-azure-iot-edge-module-with-nodejs\"></a>使用 Node.js 创建 Azure IoT Edge 模块\r\n\r\n本教程演示如何为 JS 中的 Azure IoT Edge 创建模块。\r\n\r\n本教程将演练环境设置，以及如何使用最新的 Azure IoT Edge NPM 包编写 [BLE](https://en.wikipedia.org/wiki/Bluetooth_Low_Energy) 数据转换器模块。\r\n\r\n## <a name=\"prerequisites\"></a>先决条件\r\n\r\n本部分设置 IoT Edge 模块开发环境。 内容适用于 64 位 Windows 和 64 位 Linux (Ubuntu 14+) 操作系统。\r\n\r\n需要以下软件：\r\n* [Git 客户端](https://git-scm.com/downloads)。\r\n* [Node LTS](https://nodejs.org)。\r\n* `npm install -g yo`。\r\n* `npm install -g generator-az-iot-gw-module`\r\n\r\n## <a name=\"architecture\"></a>体系结构\r\n\r\nAzure IoT Edge 平台在很大程度上采用 [Von Neumann 体系结构](https://en.wikipedia.org/wiki/Von_Neumann_architecture)。 这意味着，整个 Azure IoT Edge 体系结构就是一个处理输入并生成输出的系统；每个模块也是一个微小的输入-输出子系统。 本教程介绍以下两个模块：\r\n\r\n1. 一个接收 [BLE](https://en.wikipedia.org/wiki/Bluetooth_Low_Energy) 模拟信号并将其转换为 [JSON](https://en.wikipedia.org/wiki/JSON) 格式消息的模块。\r\n2. 一个列显收到的 [JSON](https://en.wikipedia.org/wiki/JSON) 消息的模块。\r\n\r\n下图显示了此项目的典型端到端数据流：\r\n\r\n![三个模块之间的数据流](./media/iot-hub-iot-edge-create-module/dataflow.png \"输入：模拟的 BLE 模块；处理器：转换器模块；输出：列显程序模块\")\r\n\r\n## <a name=\"set-up-the-environment\"></a>设置环境\r\n下面介绍如何快速设置环境，以开始使用 JS 编写第一个 BLE 转换器模块。\r\n\r\n### <a name=\"create-module-project\"></a>创建模块项目\r\n1. 打开命令行窗口，然后运行 `yo az-iot-gw-module`。\r\n2. 遵照屏幕上的步骤完成模块项目初始化。\r\n\r\n### <a name=\"project-structure\"></a>项目结构\r\nJS 模块项目包括以下组件：\r\n\r\n`modules` - 自定义的 JS 模块源文件。 请将默认的 `sensor.js` 和 `printer.js` 替换为自己的模块文件。\r\n\r\n`app.js` - 用于启动 Edge 实例的入口文件。\r\n\r\n`gw.config.json` - 用于自定义 Edge 要加载的模块的配置文件。\r\n\r\n`package.json` - 模块项目的元数据信息。\r\n\r\n`README.md` - 模块项目的基本文档。\r\n\r\n\r\n### <a name=\"package-file\"></a>包文件\r\n\r\n此 `package.json` 声明模块项目所需的所有元数据信息，包括名称、版本、入口、脚本、运行时和开发依赖项。\r\n\r\n以下代码片段演示如何对 BLE 转换器示例项目进行配置。\r\n```json\r\n{\r\n  \"name\": \"converter\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"BLE data converter sample for Azure IoT Edge.\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/Azure-Samples/iot-edge-samples\"\r\n  },\r\n  \"main\": \"app.js\",\r\n  \"scripts\": {\r\n    \"start\": \"node app.js\"\r\n  },\r\n  \"author\": \"Microsoft Corporation\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n  },\r\n  \"devDependencies\": {\r\n    \"azure-iot-gateway\": \"~1.1.3\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n### <a name=\"entry-file\"></a>入口文件\r\n`app.js` 定义初始化 Edge 实例的方法。 此处我们不需要进行任何更改。\r\n\r\n```javascript\r\n(function() {\r\n  'use strict';\r\n\r\n  const Gateway = require('azure-iot-gateway');\r\n  let config_path = './gw.config.json';\r\n\r\n  // node app.js\r\n  if (process.argv.length < 2) {\r\n    throw 'Calling pattern should be node app.js.';\r\n  }\r\n\r\n  const gw = new Gateway(config_path);\r\n  gw.run();\r\n})();\r\n```\r\n\r\n### <a name=\"interface-of-module\"></a>模块的接口\r\n可将 Azure IoT Edge 模块视为数据处理器，其作用是：接收输入、处理输入并生成输出。\r\n\r\n输入可能是来自硬件（例如运动探测器）的数据、来自其他模块的消息，或其他任何信息（例如，计时器定期生成的随机数）。\r\n\r\n输出类似于输入，它可能会触发硬件行为（例如，使 LED 闪烁）、向其他模块发送消息，或其他任何动作（例如，在控制台上列显信息）。\r\n\r\n模块使用 `message` 对象互相通信。 `message` 的**内容**是一个字节数组，可以代表所需的任何类型的数据。 **属性**也会出现在 `message` 中，它们只是字符串到字符串的映射。 可将属性视为 HTTPS 请求中的标头，或文件的元数据。\r\n\r\n若要在 JS 中开发 Azure IoT Edge 模块，需要创建一个可以实现所需方法 `receive()` 的新模块对象。 此时，还可以选择实现可选的 `create()`、`start()` 或 `destroy()` 方法。 以下代码片段演示如何创建 JS 模块对象的基架。\r\n\r\n```javascript\r\n'use strict';\r\n\r\nmodule.exports = {\r\n  broker: null,\r\n  configuration: null,\r\n\r\n  create: function (broker, configuration) {\r\n    // Default implementation.\r\n    this.broker = broker;\r\n    this.configuration = configuration;\r\n\r\n    return true;\r\n  },\r\n\r\n  start: function () {\r\n    // Produce\r\n  },\r\n\r\n  receive: function (message) {\r\n    // Consume\r\n  },\r\n\r\n  destroy: function () {\r\n  }\r\n};\r\n```\r\n\r\n### <a name=\"converter-module\"></a>转换器模块\r\n| 输入                    | 处理器                              | 输出                 | 源文件            |\r\n| ------------------------ | -------------------------------------- | ---------------------- | ---------------------- |\r\n| 温度数据消息 | 分析和构造新的 JSON 消息 | 结构化 JSON 消息 | `converter.js` |\r\n\r\n此模块是一个典型的 Azure IoT Edge 模块。 它从其他模块（硬件模块，或本例中所示的 BLE 模拟模块）接受温度消息；然后将温度消息规范化为结构化的 JSON 消息（包括追加消息 ID、设置属性来指定是否需要触发温度警报，等等）。\r\n\r\n```javascript\r\nreceive: function (message) {\r\n  // Initialize the messageCount in global object at first time.\r\n  if (!global.messageCount) {\r\n    global.messageCount = 0;\r\n  }\r\n\r\n  // Read the content and properties objects from message.\r\n  let rawContent = JSON.parse(Buffer.from(message.content).toString('utf8'));\r\n  let rawProperties = message.properties;\r\n\r\n  // Generate new properties object.\r\n  let newProperties = {\r\n    source: rawProperties.source,\r\n    macAddress: rawProperties.macAddress,\r\n    temperatureAlert: rawContent.temperature > 30 ? 'true' : 'false'\r\n  };\r\n\r\n  // Generate new content object.\r\n  let newContent = {\r\n    deviceId: 'Intel NUC Gateway',\r\n    messageId: ++global.messageCount,\r\n    temperature: rawContent.temperature\r\n  };\r\n\r\n  // Publish the new message to broker.\r\n  this.broker.publish(\r\n    {\r\n      properties: newProperties,\r\n      content: new Uint8Array(Buffer.from(JSON.stringify(newContent), 'utf8'))\r\n    }\r\n  );\r\n},\r\n```\r\n\r\n### <a name=\"printer-module\"></a>列显程序模块\r\n| 输入                          | 处理器 | 输出                     | 源文件          |\r\n| ------------------------------ | --------- | -------------------------- | -------------------- |\r\n| 来自其他模块的任何消息 | 不适用       | 将消息记录到控制台 | `printer.js` |\r\n\r\n这是一个简单的自释性模块，可在终端窗口中输出收到的消息（属性、内容）。\r\n\r\n```javascript\r\nreceive: function (message) {\r\n  let properties = JSON.stringify(message.properties);\r\n  let content = Buffer.from(message.content).toString('utf8');\r\n\r\n  console.log(`printer.receive.properties - ${properties}`);\r\n  console.log(`printer.receive.content - ${content}\\n`);\r\n}\r\n```\r\n\r\n### <a name=\"configuration\"></a>配置\r\n运行模块之前的最后一步是配置 Azure IoT Edge 并在模块之间建立连接。\r\n\r\n首先，需要声明 `node` 加载程序（由于 Azure IoT Edge 支持不同语言的加载程序），后续部分中该加载程序的 `name` 可能会引用它。\r\n\r\n```json\r\n\"loaders\": [\r\n  {\r\n    \"type\": \"node\",\r\n    \"name\": \"node\"\r\n  }\r\n]\r\n```\r\n\r\n声明加载程序后，还需要声明模块。 与声明加载程序一样，其 `name` 属性也可能会引用它们。 声明模块时，需要指定每个模块应使用的加载程序（应是前面定义的加载程序）和入口点（应是模块的规范化类名）。 `simulated_device` 模块是包含在 Azure IoT Edge 核心运行时包中的本机模块。 请在 JSON 文件中包含 `args`，即使其值为 `null`。\r\n\r\n```json\r\n\"modules\": [\r\n  {\r\n    \"name\": \"simulated_device\",\r\n    \"loader\": {\r\n      \"name\": \"native\",\r\n      \"entrypoint\": {\r\n        \"module.path\": \"simulated_device\"\r\n      }\r\n    },\r\n    \"args\": {\r\n      \"macAddress\": \"01:02:03:03:02:01\",\r\n      \"messagePeriod\": 500\r\n    }\r\n  },\r\n  {\r\n    \"name\": \"converter\",\r\n    \"loader\": {\r\n      \"name\": \"node\",\r\n      \"entrypoint\": {\r\n        \"main.path\": \"modules/converter.js\"\r\n      }\r\n    },\r\n    \"args\": null\r\n  },\r\n  {\r\n    \"name\": \"printer\",\r\n    \"loader\": {\r\n      \"name\": \"node\",\r\n      \"entrypoint\": {\r\n        \"main.path\": \"modules/printer.js\"\r\n      }\r\n    },\r\n    \"args\": null\r\n  }\r\n]\r\n```\r\n\r\n配置结束时，让我们建立连接。 每个连接由 `source` 和 `sink` 表示。 它们都应该引用预定义的模块。 `source` 模块的输出消息将转发到 `sink` 模块的输入。\r\n\r\n```json\r\n\"links\": [\r\n  {\r\n    \"source\": \"simulated_device\",\r\n    \"sink\": \"converter\"\r\n  },\r\n  {\r\n    \"source\": \"converter\",\r\n    \"sink\": \"printer\"\r\n  }\r\n]\r\n```\r\n\r\n## <a name=\"running-the-modules\"></a>运行模块\r\n1. `npm install`\r\n2. `npm start`\r\n\r\n若要终止应用程序，请按 `<Enter>` 键。\r\n\r\n> [!IMPORTANT]\r\n> 不建议使用 Ctrl + C 来终止 IoT Edge 应用程序。 因为这可能会导致该进程异常终止。\r\n>\r\n>\r\n\r\n<!--Update_Description:update wording and meta data-->\r\n"}