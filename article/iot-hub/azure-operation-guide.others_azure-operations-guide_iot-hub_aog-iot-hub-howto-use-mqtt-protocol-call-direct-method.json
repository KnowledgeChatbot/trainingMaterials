{"Title":"Node JS 如何使用 MQTT 协议调用“直接方法”","Description":"Node JS 如何使用 MQTT 协议调用“直接方法”","Content":"\r\n# Node JS 如何使用 MQTT 协议调用“直接方法”\r\n\r\nAzure IOT SDK 中封装了使用 MQTT 协议调用“直接方法”的用法，如果想直接使用 MQTT 协议自己调用 Azure IOT 来实现“直接方法”的调用，虽然官方文档也有介绍，但依照官方文档的步骤，依然无法调用，这是因为文档中讲解到的一些参数并不详细，具体可以参考以下文档和代码 :\r\n\r\n使用 NodeJS 调用 MQTT 协议，需要依赖 [MQTT.JS](https://github.com/mqttjs/MQTT.js)。\r\n\r\n首先建立 NodeJS 项目目录，然后安装 MQTT 依赖包 :\r\n\r\n```\r\nnpm install mqtt --save\r\n```\r\n\r\n其次，在代码中配置连接 IOT 字符串，连接并接受云端通过调用“直接方法”发送来的消息 :\r\n\r\n```\r\nvar mqtt = require('mqtt')\r\nvar URL = require('url');\r\nvar QueryString = require('querystring');\r\n\r\nvar options = {\r\n    cmd: 'connect',\r\n    protocolId: 'MQTT',\r\n    protocolVersion: 4,\r\n    clean: false,\r\n    clientId: 'kevindevice',\r\n    rejectUnauthorized: true,\r\n    username: 'xuhuaIOT.azure-devices.cn/kevindevice/api-version=2016-11-14',\r\n    reconnectPeriod: 0, // Client will handle reconnection at the higher level\r\n    password : new Buffer('SharedAccessSignature sr=xuhuaIOT.azure-devices.cn%2Fdevices%2Fkevindevice&sig=wU3c8uu6AqTKoKF0OAtBE3K7ZcAkhelhFux6vNYEiho%3D&se=1485411010')\r\n};\r\nvar client = mqtt.connect('mqtts://xuhuaIOT.azure-devices.cn', options);\r\n\r\nclient.on('connect', () => {\r\n    client.subscribe('$iothub/methods/POST/#', { qos: 0 }, function (err) {\r\n        if (err) {\r\n            console.error(\"Direct method error: \" + err.message);\r\n        } else {\r\n            console.log(\"Successfully subscribe to direct method\");\r\n        }\r\n    });\r\n\r\n})\r\n\r\nclient.on('message', (topic, message) => {\r\n    console.log(topic);\r\n    var methodMessage = parseMessage(topic, message);\r\n    console.log('message' + methodMessage);\r\n\r\n    client.publish('$iothub/methods/res/200/?$rid=' + methodMessage.requestId, JSON.stringify({\"message\":\"reboot successfully\"}), { qos: 0, retain: false }, function(err) {});\r\n})\r\n\r\nvar handleRebootRequest = function(message) {\r\n    console.log('Response to method \\'' + message + '\\' sent successfully.');\r\n}\r\n\r\nvar parseMessage = function(topic, body) {\r\nvar url, path, query;\r\ntry {\r\n    url = URL.parse(topic);\r\n    path = url.path.split('/');\r\n    query = QueryString.parse(url.query);\r\n}\r\ncatch(err) {\r\n    console.error(err)\r\n    return undefined;\r\n}\r\n\r\n// if the topic has a querystring then 'path' will include it; so\r\n// we strip it out\r\nvar lastPathComponent = path[path.length - 1];\r\nif(lastPathComponent.indexOf('?') !== -1) {\r\n    path[path.length - 1] = lastPathComponent.substr(\r\n    0, lastPathComponent.indexOf('?')\r\n    );\r\n}\r\n\r\nif(path.length > 0 && path[0] === '$iothub') {\r\n    var message = {};\r\n    if(path.length > 1 && path[1].length > 0) {\r\n    // create an object for the module; for example, $iothub/twin/...\r\n    // would result in there being a message.twin object\r\n    var mod = message[path[1]] = {};\r\n\r\n    // parse the request ID if there is one\r\n    if(!!(query.$rid)) {\r\n        message.requestId = query.$rid;\r\n    }\r\n\r\n    // parse the other properties properties (excluding $rid)\r\n    message.properties = query;\r\n    delete message.properties.$rid;\r\n\r\n    // save the body\r\n    message.body = body;\r\n\r\n    // parse the verb\r\n    if(path.length > 2 && path[2].length > 0) {\r\n        mod.verb = path[2];\r\n\r\n        // This is a topic that looks like this:\r\n        //  $iothub/methods/POST/{method name}?$rid={request id}&{serialized properties}\r\n        // We parse the method name out.\r\n        if(path.length > 3 && path[3].length > 0) {\r\n        mod.methodName = path[3];\r\n        } else {\r\n        // The service published a message on a strange topic name. This is\r\n        // probably a service bug. At any rate we don't know what to do with\r\n        // this strange topic so we throw.\r\n        throw new Error('Device method call\\'s MQTT topic name does not include the method name.');\r\n        }\r\n    }\r\n    }\r\n    return message;\r\n}\r\nreturn undefined;\r\n}\r\n```\r\n\r\n本示例是设备接受 Azure IOTHub 云端调用“直接方法”发来的消息，并进行响应处理。\r\n\r\n>[!NOTE]\r\n> IOT 的用户名必需是 `{iothubhostname}/{device_id}/ api-version={api-version}`, 官方文档中没有提及要记入 api-version，但实际测试下来，这里是必须要有的。\r\n\r\n参考文档：\r\n\r\n[Azure IoT 中心使用直接方法](/iot-hub/iot-hub-node-node-direct-methods)<br>\r\n[Azure IoT 中心直接方法的介绍](/iot-hub/iot-hub-devguide-direct-methods)"}