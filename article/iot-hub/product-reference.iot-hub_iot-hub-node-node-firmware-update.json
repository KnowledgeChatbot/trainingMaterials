{"Title":"通过 Azure IoT 中心进行设备固件更新 (Node)","Description":"如何使用 Azure IoT 中心上的设备管理进行设备固件更新。 使用 Azure IoT SDK for Node.js 实现模拟设备应用以及触发固件更新的服务应用。","Content":"# <a name=\"use-device-management-to-initiate-a-device-firmware-update-nodenode\"></a>使用设备管理启动设备固件更新 (Node/Node)\r\n\r\n[!INCLUDE [iot-hub-selector-firmware-update](../../includes/iot-hub-selector-firmware-update.md)]\r\n\r\n在[设备管理入门][lnk-dm-getstarted]教程中，已了解如何使用[设备孪生][lnk-devtwin]和[直接方法][lnk-c2dmethod]基元来远程重新启动设备。 本教程使用相同的 IoT 中心基元，提供指南，并演示如何进行端到端模拟固件更新。  此模式在用于 Intel Edison 设备示例的固件更新实现中使用。\r\n\r\n本教程演示如何：\r\n\r\n* 创建一个 Node.js 控制台应用，该应用通过 IoT 中心在模拟设备应用上调用 firmwareUpdate 直接方法。\r\n* 创建模拟设备应用，以便实现 **firmwareUpdate** 直接方法。该方法会启动等待下载固件映像、下载固件映像以及最后应用固件映像的多阶段过程。在更新的每个阶段，设备都使用报告的属性来报告进度。\r\n\r\n本教程结束时，会创建两个 Node.js 控制台应用：\r\n\r\n**dmpatterns_fwupdate_service.js**，它调用模拟设备应用中的直接方法、显示响应并定期（每隔 500 毫秒）显示更新的报告属性。\r\n\r\ndmpatterns_fwupdate_device.js，它使用早前创建的设备标识连接到 IoT 中心、接收 firmwareUpdate 直接方法、运行一个多状态过程以模拟固件更新，包括：等待映像下载、下载新映像以及最后应用映像。\r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* Node.js 版本 4.0.x 或更高版本； <br/>  \r\n* [准备开发环境][lnk-dev-setup]介绍了如何在 Windows 或 Linux 上安装本教程所用的 Node.js。\r\n* 有效的 Azure 帐户。（如果没有帐户，只需花费几分钟就能创建一个[试用帐户][lnk-free-trial]。）\r\n\r\n按照[设备管理入门](iot-hub-node-node-device-management-get-started.md)一文创建 IoT 中心，并获取 IoT 中心连接字符串。\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity](../../includes/iot-hub-get-started-create-device-identity.md)]\r\n\r\n## <a name=\"trigger-a-remote-firmware-update-on-the-device-using-a-direct-method\"></a>使用直接方法在设备上触发远程固件更新\r\n在本部分，用户创建一个 Node.js 控制台应用，以便在设备上启动远程固件更新。 该应用使用直接方法来启动更新，并使用设备孪生查询定期获取活动固件更新的状态。\r\n\r\n1. 创建一个名为 **triggerfwupdateondevice** 的空文件夹。  在 **triggerfwupdateondevice** 文件夹的命令提示符处，使用以下命令创建 package.json 文件。  接受所有默认值：\r\n   \r\n    ```\r\n    npm init\r\n    ```\r\n2. 在 triggerfwupdateondevice 文件夹中，通过命令提示符运行以下命令，安装 azure-iot-hub 包：\r\n   \r\n    ```\r\n    npm install azure-iothub --save\r\n    ```\r\n3. 在 triggerfwupdateondevice 文件夹中，使用文本编辑器创建 dmpatterns_getstarted_service.js 文件。\r\n4. 在 **dmpatterns_getstarted_service.js** 文件开头添加以下“require”语句：\r\n\r\n    ```\r\n    'use strict';\r\n\r\n    var Registry = require('azure-iothub').Registry;\r\n    var Client = require('azure-iothub').Client;\r\n    ```\r\n5. 添加以下变量声明并替换占位符值：\r\n\r\n    ```\r\n    var connectionString = '{device_connectionstring}';\r\n    var registry = Registry.fromConnectionString(connectionString);\r\n    var client = Client.fromConnectionString(connectionString);\r\n    var deviceToUpdate = 'myDeviceId';\r\n    ```\r\n6. 添加以下函数以查找并显示 firmwareUpdate 报告属性的值。\r\n\r\n    ```\r\n    var queryTwinFWUpdateReported = function() {\r\n        registry.getTwin(deviceToUpdate, function(err, twin){\r\n            if (err) {\r\n              console.error('Could not query twins: ' + err.constructor.name + ': ' + err.message);\r\n            } else {\r\n              console.log((JSON.stringify(twin.properties.reported.iothubDM.firmwareUpdate)) + \"\\n\");\r\n            }\r\n        });\r\n    };\r\n    ```\r\n7. 添加以下函数以调用 firmwareUpdate 方法来重新启动目标设备：\r\n\r\n    ```\r\n    var startFirmwareUpdateDevice = function() {\r\n      var params = {\r\n          fwPackageUri: 'https://secureurl'\r\n      };\r\n\r\n      var methodName = \"firmwareUpdate\";\r\n      var payloadData =  JSON.stringify(params);\r\n\r\n      var methodParams = {\r\n        methodName: methodName,\r\n        payload: payloadData,\r\n        timeoutInSeconds: 30\r\n      };\r\n\r\n      client.invokeDeviceMethod(deviceToUpdate, methodParams, function(err, result) {\r\n        if (err) {\r\n          console.error('Could not start the firmware update on the device: ' + err.message)\r\n        } \r\n      });\r\n    };\r\n    ```\r\n8. 最后，向代码添加以下函数，以便启动固件更新序列并开始定期显示报告属性：\r\n\r\n    ```\r\n    startFirmwareUpdateDevice();\r\n    setInterval(queryTwinFWUpdateReported, 500);\r\n    ```\r\n9. 保存并关闭 dmpatterns_fwupdate_service.js 文件。\r\n\r\n[!INCLUDE [iot-hub-device-firmware-update](../../includes/iot-hub-device-firmware-update.md)]\r\n\r\n## <a name=\"run-the-apps\"></a>运行应用\r\n现在，已准备就绪，可以运行应用。\r\n\r\n1. 在 **manageddevice** 文件夹的命令提示符处，运行以下命令进行直接重启方法的侦听。\r\n\r\n    ```\r\n    node dmpatterns_fwupdate_device.js\r\n    ```\r\n\r\n2. 在 **triggerfwupdateondevice** 文件夹的命令提示符处运行以下命令，以便触发远程重启并查询设备孪生了解上次重新启动时间。\r\n\r\n    ```\r\n    node dmpatterns_fwupdate_service.js\r\n    ```\r\n\r\n3. 可以在控制台中看到设备对直接方法的响应。\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n在本教程中，直接触发了设备的远程固件更新，并使用了报告属性跟踪固件更新的进度。\r\n\r\n若要了解如何扩展 IoT 解决方案并在多个设备上计划方法调用，请参阅 [Schedule and broadcast jobs][lnk-tutorial-jobs]（计划和广播作业）教程。\r\n\r\n[lnk-devtwin]: ./iot-hub-devguide-device-twins.md\r\n[lnk-c2dmethod]: ./iot-hub-devguide-direct-methods.md\r\n[lnk-dm-getstarted]: ./iot-hub-node-node-device-management-get-started.md\r\n[lnk-tutorial-jobs]: ./iot-hub-node-node-schedule-jobs.md\r\n\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/tree/master/doc/node-devbox-setup.md\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-transient-faults]: https://msdn.microsoft.com/zh-cn/library/hh680901(v=pandp.50).aspx\r\n\r\n<!--Update_Description:update wording and code-->"}