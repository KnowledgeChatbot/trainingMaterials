{"Title":"使用 Azure IoT 中心的直接方法 (.NET/.NET)","Description":"如何使用 Azure IoT 中心直接方法。 使用适用于 .NET 的 Azure IoT 设备 SDK 实现包含直接方法的模拟设备应用，并使用适用于 .NET 的 Azure IoT 服务 SDK 实现调用直接方法的服务应用。","Content":"# <a name=\"use-direct-methods-netnet\"></a>使用直接方法 (.NET/.NET)\r\n[!INCLUDE [iot-hub-selector-c2d-methods](../../includes/iot-hub-selector-c2d-methods.md)]\r\n\r\n在本教程中，我们将开发两个 .NET 控制台应用：\r\n\r\n* **CallMethodOnDevice**：一个后端应用，可调用模拟设备应用中的方法并显示响应。\r\n* **SimulateDeviceMethods**：一个控制台应用，可模拟使用先前创建的设备标识连接到 IoT 中心的设备，并响应通过云调用的方法。\r\n\r\n> [!NOTE]\r\n> [Azure IoT SDK][lnk-hub-sdks] 一文提供了各种 Azure IoT SDK 的相关信息，用户可以使用这些 SDK 构建可在设备和解决方案后端上运行的应用程序。\r\n> \r\n> \r\n\r\n要完成本教程，需要：\r\n\r\n* Visual Studio 2015 或 Visual Studio 2017。\r\n* 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n[!INCLUDE [iot-hub-get-started-create-device-identity-portal](../../includes/iot-hub-get-started-create-device-identity-portal.md)]\r\n\r\n如果想改为以编程方式创建设备标识，请阅读文章[使用 .NET 将模拟设备连接到 IoT 中心][lnk-device-identity-csharp]中的相应部分。\r\n\r\n\r\n## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r\n在本部分中，会创建一个 .NET 控制台应用，用于响应解决方案后端调用的方法。\r\n\r\n1. 在 Visual Studio 中，使用“ **控制台应用程序** ”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 将项目命名为 **SimulateDeviceMethods**。\r\n   \r\n    ![新建 Visual C# Windows 经典设备应用][img-createdeviceapp]\r\n    \r\n1. 在解决方案资源管理器中，右键单击“SimulateDeviceMethods”项目，并单击“管理 NuGet 包...”。\r\n1. 在“NuGet 包管理器”窗口中，选择“浏览”，然后搜索“microsoft.azure.devices.client”。 选择“安装”，安装“microsoft.azure.devices.client”包，并接受使用条款。 该过程将下载、安装 [Azure IoT 设备 SDK][lnk-nuget-client-sdk] NuGet 包及其依赖项并添加对它的引用。\r\n   \r\n    ![“NuGet 包管理器”窗口客户端应用][img-clientnuget]\r\n1. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r\n   \r\n        using Microsoft.Azure.Devices.Client;\r\n        using Microsoft.Azure.Devices.Shared;\r\n\r\n1. 将以下字段添加到 **Program** 类。 将占位符值替换为上一部分中所述的设备连接字符串。\r\n   \r\n        static string DeviceConnectionString = \"HostName=<yourIotHubName>.azure-devices.cn;DeviceId=<yourIotDeviceName>;SharedAccessKey=<yourIotDeviceAccessKey>\";\r\n        static DeviceClient Client = null;\r\n\r\n1. 添加以下函数，实现设备上的直接方法：\r\n\r\n        static Task<MethodResponse> WriteLineToConsole(MethodRequest methodRequest, object userContext)\r\n        {\r\n            Console.WriteLine();\r\n            Console.WriteLine(\"\\t{0}\", methodRequest.DataAsJson);\r\n            Console.WriteLine(\"\\nReturning response for method {0}\", methodRequest.Name);\r\n\r\n            string result = \"'Input was written to log.'\";\r\n            return Task.FromResult(new MethodResponse(Encoding.UTF8.GetBytes(result), 200));\r\n        }\r\n\r\n1. 最后，将以下代码添加到 **Main** 方法，打开与 IoT 中心的连接并初始化方法侦听器：\r\n   \r\n        try\r\n        {\r\n            Console.WriteLine(\"Connecting to hub\");\r\n            Client = DeviceClient.CreateFromConnectionString(DeviceConnectionString, TransportType.Mqtt);\r\n\r\n            // setup callback for \"writeLine\" method\r\n            Client.SetMethodHandlerAsync(\"writeLine\", WriteLineToConsole, null).Wait();\r\n            Console.WriteLine(\"Waiting for direct method call\\n Press enter to exit.\");\r\n            Console.ReadLine();\r\n\r\n            Console.WriteLine(\"Exiting...\");\r\n\r\n            // as a good practice, remove the \"writeLine\" handler\r\n            Client.SetMethodHandlerAsync(\"writeLine\", null, null).Wait();\r\n            Client.CloseAsync().Wait();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine();\r\n            Console.WriteLine(\"Error in sample: {0}\", ex.Message);\r\n        }\r\n        \r\n1. 在 Visual Studio 的“解决方案资源管理器”中右键单击解决方案，并单击“设置启动项目...”。选择“单个启动项目”，并在下拉菜单中选择“SimulateDeviceMethods”项目。        \r\n\r\n> [!NOTE]\r\n> 为简单起见，本教程不实现任何重试策略。 在生产代码中，应按 MSDN 文章 [暂时性故障处理][lnk-transient-faults]中所述实施重试策略（例如连接重试）。\r\n> \r\n> \r\n\r\n## <a name=\"call-a-direct-method-on-a-device\"></a>在设备上调用直接方法\r\n在本部分中，用户需创建一个 .NET 控制台应用，以便调用模拟设备应用中的方法，并显示响应。\r\n\r\n1. 在 Visual Studio 中，使用“**控制台应用程序**”项目模板将 Visual C# Windows 经典桌面项目添加到当前解决方案。 确保 .NET Framework 版本为 4.5.1 或更高。 将项目命名为 **CallMethodOnDevice**。\r\n   \r\n    ![新的 Visual C# Windows 经典桌面项目][img-createserviceapp]\r\n2. 在“解决方案资源管理器”中，右键单击“CallMethodOnDevice”项目，并单击“管理 NuGet 包...”。\r\n3. 在“NuGet 包管理器”窗口中，选择“浏览”，搜索 **microsoft.azure.devices**，选择“安装”以安装 **Microsoft.Azure.Devices** 包，并接受使用条款。 此过程会下载、安装 [Azure IoT 服务 SDK][lnk-nuget-service-sdk] NuGet 包及其依赖项并添加对它的引用。\r\n   \r\n    ![“NuGet 包管理器”窗口][img-servicenuget]\r\n\r\n4. 在 **Program.cs** 文件顶部添加以下 `using` 语句：\r\n   \r\n        using System.Threading.Tasks;\r\n        using Microsoft.Azure.Devices;\r\n5. 将以下字段添加到 **Program** 类。 将占位符值替换为在上一部分中为中心创建的 IoT 中心连接字符串。\r\n   \r\n        static ServiceClient serviceClient;\r\n        static string connectionString = \"{iot hub connection string}\";\r\n6. 将以下方法添加到 **Program** 类：\r\n   \r\n        private static async Task InvokeMethod()\r\n        {\r\n            var methodInvocation = new CloudToDeviceMethod(\"writeLine\") { ResponseTimeout = TimeSpan.FromSeconds(30) };\r\n            methodInvocation.SetPayloadJson(\"'a line to be written'\");\r\n\r\n            var response = await serviceClient.InvokeDeviceMethodAsync(\"myDeviceId\", methodInvocation);\r\n\r\n            Console.WriteLine(\"Response status: {0}, payload:\", response.Status);\r\n            Console.WriteLine(response.GetPayloadAsJson());\r\n        }\r\n   \r\n    此方法在 `myDeviceId` 设备上调用名为 `writeLine` 的直接方法。 然后将设备提供的响应写入到控制台。 请注意，如何指定设备响应的超时值。\r\n7. 最后，在 **Main** 方法中添加以下行：\r\n   \r\n        serviceClient = ServiceClient.CreateFromConnectionString(connectionString);\r\n        InvokeMethod().Wait();\r\n        Console.WriteLine(\"Press Enter to exit.\");\r\n        Console.ReadLine();\r\n\r\n1. 在 Visual Studio 的“解决方案资源管理器”中右键单击解决方案，并单击“设置启动项目...”。选择“单个启动项目”，并在下拉菜单中选择“CallMethodOnDevice”项目。\r\n\r\n## <a name=\"run-the-applications\"></a>运行应用程序\r\n现在，已准备就绪，可以运行应用程序了。\r\n\r\n1. 运行 .NET 设备应用 **SimulateDeviceMethods**。 它应开始侦听来自 IoT 中心的方法调用： \r\n\r\n    ![运行设备应用][img-deviceapprun]\r\n1. 设备已连接，正在等待方法调用，此时可运行 .NET **CallMethodOnDevice** 应用，调用模拟设备应用中的方法。 此时会看到写入控制台的设备响应。\r\n   \r\n    ![运行服务应用][img-serviceapprun]\r\n1. 然后，该设备通过输出此消息来响应该方法：\r\n   \r\n    ![在设备上调用的直接方法][img-directmethodinvoked]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n本教程中，在 Azure 门户中配置了新的 IoT 中心，并在 IoT 中心的标识注册表中创建了设备标识。 已通过此设备标识启用模拟设备应用的相关功能，使之能够响应通过云调用的方法。 还创建了一个应用，用于调用设备上的方法并显示来自设备的响应。 \r\n\r\n若要继续了解 IoT 中心入门知识并浏览其他 IoT 方案，请参阅：\r\n\r\n* [IoT 中心入门]\r\n* [Schedule jobs on multiple devices（在多台设备上计划作业）][lnk-devguide-jobs]\r\n\r\n若要了解如何扩展 IoT 解决方案并在多个设备上计划方法调用，请参阅 [Schedule and broadcast jobs][lnk-tutorial-jobs] （计划和广播作业）教程。\r\n\r\n<!-- Images. -->\r\n[img-createdeviceapp]: ./media/iot-hub-csharp-csharp-direct-methods/create-device-app.png\r\n[img-clientnuget]: ./media/iot-hub-csharp-csharp-direct-methods/device-app-nuget.png\r\n[img-createserviceapp]: ./media/iot-hub-csharp-csharp-direct-methods/create-service-app.png\r\n[img-servicenuget]: ./media/iot-hub-csharp-csharp-direct-methods/service-app-nuget.png\r\n[img-deviceapprun]: ./media/iot-hub-csharp-csharp-direct-methods/run-device-app.png\r\n[img-serviceapprun]: ./media/iot-hub-csharp-csharp-direct-methods/run-service-app.png\r\n[img-directmethodinvoked]: ./media/iot-hub-csharp-csharp-direct-methods/direct-method-invoked.png\r\n\r\n<!-- Links -->\r\n[lnk-transient-faults]: https://msdn.microsoft.com/library/hh680901(v=pandp.50).aspx\r\n\r\n[lnk-hub-sdks]: iot-hub-devguide-sdks.md\r\n[lnk-free-trial]: http://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-nuget-client-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices.Client/\r\n[lnk-nuget-service-sdk]: https://www.nuget.org/packages/Microsoft.Azure.Devices/\r\n\r\n[lnk-device-identity-csharp]: iot-hub-csharp-csharp-getstarted.md#DeviceIdentity_csharp\r\n\r\n[lnk-devguide-jobs]: iot-hub-devguide-jobs.md\r\n[lnk-tutorial-jobs]: iot-hub-node-node-schedule-jobs.md\r\n\r\n[IoT 中心入门]: iot-hub-node-node-getstarted.md\r\n\r\n"}