{"Title":"Azure IoT 中心入门 (Node)","Description":"了解如何通过用于 Node.js 的 IoT SDK 将设备到云消息发送到 Azure IoT 中心。 创建模拟的设备和服务应用，以便通过 IoT 中心注册设备、发送消息和读取消息。","Content":"# <a name=\"connect-your-simulated-device-to-your-iot-hub-using-node\"></a>使用 Node 将模拟设备连接到 IoT 中心\r\n[!INCLUDE [iot-hub-selector-get-started](../../includes/iot-hub-selector-get-started.md)]\r\n\r\n在本教程结束时，将拥有 3 个 Node.js 控制台应用：\r\n\r\n* **CreateDeviceIdentity.js**，它创建用于连接模拟设备应用的设备标识和关联的安全密钥。\r\n* **ReadDeviceToCloudMessages.js**，它显示模拟设备应用发送的遥测数据。\r\n* **SimulatedDevice.js**，它使用前面创建的设备标识连接到 IoT 中心，并使用 MQTT 协议每秒发送一次遥测消息。\r\n\r\n> [!NOTE]\r\n> [Azure IoT SDK][lnk-hub-sdks] 文章介绍了 Azure IoT SDK，这些 SDK 可用于构建在设备和解决方案后端运行的应用程序。\r\n> \r\n> \r\n\r\n要完成本教程，需要以下各项：\r\n\r\n* Node.js 版本 4.0.x 或更高版本。\r\n\r\n+ 有效的 Azure 帐户。 如果没有帐户，可以创建一个[试用帐户][lnk-free-trial]，只需几分钟即可完成。\r\n\r\n[!INCLUDE [iot-hub-get-started-create-hub](../../includes/iot-hub-get-started-create-hub.md)]\r\n\r\n现在已创建 IoT 中心。 已获得完成本教程的其余部分所需的 IoT 中心主机名和 IoT 中心连接字符串。\r\n\r\n## <a name=\"create-a-device-identity\"></a>创建设备标识\r\n\r\n本部分创建一个 Node.js 控制台应用，用于在 IoT 中心的标识注册表中创建设备标识。 设备无法连接到 IoT 中心，除非它在标识注册表中具有条目。 有关详细信息，请参阅 **IoT 中心开发人员指南** 的 [标识注册表][lnk-devguide-identity]部分。 运行此应用，生成的唯一设备 ID 和密钥可供设备在发送设备到云的消息时用来标识自我。\r\n\r\n1. 新建名为 `createdeviceidentity` 的空文件夹。 在 `createdeviceidentity` 文件夹的命令提示符处，使用以下命令创建 package.json 文件。 接受所有默认值：\r\n\r\n    ```cmd/sh\r\n    npm init\r\n    ```\r\n\r\n2. 在 `createdeviceidentity` 文件夹中的命令提示符处，使用以下命令安装 `azure-iothub` 服务 SDK 包：\r\n\r\n    ```cmd/sh\r\n    npm install azure-iothub --save\r\n    ```\r\n\r\n3. 使用文本编辑器，在 `createdeviceidentity` 文件夹中创建一个 CreateDeviceIdentity.js 文件。\r\n\r\n4. 在 **CreateDeviceIdentity.js** 文件的开头添加以下 `require` 语句：\r\n\r\n    ```nodejs\r\n    'use strict';\r\n\r\n    var iothub = require('azure-iothub');\r\n    ```\r\n\r\n5. 向 CreateDeviceIdentity.js 文件添加以下代码。 将占位符值替换为在上一部分为中心创建的 IoT 中心连接字符串：\r\n\r\n    ```nodejs\r\n    var connectionString = '{iothub connection string}';\r\n\r\n    var registry = iothub.Registry.fromConnectionString(connectionString);\r\n    ```\r\n6. 添加以下代码，在 IoT 中心的设备标识注册表中创建设备定义。 如果标识注册表中没有设备 ID，此代码会创建一个设备；否则它返回现有设备的密钥：\r\n\r\n    ```nodejs\r\n    var device = {\r\n      deviceId: 'myFirstNodeDevice'\r\n    }\r\n    registry.create(device, function(err, deviceInfo, res) {\r\n      if (err) {\r\n        registry.get(device.deviceId, printDeviceInfo);\r\n      }\r\n      if (deviceInfo) {\r\n        printDeviceInfo(err, deviceInfo, res)\r\n      }\r\n    });\r\n\r\n    function printDeviceInfo(err, deviceInfo, res) {\r\n      if (deviceInfo) {\r\n        console.log('Device ID: ' + deviceInfo.deviceId);\r\n        console.log('Device key: ' + deviceInfo.authentication.symmetricKey.primaryKey);\r\n      }\r\n    }\r\n    ```\r\n   [!INCLUDE [iot-hub-pii-note-naming-device](../../includes/iot-hub-pii-note-naming-device.md)]\r\n\r\n7. 保存并关闭 **CreateDeviceIdentity.js** 文件。\r\n\r\n8. 若要运行 `createdeviceidentity` 应用程序，请在 `createdeviceidentity` 文件夹中的命令提示符处执行以下命令：\r\n\r\n    ```cmd/sh\r\n    node CreateDeviceIdentity.js \r\n    ```\r\n9. 记下**设备 ID** 和**设备密钥**。 稍后在创建连接到作为设备的 IoT 中心的应用程序时需要这些值。\r\n\r\n> [!NOTE]\r\n> IoT 中心标识注册表仅存储用于实现 IoT 中心安全访问的设备标识。 它存储设备 ID 和密钥作为安全凭据，以及启用或禁用标志（可用于禁用对单个设备的访问）。 如果应用程序需要存储其他特定于设备的元数据，则应使用特定于应用程序的存储。 有关详细信息，请参阅 [IoT 中心开发人员指南][lnk-devguide-identity]。\r\n> \r\n> \r\n\r\n<a id=\"D2C_node\"></a>\r\n## <a name=\"receive-device-to-cloud-messages\"></a>接收设备到云的消息\r\n\r\n本部分创建一个 Node.js 控制台应用，用于读取来自 IoT 中心的设备到云消息。 IoT 中心公开与[事件中心][lnk-event-hubs-overview]兼容的终结点，以便你可读取设备到云的消息。 为了简单起见，本教程创建的基本读取器不适用于高吞吐量部署。 [Process device-to-cloud messages][lnk-process-d2c-tutorial] （处理设备到云的消息）教程介绍了如何大规模处理设备到云的消息。 [事件中心入门][lnk-eventhubs-tutorial]教程提供的详细信息适用于与 IoT 中心事件中心兼容的终结点。\r\n\r\n> [!NOTE]\r\n> 与事件中心兼容的终结点始终使用 AMQP 协议读取设备到云的消息。\r\n> \r\n> \r\n\r\n1. 创建名为 `readdevicetocloudmessages` 的空文件夹。 在 `readdevicetocloudmessages` 文件夹的命令提示符处，使用以下命令创建 package.json 文件。 接受所有默认值：\r\n\r\n    ```cmd/sh\r\n    npm init\r\n    ```\r\n\r\n2. 在 `readdevicetocloudmessages` 文件夹中的命令提示符处，使用以下命令安装  azure-event-hubs 包：\r\n\r\n    ```cmd/sh\r\n    npm install azure-event-hubs --save\r\n    ```\r\n\r\n3. 使用文本编辑器，在 `readdevicetocloudmessages` 文件夹中创建一个 **ReadDeviceToCloudMessages.js** 文件。\r\n\r\n4. 在 **ReadDeviceToCloudMessages.js** 文件的开头添加以下 `require` 语句：\r\n\r\n    ```nodejs\r\n    'use strict';\r\n\r\n    var EventHubClient = require('azure-event-hubs').Client;\r\n    ```\r\n5. 添加以下变量声明，并将占位符值替换为中心的 IoT 中心连接字符串：\r\n\r\n    ```nodejs\r\n    var connectionString = '{iothub connection string}';\r\n    ```\r\n6. 添加以下两个函数用于在控制台中列显输出：\r\n\r\n    ```nodejs\r\n    var printError = function (err) {\r\n      console.log(err.message);\r\n    };\r\n\r\n    var printMessage = function (message) {\r\n      console.log('Message received: ');\r\n      console.log(JSON.stringify(message.body));\r\n      console.log('');\r\n    };\r\n    ```\r\n7. 添加以下代码以创建 **EventHubClient**，打开与 IoT 中心的连接，并为每个分区创建接收器。 在创建开始运行后只读取发送到 IoT 中心的消息的接收方时，此应用程序会使用筛选器。 此筛选器仅显示当前的消息集，很适合测试环境。 在生产环境中，代码需保证处理所有消息。 有关详细信息，请参阅 [如何处理 IoT 中心设备到云的消息][lnk-process-d2c-tutorial] 教程：\r\n\r\n    ```nodejs\r\n    var client = EventHubClient.fromConnectionString(connectionString);\r\n    client.open()\r\n        .then(client.getPartitionIds.bind(client))\r\n        .then(function (partitionIds) {\r\n            return partitionIds.map(function (partitionId) {\r\n                return client.createReceiver('$Default', partitionId, { 'startAfterTime' : Date.now()}).then(function(receiver) {\r\n                    console.log('Created partition receiver: ' + partitionId)\r\n                    receiver.on('errorReceived', printError);\r\n                    receiver.on('message', printMessage);\r\n                });\r\n            });\r\n        })\r\n        .catch(printError);\r\n    ```\r\n8. 保存并关闭 **ReadDeviceToCloudMessages.js** 文件。\r\n\r\n## <a name=\"create-a-simulated-device-app\"></a>创建模拟设备应用程序\r\n本部分创建一个 Node.js 控制台应用，用于模拟向 IoT 中心发送设备到云消息的设备。\r\n\r\n1. 创建名为 `simulateddevice` 的空文件夹。 在 `simulateddevice` 文件夹的命令提示符处，使用以下命令创建 package.json 文件。 接受所有默认值：\r\n\r\n    ```cmd/sh\r\n    npm init\r\n    ```\r\n\r\n2. 在 `simulateddevice` 文件夹的命令提示符处，运行下述命令以安装 azure-iot-device 设备 SDK 包和 azure-iot-device-mqtt 包：\r\n\r\n    ```cmd/sh\r\n    npm install azure-iot-device azure-iot-device-mqtt --save\r\n    ```\r\n\r\n3. 在 `simulateddevice` 文件夹中，利用文本编辑器创建 SimulatedDevice.js 文件。\r\n\r\n4. 在 **SimulatedDevice.js** 文件的开头添加以下 `require` 语句：\r\n\r\n    ```nodejs\r\n    'use strict';\r\n\r\n    var clientFromConnectionString = require('azure-iot-device-mqtt').clientFromConnectionString;\r\n    var Message = require('azure-iot-device').Message;\r\n    ```\r\n\r\n5. 添加 `connectionString` 变量，并使用它创建一个客户端实例。 将 `{youriothostname}` 替换为在“创建 IoT 中心”部分创建的 IoT 中心的名称。 将 `{yourdevicekey}` 替换为在“创建设备标识”部分生成的设备密钥值：\r\n\r\n    ```nodejs\r\n    var connectionString = 'HostName={youriothostname};DeviceId=myFirstNodeDevice;SharedAccessKey={yourdevicekey}';\r\n\r\n    var client = clientFromConnectionString(connectionString);\r\n    ```\r\n6. 添加以下函数以显示应用程序的输出：\r\n\r\n    ```nodejs\r\n    function printResultFor(op) {\r\n      return function printResult(err, res) {\r\n        if (err) console.log(op + ' error: ' + err.toString());\r\n        if (res) console.log(op + ' status: ' + res.constructor.name);\r\n      };\r\n    }\r\n    ```\r\n7. 创建回调，并使用 **setInterval** 函数每秒向 IoT 中心发送一次消息：\r\n\r\n    ```nodejs\r\n    var connectCallback = function (err) {\r\n      if (err) {\r\n        console.log('Could not connect: ' + err);\r\n      } else {\r\n        console.log('Client connected');\r\n\r\n        // Create a message and send it to the IoT Hub every second\r\n        setInterval(function(){\r\n            var temperature = 20 + (Math.random() * 15);\r\n            var humidity = 60 + (Math.random() * 20);            \r\n            var data = JSON.stringify({ deviceId: 'myFirstNodeDevice', temperature: temperature, humidity: humidity });\r\n            var message = new Message(data);\r\n            message.properties.add('temperatureAlert', (temperature > 30) ? 'true' : 'false');\r\n            console.log(\"Sending message: \" + message.getData());\r\n            client.sendEvent(message, printResultFor('send'));\r\n        }, 1000);\r\n      }\r\n    };\r\n    ```\r\n8. 与 IoT 中心建立连接并开始发送消息：\r\n\r\n    ```nodejs\r\n    client.open(connectCallback);\r\n    ```\r\n9. 保存并关闭 **SimulatedDevice.js** 文件。\r\n\r\n> [!NOTE]\r\n> 为简单起见，本教程不实现任何重试策略。 在生产代码中，应该按 MSDN 文章 [Transient Fault Handling][lnk-transient-faults]（暂时性故障处理）中所述实施重试策略（例如指数性的回退）。\r\n> \r\n> \r\n\r\n## <a name=\"run-the-apps\"></a>运行应用\r\n现在，已准备就绪，可以运行应用。\r\n\r\n1. 在 `readdevicetocloudmessages` 文件夹中的命令提示符处运行以下命令，开始监视 IoT 中心：\r\n\r\n    ```cmd/sh\r\n    node ReadDeviceToCloudMessages.js \r\n    ```\r\n\r\n    ![用于监视设备到云消息的 Node.js IoT 中心服务应用][7]\r\n\r\n2. 在 `simulateddevice` 文件夹中的命令提示符处运行以下命令，开始将遥测数据发送到 IoT 中心：\r\n\r\n    ```cmd/sh\r\n    node SimulatedDevice.js\r\n    ```\r\n\r\n    ![用于发送设备到云消息的 Node.js IoT 中心设备应用][8]\r\n3. [Azure 门户][lnk-portal]中的“使用情况”磁贴显示发送到 IoT 中心的消息数：\r\n\r\n    ![显示发送到 IoT 中心的消息数的 Azure 门户“使用情况”磁贴][43]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n本教程中，在 Azure 门户中配置了新的 IoT 中心，并在 IoT 中心的标识注册表中创建了设备标识。 已使用此设备标识来让模拟设备应用向 IoT 中心发送设备到云的消息。 还创建了一个应用，用于显示 IoT 中心接收的消息。 \r\n\r\n若要继续了解 IoT 中心入门知识并浏览其他 IoT 方案，请参阅：\r\n\r\n* [连接设备][lnk-connect-device]\r\n* [设备管理入门][lnk-device-management]\r\n* [使用 Azure IoT Edge 将 AI 部署到边缘设备][lnk-iot-edge]\r\n\r\n若要了解如何扩展 IoT 解决方案和如何大规模处理设备到云的消息，请参阅 [Process device-to-cloud messages][lnk-process-d2c-tutorial] （处理设备到云的消息）教程。\r\n[!INCLUDE [iot-hub-get-started-next-steps](../../includes/iot-hub-get-started-next-steps.md)]\r\n\r\n<!-- Images. -->\r\n[7]: ./media/iot-hub-node-node-getstarted/runapp1.png\r\n[8]: ./media/iot-hub-node-node-getstarted/runapp2.png\r\n[43]: ./media/iot-hub-csharp-csharp-getstarted/usage.png\r\n\r\n<!-- Links -->\r\n[lnk-transient-faults]: https://msdn.microsoft.com/library/hh680901(v=pandp.50).aspx\r\n\r\n[lnk-eventhubs-tutorial]: ../event-hubs/event-hubs-csharp-ephcs-getstarted.md\r\n[lnk-devguide-identity]: ./iot-hub-devguide-identity-registry.md\r\n[lnk-event-hubs-overview]: ../event-hubs/event-hubs-overview.md\r\n\r\n[lnk-dev-setup]: https://github.com/Azure/azure-iot-sdk-node/tree/master/doc/node-devbox-setup.md\r\n[lnk-process-d2c-tutorial]: ./iot-hub-csharp-csharp-process-d2c.md\r\n\r\n[lnk-hub-sdks]: ./iot-hub-devguide-sdks.md\r\n[lnk-free-trial]: https://www.azure.cn/pricing/1rmb-trial/\r\n[lnk-portal]: https://portal.azure.cn/\r\n\r\n[lnk-device-management]: ./iot-hub-node-node-device-management-get-started.md\r\n[lnk-iot-edge]: ./iot-hub-linux-iot-edge-get-started.md\r\n[lnk-connect-device]: https://www.azure.cn/develop/iot/\r\n\r\n<!--Update_Description:update meta properties and wording-->"}