{"Title":"云服务中的角色通信","Description":"云服务中的角色实例可以定义其终结点（http、https、tcp、udp），以便与外界通信或在其他角色实例之间进行通信。","Content":"\r\n# 为 Azure 中的角色实例启用通信\r\n\r\n云服务角色通过内部和外部连接进行通信。外部连接称为**输入终结点**，内部连接称为**内部终结点**。本主题介绍如何修改[服务定义](./cloud-services-model-and-package.md#csdef)以创建终结点。\r\n\r\n## 输入终结点\r\n当你想要向外部公开某个端口时，将使用输入终结点。你可以指定该终结点的协议类型和端口，然后，这些指定值将同时应用到该终结点的外部和内部端口。如果需要，你可以使用 [localPort](https://msdn.microsoft.com/zh-cn/library/azure/gg557552.aspx#InputEndpoint) 属性为终结点指定不同的内部端口。\r\n\r\n输入终结点可以使用以下协议：**http、https、tcp、udp**。\r\n\r\n若要创建输入终结点，请将 **InputEndpoint** 子元素添加到 Web 角色或辅助角色的 **Endpoints** 元素。\r\n\r\n```xml\r\n    <Endpoints>\r\n      <InputEndpoint name=\"StandardWeb\" protocol=\"http\" port=\"80\" localPort=\"80\" />\r\n    </Endpoints> \r\n```\r\n\r\n## 实例输入终结点\r\n实例输入终结点类似于输入终结点，但允许你通过使用负载均衡器上的端口转发，映射每个角色实例的面向公众的特定端口。你可以指定单个面向公众的端口，也可以指定一系列端口。\r\n\r\n实例输入终结点只能使用 **tcp** 或 **udp** 作为协议。\r\n\r\n若要创建实例输入终结点，请将 **InstanceInputEndpoint** 子元素添加到 Web 角色或辅助角色的 **Endpoints** 元素。\r\n\r\n```xml\r\n    <Endpoints>\r\n      <InstanceInputEndpoint name=\"Endpoint2\" protocol=\"tcp\" localPort=\"10100\">\r\n        <AllocatePublicPortFrom>\r\n          <FixedPortRange max=\"10109\" min=\"10105\" />\r\n        </AllocatePublicPortFrom>\r\n      </InstanceInputEndpoint>\r\n    </Endpoints>\r\n```\r\n\r\n## 内部终结点\r\n内部终结点可用于实例间的通信。端口是可选的，如果省略端口，将为终结点分配动态端口。可以使用端口范围。每个角色的内部终结点数不能超过五个。\r\n\r\n内部终结点可以使用以下协议：**http、tcp、udp、任何**。\r\n\r\n若要创建内部输入终结点，请将 **InternalEndpoint** 子元素添加到 Web 角色或辅助角色的 **Endpoints** 元素。\r\n\r\n```xml\r\n    <Endpoints>\r\n      <InternalEndpoint name=\"Endpoint3\" protocol=\"any\" port=\"8999\" />\r\n    </Endpoints> \r\n```\r\n\r\n你也可以使用端口范围。\r\n\r\n```xml\r\n    <Endpoints>\r\n      <InternalEndpoint name=\"Endpoint3\" protocol=\"any\">\r\n        <FixedPortRange max=\"8995\" min=\"8999\" />\r\n      </InternalEndpoint>\r\n    </Endpoints>\r\n```\r\n\r\n## 辅助角色与Web 角色\r\n\r\n当你使用辅助角色和 web 角色时，在终结点方面需要注意一个细微的差别。Web 角色必须至少有一个使用 **HTTP** 协议的输入终结点。\r\n\r\n```xml\r\n    <Endpoints>\r\n      <InputEndpoint name=\"StandardWeb\" protocol=\"http\" port=\"80\" localPort=\"80\"/>\r\n      <!-- more endpoints may be declared after the first InputEndPoint -->\r\n    </Endpoints>\r\n```\r\n\r\n## 使用 .NET SDK 访问终结点\r\nAzure 托管库提供了角色实例在运行时用来通信的方法。可以从角色实例中运行的代码检索有关其他角色实例及其终结点是否存在的信息，以及有关当前角色实例的信息。\r\n\r\n> [!NOTE]\r\n>你只能检索有关正在你的云服务中运行且定义了至少一个内部终结点的角色实例的信息。无法获取有关其他服务中运行的角色实例的数据。\r\n\r\n可以使用 [Instances](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.serviceruntime.role.instances.aspx) 属性检索角色的实例。首先，使用 [CurrentRoleInstance](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.serviceruntime.roleenvironment.currentroleinstance.aspx) 返回对当前角色实例的引用，然后使用 [Role](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.serviceruntime.roleinstance.role.aspx) 属性返回对角色本身的引用。\r\n\r\n当你通过 .NET SDK 以编程方式连接到角色实例时，可以相对较容易地访问终结点信息。例如，在连接到特定的角色环境后，你可以使用以下代码获取特定终结点的端口：\r\n\r\n```csharp\r\n    int port = RoleEnvironment.CurrentRoleInstance.InstanceEndpoints[\"StandardWeb\"].IPEndpoint.Port;\r\n```\r\n\r\n**Instances** 属性将返回一个 **RoleInstance** 对象集合。此集合始终包含当前实例。如果角色未定义内部终结点，则集合将包含当前实例，但不包含任何其他实例。如果未为角色定义内部终结点，则集合中的角色实例的数目将始终为 1。如果角色定义了一个内部终结点，则其实例在运行时是可发现的，并且集合中的实例数将与在服务配置文件中为角色指定的实例数对应。\r\n\r\n> [!NOTE]\r\n>Azure 托管库不提供用来确定其他角色实例的运行状况的方法，但如果你的服务需要此功能，则可以自行实现此类运行状况评估。你可以使用 [Azure Diagnostics](https://msdn.microsoft.com/zh-cn/library/azure/gg433048.aspx) 来获取有关正在运行的角色实例的信息。\r\n\r\n若要确定角色实例上的内部终结点的端口号，可以使用 [InstanceEndpoints](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.serviceruntime.roleinstance.instanceendpoints.aspx) 属性来返回 Dictionary 对象，该对象中将包含终结点名称及其对应的 IP 地址和端口。[IPEndpoint](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.serviceruntime.roleinstanceendpoint.ipendpoint.aspx) 属性返回指定终结点的 IP 地址和端口。**PublicIPEndpoint** 属性返回负载均衡终结点的端口。将不使用 **PublicIPEndpoint** 属性的 IP 地址部分。\r\n\r\n下面是一个循环访问角色实例的示例。\r\n\r\n```csharp\r\n    foreach (RoleInstance roleInst in RoleEnvironment.CurrentRoleInstance.Role.Instances)\r\n    {\r\n        Trace.WriteLine(\"Instance ID: \" + roleInst.Id);\r\n        foreach (RoleInstanceEndpoint roleInstEndpoint in roleInst.InstanceEndpoints.Values)\r\n        {\r\n            Trace.WriteLine(\"Instance endpoint IP address and port: \" + roleInstEndpoint.IPEndpoint);\r\n        }\r\n    }\r\n```\r\n\r\n下面的辅助角色示例将获取通过服务定义公开的终结点，然后开始侦听连接。\r\n\r\n> [!WARNING]\r\n>此代码仅适用于已部署的服务。在 Azure 计算模拟器中运行时，将忽略创建直接端口终结点的服务配置元素（**InstanceInputEndpoint** 元素）。\r\n\r\n```csharp\r\n    using System;\r\n    using System.Diagnostics;\r\n    using System.Linq;\r\n    using System.Net;\r\n    using System.Net.Sockets;\r\n    using System.Threading;\r\n    using Microsoft.WindowsAzure;\r\n    using Microsoft.WindowsAzure.Diagnostics;\r\n    using Microsoft.WindowsAzure.ServiceRuntime;\r\n    using Microsoft.WindowsAzure.StorageClient;\r\n\r\n    namespace WorkerRole1\r\n    {\r\n      public class WorkerRole : RoleEntryPoint\r\n      {\r\n        public override void Run()\r\n        {\r\n          try\r\n          {\r\n            // Initialize method-wide variables\r\n            var epName = \"Endpoint1\";\r\n            var roleInstance = RoleEnvironment.CurrentRoleInstance;\r\n\r\n            // Identify direct communication port\r\n            var myPublicEp = roleInstance.InstanceEndpoints[epName].PublicIPEndpoint;\r\n            Trace.TraceInformation(\"IP:{0}, Port:{1}\", myPublicEp.Address, myPublicEp.Port);\r\n\r\n            // Identify public endpoint\r\n            var myInternalEp = roleInstance.InstanceEndpoints[epName].IPEndpoint;\r\n\r\n            // Create socket listener\r\n            var listener = new Socket(\r\n              myInternalEp.AddressFamily, SocketType.Stream, ProtocolType.Tcp);\r\n\r\n            // Bind socket listener to internal endpoint and listen\r\n            listener.Bind(myInternalEp);\r\n            listener.Listen(10);\r\n            Trace.TraceInformation(\"Listening on IP:{0},Port: {1}\",\r\n              myInternalEp.Address, myInternalEp.Port);\r\n\r\n            while (true)\r\n            {\r\n              // Block the thread and wait for a client request\r\n              Socket handler = listener.Accept();\r\n              Trace.TraceInformation(\"Client request received.\");\r\n\r\n              // Define body of socket handler\r\n              var handlerThread = new Thread(\r\n                new ParameterizedThreadStart(h =>\r\n                {\r\n                  var socket = h as Socket;\r\n                  Trace.TraceInformation(\"Local:{0} Remote{1}\",\r\n                    socket.LocalEndPoint, socket.RemoteEndPoint);\r\n\r\n                  // Shut down and close socket\r\n                  socket.Shutdown(SocketShutdown.Both);\r\n                  socket.Close();\r\n                }\r\n              ));\r\n\r\n              // Start socket handler on new thread\r\n              handlerThread.Start(handler);\r\n            }\r\n          }\r\n          catch (Exception e)\r\n          {\r\n            Trace.TraceError(\"Caught exception in run. Details: {0}\", e);\r\n          }\r\n        }\r\n\r\n        public override bool OnStart()\r\n        {\r\n          // Set the maximum number of concurrent connections \r\n          ServicePointManager.DefaultConnectionLimit = 12;\r\n\r\n          // For information on handling configuration changes\r\n          // see the MSDN topic at http://go.microsoft.com/fwlink/?LinkId=166357.\r\n          return base.OnStart();\r\n        }\r\n        }\r\n        }\r\n```\r\n\r\n## 用于控制角色通信的网络流量规则\r\n在定义内部终结点之后，可以根据创建的终结点添加网络流量规则以控制各角色实例之间的通信方式。下图演示了一些用于控制角色通信的常见方案：\r\n\r\n![网络流量规则方案](./media/cloud-services-enable-communication-role-instances/scenarios.png \"网络流量规则方案\")\r\n\r\n以下代码示例演示了上图中显示的角色的角色定义。每个角色定义包含至少一个已定义的内部终结点：\r\n\r\n```xml\r\n    <ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\r\n      <WebRole name=\"WebRole1\" vmsize=\"Medium\">\r\n        <Sites>\r\n          <Site name=\"Web\">\r\n            <Bindings>\r\n              <Binding name=\"HttpIn\" endpointName=\"HttpIn\" />\r\n            </Bindings>\r\n          </Site>\r\n        </Sites>\r\n        <Endpoints>\r\n          <InputEndpoint name=\"HttpIn\" protocol=\"http\" port=\"80\" />\r\n          <InternalEndpoint name=\"InternalTCP1\" protocol=\"tcp\" />\r\n        </Endpoints>\r\n      </WebRole>\r\n      <WorkerRole name=\"WorkerRole1\">\r\n        <Endpoints>\r\n          <InternalEndpoint name=\"InternalTCP2\" protocol=\"tcp\" />\r\n        </Endpoints>\r\n      </WorkerRole>\r\n      <WorkerRole name=\"WorkerRole2\">\r\n        <Endpoints>\r\n          <InternalEndpoint name=\"InternalTCP3\" protocol=\"tcp\" />\r\n          <InternalEndpoint name=\"InternalTCP4\" protocol=\"tcp\" />\r\n        </Endpoints>\r\n      </WorkerRole>\r\n    </ServiceDefinition>\r\n```\r\n\r\n> [!NOTE]\r\n>固定端口和自动分配的端口的内部终结点会限制角色之间的通信。\r\n\r\n默认情况下，在定义内部终结点后，通信可以从任意角色流动到角色的内部终结点，而不会受到任何限制。若要限制通信，必须将 **NetworkTrafficRules** 元素添加到服务定义文件中的 **ServiceDefinition** 元素。\r\n\r\n### 方案 1\r\n仅允许从 **WebRole1** 到 **WorkerRole1** 的网络流量。\r\n\r\n```xml\r\n    <ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\r\n      <NetworkTrafficRules>\r\n        <OnlyAllowTrafficTo>\r\n          <Destinations>\r\n            <RoleEndpoint endpointName=\"InternalTCP2\" roleName=\"WorkerRole1\"/>\r\n          </Destinations>\r\n          <AllowAllTraffic/>\r\n          <WhenSource matches=\"AnyRule\">\r\n            <FromRole roleName=\"WebRole1\"/>\r\n          </WhenSource>\r\n        </OnlyAllowTrafficTo>\r\n      </NetworkTrafficRules>\r\n    </ServiceDefinition>\r\n```\r\n\r\n### 方案 2\r\n仅允许从 **WebRole1** 到 **WorkerRole1** 和 **WorkerRole2** 的网络流量。\r\n\r\n```xml\r\n    <ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\r\n      <NetworkTrafficRules>\r\n        <OnlyAllowTrafficTo>\r\n          <Destinations>\r\n            <RoleEndpoint endpointName=\"InternalTCP2\" roleName=\"WorkerRole1\"/>\r\n            <RoleEndpoint endpointName=\"InternalTCP3\" roleName=\"WorkerRole2\"/>\r\n          </Destinations>\r\n          <WhenSource matches=\"AnyRule\">\r\n            <FromRole roleName=\"WebRole1\"/>\r\n          </WhenSource>\r\n        </OnlyAllowTrafficTo>\r\n      </NetworkTrafficRules>\r\n    </ServiceDefinition>\r\n```\r\n\r\n### 方案 3\r\n仅允许从 **WebRole1** 到 **WorkerRole1** 以及从 **WorkerRole1** 到 **WorkerRole2** 的网络流量。\r\n\r\n```xml\r\n    <ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\r\n      <NetworkTrafficRules>\r\n        <OnlyAllowTrafficTo>\r\n          <Destinations>\r\n            <RoleEndpoint endpointName=\"InternalTCP2\" roleName=\"WorkerRole1\"/>\r\n          </Destinations>\r\n          <AllowAllTraffic/>\r\n          <WhenSource matches=\"AnyRule\">\r\n            <FromRole roleName=\"WebRole1\"/>\r\n          </WhenSource>\r\n        </OnlyAllowTrafficTo>\r\n      </NetworkTrafficRules>\r\n      <NetworkTrafficRules>\r\n        <OnlyAllowTrafficTo>\r\n          <Destinations>\r\n            <RoleEndpoint endpointName=\"InternalTCP3\" roleName=\"WorkerRole2\"/>\r\n          </Destinations>\r\n          <WhenSource matches=\"AnyRule\">\r\n            <FromRole roleName=\"WorkerRole1\"/>\r\n          </WhenSource>\r\n        </OnlyAllowTrafficTo>\r\n      </NetworkTrafficRules>\r\n    </ServiceDefinition>\r\n```\r\n\r\n### 方案 4\r\n仅允许从 **WebRole1** 到 **WorkerRole1**、从 **WebRole1** 到 **WorkerRole2** 以及从 **WorkerRole1** 到 **WorkerRole2** 的网络流量。\r\n\r\n```xml\r\n    <ServiceDefinition name=\"MyService\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\">\r\n      <NetworkTrafficRules>\r\n        <OnlyAllowTrafficTo>\r\n          <Destinations>\r\n            <RoleEndpoint endpointName=\"InternalTCP2\" roleName=\"WorkerRole1\"/>\r\n          </Destinations>\r\n          <AllowAllTraffic/>\r\n          <WhenSource matches=\"AnyRule\">\r\n            <FromRole roleName=\"WebRole1\"/>\r\n          </WhenSource>\r\n        </OnlyAllowTrafficTo>\r\n      </NetworkTrafficRules>\r\n      <NetworkTrafficRules>\r\n        <OnlyAllowTrafficTo >\r\n          <Destinations>\r\n            <RoleEndpoint endpointName=\"InternalTCP3\" roleName=\"WorkerRole2\"/>\r\n          </Destinations>\r\n          <AllowAllTraffic/>\r\n          <WhenSource matches=\"AnyRule\">\r\n            <FromRole roleName=\"WorkerRole1\"/>\r\n          </WhenSource>\r\n        </OnlyAllowTrafficTo>\r\n      </NetworkTrafficRules>\r\n      <NetworkTrafficRules>\r\n        <OnlyAllowTrafficTo >\r\n          <Destinations>\r\n            <RoleEndpoint endpointName=\"InternalTCP4\" roleName=\"WorkerRole2\"/>\r\n          </Destinations>\r\n          <AllowAllTraffic/>\r\n          <WhenSource matches=\"AnyRule\">\r\n            <FromRole roleName=\"WebRole1\"/>\r\n          </WhenSource>\r\n        </OnlyAllowTrafficTo>\r\n      </NetworkTrafficRules>\r\n    </ServiceDefinition>\r\n```\r\n\r\n可在[此处](https://msdn.microsoft.com/zh-cn/library/azure/gg557551.aspx)找到上面所用元素的 XML 架构参考。\r\n\r\n## 后续步骤\r\n阅读有关云服务[模型](./cloud-services-model-and-package.md)的详细信息。\r\n\r\n<!---HONumber=Mooncake_Quality_Review_1118_2016-->"}