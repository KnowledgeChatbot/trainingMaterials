{"Title":"Python 和 Azure 云服务入门","Description":"有关使用 Python Tools for Visual Studio 来创建包括 Web 角色和辅助角色的 Azure 云服务的概述。","Content":"# <a name=\"python-web-and-worker-roles-with-python-tools-for-visual-studio\"></a>用于 Visual Studio 的 Python 工具中的 Python Web 角色和辅助角色\r\n\r\n本文概述了如何在[针对 Visual Studio 的 Python 工具][Python Tools for Visual Studio]中使用 Python Web 角色和辅助角色。 介绍如何使用 Visual Studio 来创建和部署使用 Python 的基本云服务。\r\n\r\n## <a name=\"prerequisites\"></a>先决条件\r\n* [Visual Studio 2013、2015 或 2017](https://www.visualstudio.com/)\r\n* [Python Tools for Visual Studio][Python Tools for Visual Studio]（用于 Visual Studio 的 Python 工具，简称 PTVS）\r\n* [用于 VS 2013 的 Azure SDK 工具][Azure SDK Tools for VS 2013]或  \r\n[用于 VS 2015 的 Azure SDK 工具][Azure SDK Tools for VS 2015]或  \r\n[用于 VS 2017 的 Azure SDK 工具][Azure SDK Tools for VS 2017]\r\n* [Python 2.7（32 位）][Python 2.7 32-bit]或 [Python 3.5（32 位）][Python 3.5 32-bit]\r\n\r\n[!INCLUDE [create-account-and-websites-note](../../includes/create-account-and-websites-note.md)]\r\n\r\n## <a name=\"what-are-python-web-and-worker-roles\"></a>什么是 Python Web 角色和辅助角色？\r\n\r\nAzure 为运行应用程序提供了三种计算模型：[Azure 应用服务中的 Web 应用功能][execution model-web sites]、[Azure 虚拟机][execution model-vms]和 [Azure 云服务][execution model-cloud services]。 这三种模型都支持 Python。 云服务（包括 Web 角色和辅助角色）提供了 *平台即服务 (PaaS)*。 在云服务中，Web 角色提供专用的 Internet Information Services (IIS) Web 服务器来托管前端 Web 应用程序，而辅助角色可独立于用户交互或输入运行异步任务、运行时间较长的任务或永久性任务。\r\n\r\n有关详细信息，请参阅 [什么是云服务？]。\r\n\r\n> [!NOTE]\r\n> *想要构建一个简单的网站？*\r\n> 如果方案只涉及一个简单的网站前端，请考虑使用 Azure 应用服务中的轻型 Web 应用功能。 随着网站的不断扩大和需求的不断变化，用户可将其轻松升级到云服务。 请参阅 <a href=\"/develop/python/\">Python 开发人员中心</a>关于如何在 Azure 应用服务中开发 Web 应用功能的文章。\r\n> <br />\r\n> \r\n> \r\n\r\n## <a name=\"project-creation\"></a>创建项目\r\n在 Visual Studio 中，可以选择“新建项目”对话框中“Python”下的“Azure 云服务”。\r\n\r\n![“新建项目”对话框](./media/cloud-services-python-ptvs/new-project-cloud-service.png)\r\n\r\n在 Azure 云服务向导中，可以创建新的 Web 角色和辅助角色。\r\n\r\n![Azure 云服务对话框](./media/cloud-services-python-ptvs/new-service-wizard.png)\r\n\r\n辅助角色模板包含样板文件代码以连接到 Azure 存储帐户或 Azure 服务总线。\r\n\r\n![云服务解决方案](./media/cloud-services-python-ptvs/worker.png)\r\n\r\n可以随时将 Web 角色或辅助角色添加到现有的云服务。  用户可以选择在解决方案中添加现有项目或创建新项目。\r\n\r\n![添加角色命令](./media/cloud-services-python-ptvs/add-new-or-existing-role.png)\r\n\r\n云服务可以包含用不同语言实现的角色。  例如，可以使用 Django 实现 Python Web 角色，而用使用 Python 或 C# 实现辅助角色。  可以通过使用服务总线队列或存储队列来轻松地在角色之间进行通信。\r\n\r\n## <a name=\"install-python-on-the-cloud-service\"></a>在云服务上安装 Python\r\n\r\n>[!WARNING]\r\n> 在本文上次更新时与 Visual Studio 一起安装的安装脚本无法使用。 本部分介绍一种解决方法。\r\n> \r\n> \r\n\r\n安装脚本的主要问题在于无法安装 Python。 首先，请在 [ServiceDefinition.csdef](./cloud-services-model-and-package.md#csdef) 文件中定义两个[启动任务](./cloud-services-startup-tasks.md)。 第一个任务 (**PrepPython.ps1**) 下载并安装 Python 运行时。 第二个任务 (**PipInstaller.ps1**) 运行 pip，安装可能存在的任何依赖项。\r\n\r\n以下脚本是针对 Python 3.5 编写的。 要使用 2.x 版 Python，请针对两个启动任务以及运行时任务将 **PYTHON2** 变量文件设置为 **on**：`<Variable name=\"PYTHON2\" value=\"<mark>on</mark>\" />`。\r\n\r\n```xml\r\n<Startup>\r\n\r\n  <Task executionContext=\"elevated\" taskType=\"simple\" commandLine=\"bin\\ps.cmd PrepPython.ps1\">\r\n    <Environment>\r\n      <Variable name=\"EMULATED\">\r\n        <RoleInstanceValue xpath=\"/RoleEnvironment/Deployment/@emulated\" />\r\n      </Variable>\r\n      <Variable name=\"PYTHON2\" value=\"off\" />\r\n    </Environment>\r\n  </Task>\r\n\r\n  <Task executionContext=\"elevated\" taskType=\"simple\" commandLine=\"bin\\ps.cmd PipInstaller.ps1\">\r\n    <Environment>\r\n      <Variable name=\"EMULATED\">\r\n        <RoleInstanceValue xpath=\"/RoleEnvironment/Deployment/@emulated\" />\r\n      </Variable>\r\n      <Variable name=\"PYTHON2\" value=\"off\" />\r\n    </Environment>\r\n\r\n  </Task>\r\n\r\n</Startup>\r\n```\r\n\r\n必须将 PYTHON2 和 PYPATH 变量添加到辅助角色启动任务。 仅当 **PYTHON2** 变量设置为 **on** 时，才使用 **PYPATH** 变量。\r\n\r\n```xml\r\n<Runtime>\r\n  <Environment>\r\n    <Variable name=\"EMULATED\">\r\n      <RoleInstanceValue xpath=\"/RoleEnvironment/Deployment/@emulated\" />\r\n    </Variable>\r\n    <Variable name=\"PYTHON2\" value=\"off\" />\r\n    <Variable name=\"PYPATH\" value=\"%SystemDrive%\\Python27\" />\r\n  </Environment>\r\n  <EntryPoint>\r\n    <ProgramEntryPoint commandLine=\"bin\\ps.cmd LaunchWorker.ps1\" setReadyOnProcessStart=\"true\" />\r\n  </EntryPoint>\r\n</Runtime>\r\n```\r\n\r\n#### <a name=\"sample-servicedefinitioncsdef\"></a>ServiceDefinition.csdef 示例\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<ServiceDefinition name=\"AzureCloudServicePython\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2008/10/ServiceDefinition\" schemaVersion=\"2015-04.2.6\">\r\n  <WorkerRole name=\"WorkerRole1\" vmsize=\"Small\">\r\n    <ConfigurationSettings>\r\n      <Setting name=\"Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString\" />\r\n      <Setting name=\"Python2\" />\r\n    </ConfigurationSettings>\r\n    <Startup>\r\n      <Task executionContext=\"elevated\" taskType=\"simple\" commandLine=\"bin\\ps.cmd PrepPython.ps1\">\r\n        <Environment>\r\n          <Variable name=\"EMULATED\">\r\n            <RoleInstanceValue xpath=\"/RoleEnvironment/Deployment/@emulated\" />\r\n          </Variable>\r\n          <Variable name=\"PYTHON2\" value=\"off\" />\r\n        </Environment>\r\n      </Task>\r\n      <Task executionContext=\"elevated\" taskType=\"simple\" commandLine=\"bin\\ps.cmd PipInstaller.ps1\">\r\n        <Environment>\r\n          <Variable name=\"EMULATED\">\r\n            <RoleInstanceValue xpath=\"/RoleEnvironment/Deployment/@emulated\" />\r\n          </Variable>\r\n          <Variable name=\"PYTHON2\" value=\"off\" />\r\n        </Environment>\r\n      </Task>\r\n    </Startup>\r\n    <Runtime>\r\n      <Environment>\r\n        <Variable name=\"EMULATED\">\r\n          <RoleInstanceValue xpath=\"/RoleEnvironment/Deployment/@emulated\" />\r\n        </Variable>\r\n        <Variable name=\"PYTHON2\" value=\"off\" />\r\n        <Variable name=\"PYPATH\" value=\"%SystemDrive%\\Python27\" />\r\n      </Environment>\r\n      <EntryPoint>\r\n        <ProgramEntryPoint commandLine=\"bin\\ps.cmd LaunchWorker.ps1\" setReadyOnProcessStart=\"true\" />\r\n      </EntryPoint>\r\n    </Runtime>\r\n    <Imports>\r\n      <Import moduleName=\"RemoteAccess\" />\r\n      <Import moduleName=\"RemoteForwarder\" />\r\n    </Imports>\r\n  </WorkerRole>\r\n</ServiceDefinition>\r\n```\r\n\r\n接下来，在角色的 **./bin** 文件夹中创建 **PrepPython.ps1** 和 **PipInstaller.ps1** 文件。\r\n\r\n#### <a name=\"preppythonps1\"></a>PrepPython.ps1\r\n此脚本安装 Python。 如果 **PYTHON2** 环境变量设置为 **on**，则安装 Python 2.7，否则安装 Python 3.5。\r\n\r\n```powershell\r\n$is_emulated = $env:EMULATED -eq \"true\"\r\n$is_python2 = $env:PYTHON2 -eq \"on\"\r\n$nl = [Environment]::NewLine\r\n\r\nif (-not $is_emulated){\r\n    Write-Output \"Checking if python is installed...$nl\"\r\n    if ($is_python2) {\r\n        & \"${env:SystemDrive}\\Python27\\python.exe\"  -V | Out-Null\r\n    }\r\n    else {\r\n        py -V | Out-Null\r\n    }\r\n\r\n    if (-not $?) {\r\n\r\n        $url = \"https://www.python.org/ftp/python/3.5.2/python-3.5.2-amd64.exe\"\r\n        $outFile = \"${env:TEMP}\\python-3.5.2-amd64.exe\"\r\n\r\n        if ($is_python2) {\r\n            $url = \"https://www.python.org/ftp/python/2.7.12/python-2.7.12.amd64.msi\"\r\n            $outFile = \"${env:TEMP}\\python-2.7.12.amd64.msi\"\r\n        }\r\n\r\n        Write-Output \"Not found, downloading $url to $outFile$nl\"\r\n        Invoke-WebRequest $url -OutFile $outFile\r\n        Write-Output \"Installing$nl\"\r\n\r\n        if ($is_python2) {\r\n            Start-Process msiexec.exe -ArgumentList \"/q\", \"/i\", \"$outFile\", \"ALLUSERS=1\" -Wait\r\n        }\r\n        else {\r\n            Start-Process \"$outFile\" -ArgumentList \"/quiet\", \"InstallAllUsers=1\" -Wait\r\n        }\r\n\r\n        Write-Output \"Done$nl\"\r\n    }\r\n    else {\r\n        Write-Output \"Already installed\"\r\n    }\r\n}\r\n```\r\n\r\n#### <a name=\"pipinstallerps1\"></a>PipInstaller.ps1\r\n此脚本调用 pip 并安装 **requirements.txt** 文件中的所有依赖项。 如果 **PYTHON2** 环境变量设置为 **on**，则使用 Python 2.7，否则使用 Python 3.5。\r\n\r\n```powershell\r\n$is_emulated = $env:EMULATED -eq \"true\"\r\n$is_python2 = $env:PYTHON2 -eq \"on\"\r\n$nl = [Environment]::NewLine\r\n\r\nif (-not $is_emulated){\r\n    Write-Output \"Checking if requirements.txt exists$nl\"\r\n    if (Test-Path ..\\requirements.txt) {\r\n        Write-Output \"Found. Processing pip$nl\"\r\n\r\n        if ($is_python2) {\r\n            & \"${env:SystemDrive}\\Python27\\python.exe\" -m pip install -r ..\\requirements.txt\r\n        }\r\n        else {\r\n            py -m pip install -r ..\\requirements.txt\r\n        }\r\n\r\n        Write-Output \"Done$nl\"\r\n    }\r\n    else {\r\n        Write-Output \"Not found$nl\"\r\n    }\r\n}\r\n```\r\n\r\n#### <a name=\"modify-launchworkerps1\"></a>修改 LaunchWorker.ps1\r\n\r\n>[!NOTE]\r\n> 对于**辅助角色**项目，需要 **LauncherWorker.ps1** 文件才能执行启动文件。 在“Web 角色”  项目中，会在项目属性中定义该启动文件。\r\n> \r\n> \r\n\r\n**bin\\LaunchWorker.ps1** 最初是为了执行多种准备工作而创建的，但实际上并不起作用。 将该文件中的内容替换为以下脚本。\r\n\r\n此脚本从 Python 项目调用 **worker.py** 文件。 如果 **PYTHON2** 环境变量设置为 **on**，则使用 Python 2.7，否则使用 Python 3.5。\r\n\r\n```powershell\r\n$is_emulated = $env:EMULATED -eq \"true\"\r\n$is_python2 = $env:PYTHON2 -eq \"on\"\r\n$nl = [Environment]::NewLine\r\n\r\nif (-not $is_emulated)\r\n{\r\n    Write-Output \"Running worker.py$nl\"\r\n\r\n    if ($is_python2) {\r\n        cd..\r\n        iex \"$env:PYPATH\\python.exe worker.py\"\r\n    }\r\n    else {\r\n        cd..\r\n        iex \"py worker.py\"\r\n    }\r\n}\r\nelse\r\n{\r\n    Write-Output \"Running (EMULATED) worker.py$nl\"\r\n\r\n    # Customize to your local dev environment\r\n\r\n    if ($is_python2) {\r\n        cd..\r\n        iex \"$env:PYPATH\\python.exe worker.py\"\r\n    }\r\n    else {\r\n        cd..\r\n        iex \"py worker.py\"\r\n    }\r\n}\r\n```\r\n\r\n#### <a name=\"pscmd\"></a>ps.cmd\r\nVisual Studio 模板应在 **./bin** 文件夹中创建了一个 **ps.cmd** 文件。 此 shell 脚本调用上述 PowerShell 包装脚本，并根据所调用 PowerShell 包装的名称提供日志记录。 如果未创建此文件，请注意，下面是该文件应该包含的内容。 \r\n\r\n```bat\r\n@echo off\r\n\r\ncd /D %~dp0\r\n\r\nif not exist \"%DiagnosticStore%\\LogFiles\" mkdir \"%DiagnosticStore%\\LogFiles\"\r\n%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy Unrestricted -File %* >> \"%DiagnosticStore%\\LogFiles\\%~n1.txt\" 2>> \"%DiagnosticStore%\\LogFiles\\%~n1.err.txt\"\r\n```\r\n\r\n\r\n\r\n## <a name=\"run-locally\"></a>在本地运行\r\n如果将云服务项目设置为启动项目并按 F5，云服务会在本地 Azure 模拟器中运行。\r\n\r\n虽然 PTVS 支持在模拟器中启动，调试（例如断点）将无法工作。\r\n\r\n要调试 Web 角色和辅助角色，可以将角色项目设置为启动项目并对其进行调试。  还可以设置多个启动项目。  右键单击解决方案并选择“设置启动项目”。\r\n\r\n![解决方案启动项目属性](./media/cloud-services-python-ptvs/startup.png)\r\n\r\n## <a name=\"publish-to-azure\"></a>发布到 Azure\r\n\r\n要进行发布，请右键单击解决方案中的云服务项目，并选择“发布”。\r\n\r\n![Microsoft Azure 发布登录](./media/cloud-services-python-ptvs/publish-sign-in.png)\r\n\r\n遵循向导操作。 如果需要，请启用远程桌面。 远程桌面可帮助调试某些功能。\r\n\r\n完成配置设置后，单击 **发布**。\r\n\r\n某些进度会显示在输出窗口中，然后会看到“Microsoft Azure 活动日志”窗口。\r\n\r\n![Microsoft  Azure 活动日志窗口](./media/cloud-services-python-ptvs/publish-activity-log.png)\r\n\r\n部署需要几分钟才能完成，然后 Web 和/或辅助角色会在 Azure 上运行！\r\n\r\n### <a name=\"investigate-logs\"></a>查看日志\r\n云服务虚拟机启动并安装 Python 后，可以查看日志，找出任何失败消息。 这些日志位于 **C:\\Resources\\Directory\\\\{role}\\LogFiles** 文件夹中。 从脚本尝试检测是否已安装 Python 时起，**PrepPython.err.txt** 中至少会包含一个错误，而 **PipInstaller.err.txt** 可能会指出 pip 版本已过时。\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n\r\n有关在 Python Tools for Visual Studio 中使用 Web 角色和辅助角色的更多详细信息，请参阅 PTVS 文档：\r\n\r\n* [云服务项目][Cloud Service Projects]\r\n\r\n有关作为 Web 角色和辅助角色使用 Azure 服务（例如使用 Azure 存储或服务总线）的详细信息，请参阅以下文章：\r\n\r\n- [Blob 服务][]\r\n- [表服务][]\r\n- [队列服务][]\r\n- [Service Bus 队列][]\r\n- [服务总线主题][]\r\n\r\n<!--Link references-->\r\n\r\n[什么是云服务？]: ./cloud-services-choose-me.md\r\n[execution model-web sites]: ../app-service/app-service-web-overview.md\r\n[execution model-vms]:../virtual-machines/windows/overview.md\r\n[execution model-cloud services]: ./cloud-services-choose-me.md\r\n[Python Developer Center]: https://www.azure.cn/develop/python/\r\n\r\n[Blob 服务]: ../storage/blobs/storage-python-how-to-use-blob-storage.md\r\n[队列服务]: ../storage/queues/storage-python-how-to-use-queue-storage.md\r\n[表服务]: ../cosmos-db/table-storage-how-to-use-python.md\r\n[Service Bus 队列]: ../service-bus-messaging/service-bus-python-how-to-use-queues.md\r\n[服务总线主题]: ../service-bus-messaging/service-bus-python-how-to-use-topics-subscriptions.md\r\n\r\n<!--External Link references-->\r\n\r\n[Python Tools for Visual Studio]: http://aka.ms/ptvs\r\n[Python Tools for Visual Studio Documentation]: http://aka.ms/ptvsdocs\r\n[Cloud Service Projects]: http://go.microsoft.com/fwlink/?LinkId=624028\r\n[Azure SDK Tools for VS 2013]: http://go.microsoft.com/fwlink/?LinkId=746482\r\n[Azure SDK Tools for VS 2015]: http://go.microsoft.com/fwlink/?LinkId=746481\r\n[Azure SDK Tools for VS 2017]: http://go.microsoft.com/fwlink/?LinkId=746483\r\n[Python 2.7 32-bit]: https://www.python.org/downloads/\r\n[Python 3.5 32-bit]: https://www.python.org/downloads/\r\n\r\n<!--Update_Description:update meta properties and wording-->"}