{"Title":"如何将 Azure 诊断 (.NET) 用于云服务","Description":"使用 Azure 诊断从 Azure 云服务收集数据，以用于调试、衡量性能、监视和流量分析等目的。","Content":"# <a name=\"enabling-azure-diagnostics-in-azure-cloud-services\"></a>在 Azure 云服务中启用 Azure 诊断\r\n\r\n## 如何在辅助角色中启用诊断\r\n## <a name=\"how-to-enable-diagnostics-in-a-worker-role\"></a>如何在辅助角色中启用诊断\r\n\r\n本演练介绍如何实现使用 .NET EventSource 类发出遥测数据的 Azure 辅助角色。Azure Diagnostics 用于收集遥测数据，并将其存储在一个 Azure 存储帐户中。创建辅助角色时，Visual Studio 将在适用于 .NET 2.4 和更低版本的 Azure SDK 中，自动启用 Diagnostics 1.0 作为解决方案的一部分。以下说明介绍了创建辅助角色、从解决方案禁用 Diagnostics 1.0，以及在辅助角色中部署 Diagnostics 1.2 或 1.3 的过程。\r\n\r\n### <a name=\"prerequisites\"></a>先决条件\r\n本文假定你具有 Azure 订阅，并要将 Visual Studio 与 Azure SDK 配合使用。 如果你没有 Azure 订阅，你可以注册 [试用版][试用版]。 请确保[安装并配置 Azure PowerShell 0.8.7 版或更高版本][]。\r\n\r\n### <a name=\"step-1-create-a-worker-role\"></a>步骤 1：创建辅助角色\r\n1. 启动 **Visual Studio**。\r\n2. 从面向 .NET Framework 4.5 的“云”模板创建一个“Azure 云服务”项目。  将该项目命名为“WadExample”。\r\n3. 选择“辅助角色”并单击“确定”  。 随后将创建该项目。\r\n4. 在“解决方案资源管理器”中，双击 WorkerRole1 属性文件。\r\n5. 在“配置”选项卡中，取消选中“启用诊断”以禁用 Diagnostics 1.0（Azure SDK 2.4 和更低版本）。\r\n6. 生成解决方案以验证无误。\r\n\r\n### <a name=\"step-2-instrument-your-code\"></a>步骤 2：检测代码\r\n将 WorkerRole.cs 的内容替换为以下代码。 继承自 [EventSource 类][EventSource Class]的 SampleEventSourceWriter 类实现四个日志记录方法：SendEnums、MessageMethod、SetOther 和 HighFreq。 **WriteEvent** 方法的第一个参数定义相关事件的 ID。 Run 方法实现一个无限循环，该循环每隔 10 秒调用 **SampleEventSourceWriter** 类中实现的每个日志记录方法。\r\n\r\n```csharp\r\nusing Microsoft.WindowsAzure.ServiceRuntime;\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Diagnostics.Tracing;\r\nusing System.Net;\r\nusing System.Threading;\r\n\r\nnamespace WorkerRole1\r\n{\r\nsealed class SampleEventSourceWriter : EventSource\r\n{\r\n    public static SampleEventSourceWriter Log = new SampleEventSourceWriter();\r\n    public void SendEnums(MyColor color, MyFlags flags) { if (IsEnabled())  WriteEvent(1, (int)color, (int)flags); }// Cast enums to int for efficient logging.\r\n    public void MessageMethod(string Message) { if (IsEnabled())  WriteEvent(2, Message); }\r\n    public void SetOther(bool flag, int myInt) { if (IsEnabled())  WriteEvent(3, flag, myInt); }\r\n    public void HighFreq(int value) { if (IsEnabled()) WriteEvent(4, value); }\r\n\r\n}\r\n\r\nenum MyColor\r\n{\r\n    Red,\r\n    Blue,\r\n    Green\r\n}\r\n\r\n[Flags]\r\nenum MyFlags\r\n{\r\n    Flag1 = 1,\r\n    Flag2 = 2,\r\n    Flag3 = 4\r\n}\r\n\r\npublic class WorkerRole : RoleEntryPoint\r\n{\r\n    public override void Run()\r\n    {\r\n        // This is a sample worker implementation. Replace with your logic.\r\n        Trace.TraceInformation(\"WorkerRole1 entry point called\");\r\n\r\n        int value = 0;\r\n\r\n        while (true)\r\n        {\r\n            Thread.Sleep(10000);\r\n            Trace.TraceInformation(\"Working\");\r\n\r\n            // Emit several events every time we go through the loop\r\n            for (int i = 0; i < 6; i++)\r\n            {\r\n                SampleEventSourceWriter.Log.SendEnums(MyColor.Blue, MyFlags.Flag2 | MyFlags.Flag3);\r\n            }\r\n\r\n            for (int i = 0; i < 3; i++)\r\n            {\r\n                SampleEventSourceWriter.Log.MessageMethod(\"This is a message.\");\r\n                SampleEventSourceWriter.Log.SetOther(true, 123456789);\r\n            }\r\n\r\n            if (value == int.MaxValue) value = 0;\r\n            SampleEventSourceWriter.Log.HighFreq(value++);\r\n        }\r\n    }\r\n\r\n    public override bool OnStart()\r\n    {\r\n        // Set the maximum number of concurrent connections\r\n        ServicePointManager.DefaultConnectionLimit = 12;\r\n\r\n        // For information on handling configuration changes\r\n        // see the MSDN topic at http://go.microsoft.com/fwlink/?LinkId=166357.\r\n\r\n        return base.OnStart();\r\n    }\r\n}\r\n}\r\n```\r\n\r\n### <a name=\"step-3-deploy-your-worker-role\"></a>步骤 3：部署辅助角色\r\n\r\n[!INCLUDE [cloud-services-wad-warning](../../includes/cloud-services-wad-warning.md)]\r\n1. 通过选择解决方案资源管理器中的 WadExample 项目，然后在“生成”菜单中选择“发布”，在 Visual Studio 中将辅助角色部署到 Azure。\r\n2. 选择你的订阅。\r\n3. 在“Azure 发布设置”对话框中，选择“新建...”。\r\n4. 在“创建云服务和存储帐户”对话框中输入一个“名称”（例如“WadExample”），然后选择区域或地缘组。\r\n5. 将“环境”设置为“暂存”。\r\n6. 适当地修改任何其他设置，然后单击“发布”。\r\n7. 完成部署后，在 Azure 门户中验证云服务是否处于“正在运行”状态。\r\n\r\n### <a name=\"step-4-create-your-diagnostics-configuration-file-and-install-the-extension\"></a>步骤 4：创建 Diagnostics 配置文件并安装扩展\r\n1. 通过执行以下 PowerShell 命令下载公共配置文件架构定义：\r\n\r\n    ```powershell\r\n    (Get-AzureServiceAvailableExtension -ExtensionName 'PaaSDiagnostics' -ProviderNamespace 'Microsoft.Azure.Diagnostics').PublicConfigurationSchema | Out-File -Encoding utf8 -FilePath 'WadConfig.xsd'\r\n    ```\r\n2. 通过右键单击 WorkerRole1 项目并选择“添加” -> “新建项...”，将 XML 文件添加到 WorkerRole1 项目中 -> “Visual C# 项” -> “数据” -> “XML 文件”。 将该文件命名为“WadExample.xml”。\r\n\r\n   ![CloudServices_diag_add_xml](./media/cloud-services-dotnet-diagnostics/AddXmlFile.png)\r\n3. 将 WadConfig.xsd 与配置文件相关联。 确保 WadExample.xml 编辑器窗口是活动的窗口。 按 **F4** 打开“属性”窗口。 在“属性”窗口中单击“架构”属性。 在“架构”属性中 单击“...”。 在“架构”属性中单击“...”  。 单击“确定” 。\r\n\r\n4. 将 WadExample.xml 配置文件的内容替换为以下 XML 并保存该文件。 此配置文件定义两个要收集的性能计数器：一个对应于 CPU 使用率，另一个对应于内存使用率。 配置将定义对应于 SampleEventSourceWriter 类中方法的四个事件。\r\n\r\n    ```xml\r\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <PublicConfig xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\">\r\n          <WadCfg>\r\n            <DiagnosticMonitorConfiguration overallQuotaInMB=\"25000\">\r\n              <PerformanceCounters scheduledTransferPeriod=\"PT1M\">\r\n                <PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT1M\" unit=\"percent\" />\r\n                <PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT1M\" unit=\"bytes\"/>\r\n                  </PerformanceCounters>\r\n                  <EtwProviders>\r\n                    <EtwEventSourceProviderConfiguration provider=\"SampleEventSourceWriter\" scheduledTransferPeriod=\"PT5M\">\r\n                          <Event id=\"1\" eventDestination=\"EnumsTable\"/>\r\n                          <Event id=\"2\" eventDestination=\"MessageTable\"/>\r\n                          <Event id=\"3\" eventDestination=\"SetOtherTable\"/>\r\n                          <Event id=\"4\" eventDestination=\"HighFreqTable\"/>\r\n                          <DefaultEvents eventDestination=\"DefaultTable\" />\r\n                    </EtwEventSourceProviderConfiguration>\r\n                  </EtwProviders>\r\n            </DiagnosticMonitorConfiguration>\r\n          </WadCfg>\r\n    </PublicConfig>\r\n    ```\r\n\r\n### <a name=\"step-5-install-diagnostics-on-your-worker-role\"></a>步骤 5：在辅助角色上安装 Diagnostics\r\n用于在 Web 或辅助角色上管理 Diagnostics 的 PowerShell cmdlet 为：\r\n\r\n```\r\nSet-AzureServiceDiagnosticsExtension、Get-AzureServiceDiagnosticsExtension 和 Remove-AzureServiceDiagnosticsExtension。\r\n```\r\n\r\n1. 打开 Azure PowerShell。\r\n2. 执行脚本以在辅助角色上安装 Diagnostics（将 *StorageAccountKey* 替换为 wadexample 存储帐户的存储帐户密钥，并将 *config_path* 替换为 *WadExample.xml* 文件的路径）：\r\n\r\n    ```powershell\r\n    $storage_name = \"wadexample\"\r\n    $key = \"<StorageAccountKey>\"\r\n    $config_path=\"c:\\users<user>\\documents\\visual studio 2013\\Projects\\WadExample\\WorkerRole1\\WadExample.xml\"\r\n    $service_name=\"wadexample\"\r\n    $storageContext = New-AzureStorageContext -Environment AzureChinaCloud -StorageAccountName $storage_name -StorageAccountKey $key \r\n    Set-AzureServiceDiagnosticsExtension -StorageContext $storageContext -DiagnosticsConfigurationPath $config_path -ServiceName $service_name -Slot Staging -Role WorkerRole1\r\n    ```\r\n\r\n### <a name=\"step-6-look-at-your-telemetry-data\"></a>步骤 6：查看遥测数据\r\n在 Visual Studio 的“服务器资源管理器”中，导航到 wadexample 存储帐户。 在云服务运行约 5 分钟后，应该会看到表 WADEnumsTable、WADHighFreqTable、WADMessageTable、WADPerformanceCountersTable 和 WADSetOtherTable。 双击其中一个表即可查看已收集的遥测数据。\r\n\r\n![CloudServices_diag_tables](./media/cloud-services-dotnet-diagnostics/WadExampleTables.png)\r\n\r\n## <a name=\"configuration-file-schema\"></a>配置文件架构\r\n\r\n诊断配置文件定义启动诊断代理时用于初始化诊断配置设置的值。有关有效值和示例，请参阅[最新架构参考](https://msdn.microsoft.com/zh-cn/library/azure/mt634524.aspx)。\r\n\r\n[EventSource Class]: http://msdn.microsoft.com/zh-cn/library/system.diagnostics.tracing.eventsource(v=vs.110).aspx\r\n\r\n[Debugging an Azure Application]: http://msdn.microsoft.com/zh-cn/library/windowsazure/ee405479.aspx\r\n[Collect Logging Data by Using Azure Diagnostics]: http://msdn.microsoft.com/zh-cn/library/windowsazure/gg433048.aspx\r\n[试用版]: https://www.azure.cn/pricing/1rmb-trial/\r\n[安装和配置 Azure PowerShell 0.8.7 或更高版本]:  ../powershell-install-configure.md\r\n\r\n<!---HONumber=Mooncake_0320_2017-->\r\n<!--Update_Description:update meta properties and wording-->"}