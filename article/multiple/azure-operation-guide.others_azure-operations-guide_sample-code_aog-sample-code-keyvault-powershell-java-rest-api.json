{"Title":"密钥保管库 Java 代码示例","Description":"密钥保管库 Java 代码示例","Content":"\r\n# 密钥保管库 Java 代码示例\r\n\r\nAzure 密钥保管库使得用户能够保护和控制云应用程序和服务使用的加密密钥和其他机密，开发者也可以很方便安全的利用 .NET 和 Node.js SDK 来从密钥保管库里获取到机密信息。那么对于 Java，在 SDK 还没有发布的情况下，该如何使用密钥保管库呢？这片文章就提供一个简单示例。包括以下内容：\r\n\r\n1. PowerShell 脚本创建密钥保管库并添加 Azure 存储连接字符串作为机密信息。\r\n2. 利用 ADAL4J 库来获取访问密钥保管库的令牌（Token）。\r\n3. 使用令牌去访问密钥保管库并获取 Azure 存储连接字符串，从而连接上 Azure 存储。\r\n\r\n## 创建密钥保管库\r\n\r\n此 PowerShell 脚本会去创建密钥保管库，然后将 Azure 存储连接字符串存入，最后注册当前示例应用并授予获取权限，最终打印出后面程序需要用到的信息。\r\n\r\n```\r\n# TODO: update below settings based on your environment\r\n$subscriptionId = \"\"\r\n$keyVaultName = \"\"\r\n$keyVaultResourceGroupName = \"\"\r\n$location = \"\" # China East, China North\r\n$appName = \"\"\r\n$appKey = \"\" # password you want to set\r\n$appUri = \"\" # such as http://localhost:7880\r\n$secretName = \"\" # secret name you want to save\r\n$stConnStr = \"\" # secret you want to save\r\n\r\nLogin-AzureRmAccount -EnvironmentName AzureChinaCloud\r\n\r\n# In case the account has multiple subscription, make sure the expected subscription is selected\r\n$selectedSub = Select-AzureRmSubscription -SubscriptionId $subscriptionId\r\n$tenantId = $selectedSub.Tenant.TenantId\r\n\r\nNew-AzureRmResourceGroup -Name $keyVaultResourceGroupName -Location $location\r\n\r\n# If you see the error The subscription is not registered to use namespace 'Microsoft.KeyVault' when you try to create your new key vault\r\n# Run Register-AzureRmResourceProvider -ProviderNamespace \"Microsoft.KeyVault, and then rerun your New-AzureRmKeyVault command\r\nNew-AzureRmKeyVault -VaultName $keyVaultName -ResourceGroupName $keyVaultResourceGroupName -Location $location\r\n\r\n$secretValue = ConvertTo-SecureString $stConnStr -AsPlainText -Force\r\n$stConnStrSecret = Set-AzureKeyVaultSecret -VaultName $keyVaultName -Name $secretName -SecretValue $secretValue\r\n\r\n# Register your app to Azure AD now\r\n# And get its client id and client key\r\n$app = New-AzureRmADApplication -DisplayName $appName -HomePage $appUri -IdentifierUris $appUri -Password $appKey\r\n$appSP = New-AzureRmADServicePrincipal -ApplicationId $app.ApplicationId\r\n\r\n# Authorize the app to use the secret\r\nSet-AzureRmKeyVaultAccessPolicy -VaultName $keyVaultName -ServicePrincipalName $appSP.ApplicationId -PermissionsToSecrets get\r\n\r\nWrite-Host (\"Target tenant ID is: {0}\" -f $tenantId)\r\nWrite-Host (\"Storage connection string key vault URI: {0}\" -f $stConnStrSecret.Id)\r\nWrite-Host (\"App Client Id is: {0}\" -f $appSP.ApplicationId)\r\nWrite-Host (\"App Client Key is: {0}\" -f $appKey) \r\n```\r\n\r\n## 获取密钥保管库令牌\r\n\r\n利用 ADAL4J Java，基于上一步获取到的 `ClientId` 和 `ClientKey`，获取拥有 get 权限的访问令牌。\r\n\r\n```\r\n<!-- https://mvnrepository.com/artifact/com.microsoft.azure/adal4j -->\r\n<dependency>\r\n    <groupId>com.microsoft.azure</groupId>\r\n    <artifactId>adal4j</artifactId>\r\n    <version>1.2.0</version>\r\n</dependency>\r\n\r\nprivate static AuthenticationResult getAccessTokenFromClientCredentials(String tenantId, String clientId, String clientKey) throws Exception {\r\n        String authority = \"https://login.chinacloudapi.cn/\" + tenantId;\r\n        AuthenticationContext context = null;\r\n        AuthenticationResult result = null;\r\n        ExecutorService service = null;\r\n        ClientCredential clientCredential = null;\r\n        try {\r\n            service = Executors.newFixedThreadPool(1);\r\n            context = new AuthenticationContext(authority, false, service);\r\n            clientCredential = new ClientCredential(clientId, clientKey);\r\n            Future<AuthenticationResult> future = context.acquireToken(RESOURCE, clientCredential, null);\r\n            result = future.get();\r\n        }\r\n        catch (Exception ex) {\r\n            System.out.println(\"Something wrong - \" + ex.getMessage());\r\n        }\r\n        finally {\r\n            service.shutdown();\r\n        }\r\n\r\n        if (result == null) {\r\n            throw new ServiceUnavailableException(\"authentication result was null\");\r\n        }\r\n        return result;\r\n}\r\n```\r\n\r\n## 通过 REST API 获取机密\r\n\r\n调用密钥保管库的 REST API，传入上一步获取到的令牌，就可以拿到前面存入的 Azure 存储连接字符串。\r\n\r\n```\r\nprivate static String GetSecretFromKeyVault(String keyVaultUrl, String accessToken)\r\n{\r\n        HttpClient httpclient = HttpClients.createDefault();\r\n\r\n        try {\r\n            URIBuilder builder = new URIBuilder(keyVaultUrl);\r\n            builder.setParameter(\"api-version\", \"2016-10-01\");\r\n            URI uri = builder.build();\r\n\r\n            HttpGet request = new HttpGet(uri);\r\n            request.setHeader(\"Content-Type\", \"application/json\");\r\n            request.setHeader(\"Authorization\", \"Bearer \" + accessToken);\r\n\r\n            HttpResponse response = httpclient.execute(request);\r\n            HttpEntity entity = response.getEntity();\r\n\r\n            if (entity != null) {\r\n                String secretInJson = EntityUtils.toString(entity);\r\n                JSONObject secretObj = new JSONObject(secretInJson);\r\n                return secretObj.getString(\"value\");\r\n            }\r\n\r\n            return \"\";\r\n        } catch (Exception e) {\r\n            System.out.println(e.getMessage());\r\n            return \"\";\r\n        }\r\n}\r\n```\r\n\r\n完整代码示例：\r\n\r\n- PowerShell 脚本：[https://github.com/wacn/AOG-CodeSample/blob/master/KeyVault/KeyVaultDemo.ps1](https://github.com/wacn/AOG-CodeSample/blob/master/KeyVault/KeyVaultDemo.ps1)\r\n- Java 程序：[https://github.com/wacn/AOG-CodeSample/tree/master/KeyVault/Java/key-vault-native-demo-java](https://github.com/wacn/AOG-CodeSample/tree/master/KeyVault/Java/key-vault-native-demo-java)"}