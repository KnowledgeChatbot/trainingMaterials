{"Title":"Azure 服务总线中继消息 REST 代码示例","Description":"Azure 服务总线中继消息 REST 代码示例","Content":"\r\n# Azure 服务总线中继消息 REST 代码示例\r\n\r\n本示例代码演示如何生成简单的服务总线主机应用程序来公开基于 REST 的接口，使得 on-premises 应用能被外部网络通过 HTTP 进行访问，并要求客户端必须提供正确 Token 以提高安全性。\r\n\r\n本示例代码使用 Windows Communication Foundation (WCF) REST 编程模型在服务总线上构建 REST 服务。有关详细信息，请参阅 WCF 文档中的 [WCF REST 编程模型](https://msdn.microsoft.com/zh-cn/library/bb412169.aspx)和[设计和实现服务](https://msdn.microsoft.com/zh-cn/library/ms729746.aspx)。\r\n\r\n## 服务端\r\n\r\n### On-premises WCF REST 服务\r\n\r\n简单的定义一个获取随机字符串的 WCF REST 服务。\r\n\r\n    [ServiceContract]\r\n    public interface IDataService\r\n    {\r\n        [OperationContract, WebGet(ResponseFormat = WebMessageFormat.Json)]\r\n        string GetRandomString();\r\n    }\r\n    public class DataService : IDataService\r\n    {\r\n        const string CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n        const int LENGTH = 10;\r\n\r\n        public string GetRandomString()\r\n        {\r\n            var random = new Random();\r\n            return new string(Enumerable.Repeat(CHARS, LENGTH).Select(s => s[random.Next(s.Length)]).ToArray());\r\n        }\r\n    }\r\n\r\n### 服务总线中继服务\r\n\r\n这里将通过配置文件的方式来托管服务，也就是将前面创建的服务用服务总线中继出去。\r\n\r\n    // TODO: Update the values\r\n    var serviceBusNamespace = \"your service bus namespace\";\r\n    var relayServicePath = \"data\"; // you can define your own value\r\n\r\n    // For China Azure\r\n    var dataSvcUriString = $\"https://{serviceBusNamespace}.servicebus.chinacloudapi.cn/{relayServicePath}\";\r\n\r\n    var webServiceHost = new WebServiceHost(typeof(DataService), new Uri(dataSvcUriString));\r\n    webServiceHost.Open();\r\n\r\n    Console.WriteLine(\"Invoke service via Service Bus Relay with following request (require sas token): \");\r\n    Console.WriteLine($\"{dataSvcUriString}/GetRandomString\");\r\n    Console.WriteLine();\r\n    Console.WriteLine(\"Press [Enter] to exit\");\r\n    Console.ReadLine();\r\n\r\n    webServiceHost.Close();\r\n\r\n### 配置文件\r\n\r\n其中 webHttpRelayBinding 的 security 设置成 relayClientAuthenticationType=\"RelayAccessToken\"，这样就要求客户端提供正确 Token 才能进行访问。\r\n\r\n    <system.serviceModel>\r\n    <bindings>\r\n        <webHttpRelayBinding>\r\n        <binding name=\"default\">\r\n            <security relayClientAuthenticationType=\"RelayAccessToken\"/>\r\n        </binding>\r\n        </webHttpRelayBinding>\r\n    </bindings>\r\n    <behaviors>\r\n    <endpointBehaviors>\r\n        <behavior name=\"sbTokenProvider\">\r\n        <transportClientEndpointBehavior>\r\n            <tokenProvider>\r\n            <sharedAccessSignature keyName=\"service bus key name\" key=\"your key\" />\r\n            </tokenProvider>\r\n        </transportClientEndpointBehavior>\r\n        </behavior>\r\n    </endpointBehaviors>\r\n    </behaviors>\r\n    <services>\r\n        <service name=\"Service.DataService\">\r\n        <endpoint name=\"sbRelayEndpoint\"\r\n                    address=\"\"\r\n                    binding=\"webHttpRelayBinding\"\r\n                    bindingConfiguration=\"default\"\r\n                    behaviorConfiguration=\"sbTokenProvider\"\r\n                    contract=\"Service.IDataService\" />\r\n        </service>\r\n    </services>\r\n    <extensions>\r\n        <!—Install Microsoft Service Bus NuGet package will automatically add needed all extensions -->\r\n        ……\r\n    </extensions>\r\n    </system.serviceModel>\r\n\r\n## 客户端\r\n\r\n客户端使用一个简单 ASP.NET MVC 程序并发布到 Azure Web App。\r\n\r\n### 生成服务总线的 Token\r\n\r\n    private string createToken(string resourceUri, string keyName, string key)\r\n    {\r\n        TimeSpan sinceEpoch = DateTime.UtcNow - new DateTime(1970, 1, 1);\r\n        var week = 60 * 60 * 24 * 7;\r\n        var expiry = Convert.ToString((int)sinceEpoch.TotalSeconds + week);\r\n        string stringToSign = HttpUtility.UrlEncode(resourceUri) + \"\\n\" + expiry;\r\n        HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key));\r\n        var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));\r\n        var sasToken = String.Format(CultureInfo.InvariantCulture,\r\n            \"SharedAccessSignature sr={0}&sig={1}&se={2}&skn={3}\",\r\n            HttpUtility.UrlEncode(resourceUri),\r\n            HttpUtility.UrlEncode(signature),\r\n            expiry,\r\n            keyName);\r\n        return sasToken;\r\n    }\r\n\r\n## 添加 Token 作为头部\r\n\r\n使用 HttpClient 调用通过服务总线中继出来的服务，并添加生成的 Token 作为头部。\r\n\r\n    public ActionResult Index()\r\n    {\r\n        // TODO: update the values\r\n        var serviceBusNamespace = \"your service bus namespace\";\r\n        var relayServicePath = \"data\"; // you can define your own value\r\n        var keyName = \"your service bus key name\";\r\n        var key = \"your service bus key value\";\r\n\r\n        var resourceUriString = $\"https://{serviceBusNamespace}.servicebus.chinacloudapi.cn/{relayServicePath}\";\r\n        var token = createToken(resourceUriString, keyName, key);\r\n\r\n        try\r\n        {\r\n            using (var httpClient = new HttpClient())\r\n            {\r\n                httpClient.DefaultRequestHeaders.Add(\"Authorization\", token);\r\n\r\n                var requestUri = $\"{resourceUriString}/GetRandomString\";\r\n\r\n                using (var response = httpClient.GetAsync(requestUri).Result)\r\n                {\r\n                    response.EnsureSuccessStatusCode();\r\n                    var result = response.Content.ReadAsStringAsync().Result;\r\n                    ViewBag.Message = result;\r\n                }\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            ViewBag.Message = $\"Exception happened: {ex.Message}\";\r\n        }\r\n\r\n    return View();\r\n    }\r\n\r\n[AZURE.NOTE]直接把服务总线的 Key 提供在客户端是不安全的，可以另外提供一个专门生成 Token 的服务，这样客户端就可以需要的时候就从那个服务获取 Token，而不是直接拿到 Key 自己生成。\r\n\r\n## 运行结果\r\n\r\n### 服务端启动\r\n\r\n![service](./media/aog-sample-code-service-bus-relay-rest-api/service.png)\r\n\r\n### 客户端调用\r\n\r\n![client](./media/aog-sample-code-service-bus-relay-rest-api/client.png)\r\n\r\n## 示例代码\r\n\r\n[WcfRelayDemo.WebApi](https://github.com/wacn/AOG-CodeSample/tree/master/ServiceBus/CSharp/WcfRelayDemo.WebApi)"}