{"Title":"C# 获取虚拟机监控数据","Description":"如何通过 C# 获取虚拟机监控数据","Content":"\r\n# C# 获取虚拟机监控数据\r\n\r\n## **问题描述**\r\n\r\n需要通过本地程序获取 Azure 虚拟机的监控数据并保存成文件时，可以通过接口获取该种数据，然而我们最多只能获取 30 天内的监控数据。\r\n\r\n## **前提条件**\r\n\r\n- 下载[订阅文件](https://manage.windowsazure.cn/publishsettings/)\r\n\r\n- 安装 VS2015\r\n\r\n## **解决方法**\r\n\r\n引用如下命名空间\r\n\r\n```\r\nusing System;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing System.Configuration;\r\nusing Microsoft.WindowsAzure.Storage;\r\nusing Microsoft.WindowsAzure.Storage.Blob;\r\nusing System.Net;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing System.Xml.Linq;\r\nusing System.Security.Cryptography.X509Certificates;\r\nusing Microsoft.WindowsAzure.Management;\r\nusing Microsoft.WindowsAzure.Management.Compute;\r\nusing Microsoft.WindowsAzure.Management.Compute.Models;\r\nusing Microsoft.WindowsAzure.Management.Monitoring.Metrics;\r\nusing Microsoft.WindowsAzure.Management.Monitoring.Utilities;\r\nusing Microsoft.WindowsAzure.Management.Scheduler;\r\nusing Microsoft.Azure;\r\nusing Microsoft.WindowsAzure;\r\nusing Microsoft.WindowsAzure.Management.Monitoring.Metrics.Models;\r\nusing System.IO;\r\n\r\n//需要将如下代码改为自己的真实信息\r\nstring subscriptionId = \"\";\r\nstring cloudServiceName = \"\";\r\nstring deploymentName = \"\";\r\nstring vmName = \"\";\r\n\r\n//加载下载的订阅文件\r\nXElement xElement = XElement.Load(System.AppDomain.CurrentDomain.BaseDirectory + \"订阅文件\");\r\nvar subscriptionElements = xElement.Descendants(\"Subscription\");\r\nvar base64cer = subscriptionElements.Where(e => e.Attribute(\"Id\").Value.ToString() == subscriptionId).FirstOrDefault().Attribute(\"ManagementCertificate\").Value.ToString();\r\n\r\nX509Certificate2 certificateStore = new X509Certificate2(Convert.FromBase64String(base64cer));\r\nMicrosoft.WindowsAzure.SubscriptionCloudCredentials credential = new Microsoft.WindowsAzure.CertificateCloudCredentials(subscriptionId, certificateStore);\r\nUri baseUri = new Uri(\"https://management.core.chinacloudapi.cn/\");\r\n\r\nMetricsClient metricsClient = new MetricsClient(credential, baseUri);\r\n\r\nstring cloudServiceResourceId = ResourceIdBuilder.BuildVirtualMachineResourceId(cloudServiceName, deploymentName, vmName);\r\n// Metric names\r\nList<string> metricNames = new List<string>() { \"Network Out\", \"Disk Read Bytes/sec\", \"Disk Write Bytes/sec\", \"Percentage CPU\", \"Network In\" };\r\nTimeSpan timeGrain = TimeSpan.FromHours(1);\r\nDateTime timeBegin = DateTime.Now.AddDays(-30);\r\nDateTime time2Start = DateTime.Parse(timeBegin.ToString(\"yyyy-MM-dd\") + \" 00:00:00\");\r\nDateTime time2Stop = DateTime.Parse(timeBegin.ToString(\"yyyy-MM-dd\") + \" 23:59:59\");\r\nint rate = (DateTime.Now - time2Start).Days / 13 + 1;\r\nint addition = (DateTime.Now - time2Start).Days % 13;\r\nint num1, num2;\r\nstring json = null;\r\nfor (int i = 0; i < rate; i++)\r\n{\r\n    num1 = i * 13;\r\n\r\n    if (i == rate - 1)\r\n    {\r\n        num2 = i * 13 + addition;\r\n    }\r\n    else\r\n    {\r\n        num2 = (i + 1) * 13;\r\n    }\r\n    DateTime startTime = time2Start.AddDays(num1);\r\n    DateTime endTime = time2Stop.AddDays(num2);\r\n\r\n    MetricValueListResponse response = metricsClient.MetricValues.List(cloudServiceResourceId, metricNames, String.Empty, timeGrain, startTime, endTime);\r\n\r\n    foreach (MetricValueSet value in response.MetricValueSetCollection.Value)\r\n    {\r\n        String valueName = value.Name;\r\n        Console.WriteLine(\"------------------------Metric: {0}------------------------\", valueName);\r\n        foreach (MetricValue metricValue in value.MetricValues)\r\n        {\r\n            json += value.Name + \",\" + metricValue.Timestamp.AddHours(8) + \",\" + metricValue.Average + \",\" + metricValue.Count + \",\" + metricValue.Maximum + \",\" + metricValue.Minimum + \",\" + metricValue.Total + \"\\r\\n\";\r\n        }\r\n    }\r\n}\r\nFileStream aFile = new FileStream(AppDomain.CurrentDomain.BaseDirectory + ConfigurationManager.AppSettings[\"VmTracePath\"] + cloudServiceName + \"_\" + deploymentName + \"_\" + vmName + \"_\" + timeBegin.ToString(\"yyyy-MM-dd\") + \"~\" + DateTime.Now.ToString(\"yyyy-MM-dd\") + \".CSV\", FileMode.OpenOrCreate);\r\nStreamWriter sw = new StreamWriter(aFile, Encoding.GetEncoding(\"GB2312\"));\r\nsw.Write(json);\r\nsw.Close();\r\n```\r\n\r\n## **测试结果**\r\n\r\n执行程序，在 Debug 文件夹下会看到获取监控信息所写入的文件，名称如下：\r\n\r\n![excel-name](./media/aog-sample-code-fa-csharp-fetch-vm-monitor-data/excel-name.png)\r\n![excel-data](./media/aog-sample-code-fa-csharp-fetch-vm-monitor-data/excel-data.png)"}