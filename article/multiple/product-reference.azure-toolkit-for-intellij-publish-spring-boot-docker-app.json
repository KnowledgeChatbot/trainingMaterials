{"Title":"使用用于 IntelliJ 的 Azure 工具包将 Spring Boot 应用作为 Docker 容器发布","Description":"了解如何使用用于 IntelliJ 的 Azure 工具包将 Web 应用作为 Docker 容器发布到 Azure。","Content":"# <a name=\"publish-a-spring-boot-app-as-a-docker-container-by-using-the-azure-toolkit-for-intellij\"></a>使用用于 IntelliJ 的 Azure 工具包将 Spring Boot 应用作为 Docker 容器发布\r\n\r\n[Spring Framework] 是一种开放源代码解决方案，可帮助 Java 开发人员创建企业级应用程序。 基于该平台构建的其中一个更常用的项目是 [Spring Boot]，该项目提供了简化的方法来创建独立的 Java 应用程序。\r\n\r\n[Docker] 是一种开放源代码解决方案，可帮助开发人员自动部署、扩展和管理在容器中运行的应用程序。\r\n\r\n本教程介绍使用用于 IntelliJ 的 Azure 工具包将 Spring Boot 应用程序作为 Docker 容器部署到 Azure 的步骤。\r\n\r\n[!INCLUDE [azure-toolkit-for-intellij-prerequisites](../includes/azure-toolkit-for-intellij-prerequisites.md)]\r\n\r\n## <a name=\"clone-the-default-spring-boot-docker-repo\"></a>克隆默认 Spring Boot Docker 存储库\r\n\r\n以下步骤介绍如何使用 IntelliJ 克隆 Spring Boot Docker 存储库。 \r\n\r\n1. 打开 IntelliJ。\r\n\r\n1. 在欢迎屏幕上，选择“从版本控制中签出”列表中的“GitHub”选项。\r\n\r\n   ![用于版本控制的 GitHub 选项][CL01]\r\n\r\n1. 如果系统提示登录，请输入凭据。\r\n\r\n   - 如果使用用户名/密码登录到 GitHub：\r\n\r\n      ![用于输入 GitHub 用户名和密码的对话框][CL02a]\r\n\r\n   - 如果使用令牌登录到 GitHub：\r\n\r\n      ![用于输入 GitHub 令牌的对话框][CL02b]\r\n\r\n1. 针对存储库 URL 输入 https://github.com/spring-guides/gs-spring-boot-docker.git，指定本地路径和文件夹信息，然后单击“克隆”。\r\n\r\n   ![“克隆存储库”对话框][CL03]\r\n\r\n1. 当系统提示创建 IntelliJ 项目时，选择“否”。\r\n\r\n   ![拒绝创建 IntelliJ 项目][CL04]\r\n\r\n1. 在欢迎屏幕上，单击“导入项目”。\r\n\r\n   ![导入项目选择][CL05]\r\n\r\n1. 找到克隆了 Spring Boot 存储库的路径，选择根路径下的“complete”文件夹，然后单击“确定”。\r\n\r\n   ![选择用于导入的文件夹][CL06]\r\n\r\n1. 出现提示时，选择“从现有源创建项目”。\r\n\r\n   ![从现有源创建项目的选项][CL07]\r\n\r\n1. 指定项目名称或接受默认设置，确认“complete”文件夹的路径正确无误，然后单击“下一步”。\r\n\r\n   ![指定项目名称][CL08]\r\n\r\n1. 自定义任何用于导入的目录，然后单击“Next”（下一步）。\r\n\r\n   ![选择目录][CL09]\r\n\r\n1. 查看要导入的库，然后单击“Next”（下一步）。\r\n\r\n   ![查看项目库][CL10]\r\n\r\n1. 查看模块结构，然后单击“Next”（下一步）。\r\n\r\n   ![查看模块结构][CL11]\r\n\r\n1. 指定 JDK，然后单击“Next”（下一步）。\r\n\r\n   ![指定 JDK][CL12]\r\n\r\n1. 单击“完成” 。\r\n\r\n   ![“完成”按钮][CL13]\r\n\r\nIntelliJ 会将 Spring Boot 应用作为项目导入，并在导入完成后显示结构。\r\n\r\n![IntelliJ 中的 Spring Boot 应用][CL14]\r\n\r\n## <a name=\"build-your-spring-boot-app\"></a>生成 Spring Boot 应用\r\n\r\n### <a name=\"build-the-app-by-using-the-maven-pom\"></a>使用 Maven POM 生成应用\r\n\r\n1. 如果尚未打开 Maven 工具窗口，请打开它。 单击“视图” > “工具窗口” > “Maven 项目”。\r\n\r\n   ![工具窗口和 Maven 项目命令][BU01]\r\n\r\n1. 在 Maven 工具窗口中，右键单击“程序包”，然后选择“运行 Maven 生成”。 （如果 Maven 项目未自动显示，请单击 Maven 工具栏上的“重新导入”图标。）\r\n\r\n   ![运行 Maven 生成][BU02]\r\n\r\n1. 成功创建了 Spring Boot 应用后，IntelliJ 应显示“生成成功”消息。\r\n\r\n   ![生成成功消息][BU03]\r\n\r\n### <a name=\"create-a-deployment-ready-artifact\"></a>创建随时可用于部署的项目\r\n\r\n若要发布 Spring Boot 应用，需要创建一个随时可用于部署的项目。 使用以下步骤：\r\n\r\n1. 在 IntelliJ 中打开 Web 应用项目。\r\n\r\n1. 单击“文件”，然后单击“项目结构”。\r\n\r\n   ![“项目结构”命令][ART01]\r\n\r\n1. 单击绿色加号（“+”）符号添加项目，然后依次单击“JAR”、“空”。\r\n\r\n   ![添加项目][ART02]\r\n\r\n1. 在确保不添加“.jar”扩展名的同时命名你的项目，然后指定 Maven 输出的目标文件夹。\r\n\r\n   ![指定项目属性][ART03]\r\n\r\n1. 创建项目清单（可选）：\r\n\r\n   a. 单击“Create Manifest”（创建清单）。\r\n\r\n      ![单击“创建清单”按钮][ART04a]\r\n\r\n   b. 选择项目的默认路径，然后单击“OK”（确定）。\r\n\r\n      ![指定项目路径][ART04b]\r\n\r\n   c. 单击省略号“...”找到主类。\r\n\r\n      ![找到主类][ART04c]\r\n\r\n   d.单击“下一步”。 选择主类，然后单击“OK”（确定）。\r\n\r\n      ![指定主类][ART04d]\r\n\r\n1. 单击 **“确定”**。\r\n\r\n   ![关闭“项目结构”对话框][ART05]\r\n\r\n> [!NOTE]\r\n> 有关在 IntelliJ 中创建项目的详细信息，请参阅 JetBrains 网站上的 [Configuring Artifacts]（配置项目）。\r\n>\r\n\r\n### <a name=\"build-the-artifact-for-deployment\"></a>生成要部署的项目\r\n\r\n1. 单击“Build”（生成），然后单击“Artifacts”（项目）。\r\n\r\n   ![“生成项目”命令][BU04]\r\n\r\n1. 当出现“Build Artifact”（生成项目）上下文菜单时，请单击“Build”（生成）。\r\n\r\n   ![“生成项目”上下文菜单][BU05]\r\n\r\nIntelliJ 应在项目工具窗口中显示 Spring Boot 应用的已完成项目。\r\n\r\n   ![创建的项目][BU06]\r\n\r\n## <a name=\"publish-your-web-app-to-azure-by-using-a-docker-container\"></a>使用 Docker 容器将 Web 应用发布到 Azure\r\n\r\n1. 如果尚未登录到 Azure 帐户，请执行[用于 IntelliJ 的 Azure 工具包的登录说明][Azure Sign In for IntelliJ]中的步骤。\r\n\r\n1. 在“项目资源管理器”工具窗口中，右键单击该项目，然后选择“Azure” > “Publish as Docker Container”（发布为 Docker 容器）。\r\n\r\n   ![“发布为 Docker 容器”命令][PU01]\r\n\r\n1. 当显示“在 Azure 上部署 Docker 容器”对话框时，任何现有的 Docker 主机均会显示。 如果选择部署到现有主机，可以跳到步骤 4。 否则，使用以下步骤创建主机：\r\n\r\n   a. 单击绿色加号（“+”）符号。\r\n\r\n      ![添加新的 Docker 主机][PU02]\r\n\r\n   b. 当显示“创建 Docker 主机”对话框时，可以选择接受默认设置，也可以为新的 Docker 主机指定任何自定义设置。 （有关各种设置的详细说明，请参阅[使用用于 IntelliJ 的 Azure 工具包将 Web 应用发布为 Docker 容器][Publish Container with Azure Toolkit]。）在指定了要使用的设置后，单击“下一步”。\r\n\r\n      ![指定 Docker 主机选项][PU03a]\r\n\r\n   c. 可以选择使用 Azure Key Vault 中的现有登录凭据，也可以选择输入新的 Docker 登录凭据。 在指定了选项后单击“完成”。\r\n\r\n      ![指定 Docker 主机凭据][PU03b]\r\n\r\n1. 选择 Docker 主机，然后单击“下一步”。\r\n\r\n   ![选择要使用的 Docker 主机][PU04]\r\n\r\n1. 在“在 Azure 上部署 Docker 容器”对话框的最后一页上，指定以下选项：\r\n\r\n   a. 可以选择为要托管 Docker 容器的容器指定一个自定义名称，也可以接受默认设置。\r\n\r\n   b. 使用以下语法输入 Docker 主机的 TCP 端口：[外部端口]:[内部端口]。 例如，“80:8080”指定外部端口为“80”，默认的内部 Spring Boot 端口为“8080”。\r\n   \r\n      如果已自定义内部端口（例如通过编辑 application.yml 文件进行自定义），则需指定端口号，以便在 Azure 中进行正确路由。\r\n\r\n   c. 在配置了这些选项后，单击“完成”。\r\n\r\n   ![在 Azure 上部署 Docker 容器][PU05]\r\n\r\n1. Azure 工具包完成发布后，Azure 活动日志显示状态为“已发布”。\r\n\r\n   ![已成功部署 Docker 主机][PU06]\r\n\r\n## <a name=\"next-steps\"></a>后续步骤\r\n\r\n[!INCLUDE [azure-toolkit-additional-resources](../includes/azure-toolkit-additional-resources.md)]\r\n\r\n若要了解使用 IntelliJ 创建 Spring Boot 应用的其他方法，请参阅 JetBrains 网站上的[创建 Spring Boot 项目](https://www.jetbrains.com/help/idea/creating-spring-boot-projects.html)。\r\n\r\n<!-- URL List -->\r\n\r\n[Azure Management Portal]: https://manage.windowsazure.cn\r\n[Azure Sign In for IntelliJ]: ./azure-toolkit-for-intellij-sign-in-instructions.md\r\n[Configuring Artifacts]: https://www.jetbrains.com/help/idea/2016.1/configuring-artifacts.html（配置项目）\r\n[Docker]: https://www.docker.com/\r\n[Publish Container with Azure Toolkit]: ./azure-toolkit-for-intellij-publish-as-docker-container.md\r\n[Spring Boot]: http://projects.spring.io/spring-boot/\r\n[Spring Framework]: https://spring.io/\r\n\r\n<!-- IMG List -->\r\n\r\n[CL01]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL01.png\r\n[CL02a]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL02a.png\r\n[CL02b]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL02b.png\r\n[CL03]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL03.png\r\n[CL04]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL04.png\r\n[CL05]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL05.png\r\n[CL06]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL06.png\r\n[CL07]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL07.png\r\n[CL08]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL08.png\r\n[CL09]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL09.png\r\n[CL10]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL10.png\r\n[CL11]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL11.png\r\n[CL12]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL12.png\r\n[CL13]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL13.png\r\n[CL14]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/CL14.png\r\n\r\n[ART01]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/ART01.png\r\n[ART02]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/ART02.png\r\n[ART03]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/ART03.png\r\n[ART04a]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/ART04a.png\r\n[ART04b]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/ART04b.png\r\n[ART04c]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/ART04c.png\r\n[ART04d]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/ART04d.png\r\n[ART05]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/ART05.png\r\n\r\n[BU01]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/BU01.png\r\n[BU02]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/BU02.png\r\n[BU03]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/BU03.png\r\n[BU04]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/BU04.png\r\n[BU05]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/BU05.png\r\n[BU06]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/BU06.png\r\n\r\n[PU01]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/PU01.png\r\n[PU02]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/PU02.png\r\n[PU03a]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/PU03a.png\r\n[PU03b]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/PU03b.png\r\n[PU04]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/PU04.png\r\n[PU05]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/PU05.png\r\n[PU06]: ./media/azure-toolkit-for-intellij-publish-spring-boot-docker-app/PU06.png\r\n\r\n"}