{"Title":"如何使用 paho mqttv3 库发送消息到 Azure IoT 中心","Description":"如何使用 paho mqttv3 库发送消息到 Azure IoT 中心","Content":"\r\n# 如何使用 paho mqttv3 库发送消息到 Azure IoT 中心\r\n\r\nAzure IoT 中心支持多种协议，比如 AMQP， MQTT 等等，也支持多种语言，比如 Java， C 等等。这意味着，除了使用 Azure 官方提供的 IoT 中心 SDK 之外，还可以使用社区中一些常用的库来与 Azure IoT 中心进行交互。这篇文章将演示如何使用 paho mqttv3 库发送消息到 Azure IoT 中心，以及如何利用 property_bag 发送包含其他属性的消息。\r\n\r\n## 添加引用\r\n\r\n```\r\n<dependency>\r\n    <groupId>org.eclipse.paho</groupId>\r\n    <artifactId>org.eclipse.paho.client.mqttv3</artifactId>\r\n    <version>1.1.0</version>\r\n</dependency>\r\n<!-- for base64 decode and encode -->\r\n<dependency>\r\n    <groupId>commons-codec</groupId>\r\n    <artifactId>commons-codec</artifactId>\r\n    <version>1.10</version>\r\n</dependency>\r\n```\r\n\r\n## 生成 SAS 令牌\r\n\r\nSAS 令牌将作为基于 MQTT 协议连接 Azure IoT 中心时使用的密码。\r\n\r\n```\r\nprivate static String generateSasToken(String serverUri, String key) throws UnsupportedEncodingException {\r\n        String tokenFormat = \"SharedAccessSignature sig=%s&se=%s&sr=%s\";\r\n        String scope = URLEncoder.encode(serverUri, StandardCharsets.UTF_8.toString());\r\n        long expiryTime = System.currentTimeMillis() / 1000l + 600 + 1l;\r\n        String signatureStr = generateSignature(scope, expiryTime, key);\r\n\r\n        return String.format(tokenFormat, signatureStr, expiryTime, scope);\r\n}\r\nprivate static String generateSignature(String resrouceUri, long expiryTime, String deviceKey) throws UnsupportedEncodingException\r\n{\r\n        byte[] rawSig = String.format(\"%s\\n%s\", resrouceUri, expiryTime).getBytes(StandardCharsets.UTF_8);\r\n        byte[] decodedDeviceKey = Base64.decodeBase64(deviceKey.getBytes());\r\n        String hmacSha256 = \"HmacSHA256\";\r\n        SecretKeySpec secretKey = new SecretKeySpec(decodedDeviceKey, hmacSha256);\r\n        byte[] encryptedSig = null;\r\n        try\r\n        {\r\n            Mac hMacSha256 = Mac.getInstance(hmacSha256);\r\n            hMacSha256.init(secretKey);\r\n            encryptedSig = hMacSha256.doFinal(rawSig);\r\n        }\r\n        catch (NoSuchAlgorithmException e)\r\n        {\r\n            // should never happen, since the algorithm is hard-coded\r\n        }\r\n        catch (InvalidKeyException e)\r\n        {\r\n            // should never happen, since the algorithm is hard-coded\r\n        }\r\n        byte[] encryptedSigBase64 = Base64.encodeBase64(encryptedSig);\r\n        String utf8Sig = new String(encryptedSigBase64, StandardCharsets.UTF_8);\r\n        String signatureStr = URLEncoder.encode(utf8Sig, StandardCharsets.UTF_8.name());\r\n        return signatureStr;\r\n}\r\n```\r\n\r\n## 连接 Azure IoT 中心\r\n\r\n```\r\nString hostName = \"\"; // e.g. iothubdemo.azure-devices.cn\r\nString deviceId = \"\";\r\nString deviceKey = \"\";\r\n\r\nMqttAsyncClient client = new MqttAsyncClient(serverURI, deviceId, new MemoryPersistence());\r\nMqttConnectOptions connOpts = new MqttConnectOptions();\r\nconnOpts.setUserName(hostName + \"/\" + deviceId);\r\nconnOpts.setPassword(generateSasToken(hostName + \"/devices/\" + deviceId, deviceKey).toCharArray());\r\nconnOpts.setMaxInflight(100);\r\nconnOpts.setCleanSession(false);\r\nconnOpts.setAutomaticReconnect(true);\r\n\r\nIMqttToken conToken = client.connect(connOpts);\r\nconToken.waitForCompletion();\r\nSystem.out.println(\"Connected to IOT Hub server \" + hostName);\r\n```\r\n\r\n## 发送消息\r\n\r\n```\r\nString msgStr = \"message \" + i;\r\nMqttMessage message = new MqttMessage(msgStr.getBytes());\r\nmessage.setQos(1);\r\nIMqttDeliveryToken token = client.publish(topic, message);\r\n// wait here will make everything serialization\r\ntoken.waitForCompletion();\r\nSystem.out.println(\"Sent message \" + i);\r\n```\r\n\r\n## 利用 property_bag 发送包含其他属性的消息\r\n\r\n### 添加 property_bag 到主题中\r\n\r\n```\r\n// demo for topic name with property_bag: devices/{device_id}/messages/events/{property_bag}\r\nString topicProperty = URLEncoder.encode(\"testp\", \"UTF-8\") + \"=\" + URLEncoder.encode(\"testv\", \"UTF-8\");\r\nString topicWithProperty = \"devices/\" + deviceId + \"/messages/events/\" + topicProperty;\r\n```\r\n\r\n### 发送消息到带有 property_bag 的主题\r\n\r\n```\r\n// demo for topic name with property_bag\r\n// in this way, all events will contains the property\r\nIMqttDeliveryToken delToken = client.publish(topicWithProperty, message);\r\n```\r\n\r\n## 资源链接\r\n\r\n示例代码：[https://github.com/wacn/AOG-CodeSample/tree/master/IotHub/Java/nature-mqtt-sample/](https://github.com/wacn/AOG-CodeSample/tree/master/IotHub/Java/nature-mqtt-sample/)"}