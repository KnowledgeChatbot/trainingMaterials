{"Title":"在 Azure 中构建 Node.js 和 MongoDB Web 应用","Description":"了解如何使在 Node.js 应用在 Azure 中运行，并使用 MongoDB 连接字符串连接到 Cosmos DB 数据库。","Content":"# <a name=\"build-a-nodejs-and-mongodb-web-app-in-azure\"></a>在 Azure 中构建 Node.js 和 MongoDB Web 应用\r\n\r\nAzure Web 应用提供高度可缩放、自修补的 Web 托管服务。 本教程演示如何在 Azure 中创建 Node.js Web 应用，并将其连接至 MongoDB 数据库。 完成本教程后，将获得一个在 [Azure App Service](app-service-web-overview.md) 中运行的 MEAN（MongoDB、Express、AngularJS 和 Node.js）应用程序）。 为简单起见，示例应用程序使用了 [MEAN.js web 框架](http://meanjs.org/)。\r\n\r\n![在 Azure 应用服务中运行的 MEAN.js 应用](./media/app-service-web-tutorial-nodejs-mongodb-app/meanjs-in-azure.png)\r\n\r\n学习内容：\r\n\r\n> [!div class=\"checklist\"]\r\n> * 在 Azure 中创建 MongoDB 数据库\r\n> * 将 Node.js 应用连接到 MongoDB\r\n> * 将应用部署到 Azure\r\n> * 更新数据模型并重新部署应用\r\n> * 从 Azure 流式传输诊断日志\r\n> * 在 Azure 门户中管理应用\r\n\r\n## <a name=\"prerequisites\"></a>先决条件\r\n\r\n完成本教程：\r\n\r\n1. [安装 Git](https://git-scm.com/)\r\n1. [安装 Node.js 和 NPM](https://nodejs.org/)\r\n1. [安装 Gulp.js](http://gulpjs.com/) [（MEAN.js](http://meanjs.org/docs/0.5.x/#getting-started) 要求的）\r\n1. [安装并运行 MongoDB 社区版](https://docs.mongodb.com/manual/administration/install-community/) \r\n\r\n[!INCLUDE [quickstarts-free-trial-note](../../includes/quickstarts-free-trial-note.md)]\r\n\r\n如果选择在本地安装并使用 CLI，本主题要求运行 Azure CLI 2.0 版或更高版本。 运行 `az --version` 即可查找版本。 如果需要进行安装或升级，请参阅[安装 Azure CLI 2.0](https://docs.azure.cn/zh-cn/cli/install-azure-cli?view=azure-cli-lastest)。 \r\n\r\n## <a name=\"test-local-mongodb\"></a>测试本地 MongoDB\r\n\r\n打开终端窗口并`cd`打开到`bin` MongoDB 安装的目录。 可使用此终端窗口运行本教程中的所有命令。\r\n\r\n在终端运行 `mongo` 以连接到本地 MongoDB 服务器。\r\n\r\n```bash\r\nmongo\r\n```\r\n\r\n如果连接成功，那么 MongoDB 数据库已经开始运行。 如果连接不成功，那么请确保本地 MongoDB 数据库按[安装 MongoDB 社区版](https://docs.mongodb.com/manual/administration/install-community/)中的步骤来启动。 通常，MongoDB 已安装，但是仍需要运行 `mongod` 来启动它。 \r\n\r\n完成 MongoDB 数据库测试后，请在终端键入 `Ctrl+C`。 \r\n\r\n## <a name=\"create-local-nodejs-app\"></a>创建本地 Node.js 应用\r\n\r\n在此步骤中，将设置本地 Node.js 项目。\r\n\r\n### <a name=\"clone-the-sample-application\"></a>克隆示例应用程序\r\n\r\n在终端窗口中，通过 `cd` 转到工作目录。  \r\n\r\n运行下列命令，克隆示例存储库。 \r\n\r\n```bash\r\ngit clone https://github.com/Azure-Samples/meanjs.git\r\n```\r\n\r\n此示例存储库包含 [MEAN.js 存储库](https://github.com/meanjs/mean)的副本。 它修改为在应用服务上运行（有关详细信息，请参阅 MEAN.js 存储库 [README 文件](https://github.com/Azure-Samples/meanjs/blob/master/README.md)）。\r\n\r\n### <a name=\"run-the-application\"></a>运行应用程序\r\n\r\n运行以下命令以安装所需安装包并启动应用程序。\r\n\r\n```bash\r\ncd meanjs\r\nnpm install\r\nnpm start\r\n```\r\n\r\n当应用完全加载后，会看见类似下方所示的消息：\r\n\r\n```console\r\n--\r\nMEAN.JS - Development Environment\r\n\r\nEnvironment:     development\r\nServer:          http://0.0.0.0:3000\r\nDatabase:        mongodb://localhost/mean-dev\r\nApp version:     0.5.0\r\nMEAN.JS version: 0.5.0\r\n--\r\n```\r\n\r\n在浏览器中导航到 http://localhost:3000。 在顶部菜单点击“注册”并创建一个测试用户。 \r\n\r\nMEAN.js 示例应用程序将用户数据存储在数据库中。 如果成功创建用户并登陆，那么应用会将数据写入本地 MongoDB 数据库。\r\n\r\n![MEAN.js 成功连接到 MongoDB](./media/app-service-web-tutorial-nodejs-mongodb-app/mongodb-connect-success.png)\r\n\r\n选择“管理员”>“管理文章”以添加一些文章。\r\n\r\n若要随时停止 Node.js，请在终端中按 `Ctrl+C`。 \r\n\r\n## <a name=\"create-production-mongodb\"></a>创建生产 MongoDB\r\n\r\n此步骤在 Azure 中创建一个 MongoDB 数据库。 将应用部署到 Azure 后，它会使用此云数据库。\r\n\r\n对于 MongoDB，本教程使用了 [Azure Cosmos DB](/documentdb/)。 Cosmos DB 支持 MongoDB 客户端连接。\r\n\r\n### <a name=\"create-a-resource-group\"></a>创建资源组\r\n\r\n[!INCLUDE [Create resource group](../../includes/app-service-web-create-resource-group-no-h.md)] \r\n\r\n### <a name=\"create-a-cosmos-db-account\"></a>创建 Cosmos DB 帐户\r\n\r\n使用 [az cosmosdb create](https://docs.azure.cn/zh-cn/cli/cosmosdb?view=azure-cli-latest#az_cosmosdb_create) 命令创建 Cosmos DB 帐户。\r\n\r\n在下面命令中，将 *\\<cosmosdb_name>* 占位符替换为一个唯一的 Cosmos DB 名称。 此名称将用作 Cosmos DB 终结点 `https://<cosmosdb_name>.documents.azure.cn/` 的一部分，因此这个名称需要在 Azure 中的所有 Cosmos DB 帐户中具有唯一性。 此名称只能包含小写字母、数字以及连字符 (-)，同时长度必须为 3 到 50 个字符。\r\n\r\n```azurecli\r\naz cosmosdb create \\\r\n    --name <cosmosdb_name> \\\r\n    --resource-group myResourceGroup \\\r\n    --kind MongoDB\r\n```\r\n\r\n--Kind MongoDB 参数启用 MongoDB 客户端连接。\r\n\r\n创建 Cosmos DB 帐户后，Azure CLI 将显示类似于以下示例的信息：\r\n\r\n```json\r\n{\r\n  \"consistencyPolicy\":\r\n  {\r\n    \"defaultConsistencyLevel\": \"Session\",\r\n    \"maxIntervalInSeconds\": 5,\r\n    \"maxStalenessPrefix\": 100\r\n  },\r\n  \"databaseAccountOfferType\": \"Standard\",\r\n  \"documentEndpoint\": \"https://<cosmosdb_name>.documents.azure.cn:443/\",\r\n  \"failoverPolicies\": \r\n  ...\r\n  < Output truncated for readability >\r\n}\r\n```\r\n\r\n## <a name=\"connect-app-to-production-mongodb\"></a>将应用连接到生产 MongoDB\r\n\r\n在此步骤中，使用 MongoDB 连接字符串将 MEAN.js 示例应用程序连接至刚创建的 Cosmos DB 数据库。 \r\n\r\n### <a name=\"retrieve-the-database-key\"></a>检索数据库密钥\r\n\r\n若要连接到 Cosmos DB 数据库，需要数据库键。 使用 [az cosmosdb list-keys](https://docs.azure.cn/zh-cn/cli/cosmosdb?view=azure-cli-latest#az_cosmosdb_list_keys) 命令检索主键。\r\n\r\n```azurecli\r\naz cosmosdb list-keys --name <cosmosdb_name> --resource-group myResourceGroup\r\n```\r\n\r\nAzure CLI 显示类似于以下示例的信息：\r\n\r\n```json\r\n{\r\n  \"primaryMasterKey\": \"RS4CmUwzGRASJPMoc0kiEvdnKmxyRILC9BWisAYh3Hq4zBYKr0XQiSE4pqx3UchBeO4QRCzUt1i7w0rOkitoJw==\",\r\n  \"primaryReadonlyMasterKey\": \"HvitsjIYz8TwRmIuPEUAALRwqgKOzJUjW22wPL2U8zoMVhGvregBkBk9LdMTxqBgDETSq7obbwZtdeFY7hElTg==\",\r\n  \"secondaryMasterKey\": \"Lu9aeZTiXU4PjuuyGBbvS1N9IRG3oegIrIh95U6VOstf9bJiiIpw3IfwSUgQWSEYM3VeEyrhHJ4rn3Ci0vuFqA==\",\r\n  \"secondaryReadonlyMasterKey\": \"LpsCicpVZqHRy7qbMgrzbRKjbYCwCKPQRl0QpgReAOxMcggTvxJFA94fTi0oQ7xtxpftTJcXkjTirQ0pT7QFrQ==\"\r\n}\r\n```\r\n\r\n复制 `primaryMasterKey` 的值。 下一步骤需要用到此信息。\r\n\r\n<a name=\"devconfig\"></a>\r\n\r\n### <a name=\"configure-the-connection-string-in-your-nodejs-application\"></a>在 Node.js 应用程序中配置连接字符串\r\n\r\n在本地 MEAN.js 存储库的 _config/env/_ 文件夹中，创建名为 _local-production.js_ 的文件。 默认情况下，通过配置 _.gitignore_ 确保此文件位于存储库之外。 \r\n\r\n将以下代码复制到该文件中。 请确保将两个 \\<cosmosdb_name> 占位符替换为 Cosmos DB 数据库名称，将 \\<primary_master_key> 占位符替换为在先前步骤中复制的键。\r\n\r\n```javascript\r\nmodule.exports = {\r\n  db: {\r\n    uri: 'mongodb://<cosmosdb_name>:<primary_master_key>@<cosmosdb_name>.documents.azure.cn:10250/mean?ssl=true&sslverifycertificate=false'\r\n  }\r\n};\r\n```\r\n\r\n需要 `ssl=true` 选项，因为 [Cosmos DB 需要 SSL](../cosmos-db/connect-mongodb-account.md#connection-string-requirements)。 \r\n\r\n保存所做更改。\r\n\r\n### <a name=\"test-the-application-in-production-mode\"></a>在生产模式下测试应用程序 \r\n\r\n运行以下命令缩减和捆绑用于生产环境的脚本。 这一进程将生成生产环境所需的文件。\r\n\r\n```bash\r\ngulp prod\r\n```\r\n\r\n运行下列命令，以使用在 _config/env/local-production.js_ 中配置的连接字符串。\r\n\r\n```bash\r\n# Bash\r\nNODE_ENV=production node server.js\r\n\r\n# Windows PowerShell\r\n$env:NODE_ENV = \"production\" \r\nnode server.js\r\n```\r\n\r\n`NODE_ENV=production` 设置环境变量，用于指示 Node.js 在生产环境中运行。  `node server.js` 使用存储库根路径中的 `server.js` 启动 Node.js 服务器。 这就是 Node.js 应用程序在 Azure 中加载的方式。 \r\n\r\n在加载应用时请进行检查，确保它在生产环境中运行：\r\n\r\n```console\r\n--\r\nMEAN.JS\r\n\r\nEnvironment:     production\r\nServer:          http://0.0.0.0:8443\r\nDatabase:        mongodb://<cosmosdb_name>:<primary_master_key>@<cosmosdb_name>.documents.azure.cn:10250/mean?ssl=true&sslverifycertificate=false\r\nApp version:     0.5.0\r\nMEAN.JS version: 0.5.0\r\n```\r\n\r\n在浏览器中导航到 http://localhost:8443。 在顶部菜单点击“注册”并创建一个测试用户。 如果成功创建用户并登陆，那么应用会将数据写入 Azure 中的 Cosmos DB 数据库。 \r\n\r\n在终端中，通过键入 `Ctrl+C` 停止 Node.js。 \r\n\r\n## <a name=\"deploy-app-to-azure\"></a>将应用部署到 Azure\r\n\r\n在此步骤中，要将 MongoDB 连接的 Node.js 应用程序部署到 Azure 应用服务。\r\n\r\n### <a name=\"configure-a-deployment-user\"></a>配置部署用户\r\n\r\n[!INCLUDE [Configure deployment user](../../includes/configure-deployment-user-no-h.md)]\r\n\r\n### <a name=\"create-an-app-service-plan\"></a>创建应用服务计划\r\n\r\n[!INCLUDE [Create app service plan no h](../../includes/app-service-web-create-app-service-plan-no-h.md)]\r\n\r\n### <a name=\"create-a-web-app\"></a>创建 Web 应用\r\n\r\n[!INCLUDE [Create web app](../../includes/app-service-web-create-web-app-nodejs-no-h.md)] \r\n\r\n### <a name=\"configure-an-environment-variable\"></a>配置环境变量\r\n\r\n默认情况下，MEAN.js 项目会在 Git 存储库外部保留 _config/env/local-production.js_。 因此对于 Azure Web 应用，请使用应用设置来定义 MongoDB 连接字符串。\r\n\r\n若要设置应用设置，请使用 [az webapp config appsettings update](https://docs.azure.cn/zh-cn/cli/webapp/config/appsettings?view=azure-cli-latest)。 \r\n\r\n以下示例在 Azure Web 应用中配置 `MONGODB_URI` 应用设置。 替换 \\<app_name>、\\<cosmosdb_name> 和 \\<primary_master_key> 占位符。\r\n\r\n```azurecli\r\naz webapp config appsettings update \\\r\n    --name <app_name> \\\r\n    --resource-group myResourceGroup \\\r\n    --settings MONGODB_URI=\"mongodb://<cosmosdb_name>:<primary_master_key>@<cosmosdb_name>.documents.azure.cn:10250/mean?ssl=true\"\r\n```\r\n\r\n在 Node.js 代码中，使用 `process.env.MONGODB_URI` 访问此应用设置，如同访问任何环境变量那样。 \r\n\r\n在本地 MEAN.js 存储库中，打开具有特定于生产环境的配置的 _config/env/production.js_（而不是 _config/env/local-production.js_）。 默认 MEAN.js 应用已配置为使用你所创建的 `MONGODB_URI` 环境变量。\r\n\r\n```javascript\r\ndb: {\r\n  uri: ... || process.env.MONGODB_URI || ...,\r\n  ...\r\n},\r\n```\r\n\r\n### <a name=\"push-to-azure-from-git\"></a>从 Git 推送到 Azure\r\n\r\n[!INCLUDE [app-service-plan-no-h](../../includes/app-service-web-git-push-to-azure-no-h.md)]\r\n\r\n```bash\r\nCounting objects: 5, done.\r\nDelta compression using up to 4 threads.\r\nCompressing objects: 100% (5/5), done.\r\nWriting objects: 100% (5/5), 489 bytes | 0 bytes/s, done.\r\nTotal 5 (delta 3), reused 0 (delta 0)\r\nremote: Updating branch 'master'.\r\nremote: Updating submodules.\r\nremote: Preparing deployment for commit id '6c7c716eee'.\r\nremote: Running custom deployment command...\r\nremote: Running deployment command...\r\nremote: Handling node.js deployment.\r\n.\r\n.\r\n.\r\nremote: Deployment successful.\r\nTo https://<app_name>.scm.chinacloudsites.cn/<app_name>.git\r\n * [new branch]      master -> master\r\n``` \r\n\r\n可能已注意到，部署过程先运行 `npm install`，再运行 [Gulp](http://gulpjs.com/)。 应用服务在部署期间不会运行 Gulp 或 Grunt 任务，因此该示例存储库的根目录中有两个额外文件用于启用它： \r\n\r\n- _.deployment_ - 此文件告知应用服务将 `bash deploy.sh` 作为自定义部署脚本运行。\r\n- _deploy.sh_ - 自定义部署脚本。 查看该文件可以发现，它先运行 `npm install` 和 `bower install`，再运行 `gulp prod`。 \r\n\r\n可以通过此方法向基于 Git 的部署添加任意步骤。 无论何时重新启动 Azure Web 应用，应用服务都不会重新运行这些自动化任务。\r\n\r\n### <a name=\"browse-to-the-azure-web-app\"></a>浏览到 Azure Web 应用 \r\n\r\n使用 Web 浏览器浏览到已部署的 Web 应用。 \r\n\r\n```bash \r\nhttp://<app_name>.chinacloudsites.cn \r\n``` \r\n\r\n在顶部菜单中单击“注册”，然后创建一个虚构的用户。 \r\n\r\n如果操作成功，且应用自动登录到已创建的用户，则 Azure 中的 MEAN.js 应用已连接至 MongoDB (Cosmos DB) 数据库。 \r\n\r\n![在 Azure 应用服务中运行的 MEAN.js 应用](./media/app-service-web-tutorial-nodejs-mongodb-app/meanjs-in-azure.png)\r\n\r\n选择“管理员”>“管理文章”以添加一些文章。 \r\n\r\n**祝贺你！** 现已在 Azure 应用服务中运行数据驱动的 Node.js 应用。\r\n\r\n## <a name=\"update-data-model-and-redeploy\"></a>更新数据模型和重新部署\r\n\r\n在此步骤中，将更改 `article` 数据模型，并将其发布至 Azure。\r\n\r\n### <a name=\"update-the-data-model\"></a>更新数据模型\r\n\r\n打开 _modules/articles/server/models/article.server.model.js_。\r\n\r\n在 `ArticleSchema` 中，添加名为 `comment` 的 `String` 类型。 完成后，架构代码应该如下所示：\r\n\r\n```javascript\r\nvar ArticleSchema = new Schema({\r\n  ...,\r\n  user: {\r\n    type: Schema.ObjectId,\r\n    ref: 'User'\r\n  },\r\n  comment: {\r\n    type: String,\r\n    default: '',\r\n    trim: true\r\n  }\r\n});\r\n```\r\n\r\n### <a name=\"update-the-articles-code\"></a>更新文章代码\r\n\r\n更新剩余 `articles` 代码以使用 `comment`。\r\n\r\n需修改的文件有五个，分别是服务器控制器以及四个客户端视图。 \r\n\r\n打开 _modules/articles/server/controllers/articles.server.controller.js_。\r\n\r\n在 `update` 函数中，为 `article.comment` 赋值。 下面的代码显示了完整的 `update` 功能：\r\n\r\n```javascript\r\nexports.update = function (req, res) {\r\n  var article = req.article;\r\n\r\n  article.title = req.body.title;\r\n  article.content = req.body.content;\r\n  article.comment = req.body.comment;\r\n\r\n  ...\r\n};\r\n```\r\n\r\n打开 _modules/articles/client/views/view-article.client.view.html_。\r\n\r\n在 `</section>` 结尾标记正上方，添加下列行以显示 `comment` 和其余文章数据：\r\n\r\n```HTML\r\n<p class=\"lead\" ng-bind=\"vm.article.comment\"></p>\r\n```\r\n\r\n打开 _modules/articles/client/views/list-articles.client.view.html_。\r\n\r\n在 `</a>` 结尾标记正上方，添加下列行以显示 `comment` 和其余文章数据：\r\n\r\n```HTML\r\n<p class=\"list-group-item-text\" ng-bind=\"article.comment\"></p>\r\n```\r\n\r\n打开 _modules/articles/client/views/admin/list-articles.client.view.html_。\r\n\r\n在 `<div class=\"list-group\">` 元素内，以及 `</a>` 结尾标记正上方，添加下列行以显示 `comment` 和其余文章数据：\r\n\r\n```HTML\r\n<p class=\"list-group-item-text\" data-ng-bind=\"article.comment\"></p>\r\n```\r\n\r\n打开 _modules/articles/client/views/admin/form-article.client.view.html_。\r\n\r\n查找包含提交按钮的 `<div class=\"form-group\">` 元素，如下所示：\r\n\r\n```HTML\r\n<div class=\"form-group\">\r\n  <button type=\"submit\" class=\"btn btn-default\">{{vm.article._id ? 'Update' : 'Create'}}</button>\r\n</div>\r\n```\r\n\r\n在此标记的正上方，添加另一个 `<div class=\"form-group\">` 元素，它允许人们编辑 `comment` 字段。 新元素应如下所示：\r\n\r\n```HTML\r\n<div class=\"form-group\">\r\n  <label class=\"control-label\" for=\"comment\">Comment</label>\r\n  <textarea name=\"comment\" data-ng-model=\"vm.article.comment\" id=\"comment\" class=\"form-control\" cols=\"30\" rows=\"10\" placeholder=\"Comment\"></textarea>\r\n</div>\r\n```\r\n\r\n### <a name=\"test-your-changes-locally\"></a>在本地测试更改\r\n\r\n保存所有更改。\r\n\r\n在本地终端窗口中，在生产模式下再次测试所做的更改。\r\n\r\n```bash\r\n# Bash\r\ngulp prod\r\nNODE_ENV=production node server.js\r\n\r\n# Windows PowerShell\r\ngulp prod\r\n$env:NODE_ENV = \"production\" \r\nnode server.js\r\n```\r\n\r\n在浏览器中导航至 `http://localhost:8443`，并确保已登录。\r\n\r\n选择“管理员”>“管理文章” ，然后选择“+” 按钮以添加文章。\r\n\r\n现在可看到新 `Comment` 文本框。\r\n\r\n![已向文章添加注释字段](./media/app-service-web-tutorial-nodejs-mongodb-app/added-comment-field.png)\r\n\r\n在终端中，通过键入 `Ctrl+C` 停止 Node.js。 \r\n\r\n### <a name=\"publish-changes-to-azure\"></a>发布对 Azure 所做的更改\r\n\r\n在本地终端窗口中，提交在 Git 中所做的更改，然后将代码更改推送到 Azure。\r\n\r\n```bash\r\ngit commit -am \"added article comment\"\r\ngit push azure master\r\n```\r\n\r\n一旦 `git push` 完成，请导航至 Azure Web 应用，然后尝试新功能。\r\n\r\n![发布到 Azure 的模型和数据库更改](./media/app-service-web-tutorial-nodejs-mongodb-app/added-comment-field-published.png)\r\n\r\n如果先前添加过任何文章，现在仍能看到它们。 Cosmos DB 中的现有数据没有丢失。 同时，对数据架构的更新和现有数据都将保持不变。\r\n\r\n## <a name=\"stream-diagnostic-logs\"></a>流式传输诊断日志 \r\n\r\n当 Node.js 应用程序在 Azure 应用服务中运行时，可以将控制台日志传输到终端。 这样可以获得相同的诊断消息，以帮助调试应用程序错误。\r\n\r\n若要启动日志流式处理，请使用 [az webapp log tail](https://docs.azure.cn/zh-cn/cli/webapp/log?view=azure-cli-latest#az_webapp_log_tail) 命令。\r\n\r\n```azurecli\r\naz webapp log tail --name <app_name> --resource-group myResourceGroup\r\n``` \r\n\r\n启动日志流式处理后，请立即在浏览器中刷新 Azure Web 应用，以获取一些 Web 通信流。 现在能看到控制台日志传送到终端。\r\n\r\n通过键入 `Ctrl+C`，随时停止日志流式处理。 \r\n\r\n## <a name=\"manage-your-azure-web-app\"></a>管理 Azure Web 应用\r\n\r\n转到 [Azure 门户](https://portal.azure.cn)查看已创建的 Web 应用。\r\n\r\n从左侧菜单中单击“应用服务”，然后单击 Azure Web 应用的名称。\r\n\r\n![在门户中导航到 Azure Web 应用](./media/app-service-web-tutorial-nodejs-mongodb-app/access-portal.png)\r\n\r\n默认情况下，门户将显示 Web 应用的“概述”页。 在此页中可以查看应用的运行状况。 在此处还可以执行基本的管理任务，例如浏览、停止、启动、重新启动和删除。 页面左侧的选项卡显示可以打开的不同配置页。\r\n\r\n![Azure 门户中的“应用服务”页](./media/app-service-web-tutorial-nodejs-mongodb-app/web-app-blade.png)\r\n\r\n[!INCLUDE [cli-samples-clean-up](../../includes/cli-samples-clean-up.md)]\r\n\r\n<a name=\"next\"></a>\r\n## <a name=\"next-steps\"></a>后续步骤\r\n\r\n现已了解：\r\n\r\n> [!div class=\"checklist\"]\r\n> * 在 Azure 中创建 MongoDB 数据库\r\n> * 将 Node.js 应用连接到 MongoDB\r\n> * 将应用部署到 Azure\r\n> * 更新数据模型并重新部署应用\r\n> * 将日志从 Azure 流式传输到终端\r\n> * 在 Azure 门户中管理应用\r\n\r\n转到下一教程，了解如何向 Web 应用映射自定义 DNS 名称。\r\n\r\n> [!div class=\"nextstepaction\"] \r\n> [将现有的自定义 DNS 名称映射到 Azure Web 应用](app-service-web-tutorial-custom-domain.md)\r\n\r\n<!--Update_Description: update wording and code-->"}