{"Title":"连续部署到 Azure 应用服务","Description":"了解如何实现连续部署到 Azure 应用服务。","Content":"# <a name=\"continuous-deployment-to-azure-app-service\"></a>连续部署到 Azure 应用服务\r\n\r\n[!INCLUDE [azure-sdk-developer-differences](../../includes/azure-sdk-developer-differences.md)]\r\n\r\n本教程说明如何为 [Azure Web 应用](app-service-web-overview.md)配置持续部署工作流。 将应用服务与 GitHub 集成可以实现一种连续部署工作流，在其中，Azure 可以从发布到其中一种服务的项目中拉取最近的更新。 连续部署选项非常适合用于频繁集成多个分发内容的项目。\r\n\r\n若要了解如何通过 Azure 门户中未列出的云存储库（如 [GitLab](https://gitlab.com/)）手动配置连续部署，请参阅[使用手动步骤设置连续部署](https://github.com/projectkudu/kudu/wiki/Continuous-deployment#setting-up-continuous-deployment-using-manual-steps)。\r\n\r\n## <a name=\"overview\"></a>启用连续部署\r\n若要启用连续部署，请执行以下操作：\r\n\r\n1. 将应用内容发布到用于连续部署的存储库。  \r\n    若要深入了解如何将项目发布到这些服务，请参阅[创建存储库 (GitHub)]。\r\n\r\n    以下步骤仅适用于 GitHub 存储库。 有关 GitHub 以外的存储库，请参阅 [手动触发部署](https://github.com/projectkudu/kudu/wiki/Manually-triggering-a-deployment) 以设置 Webhook。\r\n\r\n2. 访问 [Azure 门户]，在应用的菜单边栏选项卡中单击“应用部署”>“部署选项”。 单击“选择源”，并选择“外部存储库”。\r\n2. 输入 GitHub 存储库的 URL 并输入要跟踪的分支。将“存储库类型”保留为“Git”，并单击“确定”\r\n\r\n    > [!NOTE]\r\n    > Azure 中国目前只支持公共存储库，因为我们无法输入 Web 应用的 Git 凭据。\r\n\r\n    Azure 会创建与所选存储库的关联，从指定的分支提取文件，并保留 Azure Web 应用存储库的副本。\r\n3. 在应用的“概览”边栏选项卡中，单击“获取发布配置文件”以下载 Web 应用的发布配置文件。\r\n4. 使用文本编辑器打开发布配置文件，并获取以下值。\r\n\r\n    ```\r\n    userName=\"$<YOUR_WEB_APP>\" userPWD=\"<SOME_BIG_RANDOM_TOKEN>\"\r\n    ```\r\n5. 在 GitHub 存储库页面上，单击“设置”，选择左侧“Webhooks”，并单击“Add webhook”\r\n6. 在“Payload URL”中，输入 `https://$<YOUR_WEB_APP>:<SOME_BIG_RANDOM_TOKEN>@<YOUR_WEB_APP>.scm.chinacloudsites.cn/deploy`，按原样保留所有其他项目，并单击“Add webhook”以保存新的 Webhook。\r\n5. 若要验证是否已成功部署应用，请在 Azure 门户的应用边栏选项卡顶部单击“URL”。\r\n6. 要验证是否能够在从所选存储库进行连续部署，请将更改推送到该存储库。 推送到存储库完成后，应用应该很快更新以反映更改。 可在应用的“部署选项”边栏选项卡中验证是否已拉取更新。\r\n\r\n## <a name=\"VSsolution\"></a>连续部署 Visual Studio 解决方案\r\n\r\n[!INCLUDE [azure-visual-studio-login-guide](../../includes/azure-visual-studio-login-guide.md)]\r\n\r\n将 Visual Studio 解决方案推送到 Azure 应用服务就像推送简单的 index.html 文件一样容易。 应用服务部署过程简化了所有细节，包括还原 NuGet 依赖项和生成应用程序二进制文件。 可以按照仅在 Git 存储库中维护代码的源控件最佳实践操作，并让应用服务部署处理其余工作。\r\n\r\n将 Visual Studio 解决方案推送到应用服务的步骤与[上一部分](#overview)中的步骤相同，前提是按以下方式配置解决方案和存储库：\r\n\r\n* 使用 Visual Studio 源代码管理选项生成如下图所示的 `.gitignore` 文件，或者在内容存储库根目录中手动添加一个 `.gitignore` 文件，其内容类似于此 [.gitignore 示例](https://github.com/github/gitignore/blob/master/VisualStudio.gitignore)。\r\n\r\n    ![](./media/app-service-continuous-deployment/VS_source_control.png)\r\n* 将整个解决方案的目录树添加到存储库中，其中 .sln 文件位于存储库根中。\r\n\r\n按照说明设置存储库并将 Azure 中的应用配置为从某个联机 Git 存储库连续发布后，便可以在 Visual Studio 中从本地开发 ASP.NET 应用程序，并且只需通过将所做的更改推送到联机的 Git 存储库即可连续部署代码。\r\n\r\n## <a name=\"disableCD\"></a>禁用连续部署\r\n若要禁用连续部署，请执行以下操作：\r\n\r\n1. 访问 [Azure 门户]，在应用的菜单边栏选项卡中单击“应用部署”>“部署选项”。 然后单击“部署选项”边栏选项卡中的“断开连接”。\r\n\r\n    ![](./media/app-service-continuous-deployment/cd_disconnect.png)\r\n2. 在显示确认消息时点击“是”后，若要从其他源设置发布，可返回到应用边栏选项卡，再单击“应用部署”>“部署选项”。\r\n\r\n## <a name=\"additional-resources\"></a>其他资源\r\n* [How to investigate common issues with continuous deployment（如何调查连续部署的常见问题）](https://github.com/projectkudu/kudu/wiki/Investigating-continuous-deployment)\r\n* [如何使用适用于 Azure 的 PowerShell]\r\n* [如何使用针对 Mac 和 Linux 的 Azure 命令行工具]\r\n* [Git 文档]\r\n* [项目 Kudu](https://github.com/projectkudu/kudu/wiki)\r\n* [Use Azure to automatically generate a CI/CD pipeline to deploy an ASP.NET 4 app](https://www.visualstudio.com/docs/build/get-started/aspnet-4-ci-cd-azure-automatic)（使用 Azure 自动生成部署 ASP.NET 4 应用的 CI/CD 管道）\r\n\r\n\r\n[Azure 门户]: https://portal.azure.cn\r\n[VSTS Portal]: https://www.visualstudio.com/products/visual-studio-team-services-vs.aspx\r\n[Installing Git]: http://git-scm.com/book/en/Getting-Started-Installing-Git\r\n[如何使用适用于 Azure 的 PowerShell]: https://docs.microsoft.com/powershell/azureps-cmdlets-docs\r\n[如何使用针对 Mac 和 Linux 的 Azure 命令行工具]:../cli-install-nodejs.md\r\n[Git 文档]: http://git-scm.com/documentation\r\n\r\n[创建存储库 (GitHub)]: https://help.github.com/articles/create-a-repo\r\n[Get started with VSTS]: https://www.visualstudio.com/docs/vsts-tfs-overview\r\n\r\n\r\n<!--Update_Description:update wording and link references-->"}