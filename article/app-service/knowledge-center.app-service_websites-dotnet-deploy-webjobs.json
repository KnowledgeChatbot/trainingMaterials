{"Title":"使用 Visual Studio 部署 Web 作业","Description":"了解如何使用 Visual Studio 将 Azure Web 作业部署到 Azure 应用服务 Web 应用。","Content":"# <a name=\"develop-and-deploy-webjobs-using-visual-studio---azure-app-service\"></a>使用 Visual Studio 开发和部署 WebJobs - Azure 应用服务\r\n\r\n## <a name=\"overview\"></a>概述\r\n本主题介绍如何使用 Visual Studio 将控制台应用程序项目作为 [Azure Web 作业](http://go.microsoft.com/fwlink/?LinkId=390226)部署到[应用服务](app-service-web-overview.md)中的 Web 应用。 有关如何使用 [Azure 门户](https://portal.azure.cn)部署 WebJobs 的信息，请参阅[使用 WebJobs 运行后台任务](web-sites-create-web-jobs.md)。\r\n[!INCLUDE [azure-visual-studio-login-guide](../../includes/azure-visual-studio-login-guide.md)]\r\n\r\n当 Visual Studio 部署启用 Web 作业的控制台应用程序项目时，它会执行两个任务：\r\n\r\n* 将运行时文件复制到 Web 应用中的相应文件夹（对于连续 Web 作业，该文件夹为 *App_Data/jobs/continuous*，对于计划的按需 Web 作业，则为 *App_Data/jobs/triggered*）。\r\n* 为已计划在特定时间运行的 Web 作业设置 [Azure 计划程序作业](#scheduler)。 （无需为连续 Web 作业执行此操作。）\r\n\r\n已启用 Web 作业的项目中添加了以下项：\r\n\r\n* [Microsoft.Web.WebJobs.Publish](http://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish/) NuGet 包。\r\n* [webjob-publish-settings.json](#publishsettings) 文件，其中包含部署和计划程序设置。 \r\n\r\n![显示在控制台应用中添加哪些项目才能让部署作为 Web 作业的插图](./media/websites-dotnet-deploy-webjobs/convert.png)\r\n\r\n可以将这些项添加到现有控制台应用程序项目，或使用模板创建已启用 Web 作业的新控制台应用程序项目。 \r\n\r\n以 Web 作业的方式部署项目，或者将项目链接到 Web 项目，因此每要部署 Web 项目时，项目便会自动部署。 为了链接项目，Visual Studio 会在 Web 项目的 [webjobs-list.json](#webjobslist) 文件中包含启用 Web 作业的项目的名称。\r\n\r\n![显示链接到 Web 项目的 Web 作业项目的插图](./media/websites-dotnet-deploy-webjobs/link.png)\r\n\r\n## <a name=\"prerequisites\"></a>先决条件\r\n\r\n如果使用的是 Visual Studio 2015，请安装[用于 .NET 的 Azure SDK (Visual Studio 2015)](/downloads/)。\r\n\r\n如果使用的是 Visual Studio 2017，请安装 [Azure 开发工作负荷](https://docs.microsoft.com/visualstudio/install/install-visual-studio#step-4---select-workloads)。\r\n\r\n## <a id=\"convert\"></a>为现有控制台应用程序项目启用 Web 作业部署\r\n可以使用两个选项：\r\n\r\n* [使用 Web 项目启用自动部署](#convertlink)。\r\n\r\n    配置现有控制台应用程序项目，以便在部署 Web 项目时，它以 Web 作业的方式自动部署。 要在运行相关 Web 应用程序的同一 Web 应用中运行 Web 作业时，请使用此选项。\r\n* [不使用 Web 项目启用部署](#convertnolink)。\r\n\r\n    配置现有控制台应用程序项目以 Web 作业的方式部署，且不提供 Web 项目的链接。 要在 Web 应用中运行 Web 作业，且 Web 应用中没有正在运行的 Web 应用程序时，请使用此选项。 为了能够缩放不受 Web 应用程序资源影响的 Web 作业资源，可能要执行此操作。\r\n\r\n### <a id=\"convertlink\"></a> 使用 Web 项目启用自动 Web 作业部署\r\n1. 右键单击“解决方案资源管理器”中的 Web 项目，并依次单击“添加” > “用作 Azure Web 作业的现有项目”。\r\n\r\n    ![用作 Azure Web 作业的现有项目](./media/websites-dotnet-deploy-webjobs/eawj.png)\r\n\r\n    此时显示“添加 Azure Web 作业”[](#configure)对话框。\r\n2. 在“项目名称”下拉列表中，选择要添加为 Web 作业的控制台应用程序项目。\r\n\r\n    ![在“添加 Azure Web 作业”对话框中选择项目](./media/websites-dotnet-deploy-webjobs/aaw1.png)\r\n3. 完成“添加 Azure Web 作业”[](#configure)对话框，并单击“确定”。 \r\n\r\n### <a id=\"convertnolink\"></a> 不使用 Web 项目启用 Web 作业部署\r\n1. 右键单击“解决方案资源管理器”中的控制台应用程序项目，然后单击“发布为 Azure Web 作业”。 \r\n\r\n    ![发布为 Azure Web 作业](./media/websites-dotnet-deploy-webjobs/paw.png)\r\n\r\n    此时显示“添加 Azure Web 作业”[](#configure)对话框，其“项目名称”框中已选中该项目。\r\n2. 完成“添加 Azure Web 作业”[](#configure)对话框，并单击“确定”。\r\n\r\n   此时显示“发布 Web”向导。  如果不打算立即发布，请关闭向导。 输入的设置会保存，以便在[部署项目](#deploy)时使用。\r\n\r\n## <a id=\"create\"></a>创建已启用 Web 作业的新项目\r\n若要创建已启用 Web 作业的新项目，可以使用控制台应用程序项目模板，并根据 [上一节](#convert)所述启用 Web 作业部署。 或者，可以使用 Web 作业新建项目模板：\r\n\r\n* [为独立的 Web 作业使用 Web 作业新建项目模板](#createnolink)\r\n\r\n    创建一个项目，并将它配置为以 Web 作业的方式部署，且不提供 Web 项目的链接。 要在 Web 应用中运行 Web 作业，且 Web 应用中没有正在运行的 Web 应用程序时，请使用此选项。 为了能够缩放不受 Web 应用程序资源影响的 Web 作业资源，可能要执行此操作。\r\n* [在链接到 Web 项目的 Web 作业中使用 Web 作业新建项目模板](#createlink)\r\n\r\n    创建一个项目，该项目配置为在针对位于相同解决方案中的 Web 项目进行部署时，自动以 Web 作业的方式部署。 要在运行相关 Web 应用程序的同一 Web 应用中运行 Web 作业时，请使用此选项。\r\n\r\n> [!NOTE]\r\n> Web 作业新建项目模板会自动安装 NuGet 包，并在 *Program.cs* 中包含适用于 [WebJobs SDK](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs) 的代码。 如果不想使用 WebJobs SDK，请删除或更改 Program.cs 中的 `host.RunAndBlock` 语句。\r\n> \r\n> \r\n\r\n### <a id=\"createnolink\"></a> 为独立的 Web 作业使用 Web 作业新建项目模板\r\n1. 依次单击“文件” > “新建项目”，然后在“新建项目”对话框中，依次单击“云” > “Azure Web 作业 (.NET Framework)”。\r\n\r\n    ![显示了 Web 作业模板的“新建项目”对话框](./media/websites-dotnet-deploy-webjobs/np.png)\r\n2. 按照前述说明，[将控制台应用程序项目设为独立的 Web 作业项目](#convertnolink)。\r\n\r\n### <a id=\"createlink\"></a> 在链接到 Web 项目的 Web 作业中使用 Web 作业新建项目模板\r\n1. 右键单击“解决方案资源管理器”中的 Web 项目，并依次单击“添加” > “新建 Azure Web 作业项目”。\r\n\r\n    ![“新建 Azure Web 作业项目”菜单项](./media/websites-dotnet-deploy-webjobs/nawj.png)\r\n\r\n    此时显示“添加 Azure Web 作业”[](#configure)对话框。\r\n2. 完成“添加 Azure Web 作业”[](#configure)对话框，并单击“确定”。\r\n\r\n## <a id=\"configure\"></a>添加 Azure Web 作业对话框\r\n可在“添加 Azure Web 作业”对话框中输入 Web 作业的名称和 Web 作业的运行模式设置。 \r\n\r\n![“添加 Azure Web 作业”对话框](./media/websites-dotnet-deploy-webjobs/aaw2.png)\r\n\r\n此对话框中的字段对应于 Azure 门户的“添加 WebJob”对话框中的字段。 有关详细信息，请参阅[使用 Web 作业运行后台任务](web-sites-create-web-jobs.md)。\r\n\r\n> [!NOTE]\r\n> * 有关命令行部署的信息，请参阅[启用 Azure Web 作业的命令行或连续传送](https://azure.microsoft.com/blog/2014/08/18/enabling-command-line-or-continuous-delivery-of-azure-webjobs/)。\r\n> * 如果部署了某个 WebJob，但后来想要更改该 WebJob 的类型并重新部署，则需要删除 *webjobs-publish-settings.json* 文件。 这样，Visual Studio 就会再次显示发布选项，使你可以更改 Web 作业的类型。\r\n> * 如果部署了某个 Web 作业，并随后将运行模式从连续更改为非连续（或相反），则在重新部署时，Visual Studio 将在 Azure 中创建新的 Web 作业。 如果更改了其他计划设置但保持运行模式不变，或在计划模式与按需模式之间切换，则 Visual Studio 会更新现有的作业，而不是创建新的作业。\r\n> \r\n> \r\n\r\n## <a id=\"publishsettings\"></a>webjob-publish-settings.json\r\n设置 Web 作业部署的控制台应用程序时，Visual Studio 会安装 [Microsoft.Web.WebJobs.Publish](http://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish/) NuGet 包，并将计划信息存储在 Web 作业项目的项目 *Properties* 文件夹中的 *webjob-publish-settings.json* 文件内。 以下是该文件的示例：\r\n\r\n        {\r\n          \"$schema\": \"http://schemastore.org/schemas/json/webjob-publish-settings.json\",\r\n          \"webJobName\": \"WebJob1\",\r\n          \"startTime\": \"null\",\r\n          \"endTime\": \"null\",\r\n          \"jobRecurrenceFrequency\": \"null\",\r\n          \"interval\": null,\r\n          \"runMode\": \"Continuous\"\r\n        }\r\n\r\n可以编辑此文件目录，Visual Studio 会提供 IntelliSense。 在 [http://schemastore.org](http://schemastore.org/schemas/json/webjob-publish-settings.json) 中可查看存储的文件架构。  \r\n\r\n## <a id=\"webjobslist\"></a>webjobs-list.json\r\n如果将已启用 Web 作业的项目链接到 Web 项目，Visual Studio 会将 Web 作业项目的名称存储在 Web 项目 *Properties* 文件夹的 *webjobs-list.json* 文件中。 该列表可能包含多个 Web 作业项目，如以下示例所示：\r\n\r\n        {\r\n          \"$schema\": \"http://schemastore.org/schemas/json/webjobs-list.json\",\r\n          \"WebJobs\": [\r\n            {\r\n              \"filePath\": \"../ConsoleApplication1/ConsoleApplication1.csproj\"\r\n            },\r\n            {\r\n              \"filePath\": \"../WebJob1/WebJob1.csproj\"\r\n            }\r\n          ]\r\n        }\r\n\r\n可以编辑此文件目录，Visual Studio 会提供 IntelliSense。 在 [http://schemastore.org](http://schemastore.org/schemas/json/webjobs-list.json) 中可查看存储的文件架构。\r\n\r\n## <a id=\"deploy\"></a>部署 Web 作业项目\r\n已链接到 Web 项目的 Web 作业项目会通过 Web 项目自动部署。 有关 Web 项目部署的信息，请参阅左侧导航区域中的“操作指南” > “部署应用”。\r\n\r\n若要自动部署某个 Web 作业项目，请在“解决方案资源管理器”中右键单击该项目，然后单击“发布为 Azure Web 作业”。 \r\n\r\n![发布为 Azure Web 作业](./media/websites-dotnet-deploy-webjobs/paw.png)\r\n\r\n对于独立的 Web 作业，会显示 Web 项目使用的相同“发布 Web”向导，但其中的可更改设置更少。\r\n"}