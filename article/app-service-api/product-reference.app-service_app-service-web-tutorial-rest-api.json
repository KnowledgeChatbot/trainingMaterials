{"Title":"Azure 应用服务中的 Node.js API 应用","Description":"了解如何创建 Node.js RESTful API 并将其部署到 Azure 应用服务中的 API 应用。","Content":"# <a name=\"build-a-nodejs-restful-api-and-deploy-it-to-an-api-app-in-azure\"></a>构建 Node.js RESTful API 并将它部署到 Azure 中的 API 应用\r\n\r\n本快速入门介绍如何使用 [Swagger](http://swagger.io/) 定义创建以 Node.js [Express](http://expressjs.com/) 编写的 REST API，并在 Azure 上部署它。 使用命令行工具创建应用，使用 [Azure CLI](https://docs.azure.cn/zh-cn/cli/get-started-with-azure-cli?view=azure-cli-lastest) 配置资源，并使用 Git 部署该应用。  完成后，即可拥有一个在 Azure 上运行的有效示例 REST API。\r\n\r\n## <a name=\"prerequisites\"></a>先决条件\r\n\r\n* [Git](https://git-scm.com/)\r\n* [Node.js 和 NPM](https://nodejs.org/)\r\n\r\n[!INCLUDE [quickstarts-free-trial-note](../../includes/quickstarts-free-trial-note.md)]\r\n\r\n\r\n如果选择在本地安装并使用 CLI，本主题要求运行 Azure CLI 2.0 版或更高版本。 运行 `az --version` 即可查找版本。 如果需要进行安装或升级，请参阅[安装 Azure CLI 2.0](https://docs.azure.cn/zh-cn/cli/install-azure-cli?view=azure-cli-lastest)。 \r\n\r\n## <a name=\"prepare-your-environment\"></a>准备环境\r\n\r\n1. 在终端窗口中，运行以下命令，将示例克隆到本地计算机。\r\n\r\n    ```bash\r\n    git clone https://github.com/Azure-Samples/app-service-api-node-contact-list\r\n    ```\r\n\r\n2. 切换到包含示例代码的目录。\r\n\r\n    ```bash\r\n    cd app-service-api-node-contact-list\r\n    ```\r\n\r\n3. 在本地计算机上安装 [Swaggerize](https://www.npmjs.com/package/swaggerize-express)。 Swaggerize 是一种工具，用于从 Swagger 定义生成用于 REST API 的 Node.js 代码。\r\n\r\n    ```bash\r\n    npm install -g yo\r\n    npm install -g generator-swaggerize\r\n    ```\r\n\r\n## <a name=\"generate-nodejs-code\"></a>生成 Node.js 代码 \r\n\r\n本教程部分为 API 开发工作流建模，将在其中先创建 Swagger 元数据，然后以此创建（自动生成）API 服务器代码基架。 \r\n\r\n将目录更改为 *start* 文件夹，然后运行 `yo swaggerize`。 Swaggerize 从 *api.json* 中的 Swagger 定义创建用于 API 的 Node.js 项目。\r\n\r\n```bash\r\ncd start\r\nyo swaggerize --apiPath api.json --framework express\r\n```\r\n\r\n当 Swaggerize 请求提供项目名称时，请使用 *ContactList*。\r\n   \r\n   ```bash\r\n   Swaggerize Generator\r\n   Tell us a bit about your application\r\n   ? What would you like to call this project: ContactList\r\n   ? Your name: Francis Totten\r\n   ? Your github user name: fabfrank\r\n   ? Your email: frank@fabrikam.net\r\n   ```\r\n   \r\n## <a name=\"customize-the-project-code\"></a>自定义项目代码\r\n\r\n1. 将 *lib* 文件夹复制到 `yo swaggerize` 创建的 *ContactList* 文件夹，然后将目录更改为 *ContactList*。\r\n\r\n    ```bash\r\n    cp -r lib/ ContactList/\r\n    cd ContactList\r\n    ```\r\n\r\n2. 安装 `jsonpath` 和 `swaggerize-ui` NPM 模块。 \r\n\r\n    ```bash\r\n    npm install --save jsonpath swaggerize-ui\r\n    ```\r\n\r\n3. 将 *handlers/contacts.js* 中的代码替换为以下代码： \r\n    ```javascript\r\n    'use strict';\r\n\r\n    var repository = require('../lib/contactRepository');\r\n\r\n    module.exports = {\r\n        get: function contacts_get(req, res) {\r\n            res.json(repository.all())\r\n        }\r\n    };\r\n    ```\r\n    此代码使用 *lib/contactRepository.js* 提供的 *lib/contacts.json* 中存储的 JSON 数据。 新的 *contacts.js* 代码将存储库中的所有联系人返回为 JSON 有效负载形式。 \r\n\r\n4. 将 **handlers/contacts/{id}.js** 文件中的代码替换为以下代码：\r\n\r\n    ```javascript\r\n    'use strict';\r\n\r\n    var repository = require('../../lib/contactRepository');\r\n\r\n    module.exports = {\r\n        get: function contacts_get(req, res) {\r\n            res.json(repository.get(req.params['id']));\r\n        }    \r\n    };\r\n    ```\r\n\r\n    此代码允许使用路径变量仅返回具有给定 ID 的联系人。\r\n\r\n5. 将 **server.js** 中的代码替换为以下代码：\r\n\r\n    ```javascript\r\n    'use strict';\r\n\r\n    var port = process.env.PORT || 8000; \r\n\r\n    var http = require('http');\r\n    var express = require('express');\r\n    var bodyParser = require('body-parser');\r\n    var swaggerize = require('swaggerize-express');\r\n    var swaggerUi = require('swaggerize-ui'); \r\n    var path = require('path');\r\n    var fs = require(\"fs\");\r\n    \r\n    fs.existsSync = fs.existsSync || require('path').existsSync;\r\n\r\n    var app = express();\r\n\r\n    var server = http.createServer(app);\r\n\r\n    app.use(bodyParser.json());\r\n\r\n    app.use(swaggerize({\r\n        api: path.resolve('./config/swagger.json'),\r\n        handlers: path.resolve('./handlers'),\r\n        docspath: '/swagger' \r\n    }));\r\n\r\n    // change four\r\n    app.use('/docs', swaggerUi({\r\n        docs: '/swagger'  \r\n    }));\r\n\r\n    server.listen(port, function () { \r\n    });\r\n    ```   \r\n\r\n    此代码进行了一些小的更改，可与 Azure 应用服务配合使用，并公开一个用于 API 的交互式 Web 界面。\r\n\r\n### <a name=\"test-the-api-locally\"></a>在本地测试 API\r\n\r\n1. 启动 Node.js 应用\r\n    ```bash\r\n    npm start\r\n    ```\r\n    \r\n2. 浏览到 http://localhost:8000/contacts，查看整个联系人列表的 JSON。\r\n   \r\n   ```json\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Barney Poland\",\r\n        \"email\": \"barney@contoso.com\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"Lacy Barrera\",\r\n        \"email\": \"lacy@contoso.com\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"name\": \"Lora Riggs\",\r\n        \"email\": \"lora@contoso.com\"\r\n    }\r\n   ```\r\n\r\n3. 浏览到 http://localhost:8000/contacts/2，查看具有两个 `id` 中其中一个的联系人。\r\n   \r\n    ```json\r\n    { \r\n        \"id\": 2,\r\n        \"name\": \"Lacy Barrera\",\r\n        \"email\": \"lacy@contoso.com\"\r\n    }\r\n    ```\r\n\r\n4. 在 http://localhost:8000/docs 使用 Swagger Web 界面测试 API。\r\n   \r\n    ![Swagger Web 界面](./media/app-service-web-tutorial-rest-api/swagger-ui.png)\r\n\r\n## <a id=\"createapiapp\"></a>创建 API 应用\r\n\r\n本部分将使用 Azure CLI 2.0 创建在 Azure 应用服务上托管 API 的资源。 \r\n\r\n1.  使用 [az login](https://docs.azure.cn/zh-cn/cli/index?view=azure-cli-latest#az_login) 命令登录到 Azure 订阅，并按照屏幕上的说明进行操作。\r\n\r\n    ```azurecli\r\n    az login\r\n    ```\r\n\r\n2. 如果有多个 Azure 订阅，则可将默认订阅更改为所需订阅。\r\n\r\n    ````azurecli\r\n    az account set --subscription <name or id>\r\n    ````\r\n\r\n3. [!INCLUDE [Create resource group](../../includes/app-service-api-create-resource-group.md)] \r\n\r\n4. [!INCLUDE [Create app service plan](../../includes/app-service-api-create-app-service-plan.md)]\r\n\r\n5. [!INCLUDE [Create API app](../../includes/app-service-api-create-api-app.md)] \r\n\r\n\r\n## <a name=\"deploy-the-api-with-git\"></a>使用 Git 部署 API\r\n\r\n通过将提交内容从本地 Git 存储库推送到 Azure 应用服务，将代码部署到 API 应用。\r\n\r\n1. [!INCLUDE [Configure your deployment credentials](../../includes/configure-deployment-user-no-h.md)] \r\n\r\n2. 初始化 *ContactList* 目录中的一个新存储库。 \r\n\r\n    ```bash\r\n    git init .\r\n    ```\r\n\r\n3. 从 Git 中排除在教程前面步骤中由 npm 创建的 *node_modules* 目录。 在当前目录中创建新的 `.gitignore` 文件，并在文件的任何位置添加新的以下文本行。\r\n\r\n    ```\r\n    node_modules/\r\n    ```\r\n    确认已通过 `git status` 忽略 `node_modules` 文件夹。\r\n\r\n4. 提交存储库更改。\r\n    ```bash\r\n    git add .\r\n    git commit -m \"initial version\"\r\n    ```\r\n\r\n5. [!INCLUDE [Push to Azure](../../includes/app-service-api-git-push-to-azure.md)]  \r\n \r\n## <a name=\"test-the-api--in-azure\"></a>在 Azure 中测试 API\r\n\r\n1. 在浏览器中打开 http://app_name.chinacloudsites.cn/contacts。 返回的 JSON 与本教程之前在本地提发出请求时返回的内容相同。\r\n\r\n   ```json\r\n   {\r\n       \"id\": 1,\r\n       \"name\": \"Barney Poland\",\r\n       \"email\": \"barney@contoso.com\"\r\n   },\r\n   {\r\n       \"id\": 2,\r\n       \"name\": \"Lacy Barrera\",\r\n       \"email\": \"lacy@contoso.com\"\r\n   },\r\n   {\r\n       \"id\": 3,\r\n       \"name\": \"Lora Riggs\",\r\n       \"email\": \"lora@contoso.com\"\r\n   }\r\n   ```\r\n\r\n2. 在浏览器中转到 `http://app_name.chinacloudsites.cn/docs` 终结点，试用在 Azure 中运行的 Swagger UI。\r\n\r\n    ![Swagger Ii](./media/app-service-web-tutorial-rest-api/swagger-azure-ui.png)\r\n\r\n    现在可通过将提交内容推送到 Azure Git 存储库，将示例 API 的更新部署到 Azure。\r\n\r\n## <a name=\"clean-up\"></a>清理\r\n\r\n若要清除此快速入门中创建的资源，请运行以下 Azure CLI 命令：\r\n\r\n```azurecli\r\naz group delete --name myResourceGroup\r\n```\r\n\r\n## <a name=\"next-step\"></a>后续步骤 \r\n> [!div class=\"nextstepaction\"]\r\n> [将现有的自定义 DNS 名称映射到 Azure Web 应用](app-service-web-tutorial-custom-domain.md)\r\n\r\n<!--Update_Description: update wording-->"}